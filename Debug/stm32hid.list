
stm32hid.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ef64  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f0  0800f078  0800f078  0001f078  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f568  0800f568  000203cc  2**0
                  CONTENTS
  4 .ARM          00000000  0800f568  0800f568  000203cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f568  0800f568  000203cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f568  0800f568  0001f568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f56c  0800f56c  0001f56c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003cc  20000000  0800f570  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bd0  200003d0  0800f93c  000203d0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000fa0  0800f93c  00020fa0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000203cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f8ba  00000000  00000000  000203f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000421d  00000000  00000000  0003fcaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017a0  00000000  00000000  00043ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001620  00000000  00000000  00045670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006bc6  00000000  00000000  00046c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c42e  00000000  00000000  0004d856  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099190  00000000  00000000  00069c84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00102e14  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007634  00000000  00000000  00102e68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200003d0 	.word	0x200003d0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800f05c 	.word	0x0800f05c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200003d4 	.word	0x200003d4
 800014c:	0800f05c 	.word	0x0800f05c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b088      	sub	sp, #32
 8000f48:	af04      	add	r7, sp, #16
 8000f4a:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8000f4c:	2364      	movs	r3, #100	; 0x64
 8000f4e:	9302      	str	r3, [sp, #8]
 8000f50:	2301      	movs	r3, #1
 8000f52:	9301      	str	r3, [sp, #4]
 8000f54:	f107 030f 	add.w	r3, r7, #15
 8000f58:	9300      	str	r3, [sp, #0]
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	2275      	movs	r2, #117	; 0x75
 8000f5e:	21d0      	movs	r1, #208	; 0xd0
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f002 fcb7 	bl	80038d4 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8000f66:	7bfb      	ldrb	r3, [r7, #15]
 8000f68:	2b68      	cmp	r3, #104	; 0x68
 8000f6a:	d13d      	bne.n	8000fe8 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8000f70:	2364      	movs	r3, #100	; 0x64
 8000f72:	9302      	str	r3, [sp, #8]
 8000f74:	2301      	movs	r3, #1
 8000f76:	9301      	str	r3, [sp, #4]
 8000f78:	f107 030e 	add.w	r3, r7, #14
 8000f7c:	9300      	str	r3, [sp, #0]
 8000f7e:	2301      	movs	r3, #1
 8000f80:	226b      	movs	r2, #107	; 0x6b
 8000f82:	21d0      	movs	r1, #208	; 0xd0
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f002 fbab 	bl	80036e0 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8000f8a:	2307      	movs	r3, #7
 8000f8c:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8000f8e:	2364      	movs	r3, #100	; 0x64
 8000f90:	9302      	str	r3, [sp, #8]
 8000f92:	2301      	movs	r3, #1
 8000f94:	9301      	str	r3, [sp, #4]
 8000f96:	f107 030e 	add.w	r3, r7, #14
 8000f9a:	9300      	str	r3, [sp, #0]
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	2219      	movs	r2, #25
 8000fa0:	21d0      	movs	r1, #208	; 0xd0
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f002 fb9c 	bl	80036e0 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8000fac:	2364      	movs	r3, #100	; 0x64
 8000fae:	9302      	str	r3, [sp, #8]
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	9301      	str	r3, [sp, #4]
 8000fb4:	f107 030e 	add.w	r3, r7, #14
 8000fb8:	9300      	str	r3, [sp, #0]
 8000fba:	2301      	movs	r3, #1
 8000fbc:	221c      	movs	r2, #28
 8000fbe:	21d0      	movs	r1, #208	; 0xd0
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f002 fb8d 	bl	80036e0 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8000fca:	2364      	movs	r3, #100	; 0x64
 8000fcc:	9302      	str	r3, [sp, #8]
 8000fce:	2301      	movs	r3, #1
 8000fd0:	9301      	str	r3, [sp, #4]
 8000fd2:	f107 030e 	add.w	r3, r7, #14
 8000fd6:	9300      	str	r3, [sp, #0]
 8000fd8:	2301      	movs	r3, #1
 8000fda:	221b      	movs	r2, #27
 8000fdc:	21d0      	movs	r1, #208	; 0xd0
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f002 fb7e 	bl	80036e0 <HAL_I2C_Mem_Write>
        return 0;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	e000      	b.n	8000fea <MPU6050_Init+0xa6>
    }
    return 1;
 8000fe8:	2301      	movs	r3, #1
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3710      	adds	r7, #16
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	0000      	movs	r0, r0
 8000ff4:	0000      	movs	r0, r0
	...

08000ff8 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8000ff8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000ffc:	b094      	sub	sp, #80	; 0x50
 8000ffe:	af04      	add	r7, sp, #16
 8001000:	6078      	str	r0, [r7, #4]
 8001002:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8001004:	2364      	movs	r3, #100	; 0x64
 8001006:	9302      	str	r3, [sp, #8]
 8001008:	230e      	movs	r3, #14
 800100a:	9301      	str	r3, [sp, #4]
 800100c:	f107 0308 	add.w	r3, r7, #8
 8001010:	9300      	str	r3, [sp, #0]
 8001012:	2301      	movs	r3, #1
 8001014:	223b      	movs	r2, #59	; 0x3b
 8001016:	21d0      	movs	r1, #208	; 0xd0
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f002 fc5b 	bl	80038d4 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 800101e:	7a3b      	ldrb	r3, [r7, #8]
 8001020:	021b      	lsls	r3, r3, #8
 8001022:	b21a      	sxth	r2, r3
 8001024:	7a7b      	ldrb	r3, [r7, #9]
 8001026:	b21b      	sxth	r3, r3
 8001028:	4313      	orrs	r3, r2
 800102a:	b21a      	sxth	r2, r3
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8001030:	7abb      	ldrb	r3, [r7, #10]
 8001032:	021b      	lsls	r3, r3, #8
 8001034:	b21a      	sxth	r2, r3
 8001036:	7afb      	ldrb	r3, [r7, #11]
 8001038:	b21b      	sxth	r3, r3
 800103a:	4313      	orrs	r3, r2
 800103c:	b21a      	sxth	r2, r3
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8001042:	7b3b      	ldrb	r3, [r7, #12]
 8001044:	021b      	lsls	r3, r3, #8
 8001046:	b21a      	sxth	r2, r3
 8001048:	7b7b      	ldrb	r3, [r7, #13]
 800104a:	b21b      	sxth	r3, r3
 800104c:	4313      	orrs	r3, r2
 800104e:	b21a      	sxth	r2, r3
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8001054:	7bbb      	ldrb	r3, [r7, #14]
 8001056:	021b      	lsls	r3, r3, #8
 8001058:	b21a      	sxth	r2, r3
 800105a:	7bfb      	ldrb	r3, [r7, #15]
 800105c:	b21b      	sxth	r3, r3
 800105e:	4313      	orrs	r3, r2
 8001060:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8001062:	7c3b      	ldrb	r3, [r7, #16]
 8001064:	021b      	lsls	r3, r3, #8
 8001066:	b21a      	sxth	r2, r3
 8001068:	7c7b      	ldrb	r3, [r7, #17]
 800106a:	b21b      	sxth	r3, r3
 800106c:	4313      	orrs	r3, r2
 800106e:	b21a      	sxth	r2, r3
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8001074:	7cbb      	ldrb	r3, [r7, #18]
 8001076:	021b      	lsls	r3, r3, #8
 8001078:	b21a      	sxth	r2, r3
 800107a:	7cfb      	ldrb	r3, [r7, #19]
 800107c:	b21b      	sxth	r3, r3
 800107e:	4313      	orrs	r3, r2
 8001080:	b21a      	sxth	r2, r3
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8001086:	7d3b      	ldrb	r3, [r7, #20]
 8001088:	021b      	lsls	r3, r3, #8
 800108a:	b21a      	sxth	r2, r3
 800108c:	7d7b      	ldrb	r3, [r7, #21]
 800108e:	b21b      	sxth	r3, r3
 8001090:	4313      	orrs	r3, r2
 8001092:	b21a      	sxth	r2, r3
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff f9b0 	bl	8000404 <__aeabi_i2d>
 80010a4:	f04f 0200 	mov.w	r2, #0
 80010a8:	4bb7      	ldr	r3, [pc, #732]	; (8001388 <MPU6050_Read_All+0x390>)
 80010aa:	f7ff fb3f 	bl	800072c <__aeabi_ddiv>
 80010ae:	4602      	mov	r2, r0
 80010b0:	460b      	mov	r3, r1
 80010b2:	6839      	ldr	r1, [r7, #0]
 80010b4:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff f9a0 	bl	8000404 <__aeabi_i2d>
 80010c4:	f04f 0200 	mov.w	r2, #0
 80010c8:	4baf      	ldr	r3, [pc, #700]	; (8001388 <MPU6050_Read_All+0x390>)
 80010ca:	f7ff fb2f 	bl	800072c <__aeabi_ddiv>
 80010ce:	4602      	mov	r2, r0
 80010d0:	460b      	mov	r3, r1
 80010d2:	6839      	ldr	r1, [r7, #0]
 80010d4:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff f990 	bl	8000404 <__aeabi_i2d>
 80010e4:	a3a2      	add	r3, pc, #648	; (adr r3, 8001370 <MPU6050_Read_All+0x378>)
 80010e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ea:	f7ff fb1f 	bl	800072c <__aeabi_ddiv>
 80010ee:	4602      	mov	r2, r0
 80010f0:	460b      	mov	r3, r1
 80010f2:	6839      	ldr	r1, [r7, #0]
 80010f4:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 80010f8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff fd7d 	bl	8000bfc <__aeabi_i2f>
 8001102:	4603      	mov	r3, r0
 8001104:	49a1      	ldr	r1, [pc, #644]	; (800138c <MPU6050_Read_All+0x394>)
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff fe80 	bl	8000e0c <__aeabi_fdiv>
 800110c:	4603      	mov	r3, r0
 800110e:	49a0      	ldr	r1, [pc, #640]	; (8001390 <MPU6050_Read_All+0x398>)
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff fcbf 	bl	8000a94 <__addsf3>
 8001116:	4603      	mov	r3, r0
 8001118:	461a      	mov	r2, r3
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	641a      	str	r2, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff f96d 	bl	8000404 <__aeabi_i2d>
 800112a:	a393      	add	r3, pc, #588	; (adr r3, 8001378 <MPU6050_Read_All+0x380>)
 800112c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001130:	f7ff fafc 	bl	800072c <__aeabi_ddiv>
 8001134:	4602      	mov	r2, r0
 8001136:	460b      	mov	r3, r1
 8001138:	6839      	ldr	r1, [r7, #0]
 800113a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff f95d 	bl	8000404 <__aeabi_i2d>
 800114a:	a38b      	add	r3, pc, #556	; (adr r3, 8001378 <MPU6050_Read_All+0x380>)
 800114c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001150:	f7ff faec 	bl	800072c <__aeabi_ddiv>
 8001154:	4602      	mov	r2, r0
 8001156:	460b      	mov	r3, r1
 8001158:	6839      	ldr	r1, [r7, #0]
 800115a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff f94d 	bl	8000404 <__aeabi_i2d>
 800116a:	a383      	add	r3, pc, #524	; (adr r3, 8001378 <MPU6050_Read_All+0x380>)
 800116c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001170:	f7ff fadc 	bl	800072c <__aeabi_ddiv>
 8001174:	4602      	mov	r2, r0
 8001176:	460b      	mov	r3, r1
 8001178:	6839      	ldr	r1, [r7, #0]
 800117a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 800117e:	f001 f8c3 	bl	8002308 <HAL_GetTick>
 8001182:	4602      	mov	r2, r0
 8001184:	4b83      	ldr	r3, [pc, #524]	; (8001394 <MPU6050_Read_All+0x39c>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff f92a 	bl	80003e4 <__aeabi_ui2d>
 8001190:	f04f 0200 	mov.w	r2, #0
 8001194:	4b80      	ldr	r3, [pc, #512]	; (8001398 <MPU6050_Read_All+0x3a0>)
 8001196:	f7ff fac9 	bl	800072c <__aeabi_ddiv>
 800119a:	4602      	mov	r2, r0
 800119c:	460b      	mov	r3, r1
 800119e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 80011a2:	f001 f8b1 	bl	8002308 <HAL_GetTick>
 80011a6:	4603      	mov	r3, r0
 80011a8:	4a7a      	ldr	r2, [pc, #488]	; (8001394 <MPU6050_Read_All+0x39c>)
 80011aa:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011b2:	461a      	mov	r2, r3
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011ba:	fb03 f202 	mul.w	r2, r3, r2
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80011c4:	4619      	mov	r1, r3
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80011cc:	fb03 f301 	mul.w	r3, r3, r1
 80011d0:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff f916 	bl	8000404 <__aeabi_i2d>
 80011d8:	4602      	mov	r2, r0
 80011da:	460b      	mov	r3, r1
 80011dc:	4610      	mov	r0, r2
 80011de:	4619      	mov	r1, r3
 80011e0:	f00d fd92 	bl	800ed08 <sqrt>
 80011e4:	e9c7 0108 	strd	r0, r1, [r7, #32]
    if (roll_sqrt != 0.0)
 80011e8:	f04f 0200 	mov.w	r2, #0
 80011ec:	f04f 0300 	mov.w	r3, #0
 80011f0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80011f4:	f7ff fbd8 	bl	80009a8 <__aeabi_dcmpeq>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d119      	bne.n	8001232 <MPU6050_Read_All+0x23a>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff f8fd 	bl	8000404 <__aeabi_i2d>
 800120a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800120e:	f7ff fa8d 	bl	800072c <__aeabi_ddiv>
 8001212:	4602      	mov	r2, r0
 8001214:	460b      	mov	r3, r1
 8001216:	4610      	mov	r0, r2
 8001218:	4619      	mov	r1, r3
 800121a:	f00d fbe5 	bl	800e9e8 <atan>
 800121e:	a358      	add	r3, pc, #352	; (adr r3, 8001380 <MPU6050_Read_All+0x388>)
 8001220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001224:	f7ff f958 	bl	80004d8 <__aeabi_dmul>
 8001228:	4602      	mov	r2, r0
 800122a:	460b      	mov	r3, r1
 800122c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001230:	e005      	b.n	800123e <MPU6050_Read_All+0x246>
    }
    else
    {
        roll = 0.0;
 8001232:	f04f 0200 	mov.w	r2, #0
 8001236:	f04f 0300 	mov.w	r3, #0
 800123a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001244:	425b      	negs	r3, r3
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff f8dc 	bl	8000404 <__aeabi_i2d>
 800124c:	4682      	mov	sl, r0
 800124e:	468b      	mov	fp, r1
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff f8d4 	bl	8000404 <__aeabi_i2d>
 800125c:	4602      	mov	r2, r0
 800125e:	460b      	mov	r3, r1
 8001260:	4650      	mov	r0, sl
 8001262:	4659      	mov	r1, fp
 8001264:	f00d fd4d 	bl	800ed02 <atan2>
 8001268:	a345      	add	r3, pc, #276	; (adr r3, 8001380 <MPU6050_Read_All+0x388>)
 800126a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800126e:	f7ff f933 	bl	80004d8 <__aeabi_dmul>
 8001272:	4602      	mov	r2, r0
 8001274:	460b      	mov	r3, r1
 8001276:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 800127a:	f04f 0200 	mov.w	r2, #0
 800127e:	4b47      	ldr	r3, [pc, #284]	; (800139c <MPU6050_Read_All+0x3a4>)
 8001280:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001284:	f7ff fb9a 	bl	80009bc <__aeabi_dcmplt>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d00a      	beq.n	80012a4 <MPU6050_Read_All+0x2ac>
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001294:	f04f 0200 	mov.w	r2, #0
 8001298:	4b41      	ldr	r3, [pc, #260]	; (80013a0 <MPU6050_Read_All+0x3a8>)
 800129a:	f7ff fbad 	bl	80009f8 <__aeabi_dcmpgt>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d114      	bne.n	80012ce <MPU6050_Read_All+0x2d6>
 80012a4:	f04f 0200 	mov.w	r2, #0
 80012a8:	4b3d      	ldr	r3, [pc, #244]	; (80013a0 <MPU6050_Read_All+0x3a8>)
 80012aa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80012ae:	f7ff fba3 	bl	80009f8 <__aeabi_dcmpgt>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d015      	beq.n	80012e4 <MPU6050_Read_All+0x2ec>
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80012be:	f04f 0200 	mov.w	r2, #0
 80012c2:	4b36      	ldr	r3, [pc, #216]	; (800139c <MPU6050_Read_All+0x3a4>)
 80012c4:	f7ff fb7a 	bl	80009bc <__aeabi_dcmplt>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d00a      	beq.n	80012e4 <MPU6050_Read_All+0x2ec>
    {
        KalmanY.angle = pitch;
 80012ce:	4935      	ldr	r1, [pc, #212]	; (80013a4 <MPU6050_Read_All+0x3ac>)
 80012d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80012d4:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 80012d8:	6839      	ldr	r1, [r7, #0]
 80012da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80012de:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 80012e2:	e012      	b.n	800130a <MPU6050_Read_All+0x312>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80012ea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80012ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80012f2:	e9cd 2300 	strd	r2, r3, [sp]
 80012f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80012fa:	482a      	ldr	r0, [pc, #168]	; (80013a4 <MPU6050_Read_All+0x3ac>)
 80012fc:	f000 f856 	bl	80013ac <Kalman_getAngle>
 8001300:	4602      	mov	r2, r0
 8001302:	460b      	mov	r3, r1
 8001304:	6839      	ldr	r1, [r7, #0]
 8001306:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001310:	4690      	mov	r8, r2
 8001312:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8001316:	f04f 0200 	mov.w	r2, #0
 800131a:	4b21      	ldr	r3, [pc, #132]	; (80013a0 <MPU6050_Read_All+0x3a8>)
 800131c:	4640      	mov	r0, r8
 800131e:	4649      	mov	r1, r9
 8001320:	f7ff fb6a 	bl	80009f8 <__aeabi_dcmpgt>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d008      	beq.n	800133c <MPU6050_Read_All+0x344>
        DataStruct->Gx = -DataStruct->Gx;
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001330:	4614      	mov	r4, r2
 8001332:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001342:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001346:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800134a:	e9cd 2300 	strd	r2, r3, [sp]
 800134e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001352:	4815      	ldr	r0, [pc, #84]	; (80013a8 <MPU6050_Read_All+0x3b0>)
 8001354:	f000 f82a 	bl	80013ac <Kalman_getAngle>
 8001358:	4602      	mov	r2, r0
 800135a:	460b      	mov	r3, r1
 800135c:	6839      	ldr	r1, [r7, #0]
 800135e:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
 8001362:	bf00      	nop
 8001364:	3740      	adds	r7, #64	; 0x40
 8001366:	46bd      	mov	sp, r7
 8001368:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800136c:	f3af 8000 	nop.w
 8001370:	00000000 	.word	0x00000000
 8001374:	40cc2900 	.word	0x40cc2900
 8001378:	00000000 	.word	0x00000000
 800137c:	40606000 	.word	0x40606000
 8001380:	1a63c1f8 	.word	0x1a63c1f8
 8001384:	404ca5dc 	.word	0x404ca5dc
 8001388:	40d00000 	.word	0x40d00000
 800138c:	43aa0000 	.word	0x43aa0000
 8001390:	42121eb8 	.word	0x42121eb8
 8001394:	2000043c 	.word	0x2000043c
 8001398:	408f4000 	.word	0x408f4000
 800139c:	c0568000 	.word	0xc0568000
 80013a0:	40568000 	.word	0x40568000
 80013a4:	20000048 	.word	0x20000048
 80013a8:	20000000 	.word	0x20000000

080013ac <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 80013ac:	b5b0      	push	{r4, r5, r7, lr}
 80013ae:	b092      	sub	sp, #72	; 0x48
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	e9c7 2300 	strd	r2, r3, [r7]
    double rate = newRate - Kalman->bias;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80013be:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80013c2:	f7fe fed1 	bl	8000168 <__aeabi_dsub>
 80013c6:	4602      	mov	r2, r0
 80013c8:	460b      	mov	r3, r1
 80013ca:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += dt * rate;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80013d4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80013d8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80013dc:	f7ff f87c 	bl	80004d8 <__aeabi_dmul>
 80013e0:	4602      	mov	r2, r0
 80013e2:	460b      	mov	r3, r1
 80013e4:	4620      	mov	r0, r4
 80013e6:	4629      	mov	r1, r5
 80013e8:	f7fe fec0 	bl	800016c <__adddf3>
 80013ec:	4602      	mov	r2, r0
 80013ee:	460b      	mov	r3, r1
 80013f0:	68f9      	ldr	r1, [r7, #12]
 80013f2:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001402:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001406:	f7ff f867 	bl	80004d8 <__aeabi_dmul>
 800140a:	4602      	mov	r2, r0
 800140c:	460b      	mov	r3, r1
 800140e:	4610      	mov	r0, r2
 8001410:	4619      	mov	r1, r3
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001418:	f7fe fea6 	bl	8000168 <__aeabi_dsub>
 800141c:	4602      	mov	r2, r0
 800141e:	460b      	mov	r3, r1
 8001420:	4610      	mov	r0, r2
 8001422:	4619      	mov	r1, r3
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800142a:	f7fe fe9d 	bl	8000168 <__aeabi_dsub>
 800142e:	4602      	mov	r2, r0
 8001430:	460b      	mov	r3, r1
 8001432:	4610      	mov	r0, r2
 8001434:	4619      	mov	r1, r3
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800143c:	f7fe fe96 	bl	800016c <__adddf3>
 8001440:	4602      	mov	r2, r0
 8001442:	460b      	mov	r3, r1
 8001444:	4610      	mov	r0, r2
 8001446:	4619      	mov	r1, r3
 8001448:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800144c:	f7ff f844 	bl	80004d8 <__aeabi_dmul>
 8001450:	4602      	mov	r2, r0
 8001452:	460b      	mov	r3, r1
 8001454:	4620      	mov	r0, r4
 8001456:	4629      	mov	r1, r5
 8001458:	f7fe fe88 	bl	800016c <__adddf3>
 800145c:	4602      	mov	r2, r0
 800145e:	460b      	mov	r3, r1
 8001460:	68f9      	ldr	r1, [r7, #12]
 8001462:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001472:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001476:	f7ff f82f 	bl	80004d8 <__aeabi_dmul>
 800147a:	4602      	mov	r2, r0
 800147c:	460b      	mov	r3, r1
 800147e:	4620      	mov	r0, r4
 8001480:	4629      	mov	r1, r5
 8001482:	f7fe fe71 	bl	8000168 <__aeabi_dsub>
 8001486:	4602      	mov	r2, r0
 8001488:	460b      	mov	r3, r1
 800148a:	68f9      	ldr	r1, [r7, #12]
 800148c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800149c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80014a0:	f7ff f81a 	bl	80004d8 <__aeabi_dmul>
 80014a4:	4602      	mov	r2, r0
 80014a6:	460b      	mov	r3, r1
 80014a8:	4620      	mov	r0, r4
 80014aa:	4629      	mov	r1, r5
 80014ac:	f7fe fe5c 	bl	8000168 <__aeabi_dsub>
 80014b0:	4602      	mov	r2, r0
 80014b2:	460b      	mov	r3, r1
 80014b4:	68f9      	ldr	r1, [r7, #12]
 80014b6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80014c6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80014ca:	f7ff f805 	bl	80004d8 <__aeabi_dmul>
 80014ce:	4602      	mov	r2, r0
 80014d0:	460b      	mov	r3, r1
 80014d2:	4620      	mov	r0, r4
 80014d4:	4629      	mov	r1, r5
 80014d6:	f7fe fe49 	bl	800016c <__adddf3>
 80014da:	4602      	mov	r2, r0
 80014dc:	460b      	mov	r3, r1
 80014de:	68f9      	ldr	r1, [r7, #12]
 80014e0:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80014f0:	f7fe fe3c 	bl	800016c <__adddf3>
 80014f4:	4602      	mov	r2, r0
 80014f6:	460b      	mov	r3, r1
 80014f8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001502:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001506:	f7ff f911 	bl	800072c <__aeabi_ddiv>
 800150a:	4602      	mov	r2, r0
 800150c:	460b      	mov	r3, r1
 800150e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    K[1] = Kalman->P[1][0] / S;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001518:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800151c:	f7ff f906 	bl	800072c <__aeabi_ddiv>
 8001520:	4602      	mov	r2, r0
 8001522:	460b      	mov	r3, r1
 8001524:	e9c7 2306 	strd	r2, r3, [r7, #24]

    double y = newAngle - Kalman->angle;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800152e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001532:	f7fe fe19 	bl	8000168 <__aeabi_dsub>
 8001536:	4602      	mov	r2, r0
 8001538:	460b      	mov	r3, r1
 800153a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    Kalman->angle += K[0] * y;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001544:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001548:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800154c:	f7fe ffc4 	bl	80004d8 <__aeabi_dmul>
 8001550:	4602      	mov	r2, r0
 8001552:	460b      	mov	r3, r1
 8001554:	4620      	mov	r0, r4
 8001556:	4629      	mov	r1, r5
 8001558:	f7fe fe08 	bl	800016c <__adddf3>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	68f9      	ldr	r1, [r7, #12]
 8001562:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800156c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001570:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001574:	f7fe ffb0 	bl	80004d8 <__aeabi_dmul>
 8001578:	4602      	mov	r2, r0
 800157a:	460b      	mov	r3, r1
 800157c:	4620      	mov	r0, r4
 800157e:	4629      	mov	r1, r5
 8001580:	f7fe fdf4 	bl	800016c <__adddf3>
 8001584:	4602      	mov	r2, r0
 8001586:	460b      	mov	r3, r1
 8001588:	68f9      	ldr	r1, [r7, #12]
 800158a:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001594:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double P01_temp = Kalman->P[0][1];
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800159e:	e9c7 2308 	strd	r2, r3, [r7, #32]

    Kalman->P[0][0] -= K[0] * P00_temp;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80015a8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80015ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80015b0:	f7fe ff92 	bl	80004d8 <__aeabi_dmul>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	4620      	mov	r0, r4
 80015ba:	4629      	mov	r1, r5
 80015bc:	f7fe fdd4 	bl	8000168 <__aeabi_dsub>
 80015c0:	4602      	mov	r2, r0
 80015c2:	460b      	mov	r3, r1
 80015c4:	68f9      	ldr	r1, [r7, #12]
 80015c6:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80015d0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80015d4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80015d8:	f7fe ff7e 	bl	80004d8 <__aeabi_dmul>
 80015dc:	4602      	mov	r2, r0
 80015de:	460b      	mov	r3, r1
 80015e0:	4620      	mov	r0, r4
 80015e2:	4629      	mov	r1, r5
 80015e4:	f7fe fdc0 	bl	8000168 <__aeabi_dsub>
 80015e8:	4602      	mov	r2, r0
 80015ea:	460b      	mov	r3, r1
 80015ec:	68f9      	ldr	r1, [r7, #12]
 80015ee:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 80015f8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80015fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001600:	f7fe ff6a 	bl	80004d8 <__aeabi_dmul>
 8001604:	4602      	mov	r2, r0
 8001606:	460b      	mov	r3, r1
 8001608:	4620      	mov	r0, r4
 800160a:	4629      	mov	r1, r5
 800160c:	f7fe fdac 	bl	8000168 <__aeabi_dsub>
 8001610:	4602      	mov	r2, r0
 8001612:	460b      	mov	r3, r1
 8001614:	68f9      	ldr	r1, [r7, #12]
 8001616:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001620:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001624:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001628:	f7fe ff56 	bl	80004d8 <__aeabi_dmul>
 800162c:	4602      	mov	r2, r0
 800162e:	460b      	mov	r3, r1
 8001630:	4620      	mov	r0, r4
 8001632:	4629      	mov	r1, r5
 8001634:	f7fe fd98 	bl	8000168 <__aeabi_dsub>
 8001638:	4602      	mov	r2, r0
 800163a:	460b      	mov	r3, r1
 800163c:	68f9      	ldr	r1, [r7, #12]
 800163e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
};
 8001648:	4610      	mov	r0, r2
 800164a:	4619      	mov	r1, r3
 800164c:	3748      	adds	r7, #72	; 0x48
 800164e:	46bd      	mov	sp, r7
 8001650:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001654 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800165a:	f000 fdfd 	bl	8002258 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800165e:	f000 f879 	bl	8001754 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001662:	f000 f9f9 	bl	8001a58 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8001666:	f009 ff39 	bl	800b4dc <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 800166a:	f000 f8d1 	bl	8001810 <MX_ADC1_Init>
  MX_ADC2_Init();
 800166e:	f000 f90d 	bl	800188c <MX_ADC2_Init>
  MX_USART1_UART_Init();
 8001672:	f000 f9c7 	bl	8001a04 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8001676:	f000 f947 	bl	8001908 <MX_I2C2_Init>
  MX_TIM1_Init();
 800167a:	f000 f973 	bl	8001964 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  MPU6050_Init(&hi2c2);
 800167e:	482a      	ldr	r0, [pc, #168]	; (8001728 <main+0xd4>)
 8001680:	f7ff fc60 	bl	8000f44 <MPU6050_Init>


  HAL_UART_Receive_IT(&huart1, &UART1_recv, 1);
 8001684:	2201      	movs	r2, #1
 8001686:	4929      	ldr	r1, [pc, #164]	; (800172c <main+0xd8>)
 8001688:	4829      	ldr	r0, [pc, #164]	; (8001730 <main+0xdc>)
 800168a:	f005 fe2e 	bl	80072ea <HAL_UART_Receive_IT>
  HAL_ADCEx_Calibration_Start(&hadc1);
 800168e:	4829      	ldr	r0, [pc, #164]	; (8001734 <main+0xe0>)
 8001690:	f001 fa94 	bl	8002bbc <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2);
 8001694:	4828      	ldr	r0, [pc, #160]	; (8001738 <main+0xe4>)
 8001696:	f001 fa91 	bl	8002bbc <HAL_ADCEx_Calibration_Start>
  debugenable.system = 1;
 800169a:	4b28      	ldr	r3, [pc, #160]	; (800173c <main+0xe8>)
 800169c:	2201      	movs	r2, #1
 800169e:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MPU6050_Read_All(&hi2c2,&mpu6050);
 80016a0:	4927      	ldr	r1, [pc, #156]	; (8001740 <main+0xec>)
 80016a2:	4821      	ldr	r0, [pc, #132]	; (8001728 <main+0xd4>)
 80016a4:	f7ff fca8 	bl	8000ff8 <MPU6050_Read_All>
//	  SIMPLE_DEBUG("%f,%f,%f\n ",mpu6050.Gx,mpu6050.Gy,mpu6050.Gz);
	  SIMPLE_DEBUG("%f,%f\n",mpu6050.KalmanAngleX,mpu6050.KalmanAngleY)
 80016a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016ac:	2100      	movs	r1, #0
 80016ae:	4825      	ldr	r0, [pc, #148]	; (8001744 <main+0xf0>)
 80016b0:	f00a faf8 	bl	800bca4 <memset>
 80016b4:	4b22      	ldr	r3, [pc, #136]	; (8001740 <main+0xec>)
 80016b6:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 80016ba:	4b21      	ldr	r3, [pc, #132]	; (8001740 <main+0xec>)
 80016bc:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80016c0:	e9cd 2300 	strd	r2, r3, [sp]
 80016c4:	4602      	mov	r2, r0
 80016c6:	460b      	mov	r3, r1
 80016c8:	491f      	ldr	r1, [pc, #124]	; (8001748 <main+0xf4>)
 80016ca:	481e      	ldr	r0, [pc, #120]	; (8001744 <main+0xf0>)
 80016cc:	f00a ff52 	bl	800c574 <siprintf>
 80016d0:	481c      	ldr	r0, [pc, #112]	; (8001744 <main+0xf0>)
 80016d2:	f7fe fd3d 	bl	8000150 <strlen>
 80016d6:	4603      	mov	r3, r0
 80016d8:	b29a      	uxth	r2, r3
 80016da:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80016de:	4919      	ldr	r1, [pc, #100]	; (8001744 <main+0xf0>)
 80016e0:	4813      	ldr	r0, [pc, #76]	; (8001730 <main+0xdc>)
 80016e2:	f005 fd70 	bl	80071c6 <HAL_UART_Transmit>
      HAL_ADC_Start(&hadc1);
 80016e6:	4813      	ldr	r0, [pc, #76]	; (8001734 <main+0xe0>)
 80016e8:	f000 ff14 	bl	8002514 <HAL_ADC_Start>
      HAL_ADC_Start(&hadc2);
 80016ec:	4812      	ldr	r0, [pc, #72]	; (8001738 <main+0xe4>)
 80016ee:	f000 ff11 	bl	8002514 <HAL_ADC_Start>
     // Poll ADC1 Peripheral & TimeOut = 1mSec
      HAL_ADC_PollForConversion(&hadc1, 1);
 80016f2:	2101      	movs	r1, #1
 80016f4:	480f      	ldr	r0, [pc, #60]	; (8001734 <main+0xe0>)
 80016f6:	f000 ffbb 	bl	8002670 <HAL_ADC_PollForConversion>
      HAL_ADC_PollForConversion(&hadc2, 1);
 80016fa:	2101      	movs	r1, #1
 80016fc:	480e      	ldr	r0, [pc, #56]	; (8001738 <main+0xe4>)
 80016fe:	f000 ffb7 	bl	8002670 <HAL_ADC_PollForConversion>
     // Read The ADC Conversion Result & Map It To PWM DutyCycle
      AD_RES1 = HAL_ADC_GetValue(&hadc1);
 8001702:	480c      	ldr	r0, [pc, #48]	; (8001734 <main+0xe0>)
 8001704:	f001 f8ba 	bl	800287c <HAL_ADC_GetValue>
 8001708:	4603      	mov	r3, r0
 800170a:	b29a      	uxth	r2, r3
 800170c:	4b0f      	ldr	r3, [pc, #60]	; (800174c <main+0xf8>)
 800170e:	801a      	strh	r2, [r3, #0]
      AD_RES2 = HAL_ADC_GetValue(&hadc2);
 8001710:	4809      	ldr	r0, [pc, #36]	; (8001738 <main+0xe4>)
 8001712:	f001 f8b3 	bl	800287c <HAL_ADC_GetValue>
 8001716:	4603      	mov	r3, r0
 8001718:	b29a      	uxth	r2, r3
 800171a:	4b0d      	ldr	r3, [pc, #52]	; (8001750 <main+0xfc>)
 800171c:	801a      	strh	r2, [r3, #0]
//			  USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof(keyboardhid));
//
//			  pressed = HAL_GetTick();
//		  }
//	  }
	  HAL_Delay(50);
 800171e:	2032      	movs	r0, #50	; 0x32
 8001720:	f000 fdfc 	bl	800231c <HAL_Delay>
	  MPU6050_Read_All(&hi2c2,&mpu6050);
 8001724:	e7bc      	b.n	80016a0 <main+0x4c>
 8001726:	bf00      	nop
 8001728:	200004c8 	.word	0x200004c8
 800172c:	2000051d 	.word	0x2000051d
 8001730:	20000550 	.word	0x20000550
 8001734:	20000520 	.word	0x20000520
 8001738:	20000440 	.word	0x20000440
 800173c:	2000051c 	.word	0x2000051c
 8001740:	20000470 	.word	0x20000470
 8001744:	200005dc 	.word	0x200005dc
 8001748:	0800f078 	.word	0x0800f078
 800174c:	200003ee 	.word	0x200003ee
 8001750:	200003f0 	.word	0x200003f0

08001754 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b094      	sub	sp, #80	; 0x50
 8001758:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800175a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800175e:	2228      	movs	r2, #40	; 0x28
 8001760:	2100      	movs	r1, #0
 8001762:	4618      	mov	r0, r3
 8001764:	f00a fa9e 	bl	800bca4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001768:	f107 0314 	add.w	r3, r7, #20
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]
 8001776:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001778:	1d3b      	adds	r3, r7, #4
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	605a      	str	r2, [r3, #4]
 8001780:	609a      	str	r2, [r3, #8]
 8001782:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001784:	2301      	movs	r3, #1
 8001786:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001788:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800178c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800178e:	2300      	movs	r3, #0
 8001790:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001792:	2301      	movs	r3, #1
 8001794:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001796:	2302      	movs	r3, #2
 8001798:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800179a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800179e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80017a0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80017a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017aa:	4618      	mov	r0, r3
 80017ac:	f004 fb02 	bl	8005db4 <HAL_RCC_OscConfig>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <SystemClock_Config+0x66>
  {
    Error_Handler();
 80017b6:	f000 fa71 	bl	8001c9c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017ba:	230f      	movs	r3, #15
 80017bc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017be:	2302      	movs	r3, #2
 80017c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017c2:	2300      	movs	r3, #0
 80017c4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017ca:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017cc:	2300      	movs	r3, #0
 80017ce:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80017d0:	f107 0314 	add.w	r3, r7, #20
 80017d4:	2101      	movs	r1, #1
 80017d6:	4618      	mov	r0, r3
 80017d8:	f004 fd6c 	bl	80062b4 <HAL_RCC_ClockConfig>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80017e2:	f000 fa5b 	bl	8001c9c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 80017e6:	2312      	movs	r3, #18
 80017e8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 80017ea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80017ee:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80017f0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017f4:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017f6:	1d3b      	adds	r3, r7, #4
 80017f8:	4618      	mov	r0, r3
 80017fa:	f004 fef5 	bl	80065e8 <HAL_RCCEx_PeriphCLKConfig>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001804:	f000 fa4a 	bl	8001c9c <Error_Handler>
  }
}
 8001808:	bf00      	nop
 800180a:	3750      	adds	r7, #80	; 0x50
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}

08001810 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001816:	1d3b      	adds	r3, r7, #4
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	605a      	str	r2, [r3, #4]
 800181e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001820:	4b18      	ldr	r3, [pc, #96]	; (8001884 <MX_ADC1_Init+0x74>)
 8001822:	4a19      	ldr	r2, [pc, #100]	; (8001888 <MX_ADC1_Init+0x78>)
 8001824:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001826:	4b17      	ldr	r3, [pc, #92]	; (8001884 <MX_ADC1_Init+0x74>)
 8001828:	2200      	movs	r2, #0
 800182a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800182c:	4b15      	ldr	r3, [pc, #84]	; (8001884 <MX_ADC1_Init+0x74>)
 800182e:	2200      	movs	r2, #0
 8001830:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001832:	4b14      	ldr	r3, [pc, #80]	; (8001884 <MX_ADC1_Init+0x74>)
 8001834:	2200      	movs	r2, #0
 8001836:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001838:	4b12      	ldr	r3, [pc, #72]	; (8001884 <MX_ADC1_Init+0x74>)
 800183a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800183e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001840:	4b10      	ldr	r3, [pc, #64]	; (8001884 <MX_ADC1_Init+0x74>)
 8001842:	2200      	movs	r2, #0
 8001844:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001846:	4b0f      	ldr	r3, [pc, #60]	; (8001884 <MX_ADC1_Init+0x74>)
 8001848:	2201      	movs	r2, #1
 800184a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800184c:	480d      	ldr	r0, [pc, #52]	; (8001884 <MX_ADC1_Init+0x74>)
 800184e:	f000 fd89 	bl	8002364 <HAL_ADC_Init>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001858:	f000 fa20 	bl	8001c9c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800185c:	2307      	movs	r3, #7
 800185e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001860:	2301      	movs	r3, #1
 8001862:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001864:	2300      	movs	r3, #0
 8001866:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001868:	1d3b      	adds	r3, r7, #4
 800186a:	4619      	mov	r1, r3
 800186c:	4805      	ldr	r0, [pc, #20]	; (8001884 <MX_ADC1_Init+0x74>)
 800186e:	f001 f811 	bl	8002894 <HAL_ADC_ConfigChannel>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001878:	f000 fa10 	bl	8001c9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800187c:	bf00      	nop
 800187e:	3710      	adds	r7, #16
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	20000520 	.word	0x20000520
 8001888:	40012400 	.word	0x40012400

0800188c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001892:	1d3b      	adds	r3, r7, #4
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	605a      	str	r2, [r3, #4]
 800189a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 800189c:	4b18      	ldr	r3, [pc, #96]	; (8001900 <MX_ADC2_Init+0x74>)
 800189e:	4a19      	ldr	r2, [pc, #100]	; (8001904 <MX_ADC2_Init+0x78>)
 80018a0:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80018a2:	4b17      	ldr	r3, [pc, #92]	; (8001900 <MX_ADC2_Init+0x74>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80018a8:	4b15      	ldr	r3, [pc, #84]	; (8001900 <MX_ADC2_Init+0x74>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80018ae:	4b14      	ldr	r3, [pc, #80]	; (8001900 <MX_ADC2_Init+0x74>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018b4:	4b12      	ldr	r3, [pc, #72]	; (8001900 <MX_ADC2_Init+0x74>)
 80018b6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80018ba:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018bc:	4b10      	ldr	r3, [pc, #64]	; (8001900 <MX_ADC2_Init+0x74>)
 80018be:	2200      	movs	r2, #0
 80018c0:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 80018c2:	4b0f      	ldr	r3, [pc, #60]	; (8001900 <MX_ADC2_Init+0x74>)
 80018c4:	2201      	movs	r2, #1
 80018c6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80018c8:	480d      	ldr	r0, [pc, #52]	; (8001900 <MX_ADC2_Init+0x74>)
 80018ca:	f000 fd4b 	bl	8002364 <HAL_ADC_Init>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 80018d4:	f000 f9e2 	bl	8001c9c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80018d8:	2306      	movs	r3, #6
 80018da:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80018dc:	2301      	movs	r3, #1
 80018de:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80018e0:	2300      	movs	r3, #0
 80018e2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80018e4:	1d3b      	adds	r3, r7, #4
 80018e6:	4619      	mov	r1, r3
 80018e8:	4805      	ldr	r0, [pc, #20]	; (8001900 <MX_ADC2_Init+0x74>)
 80018ea:	f000 ffd3 	bl	8002894 <HAL_ADC_ConfigChannel>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 80018f4:	f000 f9d2 	bl	8001c9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80018f8:	bf00      	nop
 80018fa:	3710      	adds	r7, #16
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	20000440 	.word	0x20000440
 8001904:	40012800 	.word	0x40012800

08001908 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800190c:	4b12      	ldr	r3, [pc, #72]	; (8001958 <MX_I2C2_Init+0x50>)
 800190e:	4a13      	ldr	r2, [pc, #76]	; (800195c <MX_I2C2_Init+0x54>)
 8001910:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001912:	4b11      	ldr	r3, [pc, #68]	; (8001958 <MX_I2C2_Init+0x50>)
 8001914:	4a12      	ldr	r2, [pc, #72]	; (8001960 <MX_I2C2_Init+0x58>)
 8001916:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001918:	4b0f      	ldr	r3, [pc, #60]	; (8001958 <MX_I2C2_Init+0x50>)
 800191a:	2200      	movs	r2, #0
 800191c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800191e:	4b0e      	ldr	r3, [pc, #56]	; (8001958 <MX_I2C2_Init+0x50>)
 8001920:	2200      	movs	r2, #0
 8001922:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001924:	4b0c      	ldr	r3, [pc, #48]	; (8001958 <MX_I2C2_Init+0x50>)
 8001926:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800192a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800192c:	4b0a      	ldr	r3, [pc, #40]	; (8001958 <MX_I2C2_Init+0x50>)
 800192e:	2200      	movs	r2, #0
 8001930:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001932:	4b09      	ldr	r3, [pc, #36]	; (8001958 <MX_I2C2_Init+0x50>)
 8001934:	2200      	movs	r2, #0
 8001936:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001938:	4b07      	ldr	r3, [pc, #28]	; (8001958 <MX_I2C2_Init+0x50>)
 800193a:	2200      	movs	r2, #0
 800193c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800193e:	4b06      	ldr	r3, [pc, #24]	; (8001958 <MX_I2C2_Init+0x50>)
 8001940:	2200      	movs	r2, #0
 8001942:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001944:	4804      	ldr	r0, [pc, #16]	; (8001958 <MX_I2C2_Init+0x50>)
 8001946:	f001 fd87 	bl	8003458 <HAL_I2C_Init>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001950:	f000 f9a4 	bl	8001c9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001954:	bf00      	nop
 8001956:	bd80      	pop	{r7, pc}
 8001958:	200004c8 	.word	0x200004c8
 800195c:	40005800 	.word	0x40005800
 8001960:	000186a0 	.word	0x000186a0

08001964 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b086      	sub	sp, #24
 8001968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800196a:	f107 0308 	add.w	r3, r7, #8
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]
 8001972:	605a      	str	r2, [r3, #4]
 8001974:	609a      	str	r2, [r3, #8]
 8001976:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001978:	463b      	mov	r3, r7
 800197a:	2200      	movs	r2, #0
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001980:	4b1e      	ldr	r3, [pc, #120]	; (80019fc <MX_TIM1_Init+0x98>)
 8001982:	4a1f      	ldr	r2, [pc, #124]	; (8001a00 <MX_TIM1_Init+0x9c>)
 8001984:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 48000;
 8001986:	4b1d      	ldr	r3, [pc, #116]	; (80019fc <MX_TIM1_Init+0x98>)
 8001988:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800198c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800198e:	4b1b      	ldr	r3, [pc, #108]	; (80019fc <MX_TIM1_Init+0x98>)
 8001990:	2200      	movs	r2, #0
 8001992:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50;
 8001994:	4b19      	ldr	r3, [pc, #100]	; (80019fc <MX_TIM1_Init+0x98>)
 8001996:	2232      	movs	r2, #50	; 0x32
 8001998:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800199a:	4b18      	ldr	r3, [pc, #96]	; (80019fc <MX_TIM1_Init+0x98>)
 800199c:	2200      	movs	r2, #0
 800199e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80019a0:	4b16      	ldr	r3, [pc, #88]	; (80019fc <MX_TIM1_Init+0x98>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019a6:	4b15      	ldr	r3, [pc, #84]	; (80019fc <MX_TIM1_Init+0x98>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80019ac:	4813      	ldr	r0, [pc, #76]	; (80019fc <MX_TIM1_Init+0x98>)
 80019ae:	f004 ff95 	bl	80068dc <HAL_TIM_Base_Init>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80019b8:	f000 f970 	bl	8001c9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80019c2:	f107 0308 	add.w	r3, r7, #8
 80019c6:	4619      	mov	r1, r3
 80019c8:	480c      	ldr	r0, [pc, #48]	; (80019fc <MX_TIM1_Init+0x98>)
 80019ca:	f005 f95f 	bl	8006c8c <HAL_TIM_ConfigClockSource>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80019d4:	f000 f962 	bl	8001c9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019d8:	2300      	movs	r3, #0
 80019da:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019dc:	2300      	movs	r3, #0
 80019de:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019e0:	463b      	mov	r3, r7
 80019e2:	4619      	mov	r1, r3
 80019e4:	4805      	ldr	r0, [pc, #20]	; (80019fc <MX_TIM1_Init+0x98>)
 80019e6:	f005 fb31 	bl	800704c <HAL_TIMEx_MasterConfigSynchronization>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80019f0:	f000 f954 	bl	8001c9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80019f4:	bf00      	nop
 80019f6:	3718      	adds	r7, #24
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	20000594 	.word	0x20000594
 8001a00:	40012c00 	.word	0x40012c00

08001a04 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a08:	4b11      	ldr	r3, [pc, #68]	; (8001a50 <MX_USART1_UART_Init+0x4c>)
 8001a0a:	4a12      	ldr	r2, [pc, #72]	; (8001a54 <MX_USART1_UART_Init+0x50>)
 8001a0c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a0e:	4b10      	ldr	r3, [pc, #64]	; (8001a50 <MX_USART1_UART_Init+0x4c>)
 8001a10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a14:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a16:	4b0e      	ldr	r3, [pc, #56]	; (8001a50 <MX_USART1_UART_Init+0x4c>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a1c:	4b0c      	ldr	r3, [pc, #48]	; (8001a50 <MX_USART1_UART_Init+0x4c>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a22:	4b0b      	ldr	r3, [pc, #44]	; (8001a50 <MX_USART1_UART_Init+0x4c>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a28:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <MX_USART1_UART_Init+0x4c>)
 8001a2a:	220c      	movs	r2, #12
 8001a2c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a2e:	4b08      	ldr	r3, [pc, #32]	; (8001a50 <MX_USART1_UART_Init+0x4c>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a34:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <MX_USART1_UART_Init+0x4c>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a3a:	4805      	ldr	r0, [pc, #20]	; (8001a50 <MX_USART1_UART_Init+0x4c>)
 8001a3c:	f005 fb76 	bl	800712c <HAL_UART_Init>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001a46:	f000 f929 	bl	8001c9c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a4a:	bf00      	nop
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	20000550 	.word	0x20000550
 8001a54:	40013800 	.word	0x40013800

08001a58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b088      	sub	sp, #32
 8001a5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a5e:	f107 0310 	add.w	r3, r7, #16
 8001a62:	2200      	movs	r2, #0
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	605a      	str	r2, [r3, #4]
 8001a68:	609a      	str	r2, [r3, #8]
 8001a6a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a6c:	4b3a      	ldr	r3, [pc, #232]	; (8001b58 <MX_GPIO_Init+0x100>)
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	4a39      	ldr	r2, [pc, #228]	; (8001b58 <MX_GPIO_Init+0x100>)
 8001a72:	f043 0320 	orr.w	r3, r3, #32
 8001a76:	6193      	str	r3, [r2, #24]
 8001a78:	4b37      	ldr	r3, [pc, #220]	; (8001b58 <MX_GPIO_Init+0x100>)
 8001a7a:	699b      	ldr	r3, [r3, #24]
 8001a7c:	f003 0320 	and.w	r3, r3, #32
 8001a80:	60fb      	str	r3, [r7, #12]
 8001a82:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a84:	4b34      	ldr	r3, [pc, #208]	; (8001b58 <MX_GPIO_Init+0x100>)
 8001a86:	699b      	ldr	r3, [r3, #24]
 8001a88:	4a33      	ldr	r2, [pc, #204]	; (8001b58 <MX_GPIO_Init+0x100>)
 8001a8a:	f043 0304 	orr.w	r3, r3, #4
 8001a8e:	6193      	str	r3, [r2, #24]
 8001a90:	4b31      	ldr	r3, [pc, #196]	; (8001b58 <MX_GPIO_Init+0x100>)
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	f003 0304 	and.w	r3, r3, #4
 8001a98:	60bb      	str	r3, [r7, #8]
 8001a9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a9c:	4b2e      	ldr	r3, [pc, #184]	; (8001b58 <MX_GPIO_Init+0x100>)
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	4a2d      	ldr	r2, [pc, #180]	; (8001b58 <MX_GPIO_Init+0x100>)
 8001aa2:	f043 0308 	orr.w	r3, r3, #8
 8001aa6:	6193      	str	r3, [r2, #24]
 8001aa8:	4b2b      	ldr	r3, [pc, #172]	; (8001b58 <MX_GPIO_Init+0x100>)
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	f003 0308 	and.w	r3, r3, #8
 8001ab0:	607b      	str	r3, [r7, #4]
 8001ab2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001aba:	4828      	ldr	r0, [pc, #160]	; (8001b5c <MX_GPIO_Init+0x104>)
 8001abc:	f001 fc83 	bl	80033c6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SW_Pin */
  GPIO_InitStruct.Pin = SW_Pin;
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ac4:	4b26      	ldr	r3, [pc, #152]	; (8001b60 <MX_GPIO_Init+0x108>)
 8001ac6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SW_GPIO_Port, &GPIO_InitStruct);
 8001acc:	f107 0310 	add.w	r3, r7, #16
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4824      	ldr	r0, [pc, #144]	; (8001b64 <MX_GPIO_Init+0x10c>)
 8001ad4:	f001 fadc 	bl	8003090 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001ad8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001adc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001aea:	f107 0310 	add.w	r3, r7, #16
 8001aee:	4619      	mov	r1, r3
 8001af0:	481a      	ldr	r0, [pc, #104]	; (8001b5c <MX_GPIO_Init+0x104>)
 8001af2:	f001 facd 	bl	8003090 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin B2_Pin B3_Pin B4_Pin */
  GPIO_InitStruct.Pin = B1_Pin|B2_Pin|B3_Pin|B4_Pin;
 8001af6:	23b8      	movs	r3, #184	; 0xb8
 8001af8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001afa:	4b19      	ldr	r3, [pc, #100]	; (8001b60 <MX_GPIO_Init+0x108>)
 8001afc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001afe:	2301      	movs	r3, #1
 8001b00:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b02:	f107 0310 	add.w	r3, r7, #16
 8001b06:	4619      	mov	r1, r3
 8001b08:	4814      	ldr	r0, [pc, #80]	; (8001b5c <MX_GPIO_Init+0x104>)
 8001b0a:	f001 fac1 	bl	8003090 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001b0e:	2200      	movs	r2, #0
 8001b10:	2100      	movs	r1, #0
 8001b12:	2007      	movs	r0, #7
 8001b14:	f001 f9d5 	bl	8002ec2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001b18:	2007      	movs	r0, #7
 8001b1a:	f001 f9ee 	bl	8002efa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001b1e:	2200      	movs	r2, #0
 8001b20:	2100      	movs	r1, #0
 8001b22:	2009      	movs	r0, #9
 8001b24:	f001 f9cd 	bl	8002ec2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001b28:	2009      	movs	r0, #9
 8001b2a:	f001 f9e6 	bl	8002efa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001b2e:	2200      	movs	r2, #0
 8001b30:	2100      	movs	r1, #0
 8001b32:	200a      	movs	r0, #10
 8001b34:	f001 f9c5 	bl	8002ec2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001b38:	200a      	movs	r0, #10
 8001b3a:	f001 f9de 	bl	8002efa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001b3e:	2200      	movs	r2, #0
 8001b40:	2100      	movs	r1, #0
 8001b42:	2017      	movs	r0, #23
 8001b44:	f001 f9bd 	bl	8002ec2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001b48:	2017      	movs	r0, #23
 8001b4a:	f001 f9d6 	bl	8002efa <HAL_NVIC_EnableIRQ>

}
 8001b4e:	bf00      	nop
 8001b50:	3720      	adds	r7, #32
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	40010c00 	.word	0x40010c00
 8001b60:	10110000 	.word	0x10110000
 8001b64:	40010800 	.word	0x40010800

08001b68 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_1) // If The INT Source Is EXTI Line9 (A9 Pin)
 8001b72:	88fb      	ldrh	r3, [r7, #6]
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d102      	bne.n	8001b7e <HAL_GPIO_EXTI_Callback+0x16>
    {
    	interrupt_happened = 1;
 8001b78:	4b14      	ldr	r3, [pc, #80]	; (8001bcc <HAL_GPIO_EXTI_Callback+0x64>)
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	701a      	strb	r2, [r3, #0]
    }
    if(GPIO_Pin == GPIO_PIN_3 && state == true) // If The INT Source Is EXTI Line9 (A9 Pin)
 8001b7e:	88fb      	ldrh	r3, [r7, #6]
 8001b80:	2b08      	cmp	r3, #8
 8001b82:	d10c      	bne.n	8001b9e <HAL_GPIO_EXTI_Callback+0x36>
 8001b84:	4b12      	ldr	r3, [pc, #72]	; (8001bd0 <HAL_GPIO_EXTI_Callback+0x68>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d008      	beq.n	8001b9e <HAL_GPIO_EXTI_Callback+0x36>
    {
    	HAL_TIM_Base_Start_IT(&htim1);
 8001b8c:	4811      	ldr	r0, [pc, #68]	; (8001bd4 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001b8e:	f004 fef5 	bl	800697c <HAL_TIM_Base_Start_IT>
    	interrupt_happened = 1;
 8001b92:	4b0e      	ldr	r3, [pc, #56]	; (8001bcc <HAL_GPIO_EXTI_Callback+0x64>)
 8001b94:	2201      	movs	r2, #1
 8001b96:	701a      	strb	r2, [r3, #0]
    	state = false;
 8001b98:	4b0d      	ldr	r3, [pc, #52]	; (8001bd0 <HAL_GPIO_EXTI_Callback+0x68>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	701a      	strb	r2, [r3, #0]
    }
    if(GPIO_Pin == GPIO_PIN_4) // If The INT Source Is EXTI Line9 (A9 Pin)
 8001b9e:	88fb      	ldrh	r3, [r7, #6]
 8001ba0:	2b10      	cmp	r3, #16
 8001ba2:	d102      	bne.n	8001baa <HAL_GPIO_EXTI_Callback+0x42>
    {
    	interrupt_happened = 1;
 8001ba4:	4b09      	ldr	r3, [pc, #36]	; (8001bcc <HAL_GPIO_EXTI_Callback+0x64>)
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	701a      	strb	r2, [r3, #0]
    }
    if(GPIO_Pin == GPIO_PIN_5) // If The INT Source Is EXTI Line9 (A9 Pin)
 8001baa:	88fb      	ldrh	r3, [r7, #6]
 8001bac:	2b20      	cmp	r3, #32
 8001bae:	d102      	bne.n	8001bb6 <HAL_GPIO_EXTI_Callback+0x4e>
    {
    	interrupt_happened = 1;
 8001bb0:	4b06      	ldr	r3, [pc, #24]	; (8001bcc <HAL_GPIO_EXTI_Callback+0x64>)
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	701a      	strb	r2, [r3, #0]
    }
    if(GPIO_Pin == GPIO_PIN_7) // If The INT Source Is EXTI Line9 (A9 Pin)
 8001bb6:	88fb      	ldrh	r3, [r7, #6]
 8001bb8:	2b80      	cmp	r3, #128	; 0x80
 8001bba:	d102      	bne.n	8001bc2 <HAL_GPIO_EXTI_Callback+0x5a>
    {
    	interrupt_happened = 1;
 8001bbc:	4b03      	ldr	r3, [pc, #12]	; (8001bcc <HAL_GPIO_EXTI_Callback+0x64>)
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	701a      	strb	r2, [r3, #0]
    }

}
 8001bc2:	bf00      	nop
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	200003ec 	.word	0x200003ec
 8001bd0:	20000090 	.word	0x20000090
 8001bd4:	20000594 	.word	0x20000594

08001bd8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
	  UNUSED(htim);

	  /* NOTE : This function should not be modified, when the callback is needed,
	            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
	   */
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_RESET)
 8001be0:	2108      	movs	r1, #8
 8001be2:	480a      	ldr	r0, [pc, #40]	; (8001c0c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001be4:	f001 fbd8 	bl	8003398 <HAL_GPIO_ReadPin>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d10a      	bne.n	8001c04 <HAL_TIM_PeriodElapsedCallback+0x2c>
		{
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 8001bee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bf2:	4806      	ldr	r0, [pc, #24]	; (8001c0c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001bf4:	f001 fbff 	bl	80033f6 <HAL_GPIO_TogglePin>
			state = true;
 8001bf8:	4b05      	ldr	r3, [pc, #20]	; (8001c10 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim1);
 8001bfe:	4805      	ldr	r0, [pc, #20]	; (8001c14 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001c00:	f004 ff0e 	bl	8006a20 <HAL_TIM_Base_Stop_IT>
		}
}
 8001c04:	bf00      	nop
 8001c06:	3708      	adds	r7, #8
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	40010c00 	.word	0x40010c00
 8001c10:	20000090 	.word	0x20000090
 8001c14:	20000594 	.word	0x20000594

08001c18 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a0b      	ldr	r2, [pc, #44]	; (8001c54 <HAL_UART_RxCpltCallback+0x3c>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d10a      	bne.n	8001c40 <HAL_UART_RxCpltCallback+0x28>
	{
		UART1_recv -= 48;
 8001c2a:	4b0b      	ldr	r3, [pc, #44]	; (8001c58 <HAL_UART_RxCpltCallback+0x40>)
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	3b30      	subs	r3, #48	; 0x30
 8001c30:	b2da      	uxtb	r2, r3
 8001c32:	4b09      	ldr	r3, [pc, #36]	; (8001c58 <HAL_UART_RxCpltCallback+0x40>)
 8001c34:	701a      	strb	r2, [r3, #0]
		printData(UART1_recv);
 8001c36:	4b08      	ldr	r3, [pc, #32]	; (8001c58 <HAL_UART_RxCpltCallback+0x40>)
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f000 f810 	bl	8001c60 <printData>
	}
	HAL_UART_Receive_IT(&huart1, &UART1_recv, 1);
 8001c40:	2201      	movs	r2, #1
 8001c42:	4905      	ldr	r1, [pc, #20]	; (8001c58 <HAL_UART_RxCpltCallback+0x40>)
 8001c44:	4805      	ldr	r0, [pc, #20]	; (8001c5c <HAL_UART_RxCpltCallback+0x44>)
 8001c46:	f005 fb50 	bl	80072ea <HAL_UART_Receive_IT>
}
 8001c4a:	bf00      	nop
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40013800 	.word	0x40013800
 8001c58:	2000051d 	.word	0x2000051d
 8001c5c:	20000550 	.word	0x20000550

08001c60 <printData>:
void printData(int data)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
	sprintf((char*)buf,"Data received:  %d \r\n",data);
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	4909      	ldr	r1, [pc, #36]	; (8001c90 <printData+0x30>)
 8001c6c:	4809      	ldr	r0, [pc, #36]	; (8001c94 <printData+0x34>)
 8001c6e:	f00a fc81 	bl	800c574 <siprintf>
	HAL_UART_Transmit(&huart1,buf,strlen((char*)buf),HAL_MAX_DELAY);
 8001c72:	4808      	ldr	r0, [pc, #32]	; (8001c94 <printData+0x34>)
 8001c74:	f7fe fa6c 	bl	8000150 <strlen>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	b29a      	uxth	r2, r3
 8001c7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c80:	4904      	ldr	r1, [pc, #16]	; (8001c94 <printData+0x34>)
 8001c82:	4805      	ldr	r0, [pc, #20]	; (8001c98 <printData+0x38>)
 8001c84:	f005 fa9f 	bl	80071c6 <HAL_UART_Transmit>
}
 8001c88:	bf00      	nop
 8001c8a:	3708      	adds	r7, #8
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	0800f080 	.word	0x0800f080
 8001c94:	200003f4 	.word	0x200003f4
 8001c98:	20000550 	.word	0x20000550

08001c9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ca0:	b672      	cpsid	i
}
 8001ca2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ca4:	e7fe      	b.n	8001ca4 <Error_Handler+0x8>
	...

08001ca8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001cae:	4b15      	ldr	r3, [pc, #84]	; (8001d04 <HAL_MspInit+0x5c>)
 8001cb0:	699b      	ldr	r3, [r3, #24]
 8001cb2:	4a14      	ldr	r2, [pc, #80]	; (8001d04 <HAL_MspInit+0x5c>)
 8001cb4:	f043 0301 	orr.w	r3, r3, #1
 8001cb8:	6193      	str	r3, [r2, #24]
 8001cba:	4b12      	ldr	r3, [pc, #72]	; (8001d04 <HAL_MspInit+0x5c>)
 8001cbc:	699b      	ldr	r3, [r3, #24]
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	60bb      	str	r3, [r7, #8]
 8001cc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cc6:	4b0f      	ldr	r3, [pc, #60]	; (8001d04 <HAL_MspInit+0x5c>)
 8001cc8:	69db      	ldr	r3, [r3, #28]
 8001cca:	4a0e      	ldr	r2, [pc, #56]	; (8001d04 <HAL_MspInit+0x5c>)
 8001ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cd0:	61d3      	str	r3, [r2, #28]
 8001cd2:	4b0c      	ldr	r3, [pc, #48]	; (8001d04 <HAL_MspInit+0x5c>)
 8001cd4:	69db      	ldr	r3, [r3, #28]
 8001cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cda:	607b      	str	r3, [r7, #4]
 8001cdc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001cde:	4b0a      	ldr	r3, [pc, #40]	; (8001d08 <HAL_MspInit+0x60>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	60fb      	str	r3, [r7, #12]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001cea:	60fb      	str	r3, [r7, #12]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cf2:	60fb      	str	r3, [r7, #12]
 8001cf4:	4a04      	ldr	r2, [pc, #16]	; (8001d08 <HAL_MspInit+0x60>)
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cfa:	bf00      	nop
 8001cfc:	3714      	adds	r7, #20
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bc80      	pop	{r7}
 8001d02:	4770      	bx	lr
 8001d04:	40021000 	.word	0x40021000
 8001d08:	40010000 	.word	0x40010000

08001d0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b08a      	sub	sp, #40	; 0x28
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d14:	f107 0318 	add.w	r3, r7, #24
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	605a      	str	r2, [r3, #4]
 8001d1e:	609a      	str	r2, [r3, #8]
 8001d20:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a28      	ldr	r2, [pc, #160]	; (8001dc8 <HAL_ADC_MspInit+0xbc>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d122      	bne.n	8001d72 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d2c:	4b27      	ldr	r3, [pc, #156]	; (8001dcc <HAL_ADC_MspInit+0xc0>)
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	4a26      	ldr	r2, [pc, #152]	; (8001dcc <HAL_ADC_MspInit+0xc0>)
 8001d32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d36:	6193      	str	r3, [r2, #24]
 8001d38:	4b24      	ldr	r3, [pc, #144]	; (8001dcc <HAL_ADC_MspInit+0xc0>)
 8001d3a:	699b      	ldr	r3, [r3, #24]
 8001d3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d40:	617b      	str	r3, [r7, #20]
 8001d42:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d44:	4b21      	ldr	r3, [pc, #132]	; (8001dcc <HAL_ADC_MspInit+0xc0>)
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	4a20      	ldr	r2, [pc, #128]	; (8001dcc <HAL_ADC_MspInit+0xc0>)
 8001d4a:	f043 0304 	orr.w	r3, r3, #4
 8001d4e:	6193      	str	r3, [r2, #24]
 8001d50:	4b1e      	ldr	r3, [pc, #120]	; (8001dcc <HAL_ADC_MspInit+0xc0>)
 8001d52:	699b      	ldr	r3, [r3, #24]
 8001d54:	f003 0304 	and.w	r3, r3, #4
 8001d58:	613b      	str	r3, [r7, #16]
 8001d5a:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001d5c:	2380      	movs	r3, #128	; 0x80
 8001d5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d60:	2303      	movs	r3, #3
 8001d62:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d64:	f107 0318 	add.w	r3, r7, #24
 8001d68:	4619      	mov	r1, r3
 8001d6a:	4819      	ldr	r0, [pc, #100]	; (8001dd0 <HAL_ADC_MspInit+0xc4>)
 8001d6c:	f001 f990 	bl	8003090 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001d70:	e026      	b.n	8001dc0 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a17      	ldr	r2, [pc, #92]	; (8001dd4 <HAL_ADC_MspInit+0xc8>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d121      	bne.n	8001dc0 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001d7c:	4b13      	ldr	r3, [pc, #76]	; (8001dcc <HAL_ADC_MspInit+0xc0>)
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	4a12      	ldr	r2, [pc, #72]	; (8001dcc <HAL_ADC_MspInit+0xc0>)
 8001d82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d86:	6193      	str	r3, [r2, #24]
 8001d88:	4b10      	ldr	r3, [pc, #64]	; (8001dcc <HAL_ADC_MspInit+0xc0>)
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d90:	60fb      	str	r3, [r7, #12]
 8001d92:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d94:	4b0d      	ldr	r3, [pc, #52]	; (8001dcc <HAL_ADC_MspInit+0xc0>)
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	4a0c      	ldr	r2, [pc, #48]	; (8001dcc <HAL_ADC_MspInit+0xc0>)
 8001d9a:	f043 0304 	orr.w	r3, r3, #4
 8001d9e:	6193      	str	r3, [r2, #24]
 8001da0:	4b0a      	ldr	r3, [pc, #40]	; (8001dcc <HAL_ADC_MspInit+0xc0>)
 8001da2:	699b      	ldr	r3, [r3, #24]
 8001da4:	f003 0304 	and.w	r3, r3, #4
 8001da8:	60bb      	str	r3, [r7, #8]
 8001daa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001dac:	2340      	movs	r3, #64	; 0x40
 8001dae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001db0:	2303      	movs	r3, #3
 8001db2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db4:	f107 0318 	add.w	r3, r7, #24
 8001db8:	4619      	mov	r1, r3
 8001dba:	4805      	ldr	r0, [pc, #20]	; (8001dd0 <HAL_ADC_MspInit+0xc4>)
 8001dbc:	f001 f968 	bl	8003090 <HAL_GPIO_Init>
}
 8001dc0:	bf00      	nop
 8001dc2:	3728      	adds	r7, #40	; 0x28
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	40012400 	.word	0x40012400
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	40010800 	.word	0x40010800
 8001dd4:	40012800 	.word	0x40012800

08001dd8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b088      	sub	sp, #32
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de0:	f107 0310 	add.w	r3, r7, #16
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	605a      	str	r2, [r3, #4]
 8001dea:	609a      	str	r2, [r3, #8]
 8001dec:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a16      	ldr	r2, [pc, #88]	; (8001e4c <HAL_I2C_MspInit+0x74>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d124      	bne.n	8001e42 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001df8:	4b15      	ldr	r3, [pc, #84]	; (8001e50 <HAL_I2C_MspInit+0x78>)
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	4a14      	ldr	r2, [pc, #80]	; (8001e50 <HAL_I2C_MspInit+0x78>)
 8001dfe:	f043 0308 	orr.w	r3, r3, #8
 8001e02:	6193      	str	r3, [r2, #24]
 8001e04:	4b12      	ldr	r3, [pc, #72]	; (8001e50 <HAL_I2C_MspInit+0x78>)
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	f003 0308 	and.w	r3, r3, #8
 8001e0c:	60fb      	str	r3, [r7, #12]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001e10:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001e14:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e16:	2312      	movs	r3, #18
 8001e18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e1e:	f107 0310 	add.w	r3, r7, #16
 8001e22:	4619      	mov	r1, r3
 8001e24:	480b      	ldr	r0, [pc, #44]	; (8001e54 <HAL_I2C_MspInit+0x7c>)
 8001e26:	f001 f933 	bl	8003090 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001e2a:	4b09      	ldr	r3, [pc, #36]	; (8001e50 <HAL_I2C_MspInit+0x78>)
 8001e2c:	69db      	ldr	r3, [r3, #28]
 8001e2e:	4a08      	ldr	r2, [pc, #32]	; (8001e50 <HAL_I2C_MspInit+0x78>)
 8001e30:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e34:	61d3      	str	r3, [r2, #28]
 8001e36:	4b06      	ldr	r3, [pc, #24]	; (8001e50 <HAL_I2C_MspInit+0x78>)
 8001e38:	69db      	ldr	r3, [r3, #28]
 8001e3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e3e:	60bb      	str	r3, [r7, #8]
 8001e40:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001e42:	bf00      	nop
 8001e44:	3720      	adds	r7, #32
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40005800 	.word	0x40005800
 8001e50:	40021000 	.word	0x40021000
 8001e54:	40010c00 	.word	0x40010c00

08001e58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a19      	ldr	r2, [pc, #100]	; (8001ecc <HAL_TIM_Base_MspInit+0x74>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d12b      	bne.n	8001ec2 <HAL_TIM_Base_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e6a:	4b19      	ldr	r3, [pc, #100]	; (8001ed0 <HAL_TIM_Base_MspInit+0x78>)
 8001e6c:	699b      	ldr	r3, [r3, #24]
 8001e6e:	4a18      	ldr	r2, [pc, #96]	; (8001ed0 <HAL_TIM_Base_MspInit+0x78>)
 8001e70:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e74:	6193      	str	r3, [r2, #24]
 8001e76:	4b16      	ldr	r3, [pc, #88]	; (8001ed0 <HAL_TIM_Base_MspInit+0x78>)
 8001e78:	699b      	ldr	r3, [r3, #24]
 8001e7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e7e:	60fb      	str	r3, [r7, #12]
 8001e80:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8001e82:	2200      	movs	r2, #0
 8001e84:	2100      	movs	r1, #0
 8001e86:	2018      	movs	r0, #24
 8001e88:	f001 f81b 	bl	8002ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8001e8c:	2018      	movs	r0, #24
 8001e8e:	f001 f834 	bl	8002efa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001e92:	2200      	movs	r2, #0
 8001e94:	2100      	movs	r1, #0
 8001e96:	2019      	movs	r0, #25
 8001e98:	f001 f813 	bl	8002ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001e9c:	2019      	movs	r0, #25
 8001e9e:	f001 f82c 	bl	8002efa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	201a      	movs	r0, #26
 8001ea8:	f001 f80b 	bl	8002ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8001eac:	201a      	movs	r0, #26
 8001eae:	f001 f824 	bl	8002efa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	201b      	movs	r0, #27
 8001eb8:	f001 f803 	bl	8002ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001ebc:	201b      	movs	r0, #27
 8001ebe:	f001 f81c 	bl	8002efa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001ec2:	bf00      	nop
 8001ec4:	3710      	adds	r7, #16
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	40012c00 	.word	0x40012c00
 8001ed0:	40021000 	.word	0x40021000

08001ed4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b088      	sub	sp, #32
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001edc:	f107 0310 	add.w	r3, r7, #16
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	605a      	str	r2, [r3, #4]
 8001ee6:	609a      	str	r2, [r3, #8]
 8001ee8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a20      	ldr	r2, [pc, #128]	; (8001f70 <HAL_UART_MspInit+0x9c>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d139      	bne.n	8001f68 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ef4:	4b1f      	ldr	r3, [pc, #124]	; (8001f74 <HAL_UART_MspInit+0xa0>)
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	4a1e      	ldr	r2, [pc, #120]	; (8001f74 <HAL_UART_MspInit+0xa0>)
 8001efa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001efe:	6193      	str	r3, [r2, #24]
 8001f00:	4b1c      	ldr	r3, [pc, #112]	; (8001f74 <HAL_UART_MspInit+0xa0>)
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f08:	60fb      	str	r3, [r7, #12]
 8001f0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f0c:	4b19      	ldr	r3, [pc, #100]	; (8001f74 <HAL_UART_MspInit+0xa0>)
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	4a18      	ldr	r2, [pc, #96]	; (8001f74 <HAL_UART_MspInit+0xa0>)
 8001f12:	f043 0304 	orr.w	r3, r3, #4
 8001f16:	6193      	str	r3, [r2, #24]
 8001f18:	4b16      	ldr	r3, [pc, #88]	; (8001f74 <HAL_UART_MspInit+0xa0>)
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	f003 0304 	and.w	r3, r3, #4
 8001f20:	60bb      	str	r3, [r7, #8]
 8001f22:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f28:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f32:	f107 0310 	add.w	r3, r7, #16
 8001f36:	4619      	mov	r1, r3
 8001f38:	480f      	ldr	r0, [pc, #60]	; (8001f78 <HAL_UART_MspInit+0xa4>)
 8001f3a:	f001 f8a9 	bl	8003090 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f44:	2300      	movs	r3, #0
 8001f46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f4c:	f107 0310 	add.w	r3, r7, #16
 8001f50:	4619      	mov	r1, r3
 8001f52:	4809      	ldr	r0, [pc, #36]	; (8001f78 <HAL_UART_MspInit+0xa4>)
 8001f54:	f001 f89c 	bl	8003090 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001f58:	2200      	movs	r2, #0
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	2025      	movs	r0, #37	; 0x25
 8001f5e:	f000 ffb0 	bl	8002ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001f62:	2025      	movs	r0, #37	; 0x25
 8001f64:	f000 ffc9 	bl	8002efa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001f68:	bf00      	nop
 8001f6a:	3720      	adds	r7, #32
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	40013800 	.word	0x40013800
 8001f74:	40021000 	.word	0x40021000
 8001f78:	40010800 	.word	0x40010800

08001f7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f80:	e7fe      	b.n	8001f80 <NMI_Handler+0x4>

08001f82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f82:	b480      	push	{r7}
 8001f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f86:	e7fe      	b.n	8001f86 <HardFault_Handler+0x4>

08001f88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f8c:	e7fe      	b.n	8001f8c <MemManage_Handler+0x4>

08001f8e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f92:	e7fe      	b.n	8001f92 <BusFault_Handler+0x4>

08001f94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f98:	e7fe      	b.n	8001f98 <UsageFault_Handler+0x4>

08001f9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f9e:	bf00      	nop
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bc80      	pop	{r7}
 8001fa4:	4770      	bx	lr

08001fa6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001faa:	bf00      	nop
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bc80      	pop	{r7}
 8001fb0:	4770      	bx	lr

08001fb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fb6:	bf00      	nop
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bc80      	pop	{r7}
 8001fbc:	4770      	bx	lr

08001fbe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fbe:	b580      	push	{r7, lr}
 8001fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fc2:	f000 f98f 	bl	80022e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fc6:	bf00      	nop
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001fce:	2002      	movs	r0, #2
 8001fd0:	f001 fa2a 	bl	8003428 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001fd4:	bf00      	nop
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001fdc:	2008      	movs	r0, #8
 8001fde:	f001 fa23 	bl	8003428 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001fe2:	bf00      	nop
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001fea:	2010      	movs	r0, #16
 8001fec:	f001 fa1c 	bl	8003428 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001ff0:	bf00      	nop
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001ff8:	4802      	ldr	r0, [pc, #8]	; (8002004 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001ffa:	f002 fb5e 	bl	80046ba <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001ffe:	bf00      	nop
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	20000ca4 	.word	0x20000ca4

08002008 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800200c:	2020      	movs	r0, #32
 800200e:	f001 fa0b 	bl	8003428 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002012:	2080      	movs	r0, #128	; 0x80
 8002014:	f001 fa08 	bl	8003428 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002018:	bf00      	nop
 800201a:	bd80      	pop	{r7, pc}

0800201c <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002020:	4802      	ldr	r0, [pc, #8]	; (800202c <TIM1_BRK_IRQHandler+0x10>)
 8002022:	f004 fd2b 	bl	8006a7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8002026:	bf00      	nop
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	20000594 	.word	0x20000594

08002030 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002034:	4802      	ldr	r0, [pc, #8]	; (8002040 <TIM1_UP_IRQHandler+0x10>)
 8002036:	f004 fd21 	bl	8006a7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800203a:	bf00      	nop
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	20000594 	.word	0x20000594

08002044 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002048:	4802      	ldr	r0, [pc, #8]	; (8002054 <TIM1_TRG_COM_IRQHandler+0x10>)
 800204a:	f004 fd17 	bl	8006a7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800204e:	bf00      	nop
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	20000594 	.word	0x20000594

08002058 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800205c:	4802      	ldr	r0, [pc, #8]	; (8002068 <TIM1_CC_IRQHandler+0x10>)
 800205e:	f004 fd0d 	bl	8006a7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002062:	bf00      	nop
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	20000594 	.word	0x20000594

0800206c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002070:	4802      	ldr	r0, [pc, #8]	; (800207c <USART1_IRQHandler+0x10>)
 8002072:	f005 f96b 	bl	800734c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002076:	bf00      	nop
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	20000550 	.word	0x20000550

08002080 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
	return 1;
 8002084:	2301      	movs	r3, #1
}
 8002086:	4618      	mov	r0, r3
 8002088:	46bd      	mov	sp, r7
 800208a:	bc80      	pop	{r7}
 800208c:	4770      	bx	lr

0800208e <_kill>:

int _kill(int pid, int sig)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b082      	sub	sp, #8
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
 8002096:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002098:	f009 fdda 	bl	800bc50 <__errno>
 800209c:	4603      	mov	r3, r0
 800209e:	2216      	movs	r2, #22
 80020a0:	601a      	str	r2, [r3, #0]
	return -1;
 80020a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <_exit>:

void _exit (int status)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b082      	sub	sp, #8
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80020b6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f7ff ffe7 	bl	800208e <_kill>
	while (1) {}		/* Make sure we hang here */
 80020c0:	e7fe      	b.n	80020c0 <_exit+0x12>

080020c2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b086      	sub	sp, #24
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	60f8      	str	r0, [r7, #12]
 80020ca:	60b9      	str	r1, [r7, #8]
 80020cc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ce:	2300      	movs	r3, #0
 80020d0:	617b      	str	r3, [r7, #20]
 80020d2:	e00a      	b.n	80020ea <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80020d4:	f3af 8000 	nop.w
 80020d8:	4601      	mov	r1, r0
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	1c5a      	adds	r2, r3, #1
 80020de:	60ba      	str	r2, [r7, #8]
 80020e0:	b2ca      	uxtb	r2, r1
 80020e2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	3301      	adds	r3, #1
 80020e8:	617b      	str	r3, [r7, #20]
 80020ea:	697a      	ldr	r2, [r7, #20]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	dbf0      	blt.n	80020d4 <_read+0x12>
	}

return len;
 80020f2:	687b      	ldr	r3, [r7, #4]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3718      	adds	r7, #24
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002108:	2300      	movs	r3, #0
 800210a:	617b      	str	r3, [r7, #20]
 800210c:	e009      	b.n	8002122 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	1c5a      	adds	r2, r3, #1
 8002112:	60ba      	str	r2, [r7, #8]
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	4618      	mov	r0, r3
 8002118:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	3301      	adds	r3, #1
 8002120:	617b      	str	r3, [r7, #20]
 8002122:	697a      	ldr	r2, [r7, #20]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	429a      	cmp	r2, r3
 8002128:	dbf1      	blt.n	800210e <_write+0x12>
	}
	return len;
 800212a:	687b      	ldr	r3, [r7, #4]
}
 800212c:	4618      	mov	r0, r3
 800212e:	3718      	adds	r7, #24
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <_close>:

int _close(int file)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
	return -1;
 800213c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002140:	4618      	mov	r0, r3
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	bc80      	pop	{r7}
 8002148:	4770      	bx	lr

0800214a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800214a:	b480      	push	{r7}
 800214c:	b083      	sub	sp, #12
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
 8002152:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800215a:	605a      	str	r2, [r3, #4]
	return 0;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	bc80      	pop	{r7}
 8002166:	4770      	bx	lr

08002168 <_isatty>:

int _isatty(int file)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
	return 1;
 8002170:	2301      	movs	r3, #1
}
 8002172:	4618      	mov	r0, r3
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	bc80      	pop	{r7}
 800217a:	4770      	bx	lr

0800217c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800217c:	b480      	push	{r7}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	607a      	str	r2, [r7, #4]
	return 0;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3714      	adds	r7, #20
 800218e:	46bd      	mov	sp, r7
 8002190:	bc80      	pop	{r7}
 8002192:	4770      	bx	lr

08002194 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b086      	sub	sp, #24
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800219c:	4a14      	ldr	r2, [pc, #80]	; (80021f0 <_sbrk+0x5c>)
 800219e:	4b15      	ldr	r3, [pc, #84]	; (80021f4 <_sbrk+0x60>)
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021a8:	4b13      	ldr	r3, [pc, #76]	; (80021f8 <_sbrk+0x64>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d102      	bne.n	80021b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021b0:	4b11      	ldr	r3, [pc, #68]	; (80021f8 <_sbrk+0x64>)
 80021b2:	4a12      	ldr	r2, [pc, #72]	; (80021fc <_sbrk+0x68>)
 80021b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021b6:	4b10      	ldr	r3, [pc, #64]	; (80021f8 <_sbrk+0x64>)
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4413      	add	r3, r2
 80021be:	693a      	ldr	r2, [r7, #16]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d207      	bcs.n	80021d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021c4:	f009 fd44 	bl	800bc50 <__errno>
 80021c8:	4603      	mov	r3, r0
 80021ca:	220c      	movs	r2, #12
 80021cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021d2:	e009      	b.n	80021e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021d4:	4b08      	ldr	r3, [pc, #32]	; (80021f8 <_sbrk+0x64>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021da:	4b07      	ldr	r3, [pc, #28]	; (80021f8 <_sbrk+0x64>)
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4413      	add	r3, r2
 80021e2:	4a05      	ldr	r2, [pc, #20]	; (80021f8 <_sbrk+0x64>)
 80021e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021e6:	68fb      	ldr	r3, [r7, #12]
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3718      	adds	r7, #24
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	20005000 	.word	0x20005000
 80021f4:	00000400 	.word	0x00000400
 80021f8:	20000418 	.word	0x20000418
 80021fc:	20000fa0 	.word	0x20000fa0

08002200 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002204:	bf00      	nop
 8002206:	46bd      	mov	sp, r7
 8002208:	bc80      	pop	{r7}
 800220a:	4770      	bx	lr

0800220c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800220c:	480c      	ldr	r0, [pc, #48]	; (8002240 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800220e:	490d      	ldr	r1, [pc, #52]	; (8002244 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002210:	4a0d      	ldr	r2, [pc, #52]	; (8002248 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002212:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002214:	e002      	b.n	800221c <LoopCopyDataInit>

08002216 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002216:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002218:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800221a:	3304      	adds	r3, #4

0800221c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800221c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800221e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002220:	d3f9      	bcc.n	8002216 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002222:	4a0a      	ldr	r2, [pc, #40]	; (800224c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002224:	4c0a      	ldr	r4, [pc, #40]	; (8002250 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002226:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002228:	e001      	b.n	800222e <LoopFillZerobss>

0800222a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800222a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800222c:	3204      	adds	r2, #4

0800222e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800222e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002230:	d3fb      	bcc.n	800222a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002232:	f7ff ffe5 	bl	8002200 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002236:	f009 fd11 	bl	800bc5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800223a:	f7ff fa0b 	bl	8001654 <main>
  bx lr
 800223e:	4770      	bx	lr
  ldr r0, =_sdata
 8002240:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002244:	200003cc 	.word	0x200003cc
  ldr r2, =_sidata
 8002248:	0800f570 	.word	0x0800f570
  ldr r2, =_sbss
 800224c:	200003d0 	.word	0x200003d0
  ldr r4, =_ebss
 8002250:	20000fa0 	.word	0x20000fa0

08002254 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002254:	e7fe      	b.n	8002254 <ADC1_2_IRQHandler>
	...

08002258 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800225c:	4b08      	ldr	r3, [pc, #32]	; (8002280 <HAL_Init+0x28>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a07      	ldr	r2, [pc, #28]	; (8002280 <HAL_Init+0x28>)
 8002262:	f043 0310 	orr.w	r3, r3, #16
 8002266:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002268:	2003      	movs	r0, #3
 800226a:	f000 fe1f 	bl	8002eac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800226e:	2000      	movs	r0, #0
 8002270:	f000 f808 	bl	8002284 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002274:	f7ff fd18 	bl	8001ca8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002278:	2300      	movs	r3, #0
}
 800227a:	4618      	mov	r0, r3
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	40022000 	.word	0x40022000

08002284 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800228c:	4b12      	ldr	r3, [pc, #72]	; (80022d8 <HAL_InitTick+0x54>)
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	4b12      	ldr	r3, [pc, #72]	; (80022dc <HAL_InitTick+0x58>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	4619      	mov	r1, r3
 8002296:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800229a:	fbb3 f3f1 	udiv	r3, r3, r1
 800229e:	fbb2 f3f3 	udiv	r3, r2, r3
 80022a2:	4618      	mov	r0, r3
 80022a4:	f000 fe37 	bl	8002f16 <HAL_SYSTICK_Config>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e00e      	b.n	80022d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2b0f      	cmp	r3, #15
 80022b6:	d80a      	bhi.n	80022ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022b8:	2200      	movs	r2, #0
 80022ba:	6879      	ldr	r1, [r7, #4]
 80022bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022c0:	f000 fdff 	bl	8002ec2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022c4:	4a06      	ldr	r2, [pc, #24]	; (80022e0 <HAL_InitTick+0x5c>)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022ca:	2300      	movs	r3, #0
 80022cc:	e000      	b.n	80022d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3708      	adds	r7, #8
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	20000094 	.word	0x20000094
 80022dc:	2000009c 	.word	0x2000009c
 80022e0:	20000098 	.word	0x20000098

080022e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022e8:	4b05      	ldr	r3, [pc, #20]	; (8002300 <HAL_IncTick+0x1c>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	461a      	mov	r2, r3
 80022ee:	4b05      	ldr	r3, [pc, #20]	; (8002304 <HAL_IncTick+0x20>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4413      	add	r3, r2
 80022f4:	4a03      	ldr	r2, [pc, #12]	; (8002304 <HAL_IncTick+0x20>)
 80022f6:	6013      	str	r3, [r2, #0]
}
 80022f8:	bf00      	nop
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bc80      	pop	{r7}
 80022fe:	4770      	bx	lr
 8002300:	2000009c 	.word	0x2000009c
 8002304:	200007dc 	.word	0x200007dc

08002308 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  return uwTick;
 800230c:	4b02      	ldr	r3, [pc, #8]	; (8002318 <HAL_GetTick+0x10>)
 800230e:	681b      	ldr	r3, [r3, #0]
}
 8002310:	4618      	mov	r0, r3
 8002312:	46bd      	mov	sp, r7
 8002314:	bc80      	pop	{r7}
 8002316:	4770      	bx	lr
 8002318:	200007dc 	.word	0x200007dc

0800231c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002324:	f7ff fff0 	bl	8002308 <HAL_GetTick>
 8002328:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002334:	d005      	beq.n	8002342 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002336:	4b0a      	ldr	r3, [pc, #40]	; (8002360 <HAL_Delay+0x44>)
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	461a      	mov	r2, r3
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	4413      	add	r3, r2
 8002340:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002342:	bf00      	nop
 8002344:	f7ff ffe0 	bl	8002308 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	68fa      	ldr	r2, [r7, #12]
 8002350:	429a      	cmp	r2, r3
 8002352:	d8f7      	bhi.n	8002344 <HAL_Delay+0x28>
  {
  }
}
 8002354:	bf00      	nop
 8002356:	bf00      	nop
 8002358:	3710      	adds	r7, #16
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	2000009c 	.word	0x2000009c

08002364 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800236c:	2300      	movs	r3, #0
 800236e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002370:	2300      	movs	r3, #0
 8002372:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002374:	2300      	movs	r3, #0
 8002376:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002378:	2300      	movs	r3, #0
 800237a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d101      	bne.n	8002386 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e0be      	b.n	8002504 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002390:	2b00      	cmp	r3, #0
 8002392:	d109      	bne.n	80023a8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f7ff fcb2 	bl	8001d0c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f000 fbc5 	bl	8002b38 <ADC_ConversionStop_Disable>
 80023ae:	4603      	mov	r3, r0
 80023b0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b6:	f003 0310 	and.w	r3, r3, #16
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	f040 8099 	bne.w	80024f2 <HAL_ADC_Init+0x18e>
 80023c0:	7dfb      	ldrb	r3, [r7, #23]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	f040 8095 	bne.w	80024f2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023cc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80023d0:	f023 0302 	bic.w	r3, r3, #2
 80023d4:	f043 0202 	orr.w	r2, r3, #2
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80023e4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	7b1b      	ldrb	r3, [r3, #12]
 80023ea:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80023ec:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80023ee:	68ba      	ldr	r2, [r7, #8]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023fc:	d003      	beq.n	8002406 <HAL_ADC_Init+0xa2>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	2b01      	cmp	r3, #1
 8002404:	d102      	bne.n	800240c <HAL_ADC_Init+0xa8>
 8002406:	f44f 7380 	mov.w	r3, #256	; 0x100
 800240a:	e000      	b.n	800240e <HAL_ADC_Init+0xaa>
 800240c:	2300      	movs	r3, #0
 800240e:	693a      	ldr	r2, [r7, #16]
 8002410:	4313      	orrs	r3, r2
 8002412:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	7d1b      	ldrb	r3, [r3, #20]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d119      	bne.n	8002450 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	7b1b      	ldrb	r3, [r3, #12]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d109      	bne.n	8002438 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	699b      	ldr	r3, [r3, #24]
 8002428:	3b01      	subs	r3, #1
 800242a:	035a      	lsls	r2, r3, #13
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	4313      	orrs	r3, r2
 8002430:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002434:	613b      	str	r3, [r7, #16]
 8002436:	e00b      	b.n	8002450 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800243c:	f043 0220 	orr.w	r2, r3, #32
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002448:	f043 0201 	orr.w	r2, r3, #1
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	430a      	orrs	r2, r1
 8002462:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	689a      	ldr	r2, [r3, #8]
 800246a:	4b28      	ldr	r3, [pc, #160]	; (800250c <HAL_ADC_Init+0x1a8>)
 800246c:	4013      	ands	r3, r2
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	6812      	ldr	r2, [r2, #0]
 8002472:	68b9      	ldr	r1, [r7, #8]
 8002474:	430b      	orrs	r3, r1
 8002476:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002480:	d003      	beq.n	800248a <HAL_ADC_Init+0x126>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d104      	bne.n	8002494 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	3b01      	subs	r3, #1
 8002490:	051b      	lsls	r3, r3, #20
 8002492:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800249a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	68fa      	ldr	r2, [r7, #12]
 80024a4:	430a      	orrs	r2, r1
 80024a6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	689a      	ldr	r2, [r3, #8]
 80024ae:	4b18      	ldr	r3, [pc, #96]	; (8002510 <HAL_ADC_Init+0x1ac>)
 80024b0:	4013      	ands	r3, r2
 80024b2:	68ba      	ldr	r2, [r7, #8]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d10b      	bne.n	80024d0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c2:	f023 0303 	bic.w	r3, r3, #3
 80024c6:	f043 0201 	orr.w	r2, r3, #1
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80024ce:	e018      	b.n	8002502 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d4:	f023 0312 	bic.w	r3, r3, #18
 80024d8:	f043 0210 	orr.w	r2, r3, #16
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e4:	f043 0201 	orr.w	r2, r3, #1
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80024f0:	e007      	b.n	8002502 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f6:	f043 0210 	orr.w	r2, r3, #16
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002502:	7dfb      	ldrb	r3, [r7, #23]
}
 8002504:	4618      	mov	r0, r3
 8002506:	3718      	adds	r7, #24
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	ffe1f7fd 	.word	0xffe1f7fd
 8002510:	ff1f0efe 	.word	0xff1f0efe

08002514 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800251c:	2300      	movs	r3, #0
 800251e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002526:	2b01      	cmp	r3, #1
 8002528:	d101      	bne.n	800252e <HAL_ADC_Start+0x1a>
 800252a:	2302      	movs	r3, #2
 800252c:	e098      	b.n	8002660 <HAL_ADC_Start+0x14c>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2201      	movs	r2, #1
 8002532:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f000 faa4 	bl	8002a84 <ADC_Enable>
 800253c:	4603      	mov	r3, r0
 800253e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002540:	7bfb      	ldrb	r3, [r7, #15]
 8002542:	2b00      	cmp	r3, #0
 8002544:	f040 8087 	bne.w	8002656 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800254c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002550:	f023 0301 	bic.w	r3, r3, #1
 8002554:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a41      	ldr	r2, [pc, #260]	; (8002668 <HAL_ADC_Start+0x154>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d105      	bne.n	8002572 <HAL_ADC_Start+0x5e>
 8002566:	4b41      	ldr	r3, [pc, #260]	; (800266c <HAL_ADC_Start+0x158>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d115      	bne.n	800259e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002576:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002588:	2b00      	cmp	r3, #0
 800258a:	d026      	beq.n	80025da <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002590:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002594:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800259c:	e01d      	b.n	80025da <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a2f      	ldr	r2, [pc, #188]	; (800266c <HAL_ADC_Start+0x158>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d004      	beq.n	80025be <HAL_ADC_Start+0xaa>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a2b      	ldr	r2, [pc, #172]	; (8002668 <HAL_ADC_Start+0x154>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d10d      	bne.n	80025da <HAL_ADC_Start+0xc6>
 80025be:	4b2b      	ldr	r3, [pc, #172]	; (800266c <HAL_ADC_Start+0x158>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d007      	beq.n	80025da <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ce:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80025d2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d006      	beq.n	80025f4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ea:	f023 0206 	bic.w	r2, r3, #6
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	62da      	str	r2, [r3, #44]	; 0x2c
 80025f2:	e002      	b.n	80025fa <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f06f 0202 	mvn.w	r2, #2
 800260a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002616:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800261a:	d113      	bne.n	8002644 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002620:	4a11      	ldr	r2, [pc, #68]	; (8002668 <HAL_ADC_Start+0x154>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d105      	bne.n	8002632 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002626:	4b11      	ldr	r3, [pc, #68]	; (800266c <HAL_ADC_Start+0x158>)
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800262e:	2b00      	cmp	r3, #0
 8002630:	d108      	bne.n	8002644 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	689a      	ldr	r2, [r3, #8]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002640:	609a      	str	r2, [r3, #8]
 8002642:	e00c      	b.n	800265e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	689a      	ldr	r2, [r3, #8]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002652:	609a      	str	r2, [r3, #8]
 8002654:	e003      	b.n	800265e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800265e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002660:	4618      	mov	r0, r3
 8002662:	3710      	adds	r7, #16
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	40012800 	.word	0x40012800
 800266c:	40012400 	.word	0x40012400

08002670 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002670:	b590      	push	{r4, r7, lr}
 8002672:	b087      	sub	sp, #28
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800267a:	2300      	movs	r3, #0
 800267c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800267e:	2300      	movs	r3, #0
 8002680:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002682:	2300      	movs	r3, #0
 8002684:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002686:	f7ff fe3f 	bl	8002308 <HAL_GetTick>
 800268a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00b      	beq.n	80026b2 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800269e:	f043 0220 	orr.w	r2, r3, #32
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e0d3      	b.n	800285a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d131      	bne.n	8002724 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d12a      	bne.n	8002724 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80026ce:	e021      	b.n	8002714 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026d6:	d01d      	beq.n	8002714 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d007      	beq.n	80026ee <HAL_ADC_PollForConversion+0x7e>
 80026de:	f7ff fe13 	bl	8002308 <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	683a      	ldr	r2, [r7, #0]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d212      	bcs.n	8002714 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0302 	and.w	r3, r3, #2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d10b      	bne.n	8002714 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002700:	f043 0204 	orr.w	r2, r3, #4
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e0a2      	b.n	800285a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d0d6      	beq.n	80026d0 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002722:	e070      	b.n	8002806 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002724:	4b4f      	ldr	r3, [pc, #316]	; (8002864 <HAL_ADC_PollForConversion+0x1f4>)
 8002726:	681c      	ldr	r4, [r3, #0]
 8002728:	2002      	movs	r0, #2
 800272a:	f004 f813 	bl	8006754 <HAL_RCCEx_GetPeriphCLKFreq>
 800272e:	4603      	mov	r3, r0
 8002730:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	6919      	ldr	r1, [r3, #16]
 800273a:	4b4b      	ldr	r3, [pc, #300]	; (8002868 <HAL_ADC_PollForConversion+0x1f8>)
 800273c:	400b      	ands	r3, r1
 800273e:	2b00      	cmp	r3, #0
 8002740:	d118      	bne.n	8002774 <HAL_ADC_PollForConversion+0x104>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	68d9      	ldr	r1, [r3, #12]
 8002748:	4b48      	ldr	r3, [pc, #288]	; (800286c <HAL_ADC_PollForConversion+0x1fc>)
 800274a:	400b      	ands	r3, r1
 800274c:	2b00      	cmp	r3, #0
 800274e:	d111      	bne.n	8002774 <HAL_ADC_PollForConversion+0x104>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	6919      	ldr	r1, [r3, #16]
 8002756:	4b46      	ldr	r3, [pc, #280]	; (8002870 <HAL_ADC_PollForConversion+0x200>)
 8002758:	400b      	ands	r3, r1
 800275a:	2b00      	cmp	r3, #0
 800275c:	d108      	bne.n	8002770 <HAL_ADC_PollForConversion+0x100>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68d9      	ldr	r1, [r3, #12]
 8002764:	4b43      	ldr	r3, [pc, #268]	; (8002874 <HAL_ADC_PollForConversion+0x204>)
 8002766:	400b      	ands	r3, r1
 8002768:	2b00      	cmp	r3, #0
 800276a:	d101      	bne.n	8002770 <HAL_ADC_PollForConversion+0x100>
 800276c:	2314      	movs	r3, #20
 800276e:	e020      	b.n	80027b2 <HAL_ADC_PollForConversion+0x142>
 8002770:	2329      	movs	r3, #41	; 0x29
 8002772:	e01e      	b.n	80027b2 <HAL_ADC_PollForConversion+0x142>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	6919      	ldr	r1, [r3, #16]
 800277a:	4b3d      	ldr	r3, [pc, #244]	; (8002870 <HAL_ADC_PollForConversion+0x200>)
 800277c:	400b      	ands	r3, r1
 800277e:	2b00      	cmp	r3, #0
 8002780:	d106      	bne.n	8002790 <HAL_ADC_PollForConversion+0x120>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68d9      	ldr	r1, [r3, #12]
 8002788:	4b3a      	ldr	r3, [pc, #232]	; (8002874 <HAL_ADC_PollForConversion+0x204>)
 800278a:	400b      	ands	r3, r1
 800278c:	2b00      	cmp	r3, #0
 800278e:	d00d      	beq.n	80027ac <HAL_ADC_PollForConversion+0x13c>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	6919      	ldr	r1, [r3, #16]
 8002796:	4b38      	ldr	r3, [pc, #224]	; (8002878 <HAL_ADC_PollForConversion+0x208>)
 8002798:	400b      	ands	r3, r1
 800279a:	2b00      	cmp	r3, #0
 800279c:	d108      	bne.n	80027b0 <HAL_ADC_PollForConversion+0x140>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	68d9      	ldr	r1, [r3, #12]
 80027a4:	4b34      	ldr	r3, [pc, #208]	; (8002878 <HAL_ADC_PollForConversion+0x208>)
 80027a6:	400b      	ands	r3, r1
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d101      	bne.n	80027b0 <HAL_ADC_PollForConversion+0x140>
 80027ac:	2354      	movs	r3, #84	; 0x54
 80027ae:	e000      	b.n	80027b2 <HAL_ADC_PollForConversion+0x142>
 80027b0:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80027b2:	fb02 f303 	mul.w	r3, r2, r3
 80027b6:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80027b8:	e021      	b.n	80027fe <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027c0:	d01a      	beq.n	80027f8 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d007      	beq.n	80027d8 <HAL_ADC_PollForConversion+0x168>
 80027c8:	f7ff fd9e 	bl	8002308 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	683a      	ldr	r2, [r7, #0]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d20f      	bcs.n	80027f8 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	429a      	cmp	r2, r3
 80027de:	d90b      	bls.n	80027f8 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e4:	f043 0204 	orr.w	r2, r3, #4
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e030      	b.n	800285a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	3301      	adds	r3, #1
 80027fc:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	693a      	ldr	r2, [r7, #16]
 8002802:	429a      	cmp	r2, r3
 8002804:	d8d9      	bhi.n	80027ba <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f06f 0212 	mvn.w	r2, #18
 800280e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002814:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002826:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800282a:	d115      	bne.n	8002858 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002830:	2b00      	cmp	r3, #0
 8002832:	d111      	bne.n	8002858 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002838:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002844:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d105      	bne.n	8002858 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002850:	f043 0201 	orr.w	r2, r3, #1
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	371c      	adds	r7, #28
 800285e:	46bd      	mov	sp, r7
 8002860:	bd90      	pop	{r4, r7, pc}
 8002862:	bf00      	nop
 8002864:	20000094 	.word	0x20000094
 8002868:	24924924 	.word	0x24924924
 800286c:	00924924 	.word	0x00924924
 8002870:	12492492 	.word	0x12492492
 8002874:	00492492 	.word	0x00492492
 8002878:	00249249 	.word	0x00249249

0800287c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800288a:	4618      	mov	r0, r3
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	bc80      	pop	{r7}
 8002892:	4770      	bx	lr

08002894 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002894:	b480      	push	{r7}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800289e:	2300      	movs	r3, #0
 80028a0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80028a2:	2300      	movs	r3, #0
 80028a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d101      	bne.n	80028b4 <HAL_ADC_ConfigChannel+0x20>
 80028b0:	2302      	movs	r3, #2
 80028b2:	e0dc      	b.n	8002a6e <HAL_ADC_ConfigChannel+0x1da>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	2b06      	cmp	r3, #6
 80028c2:	d81c      	bhi.n	80028fe <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685a      	ldr	r2, [r3, #4]
 80028ce:	4613      	mov	r3, r2
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	4413      	add	r3, r2
 80028d4:	3b05      	subs	r3, #5
 80028d6:	221f      	movs	r2, #31
 80028d8:	fa02 f303 	lsl.w	r3, r2, r3
 80028dc:	43db      	mvns	r3, r3
 80028de:	4019      	ands	r1, r3
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	6818      	ldr	r0, [r3, #0]
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685a      	ldr	r2, [r3, #4]
 80028e8:	4613      	mov	r3, r2
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	4413      	add	r3, r2
 80028ee:	3b05      	subs	r3, #5
 80028f0:	fa00 f203 	lsl.w	r2, r0, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	430a      	orrs	r2, r1
 80028fa:	635a      	str	r2, [r3, #52]	; 0x34
 80028fc:	e03c      	b.n	8002978 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	2b0c      	cmp	r3, #12
 8002904:	d81c      	bhi.n	8002940 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685a      	ldr	r2, [r3, #4]
 8002910:	4613      	mov	r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	4413      	add	r3, r2
 8002916:	3b23      	subs	r3, #35	; 0x23
 8002918:	221f      	movs	r2, #31
 800291a:	fa02 f303 	lsl.w	r3, r2, r3
 800291e:	43db      	mvns	r3, r3
 8002920:	4019      	ands	r1, r3
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	6818      	ldr	r0, [r3, #0]
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	685a      	ldr	r2, [r3, #4]
 800292a:	4613      	mov	r3, r2
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	4413      	add	r3, r2
 8002930:	3b23      	subs	r3, #35	; 0x23
 8002932:	fa00 f203 	lsl.w	r2, r0, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	430a      	orrs	r2, r1
 800293c:	631a      	str	r2, [r3, #48]	; 0x30
 800293e:	e01b      	b.n	8002978 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685a      	ldr	r2, [r3, #4]
 800294a:	4613      	mov	r3, r2
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	4413      	add	r3, r2
 8002950:	3b41      	subs	r3, #65	; 0x41
 8002952:	221f      	movs	r2, #31
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	43db      	mvns	r3, r3
 800295a:	4019      	ands	r1, r3
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	6818      	ldr	r0, [r3, #0]
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685a      	ldr	r2, [r3, #4]
 8002964:	4613      	mov	r3, r2
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	4413      	add	r3, r2
 800296a:	3b41      	subs	r3, #65	; 0x41
 800296c:	fa00 f203 	lsl.w	r2, r0, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	430a      	orrs	r2, r1
 8002976:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2b09      	cmp	r3, #9
 800297e:	d91c      	bls.n	80029ba <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68d9      	ldr	r1, [r3, #12]
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	4613      	mov	r3, r2
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	4413      	add	r3, r2
 8002990:	3b1e      	subs	r3, #30
 8002992:	2207      	movs	r2, #7
 8002994:	fa02 f303 	lsl.w	r3, r2, r3
 8002998:	43db      	mvns	r3, r3
 800299a:	4019      	ands	r1, r3
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	6898      	ldr	r0, [r3, #8]
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	4613      	mov	r3, r2
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	4413      	add	r3, r2
 80029aa:	3b1e      	subs	r3, #30
 80029ac:	fa00 f203 	lsl.w	r2, r0, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	430a      	orrs	r2, r1
 80029b6:	60da      	str	r2, [r3, #12]
 80029b8:	e019      	b.n	80029ee <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	6919      	ldr	r1, [r3, #16]
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	4613      	mov	r3, r2
 80029c6:	005b      	lsls	r3, r3, #1
 80029c8:	4413      	add	r3, r2
 80029ca:	2207      	movs	r2, #7
 80029cc:	fa02 f303 	lsl.w	r3, r2, r3
 80029d0:	43db      	mvns	r3, r3
 80029d2:	4019      	ands	r1, r3
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	6898      	ldr	r0, [r3, #8]
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	4613      	mov	r3, r2
 80029de:	005b      	lsls	r3, r3, #1
 80029e0:	4413      	add	r3, r2
 80029e2:	fa00 f203 	lsl.w	r2, r0, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	430a      	orrs	r2, r1
 80029ec:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2b10      	cmp	r3, #16
 80029f4:	d003      	beq.n	80029fe <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80029fa:	2b11      	cmp	r3, #17
 80029fc:	d132      	bne.n	8002a64 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a1d      	ldr	r2, [pc, #116]	; (8002a78 <HAL_ADC_ConfigChannel+0x1e4>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d125      	bne.n	8002a54 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d126      	bne.n	8002a64 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	689a      	ldr	r2, [r3, #8]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002a24:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2b10      	cmp	r3, #16
 8002a2c:	d11a      	bne.n	8002a64 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a2e:	4b13      	ldr	r3, [pc, #76]	; (8002a7c <HAL_ADC_ConfigChannel+0x1e8>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a13      	ldr	r2, [pc, #76]	; (8002a80 <HAL_ADC_ConfigChannel+0x1ec>)
 8002a34:	fba2 2303 	umull	r2, r3, r2, r3
 8002a38:	0c9a      	lsrs	r2, r3, #18
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	4413      	add	r3, r2
 8002a40:	005b      	lsls	r3, r3, #1
 8002a42:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a44:	e002      	b.n	8002a4c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	3b01      	subs	r3, #1
 8002a4a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d1f9      	bne.n	8002a46 <HAL_ADC_ConfigChannel+0x1b2>
 8002a52:	e007      	b.n	8002a64 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a58:	f043 0220 	orr.w	r2, r3, #32
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3714      	adds	r7, #20
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bc80      	pop	{r7}
 8002a76:	4770      	bx	lr
 8002a78:	40012400 	.word	0x40012400
 8002a7c:	20000094 	.word	0x20000094
 8002a80:	431bde83 	.word	0x431bde83

08002a84 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002a90:	2300      	movs	r3, #0
 8002a92:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d040      	beq.n	8002b24 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	689a      	ldr	r2, [r3, #8]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f042 0201 	orr.w	r2, r2, #1
 8002ab0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002ab2:	4b1f      	ldr	r3, [pc, #124]	; (8002b30 <ADC_Enable+0xac>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a1f      	ldr	r2, [pc, #124]	; (8002b34 <ADC_Enable+0xb0>)
 8002ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8002abc:	0c9b      	lsrs	r3, r3, #18
 8002abe:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002ac0:	e002      	b.n	8002ac8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	3b01      	subs	r3, #1
 8002ac6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1f9      	bne.n	8002ac2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002ace:	f7ff fc1b 	bl	8002308 <HAL_GetTick>
 8002ad2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002ad4:	e01f      	b.n	8002b16 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002ad6:	f7ff fc17 	bl	8002308 <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d918      	bls.n	8002b16 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d011      	beq.n	8002b16 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af6:	f043 0210 	orr.w	r2, r3, #16
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b02:	f043 0201 	orr.w	r2, r3, #1
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e007      	b.n	8002b26 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f003 0301 	and.w	r3, r3, #1
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d1d8      	bne.n	8002ad6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3710      	adds	r7, #16
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	20000094 	.word	0x20000094
 8002b34:	431bde83 	.word	0x431bde83

08002b38 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b40:	2300      	movs	r3, #0
 8002b42:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d12e      	bne.n	8002bb0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	689a      	ldr	r2, [r3, #8]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f022 0201 	bic.w	r2, r2, #1
 8002b60:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b62:	f7ff fbd1 	bl	8002308 <HAL_GetTick>
 8002b66:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002b68:	e01b      	b.n	8002ba2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002b6a:	f7ff fbcd 	bl	8002308 <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d914      	bls.n	8002ba2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d10d      	bne.n	8002ba2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b8a:	f043 0210 	orr.w	r2, r3, #16
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b96:	f043 0201 	orr.w	r2, r3, #1
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e007      	b.n	8002bb2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f003 0301 	and.w	r3, r3, #1
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d0dc      	beq.n	8002b6a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3710      	adds	r7, #16
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
	...

08002bbc <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002bbc:	b590      	push	{r4, r7, lr}
 8002bbe:	b087      	sub	sp, #28
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d101      	bne.n	8002bda <HAL_ADCEx_Calibration_Start+0x1e>
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	e095      	b.n	8002d06 <HAL_ADCEx_Calibration_Start+0x14a>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f7ff ffa8 	bl	8002b38 <ADC_ConversionStop_Disable>
 8002be8:	4603      	mov	r3, r0
 8002bea:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002bec:	7dfb      	ldrb	r3, [r7, #23]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	f040 8084 	bne.w	8002cfc <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002bfc:	f023 0302 	bic.w	r3, r3, #2
 8002c00:	f043 0202 	orr.w	r2, r3, #2
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002c08:	4b41      	ldr	r3, [pc, #260]	; (8002d10 <HAL_ADCEx_Calibration_Start+0x154>)
 8002c0a:	681c      	ldr	r4, [r3, #0]
 8002c0c:	2002      	movs	r0, #2
 8002c0e:	f003 fda1 	bl	8006754 <HAL_RCCEx_GetPeriphCLKFreq>
 8002c12:	4603      	mov	r3, r0
 8002c14:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8002c18:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002c1a:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8002c1c:	e002      	b.n	8002c24 <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	3b01      	subs	r3, #1
 8002c22:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d1f9      	bne.n	8002c1e <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f7ff ff2a 	bl	8002a84 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	689a      	ldr	r2, [r3, #8]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f042 0208 	orr.w	r2, r2, #8
 8002c3e:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002c40:	f7ff fb62 	bl	8002308 <HAL_GetTick>
 8002c44:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002c46:	e01b      	b.n	8002c80 <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002c48:	f7ff fb5e 	bl	8002308 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b0a      	cmp	r3, #10
 8002c54:	d914      	bls.n	8002c80 <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	f003 0308 	and.w	r3, r3, #8
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d00d      	beq.n	8002c80 <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c68:	f023 0312 	bic.w	r3, r3, #18
 8002c6c:	f043 0210 	orr.w	r2, r3, #16
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e042      	b.n	8002d06 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f003 0308 	and.w	r3, r3, #8
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1dc      	bne.n	8002c48 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	689a      	ldr	r2, [r3, #8]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f042 0204 	orr.w	r2, r2, #4
 8002c9c:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002c9e:	f7ff fb33 	bl	8002308 <HAL_GetTick>
 8002ca2:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002ca4:	e01b      	b.n	8002cde <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002ca6:	f7ff fb2f 	bl	8002308 <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	2b0a      	cmp	r3, #10
 8002cb2:	d914      	bls.n	8002cde <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f003 0304 	and.w	r3, r3, #4
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d00d      	beq.n	8002cde <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc6:	f023 0312 	bic.w	r3, r3, #18
 8002cca:	f043 0210 	orr.w	r2, r3, #16
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e013      	b.n	8002d06 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	f003 0304 	and.w	r3, r3, #4
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d1dc      	bne.n	8002ca6 <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf0:	f023 0303 	bic.w	r3, r3, #3
 8002cf4:	f043 0201 	orr.w	r2, r3, #1
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002d04:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	371c      	adds	r7, #28
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd90      	pop	{r4, r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	20000094 	.word	0x20000094

08002d14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b085      	sub	sp, #20
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f003 0307 	and.w	r3, r3, #7
 8002d22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d24:	4b0c      	ldr	r3, [pc, #48]	; (8002d58 <__NVIC_SetPriorityGrouping+0x44>)
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d2a:	68ba      	ldr	r2, [r7, #8]
 8002d2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d30:	4013      	ands	r3, r2
 8002d32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d46:	4a04      	ldr	r2, [pc, #16]	; (8002d58 <__NVIC_SetPriorityGrouping+0x44>)
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	60d3      	str	r3, [r2, #12]
}
 8002d4c:	bf00      	nop
 8002d4e:	3714      	adds	r7, #20
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bc80      	pop	{r7}
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	e000ed00 	.word	0xe000ed00

08002d5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d60:	4b04      	ldr	r3, [pc, #16]	; (8002d74 <__NVIC_GetPriorityGrouping+0x18>)
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	0a1b      	lsrs	r3, r3, #8
 8002d66:	f003 0307 	and.w	r3, r3, #7
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bc80      	pop	{r7}
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	e000ed00 	.word	0xe000ed00

08002d78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	4603      	mov	r3, r0
 8002d80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	db0b      	blt.n	8002da2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d8a:	79fb      	ldrb	r3, [r7, #7]
 8002d8c:	f003 021f 	and.w	r2, r3, #31
 8002d90:	4906      	ldr	r1, [pc, #24]	; (8002dac <__NVIC_EnableIRQ+0x34>)
 8002d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d96:	095b      	lsrs	r3, r3, #5
 8002d98:	2001      	movs	r0, #1
 8002d9a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002da2:	bf00      	nop
 8002da4:	370c      	adds	r7, #12
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bc80      	pop	{r7}
 8002daa:	4770      	bx	lr
 8002dac:	e000e100 	.word	0xe000e100

08002db0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	4603      	mov	r3, r0
 8002db8:	6039      	str	r1, [r7, #0]
 8002dba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	db0a      	blt.n	8002dda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	b2da      	uxtb	r2, r3
 8002dc8:	490c      	ldr	r1, [pc, #48]	; (8002dfc <__NVIC_SetPriority+0x4c>)
 8002dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dce:	0112      	lsls	r2, r2, #4
 8002dd0:	b2d2      	uxtb	r2, r2
 8002dd2:	440b      	add	r3, r1
 8002dd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dd8:	e00a      	b.n	8002df0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	b2da      	uxtb	r2, r3
 8002dde:	4908      	ldr	r1, [pc, #32]	; (8002e00 <__NVIC_SetPriority+0x50>)
 8002de0:	79fb      	ldrb	r3, [r7, #7]
 8002de2:	f003 030f 	and.w	r3, r3, #15
 8002de6:	3b04      	subs	r3, #4
 8002de8:	0112      	lsls	r2, r2, #4
 8002dea:	b2d2      	uxtb	r2, r2
 8002dec:	440b      	add	r3, r1
 8002dee:	761a      	strb	r2, [r3, #24]
}
 8002df0:	bf00      	nop
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bc80      	pop	{r7}
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	e000e100 	.word	0xe000e100
 8002e00:	e000ed00 	.word	0xe000ed00

08002e04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b089      	sub	sp, #36	; 0x24
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f003 0307 	and.w	r3, r3, #7
 8002e16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	f1c3 0307 	rsb	r3, r3, #7
 8002e1e:	2b04      	cmp	r3, #4
 8002e20:	bf28      	it	cs
 8002e22:	2304      	movcs	r3, #4
 8002e24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	3304      	adds	r3, #4
 8002e2a:	2b06      	cmp	r3, #6
 8002e2c:	d902      	bls.n	8002e34 <NVIC_EncodePriority+0x30>
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	3b03      	subs	r3, #3
 8002e32:	e000      	b.n	8002e36 <NVIC_EncodePriority+0x32>
 8002e34:	2300      	movs	r3, #0
 8002e36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e42:	43da      	mvns	r2, r3
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	401a      	ands	r2, r3
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e4c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	fa01 f303 	lsl.w	r3, r1, r3
 8002e56:	43d9      	mvns	r1, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e5c:	4313      	orrs	r3, r2
         );
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3724      	adds	r7, #36	; 0x24
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bc80      	pop	{r7}
 8002e66:	4770      	bx	lr

08002e68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	3b01      	subs	r3, #1
 8002e74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e78:	d301      	bcc.n	8002e7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e00f      	b.n	8002e9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e7e:	4a0a      	ldr	r2, [pc, #40]	; (8002ea8 <SysTick_Config+0x40>)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	3b01      	subs	r3, #1
 8002e84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e86:	210f      	movs	r1, #15
 8002e88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e8c:	f7ff ff90 	bl	8002db0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e90:	4b05      	ldr	r3, [pc, #20]	; (8002ea8 <SysTick_Config+0x40>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e96:	4b04      	ldr	r3, [pc, #16]	; (8002ea8 <SysTick_Config+0x40>)
 8002e98:	2207      	movs	r2, #7
 8002e9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3708      	adds	r7, #8
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	e000e010 	.word	0xe000e010

08002eac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f7ff ff2d 	bl	8002d14 <__NVIC_SetPriorityGrouping>
}
 8002eba:	bf00      	nop
 8002ebc:	3708      	adds	r7, #8
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}

08002ec2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ec2:	b580      	push	{r7, lr}
 8002ec4:	b086      	sub	sp, #24
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	4603      	mov	r3, r0
 8002eca:	60b9      	str	r1, [r7, #8]
 8002ecc:	607a      	str	r2, [r7, #4]
 8002ece:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ed4:	f7ff ff42 	bl	8002d5c <__NVIC_GetPriorityGrouping>
 8002ed8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	68b9      	ldr	r1, [r7, #8]
 8002ede:	6978      	ldr	r0, [r7, #20]
 8002ee0:	f7ff ff90 	bl	8002e04 <NVIC_EncodePriority>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002eea:	4611      	mov	r1, r2
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7ff ff5f 	bl	8002db0 <__NVIC_SetPriority>
}
 8002ef2:	bf00      	nop
 8002ef4:	3718      	adds	r7, #24
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b082      	sub	sp, #8
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	4603      	mov	r3, r0
 8002f02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7ff ff35 	bl	8002d78 <__NVIC_EnableIRQ>
}
 8002f0e:	bf00      	nop
 8002f10:	3708      	adds	r7, #8
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b082      	sub	sp, #8
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f7ff ffa2 	bl	8002e68 <SysTick_Config>
 8002f24:	4603      	mov	r3, r0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3708      	adds	r7, #8
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f2e:	b480      	push	{r7}
 8002f30:	b085      	sub	sp, #20
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f36:	2300      	movs	r3, #0
 8002f38:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d008      	beq.n	8002f56 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2204      	movs	r2, #4
 8002f48:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e020      	b.n	8002f98 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f022 020e 	bic.w	r2, r2, #14
 8002f64:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f022 0201 	bic.w	r2, r2, #1
 8002f74:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f7e:	2101      	movs	r1, #1
 8002f80:	fa01 f202 	lsl.w	r2, r1, r2
 8002f84:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3714      	adds	r7, #20
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bc80      	pop	{r7}
 8002fa0:	4770      	bx	lr
	...

08002fa4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fac:	2300      	movs	r3, #0
 8002fae:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d005      	beq.n	8002fc6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2204      	movs	r2, #4
 8002fbe:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	73fb      	strb	r3, [r7, #15]
 8002fc4:	e051      	b.n	800306a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f022 020e 	bic.w	r2, r2, #14
 8002fd4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f022 0201 	bic.w	r2, r2, #1
 8002fe4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a22      	ldr	r2, [pc, #136]	; (8003074 <HAL_DMA_Abort_IT+0xd0>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d029      	beq.n	8003044 <HAL_DMA_Abort_IT+0xa0>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a20      	ldr	r2, [pc, #128]	; (8003078 <HAL_DMA_Abort_IT+0xd4>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d022      	beq.n	8003040 <HAL_DMA_Abort_IT+0x9c>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a1f      	ldr	r2, [pc, #124]	; (800307c <HAL_DMA_Abort_IT+0xd8>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d01a      	beq.n	800303a <HAL_DMA_Abort_IT+0x96>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a1d      	ldr	r2, [pc, #116]	; (8003080 <HAL_DMA_Abort_IT+0xdc>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d012      	beq.n	8003034 <HAL_DMA_Abort_IT+0x90>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a1c      	ldr	r2, [pc, #112]	; (8003084 <HAL_DMA_Abort_IT+0xe0>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d00a      	beq.n	800302e <HAL_DMA_Abort_IT+0x8a>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a1a      	ldr	r2, [pc, #104]	; (8003088 <HAL_DMA_Abort_IT+0xe4>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d102      	bne.n	8003028 <HAL_DMA_Abort_IT+0x84>
 8003022:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003026:	e00e      	b.n	8003046 <HAL_DMA_Abort_IT+0xa2>
 8003028:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800302c:	e00b      	b.n	8003046 <HAL_DMA_Abort_IT+0xa2>
 800302e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003032:	e008      	b.n	8003046 <HAL_DMA_Abort_IT+0xa2>
 8003034:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003038:	e005      	b.n	8003046 <HAL_DMA_Abort_IT+0xa2>
 800303a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800303e:	e002      	b.n	8003046 <HAL_DMA_Abort_IT+0xa2>
 8003040:	2310      	movs	r3, #16
 8003042:	e000      	b.n	8003046 <HAL_DMA_Abort_IT+0xa2>
 8003044:	2301      	movs	r3, #1
 8003046:	4a11      	ldr	r2, [pc, #68]	; (800308c <HAL_DMA_Abort_IT+0xe8>)
 8003048:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2201      	movs	r2, #1
 800304e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800305e:	2b00      	cmp	r3, #0
 8003060:	d003      	beq.n	800306a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	4798      	blx	r3
    } 
  }
  return status;
 800306a:	7bfb      	ldrb	r3, [r7, #15]
}
 800306c:	4618      	mov	r0, r3
 800306e:	3710      	adds	r7, #16
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	40020008 	.word	0x40020008
 8003078:	4002001c 	.word	0x4002001c
 800307c:	40020030 	.word	0x40020030
 8003080:	40020044 	.word	0x40020044
 8003084:	40020058 	.word	0x40020058
 8003088:	4002006c 	.word	0x4002006c
 800308c:	40020000 	.word	0x40020000

08003090 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003090:	b480      	push	{r7}
 8003092:	b08b      	sub	sp, #44	; 0x2c
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800309a:	2300      	movs	r3, #0
 800309c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800309e:	2300      	movs	r3, #0
 80030a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030a2:	e169      	b.n	8003378 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80030a4:	2201      	movs	r2, #1
 80030a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	69fa      	ldr	r2, [r7, #28]
 80030b4:	4013      	ands	r3, r2
 80030b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80030b8:	69ba      	ldr	r2, [r7, #24]
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	429a      	cmp	r2, r3
 80030be:	f040 8158 	bne.w	8003372 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	4a9a      	ldr	r2, [pc, #616]	; (8003330 <HAL_GPIO_Init+0x2a0>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d05e      	beq.n	800318a <HAL_GPIO_Init+0xfa>
 80030cc:	4a98      	ldr	r2, [pc, #608]	; (8003330 <HAL_GPIO_Init+0x2a0>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d875      	bhi.n	80031be <HAL_GPIO_Init+0x12e>
 80030d2:	4a98      	ldr	r2, [pc, #608]	; (8003334 <HAL_GPIO_Init+0x2a4>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d058      	beq.n	800318a <HAL_GPIO_Init+0xfa>
 80030d8:	4a96      	ldr	r2, [pc, #600]	; (8003334 <HAL_GPIO_Init+0x2a4>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d86f      	bhi.n	80031be <HAL_GPIO_Init+0x12e>
 80030de:	4a96      	ldr	r2, [pc, #600]	; (8003338 <HAL_GPIO_Init+0x2a8>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d052      	beq.n	800318a <HAL_GPIO_Init+0xfa>
 80030e4:	4a94      	ldr	r2, [pc, #592]	; (8003338 <HAL_GPIO_Init+0x2a8>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d869      	bhi.n	80031be <HAL_GPIO_Init+0x12e>
 80030ea:	4a94      	ldr	r2, [pc, #592]	; (800333c <HAL_GPIO_Init+0x2ac>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d04c      	beq.n	800318a <HAL_GPIO_Init+0xfa>
 80030f0:	4a92      	ldr	r2, [pc, #584]	; (800333c <HAL_GPIO_Init+0x2ac>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d863      	bhi.n	80031be <HAL_GPIO_Init+0x12e>
 80030f6:	4a92      	ldr	r2, [pc, #584]	; (8003340 <HAL_GPIO_Init+0x2b0>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d046      	beq.n	800318a <HAL_GPIO_Init+0xfa>
 80030fc:	4a90      	ldr	r2, [pc, #576]	; (8003340 <HAL_GPIO_Init+0x2b0>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d85d      	bhi.n	80031be <HAL_GPIO_Init+0x12e>
 8003102:	2b12      	cmp	r3, #18
 8003104:	d82a      	bhi.n	800315c <HAL_GPIO_Init+0xcc>
 8003106:	2b12      	cmp	r3, #18
 8003108:	d859      	bhi.n	80031be <HAL_GPIO_Init+0x12e>
 800310a:	a201      	add	r2, pc, #4	; (adr r2, 8003110 <HAL_GPIO_Init+0x80>)
 800310c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003110:	0800318b 	.word	0x0800318b
 8003114:	08003165 	.word	0x08003165
 8003118:	08003177 	.word	0x08003177
 800311c:	080031b9 	.word	0x080031b9
 8003120:	080031bf 	.word	0x080031bf
 8003124:	080031bf 	.word	0x080031bf
 8003128:	080031bf 	.word	0x080031bf
 800312c:	080031bf 	.word	0x080031bf
 8003130:	080031bf 	.word	0x080031bf
 8003134:	080031bf 	.word	0x080031bf
 8003138:	080031bf 	.word	0x080031bf
 800313c:	080031bf 	.word	0x080031bf
 8003140:	080031bf 	.word	0x080031bf
 8003144:	080031bf 	.word	0x080031bf
 8003148:	080031bf 	.word	0x080031bf
 800314c:	080031bf 	.word	0x080031bf
 8003150:	080031bf 	.word	0x080031bf
 8003154:	0800316d 	.word	0x0800316d
 8003158:	08003181 	.word	0x08003181
 800315c:	4a79      	ldr	r2, [pc, #484]	; (8003344 <HAL_GPIO_Init+0x2b4>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d013      	beq.n	800318a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003162:	e02c      	b.n	80031be <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	623b      	str	r3, [r7, #32]
          break;
 800316a:	e029      	b.n	80031c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	3304      	adds	r3, #4
 8003172:	623b      	str	r3, [r7, #32]
          break;
 8003174:	e024      	b.n	80031c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	3308      	adds	r3, #8
 800317c:	623b      	str	r3, [r7, #32]
          break;
 800317e:	e01f      	b.n	80031c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	330c      	adds	r3, #12
 8003186:	623b      	str	r3, [r7, #32]
          break;
 8003188:	e01a      	b.n	80031c0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d102      	bne.n	8003198 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003192:	2304      	movs	r3, #4
 8003194:	623b      	str	r3, [r7, #32]
          break;
 8003196:	e013      	b.n	80031c0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	2b01      	cmp	r3, #1
 800319e:	d105      	bne.n	80031ac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80031a0:	2308      	movs	r3, #8
 80031a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	69fa      	ldr	r2, [r7, #28]
 80031a8:	611a      	str	r2, [r3, #16]
          break;
 80031aa:	e009      	b.n	80031c0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80031ac:	2308      	movs	r3, #8
 80031ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	69fa      	ldr	r2, [r7, #28]
 80031b4:	615a      	str	r2, [r3, #20]
          break;
 80031b6:	e003      	b.n	80031c0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80031b8:	2300      	movs	r3, #0
 80031ba:	623b      	str	r3, [r7, #32]
          break;
 80031bc:	e000      	b.n	80031c0 <HAL_GPIO_Init+0x130>
          break;
 80031be:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	2bff      	cmp	r3, #255	; 0xff
 80031c4:	d801      	bhi.n	80031ca <HAL_GPIO_Init+0x13a>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	e001      	b.n	80031ce <HAL_GPIO_Init+0x13e>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	3304      	adds	r3, #4
 80031ce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	2bff      	cmp	r3, #255	; 0xff
 80031d4:	d802      	bhi.n	80031dc <HAL_GPIO_Init+0x14c>
 80031d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	e002      	b.n	80031e2 <HAL_GPIO_Init+0x152>
 80031dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031de:	3b08      	subs	r3, #8
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	210f      	movs	r1, #15
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	fa01 f303 	lsl.w	r3, r1, r3
 80031f0:	43db      	mvns	r3, r3
 80031f2:	401a      	ands	r2, r3
 80031f4:	6a39      	ldr	r1, [r7, #32]
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	fa01 f303 	lsl.w	r3, r1, r3
 80031fc:	431a      	orrs	r2, r3
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800320a:	2b00      	cmp	r3, #0
 800320c:	f000 80b1 	beq.w	8003372 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003210:	4b4d      	ldr	r3, [pc, #308]	; (8003348 <HAL_GPIO_Init+0x2b8>)
 8003212:	699b      	ldr	r3, [r3, #24]
 8003214:	4a4c      	ldr	r2, [pc, #304]	; (8003348 <HAL_GPIO_Init+0x2b8>)
 8003216:	f043 0301 	orr.w	r3, r3, #1
 800321a:	6193      	str	r3, [r2, #24]
 800321c:	4b4a      	ldr	r3, [pc, #296]	; (8003348 <HAL_GPIO_Init+0x2b8>)
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	f003 0301 	and.w	r3, r3, #1
 8003224:	60bb      	str	r3, [r7, #8]
 8003226:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003228:	4a48      	ldr	r2, [pc, #288]	; (800334c <HAL_GPIO_Init+0x2bc>)
 800322a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322c:	089b      	lsrs	r3, r3, #2
 800322e:	3302      	adds	r3, #2
 8003230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003234:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003238:	f003 0303 	and.w	r3, r3, #3
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	220f      	movs	r2, #15
 8003240:	fa02 f303 	lsl.w	r3, r2, r3
 8003244:	43db      	mvns	r3, r3
 8003246:	68fa      	ldr	r2, [r7, #12]
 8003248:	4013      	ands	r3, r2
 800324a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4a40      	ldr	r2, [pc, #256]	; (8003350 <HAL_GPIO_Init+0x2c0>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d013      	beq.n	800327c <HAL_GPIO_Init+0x1ec>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4a3f      	ldr	r2, [pc, #252]	; (8003354 <HAL_GPIO_Init+0x2c4>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d00d      	beq.n	8003278 <HAL_GPIO_Init+0x1e8>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4a3e      	ldr	r2, [pc, #248]	; (8003358 <HAL_GPIO_Init+0x2c8>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d007      	beq.n	8003274 <HAL_GPIO_Init+0x1e4>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	4a3d      	ldr	r2, [pc, #244]	; (800335c <HAL_GPIO_Init+0x2cc>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d101      	bne.n	8003270 <HAL_GPIO_Init+0x1e0>
 800326c:	2303      	movs	r3, #3
 800326e:	e006      	b.n	800327e <HAL_GPIO_Init+0x1ee>
 8003270:	2304      	movs	r3, #4
 8003272:	e004      	b.n	800327e <HAL_GPIO_Init+0x1ee>
 8003274:	2302      	movs	r3, #2
 8003276:	e002      	b.n	800327e <HAL_GPIO_Init+0x1ee>
 8003278:	2301      	movs	r3, #1
 800327a:	e000      	b.n	800327e <HAL_GPIO_Init+0x1ee>
 800327c:	2300      	movs	r3, #0
 800327e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003280:	f002 0203 	and.w	r2, r2, #3
 8003284:	0092      	lsls	r2, r2, #2
 8003286:	4093      	lsls	r3, r2
 8003288:	68fa      	ldr	r2, [r7, #12]
 800328a:	4313      	orrs	r3, r2
 800328c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800328e:	492f      	ldr	r1, [pc, #188]	; (800334c <HAL_GPIO_Init+0x2bc>)
 8003290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003292:	089b      	lsrs	r3, r3, #2
 8003294:	3302      	adds	r3, #2
 8003296:	68fa      	ldr	r2, [r7, #12]
 8003298:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d006      	beq.n	80032b6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80032a8:	4b2d      	ldr	r3, [pc, #180]	; (8003360 <HAL_GPIO_Init+0x2d0>)
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	492c      	ldr	r1, [pc, #176]	; (8003360 <HAL_GPIO_Init+0x2d0>)
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	600b      	str	r3, [r1, #0]
 80032b4:	e006      	b.n	80032c4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80032b6:	4b2a      	ldr	r3, [pc, #168]	; (8003360 <HAL_GPIO_Init+0x2d0>)
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	43db      	mvns	r3, r3
 80032be:	4928      	ldr	r1, [pc, #160]	; (8003360 <HAL_GPIO_Init+0x2d0>)
 80032c0:	4013      	ands	r3, r2
 80032c2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d006      	beq.n	80032de <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80032d0:	4b23      	ldr	r3, [pc, #140]	; (8003360 <HAL_GPIO_Init+0x2d0>)
 80032d2:	685a      	ldr	r2, [r3, #4]
 80032d4:	4922      	ldr	r1, [pc, #136]	; (8003360 <HAL_GPIO_Init+0x2d0>)
 80032d6:	69bb      	ldr	r3, [r7, #24]
 80032d8:	4313      	orrs	r3, r2
 80032da:	604b      	str	r3, [r1, #4]
 80032dc:	e006      	b.n	80032ec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80032de:	4b20      	ldr	r3, [pc, #128]	; (8003360 <HAL_GPIO_Init+0x2d0>)
 80032e0:	685a      	ldr	r2, [r3, #4]
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	43db      	mvns	r3, r3
 80032e6:	491e      	ldr	r1, [pc, #120]	; (8003360 <HAL_GPIO_Init+0x2d0>)
 80032e8:	4013      	ands	r3, r2
 80032ea:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d006      	beq.n	8003306 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80032f8:	4b19      	ldr	r3, [pc, #100]	; (8003360 <HAL_GPIO_Init+0x2d0>)
 80032fa:	689a      	ldr	r2, [r3, #8]
 80032fc:	4918      	ldr	r1, [pc, #96]	; (8003360 <HAL_GPIO_Init+0x2d0>)
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	4313      	orrs	r3, r2
 8003302:	608b      	str	r3, [r1, #8]
 8003304:	e006      	b.n	8003314 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003306:	4b16      	ldr	r3, [pc, #88]	; (8003360 <HAL_GPIO_Init+0x2d0>)
 8003308:	689a      	ldr	r2, [r3, #8]
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	43db      	mvns	r3, r3
 800330e:	4914      	ldr	r1, [pc, #80]	; (8003360 <HAL_GPIO_Init+0x2d0>)
 8003310:	4013      	ands	r3, r2
 8003312:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d021      	beq.n	8003364 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003320:	4b0f      	ldr	r3, [pc, #60]	; (8003360 <HAL_GPIO_Init+0x2d0>)
 8003322:	68da      	ldr	r2, [r3, #12]
 8003324:	490e      	ldr	r1, [pc, #56]	; (8003360 <HAL_GPIO_Init+0x2d0>)
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	4313      	orrs	r3, r2
 800332a:	60cb      	str	r3, [r1, #12]
 800332c:	e021      	b.n	8003372 <HAL_GPIO_Init+0x2e2>
 800332e:	bf00      	nop
 8003330:	10320000 	.word	0x10320000
 8003334:	10310000 	.word	0x10310000
 8003338:	10220000 	.word	0x10220000
 800333c:	10210000 	.word	0x10210000
 8003340:	10120000 	.word	0x10120000
 8003344:	10110000 	.word	0x10110000
 8003348:	40021000 	.word	0x40021000
 800334c:	40010000 	.word	0x40010000
 8003350:	40010800 	.word	0x40010800
 8003354:	40010c00 	.word	0x40010c00
 8003358:	40011000 	.word	0x40011000
 800335c:	40011400 	.word	0x40011400
 8003360:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003364:	4b0b      	ldr	r3, [pc, #44]	; (8003394 <HAL_GPIO_Init+0x304>)
 8003366:	68da      	ldr	r2, [r3, #12]
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	43db      	mvns	r3, r3
 800336c:	4909      	ldr	r1, [pc, #36]	; (8003394 <HAL_GPIO_Init+0x304>)
 800336e:	4013      	ands	r3, r2
 8003370:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003374:	3301      	adds	r3, #1
 8003376:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337e:	fa22 f303 	lsr.w	r3, r2, r3
 8003382:	2b00      	cmp	r3, #0
 8003384:	f47f ae8e 	bne.w	80030a4 <HAL_GPIO_Init+0x14>
  }
}
 8003388:	bf00      	nop
 800338a:	bf00      	nop
 800338c:	372c      	adds	r7, #44	; 0x2c
 800338e:	46bd      	mov	sp, r7
 8003390:	bc80      	pop	{r7}
 8003392:	4770      	bx	lr
 8003394:	40010400 	.word	0x40010400

08003398 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003398:	b480      	push	{r7}
 800339a:	b085      	sub	sp, #20
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	460b      	mov	r3, r1
 80033a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	689a      	ldr	r2, [r3, #8]
 80033a8:	887b      	ldrh	r3, [r7, #2]
 80033aa:	4013      	ands	r3, r2
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d002      	beq.n	80033b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80033b0:	2301      	movs	r3, #1
 80033b2:	73fb      	strb	r3, [r7, #15]
 80033b4:	e001      	b.n	80033ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80033b6:	2300      	movs	r3, #0
 80033b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80033ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3714      	adds	r7, #20
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bc80      	pop	{r7}
 80033c4:	4770      	bx	lr

080033c6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033c6:	b480      	push	{r7}
 80033c8:	b083      	sub	sp, #12
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
 80033ce:	460b      	mov	r3, r1
 80033d0:	807b      	strh	r3, [r7, #2]
 80033d2:	4613      	mov	r3, r2
 80033d4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80033d6:	787b      	ldrb	r3, [r7, #1]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d003      	beq.n	80033e4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033dc:	887a      	ldrh	r2, [r7, #2]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80033e2:	e003      	b.n	80033ec <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80033e4:	887b      	ldrh	r3, [r7, #2]
 80033e6:	041a      	lsls	r2, r3, #16
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	611a      	str	r2, [r3, #16]
}
 80033ec:	bf00      	nop
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bc80      	pop	{r7}
 80033f4:	4770      	bx	lr

080033f6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80033f6:	b480      	push	{r7}
 80033f8:	b085      	sub	sp, #20
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
 80033fe:	460b      	mov	r3, r1
 8003400:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003408:	887a      	ldrh	r2, [r7, #2]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	4013      	ands	r3, r2
 800340e:	041a      	lsls	r2, r3, #16
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	43d9      	mvns	r1, r3
 8003414:	887b      	ldrh	r3, [r7, #2]
 8003416:	400b      	ands	r3, r1
 8003418:	431a      	orrs	r2, r3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	611a      	str	r2, [r3, #16]
}
 800341e:	bf00      	nop
 8003420:	3714      	adds	r7, #20
 8003422:	46bd      	mov	sp, r7
 8003424:	bc80      	pop	{r7}
 8003426:	4770      	bx	lr

08003428 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	4603      	mov	r3, r0
 8003430:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003432:	4b08      	ldr	r3, [pc, #32]	; (8003454 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003434:	695a      	ldr	r2, [r3, #20]
 8003436:	88fb      	ldrh	r3, [r7, #6]
 8003438:	4013      	ands	r3, r2
 800343a:	2b00      	cmp	r3, #0
 800343c:	d006      	beq.n	800344c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800343e:	4a05      	ldr	r2, [pc, #20]	; (8003454 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003440:	88fb      	ldrh	r3, [r7, #6]
 8003442:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003444:	88fb      	ldrh	r3, [r7, #6]
 8003446:	4618      	mov	r0, r3
 8003448:	f7fe fb8e 	bl	8001b68 <HAL_GPIO_EXTI_Callback>
  }
}
 800344c:	bf00      	nop
 800344e:	3708      	adds	r7, #8
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	40010400 	.word	0x40010400

08003458 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d101      	bne.n	800346a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e12b      	b.n	80036c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003470:	b2db      	uxtb	r3, r3
 8003472:	2b00      	cmp	r3, #0
 8003474:	d106      	bne.n	8003484 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f7fe fcaa 	bl	8001dd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2224      	movs	r2, #36	; 0x24
 8003488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f022 0201 	bic.w	r2, r2, #1
 800349a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80034bc:	f003 f84e 	bl	800655c <HAL_RCC_GetPCLK1Freq>
 80034c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	4a81      	ldr	r2, [pc, #516]	; (80036cc <HAL_I2C_Init+0x274>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d807      	bhi.n	80034dc <HAL_I2C_Init+0x84>
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	4a80      	ldr	r2, [pc, #512]	; (80036d0 <HAL_I2C_Init+0x278>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	bf94      	ite	ls
 80034d4:	2301      	movls	r3, #1
 80034d6:	2300      	movhi	r3, #0
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	e006      	b.n	80034ea <HAL_I2C_Init+0x92>
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	4a7d      	ldr	r2, [pc, #500]	; (80036d4 <HAL_I2C_Init+0x27c>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	bf94      	ite	ls
 80034e4:	2301      	movls	r3, #1
 80034e6:	2300      	movhi	r3, #0
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d001      	beq.n	80034f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e0e7      	b.n	80036c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	4a78      	ldr	r2, [pc, #480]	; (80036d8 <HAL_I2C_Init+0x280>)
 80034f6:	fba2 2303 	umull	r2, r3, r2, r3
 80034fa:	0c9b      	lsrs	r3, r3, #18
 80034fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	68ba      	ldr	r2, [r7, #8]
 800350e:	430a      	orrs	r2, r1
 8003510:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	6a1b      	ldr	r3, [r3, #32]
 8003518:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	4a6a      	ldr	r2, [pc, #424]	; (80036cc <HAL_I2C_Init+0x274>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d802      	bhi.n	800352c <HAL_I2C_Init+0xd4>
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	3301      	adds	r3, #1
 800352a:	e009      	b.n	8003540 <HAL_I2C_Init+0xe8>
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003532:	fb02 f303 	mul.w	r3, r2, r3
 8003536:	4a69      	ldr	r2, [pc, #420]	; (80036dc <HAL_I2C_Init+0x284>)
 8003538:	fba2 2303 	umull	r2, r3, r2, r3
 800353c:	099b      	lsrs	r3, r3, #6
 800353e:	3301      	adds	r3, #1
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	6812      	ldr	r2, [r2, #0]
 8003544:	430b      	orrs	r3, r1
 8003546:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	69db      	ldr	r3, [r3, #28]
 800354e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003552:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	495c      	ldr	r1, [pc, #368]	; (80036cc <HAL_I2C_Init+0x274>)
 800355c:	428b      	cmp	r3, r1
 800355e:	d819      	bhi.n	8003594 <HAL_I2C_Init+0x13c>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	1e59      	subs	r1, r3, #1
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	005b      	lsls	r3, r3, #1
 800356a:	fbb1 f3f3 	udiv	r3, r1, r3
 800356e:	1c59      	adds	r1, r3, #1
 8003570:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003574:	400b      	ands	r3, r1
 8003576:	2b00      	cmp	r3, #0
 8003578:	d00a      	beq.n	8003590 <HAL_I2C_Init+0x138>
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	1e59      	subs	r1, r3, #1
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	005b      	lsls	r3, r3, #1
 8003584:	fbb1 f3f3 	udiv	r3, r1, r3
 8003588:	3301      	adds	r3, #1
 800358a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800358e:	e051      	b.n	8003634 <HAL_I2C_Init+0x1dc>
 8003590:	2304      	movs	r3, #4
 8003592:	e04f      	b.n	8003634 <HAL_I2C_Init+0x1dc>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d111      	bne.n	80035c0 <HAL_I2C_Init+0x168>
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	1e58      	subs	r0, r3, #1
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6859      	ldr	r1, [r3, #4]
 80035a4:	460b      	mov	r3, r1
 80035a6:	005b      	lsls	r3, r3, #1
 80035a8:	440b      	add	r3, r1
 80035aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80035ae:	3301      	adds	r3, #1
 80035b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	bf0c      	ite	eq
 80035b8:	2301      	moveq	r3, #1
 80035ba:	2300      	movne	r3, #0
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	e012      	b.n	80035e6 <HAL_I2C_Init+0x18e>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	1e58      	subs	r0, r3, #1
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6859      	ldr	r1, [r3, #4]
 80035c8:	460b      	mov	r3, r1
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	440b      	add	r3, r1
 80035ce:	0099      	lsls	r1, r3, #2
 80035d0:	440b      	add	r3, r1
 80035d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80035d6:	3301      	adds	r3, #1
 80035d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035dc:	2b00      	cmp	r3, #0
 80035de:	bf0c      	ite	eq
 80035e0:	2301      	moveq	r3, #1
 80035e2:	2300      	movne	r3, #0
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d001      	beq.n	80035ee <HAL_I2C_Init+0x196>
 80035ea:	2301      	movs	r3, #1
 80035ec:	e022      	b.n	8003634 <HAL_I2C_Init+0x1dc>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d10e      	bne.n	8003614 <HAL_I2C_Init+0x1bc>
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	1e58      	subs	r0, r3, #1
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6859      	ldr	r1, [r3, #4]
 80035fe:	460b      	mov	r3, r1
 8003600:	005b      	lsls	r3, r3, #1
 8003602:	440b      	add	r3, r1
 8003604:	fbb0 f3f3 	udiv	r3, r0, r3
 8003608:	3301      	adds	r3, #1
 800360a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800360e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003612:	e00f      	b.n	8003634 <HAL_I2C_Init+0x1dc>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	1e58      	subs	r0, r3, #1
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6859      	ldr	r1, [r3, #4]
 800361c:	460b      	mov	r3, r1
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	440b      	add	r3, r1
 8003622:	0099      	lsls	r1, r3, #2
 8003624:	440b      	add	r3, r1
 8003626:	fbb0 f3f3 	udiv	r3, r0, r3
 800362a:	3301      	adds	r3, #1
 800362c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003630:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003634:	6879      	ldr	r1, [r7, #4]
 8003636:	6809      	ldr	r1, [r1, #0]
 8003638:	4313      	orrs	r3, r2
 800363a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	69da      	ldr	r2, [r3, #28]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a1b      	ldr	r3, [r3, #32]
 800364e:	431a      	orrs	r2, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	430a      	orrs	r2, r1
 8003656:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003662:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	6911      	ldr	r1, [r2, #16]
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	68d2      	ldr	r2, [r2, #12]
 800366e:	4311      	orrs	r1, r2
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	6812      	ldr	r2, [r2, #0]
 8003674:	430b      	orrs	r3, r1
 8003676:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	695a      	ldr	r2, [r3, #20]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	699b      	ldr	r3, [r3, #24]
 800368a:	431a      	orrs	r2, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	430a      	orrs	r2, r1
 8003692:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f042 0201 	orr.w	r2, r2, #1
 80036a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2220      	movs	r2, #32
 80036ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3710      	adds	r7, #16
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	000186a0 	.word	0x000186a0
 80036d0:	001e847f 	.word	0x001e847f
 80036d4:	003d08ff 	.word	0x003d08ff
 80036d8:	431bde83 	.word	0x431bde83
 80036dc:	10624dd3 	.word	0x10624dd3

080036e0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b088      	sub	sp, #32
 80036e4:	af02      	add	r7, sp, #8
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	4608      	mov	r0, r1
 80036ea:	4611      	mov	r1, r2
 80036ec:	461a      	mov	r2, r3
 80036ee:	4603      	mov	r3, r0
 80036f0:	817b      	strh	r3, [r7, #10]
 80036f2:	460b      	mov	r3, r1
 80036f4:	813b      	strh	r3, [r7, #8]
 80036f6:	4613      	mov	r3, r2
 80036f8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80036fa:	f7fe fe05 	bl	8002308 <HAL_GetTick>
 80036fe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003706:	b2db      	uxtb	r3, r3
 8003708:	2b20      	cmp	r3, #32
 800370a:	f040 80d9 	bne.w	80038c0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	9300      	str	r3, [sp, #0]
 8003712:	2319      	movs	r3, #25
 8003714:	2201      	movs	r2, #1
 8003716:	496d      	ldr	r1, [pc, #436]	; (80038cc <HAL_I2C_Mem_Write+0x1ec>)
 8003718:	68f8      	ldr	r0, [r7, #12]
 800371a:	f000 fcc1 	bl	80040a0 <I2C_WaitOnFlagUntilTimeout>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d001      	beq.n	8003728 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003724:	2302      	movs	r3, #2
 8003726:	e0cc      	b.n	80038c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800372e:	2b01      	cmp	r3, #1
 8003730:	d101      	bne.n	8003736 <HAL_I2C_Mem_Write+0x56>
 8003732:	2302      	movs	r3, #2
 8003734:	e0c5      	b.n	80038c2 <HAL_I2C_Mem_Write+0x1e2>
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2201      	movs	r2, #1
 800373a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0301 	and.w	r3, r3, #1
 8003748:	2b01      	cmp	r3, #1
 800374a:	d007      	beq.n	800375c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f042 0201 	orr.w	r2, r2, #1
 800375a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800376a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2221      	movs	r2, #33	; 0x21
 8003770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2240      	movs	r2, #64	; 0x40
 8003778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2200      	movs	r2, #0
 8003780:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6a3a      	ldr	r2, [r7, #32]
 8003786:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800378c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003792:	b29a      	uxth	r2, r3
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	4a4d      	ldr	r2, [pc, #308]	; (80038d0 <HAL_I2C_Mem_Write+0x1f0>)
 800379c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800379e:	88f8      	ldrh	r0, [r7, #6]
 80037a0:	893a      	ldrh	r2, [r7, #8]
 80037a2:	8979      	ldrh	r1, [r7, #10]
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	9301      	str	r3, [sp, #4]
 80037a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037aa:	9300      	str	r3, [sp, #0]
 80037ac:	4603      	mov	r3, r0
 80037ae:	68f8      	ldr	r0, [r7, #12]
 80037b0:	f000 faf8 	bl	8003da4 <I2C_RequestMemoryWrite>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d052      	beq.n	8003860 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e081      	b.n	80038c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037be:	697a      	ldr	r2, [r7, #20]
 80037c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037c2:	68f8      	ldr	r0, [r7, #12]
 80037c4:	f000 fd42 	bl	800424c <I2C_WaitOnTXEFlagUntilTimeout>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d00d      	beq.n	80037ea <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d2:	2b04      	cmp	r3, #4
 80037d4:	d107      	bne.n	80037e6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e06b      	b.n	80038c2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ee:	781a      	ldrb	r2, [r3, #0]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fa:	1c5a      	adds	r2, r3, #1
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003804:	3b01      	subs	r3, #1
 8003806:	b29a      	uxth	r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003810:	b29b      	uxth	r3, r3
 8003812:	3b01      	subs	r3, #1
 8003814:	b29a      	uxth	r2, r3
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	695b      	ldr	r3, [r3, #20]
 8003820:	f003 0304 	and.w	r3, r3, #4
 8003824:	2b04      	cmp	r3, #4
 8003826:	d11b      	bne.n	8003860 <HAL_I2C_Mem_Write+0x180>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800382c:	2b00      	cmp	r3, #0
 800382e:	d017      	beq.n	8003860 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003834:	781a      	ldrb	r2, [r3, #0]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003840:	1c5a      	adds	r2, r3, #1
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800384a:	3b01      	subs	r3, #1
 800384c:	b29a      	uxth	r2, r3
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003856:	b29b      	uxth	r3, r3
 8003858:	3b01      	subs	r3, #1
 800385a:	b29a      	uxth	r2, r3
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003864:	2b00      	cmp	r3, #0
 8003866:	d1aa      	bne.n	80037be <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003868:	697a      	ldr	r2, [r7, #20]
 800386a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800386c:	68f8      	ldr	r0, [r7, #12]
 800386e:	f000 fd2e 	bl	80042ce <I2C_WaitOnBTFFlagUntilTimeout>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d00d      	beq.n	8003894 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387c:	2b04      	cmp	r3, #4
 800387e:	d107      	bne.n	8003890 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800388e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e016      	b.n	80038c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2220      	movs	r2, #32
 80038a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80038bc:	2300      	movs	r3, #0
 80038be:	e000      	b.n	80038c2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80038c0:	2302      	movs	r3, #2
  }
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3718      	adds	r7, #24
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	00100002 	.word	0x00100002
 80038d0:	ffff0000 	.word	0xffff0000

080038d4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b08c      	sub	sp, #48	; 0x30
 80038d8:	af02      	add	r7, sp, #8
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	4608      	mov	r0, r1
 80038de:	4611      	mov	r1, r2
 80038e0:	461a      	mov	r2, r3
 80038e2:	4603      	mov	r3, r0
 80038e4:	817b      	strh	r3, [r7, #10]
 80038e6:	460b      	mov	r3, r1
 80038e8:	813b      	strh	r3, [r7, #8]
 80038ea:	4613      	mov	r3, r2
 80038ec:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80038ee:	2300      	movs	r3, #0
 80038f0:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80038f2:	f7fe fd09 	bl	8002308 <HAL_GetTick>
 80038f6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	2b20      	cmp	r3, #32
 8003902:	f040 8244 	bne.w	8003d8e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003908:	9300      	str	r3, [sp, #0]
 800390a:	2319      	movs	r3, #25
 800390c:	2201      	movs	r2, #1
 800390e:	4982      	ldr	r1, [pc, #520]	; (8003b18 <HAL_I2C_Mem_Read+0x244>)
 8003910:	68f8      	ldr	r0, [r7, #12]
 8003912:	f000 fbc5 	bl	80040a0 <I2C_WaitOnFlagUntilTimeout>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d001      	beq.n	8003920 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800391c:	2302      	movs	r3, #2
 800391e:	e237      	b.n	8003d90 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003926:	2b01      	cmp	r3, #1
 8003928:	d101      	bne.n	800392e <HAL_I2C_Mem_Read+0x5a>
 800392a:	2302      	movs	r3, #2
 800392c:	e230      	b.n	8003d90 <HAL_I2C_Mem_Read+0x4bc>
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2201      	movs	r2, #1
 8003932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0301 	and.w	r3, r3, #1
 8003940:	2b01      	cmp	r3, #1
 8003942:	d007      	beq.n	8003954 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f042 0201 	orr.w	r2, r2, #1
 8003952:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003962:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2222      	movs	r2, #34	; 0x22
 8003968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2240      	movs	r2, #64	; 0x40
 8003970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2200      	movs	r2, #0
 8003978:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800397e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003984:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800398a:	b29a      	uxth	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	4a62      	ldr	r2, [pc, #392]	; (8003b1c <HAL_I2C_Mem_Read+0x248>)
 8003994:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003996:	88f8      	ldrh	r0, [r7, #6]
 8003998:	893a      	ldrh	r2, [r7, #8]
 800399a:	8979      	ldrh	r1, [r7, #10]
 800399c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399e:	9301      	str	r3, [sp, #4]
 80039a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039a2:	9300      	str	r3, [sp, #0]
 80039a4:	4603      	mov	r3, r0
 80039a6:	68f8      	ldr	r0, [r7, #12]
 80039a8:	f000 fa92 	bl	8003ed0 <I2C_RequestMemoryRead>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d001      	beq.n	80039b6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e1ec      	b.n	8003d90 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d113      	bne.n	80039e6 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039be:	2300      	movs	r3, #0
 80039c0:	61fb      	str	r3, [r7, #28]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	695b      	ldr	r3, [r3, #20]
 80039c8:	61fb      	str	r3, [r7, #28]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	699b      	ldr	r3, [r3, #24]
 80039d0:	61fb      	str	r3, [r7, #28]
 80039d2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039e2:	601a      	str	r2, [r3, #0]
 80039e4:	e1c0      	b.n	8003d68 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d11e      	bne.n	8003a2c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039fc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80039fe:	b672      	cpsid	i
}
 8003a00:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a02:	2300      	movs	r3, #0
 8003a04:	61bb      	str	r3, [r7, #24]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	695b      	ldr	r3, [r3, #20]
 8003a0c:	61bb      	str	r3, [r7, #24]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	699b      	ldr	r3, [r3, #24]
 8003a14:	61bb      	str	r3, [r7, #24]
 8003a16:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a26:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003a28:	b662      	cpsie	i
}
 8003a2a:	e035      	b.n	8003a98 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d11e      	bne.n	8003a72 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a42:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003a44:	b672      	cpsid	i
}
 8003a46:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a48:	2300      	movs	r3, #0
 8003a4a:	617b      	str	r3, [r7, #20]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	617b      	str	r3, [r7, #20]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	617b      	str	r3, [r7, #20]
 8003a5c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a6c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003a6e:	b662      	cpsie	i
}
 8003a70:	e012      	b.n	8003a98 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a80:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a82:	2300      	movs	r3, #0
 8003a84:	613b      	str	r3, [r7, #16]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	695b      	ldr	r3, [r3, #20]
 8003a8c:	613b      	str	r3, [r7, #16]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	699b      	ldr	r3, [r3, #24]
 8003a94:	613b      	str	r3, [r7, #16]
 8003a96:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003a98:	e166      	b.n	8003d68 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a9e:	2b03      	cmp	r3, #3
 8003aa0:	f200 811f 	bhi.w	8003ce2 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d123      	bne.n	8003af4 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003aac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003ab0:	68f8      	ldr	r0, [r7, #12]
 8003ab2:	f000 fc4d 	bl	8004350 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d001      	beq.n	8003ac0 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e167      	b.n	8003d90 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	691a      	ldr	r2, [r3, #16]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aca:	b2d2      	uxtb	r2, r2
 8003acc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad2:	1c5a      	adds	r2, r3, #1
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003adc:	3b01      	subs	r3, #1
 8003ade:	b29a      	uxth	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	3b01      	subs	r3, #1
 8003aec:	b29a      	uxth	r2, r3
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003af2:	e139      	b.n	8003d68 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	d152      	bne.n	8003ba2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afe:	9300      	str	r3, [sp, #0]
 8003b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b02:	2200      	movs	r2, #0
 8003b04:	4906      	ldr	r1, [pc, #24]	; (8003b20 <HAL_I2C_Mem_Read+0x24c>)
 8003b06:	68f8      	ldr	r0, [r7, #12]
 8003b08:	f000 faca 	bl	80040a0 <I2C_WaitOnFlagUntilTimeout>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d008      	beq.n	8003b24 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e13c      	b.n	8003d90 <HAL_I2C_Mem_Read+0x4bc>
 8003b16:	bf00      	nop
 8003b18:	00100002 	.word	0x00100002
 8003b1c:	ffff0000 	.word	0xffff0000
 8003b20:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003b24:	b672      	cpsid	i
}
 8003b26:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	691a      	ldr	r2, [r3, #16]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b42:	b2d2      	uxtb	r2, r2
 8003b44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4a:	1c5a      	adds	r2, r3, #1
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b54:	3b01      	subs	r3, #1
 8003b56:	b29a      	uxth	r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	3b01      	subs	r3, #1
 8003b64:	b29a      	uxth	r2, r3
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003b6a:	b662      	cpsie	i
}
 8003b6c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	691a      	ldr	r2, [r3, #16]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b78:	b2d2      	uxtb	r2, r2
 8003b7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b80:	1c5a      	adds	r2, r3, #1
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	b29a      	uxth	r2, r3
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	3b01      	subs	r3, #1
 8003b9a:	b29a      	uxth	r2, r3
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ba0:	e0e2      	b.n	8003d68 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba4:	9300      	str	r3, [sp, #0]
 8003ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ba8:	2200      	movs	r2, #0
 8003baa:	497b      	ldr	r1, [pc, #492]	; (8003d98 <HAL_I2C_Mem_Read+0x4c4>)
 8003bac:	68f8      	ldr	r0, [r7, #12]
 8003bae:	f000 fa77 	bl	80040a0 <I2C_WaitOnFlagUntilTimeout>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d001      	beq.n	8003bbc <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e0e9      	b.n	8003d90 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bca:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003bcc:	b672      	cpsid	i
}
 8003bce:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	691a      	ldr	r2, [r3, #16]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bda:	b2d2      	uxtb	r2, r2
 8003bdc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be2:	1c5a      	adds	r2, r3, #1
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bec:	3b01      	subs	r3, #1
 8003bee:	b29a      	uxth	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	b29a      	uxth	r2, r3
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003c02:	4b66      	ldr	r3, [pc, #408]	; (8003d9c <HAL_I2C_Mem_Read+0x4c8>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	08db      	lsrs	r3, r3, #3
 8003c08:	4a65      	ldr	r2, [pc, #404]	; (8003da0 <HAL_I2C_Mem_Read+0x4cc>)
 8003c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c0e:	0a1a      	lsrs	r2, r3, #8
 8003c10:	4613      	mov	r3, r2
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	4413      	add	r3, r2
 8003c16:	00da      	lsls	r2, r3, #3
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003c1c:	6a3b      	ldr	r3, [r7, #32]
 8003c1e:	3b01      	subs	r3, #1
 8003c20:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003c22:	6a3b      	ldr	r3, [r7, #32]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d118      	bne.n	8003c5a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2220      	movs	r2, #32
 8003c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c42:	f043 0220 	orr.w	r2, r3, #32
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003c4a:	b662      	cpsie	i
}
 8003c4c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e09a      	b.n	8003d90 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	695b      	ldr	r3, [r3, #20]
 8003c60:	f003 0304 	and.w	r3, r3, #4
 8003c64:	2b04      	cmp	r3, #4
 8003c66:	d1d9      	bne.n	8003c1c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	691a      	ldr	r2, [r3, #16]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c82:	b2d2      	uxtb	r2, r2
 8003c84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8a:	1c5a      	adds	r2, r3, #1
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c94:	3b01      	subs	r3, #1
 8003c96:	b29a      	uxth	r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	b29a      	uxth	r2, r3
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003caa:	b662      	cpsie	i
}
 8003cac:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	691a      	ldr	r2, [r3, #16]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb8:	b2d2      	uxtb	r2, r2
 8003cba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc0:	1c5a      	adds	r2, r3, #1
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	b29a      	uxth	r2, r3
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	3b01      	subs	r3, #1
 8003cda:	b29a      	uxth	r2, r3
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ce0:	e042      	b.n	8003d68 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ce2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ce4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003ce6:	68f8      	ldr	r0, [r7, #12]
 8003ce8:	f000 fb32 	bl	8004350 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d001      	beq.n	8003cf6 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e04c      	b.n	8003d90 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	691a      	ldr	r2, [r3, #16]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d00:	b2d2      	uxtb	r2, r2
 8003d02:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d08:	1c5a      	adds	r2, r3, #1
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d12:	3b01      	subs	r3, #1
 8003d14:	b29a      	uxth	r2, r3
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	3b01      	subs	r3, #1
 8003d22:	b29a      	uxth	r2, r3
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	695b      	ldr	r3, [r3, #20]
 8003d2e:	f003 0304 	and.w	r3, r3, #4
 8003d32:	2b04      	cmp	r3, #4
 8003d34:	d118      	bne.n	8003d68 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	691a      	ldr	r2, [r3, #16]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d40:	b2d2      	uxtb	r2, r2
 8003d42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d48:	1c5a      	adds	r2, r3, #1
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d52:	3b01      	subs	r3, #1
 8003d54:	b29a      	uxth	r2, r3
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	3b01      	subs	r3, #1
 8003d62:	b29a      	uxth	r2, r3
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	f47f ae94 	bne.w	8003a9a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2220      	movs	r2, #32
 8003d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	e000      	b.n	8003d90 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8003d8e:	2302      	movs	r3, #2
  }
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3728      	adds	r7, #40	; 0x28
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	00010004 	.word	0x00010004
 8003d9c:	20000094 	.word	0x20000094
 8003da0:	14f8b589 	.word	0x14f8b589

08003da4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b088      	sub	sp, #32
 8003da8:	af02      	add	r7, sp, #8
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	4608      	mov	r0, r1
 8003dae:	4611      	mov	r1, r2
 8003db0:	461a      	mov	r2, r3
 8003db2:	4603      	mov	r3, r0
 8003db4:	817b      	strh	r3, [r7, #10]
 8003db6:	460b      	mov	r3, r1
 8003db8:	813b      	strh	r3, [r7, #8]
 8003dba:	4613      	mov	r3, r2
 8003dbc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003dcc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd0:	9300      	str	r3, [sp, #0]
 8003dd2:	6a3b      	ldr	r3, [r7, #32]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003dda:	68f8      	ldr	r0, [r7, #12]
 8003ddc:	f000 f960 	bl	80040a0 <I2C_WaitOnFlagUntilTimeout>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00d      	beq.n	8003e02 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003df4:	d103      	bne.n	8003dfe <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dfc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e05f      	b.n	8003ec2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e02:	897b      	ldrh	r3, [r7, #10]
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	461a      	mov	r2, r3
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e10:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e14:	6a3a      	ldr	r2, [r7, #32]
 8003e16:	492d      	ldr	r1, [pc, #180]	; (8003ecc <I2C_RequestMemoryWrite+0x128>)
 8003e18:	68f8      	ldr	r0, [r7, #12]
 8003e1a:	f000 f998 	bl	800414e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d001      	beq.n	8003e28 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e04c      	b.n	8003ec2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e28:	2300      	movs	r3, #0
 8003e2a:	617b      	str	r3, [r7, #20]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	695b      	ldr	r3, [r3, #20]
 8003e32:	617b      	str	r3, [r7, #20]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	699b      	ldr	r3, [r3, #24]
 8003e3a:	617b      	str	r3, [r7, #20]
 8003e3c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e40:	6a39      	ldr	r1, [r7, #32]
 8003e42:	68f8      	ldr	r0, [r7, #12]
 8003e44:	f000 fa02 	bl	800424c <I2C_WaitOnTXEFlagUntilTimeout>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d00d      	beq.n	8003e6a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e52:	2b04      	cmp	r3, #4
 8003e54:	d107      	bne.n	8003e66 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e64:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e02b      	b.n	8003ec2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e6a:	88fb      	ldrh	r3, [r7, #6]
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d105      	bne.n	8003e7c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e70:	893b      	ldrh	r3, [r7, #8]
 8003e72:	b2da      	uxtb	r2, r3
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	611a      	str	r2, [r3, #16]
 8003e7a:	e021      	b.n	8003ec0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003e7c:	893b      	ldrh	r3, [r7, #8]
 8003e7e:	0a1b      	lsrs	r3, r3, #8
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	b2da      	uxtb	r2, r3
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e8c:	6a39      	ldr	r1, [r7, #32]
 8003e8e:	68f8      	ldr	r0, [r7, #12]
 8003e90:	f000 f9dc 	bl	800424c <I2C_WaitOnTXEFlagUntilTimeout>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d00d      	beq.n	8003eb6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9e:	2b04      	cmp	r3, #4
 8003ea0:	d107      	bne.n	8003eb2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eb0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e005      	b.n	8003ec2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003eb6:	893b      	ldrh	r3, [r7, #8]
 8003eb8:	b2da      	uxtb	r2, r3
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3718      	adds	r7, #24
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	00010002 	.word	0x00010002

08003ed0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b088      	sub	sp, #32
 8003ed4:	af02      	add	r7, sp, #8
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	4608      	mov	r0, r1
 8003eda:	4611      	mov	r1, r2
 8003edc:	461a      	mov	r2, r3
 8003ede:	4603      	mov	r3, r0
 8003ee0:	817b      	strh	r3, [r7, #10]
 8003ee2:	460b      	mov	r3, r1
 8003ee4:	813b      	strh	r3, [r7, #8]
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ef8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f08:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0c:	9300      	str	r3, [sp, #0]
 8003f0e:	6a3b      	ldr	r3, [r7, #32]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f16:	68f8      	ldr	r0, [r7, #12]
 8003f18:	f000 f8c2 	bl	80040a0 <I2C_WaitOnFlagUntilTimeout>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00d      	beq.n	8003f3e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f30:	d103      	bne.n	8003f3a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f38:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e0aa      	b.n	8004094 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f3e:	897b      	ldrh	r3, [r7, #10]
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	461a      	mov	r2, r3
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f4c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f50:	6a3a      	ldr	r2, [r7, #32]
 8003f52:	4952      	ldr	r1, [pc, #328]	; (800409c <I2C_RequestMemoryRead+0x1cc>)
 8003f54:	68f8      	ldr	r0, [r7, #12]
 8003f56:	f000 f8fa 	bl	800414e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d001      	beq.n	8003f64 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e097      	b.n	8004094 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f64:	2300      	movs	r3, #0
 8003f66:	617b      	str	r3, [r7, #20]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	695b      	ldr	r3, [r3, #20]
 8003f6e:	617b      	str	r3, [r7, #20]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	617b      	str	r3, [r7, #20]
 8003f78:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f7c:	6a39      	ldr	r1, [r7, #32]
 8003f7e:	68f8      	ldr	r0, [r7, #12]
 8003f80:	f000 f964 	bl	800424c <I2C_WaitOnTXEFlagUntilTimeout>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00d      	beq.n	8003fa6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8e:	2b04      	cmp	r3, #4
 8003f90:	d107      	bne.n	8003fa2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fa0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e076      	b.n	8004094 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003fa6:	88fb      	ldrh	r3, [r7, #6]
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d105      	bne.n	8003fb8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003fac:	893b      	ldrh	r3, [r7, #8]
 8003fae:	b2da      	uxtb	r2, r3
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	611a      	str	r2, [r3, #16]
 8003fb6:	e021      	b.n	8003ffc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003fb8:	893b      	ldrh	r3, [r7, #8]
 8003fba:	0a1b      	lsrs	r3, r3, #8
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	b2da      	uxtb	r2, r3
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fc8:	6a39      	ldr	r1, [r7, #32]
 8003fca:	68f8      	ldr	r0, [r7, #12]
 8003fcc:	f000 f93e 	bl	800424c <I2C_WaitOnTXEFlagUntilTimeout>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d00d      	beq.n	8003ff2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fda:	2b04      	cmp	r3, #4
 8003fdc:	d107      	bne.n	8003fee <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e050      	b.n	8004094 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ff2:	893b      	ldrh	r3, [r7, #8]
 8003ff4:	b2da      	uxtb	r2, r3
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ffc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ffe:	6a39      	ldr	r1, [r7, #32]
 8004000:	68f8      	ldr	r0, [r7, #12]
 8004002:	f000 f923 	bl	800424c <I2C_WaitOnTXEFlagUntilTimeout>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d00d      	beq.n	8004028 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004010:	2b04      	cmp	r3, #4
 8004012:	d107      	bne.n	8004024 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004022:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e035      	b.n	8004094 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004036:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403a:	9300      	str	r3, [sp, #0]
 800403c:	6a3b      	ldr	r3, [r7, #32]
 800403e:	2200      	movs	r2, #0
 8004040:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004044:	68f8      	ldr	r0, [r7, #12]
 8004046:	f000 f82b 	bl	80040a0 <I2C_WaitOnFlagUntilTimeout>
 800404a:	4603      	mov	r3, r0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d00d      	beq.n	800406c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800405a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800405e:	d103      	bne.n	8004068 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004066:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	e013      	b.n	8004094 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800406c:	897b      	ldrh	r3, [r7, #10]
 800406e:	b2db      	uxtb	r3, r3
 8004070:	f043 0301 	orr.w	r3, r3, #1
 8004074:	b2da      	uxtb	r2, r3
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800407c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407e:	6a3a      	ldr	r2, [r7, #32]
 8004080:	4906      	ldr	r1, [pc, #24]	; (800409c <I2C_RequestMemoryRead+0x1cc>)
 8004082:	68f8      	ldr	r0, [r7, #12]
 8004084:	f000 f863 	bl	800414e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d001      	beq.n	8004092 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e000      	b.n	8004094 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004092:	2300      	movs	r3, #0
}
 8004094:	4618      	mov	r0, r3
 8004096:	3718      	adds	r7, #24
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}
 800409c:	00010002 	.word	0x00010002

080040a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	60b9      	str	r1, [r7, #8]
 80040aa:	603b      	str	r3, [r7, #0]
 80040ac:	4613      	mov	r3, r2
 80040ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040b0:	e025      	b.n	80040fe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040b8:	d021      	beq.n	80040fe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040ba:	f7fe f925 	bl	8002308 <HAL_GetTick>
 80040be:	4602      	mov	r2, r0
 80040c0:	69bb      	ldr	r3, [r7, #24]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	683a      	ldr	r2, [r7, #0]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d302      	bcc.n	80040d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d116      	bne.n	80040fe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2200      	movs	r2, #0
 80040d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2220      	movs	r2, #32
 80040da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ea:	f043 0220 	orr.w	r2, r3, #32
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e023      	b.n	8004146 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	0c1b      	lsrs	r3, r3, #16
 8004102:	b2db      	uxtb	r3, r3
 8004104:	2b01      	cmp	r3, #1
 8004106:	d10d      	bne.n	8004124 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	695b      	ldr	r3, [r3, #20]
 800410e:	43da      	mvns	r2, r3
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	4013      	ands	r3, r2
 8004114:	b29b      	uxth	r3, r3
 8004116:	2b00      	cmp	r3, #0
 8004118:	bf0c      	ite	eq
 800411a:	2301      	moveq	r3, #1
 800411c:	2300      	movne	r3, #0
 800411e:	b2db      	uxtb	r3, r3
 8004120:	461a      	mov	r2, r3
 8004122:	e00c      	b.n	800413e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	43da      	mvns	r2, r3
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	4013      	ands	r3, r2
 8004130:	b29b      	uxth	r3, r3
 8004132:	2b00      	cmp	r3, #0
 8004134:	bf0c      	ite	eq
 8004136:	2301      	moveq	r3, #1
 8004138:	2300      	movne	r3, #0
 800413a:	b2db      	uxtb	r3, r3
 800413c:	461a      	mov	r2, r3
 800413e:	79fb      	ldrb	r3, [r7, #7]
 8004140:	429a      	cmp	r2, r3
 8004142:	d0b6      	beq.n	80040b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004144:	2300      	movs	r3, #0
}
 8004146:	4618      	mov	r0, r3
 8004148:	3710      	adds	r7, #16
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}

0800414e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800414e:	b580      	push	{r7, lr}
 8004150:	b084      	sub	sp, #16
 8004152:	af00      	add	r7, sp, #0
 8004154:	60f8      	str	r0, [r7, #12]
 8004156:	60b9      	str	r1, [r7, #8]
 8004158:	607a      	str	r2, [r7, #4]
 800415a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800415c:	e051      	b.n	8004202 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	695b      	ldr	r3, [r3, #20]
 8004164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004168:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800416c:	d123      	bne.n	80041b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800417c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004186:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2200      	movs	r2, #0
 800418c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2220      	movs	r2, #32
 8004192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2200      	movs	r2, #0
 800419a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a2:	f043 0204 	orr.w	r2, r3, #4
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e046      	b.n	8004244 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041bc:	d021      	beq.n	8004202 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041be:	f7fe f8a3 	bl	8002308 <HAL_GetTick>
 80041c2:	4602      	mov	r2, r0
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d302      	bcc.n	80041d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d116      	bne.n	8004202 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2200      	movs	r2, #0
 80041d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2220      	movs	r2, #32
 80041de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ee:	f043 0220 	orr.w	r2, r3, #32
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e020      	b.n	8004244 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	0c1b      	lsrs	r3, r3, #16
 8004206:	b2db      	uxtb	r3, r3
 8004208:	2b01      	cmp	r3, #1
 800420a:	d10c      	bne.n	8004226 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	695b      	ldr	r3, [r3, #20]
 8004212:	43da      	mvns	r2, r3
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	4013      	ands	r3, r2
 8004218:	b29b      	uxth	r3, r3
 800421a:	2b00      	cmp	r3, #0
 800421c:	bf14      	ite	ne
 800421e:	2301      	movne	r3, #1
 8004220:	2300      	moveq	r3, #0
 8004222:	b2db      	uxtb	r3, r3
 8004224:	e00b      	b.n	800423e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	699b      	ldr	r3, [r3, #24]
 800422c:	43da      	mvns	r2, r3
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	4013      	ands	r3, r2
 8004232:	b29b      	uxth	r3, r3
 8004234:	2b00      	cmp	r3, #0
 8004236:	bf14      	ite	ne
 8004238:	2301      	movne	r3, #1
 800423a:	2300      	moveq	r3, #0
 800423c:	b2db      	uxtb	r3, r3
 800423e:	2b00      	cmp	r3, #0
 8004240:	d18d      	bne.n	800415e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004242:	2300      	movs	r3, #0
}
 8004244:	4618      	mov	r0, r3
 8004246:	3710      	adds	r7, #16
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}

0800424c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	60b9      	str	r1, [r7, #8]
 8004256:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004258:	e02d      	b.n	80042b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800425a:	68f8      	ldr	r0, [r7, #12]
 800425c:	f000 f8ce 	bl	80043fc <I2C_IsAcknowledgeFailed>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d001      	beq.n	800426a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e02d      	b.n	80042c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004270:	d021      	beq.n	80042b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004272:	f7fe f849 	bl	8002308 <HAL_GetTick>
 8004276:	4602      	mov	r2, r0
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	68ba      	ldr	r2, [r7, #8]
 800427e:	429a      	cmp	r2, r3
 8004280:	d302      	bcc.n	8004288 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d116      	bne.n	80042b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2200      	movs	r2, #0
 800428c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2220      	movs	r2, #32
 8004292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2200      	movs	r2, #0
 800429a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a2:	f043 0220 	orr.w	r2, r3, #32
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e007      	b.n	80042c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	695b      	ldr	r3, [r3, #20]
 80042bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042c0:	2b80      	cmp	r3, #128	; 0x80
 80042c2:	d1ca      	bne.n	800425a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3710      	adds	r7, #16
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}

080042ce <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042ce:	b580      	push	{r7, lr}
 80042d0:	b084      	sub	sp, #16
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	60f8      	str	r0, [r7, #12]
 80042d6:	60b9      	str	r1, [r7, #8]
 80042d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80042da:	e02d      	b.n	8004338 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80042dc:	68f8      	ldr	r0, [r7, #12]
 80042de:	f000 f88d 	bl	80043fc <I2C_IsAcknowledgeFailed>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d001      	beq.n	80042ec <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e02d      	b.n	8004348 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042f2:	d021      	beq.n	8004338 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042f4:	f7fe f808 	bl	8002308 <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	68ba      	ldr	r2, [r7, #8]
 8004300:	429a      	cmp	r2, r3
 8004302:	d302      	bcc.n	800430a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d116      	bne.n	8004338 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2200      	movs	r2, #0
 800430e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2220      	movs	r2, #32
 8004314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2200      	movs	r2, #0
 800431c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004324:	f043 0220 	orr.w	r2, r3, #32
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e007      	b.n	8004348 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	695b      	ldr	r3, [r3, #20]
 800433e:	f003 0304 	and.w	r3, r3, #4
 8004342:	2b04      	cmp	r3, #4
 8004344:	d1ca      	bne.n	80042dc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004346:	2300      	movs	r3, #0
}
 8004348:	4618      	mov	r0, r3
 800434a:	3710      	adds	r7, #16
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	60b9      	str	r1, [r7, #8]
 800435a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800435c:	e042      	b.n	80043e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	695b      	ldr	r3, [r3, #20]
 8004364:	f003 0310 	and.w	r3, r3, #16
 8004368:	2b10      	cmp	r3, #16
 800436a:	d119      	bne.n	80043a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f06f 0210 	mvn.w	r2, #16
 8004374:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2200      	movs	r2, #0
 800437a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2220      	movs	r2, #32
 8004380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2200      	movs	r2, #0
 8004388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2200      	movs	r2, #0
 8004398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e029      	b.n	80043f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043a0:	f7fd ffb2 	bl	8002308 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	68ba      	ldr	r2, [r7, #8]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d302      	bcc.n	80043b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d116      	bne.n	80043e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2200      	movs	r2, #0
 80043ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2220      	movs	r2, #32
 80043c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d0:	f043 0220 	orr.w	r2, r3, #32
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2200      	movs	r2, #0
 80043dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e007      	b.n	80043f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	695b      	ldr	r3, [r3, #20]
 80043ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ee:	2b40      	cmp	r3, #64	; 0x40
 80043f0:	d1b5      	bne.n	800435e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80043f2:	2300      	movs	r3, #0
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3710      	adds	r7, #16
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}

080043fc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	695b      	ldr	r3, [r3, #20]
 800440a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800440e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004412:	d11b      	bne.n	800444c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800441c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2220      	movs	r2, #32
 8004428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004438:	f043 0204 	orr.w	r2, r3, #4
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	e000      	b.n	800444e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	370c      	adds	r7, #12
 8004452:	46bd      	mov	sp, r7
 8004454:	bc80      	pop	{r7}
 8004456:	4770      	bx	lr

08004458 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800445a:	b08b      	sub	sp, #44	; 0x2c
 800445c:	af06      	add	r7, sp, #24
 800445e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d101      	bne.n	800446a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e0fd      	b.n	8004666 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d106      	bne.n	8004484 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f007 f960 	bl	800b744 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2203      	movs	r2, #3
 8004488:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4618      	mov	r0, r3
 8004492:	f003 fba9 	bl	8007be8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	603b      	str	r3, [r7, #0]
 800449c:	687e      	ldr	r6, [r7, #4]
 800449e:	466d      	mov	r5, sp
 80044a0:	f106 0410 	add.w	r4, r6, #16
 80044a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80044a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80044a8:	6823      	ldr	r3, [r4, #0]
 80044aa:	602b      	str	r3, [r5, #0]
 80044ac:	1d33      	adds	r3, r6, #4
 80044ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80044b0:	6838      	ldr	r0, [r7, #0]
 80044b2:	f003 fb73 	bl	8007b9c <USB_CoreInit>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d005      	beq.n	80044c8 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2202      	movs	r2, #2
 80044c0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e0ce      	b.n	8004666 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2100      	movs	r1, #0
 80044ce:	4618      	mov	r0, r3
 80044d0:	f003 fba4 	bl	8007c1c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044d4:	2300      	movs	r3, #0
 80044d6:	73fb      	strb	r3, [r7, #15]
 80044d8:	e04c      	b.n	8004574 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80044da:	7bfb      	ldrb	r3, [r7, #15]
 80044dc:	6879      	ldr	r1, [r7, #4]
 80044de:	1c5a      	adds	r2, r3, #1
 80044e0:	4613      	mov	r3, r2
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	4413      	add	r3, r2
 80044e6:	00db      	lsls	r3, r3, #3
 80044e8:	440b      	add	r3, r1
 80044ea:	3301      	adds	r3, #1
 80044ec:	2201      	movs	r2, #1
 80044ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80044f0:	7bfb      	ldrb	r3, [r7, #15]
 80044f2:	6879      	ldr	r1, [r7, #4]
 80044f4:	1c5a      	adds	r2, r3, #1
 80044f6:	4613      	mov	r3, r2
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	4413      	add	r3, r2
 80044fc:	00db      	lsls	r3, r3, #3
 80044fe:	440b      	add	r3, r1
 8004500:	7bfa      	ldrb	r2, [r7, #15]
 8004502:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004504:	7bfa      	ldrb	r2, [r7, #15]
 8004506:	7bfb      	ldrb	r3, [r7, #15]
 8004508:	b298      	uxth	r0, r3
 800450a:	6879      	ldr	r1, [r7, #4]
 800450c:	4613      	mov	r3, r2
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	4413      	add	r3, r2
 8004512:	00db      	lsls	r3, r3, #3
 8004514:	440b      	add	r3, r1
 8004516:	3336      	adds	r3, #54	; 0x36
 8004518:	4602      	mov	r2, r0
 800451a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800451c:	7bfb      	ldrb	r3, [r7, #15]
 800451e:	6879      	ldr	r1, [r7, #4]
 8004520:	1c5a      	adds	r2, r3, #1
 8004522:	4613      	mov	r3, r2
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	4413      	add	r3, r2
 8004528:	00db      	lsls	r3, r3, #3
 800452a:	440b      	add	r3, r1
 800452c:	3303      	adds	r3, #3
 800452e:	2200      	movs	r2, #0
 8004530:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004532:	7bfa      	ldrb	r2, [r7, #15]
 8004534:	6879      	ldr	r1, [r7, #4]
 8004536:	4613      	mov	r3, r2
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	4413      	add	r3, r2
 800453c:	00db      	lsls	r3, r3, #3
 800453e:	440b      	add	r3, r1
 8004540:	3338      	adds	r3, #56	; 0x38
 8004542:	2200      	movs	r2, #0
 8004544:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004546:	7bfa      	ldrb	r2, [r7, #15]
 8004548:	6879      	ldr	r1, [r7, #4]
 800454a:	4613      	mov	r3, r2
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	4413      	add	r3, r2
 8004550:	00db      	lsls	r3, r3, #3
 8004552:	440b      	add	r3, r1
 8004554:	333c      	adds	r3, #60	; 0x3c
 8004556:	2200      	movs	r2, #0
 8004558:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800455a:	7bfa      	ldrb	r2, [r7, #15]
 800455c:	6879      	ldr	r1, [r7, #4]
 800455e:	4613      	mov	r3, r2
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	4413      	add	r3, r2
 8004564:	00db      	lsls	r3, r3, #3
 8004566:	440b      	add	r3, r1
 8004568:	3340      	adds	r3, #64	; 0x40
 800456a:	2200      	movs	r2, #0
 800456c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800456e:	7bfb      	ldrb	r3, [r7, #15]
 8004570:	3301      	adds	r3, #1
 8004572:	73fb      	strb	r3, [r7, #15]
 8004574:	7bfa      	ldrb	r2, [r7, #15]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	429a      	cmp	r2, r3
 800457c:	d3ad      	bcc.n	80044da <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800457e:	2300      	movs	r3, #0
 8004580:	73fb      	strb	r3, [r7, #15]
 8004582:	e044      	b.n	800460e <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004584:	7bfa      	ldrb	r2, [r7, #15]
 8004586:	6879      	ldr	r1, [r7, #4]
 8004588:	4613      	mov	r3, r2
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	4413      	add	r3, r2
 800458e:	00db      	lsls	r3, r3, #3
 8004590:	440b      	add	r3, r1
 8004592:	f203 1369 	addw	r3, r3, #361	; 0x169
 8004596:	2200      	movs	r2, #0
 8004598:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800459a:	7bfa      	ldrb	r2, [r7, #15]
 800459c:	6879      	ldr	r1, [r7, #4]
 800459e:	4613      	mov	r3, r2
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	4413      	add	r3, r2
 80045a4:	00db      	lsls	r3, r3, #3
 80045a6:	440b      	add	r3, r1
 80045a8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80045ac:	7bfa      	ldrb	r2, [r7, #15]
 80045ae:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80045b0:	7bfa      	ldrb	r2, [r7, #15]
 80045b2:	6879      	ldr	r1, [r7, #4]
 80045b4:	4613      	mov	r3, r2
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	4413      	add	r3, r2
 80045ba:	00db      	lsls	r3, r3, #3
 80045bc:	440b      	add	r3, r1
 80045be:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80045c2:	2200      	movs	r2, #0
 80045c4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80045c6:	7bfa      	ldrb	r2, [r7, #15]
 80045c8:	6879      	ldr	r1, [r7, #4]
 80045ca:	4613      	mov	r3, r2
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	4413      	add	r3, r2
 80045d0:	00db      	lsls	r3, r3, #3
 80045d2:	440b      	add	r3, r1
 80045d4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80045d8:	2200      	movs	r2, #0
 80045da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80045dc:	7bfa      	ldrb	r2, [r7, #15]
 80045de:	6879      	ldr	r1, [r7, #4]
 80045e0:	4613      	mov	r3, r2
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	4413      	add	r3, r2
 80045e6:	00db      	lsls	r3, r3, #3
 80045e8:	440b      	add	r3, r1
 80045ea:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80045ee:	2200      	movs	r2, #0
 80045f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80045f2:	7bfa      	ldrb	r2, [r7, #15]
 80045f4:	6879      	ldr	r1, [r7, #4]
 80045f6:	4613      	mov	r3, r2
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	4413      	add	r3, r2
 80045fc:	00db      	lsls	r3, r3, #3
 80045fe:	440b      	add	r3, r1
 8004600:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004604:	2200      	movs	r2, #0
 8004606:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004608:	7bfb      	ldrb	r3, [r7, #15]
 800460a:	3301      	adds	r3, #1
 800460c:	73fb      	strb	r3, [r7, #15]
 800460e:	7bfa      	ldrb	r2, [r7, #15]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	429a      	cmp	r2, r3
 8004616:	d3b5      	bcc.n	8004584 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	603b      	str	r3, [r7, #0]
 800461e:	687e      	ldr	r6, [r7, #4]
 8004620:	466d      	mov	r5, sp
 8004622:	f106 0410 	add.w	r4, r6, #16
 8004626:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004628:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800462a:	6823      	ldr	r3, [r4, #0]
 800462c:	602b      	str	r3, [r5, #0]
 800462e:	1d33      	adds	r3, r6, #4
 8004630:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004632:	6838      	ldr	r0, [r7, #0]
 8004634:	f003 fafe 	bl	8007c34 <USB_DevInit>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d005      	beq.n	800464a <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2202      	movs	r2, #2
 8004642:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e00d      	b.n	8004666 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2201      	movs	r2, #1
 8004656:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4618      	mov	r0, r3
 8004660:	f005 fc6f 	bl	8009f42 <USB_DevDisconnect>

  return HAL_OK;
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	3714      	adds	r7, #20
 800466a:	46bd      	mov	sp, r7
 800466c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800466e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800466e:	b580      	push	{r7, lr}
 8004670:	b082      	sub	sp, #8
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800467c:	2b01      	cmp	r3, #1
 800467e:	d101      	bne.n	8004684 <HAL_PCD_Start+0x16>
 8004680:	2302      	movs	r3, #2
 8004682:	e016      	b.n	80046b2 <HAL_PCD_Start+0x44>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4618      	mov	r0, r3
 8004692:	f003 fa93 	bl	8007bbc <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8004696:	2101      	movs	r1, #1
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f007 faa2 	bl	800bbe2 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4618      	mov	r0, r3
 80046a4:	f005 fc43 	bl	8009f2e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3708      	adds	r7, #8
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}

080046ba <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80046ba:	b580      	push	{r7, lr}
 80046bc:	b088      	sub	sp, #32
 80046be:	af00      	add	r7, sp, #0
 80046c0:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4618      	mov	r0, r3
 80046c8:	f005 fc45 	bl	8009f56 <USB_ReadInterrupts>
 80046cc:	4603      	mov	r3, r0
 80046ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046d6:	d102      	bne.n	80046de <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f000 fb4a 	bl	8004d72 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4618      	mov	r0, r3
 80046e4:	f005 fc37 	bl	8009f56 <USB_ReadInterrupts>
 80046e8:	4603      	mov	r3, r0
 80046ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046f2:	d112      	bne.n	800471a <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80046fc:	b29a      	uxth	r2, r3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004706:	b292      	uxth	r2, r2
 8004708:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f007 f894 	bl	800b83a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004712:	2100      	movs	r1, #0
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f000 f925 	bl	8004964 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4618      	mov	r0, r3
 8004720:	f005 fc19 	bl	8009f56 <USB_ReadInterrupts>
 8004724:	4603      	mov	r3, r0
 8004726:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800472a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800472e:	d10b      	bne.n	8004748 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004738:	b29a      	uxth	r2, r3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004742:	b292      	uxth	r2, r2
 8004744:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4618      	mov	r0, r3
 800474e:	f005 fc02 	bl	8009f56 <USB_ReadInterrupts>
 8004752:	4603      	mov	r3, r0
 8004754:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004758:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800475c:	d10b      	bne.n	8004776 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004766:	b29a      	uxth	r2, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004770:	b292      	uxth	r2, r2
 8004772:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4618      	mov	r0, r3
 800477c:	f005 fbeb 	bl	8009f56 <USB_ReadInterrupts>
 8004780:	4603      	mov	r3, r0
 8004782:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004786:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800478a:	d126      	bne.n	80047da <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004794:	b29a      	uxth	r2, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f022 0204 	bic.w	r2, r2, #4
 800479e:	b292      	uxth	r2, r2
 80047a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80047ac:	b29a      	uxth	r2, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f022 0208 	bic.w	r2, r2, #8
 80047b6:	b292      	uxth	r2, r2
 80047b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f007 f875 	bl	800b8ac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80047ca:	b29a      	uxth	r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80047d4:	b292      	uxth	r2, r2
 80047d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4618      	mov	r0, r3
 80047e0:	f005 fbb9 	bl	8009f56 <USB_ReadInterrupts>
 80047e4:	4603      	mov	r3, r0
 80047e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047ee:	f040 8084 	bne.w	80048fa <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80047f2:	2300      	movs	r3, #0
 80047f4:	77fb      	strb	r3, [r7, #31]
 80047f6:	e011      	b.n	800481c <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	461a      	mov	r2, r3
 80047fe:	7ffb      	ldrb	r3, [r7, #31]
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	441a      	add	r2, r3
 8004804:	7ffb      	ldrb	r3, [r7, #31]
 8004806:	8812      	ldrh	r2, [r2, #0]
 8004808:	b292      	uxth	r2, r2
 800480a:	005b      	lsls	r3, r3, #1
 800480c:	f107 0120 	add.w	r1, r7, #32
 8004810:	440b      	add	r3, r1
 8004812:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8004816:	7ffb      	ldrb	r3, [r7, #31]
 8004818:	3301      	adds	r3, #1
 800481a:	77fb      	strb	r3, [r7, #31]
 800481c:	7ffb      	ldrb	r3, [r7, #31]
 800481e:	2b07      	cmp	r3, #7
 8004820:	d9ea      	bls.n	80047f8 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800482a:	b29a      	uxth	r2, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f042 0201 	orr.w	r2, r2, #1
 8004834:	b292      	uxth	r2, r2
 8004836:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004842:	b29a      	uxth	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f022 0201 	bic.w	r2, r2, #1
 800484c:	b292      	uxth	r2, r2
 800484e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8004852:	bf00      	nop
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800485c:	b29b      	uxth	r3, r3
 800485e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004862:	2b00      	cmp	r3, #0
 8004864:	d0f6      	beq.n	8004854 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800486e:	b29a      	uxth	r2, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004878:	b292      	uxth	r2, r2
 800487a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800487e:	2300      	movs	r3, #0
 8004880:	77fb      	strb	r3, [r7, #31]
 8004882:	e010      	b.n	80048a6 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8004884:	7ffb      	ldrb	r3, [r7, #31]
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	6812      	ldr	r2, [r2, #0]
 800488a:	4611      	mov	r1, r2
 800488c:	7ffa      	ldrb	r2, [r7, #31]
 800488e:	0092      	lsls	r2, r2, #2
 8004890:	440a      	add	r2, r1
 8004892:	005b      	lsls	r3, r3, #1
 8004894:	f107 0120 	add.w	r1, r7, #32
 8004898:	440b      	add	r3, r1
 800489a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800489e:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80048a0:	7ffb      	ldrb	r3, [r7, #31]
 80048a2:	3301      	adds	r3, #1
 80048a4:	77fb      	strb	r3, [r7, #31]
 80048a6:	7ffb      	ldrb	r3, [r7, #31]
 80048a8:	2b07      	cmp	r3, #7
 80048aa:	d9eb      	bls.n	8004884 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80048b4:	b29a      	uxth	r2, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f042 0208 	orr.w	r2, r2, #8
 80048be:	b292      	uxth	r2, r2
 80048c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80048cc:	b29a      	uxth	r2, r3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048d6:	b292      	uxth	r2, r2
 80048d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80048e4:	b29a      	uxth	r2, r3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f042 0204 	orr.w	r2, r2, #4
 80048ee:	b292      	uxth	r2, r2
 80048f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f006 ffbf 	bl	800b878 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4618      	mov	r0, r3
 8004900:	f005 fb29 	bl	8009f56 <USB_ReadInterrupts>
 8004904:	4603      	mov	r3, r0
 8004906:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800490a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800490e:	d10e      	bne.n	800492e <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004918:	b29a      	uxth	r2, r3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004922:	b292      	uxth	r2, r2
 8004924:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f006 ff78 	bl	800b81e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4618      	mov	r0, r3
 8004934:	f005 fb0f 	bl	8009f56 <USB_ReadInterrupts>
 8004938:	4603      	mov	r3, r0
 800493a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800493e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004942:	d10b      	bne.n	800495c <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800494c:	b29a      	uxth	r2, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004956:	b292      	uxth	r2, r2
 8004958:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800495c:	bf00      	nop
 800495e:	3720      	adds	r7, #32
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}

08004964 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b082      	sub	sp, #8
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	460b      	mov	r3, r1
 800496e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004976:	2b01      	cmp	r3, #1
 8004978:	d101      	bne.n	800497e <HAL_PCD_SetAddress+0x1a>
 800497a:	2302      	movs	r3, #2
 800497c:	e013      	b.n	80049a6 <HAL_PCD_SetAddress+0x42>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2201      	movs	r2, #1
 8004982:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	78fa      	ldrb	r2, [r7, #3]
 800498a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	78fa      	ldrb	r2, [r7, #3]
 8004994:	4611      	mov	r1, r2
 8004996:	4618      	mov	r0, r3
 8004998:	f005 fab6 	bl	8009f08 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3708      	adds	r7, #8
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}

080049ae <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80049ae:	b580      	push	{r7, lr}
 80049b0:	b084      	sub	sp, #16
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
 80049b6:	4608      	mov	r0, r1
 80049b8:	4611      	mov	r1, r2
 80049ba:	461a      	mov	r2, r3
 80049bc:	4603      	mov	r3, r0
 80049be:	70fb      	strb	r3, [r7, #3]
 80049c0:	460b      	mov	r3, r1
 80049c2:	803b      	strh	r3, [r7, #0]
 80049c4:	4613      	mov	r3, r2
 80049c6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80049c8:	2300      	movs	r3, #0
 80049ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80049cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	da0e      	bge.n	80049f2 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049d4:	78fb      	ldrb	r3, [r7, #3]
 80049d6:	f003 0307 	and.w	r3, r3, #7
 80049da:	1c5a      	adds	r2, r3, #1
 80049dc:	4613      	mov	r3, r2
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	4413      	add	r3, r2
 80049e2:	00db      	lsls	r3, r3, #3
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	4413      	add	r3, r2
 80049e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2201      	movs	r2, #1
 80049ee:	705a      	strb	r2, [r3, #1]
 80049f0:	e00e      	b.n	8004a10 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049f2:	78fb      	ldrb	r3, [r7, #3]
 80049f4:	f003 0207 	and.w	r2, r3, #7
 80049f8:	4613      	mov	r3, r2
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	4413      	add	r3, r2
 80049fe:	00db      	lsls	r3, r3, #3
 8004a00:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	4413      	add	r3, r2
 8004a08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004a10:	78fb      	ldrb	r3, [r7, #3]
 8004a12:	f003 0307 	and.w	r3, r3, #7
 8004a16:	b2da      	uxtb	r2, r3
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004a1c:	883a      	ldrh	r2, [r7, #0]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	78ba      	ldrb	r2, [r7, #2]
 8004a26:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	785b      	ldrb	r3, [r3, #1]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d004      	beq.n	8004a3a <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	b29a      	uxth	r2, r3
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004a3a:	78bb      	ldrb	r3, [r7, #2]
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	d102      	bne.n	8004a46 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2200      	movs	r2, #0
 8004a44:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d101      	bne.n	8004a54 <HAL_PCD_EP_Open+0xa6>
 8004a50:	2302      	movs	r3, #2
 8004a52:	e00e      	b.n	8004a72 <HAL_PCD_EP_Open+0xc4>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68f9      	ldr	r1, [r7, #12]
 8004a62:	4618      	mov	r0, r3
 8004a64:	f003 f906 	bl	8007c74 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8004a70:	7afb      	ldrb	r3, [r7, #11]
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3710      	adds	r7, #16
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}

08004a7a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a7a:	b580      	push	{r7, lr}
 8004a7c:	b084      	sub	sp, #16
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
 8004a82:	460b      	mov	r3, r1
 8004a84:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004a86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	da0e      	bge.n	8004aac <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a8e:	78fb      	ldrb	r3, [r7, #3]
 8004a90:	f003 0307 	and.w	r3, r3, #7
 8004a94:	1c5a      	adds	r2, r3, #1
 8004a96:	4613      	mov	r3, r2
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	4413      	add	r3, r2
 8004a9c:	00db      	lsls	r3, r3, #3
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	4413      	add	r3, r2
 8004aa2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	705a      	strb	r2, [r3, #1]
 8004aaa:	e00e      	b.n	8004aca <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004aac:	78fb      	ldrb	r3, [r7, #3]
 8004aae:	f003 0207 	and.w	r2, r3, #7
 8004ab2:	4613      	mov	r3, r2
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	4413      	add	r3, r2
 8004ab8:	00db      	lsls	r3, r3, #3
 8004aba:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	4413      	add	r3, r2
 8004ac2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004aca:	78fb      	ldrb	r3, [r7, #3]
 8004acc:	f003 0307 	and.w	r3, r3, #7
 8004ad0:	b2da      	uxtb	r2, r3
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d101      	bne.n	8004ae4 <HAL_PCD_EP_Close+0x6a>
 8004ae0:	2302      	movs	r3, #2
 8004ae2:	e00e      	b.n	8004b02 <HAL_PCD_EP_Close+0x88>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68f9      	ldr	r1, [r7, #12]
 8004af2:	4618      	mov	r0, r3
 8004af4:	f003 fc28 	bl	8008348 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3710      	adds	r7, #16
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}

08004b0a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004b0a:	b580      	push	{r7, lr}
 8004b0c:	b086      	sub	sp, #24
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	60f8      	str	r0, [r7, #12]
 8004b12:	607a      	str	r2, [r7, #4]
 8004b14:	603b      	str	r3, [r7, #0]
 8004b16:	460b      	mov	r3, r1
 8004b18:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b1a:	7afb      	ldrb	r3, [r7, #11]
 8004b1c:	f003 0207 	and.w	r2, r3, #7
 8004b20:	4613      	mov	r3, r2
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	4413      	add	r3, r2
 8004b26:	00db      	lsls	r3, r3, #3
 8004b28:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004b2c:	68fa      	ldr	r2, [r7, #12]
 8004b2e:	4413      	add	r3, r2
 8004b30:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	683a      	ldr	r2, [r7, #0]
 8004b3c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	2200      	movs	r2, #0
 8004b42:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	2200      	movs	r2, #0
 8004b48:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b4a:	7afb      	ldrb	r3, [r7, #11]
 8004b4c:	f003 0307 	and.w	r3, r3, #7
 8004b50:	b2da      	uxtb	r2, r3
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004b56:	7afb      	ldrb	r3, [r7, #11]
 8004b58:	f003 0307 	and.w	r3, r3, #7
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d106      	bne.n	8004b6e <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	6979      	ldr	r1, [r7, #20]
 8004b66:	4618      	mov	r0, r3
 8004b68:	f003 fdda 	bl	8008720 <USB_EPStartXfer>
 8004b6c:	e005      	b.n	8004b7a <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	6979      	ldr	r1, [r7, #20]
 8004b74:	4618      	mov	r0, r3
 8004b76:	f003 fdd3 	bl	8008720 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004b7a:	2300      	movs	r3, #0
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3718      	adds	r7, #24
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b086      	sub	sp, #24
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	607a      	str	r2, [r7, #4]
 8004b8e:	603b      	str	r3, [r7, #0]
 8004b90:	460b      	mov	r3, r1
 8004b92:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b94:	7afb      	ldrb	r3, [r7, #11]
 8004b96:	f003 0307 	and.w	r3, r3, #7
 8004b9a:	1c5a      	adds	r2, r3, #1
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	4413      	add	r3, r2
 8004ba2:	00db      	lsls	r3, r3, #3
 8004ba4:	68fa      	ldr	r2, [r7, #12]
 8004ba6:	4413      	add	r3, r2
 8004ba8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	683a      	ldr	r2, [r7, #0]
 8004bb4:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	2201      	movs	r2, #1
 8004bba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	683a      	ldr	r2, [r7, #0]
 8004bc2:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004bd0:	7afb      	ldrb	r3, [r7, #11]
 8004bd2:	f003 0307 	and.w	r3, r3, #7
 8004bd6:	b2da      	uxtb	r2, r3
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004bdc:	7afb      	ldrb	r3, [r7, #11]
 8004bde:	f003 0307 	and.w	r3, r3, #7
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d106      	bne.n	8004bf4 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	6979      	ldr	r1, [r7, #20]
 8004bec:	4618      	mov	r0, r3
 8004bee:	f003 fd97 	bl	8008720 <USB_EPStartXfer>
 8004bf2:	e005      	b.n	8004c00 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	6979      	ldr	r1, [r7, #20]
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f003 fd90 	bl	8008720 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004c00:	2300      	movs	r3, #0
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3718      	adds	r7, #24
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}

08004c0a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c0a:	b580      	push	{r7, lr}
 8004c0c:	b084      	sub	sp, #16
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	6078      	str	r0, [r7, #4]
 8004c12:	460b      	mov	r3, r1
 8004c14:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004c16:	78fb      	ldrb	r3, [r7, #3]
 8004c18:	f003 0207 	and.w	r2, r3, #7
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d901      	bls.n	8004c28 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e04c      	b.n	8004cc2 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004c28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	da0e      	bge.n	8004c4e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c30:	78fb      	ldrb	r3, [r7, #3]
 8004c32:	f003 0307 	and.w	r3, r3, #7
 8004c36:	1c5a      	adds	r2, r3, #1
 8004c38:	4613      	mov	r3, r2
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	4413      	add	r3, r2
 8004c3e:	00db      	lsls	r3, r3, #3
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	4413      	add	r3, r2
 8004c44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2201      	movs	r2, #1
 8004c4a:	705a      	strb	r2, [r3, #1]
 8004c4c:	e00c      	b.n	8004c68 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004c4e:	78fa      	ldrb	r2, [r7, #3]
 8004c50:	4613      	mov	r3, r2
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	4413      	add	r3, r2
 8004c56:	00db      	lsls	r3, r3, #3
 8004c58:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	4413      	add	r3, r2
 8004c60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2200      	movs	r2, #0
 8004c66:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c6e:	78fb      	ldrb	r3, [r7, #3]
 8004c70:	f003 0307 	and.w	r3, r3, #7
 8004c74:	b2da      	uxtb	r2, r3
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d101      	bne.n	8004c88 <HAL_PCD_EP_SetStall+0x7e>
 8004c84:	2302      	movs	r3, #2
 8004c86:	e01c      	b.n	8004cc2 <HAL_PCD_EP_SetStall+0xb8>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	68f9      	ldr	r1, [r7, #12]
 8004c96:	4618      	mov	r0, r3
 8004c98:	f005 f839 	bl	8009d0e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004c9c:	78fb      	ldrb	r3, [r7, #3]
 8004c9e:	f003 0307 	and.w	r3, r3, #7
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d108      	bne.n	8004cb8 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	4610      	mov	r0, r2
 8004cb4:	f005 f95e 	bl	8009f74 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3710      	adds	r7, #16
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}

08004cca <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004cca:	b580      	push	{r7, lr}
 8004ccc:	b084      	sub	sp, #16
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
 8004cd2:	460b      	mov	r3, r1
 8004cd4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004cd6:	78fb      	ldrb	r3, [r7, #3]
 8004cd8:	f003 020f 	and.w	r2, r3, #15
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d901      	bls.n	8004ce8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e040      	b.n	8004d6a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004ce8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	da0e      	bge.n	8004d0e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004cf0:	78fb      	ldrb	r3, [r7, #3]
 8004cf2:	f003 0307 	and.w	r3, r3, #7
 8004cf6:	1c5a      	adds	r2, r3, #1
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	4413      	add	r3, r2
 8004cfe:	00db      	lsls	r3, r3, #3
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	4413      	add	r3, r2
 8004d04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2201      	movs	r2, #1
 8004d0a:	705a      	strb	r2, [r3, #1]
 8004d0c:	e00e      	b.n	8004d2c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d0e:	78fb      	ldrb	r3, [r7, #3]
 8004d10:	f003 0207 	and.w	r2, r3, #7
 8004d14:	4613      	mov	r3, r2
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	4413      	add	r3, r2
 8004d1a:	00db      	lsls	r3, r3, #3
 8004d1c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	4413      	add	r3, r2
 8004d24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d32:	78fb      	ldrb	r3, [r7, #3]
 8004d34:	f003 0307 	and.w	r3, r3, #7
 8004d38:	b2da      	uxtb	r2, r3
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d101      	bne.n	8004d4c <HAL_PCD_EP_ClrStall+0x82>
 8004d48:	2302      	movs	r3, #2
 8004d4a:	e00e      	b.n	8004d6a <HAL_PCD_EP_ClrStall+0xa0>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	68f9      	ldr	r1, [r7, #12]
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f005 f827 	bl	8009dae <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004d68:	2300      	movs	r3, #0
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3710      	adds	r7, #16
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}

08004d72 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004d72:	b580      	push	{r7, lr}
 8004d74:	b08e      	sub	sp, #56	; 0x38
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004d7a:	e2ec      	b.n	8005356 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004d84:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004d86:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	f003 030f 	and.w	r3, r3, #15
 8004d8e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8004d92:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	f040 8161 	bne.w	800505e <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004d9c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004d9e:	f003 0310 	and.w	r3, r3, #16
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d152      	bne.n	8004e4c <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	881b      	ldrh	r3, [r3, #0]
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004db6:	81fb      	strh	r3, [r7, #14]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	89fb      	ldrh	r3, [r7, #14]
 8004dbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	3328      	adds	r3, #40	; 0x28
 8004dce:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	461a      	mov	r2, r3
 8004ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	00db      	lsls	r3, r3, #3
 8004de2:	4413      	add	r3, r2
 8004de4:	3302      	adds	r3, #2
 8004de6:	005b      	lsls	r3, r3, #1
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	6812      	ldr	r2, [r2, #0]
 8004dec:	4413      	add	r3, r2
 8004dee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004df2:	881b      	ldrh	r3, [r3, #0]
 8004df4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfa:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfe:	695a      	ldr	r2, [r3, #20]
 8004e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e02:	69db      	ldr	r3, [r3, #28]
 8004e04:	441a      	add	r2, r3
 8004e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e08:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004e0a:	2100      	movs	r1, #0
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f006 fcec 	bl	800b7ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	f000 829b 	beq.w	8005356 <PCD_EP_ISR_Handler+0x5e4>
 8004e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e22:	699b      	ldr	r3, [r3, #24]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	f040 8296 	bne.w	8005356 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004e36:	b2da      	uxtb	r2, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	b292      	uxth	r2, r2
 8004e3e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004e4a:	e284      	b.n	8005356 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004e52:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	881b      	ldrh	r3, [r3, #0]
 8004e5a:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004e5c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004e5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d034      	beq.n	8004ed0 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	461a      	mov	r2, r3
 8004e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	00db      	lsls	r3, r3, #3
 8004e78:	4413      	add	r3, r2
 8004e7a:	3306      	adds	r3, #6
 8004e7c:	005b      	lsls	r3, r3, #1
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	6812      	ldr	r2, [r2, #0]
 8004e82:	4413      	add	r3, r2
 8004e84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e88:	881b      	ldrh	r3, [r3, #0]
 8004e8a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e90:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6818      	ldr	r0, [r3, #0]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8004e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	f005 f8b5 	bl	800a014 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	881b      	ldrh	r3, [r3, #0]
 8004eb0:	b29a      	uxth	r2, r3
 8004eb2:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	823b      	strh	r3, [r7, #16]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	8a3a      	ldrh	r2, [r7, #16]
 8004ec0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004ec4:	b292      	uxth	r2, r2
 8004ec6:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f006 fc61 	bl	800b790 <HAL_PCD_SetupStageCallback>
 8004ece:	e242      	b.n	8005356 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004ed0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	f280 823e 	bge.w	8005356 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	881b      	ldrh	r3, [r3, #0]
 8004ee0:	b29a      	uxth	r2, r3
 8004ee2:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	83bb      	strh	r3, [r7, #28]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	8bba      	ldrh	r2, [r7, #28]
 8004ef0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004ef4:	b292      	uxth	r2, r2
 8004ef6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	461a      	mov	r2, r3
 8004f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	00db      	lsls	r3, r3, #3
 8004f0a:	4413      	add	r3, r2
 8004f0c:	3306      	adds	r3, #6
 8004f0e:	005b      	lsls	r3, r3, #1
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	6812      	ldr	r2, [r2, #0]
 8004f14:	4413      	add	r3, r2
 8004f16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f1a:	881b      	ldrh	r3, [r3, #0]
 8004f1c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f22:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f26:	69db      	ldr	r3, [r3, #28]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d019      	beq.n	8004f60 <PCD_EP_ISR_Handler+0x1ee>
 8004f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2e:	695b      	ldr	r3, [r3, #20]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d015      	beq.n	8004f60 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6818      	ldr	r0, [r3, #0]
 8004f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3a:	6959      	ldr	r1, [r3, #20]
 8004f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f42:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	f005 f865 	bl	800a014 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4c:	695a      	ldr	r2, [r3, #20]
 8004f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f50:	69db      	ldr	r3, [r3, #28]
 8004f52:	441a      	add	r2, r3
 8004f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f56:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004f58:	2100      	movs	r1, #0
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f006 fc2a 	bl	800b7b4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	881b      	ldrh	r3, [r3, #0]
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	f040 81f2 	bne.w	8005356 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	61bb      	str	r3, [r7, #24]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	461a      	mov	r2, r3
 8004f84:	69bb      	ldr	r3, [r7, #24]
 8004f86:	4413      	add	r3, r2
 8004f88:	61bb      	str	r3, [r7, #24]
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004f90:	617b      	str	r3, [r7, #20]
 8004f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d112      	bne.n	8004fc0 <PCD_EP_ISR_Handler+0x24e>
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	881b      	ldrh	r3, [r3, #0]
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004fa4:	b29a      	uxth	r2, r3
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	801a      	strh	r2, [r3, #0]
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	881b      	ldrh	r3, [r3, #0]
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fb8:	b29a      	uxth	r2, r3
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	801a      	strh	r2, [r3, #0]
 8004fbe:	e02f      	b.n	8005020 <PCD_EP_ISR_Handler+0x2ae>
 8004fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc2:	691b      	ldr	r3, [r3, #16]
 8004fc4:	2b3e      	cmp	r3, #62	; 0x3e
 8004fc6:	d813      	bhi.n	8004ff0 <PCD_EP_ISR_Handler+0x27e>
 8004fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fca:	691b      	ldr	r3, [r3, #16]
 8004fcc:	085b      	lsrs	r3, r3, #1
 8004fce:	633b      	str	r3, [r7, #48]	; 0x30
 8004fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd2:	691b      	ldr	r3, [r3, #16]
 8004fd4:	f003 0301 	and.w	r3, r3, #1
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d002      	beq.n	8004fe2 <PCD_EP_ISR_Handler+0x270>
 8004fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fde:	3301      	adds	r3, #1
 8004fe0:	633b      	str	r3, [r7, #48]	; 0x30
 8004fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	029b      	lsls	r3, r3, #10
 8004fe8:	b29a      	uxth	r2, r3
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	801a      	strh	r2, [r3, #0]
 8004fee:	e017      	b.n	8005020 <PCD_EP_ISR_Handler+0x2ae>
 8004ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff2:	691b      	ldr	r3, [r3, #16]
 8004ff4:	095b      	lsrs	r3, r3, #5
 8004ff6:	633b      	str	r3, [r7, #48]	; 0x30
 8004ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffa:	691b      	ldr	r3, [r3, #16]
 8004ffc:	f003 031f 	and.w	r3, r3, #31
 8005000:	2b00      	cmp	r3, #0
 8005002:	d102      	bne.n	800500a <PCD_EP_ISR_Handler+0x298>
 8005004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005006:	3b01      	subs	r3, #1
 8005008:	633b      	str	r3, [r7, #48]	; 0x30
 800500a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800500c:	b29b      	uxth	r3, r3
 800500e:	029b      	lsls	r3, r3, #10
 8005010:	b29b      	uxth	r3, r3
 8005012:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005016:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800501a:	b29a      	uxth	r2, r3
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	881b      	ldrh	r3, [r3, #0]
 8005026:	b29b      	uxth	r3, r3
 8005028:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800502c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005030:	827b      	strh	r3, [r7, #18]
 8005032:	8a7b      	ldrh	r3, [r7, #18]
 8005034:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005038:	827b      	strh	r3, [r7, #18]
 800503a:	8a7b      	ldrh	r3, [r7, #18]
 800503c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005040:	827b      	strh	r3, [r7, #18]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	8a7b      	ldrh	r3, [r7, #18]
 8005048:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800504c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005050:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005054:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005058:	b29b      	uxth	r3, r3
 800505a:	8013      	strh	r3, [r2, #0]
 800505c:	e17b      	b.n	8005356 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	461a      	mov	r2, r3
 8005064:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	4413      	add	r3, r2
 800506c:	881b      	ldrh	r3, [r3, #0]
 800506e:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005070:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8005074:	2b00      	cmp	r3, #0
 8005076:	f280 80ea 	bge.w	800524e <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	461a      	mov	r2, r3
 8005080:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	4413      	add	r3, r2
 8005088:	881b      	ldrh	r3, [r3, #0]
 800508a:	b29a      	uxth	r2, r3
 800508c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005090:	4013      	ands	r3, r2
 8005092:	853b      	strh	r3, [r7, #40]	; 0x28
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	461a      	mov	r2, r3
 800509a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	4413      	add	r3, r2
 80050a2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80050a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80050a8:	b292      	uxth	r2, r2
 80050aa:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80050ac:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80050b0:	4613      	mov	r3, r2
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	4413      	add	r3, r2
 80050b6:	00db      	lsls	r3, r3, #3
 80050b8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	4413      	add	r3, r2
 80050c0:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80050c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c4:	7b1b      	ldrb	r3, [r3, #12]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d122      	bne.n	8005110 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	461a      	mov	r2, r3
 80050d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	00db      	lsls	r3, r3, #3
 80050dc:	4413      	add	r3, r2
 80050de:	3306      	adds	r3, #6
 80050e0:	005b      	lsls	r3, r3, #1
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	6812      	ldr	r2, [r2, #0]
 80050e6:	4413      	add	r3, r2
 80050e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050ec:	881b      	ldrh	r3, [r3, #0]
 80050ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050f2:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80050f4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	f000 8087 	beq.w	800520a <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6818      	ldr	r0, [r3, #0]
 8005100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005102:	6959      	ldr	r1, [r3, #20]
 8005104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005106:	88da      	ldrh	r2, [r3, #6]
 8005108:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800510a:	f004 ff83 	bl	800a014 <USB_ReadPMA>
 800510e:	e07c      	b.n	800520a <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005112:	78db      	ldrb	r3, [r3, #3]
 8005114:	2b02      	cmp	r3, #2
 8005116:	d108      	bne.n	800512a <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005118:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800511a:	461a      	mov	r2, r3
 800511c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 f927 	bl	8005372 <HAL_PCD_EP_DB_Receive>
 8005124:	4603      	mov	r3, r0
 8005126:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005128:	e06f      	b.n	800520a <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	461a      	mov	r2, r3
 8005130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005132:	781b      	ldrb	r3, [r3, #0]
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	4413      	add	r3, r2
 8005138:	881b      	ldrh	r3, [r3, #0]
 800513a:	b29b      	uxth	r3, r3
 800513c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005140:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005144:	847b      	strh	r3, [r7, #34]	; 0x22
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	461a      	mov	r2, r3
 800514c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	441a      	add	r2, r3
 8005154:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005156:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800515a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800515e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005162:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005166:	b29b      	uxth	r3, r3
 8005168:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	461a      	mov	r2, r3
 8005170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	4413      	add	r3, r2
 8005178:	881b      	ldrh	r3, [r3, #0]
 800517a:	b29b      	uxth	r3, r3
 800517c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005180:	2b00      	cmp	r3, #0
 8005182:	d021      	beq.n	80051c8 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800518c:	b29b      	uxth	r3, r3
 800518e:	461a      	mov	r2, r3
 8005190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	00db      	lsls	r3, r3, #3
 8005196:	4413      	add	r3, r2
 8005198:	3302      	adds	r3, #2
 800519a:	005b      	lsls	r3, r3, #1
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	6812      	ldr	r2, [r2, #0]
 80051a0:	4413      	add	r3, r2
 80051a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051a6:	881b      	ldrh	r3, [r3, #0]
 80051a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051ac:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80051ae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d02a      	beq.n	800520a <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6818      	ldr	r0, [r3, #0]
 80051b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ba:	6959      	ldr	r1, [r3, #20]
 80051bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051be:	891a      	ldrh	r2, [r3, #8]
 80051c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80051c2:	f004 ff27 	bl	800a014 <USB_ReadPMA>
 80051c6:	e020      	b.n	800520a <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	461a      	mov	r2, r3
 80051d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	00db      	lsls	r3, r3, #3
 80051da:	4413      	add	r3, r2
 80051dc:	3306      	adds	r3, #6
 80051de:	005b      	lsls	r3, r3, #1
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	6812      	ldr	r2, [r2, #0]
 80051e4:	4413      	add	r3, r2
 80051e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051ea:	881b      	ldrh	r3, [r3, #0]
 80051ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051f0:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80051f2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d008      	beq.n	800520a <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6818      	ldr	r0, [r3, #0]
 80051fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fe:	6959      	ldr	r1, [r3, #20]
 8005200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005202:	895a      	ldrh	r2, [r3, #10]
 8005204:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005206:	f004 ff05 	bl	800a014 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800520a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520c:	69da      	ldr	r2, [r3, #28]
 800520e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005210:	441a      	add	r2, r3
 8005212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005214:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005218:	695a      	ldr	r2, [r3, #20]
 800521a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800521c:	441a      	add	r2, r3
 800521e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005220:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005224:	699b      	ldr	r3, [r3, #24]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d004      	beq.n	8005234 <PCD_EP_ISR_Handler+0x4c2>
 800522a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800522c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522e:	691b      	ldr	r3, [r3, #16]
 8005230:	429a      	cmp	r2, r3
 8005232:	d206      	bcs.n	8005242 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	4619      	mov	r1, r3
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f006 faba 	bl	800b7b4 <HAL_PCD_DataOutStageCallback>
 8005240:	e005      	b.n	800524e <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005248:	4618      	mov	r0, r3
 800524a:	f003 fa69 	bl	8008720 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800524e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005254:	2b00      	cmp	r3, #0
 8005256:	d07e      	beq.n	8005356 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8005258:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800525c:	1c5a      	adds	r2, r3, #1
 800525e:	4613      	mov	r3, r2
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	4413      	add	r3, r2
 8005264:	00db      	lsls	r3, r3, #3
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	4413      	add	r3, r2
 800526a:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	461a      	mov	r2, r3
 8005272:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	4413      	add	r3, r2
 800527a:	881b      	ldrh	r3, [r3, #0]
 800527c:	b29b      	uxth	r3, r3
 800527e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005286:	843b      	strh	r3, [r7, #32]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	461a      	mov	r2, r3
 800528e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	441a      	add	r2, r3
 8005296:	8c3b      	ldrh	r3, [r7, #32]
 8005298:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800529c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80052a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a6:	78db      	ldrb	r3, [r3, #3]
 80052a8:	2b03      	cmp	r3, #3
 80052aa:	d00c      	beq.n	80052c6 <PCD_EP_ISR_Handler+0x554>
 80052ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ae:	78db      	ldrb	r3, [r3, #3]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d008      	beq.n	80052c6 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80052b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b6:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80052b8:	2b02      	cmp	r3, #2
 80052ba:	d146      	bne.n	800534a <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80052bc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80052be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d141      	bne.n	800534a <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	461a      	mov	r2, r3
 80052d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	00db      	lsls	r3, r3, #3
 80052d8:	4413      	add	r3, r2
 80052da:	3302      	adds	r3, #2
 80052dc:	005b      	lsls	r3, r3, #1
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	6812      	ldr	r2, [r2, #0]
 80052e2:	4413      	add	r3, r2
 80052e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052e8:	881b      	ldrh	r3, [r3, #0]
 80052ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052ee:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80052f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f2:	699a      	ldr	r2, [r3, #24]
 80052f4:	8bfb      	ldrh	r3, [r7, #30]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d906      	bls.n	8005308 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80052fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fc:	699a      	ldr	r2, [r3, #24]
 80052fe:	8bfb      	ldrh	r3, [r7, #30]
 8005300:	1ad2      	subs	r2, r2, r3
 8005302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005304:	619a      	str	r2, [r3, #24]
 8005306:	e002      	b.n	800530e <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8005308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530a:	2200      	movs	r2, #0
 800530c:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800530e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005310:	699b      	ldr	r3, [r3, #24]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d106      	bne.n	8005324 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005318:	781b      	ldrb	r3, [r3, #0]
 800531a:	4619      	mov	r1, r3
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f006 fa64 	bl	800b7ea <HAL_PCD_DataInStageCallback>
 8005322:	e018      	b.n	8005356 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8005324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005326:	695a      	ldr	r2, [r3, #20]
 8005328:	8bfb      	ldrh	r3, [r7, #30]
 800532a:	441a      	add	r2, r3
 800532c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532e:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8005330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005332:	69da      	ldr	r2, [r3, #28]
 8005334:	8bfb      	ldrh	r3, [r7, #30]
 8005336:	441a      	add	r2, r3
 8005338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533a:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005342:	4618      	mov	r0, r3
 8005344:	f003 f9ec 	bl	8008720 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8005348:	e005      	b.n	8005356 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800534a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800534c:	461a      	mov	r2, r3
 800534e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f000 f91b 	bl	800558c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800535e:	b29b      	uxth	r3, r3
 8005360:	b21b      	sxth	r3, r3
 8005362:	2b00      	cmp	r3, #0
 8005364:	f6ff ad0a 	blt.w	8004d7c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	3738      	adds	r7, #56	; 0x38
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}

08005372 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005372:	b580      	push	{r7, lr}
 8005374:	b088      	sub	sp, #32
 8005376:	af00      	add	r7, sp, #0
 8005378:	60f8      	str	r0, [r7, #12]
 800537a:	60b9      	str	r1, [r7, #8]
 800537c:	4613      	mov	r3, r2
 800537e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005380:	88fb      	ldrh	r3, [r7, #6]
 8005382:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005386:	2b00      	cmp	r3, #0
 8005388:	d07e      	beq.n	8005488 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005392:	b29b      	uxth	r3, r3
 8005394:	461a      	mov	r2, r3
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	00db      	lsls	r3, r3, #3
 800539c:	4413      	add	r3, r2
 800539e:	3302      	adds	r3, #2
 80053a0:	005b      	lsls	r3, r3, #1
 80053a2:	68fa      	ldr	r2, [r7, #12]
 80053a4:	6812      	ldr	r2, [r2, #0]
 80053a6:	4413      	add	r3, r2
 80053a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053ac:	881b      	ldrh	r3, [r3, #0]
 80053ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053b2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	699a      	ldr	r2, [r3, #24]
 80053b8:	8b7b      	ldrh	r3, [r7, #26]
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d306      	bcc.n	80053cc <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	699a      	ldr	r2, [r3, #24]
 80053c2:	8b7b      	ldrh	r3, [r7, #26]
 80053c4:	1ad2      	subs	r2, r2, r3
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	619a      	str	r2, [r3, #24]
 80053ca:	e002      	b.n	80053d2 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	2200      	movs	r2, #0
 80053d0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	699b      	ldr	r3, [r3, #24]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d123      	bne.n	8005422 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	461a      	mov	r2, r3
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	781b      	ldrb	r3, [r3, #0]
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	4413      	add	r3, r2
 80053e8:	881b      	ldrh	r3, [r3, #0]
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053f4:	833b      	strh	r3, [r7, #24]
 80053f6:	8b3b      	ldrh	r3, [r7, #24]
 80053f8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80053fc:	833b      	strh	r3, [r7, #24]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	461a      	mov	r2, r3
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	441a      	add	r2, r3
 800540c:	8b3b      	ldrh	r3, [r7, #24]
 800540e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005412:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005416:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800541a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800541e:	b29b      	uxth	r3, r3
 8005420:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005422:	88fb      	ldrh	r3, [r7, #6]
 8005424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005428:	2b00      	cmp	r3, #0
 800542a:	d01f      	beq.n	800546c <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	461a      	mov	r2, r3
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	4413      	add	r3, r2
 800543a:	881b      	ldrh	r3, [r3, #0]
 800543c:	b29b      	uxth	r3, r3
 800543e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005446:	82fb      	strh	r3, [r7, #22]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	461a      	mov	r2, r3
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	441a      	add	r2, r3
 8005456:	8afb      	ldrh	r3, [r7, #22]
 8005458:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800545c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005460:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005464:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005468:	b29b      	uxth	r3, r3
 800546a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800546c:	8b7b      	ldrh	r3, [r7, #26]
 800546e:	2b00      	cmp	r3, #0
 8005470:	f000 8087 	beq.w	8005582 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	6818      	ldr	r0, [r3, #0]
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	6959      	ldr	r1, [r3, #20]
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	891a      	ldrh	r2, [r3, #8]
 8005480:	8b7b      	ldrh	r3, [r7, #26]
 8005482:	f004 fdc7 	bl	800a014 <USB_ReadPMA>
 8005486:	e07c      	b.n	8005582 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005490:	b29b      	uxth	r3, r3
 8005492:	461a      	mov	r2, r3
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	00db      	lsls	r3, r3, #3
 800549a:	4413      	add	r3, r2
 800549c:	3306      	adds	r3, #6
 800549e:	005b      	lsls	r3, r3, #1
 80054a0:	68fa      	ldr	r2, [r7, #12]
 80054a2:	6812      	ldr	r2, [r2, #0]
 80054a4:	4413      	add	r3, r2
 80054a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054aa:	881b      	ldrh	r3, [r3, #0]
 80054ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054b0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	699a      	ldr	r2, [r3, #24]
 80054b6:	8b7b      	ldrh	r3, [r7, #26]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d306      	bcc.n	80054ca <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	699a      	ldr	r2, [r3, #24]
 80054c0:	8b7b      	ldrh	r3, [r7, #26]
 80054c2:	1ad2      	subs	r2, r2, r3
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	619a      	str	r2, [r3, #24]
 80054c8:	e002      	b.n	80054d0 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	2200      	movs	r2, #0
 80054ce:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	699b      	ldr	r3, [r3, #24]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d123      	bne.n	8005520 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	461a      	mov	r2, r3
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	009b      	lsls	r3, r3, #2
 80054e4:	4413      	add	r3, r2
 80054e6:	881b      	ldrh	r3, [r3, #0]
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054f2:	83fb      	strh	r3, [r7, #30]
 80054f4:	8bfb      	ldrh	r3, [r7, #30]
 80054f6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80054fa:	83fb      	strh	r3, [r7, #30]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	461a      	mov	r2, r3
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	441a      	add	r2, r3
 800550a:	8bfb      	ldrh	r3, [r7, #30]
 800550c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005510:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005514:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800551c:	b29b      	uxth	r3, r3
 800551e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005520:	88fb      	ldrh	r3, [r7, #6]
 8005522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005526:	2b00      	cmp	r3, #0
 8005528:	d11f      	bne.n	800556a <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	461a      	mov	r2, r3
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	4413      	add	r3, r2
 8005538:	881b      	ldrh	r3, [r3, #0]
 800553a:	b29b      	uxth	r3, r3
 800553c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005540:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005544:	83bb      	strh	r3, [r7, #28]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	461a      	mov	r2, r3
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	441a      	add	r2, r3
 8005554:	8bbb      	ldrh	r3, [r7, #28]
 8005556:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800555a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800555e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005562:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005566:	b29b      	uxth	r3, r3
 8005568:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800556a:	8b7b      	ldrh	r3, [r7, #26]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d008      	beq.n	8005582 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6818      	ldr	r0, [r3, #0]
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	6959      	ldr	r1, [r3, #20]
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	895a      	ldrh	r2, [r3, #10]
 800557c:	8b7b      	ldrh	r3, [r7, #26]
 800557e:	f004 fd49 	bl	800a014 <USB_ReadPMA>
    }
  }

  return count;
 8005582:	8b7b      	ldrh	r3, [r7, #26]
}
 8005584:	4618      	mov	r0, r3
 8005586:	3720      	adds	r7, #32
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}

0800558c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b0a2      	sub	sp, #136	; 0x88
 8005590:	af00      	add	r7, sp, #0
 8005592:	60f8      	str	r0, [r7, #12]
 8005594:	60b9      	str	r1, [r7, #8]
 8005596:	4613      	mov	r3, r2
 8005598:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800559a:	88fb      	ldrh	r3, [r7, #6]
 800559c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	f000 81c7 	beq.w	8005934 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	461a      	mov	r2, r3
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	781b      	ldrb	r3, [r3, #0]
 80055b6:	00db      	lsls	r3, r3, #3
 80055b8:	4413      	add	r3, r2
 80055ba:	3302      	adds	r3, #2
 80055bc:	005b      	lsls	r3, r3, #1
 80055be:	68fa      	ldr	r2, [r7, #12]
 80055c0:	6812      	ldr	r2, [r2, #0]
 80055c2:	4413      	add	r3, r2
 80055c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055c8:	881b      	ldrh	r3, [r3, #0]
 80055ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055ce:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	699a      	ldr	r2, [r3, #24]
 80055d6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80055da:	429a      	cmp	r2, r3
 80055dc:	d907      	bls.n	80055ee <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	699a      	ldr	r2, [r3, #24]
 80055e2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80055e6:	1ad2      	subs	r2, r2, r3
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	619a      	str	r2, [r3, #24]
 80055ec:	e002      	b.n	80055f4 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	2200      	movs	r2, #0
 80055f2:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	699b      	ldr	r3, [r3, #24]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	f040 80b9 	bne.w	8005770 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	785b      	ldrb	r3, [r3, #1]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d126      	bne.n	8005654 <HAL_PCD_EP_DB_Transmit+0xc8>
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	62bb      	str	r3, [r7, #40]	; 0x28
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005614:	b29b      	uxth	r3, r3
 8005616:	461a      	mov	r2, r3
 8005618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800561a:	4413      	add	r3, r2
 800561c:	62bb      	str	r3, [r7, #40]	; 0x28
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	781b      	ldrb	r3, [r3, #0]
 8005622:	011a      	lsls	r2, r3, #4
 8005624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005626:	4413      	add	r3, r2
 8005628:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800562c:	627b      	str	r3, [r7, #36]	; 0x24
 800562e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005630:	881b      	ldrh	r3, [r3, #0]
 8005632:	b29b      	uxth	r3, r3
 8005634:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005638:	b29a      	uxth	r2, r3
 800563a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563c:	801a      	strh	r2, [r3, #0]
 800563e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005640:	881b      	ldrh	r3, [r3, #0]
 8005642:	b29b      	uxth	r3, r3
 8005644:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005648:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800564c:	b29a      	uxth	r2, r3
 800564e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005650:	801a      	strh	r2, [r3, #0]
 8005652:	e01a      	b.n	800568a <HAL_PCD_EP_DB_Transmit+0xfe>
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	785b      	ldrb	r3, [r3, #1]
 8005658:	2b01      	cmp	r3, #1
 800565a:	d116      	bne.n	800568a <HAL_PCD_EP_DB_Transmit+0xfe>
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	633b      	str	r3, [r7, #48]	; 0x30
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800566a:	b29b      	uxth	r3, r3
 800566c:	461a      	mov	r2, r3
 800566e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005670:	4413      	add	r3, r2
 8005672:	633b      	str	r3, [r7, #48]	; 0x30
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	011a      	lsls	r2, r3, #4
 800567a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800567c:	4413      	add	r3, r2
 800567e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005682:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005686:	2200      	movs	r2, #0
 8005688:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	623b      	str	r3, [r7, #32]
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	785b      	ldrb	r3, [r3, #1]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d126      	bne.n	80056e6 <HAL_PCD_EP_DB_Transmit+0x15a>
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	61bb      	str	r3, [r7, #24]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	461a      	mov	r2, r3
 80056aa:	69bb      	ldr	r3, [r7, #24]
 80056ac:	4413      	add	r3, r2
 80056ae:	61bb      	str	r3, [r7, #24]
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	011a      	lsls	r2, r3, #4
 80056b6:	69bb      	ldr	r3, [r7, #24]
 80056b8:	4413      	add	r3, r2
 80056ba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80056be:	617b      	str	r3, [r7, #20]
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	881b      	ldrh	r3, [r3, #0]
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80056ca:	b29a      	uxth	r2, r3
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	801a      	strh	r2, [r3, #0]
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	881b      	ldrh	r3, [r3, #0]
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056de:	b29a      	uxth	r2, r3
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	801a      	strh	r2, [r3, #0]
 80056e4:	e017      	b.n	8005716 <HAL_PCD_EP_DB_Transmit+0x18a>
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	785b      	ldrb	r3, [r3, #1]
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d113      	bne.n	8005716 <HAL_PCD_EP_DB_Transmit+0x18a>
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	461a      	mov	r2, r3
 80056fa:	6a3b      	ldr	r3, [r7, #32]
 80056fc:	4413      	add	r3, r2
 80056fe:	623b      	str	r3, [r7, #32]
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	011a      	lsls	r2, r3, #4
 8005706:	6a3b      	ldr	r3, [r7, #32]
 8005708:	4413      	add	r3, r2
 800570a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800570e:	61fb      	str	r3, [r7, #28]
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	2200      	movs	r2, #0
 8005714:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	4619      	mov	r1, r3
 800571c:	68f8      	ldr	r0, [r7, #12]
 800571e:	f006 f864 	bl	800b7ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005722:	88fb      	ldrh	r3, [r7, #6]
 8005724:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005728:	2b00      	cmp	r3, #0
 800572a:	f000 82d4 	beq.w	8005cd6 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	461a      	mov	r2, r3
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	009b      	lsls	r3, r3, #2
 800573a:	4413      	add	r3, r2
 800573c:	881b      	ldrh	r3, [r3, #0]
 800573e:	b29b      	uxth	r3, r3
 8005740:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005744:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005748:	827b      	strh	r3, [r7, #18]
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	461a      	mov	r2, r3
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	441a      	add	r2, r3
 8005758:	8a7b      	ldrh	r3, [r7, #18]
 800575a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800575e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005762:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005766:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800576a:	b29b      	uxth	r3, r3
 800576c:	8013      	strh	r3, [r2, #0]
 800576e:	e2b2      	b.n	8005cd6 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005770:	88fb      	ldrh	r3, [r7, #6]
 8005772:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005776:	2b00      	cmp	r3, #0
 8005778:	d021      	beq.n	80057be <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	461a      	mov	r2, r3
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	009b      	lsls	r3, r3, #2
 8005786:	4413      	add	r3, r2
 8005788:	881b      	ldrh	r3, [r3, #0]
 800578a:	b29b      	uxth	r3, r3
 800578c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005790:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005794:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	461a      	mov	r2, r3
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	781b      	ldrb	r3, [r3, #0]
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	441a      	add	r2, r3
 80057a6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80057aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80057b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	f040 8286 	bne.w	8005cd6 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	695a      	ldr	r2, [r3, #20]
 80057ce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80057d2:	441a      	add	r2, r3
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	69da      	ldr	r2, [r3, #28]
 80057dc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80057e0:	441a      	add	r2, r3
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	6a1a      	ldr	r2, [r3, #32]
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d309      	bcc.n	8005806 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	6a1a      	ldr	r2, [r3, #32]
 80057fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057fe:	1ad2      	subs	r2, r2, r3
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	621a      	str	r2, [r3, #32]
 8005804:	e015      	b.n	8005832 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	6a1b      	ldr	r3, [r3, #32]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d107      	bne.n	800581e <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 800580e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005812:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	2200      	movs	r2, #0
 8005818:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800581c:	e009      	b.n	8005832 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	2200      	movs	r2, #0
 8005822:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	6a1b      	ldr	r3, [r3, #32]
 800582a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	2200      	movs	r2, #0
 8005830:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	785b      	ldrb	r3, [r3, #1]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d155      	bne.n	80058e6 <HAL_PCD_EP_DB_Transmit+0x35a>
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005848:	b29b      	uxth	r3, r3
 800584a:	461a      	mov	r2, r3
 800584c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800584e:	4413      	add	r3, r2
 8005850:	63bb      	str	r3, [r7, #56]	; 0x38
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	011a      	lsls	r2, r3, #4
 8005858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800585a:	4413      	add	r3, r2
 800585c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005860:	637b      	str	r3, [r7, #52]	; 0x34
 8005862:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005864:	2b00      	cmp	r3, #0
 8005866:	d112      	bne.n	800588e <HAL_PCD_EP_DB_Transmit+0x302>
 8005868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800586a:	881b      	ldrh	r3, [r3, #0]
 800586c:	b29b      	uxth	r3, r3
 800586e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005872:	b29a      	uxth	r2, r3
 8005874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005876:	801a      	strh	r2, [r3, #0]
 8005878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800587a:	881b      	ldrh	r3, [r3, #0]
 800587c:	b29b      	uxth	r3, r3
 800587e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005882:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005886:	b29a      	uxth	r2, r3
 8005888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800588a:	801a      	strh	r2, [r3, #0]
 800588c:	e047      	b.n	800591e <HAL_PCD_EP_DB_Transmit+0x392>
 800588e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005890:	2b3e      	cmp	r3, #62	; 0x3e
 8005892:	d811      	bhi.n	80058b8 <HAL_PCD_EP_DB_Transmit+0x32c>
 8005894:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005896:	085b      	lsrs	r3, r3, #1
 8005898:	64bb      	str	r3, [r7, #72]	; 0x48
 800589a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800589c:	f003 0301 	and.w	r3, r3, #1
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d002      	beq.n	80058aa <HAL_PCD_EP_DB_Transmit+0x31e>
 80058a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058a6:	3301      	adds	r3, #1
 80058a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80058aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	029b      	lsls	r3, r3, #10
 80058b0:	b29a      	uxth	r2, r3
 80058b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058b4:	801a      	strh	r2, [r3, #0]
 80058b6:	e032      	b.n	800591e <HAL_PCD_EP_DB_Transmit+0x392>
 80058b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058ba:	095b      	lsrs	r3, r3, #5
 80058bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80058be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058c0:	f003 031f 	and.w	r3, r3, #31
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d102      	bne.n	80058ce <HAL_PCD_EP_DB_Transmit+0x342>
 80058c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058ca:	3b01      	subs	r3, #1
 80058cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80058ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	029b      	lsls	r3, r3, #10
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058de:	b29a      	uxth	r2, r3
 80058e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058e2:	801a      	strh	r2, [r3, #0]
 80058e4:	e01b      	b.n	800591e <HAL_PCD_EP_DB_Transmit+0x392>
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	785b      	ldrb	r3, [r3, #1]
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d117      	bne.n	800591e <HAL_PCD_EP_DB_Transmit+0x392>
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	643b      	str	r3, [r7, #64]	; 0x40
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	461a      	mov	r2, r3
 8005900:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005902:	4413      	add	r3, r2
 8005904:	643b      	str	r3, [r7, #64]	; 0x40
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	011a      	lsls	r2, r3, #4
 800590c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800590e:	4413      	add	r3, r2
 8005910:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005914:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005916:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005918:	b29a      	uxth	r2, r3
 800591a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800591c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	6818      	ldr	r0, [r3, #0]
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	6959      	ldr	r1, [r3, #20]
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	891a      	ldrh	r2, [r3, #8]
 800592a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800592c:	b29b      	uxth	r3, r3
 800592e:	f004 fb2c 	bl	8009f8a <USB_WritePMA>
 8005932:	e1d0      	b.n	8005cd6 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800593c:	b29b      	uxth	r3, r3
 800593e:	461a      	mov	r2, r3
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	00db      	lsls	r3, r3, #3
 8005946:	4413      	add	r3, r2
 8005948:	3306      	adds	r3, #6
 800594a:	005b      	lsls	r3, r3, #1
 800594c:	68fa      	ldr	r2, [r7, #12]
 800594e:	6812      	ldr	r2, [r2, #0]
 8005950:	4413      	add	r3, r2
 8005952:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005956:	881b      	ldrh	r3, [r3, #0]
 8005958:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800595c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	699a      	ldr	r2, [r3, #24]
 8005964:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005968:	429a      	cmp	r2, r3
 800596a:	d307      	bcc.n	800597c <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	699a      	ldr	r2, [r3, #24]
 8005970:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005974:	1ad2      	subs	r2, r2, r3
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	619a      	str	r2, [r3, #24]
 800597a:	e002      	b.n	8005982 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	2200      	movs	r2, #0
 8005980:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	699b      	ldr	r3, [r3, #24]
 8005986:	2b00      	cmp	r3, #0
 8005988:	f040 80c4 	bne.w	8005b14 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	785b      	ldrb	r3, [r3, #1]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d126      	bne.n	80059e2 <HAL_PCD_EP_DB_Transmit+0x456>
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	66fb      	str	r3, [r7, #108]	; 0x6c
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	461a      	mov	r2, r3
 80059a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059a8:	4413      	add	r3, r2
 80059aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	781b      	ldrb	r3, [r3, #0]
 80059b0:	011a      	lsls	r2, r3, #4
 80059b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059b4:	4413      	add	r3, r2
 80059b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80059ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80059bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80059be:	881b      	ldrh	r3, [r3, #0]
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80059c6:	b29a      	uxth	r2, r3
 80059c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80059ca:	801a      	strh	r2, [r3, #0]
 80059cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80059ce:	881b      	ldrh	r3, [r3, #0]
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059da:	b29a      	uxth	r2, r3
 80059dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80059de:	801a      	strh	r2, [r3, #0]
 80059e0:	e01a      	b.n	8005a18 <HAL_PCD_EP_DB_Transmit+0x48c>
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	785b      	ldrb	r3, [r3, #1]
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d116      	bne.n	8005a18 <HAL_PCD_EP_DB_Transmit+0x48c>
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	677b      	str	r3, [r7, #116]	; 0x74
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	461a      	mov	r2, r3
 80059fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059fe:	4413      	add	r3, r2
 8005a00:	677b      	str	r3, [r7, #116]	; 0x74
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	011a      	lsls	r2, r3, #4
 8005a08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a0a:	4413      	add	r3, r2
 8005a0c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a10:	673b      	str	r3, [r7, #112]	; 0x70
 8005a12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a14:	2200      	movs	r2, #0
 8005a16:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	67bb      	str	r3, [r7, #120]	; 0x78
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	785b      	ldrb	r3, [r3, #1]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d12f      	bne.n	8005a86 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	461a      	mov	r2, r3
 8005a3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005a3e:	4413      	add	r3, r2
 8005a40:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	781b      	ldrb	r3, [r3, #0]
 8005a48:	011a      	lsls	r2, r3, #4
 8005a4a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005a4e:	4413      	add	r3, r2
 8005a50:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005a58:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a5c:	881b      	ldrh	r3, [r3, #0]
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a64:	b29a      	uxth	r2, r3
 8005a66:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a6a:	801a      	strh	r2, [r3, #0]
 8005a6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a70:	881b      	ldrh	r3, [r3, #0]
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a7c:	b29a      	uxth	r2, r3
 8005a7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a82:	801a      	strh	r2, [r3, #0]
 8005a84:	e017      	b.n	8005ab6 <HAL_PCD_EP_DB_Transmit+0x52a>
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	785b      	ldrb	r3, [r3, #1]
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d113      	bne.n	8005ab6 <HAL_PCD_EP_DB_Transmit+0x52a>
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	461a      	mov	r2, r3
 8005a9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a9c:	4413      	add	r3, r2
 8005a9e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	011a      	lsls	r2, r3, #4
 8005aa6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005aa8:	4413      	add	r3, r2
 8005aaa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005aae:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005ab0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	4619      	mov	r1, r3
 8005abc:	68f8      	ldr	r0, [r7, #12]
 8005abe:	f005 fe94 	bl	800b7ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005ac2:	88fb      	ldrh	r3, [r7, #6]
 8005ac4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	f040 8104 	bne.w	8005cd6 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	4413      	add	r3, r2
 8005adc:	881b      	ldrh	r3, [r3, #0]
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ae4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ae8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	461a      	mov	r2, r3
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	781b      	ldrb	r3, [r3, #0]
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	441a      	add	r2, r3
 8005afa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005afe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b06:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	8013      	strh	r3, [r2, #0]
 8005b12:	e0e0      	b.n	8005cd6 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005b14:	88fb      	ldrh	r3, [r7, #6]
 8005b16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d121      	bne.n	8005b62 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	461a      	mov	r2, r3
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	781b      	ldrb	r3, [r3, #0]
 8005b28:	009b      	lsls	r3, r3, #2
 8005b2a:	4413      	add	r3, r2
 8005b2c:	881b      	ldrh	r3, [r3, #0]
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b38:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	461a      	mov	r2, r3
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	781b      	ldrb	r3, [r3, #0]
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	441a      	add	r2, r3
 8005b4a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005b4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b56:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	f040 80b4 	bne.w	8005cd6 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	695a      	ldr	r2, [r3, #20]
 8005b72:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005b76:	441a      	add	r2, r3
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	69da      	ldr	r2, [r3, #28]
 8005b80:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005b84:	441a      	add	r2, r3
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	6a1a      	ldr	r2, [r3, #32]
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	691b      	ldr	r3, [r3, #16]
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d309      	bcc.n	8005baa <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	6a1a      	ldr	r2, [r3, #32]
 8005ba0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ba2:	1ad2      	subs	r2, r2, r3
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	621a      	str	r2, [r3, #32]
 8005ba8:	e015      	b.n	8005bd6 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	6a1b      	ldr	r3, [r3, #32]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d107      	bne.n	8005bc2 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8005bb2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005bb6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005bc0:	e009      	b.n	8005bd6 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	6a1b      	ldr	r3, [r3, #32]
 8005bc6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	667b      	str	r3, [r7, #100]	; 0x64
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	785b      	ldrb	r3, [r3, #1]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d155      	bne.n	8005c90 <HAL_PCD_EP_DB_Transmit+0x704>
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	461a      	mov	r2, r3
 8005bf6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bf8:	4413      	add	r3, r2
 8005bfa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	011a      	lsls	r2, r3, #4
 8005c02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c04:	4413      	add	r3, r2
 8005c06:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c0a:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d112      	bne.n	8005c38 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8005c12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c14:	881b      	ldrh	r3, [r3, #0]
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c1c:	b29a      	uxth	r2, r3
 8005c1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c20:	801a      	strh	r2, [r3, #0]
 8005c22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c24:	881b      	ldrh	r3, [r3, #0]
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c30:	b29a      	uxth	r2, r3
 8005c32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c34:	801a      	strh	r2, [r3, #0]
 8005c36:	e044      	b.n	8005cc2 <HAL_PCD_EP_DB_Transmit+0x736>
 8005c38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c3a:	2b3e      	cmp	r3, #62	; 0x3e
 8005c3c:	d811      	bhi.n	8005c62 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8005c3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c40:	085b      	lsrs	r3, r3, #1
 8005c42:	657b      	str	r3, [r7, #84]	; 0x54
 8005c44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c46:	f003 0301 	and.w	r3, r3, #1
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d002      	beq.n	8005c54 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8005c4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c50:	3301      	adds	r3, #1
 8005c52:	657b      	str	r3, [r7, #84]	; 0x54
 8005c54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	029b      	lsls	r3, r3, #10
 8005c5a:	b29a      	uxth	r2, r3
 8005c5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c5e:	801a      	strh	r2, [r3, #0]
 8005c60:	e02f      	b.n	8005cc2 <HAL_PCD_EP_DB_Transmit+0x736>
 8005c62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c64:	095b      	lsrs	r3, r3, #5
 8005c66:	657b      	str	r3, [r7, #84]	; 0x54
 8005c68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c6a:	f003 031f 	and.w	r3, r3, #31
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d102      	bne.n	8005c78 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8005c72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c74:	3b01      	subs	r3, #1
 8005c76:	657b      	str	r3, [r7, #84]	; 0x54
 8005c78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	029b      	lsls	r3, r3, #10
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c88:	b29a      	uxth	r2, r3
 8005c8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c8c:	801a      	strh	r2, [r3, #0]
 8005c8e:	e018      	b.n	8005cc2 <HAL_PCD_EP_DB_Transmit+0x736>
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	785b      	ldrb	r3, [r3, #1]
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d114      	bne.n	8005cc2 <HAL_PCD_EP_DB_Transmit+0x736>
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ca6:	4413      	add	r3, r2
 8005ca8:	667b      	str	r3, [r7, #100]	; 0x64
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	011a      	lsls	r2, r3, #4
 8005cb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cb2:	4413      	add	r3, r2
 8005cb4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005cb8:	663b      	str	r3, [r7, #96]	; 0x60
 8005cba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cbc:	b29a      	uxth	r2, r3
 8005cbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005cc0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	6818      	ldr	r0, [r3, #0]
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	6959      	ldr	r1, [r3, #20]
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	895a      	ldrh	r2, [r3, #10]
 8005cce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	f004 f95a 	bl	8009f8a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	461a      	mov	r2, r3
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	4413      	add	r3, r2
 8005ce4:	881b      	ldrh	r3, [r3, #0]
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cf0:	823b      	strh	r3, [r7, #16]
 8005cf2:	8a3b      	ldrh	r3, [r7, #16]
 8005cf4:	f083 0310 	eor.w	r3, r3, #16
 8005cf8:	823b      	strh	r3, [r7, #16]
 8005cfa:	8a3b      	ldrh	r3, [r7, #16]
 8005cfc:	f083 0320 	eor.w	r3, r3, #32
 8005d00:	823b      	strh	r3, [r7, #16]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	461a      	mov	r2, r3
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	441a      	add	r2, r3
 8005d10:	8a3b      	ldrh	r3, [r7, #16]
 8005d12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005d26:	2300      	movs	r3, #0
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3788      	adds	r7, #136	; 0x88
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}

08005d30 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b087      	sub	sp, #28
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	607b      	str	r3, [r7, #4]
 8005d3a:	460b      	mov	r3, r1
 8005d3c:	817b      	strh	r3, [r7, #10]
 8005d3e:	4613      	mov	r3, r2
 8005d40:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005d42:	897b      	ldrh	r3, [r7, #10]
 8005d44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d00b      	beq.n	8005d66 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d4e:	897b      	ldrh	r3, [r7, #10]
 8005d50:	f003 0307 	and.w	r3, r3, #7
 8005d54:	1c5a      	adds	r2, r3, #1
 8005d56:	4613      	mov	r3, r2
 8005d58:	009b      	lsls	r3, r3, #2
 8005d5a:	4413      	add	r3, r2
 8005d5c:	00db      	lsls	r3, r3, #3
 8005d5e:	68fa      	ldr	r2, [r7, #12]
 8005d60:	4413      	add	r3, r2
 8005d62:	617b      	str	r3, [r7, #20]
 8005d64:	e009      	b.n	8005d7a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005d66:	897a      	ldrh	r2, [r7, #10]
 8005d68:	4613      	mov	r3, r2
 8005d6a:	009b      	lsls	r3, r3, #2
 8005d6c:	4413      	add	r3, r2
 8005d6e:	00db      	lsls	r3, r3, #3
 8005d70:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005d74:	68fa      	ldr	r2, [r7, #12]
 8005d76:	4413      	add	r3, r2
 8005d78:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005d7a:	893b      	ldrh	r3, [r7, #8]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d107      	bne.n	8005d90 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	2200      	movs	r2, #0
 8005d84:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	b29a      	uxth	r2, r3
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	80da      	strh	r2, [r3, #6]
 8005d8e:	e00b      	b.n	8005da8 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	2201      	movs	r2, #1
 8005d94:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	b29a      	uxth	r2, r3
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	0c1b      	lsrs	r3, r3, #16
 8005da2:	b29a      	uxth	r2, r3
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	371c      	adds	r7, #28
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bc80      	pop	{r7}
 8005db2:	4770      	bx	lr

08005db4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b086      	sub	sp, #24
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d101      	bne.n	8005dc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e26c      	b.n	80062a0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f003 0301 	and.w	r3, r3, #1
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	f000 8087 	beq.w	8005ee2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005dd4:	4b92      	ldr	r3, [pc, #584]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	f003 030c 	and.w	r3, r3, #12
 8005ddc:	2b04      	cmp	r3, #4
 8005dde:	d00c      	beq.n	8005dfa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005de0:	4b8f      	ldr	r3, [pc, #572]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	f003 030c 	and.w	r3, r3, #12
 8005de8:	2b08      	cmp	r3, #8
 8005dea:	d112      	bne.n	8005e12 <HAL_RCC_OscConfig+0x5e>
 8005dec:	4b8c      	ldr	r3, [pc, #560]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005df4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005df8:	d10b      	bne.n	8005e12 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dfa:	4b89      	ldr	r3, [pc, #548]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d06c      	beq.n	8005ee0 <HAL_RCC_OscConfig+0x12c>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d168      	bne.n	8005ee0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e246      	b.n	80062a0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e1a:	d106      	bne.n	8005e2a <HAL_RCC_OscConfig+0x76>
 8005e1c:	4b80      	ldr	r3, [pc, #512]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a7f      	ldr	r2, [pc, #508]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005e22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e26:	6013      	str	r3, [r2, #0]
 8005e28:	e02e      	b.n	8005e88 <HAL_RCC_OscConfig+0xd4>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d10c      	bne.n	8005e4c <HAL_RCC_OscConfig+0x98>
 8005e32:	4b7b      	ldr	r3, [pc, #492]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a7a      	ldr	r2, [pc, #488]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005e38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e3c:	6013      	str	r3, [r2, #0]
 8005e3e:	4b78      	ldr	r3, [pc, #480]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a77      	ldr	r2, [pc, #476]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005e44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e48:	6013      	str	r3, [r2, #0]
 8005e4a:	e01d      	b.n	8005e88 <HAL_RCC_OscConfig+0xd4>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e54:	d10c      	bne.n	8005e70 <HAL_RCC_OscConfig+0xbc>
 8005e56:	4b72      	ldr	r3, [pc, #456]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a71      	ldr	r2, [pc, #452]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005e5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e60:	6013      	str	r3, [r2, #0]
 8005e62:	4b6f      	ldr	r3, [pc, #444]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a6e      	ldr	r2, [pc, #440]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005e68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e6c:	6013      	str	r3, [r2, #0]
 8005e6e:	e00b      	b.n	8005e88 <HAL_RCC_OscConfig+0xd4>
 8005e70:	4b6b      	ldr	r3, [pc, #428]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a6a      	ldr	r2, [pc, #424]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005e76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e7a:	6013      	str	r3, [r2, #0]
 8005e7c:	4b68      	ldr	r3, [pc, #416]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a67      	ldr	r2, [pc, #412]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005e82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e86:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d013      	beq.n	8005eb8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e90:	f7fc fa3a 	bl	8002308 <HAL_GetTick>
 8005e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e96:	e008      	b.n	8005eaa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e98:	f7fc fa36 	bl	8002308 <HAL_GetTick>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	2b64      	cmp	r3, #100	; 0x64
 8005ea4:	d901      	bls.n	8005eaa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005ea6:	2303      	movs	r3, #3
 8005ea8:	e1fa      	b.n	80062a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005eaa:	4b5d      	ldr	r3, [pc, #372]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d0f0      	beq.n	8005e98 <HAL_RCC_OscConfig+0xe4>
 8005eb6:	e014      	b.n	8005ee2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005eb8:	f7fc fa26 	bl	8002308 <HAL_GetTick>
 8005ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ebe:	e008      	b.n	8005ed2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ec0:	f7fc fa22 	bl	8002308 <HAL_GetTick>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	1ad3      	subs	r3, r2, r3
 8005eca:	2b64      	cmp	r3, #100	; 0x64
 8005ecc:	d901      	bls.n	8005ed2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005ece:	2303      	movs	r3, #3
 8005ed0:	e1e6      	b.n	80062a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ed2:	4b53      	ldr	r3, [pc, #332]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d1f0      	bne.n	8005ec0 <HAL_RCC_OscConfig+0x10c>
 8005ede:	e000      	b.n	8005ee2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ee0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f003 0302 	and.w	r3, r3, #2
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d063      	beq.n	8005fb6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005eee:	4b4c      	ldr	r3, [pc, #304]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	f003 030c 	and.w	r3, r3, #12
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d00b      	beq.n	8005f12 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005efa:	4b49      	ldr	r3, [pc, #292]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	f003 030c 	and.w	r3, r3, #12
 8005f02:	2b08      	cmp	r3, #8
 8005f04:	d11c      	bne.n	8005f40 <HAL_RCC_OscConfig+0x18c>
 8005f06:	4b46      	ldr	r3, [pc, #280]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d116      	bne.n	8005f40 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f12:	4b43      	ldr	r3, [pc, #268]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f003 0302 	and.w	r3, r3, #2
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d005      	beq.n	8005f2a <HAL_RCC_OscConfig+0x176>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	691b      	ldr	r3, [r3, #16]
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d001      	beq.n	8005f2a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	e1ba      	b.n	80062a0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f2a:	4b3d      	ldr	r3, [pc, #244]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	695b      	ldr	r3, [r3, #20]
 8005f36:	00db      	lsls	r3, r3, #3
 8005f38:	4939      	ldr	r1, [pc, #228]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f3e:	e03a      	b.n	8005fb6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	691b      	ldr	r3, [r3, #16]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d020      	beq.n	8005f8a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f48:	4b36      	ldr	r3, [pc, #216]	; (8006024 <HAL_RCC_OscConfig+0x270>)
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f4e:	f7fc f9db 	bl	8002308 <HAL_GetTick>
 8005f52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f54:	e008      	b.n	8005f68 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f56:	f7fc f9d7 	bl	8002308 <HAL_GetTick>
 8005f5a:	4602      	mov	r2, r0
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	1ad3      	subs	r3, r2, r3
 8005f60:	2b02      	cmp	r3, #2
 8005f62:	d901      	bls.n	8005f68 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005f64:	2303      	movs	r3, #3
 8005f66:	e19b      	b.n	80062a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f68:	4b2d      	ldr	r3, [pc, #180]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f003 0302 	and.w	r3, r3, #2
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d0f0      	beq.n	8005f56 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f74:	4b2a      	ldr	r3, [pc, #168]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	695b      	ldr	r3, [r3, #20]
 8005f80:	00db      	lsls	r3, r3, #3
 8005f82:	4927      	ldr	r1, [pc, #156]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005f84:	4313      	orrs	r3, r2
 8005f86:	600b      	str	r3, [r1, #0]
 8005f88:	e015      	b.n	8005fb6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f8a:	4b26      	ldr	r3, [pc, #152]	; (8006024 <HAL_RCC_OscConfig+0x270>)
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f90:	f7fc f9ba 	bl	8002308 <HAL_GetTick>
 8005f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f96:	e008      	b.n	8005faa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f98:	f7fc f9b6 	bl	8002308 <HAL_GetTick>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	1ad3      	subs	r3, r2, r3
 8005fa2:	2b02      	cmp	r3, #2
 8005fa4:	d901      	bls.n	8005faa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005fa6:	2303      	movs	r3, #3
 8005fa8:	e17a      	b.n	80062a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005faa:	4b1d      	ldr	r3, [pc, #116]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f003 0302 	and.w	r3, r3, #2
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d1f0      	bne.n	8005f98 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f003 0308 	and.w	r3, r3, #8
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d03a      	beq.n	8006038 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	699b      	ldr	r3, [r3, #24]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d019      	beq.n	8005ffe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005fca:	4b17      	ldr	r3, [pc, #92]	; (8006028 <HAL_RCC_OscConfig+0x274>)
 8005fcc:	2201      	movs	r2, #1
 8005fce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fd0:	f7fc f99a 	bl	8002308 <HAL_GetTick>
 8005fd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fd6:	e008      	b.n	8005fea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005fd8:	f7fc f996 	bl	8002308 <HAL_GetTick>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	1ad3      	subs	r3, r2, r3
 8005fe2:	2b02      	cmp	r3, #2
 8005fe4:	d901      	bls.n	8005fea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005fe6:	2303      	movs	r3, #3
 8005fe8:	e15a      	b.n	80062a0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fea:	4b0d      	ldr	r3, [pc, #52]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fee:	f003 0302 	and.w	r3, r3, #2
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d0f0      	beq.n	8005fd8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005ff6:	2001      	movs	r0, #1
 8005ff8:	f000 fad8 	bl	80065ac <RCC_Delay>
 8005ffc:	e01c      	b.n	8006038 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ffe:	4b0a      	ldr	r3, [pc, #40]	; (8006028 <HAL_RCC_OscConfig+0x274>)
 8006000:	2200      	movs	r2, #0
 8006002:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006004:	f7fc f980 	bl	8002308 <HAL_GetTick>
 8006008:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800600a:	e00f      	b.n	800602c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800600c:	f7fc f97c 	bl	8002308 <HAL_GetTick>
 8006010:	4602      	mov	r2, r0
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	1ad3      	subs	r3, r2, r3
 8006016:	2b02      	cmp	r3, #2
 8006018:	d908      	bls.n	800602c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800601a:	2303      	movs	r3, #3
 800601c:	e140      	b.n	80062a0 <HAL_RCC_OscConfig+0x4ec>
 800601e:	bf00      	nop
 8006020:	40021000 	.word	0x40021000
 8006024:	42420000 	.word	0x42420000
 8006028:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800602c:	4b9e      	ldr	r3, [pc, #632]	; (80062a8 <HAL_RCC_OscConfig+0x4f4>)
 800602e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006030:	f003 0302 	and.w	r3, r3, #2
 8006034:	2b00      	cmp	r3, #0
 8006036:	d1e9      	bne.n	800600c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f003 0304 	and.w	r3, r3, #4
 8006040:	2b00      	cmp	r3, #0
 8006042:	f000 80a6 	beq.w	8006192 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006046:	2300      	movs	r3, #0
 8006048:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800604a:	4b97      	ldr	r3, [pc, #604]	; (80062a8 <HAL_RCC_OscConfig+0x4f4>)
 800604c:	69db      	ldr	r3, [r3, #28]
 800604e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006052:	2b00      	cmp	r3, #0
 8006054:	d10d      	bne.n	8006072 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006056:	4b94      	ldr	r3, [pc, #592]	; (80062a8 <HAL_RCC_OscConfig+0x4f4>)
 8006058:	69db      	ldr	r3, [r3, #28]
 800605a:	4a93      	ldr	r2, [pc, #588]	; (80062a8 <HAL_RCC_OscConfig+0x4f4>)
 800605c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006060:	61d3      	str	r3, [r2, #28]
 8006062:	4b91      	ldr	r3, [pc, #580]	; (80062a8 <HAL_RCC_OscConfig+0x4f4>)
 8006064:	69db      	ldr	r3, [r3, #28]
 8006066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800606a:	60bb      	str	r3, [r7, #8]
 800606c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800606e:	2301      	movs	r3, #1
 8006070:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006072:	4b8e      	ldr	r3, [pc, #568]	; (80062ac <HAL_RCC_OscConfig+0x4f8>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800607a:	2b00      	cmp	r3, #0
 800607c:	d118      	bne.n	80060b0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800607e:	4b8b      	ldr	r3, [pc, #556]	; (80062ac <HAL_RCC_OscConfig+0x4f8>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a8a      	ldr	r2, [pc, #552]	; (80062ac <HAL_RCC_OscConfig+0x4f8>)
 8006084:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006088:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800608a:	f7fc f93d 	bl	8002308 <HAL_GetTick>
 800608e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006090:	e008      	b.n	80060a4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006092:	f7fc f939 	bl	8002308 <HAL_GetTick>
 8006096:	4602      	mov	r2, r0
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	1ad3      	subs	r3, r2, r3
 800609c:	2b64      	cmp	r3, #100	; 0x64
 800609e:	d901      	bls.n	80060a4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80060a0:	2303      	movs	r3, #3
 80060a2:	e0fd      	b.n	80062a0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060a4:	4b81      	ldr	r3, [pc, #516]	; (80062ac <HAL_RCC_OscConfig+0x4f8>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d0f0      	beq.n	8006092 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	68db      	ldr	r3, [r3, #12]
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d106      	bne.n	80060c6 <HAL_RCC_OscConfig+0x312>
 80060b8:	4b7b      	ldr	r3, [pc, #492]	; (80062a8 <HAL_RCC_OscConfig+0x4f4>)
 80060ba:	6a1b      	ldr	r3, [r3, #32]
 80060bc:	4a7a      	ldr	r2, [pc, #488]	; (80062a8 <HAL_RCC_OscConfig+0x4f4>)
 80060be:	f043 0301 	orr.w	r3, r3, #1
 80060c2:	6213      	str	r3, [r2, #32]
 80060c4:	e02d      	b.n	8006122 <HAL_RCC_OscConfig+0x36e>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	68db      	ldr	r3, [r3, #12]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d10c      	bne.n	80060e8 <HAL_RCC_OscConfig+0x334>
 80060ce:	4b76      	ldr	r3, [pc, #472]	; (80062a8 <HAL_RCC_OscConfig+0x4f4>)
 80060d0:	6a1b      	ldr	r3, [r3, #32]
 80060d2:	4a75      	ldr	r2, [pc, #468]	; (80062a8 <HAL_RCC_OscConfig+0x4f4>)
 80060d4:	f023 0301 	bic.w	r3, r3, #1
 80060d8:	6213      	str	r3, [r2, #32]
 80060da:	4b73      	ldr	r3, [pc, #460]	; (80062a8 <HAL_RCC_OscConfig+0x4f4>)
 80060dc:	6a1b      	ldr	r3, [r3, #32]
 80060de:	4a72      	ldr	r2, [pc, #456]	; (80062a8 <HAL_RCC_OscConfig+0x4f4>)
 80060e0:	f023 0304 	bic.w	r3, r3, #4
 80060e4:	6213      	str	r3, [r2, #32]
 80060e6:	e01c      	b.n	8006122 <HAL_RCC_OscConfig+0x36e>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	2b05      	cmp	r3, #5
 80060ee:	d10c      	bne.n	800610a <HAL_RCC_OscConfig+0x356>
 80060f0:	4b6d      	ldr	r3, [pc, #436]	; (80062a8 <HAL_RCC_OscConfig+0x4f4>)
 80060f2:	6a1b      	ldr	r3, [r3, #32]
 80060f4:	4a6c      	ldr	r2, [pc, #432]	; (80062a8 <HAL_RCC_OscConfig+0x4f4>)
 80060f6:	f043 0304 	orr.w	r3, r3, #4
 80060fa:	6213      	str	r3, [r2, #32]
 80060fc:	4b6a      	ldr	r3, [pc, #424]	; (80062a8 <HAL_RCC_OscConfig+0x4f4>)
 80060fe:	6a1b      	ldr	r3, [r3, #32]
 8006100:	4a69      	ldr	r2, [pc, #420]	; (80062a8 <HAL_RCC_OscConfig+0x4f4>)
 8006102:	f043 0301 	orr.w	r3, r3, #1
 8006106:	6213      	str	r3, [r2, #32]
 8006108:	e00b      	b.n	8006122 <HAL_RCC_OscConfig+0x36e>
 800610a:	4b67      	ldr	r3, [pc, #412]	; (80062a8 <HAL_RCC_OscConfig+0x4f4>)
 800610c:	6a1b      	ldr	r3, [r3, #32]
 800610e:	4a66      	ldr	r2, [pc, #408]	; (80062a8 <HAL_RCC_OscConfig+0x4f4>)
 8006110:	f023 0301 	bic.w	r3, r3, #1
 8006114:	6213      	str	r3, [r2, #32]
 8006116:	4b64      	ldr	r3, [pc, #400]	; (80062a8 <HAL_RCC_OscConfig+0x4f4>)
 8006118:	6a1b      	ldr	r3, [r3, #32]
 800611a:	4a63      	ldr	r2, [pc, #396]	; (80062a8 <HAL_RCC_OscConfig+0x4f4>)
 800611c:	f023 0304 	bic.w	r3, r3, #4
 8006120:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	68db      	ldr	r3, [r3, #12]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d015      	beq.n	8006156 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800612a:	f7fc f8ed 	bl	8002308 <HAL_GetTick>
 800612e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006130:	e00a      	b.n	8006148 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006132:	f7fc f8e9 	bl	8002308 <HAL_GetTick>
 8006136:	4602      	mov	r2, r0
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	1ad3      	subs	r3, r2, r3
 800613c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006140:	4293      	cmp	r3, r2
 8006142:	d901      	bls.n	8006148 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006144:	2303      	movs	r3, #3
 8006146:	e0ab      	b.n	80062a0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006148:	4b57      	ldr	r3, [pc, #348]	; (80062a8 <HAL_RCC_OscConfig+0x4f4>)
 800614a:	6a1b      	ldr	r3, [r3, #32]
 800614c:	f003 0302 	and.w	r3, r3, #2
 8006150:	2b00      	cmp	r3, #0
 8006152:	d0ee      	beq.n	8006132 <HAL_RCC_OscConfig+0x37e>
 8006154:	e014      	b.n	8006180 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006156:	f7fc f8d7 	bl	8002308 <HAL_GetTick>
 800615a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800615c:	e00a      	b.n	8006174 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800615e:	f7fc f8d3 	bl	8002308 <HAL_GetTick>
 8006162:	4602      	mov	r2, r0
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	1ad3      	subs	r3, r2, r3
 8006168:	f241 3288 	movw	r2, #5000	; 0x1388
 800616c:	4293      	cmp	r3, r2
 800616e:	d901      	bls.n	8006174 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006170:	2303      	movs	r3, #3
 8006172:	e095      	b.n	80062a0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006174:	4b4c      	ldr	r3, [pc, #304]	; (80062a8 <HAL_RCC_OscConfig+0x4f4>)
 8006176:	6a1b      	ldr	r3, [r3, #32]
 8006178:	f003 0302 	and.w	r3, r3, #2
 800617c:	2b00      	cmp	r3, #0
 800617e:	d1ee      	bne.n	800615e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006180:	7dfb      	ldrb	r3, [r7, #23]
 8006182:	2b01      	cmp	r3, #1
 8006184:	d105      	bne.n	8006192 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006186:	4b48      	ldr	r3, [pc, #288]	; (80062a8 <HAL_RCC_OscConfig+0x4f4>)
 8006188:	69db      	ldr	r3, [r3, #28]
 800618a:	4a47      	ldr	r2, [pc, #284]	; (80062a8 <HAL_RCC_OscConfig+0x4f4>)
 800618c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006190:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	69db      	ldr	r3, [r3, #28]
 8006196:	2b00      	cmp	r3, #0
 8006198:	f000 8081 	beq.w	800629e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800619c:	4b42      	ldr	r3, [pc, #264]	; (80062a8 <HAL_RCC_OscConfig+0x4f4>)
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	f003 030c 	and.w	r3, r3, #12
 80061a4:	2b08      	cmp	r3, #8
 80061a6:	d061      	beq.n	800626c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	69db      	ldr	r3, [r3, #28]
 80061ac:	2b02      	cmp	r3, #2
 80061ae:	d146      	bne.n	800623e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061b0:	4b3f      	ldr	r3, [pc, #252]	; (80062b0 <HAL_RCC_OscConfig+0x4fc>)
 80061b2:	2200      	movs	r2, #0
 80061b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061b6:	f7fc f8a7 	bl	8002308 <HAL_GetTick>
 80061ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80061bc:	e008      	b.n	80061d0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061be:	f7fc f8a3 	bl	8002308 <HAL_GetTick>
 80061c2:	4602      	mov	r2, r0
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	1ad3      	subs	r3, r2, r3
 80061c8:	2b02      	cmp	r3, #2
 80061ca:	d901      	bls.n	80061d0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80061cc:	2303      	movs	r3, #3
 80061ce:	e067      	b.n	80062a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80061d0:	4b35      	ldr	r3, [pc, #212]	; (80062a8 <HAL_RCC_OscConfig+0x4f4>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d1f0      	bne.n	80061be <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6a1b      	ldr	r3, [r3, #32]
 80061e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061e4:	d108      	bne.n	80061f8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80061e6:	4b30      	ldr	r3, [pc, #192]	; (80062a8 <HAL_RCC_OscConfig+0x4f4>)
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	492d      	ldr	r1, [pc, #180]	; (80062a8 <HAL_RCC_OscConfig+0x4f4>)
 80061f4:	4313      	orrs	r3, r2
 80061f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80061f8:	4b2b      	ldr	r3, [pc, #172]	; (80062a8 <HAL_RCC_OscConfig+0x4f4>)
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6a19      	ldr	r1, [r3, #32]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006208:	430b      	orrs	r3, r1
 800620a:	4927      	ldr	r1, [pc, #156]	; (80062a8 <HAL_RCC_OscConfig+0x4f4>)
 800620c:	4313      	orrs	r3, r2
 800620e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006210:	4b27      	ldr	r3, [pc, #156]	; (80062b0 <HAL_RCC_OscConfig+0x4fc>)
 8006212:	2201      	movs	r2, #1
 8006214:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006216:	f7fc f877 	bl	8002308 <HAL_GetTick>
 800621a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800621c:	e008      	b.n	8006230 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800621e:	f7fc f873 	bl	8002308 <HAL_GetTick>
 8006222:	4602      	mov	r2, r0
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	1ad3      	subs	r3, r2, r3
 8006228:	2b02      	cmp	r3, #2
 800622a:	d901      	bls.n	8006230 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800622c:	2303      	movs	r3, #3
 800622e:	e037      	b.n	80062a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006230:	4b1d      	ldr	r3, [pc, #116]	; (80062a8 <HAL_RCC_OscConfig+0x4f4>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006238:	2b00      	cmp	r3, #0
 800623a:	d0f0      	beq.n	800621e <HAL_RCC_OscConfig+0x46a>
 800623c:	e02f      	b.n	800629e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800623e:	4b1c      	ldr	r3, [pc, #112]	; (80062b0 <HAL_RCC_OscConfig+0x4fc>)
 8006240:	2200      	movs	r2, #0
 8006242:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006244:	f7fc f860 	bl	8002308 <HAL_GetTick>
 8006248:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800624a:	e008      	b.n	800625e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800624c:	f7fc f85c 	bl	8002308 <HAL_GetTick>
 8006250:	4602      	mov	r2, r0
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	1ad3      	subs	r3, r2, r3
 8006256:	2b02      	cmp	r3, #2
 8006258:	d901      	bls.n	800625e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800625a:	2303      	movs	r3, #3
 800625c:	e020      	b.n	80062a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800625e:	4b12      	ldr	r3, [pc, #72]	; (80062a8 <HAL_RCC_OscConfig+0x4f4>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006266:	2b00      	cmp	r3, #0
 8006268:	d1f0      	bne.n	800624c <HAL_RCC_OscConfig+0x498>
 800626a:	e018      	b.n	800629e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	69db      	ldr	r3, [r3, #28]
 8006270:	2b01      	cmp	r3, #1
 8006272:	d101      	bne.n	8006278 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	e013      	b.n	80062a0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006278:	4b0b      	ldr	r3, [pc, #44]	; (80062a8 <HAL_RCC_OscConfig+0x4f4>)
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6a1b      	ldr	r3, [r3, #32]
 8006288:	429a      	cmp	r2, r3
 800628a:	d106      	bne.n	800629a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006296:	429a      	cmp	r2, r3
 8006298:	d001      	beq.n	800629e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	e000      	b.n	80062a0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800629e:	2300      	movs	r3, #0
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3718      	adds	r7, #24
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}
 80062a8:	40021000 	.word	0x40021000
 80062ac:	40007000 	.word	0x40007000
 80062b0:	42420060 	.word	0x42420060

080062b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b084      	sub	sp, #16
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d101      	bne.n	80062c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	e0d0      	b.n	800646a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80062c8:	4b6a      	ldr	r3, [pc, #424]	; (8006474 <HAL_RCC_ClockConfig+0x1c0>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f003 0307 	and.w	r3, r3, #7
 80062d0:	683a      	ldr	r2, [r7, #0]
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d910      	bls.n	80062f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062d6:	4b67      	ldr	r3, [pc, #412]	; (8006474 <HAL_RCC_ClockConfig+0x1c0>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f023 0207 	bic.w	r2, r3, #7
 80062de:	4965      	ldr	r1, [pc, #404]	; (8006474 <HAL_RCC_ClockConfig+0x1c0>)
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	4313      	orrs	r3, r2
 80062e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062e6:	4b63      	ldr	r3, [pc, #396]	; (8006474 <HAL_RCC_ClockConfig+0x1c0>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f003 0307 	and.w	r3, r3, #7
 80062ee:	683a      	ldr	r2, [r7, #0]
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d001      	beq.n	80062f8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80062f4:	2301      	movs	r3, #1
 80062f6:	e0b8      	b.n	800646a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f003 0302 	and.w	r3, r3, #2
 8006300:	2b00      	cmp	r3, #0
 8006302:	d020      	beq.n	8006346 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f003 0304 	and.w	r3, r3, #4
 800630c:	2b00      	cmp	r3, #0
 800630e:	d005      	beq.n	800631c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006310:	4b59      	ldr	r3, [pc, #356]	; (8006478 <HAL_RCC_ClockConfig+0x1c4>)
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	4a58      	ldr	r2, [pc, #352]	; (8006478 <HAL_RCC_ClockConfig+0x1c4>)
 8006316:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800631a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f003 0308 	and.w	r3, r3, #8
 8006324:	2b00      	cmp	r3, #0
 8006326:	d005      	beq.n	8006334 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006328:	4b53      	ldr	r3, [pc, #332]	; (8006478 <HAL_RCC_ClockConfig+0x1c4>)
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	4a52      	ldr	r2, [pc, #328]	; (8006478 <HAL_RCC_ClockConfig+0x1c4>)
 800632e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006332:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006334:	4b50      	ldr	r3, [pc, #320]	; (8006478 <HAL_RCC_ClockConfig+0x1c4>)
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	494d      	ldr	r1, [pc, #308]	; (8006478 <HAL_RCC_ClockConfig+0x1c4>)
 8006342:	4313      	orrs	r3, r2
 8006344:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f003 0301 	and.w	r3, r3, #1
 800634e:	2b00      	cmp	r3, #0
 8006350:	d040      	beq.n	80063d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	2b01      	cmp	r3, #1
 8006358:	d107      	bne.n	800636a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800635a:	4b47      	ldr	r3, [pc, #284]	; (8006478 <HAL_RCC_ClockConfig+0x1c4>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006362:	2b00      	cmp	r3, #0
 8006364:	d115      	bne.n	8006392 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	e07f      	b.n	800646a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	2b02      	cmp	r3, #2
 8006370:	d107      	bne.n	8006382 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006372:	4b41      	ldr	r3, [pc, #260]	; (8006478 <HAL_RCC_ClockConfig+0x1c4>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800637a:	2b00      	cmp	r3, #0
 800637c:	d109      	bne.n	8006392 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	e073      	b.n	800646a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006382:	4b3d      	ldr	r3, [pc, #244]	; (8006478 <HAL_RCC_ClockConfig+0x1c4>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f003 0302 	and.w	r3, r3, #2
 800638a:	2b00      	cmp	r3, #0
 800638c:	d101      	bne.n	8006392 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	e06b      	b.n	800646a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006392:	4b39      	ldr	r3, [pc, #228]	; (8006478 <HAL_RCC_ClockConfig+0x1c4>)
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	f023 0203 	bic.w	r2, r3, #3
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	4936      	ldr	r1, [pc, #216]	; (8006478 <HAL_RCC_ClockConfig+0x1c4>)
 80063a0:	4313      	orrs	r3, r2
 80063a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80063a4:	f7fb ffb0 	bl	8002308 <HAL_GetTick>
 80063a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063aa:	e00a      	b.n	80063c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063ac:	f7fb ffac 	bl	8002308 <HAL_GetTick>
 80063b0:	4602      	mov	r2, r0
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	1ad3      	subs	r3, r2, r3
 80063b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d901      	bls.n	80063c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80063be:	2303      	movs	r3, #3
 80063c0:	e053      	b.n	800646a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063c2:	4b2d      	ldr	r3, [pc, #180]	; (8006478 <HAL_RCC_ClockConfig+0x1c4>)
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	f003 020c 	and.w	r2, r3, #12
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	009b      	lsls	r3, r3, #2
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d1eb      	bne.n	80063ac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80063d4:	4b27      	ldr	r3, [pc, #156]	; (8006474 <HAL_RCC_ClockConfig+0x1c0>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f003 0307 	and.w	r3, r3, #7
 80063dc:	683a      	ldr	r2, [r7, #0]
 80063de:	429a      	cmp	r2, r3
 80063e0:	d210      	bcs.n	8006404 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063e2:	4b24      	ldr	r3, [pc, #144]	; (8006474 <HAL_RCC_ClockConfig+0x1c0>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f023 0207 	bic.w	r2, r3, #7
 80063ea:	4922      	ldr	r1, [pc, #136]	; (8006474 <HAL_RCC_ClockConfig+0x1c0>)
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	4313      	orrs	r3, r2
 80063f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063f2:	4b20      	ldr	r3, [pc, #128]	; (8006474 <HAL_RCC_ClockConfig+0x1c0>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f003 0307 	and.w	r3, r3, #7
 80063fa:	683a      	ldr	r2, [r7, #0]
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d001      	beq.n	8006404 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	e032      	b.n	800646a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f003 0304 	and.w	r3, r3, #4
 800640c:	2b00      	cmp	r3, #0
 800640e:	d008      	beq.n	8006422 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006410:	4b19      	ldr	r3, [pc, #100]	; (8006478 <HAL_RCC_ClockConfig+0x1c4>)
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	4916      	ldr	r1, [pc, #88]	; (8006478 <HAL_RCC_ClockConfig+0x1c4>)
 800641e:	4313      	orrs	r3, r2
 8006420:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f003 0308 	and.w	r3, r3, #8
 800642a:	2b00      	cmp	r3, #0
 800642c:	d009      	beq.n	8006442 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800642e:	4b12      	ldr	r3, [pc, #72]	; (8006478 <HAL_RCC_ClockConfig+0x1c4>)
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	691b      	ldr	r3, [r3, #16]
 800643a:	00db      	lsls	r3, r3, #3
 800643c:	490e      	ldr	r1, [pc, #56]	; (8006478 <HAL_RCC_ClockConfig+0x1c4>)
 800643e:	4313      	orrs	r3, r2
 8006440:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006442:	f000 f821 	bl	8006488 <HAL_RCC_GetSysClockFreq>
 8006446:	4602      	mov	r2, r0
 8006448:	4b0b      	ldr	r3, [pc, #44]	; (8006478 <HAL_RCC_ClockConfig+0x1c4>)
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	091b      	lsrs	r3, r3, #4
 800644e:	f003 030f 	and.w	r3, r3, #15
 8006452:	490a      	ldr	r1, [pc, #40]	; (800647c <HAL_RCC_ClockConfig+0x1c8>)
 8006454:	5ccb      	ldrb	r3, [r1, r3]
 8006456:	fa22 f303 	lsr.w	r3, r2, r3
 800645a:	4a09      	ldr	r2, [pc, #36]	; (8006480 <HAL_RCC_ClockConfig+0x1cc>)
 800645c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800645e:	4b09      	ldr	r3, [pc, #36]	; (8006484 <HAL_RCC_ClockConfig+0x1d0>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4618      	mov	r0, r3
 8006464:	f7fb ff0e 	bl	8002284 <HAL_InitTick>

  return HAL_OK;
 8006468:	2300      	movs	r3, #0
}
 800646a:	4618      	mov	r0, r3
 800646c:	3710      	adds	r7, #16
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}
 8006472:	bf00      	nop
 8006474:	40022000 	.word	0x40022000
 8006478:	40021000 	.word	0x40021000
 800647c:	0800f0fc 	.word	0x0800f0fc
 8006480:	20000094 	.word	0x20000094
 8006484:	20000098 	.word	0x20000098

08006488 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006488:	b490      	push	{r4, r7}
 800648a:	b08a      	sub	sp, #40	; 0x28
 800648c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800648e:	4b2a      	ldr	r3, [pc, #168]	; (8006538 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006490:	1d3c      	adds	r4, r7, #4
 8006492:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006494:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006498:	f240 2301 	movw	r3, #513	; 0x201
 800649c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800649e:	2300      	movs	r3, #0
 80064a0:	61fb      	str	r3, [r7, #28]
 80064a2:	2300      	movs	r3, #0
 80064a4:	61bb      	str	r3, [r7, #24]
 80064a6:	2300      	movs	r3, #0
 80064a8:	627b      	str	r3, [r7, #36]	; 0x24
 80064aa:	2300      	movs	r3, #0
 80064ac:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80064ae:	2300      	movs	r3, #0
 80064b0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80064b2:	4b22      	ldr	r3, [pc, #136]	; (800653c <HAL_RCC_GetSysClockFreq+0xb4>)
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80064b8:	69fb      	ldr	r3, [r7, #28]
 80064ba:	f003 030c 	and.w	r3, r3, #12
 80064be:	2b04      	cmp	r3, #4
 80064c0:	d002      	beq.n	80064c8 <HAL_RCC_GetSysClockFreq+0x40>
 80064c2:	2b08      	cmp	r3, #8
 80064c4:	d003      	beq.n	80064ce <HAL_RCC_GetSysClockFreq+0x46>
 80064c6:	e02d      	b.n	8006524 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80064c8:	4b1d      	ldr	r3, [pc, #116]	; (8006540 <HAL_RCC_GetSysClockFreq+0xb8>)
 80064ca:	623b      	str	r3, [r7, #32]
      break;
 80064cc:	e02d      	b.n	800652a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80064ce:	69fb      	ldr	r3, [r7, #28]
 80064d0:	0c9b      	lsrs	r3, r3, #18
 80064d2:	f003 030f 	and.w	r3, r3, #15
 80064d6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80064da:	4413      	add	r3, r2
 80064dc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80064e0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80064e2:	69fb      	ldr	r3, [r7, #28]
 80064e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d013      	beq.n	8006514 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80064ec:	4b13      	ldr	r3, [pc, #76]	; (800653c <HAL_RCC_GetSysClockFreq+0xb4>)
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	0c5b      	lsrs	r3, r3, #17
 80064f2:	f003 0301 	and.w	r3, r3, #1
 80064f6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80064fa:	4413      	add	r3, r2
 80064fc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006500:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	4a0e      	ldr	r2, [pc, #56]	; (8006540 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006506:	fb02 f203 	mul.w	r2, r2, r3
 800650a:	69bb      	ldr	r3, [r7, #24]
 800650c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006510:	627b      	str	r3, [r7, #36]	; 0x24
 8006512:	e004      	b.n	800651e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	4a0b      	ldr	r2, [pc, #44]	; (8006544 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006518:	fb02 f303 	mul.w	r3, r2, r3
 800651c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800651e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006520:	623b      	str	r3, [r7, #32]
      break;
 8006522:	e002      	b.n	800652a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006524:	4b06      	ldr	r3, [pc, #24]	; (8006540 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006526:	623b      	str	r3, [r7, #32]
      break;
 8006528:	bf00      	nop
    }
  }
  return sysclockfreq;
 800652a:	6a3b      	ldr	r3, [r7, #32]
}
 800652c:	4618      	mov	r0, r3
 800652e:	3728      	adds	r7, #40	; 0x28
 8006530:	46bd      	mov	sp, r7
 8006532:	bc90      	pop	{r4, r7}
 8006534:	4770      	bx	lr
 8006536:	bf00      	nop
 8006538:	0800f098 	.word	0x0800f098
 800653c:	40021000 	.word	0x40021000
 8006540:	007a1200 	.word	0x007a1200
 8006544:	003d0900 	.word	0x003d0900

08006548 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006548:	b480      	push	{r7}
 800654a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800654c:	4b02      	ldr	r3, [pc, #8]	; (8006558 <HAL_RCC_GetHCLKFreq+0x10>)
 800654e:	681b      	ldr	r3, [r3, #0]
}
 8006550:	4618      	mov	r0, r3
 8006552:	46bd      	mov	sp, r7
 8006554:	bc80      	pop	{r7}
 8006556:	4770      	bx	lr
 8006558:	20000094 	.word	0x20000094

0800655c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006560:	f7ff fff2 	bl	8006548 <HAL_RCC_GetHCLKFreq>
 8006564:	4602      	mov	r2, r0
 8006566:	4b05      	ldr	r3, [pc, #20]	; (800657c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	0a1b      	lsrs	r3, r3, #8
 800656c:	f003 0307 	and.w	r3, r3, #7
 8006570:	4903      	ldr	r1, [pc, #12]	; (8006580 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006572:	5ccb      	ldrb	r3, [r1, r3]
 8006574:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006578:	4618      	mov	r0, r3
 800657a:	bd80      	pop	{r7, pc}
 800657c:	40021000 	.word	0x40021000
 8006580:	0800f10c 	.word	0x0800f10c

08006584 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006588:	f7ff ffde 	bl	8006548 <HAL_RCC_GetHCLKFreq>
 800658c:	4602      	mov	r2, r0
 800658e:	4b05      	ldr	r3, [pc, #20]	; (80065a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	0adb      	lsrs	r3, r3, #11
 8006594:	f003 0307 	and.w	r3, r3, #7
 8006598:	4903      	ldr	r1, [pc, #12]	; (80065a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800659a:	5ccb      	ldrb	r3, [r1, r3]
 800659c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	bd80      	pop	{r7, pc}
 80065a4:	40021000 	.word	0x40021000
 80065a8:	0800f10c 	.word	0x0800f10c

080065ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b085      	sub	sp, #20
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80065b4:	4b0a      	ldr	r3, [pc, #40]	; (80065e0 <RCC_Delay+0x34>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a0a      	ldr	r2, [pc, #40]	; (80065e4 <RCC_Delay+0x38>)
 80065ba:	fba2 2303 	umull	r2, r3, r2, r3
 80065be:	0a5b      	lsrs	r3, r3, #9
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	fb02 f303 	mul.w	r3, r2, r3
 80065c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80065c8:	bf00      	nop
  }
  while (Delay --);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	1e5a      	subs	r2, r3, #1
 80065ce:	60fa      	str	r2, [r7, #12]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d1f9      	bne.n	80065c8 <RCC_Delay+0x1c>
}
 80065d4:	bf00      	nop
 80065d6:	bf00      	nop
 80065d8:	3714      	adds	r7, #20
 80065da:	46bd      	mov	sp, r7
 80065dc:	bc80      	pop	{r7}
 80065de:	4770      	bx	lr
 80065e0:	20000094 	.word	0x20000094
 80065e4:	10624dd3 	.word	0x10624dd3

080065e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b086      	sub	sp, #24
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80065f0:	2300      	movs	r3, #0
 80065f2:	613b      	str	r3, [r7, #16]
 80065f4:	2300      	movs	r3, #0
 80065f6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 0301 	and.w	r3, r3, #1
 8006600:	2b00      	cmp	r3, #0
 8006602:	d07d      	beq.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006604:	2300      	movs	r3, #0
 8006606:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006608:	4b4f      	ldr	r3, [pc, #316]	; (8006748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800660a:	69db      	ldr	r3, [r3, #28]
 800660c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006610:	2b00      	cmp	r3, #0
 8006612:	d10d      	bne.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006614:	4b4c      	ldr	r3, [pc, #304]	; (8006748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006616:	69db      	ldr	r3, [r3, #28]
 8006618:	4a4b      	ldr	r2, [pc, #300]	; (8006748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800661a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800661e:	61d3      	str	r3, [r2, #28]
 8006620:	4b49      	ldr	r3, [pc, #292]	; (8006748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006622:	69db      	ldr	r3, [r3, #28]
 8006624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006628:	60bb      	str	r3, [r7, #8]
 800662a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800662c:	2301      	movs	r3, #1
 800662e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006630:	4b46      	ldr	r3, [pc, #280]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006638:	2b00      	cmp	r3, #0
 800663a:	d118      	bne.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800663c:	4b43      	ldr	r3, [pc, #268]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a42      	ldr	r2, [pc, #264]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006642:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006646:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006648:	f7fb fe5e 	bl	8002308 <HAL_GetTick>
 800664c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800664e:	e008      	b.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006650:	f7fb fe5a 	bl	8002308 <HAL_GetTick>
 8006654:	4602      	mov	r2, r0
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	1ad3      	subs	r3, r2, r3
 800665a:	2b64      	cmp	r3, #100	; 0x64
 800665c:	d901      	bls.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800665e:	2303      	movs	r3, #3
 8006660:	e06d      	b.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006662:	4b3a      	ldr	r3, [pc, #232]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800666a:	2b00      	cmp	r3, #0
 800666c:	d0f0      	beq.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800666e:	4b36      	ldr	r3, [pc, #216]	; (8006748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006670:	6a1b      	ldr	r3, [r3, #32]
 8006672:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006676:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d02e      	beq.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006686:	68fa      	ldr	r2, [r7, #12]
 8006688:	429a      	cmp	r2, r3
 800668a:	d027      	beq.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800668c:	4b2e      	ldr	r3, [pc, #184]	; (8006748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800668e:	6a1b      	ldr	r3, [r3, #32]
 8006690:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006694:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006696:	4b2e      	ldr	r3, [pc, #184]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006698:	2201      	movs	r2, #1
 800669a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800669c:	4b2c      	ldr	r3, [pc, #176]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800669e:	2200      	movs	r2, #0
 80066a0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80066a2:	4a29      	ldr	r2, [pc, #164]	; (8006748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f003 0301 	and.w	r3, r3, #1
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d014      	beq.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066b2:	f7fb fe29 	bl	8002308 <HAL_GetTick>
 80066b6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066b8:	e00a      	b.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066ba:	f7fb fe25 	bl	8002308 <HAL_GetTick>
 80066be:	4602      	mov	r2, r0
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	1ad3      	subs	r3, r2, r3
 80066c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d901      	bls.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80066cc:	2303      	movs	r3, #3
 80066ce:	e036      	b.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066d0:	4b1d      	ldr	r3, [pc, #116]	; (8006748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066d2:	6a1b      	ldr	r3, [r3, #32]
 80066d4:	f003 0302 	and.w	r3, r3, #2
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d0ee      	beq.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80066dc:	4b1a      	ldr	r3, [pc, #104]	; (8006748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066de:	6a1b      	ldr	r3, [r3, #32]
 80066e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	4917      	ldr	r1, [pc, #92]	; (8006748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066ea:	4313      	orrs	r3, r2
 80066ec:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80066ee:	7dfb      	ldrb	r3, [r7, #23]
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d105      	bne.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066f4:	4b14      	ldr	r3, [pc, #80]	; (8006748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066f6:	69db      	ldr	r3, [r3, #28]
 80066f8:	4a13      	ldr	r2, [pc, #76]	; (8006748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066fe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f003 0302 	and.w	r3, r3, #2
 8006708:	2b00      	cmp	r3, #0
 800670a:	d008      	beq.n	800671e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800670c:	4b0e      	ldr	r3, [pc, #56]	; (8006748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	689b      	ldr	r3, [r3, #8]
 8006718:	490b      	ldr	r1, [pc, #44]	; (8006748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800671a:	4313      	orrs	r3, r2
 800671c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f003 0310 	and.w	r3, r3, #16
 8006726:	2b00      	cmp	r3, #0
 8006728:	d008      	beq.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800672a:	4b07      	ldr	r3, [pc, #28]	; (8006748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	68db      	ldr	r3, [r3, #12]
 8006736:	4904      	ldr	r1, [pc, #16]	; (8006748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006738:	4313      	orrs	r3, r2
 800673a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800673c:	2300      	movs	r3, #0
}
 800673e:	4618      	mov	r0, r3
 8006740:	3718      	adds	r7, #24
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}
 8006746:	bf00      	nop
 8006748:	40021000 	.word	0x40021000
 800674c:	40007000 	.word	0x40007000
 8006750:	42420440 	.word	0x42420440

08006754 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006754:	b590      	push	{r4, r7, lr}
 8006756:	b08d      	sub	sp, #52	; 0x34
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800675c:	4b5a      	ldr	r3, [pc, #360]	; (80068c8 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 800675e:	f107 040c 	add.w	r4, r7, #12
 8006762:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006764:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006768:	f240 2301 	movw	r3, #513	; 0x201
 800676c:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800676e:	2300      	movs	r3, #0
 8006770:	627b      	str	r3, [r7, #36]	; 0x24
 8006772:	2300      	movs	r3, #0
 8006774:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006776:	2300      	movs	r3, #0
 8006778:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800677a:	2300      	movs	r3, #0
 800677c:	61fb      	str	r3, [r7, #28]
 800677e:	2300      	movs	r3, #0
 8006780:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2b10      	cmp	r3, #16
 8006786:	d00a      	beq.n	800679e <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2b10      	cmp	r3, #16
 800678c:	f200 8091 	bhi.w	80068b2 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2b01      	cmp	r3, #1
 8006794:	d04c      	beq.n	8006830 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2b02      	cmp	r3, #2
 800679a:	d07c      	beq.n	8006896 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800679c:	e089      	b.n	80068b2 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 800679e:	4b4b      	ldr	r3, [pc, #300]	; (80068cc <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80067a4:	4b49      	ldr	r3, [pc, #292]	; (80068cc <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	f000 8082 	beq.w	80068b6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80067b2:	69fb      	ldr	r3, [r7, #28]
 80067b4:	0c9b      	lsrs	r3, r3, #18
 80067b6:	f003 030f 	and.w	r3, r3, #15
 80067ba:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80067be:	4413      	add	r3, r2
 80067c0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80067c4:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80067c6:	69fb      	ldr	r3, [r7, #28]
 80067c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d018      	beq.n	8006802 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80067d0:	4b3e      	ldr	r3, [pc, #248]	; (80068cc <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	0c5b      	lsrs	r3, r3, #17
 80067d6:	f003 0301 	and.w	r3, r3, #1
 80067da:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80067de:	4413      	add	r3, r2
 80067e0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80067e4:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80067e6:	69fb      	ldr	r3, [r7, #28]
 80067e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d00d      	beq.n	800680c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80067f0:	4a37      	ldr	r2, [pc, #220]	; (80068d0 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 80067f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80067f8:	6a3b      	ldr	r3, [r7, #32]
 80067fa:	fb02 f303 	mul.w	r3, r2, r3
 80067fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006800:	e004      	b.n	800680c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006802:	6a3b      	ldr	r3, [r7, #32]
 8006804:	4a33      	ldr	r2, [pc, #204]	; (80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8006806:	fb02 f303 	mul.w	r3, r2, r3
 800680a:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800680c:	4b2f      	ldr	r3, [pc, #188]	; (80068cc <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006814:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006818:	d102      	bne.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 800681a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800681c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800681e:	e04a      	b.n	80068b6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8006820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006822:	005b      	lsls	r3, r3, #1
 8006824:	4a2c      	ldr	r2, [pc, #176]	; (80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8006826:	fba2 2303 	umull	r2, r3, r2, r3
 800682a:	085b      	lsrs	r3, r3, #1
 800682c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800682e:	e042      	b.n	80068b6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8006830:	4b26      	ldr	r3, [pc, #152]	; (80068cc <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006832:	6a1b      	ldr	r3, [r3, #32]
 8006834:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8006836:	69fb      	ldr	r3, [r7, #28]
 8006838:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800683c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006840:	d108      	bne.n	8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8006842:	69fb      	ldr	r3, [r7, #28]
 8006844:	f003 0302 	and.w	r3, r3, #2
 8006848:	2b00      	cmp	r3, #0
 800684a:	d003      	beq.n	8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 800684c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006850:	62bb      	str	r3, [r7, #40]	; 0x28
 8006852:	e01f      	b.n	8006894 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8006854:	69fb      	ldr	r3, [r7, #28]
 8006856:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800685a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800685e:	d109      	bne.n	8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8006860:	4b1a      	ldr	r3, [pc, #104]	; (80068cc <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006864:	f003 0302 	and.w	r3, r3, #2
 8006868:	2b00      	cmp	r3, #0
 800686a:	d003      	beq.n	8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 800686c:	f649 4340 	movw	r3, #40000	; 0x9c40
 8006870:	62bb      	str	r3, [r7, #40]	; 0x28
 8006872:	e00f      	b.n	8006894 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8006874:	69fb      	ldr	r3, [r7, #28]
 8006876:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800687a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800687e:	d11c      	bne.n	80068ba <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8006880:	4b12      	ldr	r3, [pc, #72]	; (80068cc <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006888:	2b00      	cmp	r3, #0
 800688a:	d016      	beq.n	80068ba <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 800688c:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006890:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006892:	e012      	b.n	80068ba <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8006894:	e011      	b.n	80068ba <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8006896:	f7ff fe75 	bl	8006584 <HAL_RCC_GetPCLK2Freq>
 800689a:	4602      	mov	r2, r0
 800689c:	4b0b      	ldr	r3, [pc, #44]	; (80068cc <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	0b9b      	lsrs	r3, r3, #14
 80068a2:	f003 0303 	and.w	r3, r3, #3
 80068a6:	3301      	adds	r3, #1
 80068a8:	005b      	lsls	r3, r3, #1
 80068aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80068ae:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80068b0:	e004      	b.n	80068bc <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80068b2:	bf00      	nop
 80068b4:	e002      	b.n	80068bc <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80068b6:	bf00      	nop
 80068b8:	e000      	b.n	80068bc <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80068ba:	bf00      	nop
    }
  }
  return (frequency);
 80068bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3734      	adds	r7, #52	; 0x34
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd90      	pop	{r4, r7, pc}
 80068c6:	bf00      	nop
 80068c8:	0800f0a8 	.word	0x0800f0a8
 80068cc:	40021000 	.word	0x40021000
 80068d0:	007a1200 	.word	0x007a1200
 80068d4:	003d0900 	.word	0x003d0900
 80068d8:	aaaaaaab 	.word	0xaaaaaaab

080068dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b082      	sub	sp, #8
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d101      	bne.n	80068ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	e041      	b.n	8006972 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d106      	bne.n	8006908 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2200      	movs	r2, #0
 80068fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f7fb faa8 	bl	8001e58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2202      	movs	r2, #2
 800690c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681a      	ldr	r2, [r3, #0]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	3304      	adds	r3, #4
 8006918:	4619      	mov	r1, r3
 800691a:	4610      	mov	r0, r2
 800691c:	f000 fa9e 	bl	8006e5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2201      	movs	r2, #1
 8006924:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2201      	movs	r2, #1
 800692c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2201      	movs	r2, #1
 8006934:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2201      	movs	r2, #1
 800693c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2201      	movs	r2, #1
 8006944:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2201      	movs	r2, #1
 800694c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2201      	movs	r2, #1
 8006954:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2201      	movs	r2, #1
 800695c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2201      	movs	r2, #1
 8006964:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2201      	movs	r2, #1
 800696c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006970:	2300      	movs	r3, #0
}
 8006972:	4618      	mov	r0, r3
 8006974:	3708      	adds	r7, #8
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}
	...

0800697c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800697c:	b480      	push	{r7}
 800697e:	b085      	sub	sp, #20
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800698a:	b2db      	uxtb	r3, r3
 800698c:	2b01      	cmp	r3, #1
 800698e:	d001      	beq.n	8006994 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006990:	2301      	movs	r3, #1
 8006992:	e03a      	b.n	8006a0a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2202      	movs	r2, #2
 8006998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	68da      	ldr	r2, [r3, #12]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f042 0201 	orr.w	r2, r2, #1
 80069aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a18      	ldr	r2, [pc, #96]	; (8006a14 <HAL_TIM_Base_Start_IT+0x98>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d00e      	beq.n	80069d4 <HAL_TIM_Base_Start_IT+0x58>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069be:	d009      	beq.n	80069d4 <HAL_TIM_Base_Start_IT+0x58>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a14      	ldr	r2, [pc, #80]	; (8006a18 <HAL_TIM_Base_Start_IT+0x9c>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d004      	beq.n	80069d4 <HAL_TIM_Base_Start_IT+0x58>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a13      	ldr	r2, [pc, #76]	; (8006a1c <HAL_TIM_Base_Start_IT+0xa0>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d111      	bne.n	80069f8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	f003 0307 	and.w	r3, r3, #7
 80069de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2b06      	cmp	r3, #6
 80069e4:	d010      	beq.n	8006a08 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f042 0201 	orr.w	r2, r2, #1
 80069f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069f6:	e007      	b.n	8006a08 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f042 0201 	orr.w	r2, r2, #1
 8006a06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a08:	2300      	movs	r3, #0
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3714      	adds	r7, #20
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bc80      	pop	{r7}
 8006a12:	4770      	bx	lr
 8006a14:	40012c00 	.word	0x40012c00
 8006a18:	40000400 	.word	0x40000400
 8006a1c:	40000800 	.word	0x40000800

08006a20 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b083      	sub	sp, #12
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	68da      	ldr	r2, [r3, #12]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f022 0201 	bic.w	r2, r2, #1
 8006a36:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	6a1a      	ldr	r2, [r3, #32]
 8006a3e:	f241 1311 	movw	r3, #4369	; 0x1111
 8006a42:	4013      	ands	r3, r2
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d10f      	bne.n	8006a68 <HAL_TIM_Base_Stop_IT+0x48>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	6a1a      	ldr	r2, [r3, #32]
 8006a4e:	f240 4344 	movw	r3, #1092	; 0x444
 8006a52:	4013      	ands	r3, r2
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d107      	bne.n	8006a68 <HAL_TIM_Base_Stop_IT+0x48>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f022 0201 	bic.w	r2, r2, #1
 8006a66:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006a70:	2300      	movs	r3, #0
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	370c      	adds	r7, #12
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bc80      	pop	{r7}
 8006a7a:	4770      	bx	lr

08006a7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b082      	sub	sp, #8
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	691b      	ldr	r3, [r3, #16]
 8006a8a:	f003 0302 	and.w	r3, r3, #2
 8006a8e:	2b02      	cmp	r3, #2
 8006a90:	d122      	bne.n	8006ad8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	68db      	ldr	r3, [r3, #12]
 8006a98:	f003 0302 	and.w	r3, r3, #2
 8006a9c:	2b02      	cmp	r3, #2
 8006a9e:	d11b      	bne.n	8006ad8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f06f 0202 	mvn.w	r2, #2
 8006aa8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2201      	movs	r2, #1
 8006aae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	699b      	ldr	r3, [r3, #24]
 8006ab6:	f003 0303 	and.w	r3, r3, #3
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d003      	beq.n	8006ac6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 f9b1 	bl	8006e26 <HAL_TIM_IC_CaptureCallback>
 8006ac4:	e005      	b.n	8006ad2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 f9a4 	bl	8006e14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f000 f9b3 	bl	8006e38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	691b      	ldr	r3, [r3, #16]
 8006ade:	f003 0304 	and.w	r3, r3, #4
 8006ae2:	2b04      	cmp	r3, #4
 8006ae4:	d122      	bne.n	8006b2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	68db      	ldr	r3, [r3, #12]
 8006aec:	f003 0304 	and.w	r3, r3, #4
 8006af0:	2b04      	cmp	r3, #4
 8006af2:	d11b      	bne.n	8006b2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f06f 0204 	mvn.w	r2, #4
 8006afc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2202      	movs	r2, #2
 8006b02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	699b      	ldr	r3, [r3, #24]
 8006b0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d003      	beq.n	8006b1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f000 f987 	bl	8006e26 <HAL_TIM_IC_CaptureCallback>
 8006b18:	e005      	b.n	8006b26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f000 f97a 	bl	8006e14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f000 f989 	bl	8006e38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	691b      	ldr	r3, [r3, #16]
 8006b32:	f003 0308 	and.w	r3, r3, #8
 8006b36:	2b08      	cmp	r3, #8
 8006b38:	d122      	bne.n	8006b80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	68db      	ldr	r3, [r3, #12]
 8006b40:	f003 0308 	and.w	r3, r3, #8
 8006b44:	2b08      	cmp	r3, #8
 8006b46:	d11b      	bne.n	8006b80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f06f 0208 	mvn.w	r2, #8
 8006b50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2204      	movs	r2, #4
 8006b56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	69db      	ldr	r3, [r3, #28]
 8006b5e:	f003 0303 	and.w	r3, r3, #3
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d003      	beq.n	8006b6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 f95d 	bl	8006e26 <HAL_TIM_IC_CaptureCallback>
 8006b6c:	e005      	b.n	8006b7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f000 f950 	bl	8006e14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f000 f95f 	bl	8006e38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	691b      	ldr	r3, [r3, #16]
 8006b86:	f003 0310 	and.w	r3, r3, #16
 8006b8a:	2b10      	cmp	r3, #16
 8006b8c:	d122      	bne.n	8006bd4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	68db      	ldr	r3, [r3, #12]
 8006b94:	f003 0310 	and.w	r3, r3, #16
 8006b98:	2b10      	cmp	r3, #16
 8006b9a:	d11b      	bne.n	8006bd4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f06f 0210 	mvn.w	r2, #16
 8006ba4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2208      	movs	r2, #8
 8006baa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	69db      	ldr	r3, [r3, #28]
 8006bb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d003      	beq.n	8006bc2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f000 f933 	bl	8006e26 <HAL_TIM_IC_CaptureCallback>
 8006bc0:	e005      	b.n	8006bce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f000 f926 	bl	8006e14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f000 f935 	bl	8006e38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	691b      	ldr	r3, [r3, #16]
 8006bda:	f003 0301 	and.w	r3, r3, #1
 8006bde:	2b01      	cmp	r3, #1
 8006be0:	d10e      	bne.n	8006c00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	68db      	ldr	r3, [r3, #12]
 8006be8:	f003 0301 	and.w	r3, r3, #1
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	d107      	bne.n	8006c00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f06f 0201 	mvn.w	r2, #1
 8006bf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f7fa ffec 	bl	8001bd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	691b      	ldr	r3, [r3, #16]
 8006c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c0a:	2b80      	cmp	r3, #128	; 0x80
 8006c0c:	d10e      	bne.n	8006c2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	68db      	ldr	r3, [r3, #12]
 8006c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c18:	2b80      	cmp	r3, #128	; 0x80
 8006c1a:	d107      	bne.n	8006c2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006c24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f000 fa77 	bl	800711a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	691b      	ldr	r3, [r3, #16]
 8006c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c36:	2b40      	cmp	r3, #64	; 0x40
 8006c38:	d10e      	bne.n	8006c58 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	68db      	ldr	r3, [r3, #12]
 8006c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c44:	2b40      	cmp	r3, #64	; 0x40
 8006c46:	d107      	bne.n	8006c58 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006c50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f000 f8f9 	bl	8006e4a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	691b      	ldr	r3, [r3, #16]
 8006c5e:	f003 0320 	and.w	r3, r3, #32
 8006c62:	2b20      	cmp	r3, #32
 8006c64:	d10e      	bne.n	8006c84 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	68db      	ldr	r3, [r3, #12]
 8006c6c:	f003 0320 	and.w	r3, r3, #32
 8006c70:	2b20      	cmp	r3, #32
 8006c72:	d107      	bne.n	8006c84 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f06f 0220 	mvn.w	r2, #32
 8006c7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 fa42 	bl	8007108 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006c84:	bf00      	nop
 8006c86:	3708      	adds	r7, #8
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b084      	sub	sp, #16
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d101      	bne.n	8006ca4 <HAL_TIM_ConfigClockSource+0x18>
 8006ca0:	2302      	movs	r3, #2
 8006ca2:	e0b3      	b.n	8006e0c <HAL_TIM_ConfigClockSource+0x180>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2202      	movs	r2, #2
 8006cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006cc2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006cca:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	68fa      	ldr	r2, [r7, #12]
 8006cd2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cdc:	d03e      	beq.n	8006d5c <HAL_TIM_ConfigClockSource+0xd0>
 8006cde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ce2:	f200 8087 	bhi.w	8006df4 <HAL_TIM_ConfigClockSource+0x168>
 8006ce6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cea:	f000 8085 	beq.w	8006df8 <HAL_TIM_ConfigClockSource+0x16c>
 8006cee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cf2:	d87f      	bhi.n	8006df4 <HAL_TIM_ConfigClockSource+0x168>
 8006cf4:	2b70      	cmp	r3, #112	; 0x70
 8006cf6:	d01a      	beq.n	8006d2e <HAL_TIM_ConfigClockSource+0xa2>
 8006cf8:	2b70      	cmp	r3, #112	; 0x70
 8006cfa:	d87b      	bhi.n	8006df4 <HAL_TIM_ConfigClockSource+0x168>
 8006cfc:	2b60      	cmp	r3, #96	; 0x60
 8006cfe:	d050      	beq.n	8006da2 <HAL_TIM_ConfigClockSource+0x116>
 8006d00:	2b60      	cmp	r3, #96	; 0x60
 8006d02:	d877      	bhi.n	8006df4 <HAL_TIM_ConfigClockSource+0x168>
 8006d04:	2b50      	cmp	r3, #80	; 0x50
 8006d06:	d03c      	beq.n	8006d82 <HAL_TIM_ConfigClockSource+0xf6>
 8006d08:	2b50      	cmp	r3, #80	; 0x50
 8006d0a:	d873      	bhi.n	8006df4 <HAL_TIM_ConfigClockSource+0x168>
 8006d0c:	2b40      	cmp	r3, #64	; 0x40
 8006d0e:	d058      	beq.n	8006dc2 <HAL_TIM_ConfigClockSource+0x136>
 8006d10:	2b40      	cmp	r3, #64	; 0x40
 8006d12:	d86f      	bhi.n	8006df4 <HAL_TIM_ConfigClockSource+0x168>
 8006d14:	2b30      	cmp	r3, #48	; 0x30
 8006d16:	d064      	beq.n	8006de2 <HAL_TIM_ConfigClockSource+0x156>
 8006d18:	2b30      	cmp	r3, #48	; 0x30
 8006d1a:	d86b      	bhi.n	8006df4 <HAL_TIM_ConfigClockSource+0x168>
 8006d1c:	2b20      	cmp	r3, #32
 8006d1e:	d060      	beq.n	8006de2 <HAL_TIM_ConfigClockSource+0x156>
 8006d20:	2b20      	cmp	r3, #32
 8006d22:	d867      	bhi.n	8006df4 <HAL_TIM_ConfigClockSource+0x168>
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d05c      	beq.n	8006de2 <HAL_TIM_ConfigClockSource+0x156>
 8006d28:	2b10      	cmp	r3, #16
 8006d2a:	d05a      	beq.n	8006de2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006d2c:	e062      	b.n	8006df4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6818      	ldr	r0, [r3, #0]
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	6899      	ldr	r1, [r3, #8]
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	685a      	ldr	r2, [r3, #4]
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	68db      	ldr	r3, [r3, #12]
 8006d3e:	f000 f966 	bl	800700e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006d50:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	68fa      	ldr	r2, [r7, #12]
 8006d58:	609a      	str	r2, [r3, #8]
      break;
 8006d5a:	e04e      	b.n	8006dfa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6818      	ldr	r0, [r3, #0]
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	6899      	ldr	r1, [r3, #8]
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	685a      	ldr	r2, [r3, #4]
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	68db      	ldr	r3, [r3, #12]
 8006d6c:	f000 f94f 	bl	800700e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	689a      	ldr	r2, [r3, #8]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d7e:	609a      	str	r2, [r3, #8]
      break;
 8006d80:	e03b      	b.n	8006dfa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6818      	ldr	r0, [r3, #0]
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	6859      	ldr	r1, [r3, #4]
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	68db      	ldr	r3, [r3, #12]
 8006d8e:	461a      	mov	r2, r3
 8006d90:	f000 f8c6 	bl	8006f20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	2150      	movs	r1, #80	; 0x50
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f000 f91d 	bl	8006fda <TIM_ITRx_SetConfig>
      break;
 8006da0:	e02b      	b.n	8006dfa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6818      	ldr	r0, [r3, #0]
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	6859      	ldr	r1, [r3, #4]
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	68db      	ldr	r3, [r3, #12]
 8006dae:	461a      	mov	r2, r3
 8006db0:	f000 f8e4 	bl	8006f7c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	2160      	movs	r1, #96	; 0x60
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f000 f90d 	bl	8006fda <TIM_ITRx_SetConfig>
      break;
 8006dc0:	e01b      	b.n	8006dfa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6818      	ldr	r0, [r3, #0]
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	6859      	ldr	r1, [r3, #4]
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	68db      	ldr	r3, [r3, #12]
 8006dce:	461a      	mov	r2, r3
 8006dd0:	f000 f8a6 	bl	8006f20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	2140      	movs	r1, #64	; 0x40
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f000 f8fd 	bl	8006fda <TIM_ITRx_SetConfig>
      break;
 8006de0:	e00b      	b.n	8006dfa <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681a      	ldr	r2, [r3, #0]
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4619      	mov	r1, r3
 8006dec:	4610      	mov	r0, r2
 8006dee:	f000 f8f4 	bl	8006fda <TIM_ITRx_SetConfig>
        break;
 8006df2:	e002      	b.n	8006dfa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006df4:	bf00      	nop
 8006df6:	e000      	b.n	8006dfa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006df8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2200      	movs	r2, #0
 8006e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e0a:	2300      	movs	r3, #0
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3710      	adds	r7, #16
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}

08006e14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b083      	sub	sp, #12
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006e1c:	bf00      	nop
 8006e1e:	370c      	adds	r7, #12
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bc80      	pop	{r7}
 8006e24:	4770      	bx	lr

08006e26 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006e26:	b480      	push	{r7}
 8006e28:	b083      	sub	sp, #12
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006e2e:	bf00      	nop
 8006e30:	370c      	adds	r7, #12
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bc80      	pop	{r7}
 8006e36:	4770      	bx	lr

08006e38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b083      	sub	sp, #12
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e40:	bf00      	nop
 8006e42:	370c      	adds	r7, #12
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bc80      	pop	{r7}
 8006e48:	4770      	bx	lr

08006e4a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e4a:	b480      	push	{r7}
 8006e4c:	b083      	sub	sp, #12
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e52:	bf00      	nop
 8006e54:	370c      	adds	r7, #12
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bc80      	pop	{r7}
 8006e5a:	4770      	bx	lr

08006e5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b085      	sub	sp, #20
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	4a29      	ldr	r2, [pc, #164]	; (8006f14 <TIM_Base_SetConfig+0xb8>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d00b      	beq.n	8006e8c <TIM_Base_SetConfig+0x30>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e7a:	d007      	beq.n	8006e8c <TIM_Base_SetConfig+0x30>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	4a26      	ldr	r2, [pc, #152]	; (8006f18 <TIM_Base_SetConfig+0xbc>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d003      	beq.n	8006e8c <TIM_Base_SetConfig+0x30>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	4a25      	ldr	r2, [pc, #148]	; (8006f1c <TIM_Base_SetConfig+0xc0>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d108      	bne.n	8006e9e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	68fa      	ldr	r2, [r7, #12]
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	4a1c      	ldr	r2, [pc, #112]	; (8006f14 <TIM_Base_SetConfig+0xb8>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d00b      	beq.n	8006ebe <TIM_Base_SetConfig+0x62>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eac:	d007      	beq.n	8006ebe <TIM_Base_SetConfig+0x62>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	4a19      	ldr	r2, [pc, #100]	; (8006f18 <TIM_Base_SetConfig+0xbc>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d003      	beq.n	8006ebe <TIM_Base_SetConfig+0x62>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	4a18      	ldr	r2, [pc, #96]	; (8006f1c <TIM_Base_SetConfig+0xc0>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d108      	bne.n	8006ed0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ec4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	68db      	ldr	r3, [r3, #12]
 8006eca:	68fa      	ldr	r2, [r7, #12]
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	695b      	ldr	r3, [r3, #20]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	68fa      	ldr	r2, [r7, #12]
 8006ee2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	689a      	ldr	r2, [r3, #8]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	681a      	ldr	r2, [r3, #0]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	4a07      	ldr	r2, [pc, #28]	; (8006f14 <TIM_Base_SetConfig+0xb8>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d103      	bne.n	8006f04 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	691a      	ldr	r2, [r3, #16]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2201      	movs	r2, #1
 8006f08:	615a      	str	r2, [r3, #20]
}
 8006f0a:	bf00      	nop
 8006f0c:	3714      	adds	r7, #20
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bc80      	pop	{r7}
 8006f12:	4770      	bx	lr
 8006f14:	40012c00 	.word	0x40012c00
 8006f18:	40000400 	.word	0x40000400
 8006f1c:	40000800 	.word	0x40000800

08006f20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b087      	sub	sp, #28
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	60f8      	str	r0, [r7, #12]
 8006f28:	60b9      	str	r1, [r7, #8]
 8006f2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	6a1b      	ldr	r3, [r3, #32]
 8006f30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	6a1b      	ldr	r3, [r3, #32]
 8006f36:	f023 0201 	bic.w	r2, r3, #1
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	699b      	ldr	r3, [r3, #24]
 8006f42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	011b      	lsls	r3, r3, #4
 8006f50:	693a      	ldr	r2, [r7, #16]
 8006f52:	4313      	orrs	r3, r2
 8006f54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	f023 030a 	bic.w	r3, r3, #10
 8006f5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006f5e:	697a      	ldr	r2, [r7, #20]
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	4313      	orrs	r3, r2
 8006f64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	693a      	ldr	r2, [r7, #16]
 8006f6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	697a      	ldr	r2, [r7, #20]
 8006f70:	621a      	str	r2, [r3, #32]
}
 8006f72:	bf00      	nop
 8006f74:	371c      	adds	r7, #28
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bc80      	pop	{r7}
 8006f7a:	4770      	bx	lr

08006f7c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b087      	sub	sp, #28
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	60f8      	str	r0, [r7, #12]
 8006f84:	60b9      	str	r1, [r7, #8]
 8006f86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	6a1b      	ldr	r3, [r3, #32]
 8006f8c:	f023 0210 	bic.w	r2, r3, #16
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	699b      	ldr	r3, [r3, #24]
 8006f98:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	6a1b      	ldr	r3, [r3, #32]
 8006f9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006fa6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	031b      	lsls	r3, r3, #12
 8006fac:	697a      	ldr	r2, [r7, #20]
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006fb8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	011b      	lsls	r3, r3, #4
 8006fbe:	693a      	ldr	r2, [r7, #16]
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	697a      	ldr	r2, [r7, #20]
 8006fc8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	693a      	ldr	r2, [r7, #16]
 8006fce:	621a      	str	r2, [r3, #32]
}
 8006fd0:	bf00      	nop
 8006fd2:	371c      	adds	r7, #28
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bc80      	pop	{r7}
 8006fd8:	4770      	bx	lr

08006fda <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006fda:	b480      	push	{r7}
 8006fdc:	b085      	sub	sp, #20
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]
 8006fe2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ff0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ff2:	683a      	ldr	r2, [r7, #0]
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	f043 0307 	orr.w	r3, r3, #7
 8006ffc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	68fa      	ldr	r2, [r7, #12]
 8007002:	609a      	str	r2, [r3, #8]
}
 8007004:	bf00      	nop
 8007006:	3714      	adds	r7, #20
 8007008:	46bd      	mov	sp, r7
 800700a:	bc80      	pop	{r7}
 800700c:	4770      	bx	lr

0800700e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800700e:	b480      	push	{r7}
 8007010:	b087      	sub	sp, #28
 8007012:	af00      	add	r7, sp, #0
 8007014:	60f8      	str	r0, [r7, #12]
 8007016:	60b9      	str	r1, [r7, #8]
 8007018:	607a      	str	r2, [r7, #4]
 800701a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	689b      	ldr	r3, [r3, #8]
 8007020:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007028:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	021a      	lsls	r2, r3, #8
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	431a      	orrs	r2, r3
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	4313      	orrs	r3, r2
 8007036:	697a      	ldr	r2, [r7, #20]
 8007038:	4313      	orrs	r3, r2
 800703a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	697a      	ldr	r2, [r7, #20]
 8007040:	609a      	str	r2, [r3, #8]
}
 8007042:	bf00      	nop
 8007044:	371c      	adds	r7, #28
 8007046:	46bd      	mov	sp, r7
 8007048:	bc80      	pop	{r7}
 800704a:	4770      	bx	lr

0800704c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800704c:	b480      	push	{r7}
 800704e:	b085      	sub	sp, #20
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
 8007054:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800705c:	2b01      	cmp	r3, #1
 800705e:	d101      	bne.n	8007064 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007060:	2302      	movs	r3, #2
 8007062:	e046      	b.n	80070f2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2201      	movs	r2, #1
 8007068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2202      	movs	r2, #2
 8007070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800708a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	68fa      	ldr	r2, [r7, #12]
 8007092:	4313      	orrs	r3, r2
 8007094:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	68fa      	ldr	r2, [r7, #12]
 800709c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a16      	ldr	r2, [pc, #88]	; (80070fc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d00e      	beq.n	80070c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070b0:	d009      	beq.n	80070c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a12      	ldr	r2, [pc, #72]	; (8007100 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d004      	beq.n	80070c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a10      	ldr	r2, [pc, #64]	; (8007104 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d10c      	bne.n	80070e0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	68ba      	ldr	r2, [r7, #8]
 80070d4:	4313      	orrs	r3, r2
 80070d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	68ba      	ldr	r2, [r7, #8]
 80070de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2201      	movs	r2, #1
 80070e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2200      	movs	r2, #0
 80070ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80070f0:	2300      	movs	r3, #0
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3714      	adds	r7, #20
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bc80      	pop	{r7}
 80070fa:	4770      	bx	lr
 80070fc:	40012c00 	.word	0x40012c00
 8007100:	40000400 	.word	0x40000400
 8007104:	40000800 	.word	0x40000800

08007108 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007108:	b480      	push	{r7}
 800710a:	b083      	sub	sp, #12
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007110:	bf00      	nop
 8007112:	370c      	adds	r7, #12
 8007114:	46bd      	mov	sp, r7
 8007116:	bc80      	pop	{r7}
 8007118:	4770      	bx	lr

0800711a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800711a:	b480      	push	{r7}
 800711c:	b083      	sub	sp, #12
 800711e:	af00      	add	r7, sp, #0
 8007120:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007122:	bf00      	nop
 8007124:	370c      	adds	r7, #12
 8007126:	46bd      	mov	sp, r7
 8007128:	bc80      	pop	{r7}
 800712a:	4770      	bx	lr

0800712c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b082      	sub	sp, #8
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d101      	bne.n	800713e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800713a:	2301      	movs	r3, #1
 800713c:	e03f      	b.n	80071be <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007144:	b2db      	uxtb	r3, r3
 8007146:	2b00      	cmp	r3, #0
 8007148:	d106      	bne.n	8007158 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2200      	movs	r2, #0
 800714e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f7fa febe 	bl	8001ed4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2224      	movs	r2, #36	; 0x24
 800715c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	68da      	ldr	r2, [r3, #12]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800716e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f000 fc85 	bl	8007a80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	691a      	ldr	r2, [r3, #16]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007184:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	695a      	ldr	r2, [r3, #20]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007194:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	68da      	ldr	r2, [r3, #12]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80071a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2200      	movs	r2, #0
 80071aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2220      	movs	r2, #32
 80071b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2220      	movs	r2, #32
 80071b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80071bc:	2300      	movs	r3, #0
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3708      	adds	r7, #8
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}

080071c6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071c6:	b580      	push	{r7, lr}
 80071c8:	b08a      	sub	sp, #40	; 0x28
 80071ca:	af02      	add	r7, sp, #8
 80071cc:	60f8      	str	r0, [r7, #12]
 80071ce:	60b9      	str	r1, [r7, #8]
 80071d0:	603b      	str	r3, [r7, #0]
 80071d2:	4613      	mov	r3, r2
 80071d4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80071d6:	2300      	movs	r3, #0
 80071d8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071e0:	b2db      	uxtb	r3, r3
 80071e2:	2b20      	cmp	r3, #32
 80071e4:	d17c      	bne.n	80072e0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d002      	beq.n	80071f2 <HAL_UART_Transmit+0x2c>
 80071ec:	88fb      	ldrh	r3, [r7, #6]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d101      	bne.n	80071f6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80071f2:	2301      	movs	r3, #1
 80071f4:	e075      	b.n	80072e2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d101      	bne.n	8007204 <HAL_UART_Transmit+0x3e>
 8007200:	2302      	movs	r3, #2
 8007202:	e06e      	b.n	80072e2 <HAL_UART_Transmit+0x11c>
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	2201      	movs	r2, #1
 8007208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2200      	movs	r2, #0
 8007210:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2221      	movs	r2, #33	; 0x21
 8007216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800721a:	f7fb f875 	bl	8002308 <HAL_GetTick>
 800721e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	88fa      	ldrh	r2, [r7, #6]
 8007224:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	88fa      	ldrh	r2, [r7, #6]
 800722a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007234:	d108      	bne.n	8007248 <HAL_UART_Transmit+0x82>
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	691b      	ldr	r3, [r3, #16]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d104      	bne.n	8007248 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800723e:	2300      	movs	r3, #0
 8007240:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	61bb      	str	r3, [r7, #24]
 8007246:	e003      	b.n	8007250 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800724c:	2300      	movs	r3, #0
 800724e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2200      	movs	r2, #0
 8007254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007258:	e02a      	b.n	80072b0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	9300      	str	r3, [sp, #0]
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	2200      	movs	r2, #0
 8007262:	2180      	movs	r1, #128	; 0x80
 8007264:	68f8      	ldr	r0, [r7, #12]
 8007266:	f000 fa38 	bl	80076da <UART_WaitOnFlagUntilTimeout>
 800726a:	4603      	mov	r3, r0
 800726c:	2b00      	cmp	r3, #0
 800726e:	d001      	beq.n	8007274 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007270:	2303      	movs	r3, #3
 8007272:	e036      	b.n	80072e2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007274:	69fb      	ldr	r3, [r7, #28]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d10b      	bne.n	8007292 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800727a:	69bb      	ldr	r3, [r7, #24]
 800727c:	881b      	ldrh	r3, [r3, #0]
 800727e:	461a      	mov	r2, r3
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007288:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800728a:	69bb      	ldr	r3, [r7, #24]
 800728c:	3302      	adds	r3, #2
 800728e:	61bb      	str	r3, [r7, #24]
 8007290:	e007      	b.n	80072a2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007292:	69fb      	ldr	r3, [r7, #28]
 8007294:	781a      	ldrb	r2, [r3, #0]
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800729c:	69fb      	ldr	r3, [r7, #28]
 800729e:	3301      	adds	r3, #1
 80072a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	3b01      	subs	r3, #1
 80072aa:	b29a      	uxth	r2, r3
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d1cf      	bne.n	800725a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	9300      	str	r3, [sp, #0]
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	2200      	movs	r2, #0
 80072c2:	2140      	movs	r1, #64	; 0x40
 80072c4:	68f8      	ldr	r0, [r7, #12]
 80072c6:	f000 fa08 	bl	80076da <UART_WaitOnFlagUntilTimeout>
 80072ca:	4603      	mov	r3, r0
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d001      	beq.n	80072d4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80072d0:	2303      	movs	r3, #3
 80072d2:	e006      	b.n	80072e2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2220      	movs	r2, #32
 80072d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80072dc:	2300      	movs	r3, #0
 80072de:	e000      	b.n	80072e2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80072e0:	2302      	movs	r3, #2
  }
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3720      	adds	r7, #32
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}

080072ea <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80072ea:	b580      	push	{r7, lr}
 80072ec:	b084      	sub	sp, #16
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	60f8      	str	r0, [r7, #12]
 80072f2:	60b9      	str	r1, [r7, #8]
 80072f4:	4613      	mov	r3, r2
 80072f6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80072fe:	b2db      	uxtb	r3, r3
 8007300:	2b20      	cmp	r3, #32
 8007302:	d11d      	bne.n	8007340 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d002      	beq.n	8007310 <HAL_UART_Receive_IT+0x26>
 800730a:	88fb      	ldrh	r3, [r7, #6]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d101      	bne.n	8007314 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007310:	2301      	movs	r3, #1
 8007312:	e016      	b.n	8007342 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800731a:	2b01      	cmp	r3, #1
 800731c:	d101      	bne.n	8007322 <HAL_UART_Receive_IT+0x38>
 800731e:	2302      	movs	r3, #2
 8007320:	e00f      	b.n	8007342 <HAL_UART_Receive_IT+0x58>
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2201      	movs	r2, #1
 8007326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2200      	movs	r2, #0
 800732e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8007330:	88fb      	ldrh	r3, [r7, #6]
 8007332:	461a      	mov	r2, r3
 8007334:	68b9      	ldr	r1, [r7, #8]
 8007336:	68f8      	ldr	r0, [r7, #12]
 8007338:	f000 fa19 	bl	800776e <UART_Start_Receive_IT>
 800733c:	4603      	mov	r3, r0
 800733e:	e000      	b.n	8007342 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007340:	2302      	movs	r3, #2
  }
}
 8007342:	4618      	mov	r0, r3
 8007344:	3710      	adds	r7, #16
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}
	...

0800734c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b08a      	sub	sp, #40	; 0x28
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	68db      	ldr	r3, [r3, #12]
 8007362:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	695b      	ldr	r3, [r3, #20]
 800736a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800736c:	2300      	movs	r3, #0
 800736e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8007370:	2300      	movs	r3, #0
 8007372:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007376:	f003 030f 	and.w	r3, r3, #15
 800737a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800737c:	69bb      	ldr	r3, [r7, #24]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d10d      	bne.n	800739e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007384:	f003 0320 	and.w	r3, r3, #32
 8007388:	2b00      	cmp	r3, #0
 800738a:	d008      	beq.n	800739e <HAL_UART_IRQHandler+0x52>
 800738c:	6a3b      	ldr	r3, [r7, #32]
 800738e:	f003 0320 	and.w	r3, r3, #32
 8007392:	2b00      	cmp	r3, #0
 8007394:	d003      	beq.n	800739e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f000 fac9 	bl	800792e <UART_Receive_IT>
      return;
 800739c:	e17b      	b.n	8007696 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800739e:	69bb      	ldr	r3, [r7, #24]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	f000 80b1 	beq.w	8007508 <HAL_UART_IRQHandler+0x1bc>
 80073a6:	69fb      	ldr	r3, [r7, #28]
 80073a8:	f003 0301 	and.w	r3, r3, #1
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d105      	bne.n	80073bc <HAL_UART_IRQHandler+0x70>
 80073b0:	6a3b      	ldr	r3, [r7, #32]
 80073b2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	f000 80a6 	beq.w	8007508 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80073bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073be:	f003 0301 	and.w	r3, r3, #1
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d00a      	beq.n	80073dc <HAL_UART_IRQHandler+0x90>
 80073c6:	6a3b      	ldr	r3, [r7, #32]
 80073c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d005      	beq.n	80073dc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073d4:	f043 0201 	orr.w	r2, r3, #1
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80073dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073de:	f003 0304 	and.w	r3, r3, #4
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d00a      	beq.n	80073fc <HAL_UART_IRQHandler+0xb0>
 80073e6:	69fb      	ldr	r3, [r7, #28]
 80073e8:	f003 0301 	and.w	r3, r3, #1
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d005      	beq.n	80073fc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f4:	f043 0202 	orr.w	r2, r3, #2
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80073fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fe:	f003 0302 	and.w	r3, r3, #2
 8007402:	2b00      	cmp	r3, #0
 8007404:	d00a      	beq.n	800741c <HAL_UART_IRQHandler+0xd0>
 8007406:	69fb      	ldr	r3, [r7, #28]
 8007408:	f003 0301 	and.w	r3, r3, #1
 800740c:	2b00      	cmp	r3, #0
 800740e:	d005      	beq.n	800741c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007414:	f043 0204 	orr.w	r2, r3, #4
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800741c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741e:	f003 0308 	and.w	r3, r3, #8
 8007422:	2b00      	cmp	r3, #0
 8007424:	d00f      	beq.n	8007446 <HAL_UART_IRQHandler+0xfa>
 8007426:	6a3b      	ldr	r3, [r7, #32]
 8007428:	f003 0320 	and.w	r3, r3, #32
 800742c:	2b00      	cmp	r3, #0
 800742e:	d104      	bne.n	800743a <HAL_UART_IRQHandler+0xee>
 8007430:	69fb      	ldr	r3, [r7, #28]
 8007432:	f003 0301 	and.w	r3, r3, #1
 8007436:	2b00      	cmp	r3, #0
 8007438:	d005      	beq.n	8007446 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800743e:	f043 0208 	orr.w	r2, r3, #8
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800744a:	2b00      	cmp	r3, #0
 800744c:	f000 811e 	beq.w	800768c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007452:	f003 0320 	and.w	r3, r3, #32
 8007456:	2b00      	cmp	r3, #0
 8007458:	d007      	beq.n	800746a <HAL_UART_IRQHandler+0x11e>
 800745a:	6a3b      	ldr	r3, [r7, #32]
 800745c:	f003 0320 	and.w	r3, r3, #32
 8007460:	2b00      	cmp	r3, #0
 8007462:	d002      	beq.n	800746a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f000 fa62 	bl	800792e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	695b      	ldr	r3, [r3, #20]
 8007470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007474:	2b00      	cmp	r3, #0
 8007476:	bf14      	ite	ne
 8007478:	2301      	movne	r3, #1
 800747a:	2300      	moveq	r3, #0
 800747c:	b2db      	uxtb	r3, r3
 800747e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007484:	f003 0308 	and.w	r3, r3, #8
 8007488:	2b00      	cmp	r3, #0
 800748a:	d102      	bne.n	8007492 <HAL_UART_IRQHandler+0x146>
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d031      	beq.n	80074f6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 f9a4 	bl	80077e0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	695b      	ldr	r3, [r3, #20]
 800749e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d023      	beq.n	80074ee <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	695a      	ldr	r2, [r3, #20]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074b4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d013      	beq.n	80074e6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074c2:	4a76      	ldr	r2, [pc, #472]	; (800769c <HAL_UART_IRQHandler+0x350>)
 80074c4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ca:	4618      	mov	r0, r3
 80074cc:	f7fb fd6a 	bl	8002fa4 <HAL_DMA_Abort_IT>
 80074d0:	4603      	mov	r3, r0
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d016      	beq.n	8007504 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074dc:	687a      	ldr	r2, [r7, #4]
 80074de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80074e0:	4610      	mov	r0, r2
 80074e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074e4:	e00e      	b.n	8007504 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 f8e3 	bl	80076b2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074ec:	e00a      	b.n	8007504 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 f8df 	bl	80076b2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074f4:	e006      	b.n	8007504 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f000 f8db 	bl	80076b2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2200      	movs	r2, #0
 8007500:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007502:	e0c3      	b.n	800768c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007504:	bf00      	nop
    return;
 8007506:	e0c1      	b.n	800768c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800750c:	2b01      	cmp	r3, #1
 800750e:	f040 80a1 	bne.w	8007654 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8007512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007514:	f003 0310 	and.w	r3, r3, #16
 8007518:	2b00      	cmp	r3, #0
 800751a:	f000 809b 	beq.w	8007654 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800751e:	6a3b      	ldr	r3, [r7, #32]
 8007520:	f003 0310 	and.w	r3, r3, #16
 8007524:	2b00      	cmp	r3, #0
 8007526:	f000 8095 	beq.w	8007654 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800752a:	2300      	movs	r3, #0
 800752c:	60fb      	str	r3, [r7, #12]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	60fb      	str	r3, [r7, #12]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	60fb      	str	r3, [r7, #12]
 800753e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	695b      	ldr	r3, [r3, #20]
 8007546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800754a:	2b00      	cmp	r3, #0
 800754c:	d04e      	beq.n	80075ec <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8007558:	8a3b      	ldrh	r3, [r7, #16]
 800755a:	2b00      	cmp	r3, #0
 800755c:	f000 8098 	beq.w	8007690 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007564:	8a3a      	ldrh	r2, [r7, #16]
 8007566:	429a      	cmp	r2, r3
 8007568:	f080 8092 	bcs.w	8007690 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	8a3a      	ldrh	r2, [r7, #16]
 8007570:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007576:	699b      	ldr	r3, [r3, #24]
 8007578:	2b20      	cmp	r3, #32
 800757a:	d02b      	beq.n	80075d4 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	68da      	ldr	r2, [r3, #12]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800758a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	695a      	ldr	r2, [r3, #20]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f022 0201 	bic.w	r2, r2, #1
 800759a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	695a      	ldr	r2, [r3, #20]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075aa:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2220      	movs	r2, #32
 80075b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2200      	movs	r2, #0
 80075b8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	68da      	ldr	r2, [r3, #12]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f022 0210 	bic.w	r2, r2, #16
 80075c8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ce:	4618      	mov	r0, r3
 80075d0:	f7fb fcad 	bl	8002f2e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80075dc:	b29b      	uxth	r3, r3
 80075de:	1ad3      	subs	r3, r2, r3
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	4619      	mov	r1, r3
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f000 f86d 	bl	80076c4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80075ea:	e051      	b.n	8007690 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	1ad3      	subs	r3, r2, r3
 80075f8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80075fe:	b29b      	uxth	r3, r3
 8007600:	2b00      	cmp	r3, #0
 8007602:	d047      	beq.n	8007694 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8007604:	8a7b      	ldrh	r3, [r7, #18]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d044      	beq.n	8007694 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	68da      	ldr	r2, [r3, #12]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007618:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	695a      	ldr	r2, [r3, #20]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f022 0201 	bic.w	r2, r2, #1
 8007628:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2220      	movs	r2, #32
 800762e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2200      	movs	r2, #0
 8007636:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	68da      	ldr	r2, [r3, #12]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f022 0210 	bic.w	r2, r2, #16
 8007646:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007648:	8a7b      	ldrh	r3, [r7, #18]
 800764a:	4619      	mov	r1, r3
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f000 f839 	bl	80076c4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007652:	e01f      	b.n	8007694 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800765a:	2b00      	cmp	r3, #0
 800765c:	d008      	beq.n	8007670 <HAL_UART_IRQHandler+0x324>
 800765e:	6a3b      	ldr	r3, [r7, #32]
 8007660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007664:	2b00      	cmp	r3, #0
 8007666:	d003      	beq.n	8007670 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f000 f8f9 	bl	8007860 <UART_Transmit_IT>
    return;
 800766e:	e012      	b.n	8007696 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007676:	2b00      	cmp	r3, #0
 8007678:	d00d      	beq.n	8007696 <HAL_UART_IRQHandler+0x34a>
 800767a:	6a3b      	ldr	r3, [r7, #32]
 800767c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007680:	2b00      	cmp	r3, #0
 8007682:	d008      	beq.n	8007696 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f000 f93a 	bl	80078fe <UART_EndTransmit_IT>
    return;
 800768a:	e004      	b.n	8007696 <HAL_UART_IRQHandler+0x34a>
    return;
 800768c:	bf00      	nop
 800768e:	e002      	b.n	8007696 <HAL_UART_IRQHandler+0x34a>
      return;
 8007690:	bf00      	nop
 8007692:	e000      	b.n	8007696 <HAL_UART_IRQHandler+0x34a>
      return;
 8007694:	bf00      	nop
  }
}
 8007696:	3728      	adds	r7, #40	; 0x28
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}
 800769c:	08007839 	.word	0x08007839

080076a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b083      	sub	sp, #12
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80076a8:	bf00      	nop
 80076aa:	370c      	adds	r7, #12
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bc80      	pop	{r7}
 80076b0:	4770      	bx	lr

080076b2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80076b2:	b480      	push	{r7}
 80076b4:	b083      	sub	sp, #12
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80076ba:	bf00      	nop
 80076bc:	370c      	adds	r7, #12
 80076be:	46bd      	mov	sp, r7
 80076c0:	bc80      	pop	{r7}
 80076c2:	4770      	bx	lr

080076c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b083      	sub	sp, #12
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	460b      	mov	r3, r1
 80076ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80076d0:	bf00      	nop
 80076d2:	370c      	adds	r7, #12
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bc80      	pop	{r7}
 80076d8:	4770      	bx	lr

080076da <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80076da:	b580      	push	{r7, lr}
 80076dc:	b084      	sub	sp, #16
 80076de:	af00      	add	r7, sp, #0
 80076e0:	60f8      	str	r0, [r7, #12]
 80076e2:	60b9      	str	r1, [r7, #8]
 80076e4:	603b      	str	r3, [r7, #0]
 80076e6:	4613      	mov	r3, r2
 80076e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076ea:	e02c      	b.n	8007746 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076ec:	69bb      	ldr	r3, [r7, #24]
 80076ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076f2:	d028      	beq.n	8007746 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80076f4:	69bb      	ldr	r3, [r7, #24]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d007      	beq.n	800770a <UART_WaitOnFlagUntilTimeout+0x30>
 80076fa:	f7fa fe05 	bl	8002308 <HAL_GetTick>
 80076fe:	4602      	mov	r2, r0
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	1ad3      	subs	r3, r2, r3
 8007704:	69ba      	ldr	r2, [r7, #24]
 8007706:	429a      	cmp	r2, r3
 8007708:	d21d      	bcs.n	8007746 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	68da      	ldr	r2, [r3, #12]
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007718:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	695a      	ldr	r2, [r3, #20]
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f022 0201 	bic.w	r2, r2, #1
 8007728:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2220      	movs	r2, #32
 800772e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2220      	movs	r2, #32
 8007736:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	2200      	movs	r2, #0
 800773e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007742:	2303      	movs	r3, #3
 8007744:	e00f      	b.n	8007766 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	681a      	ldr	r2, [r3, #0]
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	4013      	ands	r3, r2
 8007750:	68ba      	ldr	r2, [r7, #8]
 8007752:	429a      	cmp	r2, r3
 8007754:	bf0c      	ite	eq
 8007756:	2301      	moveq	r3, #1
 8007758:	2300      	movne	r3, #0
 800775a:	b2db      	uxtb	r3, r3
 800775c:	461a      	mov	r2, r3
 800775e:	79fb      	ldrb	r3, [r7, #7]
 8007760:	429a      	cmp	r2, r3
 8007762:	d0c3      	beq.n	80076ec <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007764:	2300      	movs	r3, #0
}
 8007766:	4618      	mov	r0, r3
 8007768:	3710      	adds	r7, #16
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}

0800776e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800776e:	b480      	push	{r7}
 8007770:	b085      	sub	sp, #20
 8007772:	af00      	add	r7, sp, #0
 8007774:	60f8      	str	r0, [r7, #12]
 8007776:	60b9      	str	r1, [r7, #8]
 8007778:	4613      	mov	r3, r2
 800777a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	68ba      	ldr	r2, [r7, #8]
 8007780:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	88fa      	ldrh	r2, [r7, #6]
 8007786:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	88fa      	ldrh	r2, [r7, #6]
 800778c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2200      	movs	r2, #0
 8007792:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2222      	movs	r2, #34	; 0x22
 8007798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2200      	movs	r2, #0
 80077a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	68da      	ldr	r2, [r3, #12]
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80077b2:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	695a      	ldr	r2, [r3, #20]
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f042 0201 	orr.w	r2, r2, #1
 80077c2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	68da      	ldr	r2, [r3, #12]
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f042 0220 	orr.w	r2, r2, #32
 80077d2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80077d4:	2300      	movs	r3, #0
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3714      	adds	r7, #20
 80077da:	46bd      	mov	sp, r7
 80077dc:	bc80      	pop	{r7}
 80077de:	4770      	bx	lr

080077e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b083      	sub	sp, #12
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	68da      	ldr	r2, [r3, #12]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80077f6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	695a      	ldr	r2, [r3, #20]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f022 0201 	bic.w	r2, r2, #1
 8007806:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800780c:	2b01      	cmp	r3, #1
 800780e:	d107      	bne.n	8007820 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	68da      	ldr	r2, [r3, #12]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f022 0210 	bic.w	r2, r2, #16
 800781e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2220      	movs	r2, #32
 8007824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2200      	movs	r2, #0
 800782c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800782e:	bf00      	nop
 8007830:	370c      	adds	r7, #12
 8007832:	46bd      	mov	sp, r7
 8007834:	bc80      	pop	{r7}
 8007836:	4770      	bx	lr

08007838 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b084      	sub	sp, #16
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007844:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	2200      	movs	r2, #0
 800784a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2200      	movs	r2, #0
 8007850:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007852:	68f8      	ldr	r0, [r7, #12]
 8007854:	f7ff ff2d 	bl	80076b2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007858:	bf00      	nop
 800785a:	3710      	adds	r7, #16
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}

08007860 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007860:	b480      	push	{r7}
 8007862:	b085      	sub	sp, #20
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800786e:	b2db      	uxtb	r3, r3
 8007870:	2b21      	cmp	r3, #33	; 0x21
 8007872:	d13e      	bne.n	80078f2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	689b      	ldr	r3, [r3, #8]
 8007878:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800787c:	d114      	bne.n	80078a8 <UART_Transmit_IT+0x48>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	691b      	ldr	r3, [r3, #16]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d110      	bne.n	80078a8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6a1b      	ldr	r3, [r3, #32]
 800788a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	881b      	ldrh	r3, [r3, #0]
 8007890:	461a      	mov	r2, r3
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800789a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6a1b      	ldr	r3, [r3, #32]
 80078a0:	1c9a      	adds	r2, r3, #2
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	621a      	str	r2, [r3, #32]
 80078a6:	e008      	b.n	80078ba <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6a1b      	ldr	r3, [r3, #32]
 80078ac:	1c59      	adds	r1, r3, #1
 80078ae:	687a      	ldr	r2, [r7, #4]
 80078b0:	6211      	str	r1, [r2, #32]
 80078b2:	781a      	ldrb	r2, [r3, #0]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80078be:	b29b      	uxth	r3, r3
 80078c0:	3b01      	subs	r3, #1
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	687a      	ldr	r2, [r7, #4]
 80078c6:	4619      	mov	r1, r3
 80078c8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d10f      	bne.n	80078ee <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	68da      	ldr	r2, [r3, #12]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80078dc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	68da      	ldr	r2, [r3, #12]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80078ec:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80078ee:	2300      	movs	r3, #0
 80078f0:	e000      	b.n	80078f4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80078f2:	2302      	movs	r3, #2
  }
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	3714      	adds	r7, #20
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bc80      	pop	{r7}
 80078fc:	4770      	bx	lr

080078fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80078fe:	b580      	push	{r7, lr}
 8007900:	b082      	sub	sp, #8
 8007902:	af00      	add	r7, sp, #0
 8007904:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	68da      	ldr	r2, [r3, #12]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007914:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2220      	movs	r2, #32
 800791a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f7ff febe 	bl	80076a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007924:	2300      	movs	r3, #0
}
 8007926:	4618      	mov	r0, r3
 8007928:	3708      	adds	r7, #8
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}

0800792e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800792e:	b580      	push	{r7, lr}
 8007930:	b086      	sub	sp, #24
 8007932:	af00      	add	r7, sp, #0
 8007934:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800793c:	b2db      	uxtb	r3, r3
 800793e:	2b22      	cmp	r3, #34	; 0x22
 8007940:	f040 8099 	bne.w	8007a76 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	689b      	ldr	r3, [r3, #8]
 8007948:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800794c:	d117      	bne.n	800797e <UART_Receive_IT+0x50>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	691b      	ldr	r3, [r3, #16]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d113      	bne.n	800797e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007956:	2300      	movs	r3, #0
 8007958:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800795e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	685b      	ldr	r3, [r3, #4]
 8007966:	b29b      	uxth	r3, r3
 8007968:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800796c:	b29a      	uxth	r2, r3
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007976:	1c9a      	adds	r2, r3, #2
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	629a      	str	r2, [r3, #40]	; 0x28
 800797c:	e026      	b.n	80079cc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007982:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8007984:	2300      	movs	r3, #0
 8007986:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	689b      	ldr	r3, [r3, #8]
 800798c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007990:	d007      	beq.n	80079a2 <UART_Receive_IT+0x74>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	689b      	ldr	r3, [r3, #8]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d10a      	bne.n	80079b0 <UART_Receive_IT+0x82>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	691b      	ldr	r3, [r3, #16]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d106      	bne.n	80079b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	b2da      	uxtb	r2, r3
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	701a      	strb	r2, [r3, #0]
 80079ae:	e008      	b.n	80079c2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	b2db      	uxtb	r3, r3
 80079b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079bc:	b2da      	uxtb	r2, r3
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079c6:	1c5a      	adds	r2, r3, #1
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80079d0:	b29b      	uxth	r3, r3
 80079d2:	3b01      	subs	r3, #1
 80079d4:	b29b      	uxth	r3, r3
 80079d6:	687a      	ldr	r2, [r7, #4]
 80079d8:	4619      	mov	r1, r3
 80079da:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d148      	bne.n	8007a72 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	68da      	ldr	r2, [r3, #12]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f022 0220 	bic.w	r2, r2, #32
 80079ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	68da      	ldr	r2, [r3, #12]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80079fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	695a      	ldr	r2, [r3, #20]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f022 0201 	bic.w	r2, r2, #1
 8007a0e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2220      	movs	r2, #32
 8007a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	d123      	bne.n	8007a68 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2200      	movs	r2, #0
 8007a24:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	68da      	ldr	r2, [r3, #12]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f022 0210 	bic.w	r2, r2, #16
 8007a34:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f003 0310 	and.w	r3, r3, #16
 8007a40:	2b10      	cmp	r3, #16
 8007a42:	d10a      	bne.n	8007a5a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007a44:	2300      	movs	r3, #0
 8007a46:	60fb      	str	r3, [r7, #12]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	60fb      	str	r3, [r7, #12]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	685b      	ldr	r3, [r3, #4]
 8007a56:	60fb      	str	r3, [r7, #12]
 8007a58:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007a5e:	4619      	mov	r1, r3
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f7ff fe2f 	bl	80076c4 <HAL_UARTEx_RxEventCallback>
 8007a66:	e002      	b.n	8007a6e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f7fa f8d5 	bl	8001c18 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	e002      	b.n	8007a78 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8007a72:	2300      	movs	r3, #0
 8007a74:	e000      	b.n	8007a78 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8007a76:	2302      	movs	r3, #2
  }
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3718      	adds	r7, #24
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}

08007a80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b084      	sub	sp, #16
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	691b      	ldr	r3, [r3, #16]
 8007a8e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	68da      	ldr	r2, [r3, #12]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	430a      	orrs	r2, r1
 8007a9c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	689a      	ldr	r2, [r3, #8]
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	691b      	ldr	r3, [r3, #16]
 8007aa6:	431a      	orrs	r2, r3
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	695b      	ldr	r3, [r3, #20]
 8007aac:	4313      	orrs	r3, r2
 8007aae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	68db      	ldr	r3, [r3, #12]
 8007ab6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007aba:	f023 030c 	bic.w	r3, r3, #12
 8007abe:	687a      	ldr	r2, [r7, #4]
 8007ac0:	6812      	ldr	r2, [r2, #0]
 8007ac2:	68b9      	ldr	r1, [r7, #8]
 8007ac4:	430b      	orrs	r3, r1
 8007ac6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	695b      	ldr	r3, [r3, #20]
 8007ace:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	699a      	ldr	r2, [r3, #24]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	430a      	orrs	r2, r1
 8007adc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	4a2c      	ldr	r2, [pc, #176]	; (8007b94 <UART_SetConfig+0x114>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d103      	bne.n	8007af0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007ae8:	f7fe fd4c 	bl	8006584 <HAL_RCC_GetPCLK2Freq>
 8007aec:	60f8      	str	r0, [r7, #12]
 8007aee:	e002      	b.n	8007af6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007af0:	f7fe fd34 	bl	800655c <HAL_RCC_GetPCLK1Freq>
 8007af4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007af6:	68fa      	ldr	r2, [r7, #12]
 8007af8:	4613      	mov	r3, r2
 8007afa:	009b      	lsls	r3, r3, #2
 8007afc:	4413      	add	r3, r2
 8007afe:	009a      	lsls	r2, r3, #2
 8007b00:	441a      	add	r2, r3
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	009b      	lsls	r3, r3, #2
 8007b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b0c:	4a22      	ldr	r2, [pc, #136]	; (8007b98 <UART_SetConfig+0x118>)
 8007b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8007b12:	095b      	lsrs	r3, r3, #5
 8007b14:	0119      	lsls	r1, r3, #4
 8007b16:	68fa      	ldr	r2, [r7, #12]
 8007b18:	4613      	mov	r3, r2
 8007b1a:	009b      	lsls	r3, r3, #2
 8007b1c:	4413      	add	r3, r2
 8007b1e:	009a      	lsls	r2, r3, #2
 8007b20:	441a      	add	r2, r3
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	685b      	ldr	r3, [r3, #4]
 8007b26:	009b      	lsls	r3, r3, #2
 8007b28:	fbb2 f2f3 	udiv	r2, r2, r3
 8007b2c:	4b1a      	ldr	r3, [pc, #104]	; (8007b98 <UART_SetConfig+0x118>)
 8007b2e:	fba3 0302 	umull	r0, r3, r3, r2
 8007b32:	095b      	lsrs	r3, r3, #5
 8007b34:	2064      	movs	r0, #100	; 0x64
 8007b36:	fb00 f303 	mul.w	r3, r0, r3
 8007b3a:	1ad3      	subs	r3, r2, r3
 8007b3c:	011b      	lsls	r3, r3, #4
 8007b3e:	3332      	adds	r3, #50	; 0x32
 8007b40:	4a15      	ldr	r2, [pc, #84]	; (8007b98 <UART_SetConfig+0x118>)
 8007b42:	fba2 2303 	umull	r2, r3, r2, r3
 8007b46:	095b      	lsrs	r3, r3, #5
 8007b48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007b4c:	4419      	add	r1, r3
 8007b4e:	68fa      	ldr	r2, [r7, #12]
 8007b50:	4613      	mov	r3, r2
 8007b52:	009b      	lsls	r3, r3, #2
 8007b54:	4413      	add	r3, r2
 8007b56:	009a      	lsls	r2, r3, #2
 8007b58:	441a      	add	r2, r3
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	685b      	ldr	r3, [r3, #4]
 8007b5e:	009b      	lsls	r3, r3, #2
 8007b60:	fbb2 f2f3 	udiv	r2, r2, r3
 8007b64:	4b0c      	ldr	r3, [pc, #48]	; (8007b98 <UART_SetConfig+0x118>)
 8007b66:	fba3 0302 	umull	r0, r3, r3, r2
 8007b6a:	095b      	lsrs	r3, r3, #5
 8007b6c:	2064      	movs	r0, #100	; 0x64
 8007b6e:	fb00 f303 	mul.w	r3, r0, r3
 8007b72:	1ad3      	subs	r3, r2, r3
 8007b74:	011b      	lsls	r3, r3, #4
 8007b76:	3332      	adds	r3, #50	; 0x32
 8007b78:	4a07      	ldr	r2, [pc, #28]	; (8007b98 <UART_SetConfig+0x118>)
 8007b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8007b7e:	095b      	lsrs	r3, r3, #5
 8007b80:	f003 020f 	and.w	r2, r3, #15
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	440a      	add	r2, r1
 8007b8a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007b8c:	bf00      	nop
 8007b8e:	3710      	adds	r7, #16
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}
 8007b94:	40013800 	.word	0x40013800
 8007b98:	51eb851f 	.word	0x51eb851f

08007b9c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007b9c:	b084      	sub	sp, #16
 8007b9e:	b480      	push	{r7}
 8007ba0:	b083      	sub	sp, #12
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	6078      	str	r0, [r7, #4]
 8007ba6:	f107 0014 	add.w	r0, r7, #20
 8007baa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007bae:	2300      	movs	r3, #0
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	370c      	adds	r7, #12
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bc80      	pop	{r7}
 8007bb8:	b004      	add	sp, #16
 8007bba:	4770      	bx	lr

08007bbc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b085      	sub	sp, #20
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007bcc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007bd0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	b29a      	uxth	r2, r3
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007bdc:	2300      	movs	r3, #0
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3714      	adds	r7, #20
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bc80      	pop	{r7}
 8007be6:	4770      	bx	lr

08007be8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b085      	sub	sp, #20
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007bf0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007bf4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007bfc:	b29a      	uxth	r2, r3
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	b29b      	uxth	r3, r3
 8007c02:	43db      	mvns	r3, r3
 8007c04:	b29b      	uxth	r3, r3
 8007c06:	4013      	ands	r3, r2
 8007c08:	b29a      	uxth	r2, r3
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007c10:	2300      	movs	r3, #0
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3714      	adds	r7, #20
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bc80      	pop	{r7}
 8007c1a:	4770      	bx	lr

08007c1c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b083      	sub	sp, #12
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	460b      	mov	r3, r1
 8007c26:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007c28:	2300      	movs	r3, #0
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	370c      	adds	r7, #12
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bc80      	pop	{r7}
 8007c32:	4770      	bx	lr

08007c34 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007c34:	b084      	sub	sp, #16
 8007c36:	b480      	push	{r7}
 8007c38:	b083      	sub	sp, #12
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	6078      	str	r0, [r7, #4]
 8007c3e:	f107 0014 	add.w	r0, r7, #20
 8007c42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2201      	movs	r2, #1
 8007c4a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2200      	movs	r2, #0
 8007c52:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2200      	movs	r2, #0
 8007c62:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007c66:	2300      	movs	r3, #0
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	370c      	adds	r7, #12
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bc80      	pop	{r7}
 8007c70:	b004      	add	sp, #16
 8007c72:	4770      	bx	lr

08007c74 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b09b      	sub	sp, #108	; 0x6c
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
 8007c7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007c84:	687a      	ldr	r2, [r7, #4]
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	781b      	ldrb	r3, [r3, #0]
 8007c8a:	009b      	lsls	r3, r3, #2
 8007c8c:	4413      	add	r3, r2
 8007c8e:	881b      	ldrh	r3, [r3, #0]
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8007c96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c9a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	78db      	ldrb	r3, [r3, #3]
 8007ca2:	2b03      	cmp	r3, #3
 8007ca4:	d81f      	bhi.n	8007ce6 <USB_ActivateEndpoint+0x72>
 8007ca6:	a201      	add	r2, pc, #4	; (adr r2, 8007cac <USB_ActivateEndpoint+0x38>)
 8007ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cac:	08007cbd 	.word	0x08007cbd
 8007cb0:	08007cd9 	.word	0x08007cd9
 8007cb4:	08007cef 	.word	0x08007cef
 8007cb8:	08007ccb 	.word	0x08007ccb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007cbc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007cc0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007cc4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007cc8:	e012      	b.n	8007cf0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007cca:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007cce:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8007cd2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007cd6:	e00b      	b.n	8007cf0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007cd8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007cdc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007ce0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007ce4:	e004      	b.n	8007cf0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8007cec:	e000      	b.n	8007cf0 <USB_ActivateEndpoint+0x7c>
      break;
 8007cee:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007cf0:	687a      	ldr	r2, [r7, #4]
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	781b      	ldrb	r3, [r3, #0]
 8007cf6:	009b      	lsls	r3, r3, #2
 8007cf8:	441a      	add	r2, r3
 8007cfa:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007cfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d0e:	b29b      	uxth	r3, r3
 8007d10:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007d12:	687a      	ldr	r2, [r7, #4]
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	009b      	lsls	r3, r3, #2
 8007d1a:	4413      	add	r3, r2
 8007d1c:	881b      	ldrh	r3, [r3, #0]
 8007d1e:	b29b      	uxth	r3, r3
 8007d20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d28:	b29a      	uxth	r2, r3
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	781b      	ldrb	r3, [r3, #0]
 8007d2e:	b29b      	uxth	r3, r3
 8007d30:	4313      	orrs	r3, r2
 8007d32:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8007d36:	687a      	ldr	r2, [r7, #4]
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	781b      	ldrb	r3, [r3, #0]
 8007d3c:	009b      	lsls	r3, r3, #2
 8007d3e:	441a      	add	r2, r3
 8007d40:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8007d44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d54:	b29b      	uxth	r3, r3
 8007d56:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	7b1b      	ldrb	r3, [r3, #12]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	f040 8149 	bne.w	8007ff4 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	785b      	ldrb	r3, [r3, #1]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	f000 8084 	beq.w	8007e74 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	617b      	str	r3, [r7, #20]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d76:	b29b      	uxth	r3, r3
 8007d78:	461a      	mov	r2, r3
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	4413      	add	r3, r2
 8007d7e:	617b      	str	r3, [r7, #20]
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	781b      	ldrb	r3, [r3, #0]
 8007d84:	011a      	lsls	r2, r3, #4
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	4413      	add	r3, r2
 8007d8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d8e:	613b      	str	r3, [r7, #16]
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	88db      	ldrh	r3, [r3, #6]
 8007d94:	085b      	lsrs	r3, r3, #1
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	005b      	lsls	r3, r3, #1
 8007d9a:	b29a      	uxth	r2, r3
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007da0:	687a      	ldr	r2, [r7, #4]
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	781b      	ldrb	r3, [r3, #0]
 8007da6:	009b      	lsls	r3, r3, #2
 8007da8:	4413      	add	r3, r2
 8007daa:	881b      	ldrh	r3, [r3, #0]
 8007dac:	81fb      	strh	r3, [r7, #14]
 8007dae:	89fb      	ldrh	r3, [r7, #14]
 8007db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d01b      	beq.n	8007df0 <USB_ActivateEndpoint+0x17c>
 8007db8:	687a      	ldr	r2, [r7, #4]
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	781b      	ldrb	r3, [r3, #0]
 8007dbe:	009b      	lsls	r3, r3, #2
 8007dc0:	4413      	add	r3, r2
 8007dc2:	881b      	ldrh	r3, [r3, #0]
 8007dc4:	b29b      	uxth	r3, r3
 8007dc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007dca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dce:	81bb      	strh	r3, [r7, #12]
 8007dd0:	687a      	ldr	r2, [r7, #4]
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	781b      	ldrb	r3, [r3, #0]
 8007dd6:	009b      	lsls	r3, r3, #2
 8007dd8:	441a      	add	r2, r3
 8007dda:	89bb      	ldrh	r3, [r7, #12]
 8007ddc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007de0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007de4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007de8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007dec:	b29b      	uxth	r3, r3
 8007dee:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	78db      	ldrb	r3, [r3, #3]
 8007df4:	2b01      	cmp	r3, #1
 8007df6:	d020      	beq.n	8007e3a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007df8:	687a      	ldr	r2, [r7, #4]
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	781b      	ldrb	r3, [r3, #0]
 8007dfe:	009b      	lsls	r3, r3, #2
 8007e00:	4413      	add	r3, r2
 8007e02:	881b      	ldrh	r3, [r3, #0]
 8007e04:	b29b      	uxth	r3, r3
 8007e06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e0e:	813b      	strh	r3, [r7, #8]
 8007e10:	893b      	ldrh	r3, [r7, #8]
 8007e12:	f083 0320 	eor.w	r3, r3, #32
 8007e16:	813b      	strh	r3, [r7, #8]
 8007e18:	687a      	ldr	r2, [r7, #4]
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	781b      	ldrb	r3, [r3, #0]
 8007e1e:	009b      	lsls	r3, r3, #2
 8007e20:	441a      	add	r2, r3
 8007e22:	893b      	ldrh	r3, [r7, #8]
 8007e24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e34:	b29b      	uxth	r3, r3
 8007e36:	8013      	strh	r3, [r2, #0]
 8007e38:	e27f      	b.n	800833a <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007e3a:	687a      	ldr	r2, [r7, #4]
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	781b      	ldrb	r3, [r3, #0]
 8007e40:	009b      	lsls	r3, r3, #2
 8007e42:	4413      	add	r3, r2
 8007e44:	881b      	ldrh	r3, [r3, #0]
 8007e46:	b29b      	uxth	r3, r3
 8007e48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e50:	817b      	strh	r3, [r7, #10]
 8007e52:	687a      	ldr	r2, [r7, #4]
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	781b      	ldrb	r3, [r3, #0]
 8007e58:	009b      	lsls	r3, r3, #2
 8007e5a:	441a      	add	r2, r3
 8007e5c:	897b      	ldrh	r3, [r7, #10]
 8007e5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e6e:	b29b      	uxth	r3, r3
 8007e70:	8013      	strh	r3, [r2, #0]
 8007e72:	e262      	b.n	800833a <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e7e:	b29b      	uxth	r3, r3
 8007e80:	461a      	mov	r2, r3
 8007e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e84:	4413      	add	r3, r2
 8007e86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	781b      	ldrb	r3, [r3, #0]
 8007e8c:	011a      	lsls	r2, r3, #4
 8007e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e90:	4413      	add	r3, r2
 8007e92:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8007e96:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	88db      	ldrh	r3, [r3, #6]
 8007e9c:	085b      	lsrs	r3, r3, #1
 8007e9e:	b29b      	uxth	r3, r3
 8007ea0:	005b      	lsls	r3, r3, #1
 8007ea2:	b29a      	uxth	r2, r3
 8007ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea6:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	627b      	str	r3, [r7, #36]	; 0x24
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	461a      	mov	r2, r3
 8007eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb8:	4413      	add	r3, r2
 8007eba:	627b      	str	r3, [r7, #36]	; 0x24
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	781b      	ldrb	r3, [r3, #0]
 8007ec0:	011a      	lsls	r2, r3, #4
 8007ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec4:	4413      	add	r3, r2
 8007ec6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007eca:	623b      	str	r3, [r7, #32]
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	691b      	ldr	r3, [r3, #16]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d112      	bne.n	8007efa <USB_ActivateEndpoint+0x286>
 8007ed4:	6a3b      	ldr	r3, [r7, #32]
 8007ed6:	881b      	ldrh	r3, [r3, #0]
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007ede:	b29a      	uxth	r2, r3
 8007ee0:	6a3b      	ldr	r3, [r7, #32]
 8007ee2:	801a      	strh	r2, [r3, #0]
 8007ee4:	6a3b      	ldr	r3, [r7, #32]
 8007ee6:	881b      	ldrh	r3, [r3, #0]
 8007ee8:	b29b      	uxth	r3, r3
 8007eea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007eee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ef2:	b29a      	uxth	r2, r3
 8007ef4:	6a3b      	ldr	r3, [r7, #32]
 8007ef6:	801a      	strh	r2, [r3, #0]
 8007ef8:	e02f      	b.n	8007f5a <USB_ActivateEndpoint+0x2e6>
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	691b      	ldr	r3, [r3, #16]
 8007efe:	2b3e      	cmp	r3, #62	; 0x3e
 8007f00:	d813      	bhi.n	8007f2a <USB_ActivateEndpoint+0x2b6>
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	691b      	ldr	r3, [r3, #16]
 8007f06:	085b      	lsrs	r3, r3, #1
 8007f08:	663b      	str	r3, [r7, #96]	; 0x60
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	691b      	ldr	r3, [r3, #16]
 8007f0e:	f003 0301 	and.w	r3, r3, #1
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d002      	beq.n	8007f1c <USB_ActivateEndpoint+0x2a8>
 8007f16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007f18:	3301      	adds	r3, #1
 8007f1a:	663b      	str	r3, [r7, #96]	; 0x60
 8007f1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007f1e:	b29b      	uxth	r3, r3
 8007f20:	029b      	lsls	r3, r3, #10
 8007f22:	b29a      	uxth	r2, r3
 8007f24:	6a3b      	ldr	r3, [r7, #32]
 8007f26:	801a      	strh	r2, [r3, #0]
 8007f28:	e017      	b.n	8007f5a <USB_ActivateEndpoint+0x2e6>
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	691b      	ldr	r3, [r3, #16]
 8007f2e:	095b      	lsrs	r3, r3, #5
 8007f30:	663b      	str	r3, [r7, #96]	; 0x60
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	691b      	ldr	r3, [r3, #16]
 8007f36:	f003 031f 	and.w	r3, r3, #31
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d102      	bne.n	8007f44 <USB_ActivateEndpoint+0x2d0>
 8007f3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007f40:	3b01      	subs	r3, #1
 8007f42:	663b      	str	r3, [r7, #96]	; 0x60
 8007f44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007f46:	b29b      	uxth	r3, r3
 8007f48:	029b      	lsls	r3, r3, #10
 8007f4a:	b29b      	uxth	r3, r3
 8007f4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f54:	b29a      	uxth	r2, r3
 8007f56:	6a3b      	ldr	r3, [r7, #32]
 8007f58:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007f5a:	687a      	ldr	r2, [r7, #4]
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	781b      	ldrb	r3, [r3, #0]
 8007f60:	009b      	lsls	r3, r3, #2
 8007f62:	4413      	add	r3, r2
 8007f64:	881b      	ldrh	r3, [r3, #0]
 8007f66:	83fb      	strh	r3, [r7, #30]
 8007f68:	8bfb      	ldrh	r3, [r7, #30]
 8007f6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d01b      	beq.n	8007faa <USB_ActivateEndpoint+0x336>
 8007f72:	687a      	ldr	r2, [r7, #4]
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	781b      	ldrb	r3, [r3, #0]
 8007f78:	009b      	lsls	r3, r3, #2
 8007f7a:	4413      	add	r3, r2
 8007f7c:	881b      	ldrh	r3, [r3, #0]
 8007f7e:	b29b      	uxth	r3, r3
 8007f80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f88:	83bb      	strh	r3, [r7, #28]
 8007f8a:	687a      	ldr	r2, [r7, #4]
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	781b      	ldrb	r3, [r3, #0]
 8007f90:	009b      	lsls	r3, r3, #2
 8007f92:	441a      	add	r2, r3
 8007f94:	8bbb      	ldrh	r3, [r7, #28]
 8007f96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f9e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007fa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fa6:	b29b      	uxth	r3, r3
 8007fa8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007faa:	687a      	ldr	r2, [r7, #4]
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	781b      	ldrb	r3, [r3, #0]
 8007fb0:	009b      	lsls	r3, r3, #2
 8007fb2:	4413      	add	r3, r2
 8007fb4:	881b      	ldrh	r3, [r3, #0]
 8007fb6:	b29b      	uxth	r3, r3
 8007fb8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007fbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fc0:	837b      	strh	r3, [r7, #26]
 8007fc2:	8b7b      	ldrh	r3, [r7, #26]
 8007fc4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007fc8:	837b      	strh	r3, [r7, #26]
 8007fca:	8b7b      	ldrh	r3, [r7, #26]
 8007fcc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007fd0:	837b      	strh	r3, [r7, #26]
 8007fd2:	687a      	ldr	r2, [r7, #4]
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	781b      	ldrb	r3, [r3, #0]
 8007fd8:	009b      	lsls	r3, r3, #2
 8007fda:	441a      	add	r2, r3
 8007fdc:	8b7b      	ldrh	r3, [r7, #26]
 8007fde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fe2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fe6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fee:	b29b      	uxth	r3, r3
 8007ff0:	8013      	strh	r3, [r2, #0]
 8007ff2:	e1a2      	b.n	800833a <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8007ff4:	687a      	ldr	r2, [r7, #4]
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	781b      	ldrb	r3, [r3, #0]
 8007ffa:	009b      	lsls	r3, r3, #2
 8007ffc:	4413      	add	r3, r2
 8007ffe:	881b      	ldrh	r3, [r3, #0]
 8008000:	b29b      	uxth	r3, r3
 8008002:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800800a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800800e:	687a      	ldr	r2, [r7, #4]
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	781b      	ldrb	r3, [r3, #0]
 8008014:	009b      	lsls	r3, r3, #2
 8008016:	441a      	add	r2, r3
 8008018:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800801c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008020:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008024:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800802c:	b29b      	uxth	r3, r3
 800802e:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	65bb      	str	r3, [r7, #88]	; 0x58
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800803a:	b29b      	uxth	r3, r3
 800803c:	461a      	mov	r2, r3
 800803e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008040:	4413      	add	r3, r2
 8008042:	65bb      	str	r3, [r7, #88]	; 0x58
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	781b      	ldrb	r3, [r3, #0]
 8008048:	011a      	lsls	r2, r3, #4
 800804a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800804c:	4413      	add	r3, r2
 800804e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008052:	657b      	str	r3, [r7, #84]	; 0x54
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	891b      	ldrh	r3, [r3, #8]
 8008058:	085b      	lsrs	r3, r3, #1
 800805a:	b29b      	uxth	r3, r3
 800805c:	005b      	lsls	r3, r3, #1
 800805e:	b29a      	uxth	r2, r3
 8008060:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008062:	801a      	strh	r2, [r3, #0]
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	653b      	str	r3, [r7, #80]	; 0x50
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800806e:	b29b      	uxth	r3, r3
 8008070:	461a      	mov	r2, r3
 8008072:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008074:	4413      	add	r3, r2
 8008076:	653b      	str	r3, [r7, #80]	; 0x50
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	781b      	ldrb	r3, [r3, #0]
 800807c:	011a      	lsls	r2, r3, #4
 800807e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008080:	4413      	add	r3, r2
 8008082:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8008086:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	895b      	ldrh	r3, [r3, #10]
 800808c:	085b      	lsrs	r3, r3, #1
 800808e:	b29b      	uxth	r3, r3
 8008090:	005b      	lsls	r3, r3, #1
 8008092:	b29a      	uxth	r2, r3
 8008094:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008096:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	785b      	ldrb	r3, [r3, #1]
 800809c:	2b00      	cmp	r3, #0
 800809e:	f040 8091 	bne.w	80081c4 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80080a2:	687a      	ldr	r2, [r7, #4]
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	781b      	ldrb	r3, [r3, #0]
 80080a8:	009b      	lsls	r3, r3, #2
 80080aa:	4413      	add	r3, r2
 80080ac:	881b      	ldrh	r3, [r3, #0]
 80080ae:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80080b0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80080b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d01b      	beq.n	80080f2 <USB_ActivateEndpoint+0x47e>
 80080ba:	687a      	ldr	r2, [r7, #4]
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	781b      	ldrb	r3, [r3, #0]
 80080c0:	009b      	lsls	r3, r3, #2
 80080c2:	4413      	add	r3, r2
 80080c4:	881b      	ldrh	r3, [r3, #0]
 80080c6:	b29b      	uxth	r3, r3
 80080c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080d0:	877b      	strh	r3, [r7, #58]	; 0x3a
 80080d2:	687a      	ldr	r2, [r7, #4]
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	781b      	ldrb	r3, [r3, #0]
 80080d8:	009b      	lsls	r3, r3, #2
 80080da:	441a      	add	r2, r3
 80080dc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80080de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80080ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080ee:	b29b      	uxth	r3, r3
 80080f0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80080f2:	687a      	ldr	r2, [r7, #4]
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	781b      	ldrb	r3, [r3, #0]
 80080f8:	009b      	lsls	r3, r3, #2
 80080fa:	4413      	add	r3, r2
 80080fc:	881b      	ldrh	r3, [r3, #0]
 80080fe:	873b      	strh	r3, [r7, #56]	; 0x38
 8008100:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008106:	2b00      	cmp	r3, #0
 8008108:	d01b      	beq.n	8008142 <USB_ActivateEndpoint+0x4ce>
 800810a:	687a      	ldr	r2, [r7, #4]
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	781b      	ldrb	r3, [r3, #0]
 8008110:	009b      	lsls	r3, r3, #2
 8008112:	4413      	add	r3, r2
 8008114:	881b      	ldrh	r3, [r3, #0]
 8008116:	b29b      	uxth	r3, r3
 8008118:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800811c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008120:	86fb      	strh	r3, [r7, #54]	; 0x36
 8008122:	687a      	ldr	r2, [r7, #4]
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	781b      	ldrb	r3, [r3, #0]
 8008128:	009b      	lsls	r3, r3, #2
 800812a:	441a      	add	r2, r3
 800812c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800812e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008132:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008136:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800813a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800813e:	b29b      	uxth	r3, r3
 8008140:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008142:	687a      	ldr	r2, [r7, #4]
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	781b      	ldrb	r3, [r3, #0]
 8008148:	009b      	lsls	r3, r3, #2
 800814a:	4413      	add	r3, r2
 800814c:	881b      	ldrh	r3, [r3, #0]
 800814e:	b29b      	uxth	r3, r3
 8008150:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008154:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008158:	86bb      	strh	r3, [r7, #52]	; 0x34
 800815a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800815c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008160:	86bb      	strh	r3, [r7, #52]	; 0x34
 8008162:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008164:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008168:	86bb      	strh	r3, [r7, #52]	; 0x34
 800816a:	687a      	ldr	r2, [r7, #4]
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	781b      	ldrb	r3, [r3, #0]
 8008170:	009b      	lsls	r3, r3, #2
 8008172:	441a      	add	r2, r3
 8008174:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008176:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800817a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800817e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008182:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008186:	b29b      	uxth	r3, r3
 8008188:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800818a:	687a      	ldr	r2, [r7, #4]
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	781b      	ldrb	r3, [r3, #0]
 8008190:	009b      	lsls	r3, r3, #2
 8008192:	4413      	add	r3, r2
 8008194:	881b      	ldrh	r3, [r3, #0]
 8008196:	b29b      	uxth	r3, r3
 8008198:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800819c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081a0:	867b      	strh	r3, [r7, #50]	; 0x32
 80081a2:	687a      	ldr	r2, [r7, #4]
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	781b      	ldrb	r3, [r3, #0]
 80081a8:	009b      	lsls	r3, r3, #2
 80081aa:	441a      	add	r2, r3
 80081ac:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80081ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081be:	b29b      	uxth	r3, r3
 80081c0:	8013      	strh	r3, [r2, #0]
 80081c2:	e0ba      	b.n	800833a <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80081c4:	687a      	ldr	r2, [r7, #4]
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	781b      	ldrb	r3, [r3, #0]
 80081ca:	009b      	lsls	r3, r3, #2
 80081cc:	4413      	add	r3, r2
 80081ce:	881b      	ldrh	r3, [r3, #0]
 80081d0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80081d4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80081d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d01d      	beq.n	800821c <USB_ActivateEndpoint+0x5a8>
 80081e0:	687a      	ldr	r2, [r7, #4]
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	781b      	ldrb	r3, [r3, #0]
 80081e6:	009b      	lsls	r3, r3, #2
 80081e8:	4413      	add	r3, r2
 80081ea:	881b      	ldrh	r3, [r3, #0]
 80081ec:	b29b      	uxth	r3, r3
 80081ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081f6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80081fa:	687a      	ldr	r2, [r7, #4]
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	781b      	ldrb	r3, [r3, #0]
 8008200:	009b      	lsls	r3, r3, #2
 8008202:	441a      	add	r2, r3
 8008204:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008208:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800820c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008210:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008214:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008218:	b29b      	uxth	r3, r3
 800821a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800821c:	687a      	ldr	r2, [r7, #4]
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	781b      	ldrb	r3, [r3, #0]
 8008222:	009b      	lsls	r3, r3, #2
 8008224:	4413      	add	r3, r2
 8008226:	881b      	ldrh	r3, [r3, #0]
 8008228:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800822c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8008230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008234:	2b00      	cmp	r3, #0
 8008236:	d01d      	beq.n	8008274 <USB_ActivateEndpoint+0x600>
 8008238:	687a      	ldr	r2, [r7, #4]
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	781b      	ldrb	r3, [r3, #0]
 800823e:	009b      	lsls	r3, r3, #2
 8008240:	4413      	add	r3, r2
 8008242:	881b      	ldrh	r3, [r3, #0]
 8008244:	b29b      	uxth	r3, r3
 8008246:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800824a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800824e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8008252:	687a      	ldr	r2, [r7, #4]
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	781b      	ldrb	r3, [r3, #0]
 8008258:	009b      	lsls	r3, r3, #2
 800825a:	441a      	add	r2, r3
 800825c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008260:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008264:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008268:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800826c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008270:	b29b      	uxth	r3, r3
 8008272:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	78db      	ldrb	r3, [r3, #3]
 8008278:	2b01      	cmp	r3, #1
 800827a:	d024      	beq.n	80082c6 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800827c:	687a      	ldr	r2, [r7, #4]
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	781b      	ldrb	r3, [r3, #0]
 8008282:	009b      	lsls	r3, r3, #2
 8008284:	4413      	add	r3, r2
 8008286:	881b      	ldrh	r3, [r3, #0]
 8008288:	b29b      	uxth	r3, r3
 800828a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800828e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008292:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8008296:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800829a:	f083 0320 	eor.w	r3, r3, #32
 800829e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80082a2:	687a      	ldr	r2, [r7, #4]
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	781b      	ldrb	r3, [r3, #0]
 80082a8:	009b      	lsls	r3, r3, #2
 80082aa:	441a      	add	r2, r3
 80082ac:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80082b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082c0:	b29b      	uxth	r3, r3
 80082c2:	8013      	strh	r3, [r2, #0]
 80082c4:	e01d      	b.n	8008302 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80082c6:	687a      	ldr	r2, [r7, #4]
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	781b      	ldrb	r3, [r3, #0]
 80082cc:	009b      	lsls	r3, r3, #2
 80082ce:	4413      	add	r3, r2
 80082d0:	881b      	ldrh	r3, [r3, #0]
 80082d2:	b29b      	uxth	r3, r3
 80082d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082dc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80082e0:	687a      	ldr	r2, [r7, #4]
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	781b      	ldrb	r3, [r3, #0]
 80082e6:	009b      	lsls	r3, r3, #2
 80082e8:	441a      	add	r2, r3
 80082ea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80082ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082fe:	b29b      	uxth	r3, r3
 8008300:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008302:	687a      	ldr	r2, [r7, #4]
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	781b      	ldrb	r3, [r3, #0]
 8008308:	009b      	lsls	r3, r3, #2
 800830a:	4413      	add	r3, r2
 800830c:	881b      	ldrh	r3, [r3, #0]
 800830e:	b29b      	uxth	r3, r3
 8008310:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008314:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008318:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800831a:	687a      	ldr	r2, [r7, #4]
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	781b      	ldrb	r3, [r3, #0]
 8008320:	009b      	lsls	r3, r3, #2
 8008322:	441a      	add	r2, r3
 8008324:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008326:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800832a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800832e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008332:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008336:	b29b      	uxth	r3, r3
 8008338:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800833a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800833e:	4618      	mov	r0, r3
 8008340:	376c      	adds	r7, #108	; 0x6c
 8008342:	46bd      	mov	sp, r7
 8008344:	bc80      	pop	{r7}
 8008346:	4770      	bx	lr

08008348 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008348:	b480      	push	{r7}
 800834a:	b08d      	sub	sp, #52	; 0x34
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	7b1b      	ldrb	r3, [r3, #12]
 8008356:	2b00      	cmp	r3, #0
 8008358:	f040 808e 	bne.w	8008478 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	785b      	ldrb	r3, [r3, #1]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d044      	beq.n	80083ee <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008364:	687a      	ldr	r2, [r7, #4]
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	781b      	ldrb	r3, [r3, #0]
 800836a:	009b      	lsls	r3, r3, #2
 800836c:	4413      	add	r3, r2
 800836e:	881b      	ldrh	r3, [r3, #0]
 8008370:	81bb      	strh	r3, [r7, #12]
 8008372:	89bb      	ldrh	r3, [r7, #12]
 8008374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008378:	2b00      	cmp	r3, #0
 800837a:	d01b      	beq.n	80083b4 <USB_DeactivateEndpoint+0x6c>
 800837c:	687a      	ldr	r2, [r7, #4]
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	781b      	ldrb	r3, [r3, #0]
 8008382:	009b      	lsls	r3, r3, #2
 8008384:	4413      	add	r3, r2
 8008386:	881b      	ldrh	r3, [r3, #0]
 8008388:	b29b      	uxth	r3, r3
 800838a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800838e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008392:	817b      	strh	r3, [r7, #10]
 8008394:	687a      	ldr	r2, [r7, #4]
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	781b      	ldrb	r3, [r3, #0]
 800839a:	009b      	lsls	r3, r3, #2
 800839c:	441a      	add	r2, r3
 800839e:	897b      	ldrh	r3, [r7, #10]
 80083a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80083b0:	b29b      	uxth	r3, r3
 80083b2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80083b4:	687a      	ldr	r2, [r7, #4]
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	781b      	ldrb	r3, [r3, #0]
 80083ba:	009b      	lsls	r3, r3, #2
 80083bc:	4413      	add	r3, r2
 80083be:	881b      	ldrh	r3, [r3, #0]
 80083c0:	b29b      	uxth	r3, r3
 80083c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083ca:	813b      	strh	r3, [r7, #8]
 80083cc:	687a      	ldr	r2, [r7, #4]
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	781b      	ldrb	r3, [r3, #0]
 80083d2:	009b      	lsls	r3, r3, #2
 80083d4:	441a      	add	r2, r3
 80083d6:	893b      	ldrh	r3, [r7, #8]
 80083d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083e8:	b29b      	uxth	r3, r3
 80083ea:	8013      	strh	r3, [r2, #0]
 80083ec:	e192      	b.n	8008714 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80083ee:	687a      	ldr	r2, [r7, #4]
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	781b      	ldrb	r3, [r3, #0]
 80083f4:	009b      	lsls	r3, r3, #2
 80083f6:	4413      	add	r3, r2
 80083f8:	881b      	ldrh	r3, [r3, #0]
 80083fa:	827b      	strh	r3, [r7, #18]
 80083fc:	8a7b      	ldrh	r3, [r7, #18]
 80083fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008402:	2b00      	cmp	r3, #0
 8008404:	d01b      	beq.n	800843e <USB_DeactivateEndpoint+0xf6>
 8008406:	687a      	ldr	r2, [r7, #4]
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	781b      	ldrb	r3, [r3, #0]
 800840c:	009b      	lsls	r3, r3, #2
 800840e:	4413      	add	r3, r2
 8008410:	881b      	ldrh	r3, [r3, #0]
 8008412:	b29b      	uxth	r3, r3
 8008414:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008418:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800841c:	823b      	strh	r3, [r7, #16]
 800841e:	687a      	ldr	r2, [r7, #4]
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	781b      	ldrb	r3, [r3, #0]
 8008424:	009b      	lsls	r3, r3, #2
 8008426:	441a      	add	r2, r3
 8008428:	8a3b      	ldrh	r3, [r7, #16]
 800842a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800842e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008432:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008436:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800843a:	b29b      	uxth	r3, r3
 800843c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800843e:	687a      	ldr	r2, [r7, #4]
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	781b      	ldrb	r3, [r3, #0]
 8008444:	009b      	lsls	r3, r3, #2
 8008446:	4413      	add	r3, r2
 8008448:	881b      	ldrh	r3, [r3, #0]
 800844a:	b29b      	uxth	r3, r3
 800844c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008450:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008454:	81fb      	strh	r3, [r7, #14]
 8008456:	687a      	ldr	r2, [r7, #4]
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	781b      	ldrb	r3, [r3, #0]
 800845c:	009b      	lsls	r3, r3, #2
 800845e:	441a      	add	r2, r3
 8008460:	89fb      	ldrh	r3, [r7, #14]
 8008462:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008466:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800846a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800846e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008472:	b29b      	uxth	r3, r3
 8008474:	8013      	strh	r3, [r2, #0]
 8008476:	e14d      	b.n	8008714 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	785b      	ldrb	r3, [r3, #1]
 800847c:	2b00      	cmp	r3, #0
 800847e:	f040 80a5 	bne.w	80085cc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008482:	687a      	ldr	r2, [r7, #4]
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	781b      	ldrb	r3, [r3, #0]
 8008488:	009b      	lsls	r3, r3, #2
 800848a:	4413      	add	r3, r2
 800848c:	881b      	ldrh	r3, [r3, #0]
 800848e:	843b      	strh	r3, [r7, #32]
 8008490:	8c3b      	ldrh	r3, [r7, #32]
 8008492:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008496:	2b00      	cmp	r3, #0
 8008498:	d01b      	beq.n	80084d2 <USB_DeactivateEndpoint+0x18a>
 800849a:	687a      	ldr	r2, [r7, #4]
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	781b      	ldrb	r3, [r3, #0]
 80084a0:	009b      	lsls	r3, r3, #2
 80084a2:	4413      	add	r3, r2
 80084a4:	881b      	ldrh	r3, [r3, #0]
 80084a6:	b29b      	uxth	r3, r3
 80084a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084b0:	83fb      	strh	r3, [r7, #30]
 80084b2:	687a      	ldr	r2, [r7, #4]
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	781b      	ldrb	r3, [r3, #0]
 80084b8:	009b      	lsls	r3, r3, #2
 80084ba:	441a      	add	r2, r3
 80084bc:	8bfb      	ldrh	r3, [r7, #30]
 80084be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80084ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084ce:	b29b      	uxth	r3, r3
 80084d0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80084d2:	687a      	ldr	r2, [r7, #4]
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	781b      	ldrb	r3, [r3, #0]
 80084d8:	009b      	lsls	r3, r3, #2
 80084da:	4413      	add	r3, r2
 80084dc:	881b      	ldrh	r3, [r3, #0]
 80084de:	83bb      	strh	r3, [r7, #28]
 80084e0:	8bbb      	ldrh	r3, [r7, #28]
 80084e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d01b      	beq.n	8008522 <USB_DeactivateEndpoint+0x1da>
 80084ea:	687a      	ldr	r2, [r7, #4]
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	781b      	ldrb	r3, [r3, #0]
 80084f0:	009b      	lsls	r3, r3, #2
 80084f2:	4413      	add	r3, r2
 80084f4:	881b      	ldrh	r3, [r3, #0]
 80084f6:	b29b      	uxth	r3, r3
 80084f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008500:	837b      	strh	r3, [r7, #26]
 8008502:	687a      	ldr	r2, [r7, #4]
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	781b      	ldrb	r3, [r3, #0]
 8008508:	009b      	lsls	r3, r3, #2
 800850a:	441a      	add	r2, r3
 800850c:	8b7b      	ldrh	r3, [r7, #26]
 800850e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008512:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008516:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800851a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800851e:	b29b      	uxth	r3, r3
 8008520:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008522:	687a      	ldr	r2, [r7, #4]
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	781b      	ldrb	r3, [r3, #0]
 8008528:	009b      	lsls	r3, r3, #2
 800852a:	4413      	add	r3, r2
 800852c:	881b      	ldrh	r3, [r3, #0]
 800852e:	b29b      	uxth	r3, r3
 8008530:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008534:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008538:	833b      	strh	r3, [r7, #24]
 800853a:	687a      	ldr	r2, [r7, #4]
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	781b      	ldrb	r3, [r3, #0]
 8008540:	009b      	lsls	r3, r3, #2
 8008542:	441a      	add	r2, r3
 8008544:	8b3b      	ldrh	r3, [r7, #24]
 8008546:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800854a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800854e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008552:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008556:	b29b      	uxth	r3, r3
 8008558:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800855a:	687a      	ldr	r2, [r7, #4]
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	781b      	ldrb	r3, [r3, #0]
 8008560:	009b      	lsls	r3, r3, #2
 8008562:	4413      	add	r3, r2
 8008564:	881b      	ldrh	r3, [r3, #0]
 8008566:	b29b      	uxth	r3, r3
 8008568:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800856c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008570:	82fb      	strh	r3, [r7, #22]
 8008572:	687a      	ldr	r2, [r7, #4]
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	781b      	ldrb	r3, [r3, #0]
 8008578:	009b      	lsls	r3, r3, #2
 800857a:	441a      	add	r2, r3
 800857c:	8afb      	ldrh	r3, [r7, #22]
 800857e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008582:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008586:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800858a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800858e:	b29b      	uxth	r3, r3
 8008590:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008592:	687a      	ldr	r2, [r7, #4]
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	781b      	ldrb	r3, [r3, #0]
 8008598:	009b      	lsls	r3, r3, #2
 800859a:	4413      	add	r3, r2
 800859c:	881b      	ldrh	r3, [r3, #0]
 800859e:	b29b      	uxth	r3, r3
 80085a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085a8:	82bb      	strh	r3, [r7, #20]
 80085aa:	687a      	ldr	r2, [r7, #4]
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	781b      	ldrb	r3, [r3, #0]
 80085b0:	009b      	lsls	r3, r3, #2
 80085b2:	441a      	add	r2, r3
 80085b4:	8abb      	ldrh	r3, [r7, #20]
 80085b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085c6:	b29b      	uxth	r3, r3
 80085c8:	8013      	strh	r3, [r2, #0]
 80085ca:	e0a3      	b.n	8008714 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80085cc:	687a      	ldr	r2, [r7, #4]
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	781b      	ldrb	r3, [r3, #0]
 80085d2:	009b      	lsls	r3, r3, #2
 80085d4:	4413      	add	r3, r2
 80085d6:	881b      	ldrh	r3, [r3, #0]
 80085d8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80085da:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80085dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d01b      	beq.n	800861c <USB_DeactivateEndpoint+0x2d4>
 80085e4:	687a      	ldr	r2, [r7, #4]
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	781b      	ldrb	r3, [r3, #0]
 80085ea:	009b      	lsls	r3, r3, #2
 80085ec:	4413      	add	r3, r2
 80085ee:	881b      	ldrh	r3, [r3, #0]
 80085f0:	b29b      	uxth	r3, r3
 80085f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085fa:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80085fc:	687a      	ldr	r2, [r7, #4]
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	781b      	ldrb	r3, [r3, #0]
 8008602:	009b      	lsls	r3, r3, #2
 8008604:	441a      	add	r2, r3
 8008606:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008608:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800860c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008610:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008614:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008618:	b29b      	uxth	r3, r3
 800861a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800861c:	687a      	ldr	r2, [r7, #4]
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	781b      	ldrb	r3, [r3, #0]
 8008622:	009b      	lsls	r3, r3, #2
 8008624:	4413      	add	r3, r2
 8008626:	881b      	ldrh	r3, [r3, #0]
 8008628:	857b      	strh	r3, [r7, #42]	; 0x2a
 800862a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800862c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008630:	2b00      	cmp	r3, #0
 8008632:	d01b      	beq.n	800866c <USB_DeactivateEndpoint+0x324>
 8008634:	687a      	ldr	r2, [r7, #4]
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	781b      	ldrb	r3, [r3, #0]
 800863a:	009b      	lsls	r3, r3, #2
 800863c:	4413      	add	r3, r2
 800863e:	881b      	ldrh	r3, [r3, #0]
 8008640:	b29b      	uxth	r3, r3
 8008642:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800864a:	853b      	strh	r3, [r7, #40]	; 0x28
 800864c:	687a      	ldr	r2, [r7, #4]
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	781b      	ldrb	r3, [r3, #0]
 8008652:	009b      	lsls	r3, r3, #2
 8008654:	441a      	add	r2, r3
 8008656:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008658:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800865c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008660:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008664:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008668:	b29b      	uxth	r3, r3
 800866a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800866c:	687a      	ldr	r2, [r7, #4]
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	781b      	ldrb	r3, [r3, #0]
 8008672:	009b      	lsls	r3, r3, #2
 8008674:	4413      	add	r3, r2
 8008676:	881b      	ldrh	r3, [r3, #0]
 8008678:	b29b      	uxth	r3, r3
 800867a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800867e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008682:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008684:	687a      	ldr	r2, [r7, #4]
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	781b      	ldrb	r3, [r3, #0]
 800868a:	009b      	lsls	r3, r3, #2
 800868c:	441a      	add	r2, r3
 800868e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008690:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008694:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008698:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800869c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086a0:	b29b      	uxth	r3, r3
 80086a2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80086a4:	687a      	ldr	r2, [r7, #4]
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	781b      	ldrb	r3, [r3, #0]
 80086aa:	009b      	lsls	r3, r3, #2
 80086ac:	4413      	add	r3, r2
 80086ae:	881b      	ldrh	r3, [r3, #0]
 80086b0:	b29b      	uxth	r3, r3
 80086b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086ba:	84bb      	strh	r3, [r7, #36]	; 0x24
 80086bc:	687a      	ldr	r2, [r7, #4]
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	781b      	ldrb	r3, [r3, #0]
 80086c2:	009b      	lsls	r3, r3, #2
 80086c4:	441a      	add	r2, r3
 80086c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80086c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086d8:	b29b      	uxth	r3, r3
 80086da:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80086dc:	687a      	ldr	r2, [r7, #4]
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	781b      	ldrb	r3, [r3, #0]
 80086e2:	009b      	lsls	r3, r3, #2
 80086e4:	4413      	add	r3, r2
 80086e6:	881b      	ldrh	r3, [r3, #0]
 80086e8:	b29b      	uxth	r3, r3
 80086ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80086ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086f2:	847b      	strh	r3, [r7, #34]	; 0x22
 80086f4:	687a      	ldr	r2, [r7, #4]
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	781b      	ldrb	r3, [r3, #0]
 80086fa:	009b      	lsls	r3, r3, #2
 80086fc:	441a      	add	r2, r3
 80086fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008700:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008704:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008708:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800870c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008710:	b29b      	uxth	r3, r3
 8008712:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008714:	2300      	movs	r3, #0
}
 8008716:	4618      	mov	r0, r3
 8008718:	3734      	adds	r7, #52	; 0x34
 800871a:	46bd      	mov	sp, r7
 800871c:	bc80      	pop	{r7}
 800871e:	4770      	bx	lr

08008720 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b0cc      	sub	sp, #304	; 0x130
 8008724:	af00      	add	r7, sp, #0
 8008726:	1d3b      	adds	r3, r7, #4
 8008728:	6018      	str	r0, [r3, #0]
 800872a:	463b      	mov	r3, r7
 800872c:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800872e:	463b      	mov	r3, r7
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	785b      	ldrb	r3, [r3, #1]
 8008734:	2b01      	cmp	r3, #1
 8008736:	f040 872e 	bne.w	8009596 <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800873a:	463b      	mov	r3, r7
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	699a      	ldr	r2, [r3, #24]
 8008740:	463b      	mov	r3, r7
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	691b      	ldr	r3, [r3, #16]
 8008746:	429a      	cmp	r2, r3
 8008748:	d905      	bls.n	8008756 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800874a:	463b      	mov	r3, r7
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	691b      	ldr	r3, [r3, #16]
 8008750:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8008754:	e004      	b.n	8008760 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8008756:	463b      	mov	r3, r7
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	699b      	ldr	r3, [r3, #24]
 800875c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008760:	463b      	mov	r3, r7
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	7b1b      	ldrb	r3, [r3, #12]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d134      	bne.n	80087d4 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800876a:	463b      	mov	r3, r7
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	6959      	ldr	r1, [r3, #20]
 8008770:	463b      	mov	r3, r7
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	88da      	ldrh	r2, [r3, #6]
 8008776:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800877a:	b29b      	uxth	r3, r3
 800877c:	1d38      	adds	r0, r7, #4
 800877e:	6800      	ldr	r0, [r0, #0]
 8008780:	f001 fc03 	bl	8009f8a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008784:	f107 0310 	add.w	r3, r7, #16
 8008788:	1d3a      	adds	r2, r7, #4
 800878a:	6812      	ldr	r2, [r2, #0]
 800878c:	601a      	str	r2, [r3, #0]
 800878e:	1d3b      	adds	r3, r7, #4
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008796:	b29b      	uxth	r3, r3
 8008798:	4619      	mov	r1, r3
 800879a:	f107 0310 	add.w	r3, r7, #16
 800879e:	f107 0210 	add.w	r2, r7, #16
 80087a2:	6812      	ldr	r2, [r2, #0]
 80087a4:	440a      	add	r2, r1
 80087a6:	601a      	str	r2, [r3, #0]
 80087a8:	463b      	mov	r3, r7
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	781b      	ldrb	r3, [r3, #0]
 80087ae:	011a      	lsls	r2, r3, #4
 80087b0:	f107 0310 	add.w	r3, r7, #16
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	4413      	add	r3, r2
 80087b8:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80087bc:	f107 030c 	add.w	r3, r7, #12
 80087c0:	601a      	str	r2, [r3, #0]
 80087c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087c6:	b29a      	uxth	r2, r3
 80087c8:	f107 030c 	add.w	r3, r7, #12
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	801a      	strh	r2, [r3, #0]
 80087d0:	f000 beac 	b.w	800952c <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80087d4:	463b      	mov	r3, r7
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	78db      	ldrb	r3, [r3, #3]
 80087da:	2b02      	cmp	r3, #2
 80087dc:	f040 838c 	bne.w	8008ef8 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80087e0:	463b      	mov	r3, r7
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	6a1a      	ldr	r2, [r3, #32]
 80087e6:	463b      	mov	r3, r7
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	691b      	ldr	r3, [r3, #16]
 80087ec:	429a      	cmp	r2, r3
 80087ee:	f240 8330 	bls.w	8008e52 <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80087f2:	1d3b      	adds	r3, r7, #4
 80087f4:	681a      	ldr	r2, [r3, #0]
 80087f6:	463b      	mov	r3, r7
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	781b      	ldrb	r3, [r3, #0]
 80087fc:	009b      	lsls	r3, r3, #2
 80087fe:	4413      	add	r3, r2
 8008800:	881b      	ldrh	r3, [r3, #0]
 8008802:	b29b      	uxth	r3, r3
 8008804:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008808:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800880c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8008810:	1d3b      	adds	r3, r7, #4
 8008812:	681a      	ldr	r2, [r3, #0]
 8008814:	463b      	mov	r3, r7
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	781b      	ldrb	r3, [r3, #0]
 800881a:	009b      	lsls	r3, r3, #2
 800881c:	441a      	add	r2, r3
 800881e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008822:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008826:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800882a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800882e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008832:	b29b      	uxth	r3, r3
 8008834:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008836:	463b      	mov	r3, r7
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	6a1a      	ldr	r2, [r3, #32]
 800883c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008840:	1ad2      	subs	r2, r2, r3
 8008842:	463b      	mov	r3, r7
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008848:	1d3b      	adds	r3, r7, #4
 800884a:	681a      	ldr	r2, [r3, #0]
 800884c:	463b      	mov	r3, r7
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	781b      	ldrb	r3, [r3, #0]
 8008852:	009b      	lsls	r3, r3, #2
 8008854:	4413      	add	r3, r2
 8008856:	881b      	ldrh	r3, [r3, #0]
 8008858:	b29b      	uxth	r3, r3
 800885a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800885e:	2b00      	cmp	r3, #0
 8008860:	f000 819e 	beq.w	8008ba0 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008864:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008868:	1d3a      	adds	r2, r7, #4
 800886a:	6812      	ldr	r2, [r2, #0]
 800886c:	601a      	str	r2, [r3, #0]
 800886e:	463b      	mov	r3, r7
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	785b      	ldrb	r3, [r3, #1]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d17a      	bne.n	800896e <USB_EPStartXfer+0x24e>
 8008878:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800887c:	1d3a      	adds	r2, r7, #4
 800887e:	6812      	ldr	r2, [r2, #0]
 8008880:	601a      	str	r2, [r3, #0]
 8008882:	1d3b      	adds	r3, r7, #4
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800888a:	b29b      	uxth	r3, r3
 800888c:	4619      	mov	r1, r3
 800888e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008892:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008896:	6812      	ldr	r2, [r2, #0]
 8008898:	440a      	add	r2, r1
 800889a:	601a      	str	r2, [r3, #0]
 800889c:	463b      	mov	r3, r7
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	781b      	ldrb	r3, [r3, #0]
 80088a2:	011a      	lsls	r2, r3, #4
 80088a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4413      	add	r3, r2
 80088ac:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80088b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80088b4:	601a      	str	r2, [r3, #0]
 80088b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d11a      	bne.n	80088f4 <USB_EPStartXfer+0x1d4>
 80088be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	881b      	ldrh	r3, [r3, #0]
 80088c6:	b29b      	uxth	r3, r3
 80088c8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80088cc:	b29a      	uxth	r2, r3
 80088ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	801a      	strh	r2, [r3, #0]
 80088d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	881b      	ldrh	r3, [r3, #0]
 80088de:	b29b      	uxth	r3, r3
 80088e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088e8:	b29a      	uxth	r2, r3
 80088ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	801a      	strh	r2, [r3, #0]
 80088f2:	e062      	b.n	80089ba <USB_EPStartXfer+0x29a>
 80088f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088f8:	2b3e      	cmp	r3, #62	; 0x3e
 80088fa:	d819      	bhi.n	8008930 <USB_EPStartXfer+0x210>
 80088fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008900:	085b      	lsrs	r3, r3, #1
 8008902:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008906:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800890a:	f003 0301 	and.w	r3, r3, #1
 800890e:	2b00      	cmp	r3, #0
 8008910:	d004      	beq.n	800891c <USB_EPStartXfer+0x1fc>
 8008912:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008916:	3301      	adds	r3, #1
 8008918:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800891c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008920:	b29b      	uxth	r3, r3
 8008922:	029b      	lsls	r3, r3, #10
 8008924:	b29a      	uxth	r2, r3
 8008926:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	801a      	strh	r2, [r3, #0]
 800892e:	e044      	b.n	80089ba <USB_EPStartXfer+0x29a>
 8008930:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008934:	095b      	lsrs	r3, r3, #5
 8008936:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800893a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800893e:	f003 031f 	and.w	r3, r3, #31
 8008942:	2b00      	cmp	r3, #0
 8008944:	d104      	bne.n	8008950 <USB_EPStartXfer+0x230>
 8008946:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800894a:	3b01      	subs	r3, #1
 800894c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008950:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008954:	b29b      	uxth	r3, r3
 8008956:	029b      	lsls	r3, r3, #10
 8008958:	b29b      	uxth	r3, r3
 800895a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800895e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008962:	b29a      	uxth	r2, r3
 8008964:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	801a      	strh	r2, [r3, #0]
 800896c:	e025      	b.n	80089ba <USB_EPStartXfer+0x29a>
 800896e:	463b      	mov	r3, r7
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	785b      	ldrb	r3, [r3, #1]
 8008974:	2b01      	cmp	r3, #1
 8008976:	d120      	bne.n	80089ba <USB_EPStartXfer+0x29a>
 8008978:	1d3b      	adds	r3, r7, #4
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008980:	b29b      	uxth	r3, r3
 8008982:	4619      	mov	r1, r3
 8008984:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008988:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800898c:	6812      	ldr	r2, [r2, #0]
 800898e:	440a      	add	r2, r1
 8008990:	601a      	str	r2, [r3, #0]
 8008992:	463b      	mov	r3, r7
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	781b      	ldrb	r3, [r3, #0]
 8008998:	011a      	lsls	r2, r3, #4
 800899a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	4413      	add	r3, r2
 80089a2:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80089a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80089aa:	601a      	str	r2, [r3, #0]
 80089ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089b0:	b29a      	uxth	r2, r3
 80089b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80089ba:	463b      	mov	r3, r7
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	895b      	ldrh	r3, [r3, #10]
 80089c0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80089c4:	463b      	mov	r3, r7
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	6959      	ldr	r1, [r3, #20]
 80089ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089ce:	b29b      	uxth	r3, r3
 80089d0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80089d4:	1d38      	adds	r0, r7, #4
 80089d6:	6800      	ldr	r0, [r0, #0]
 80089d8:	f001 fad7 	bl	8009f8a <USB_WritePMA>
            ep->xfer_buff += len;
 80089dc:	463b      	mov	r3, r7
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	695a      	ldr	r2, [r3, #20]
 80089e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089e6:	441a      	add	r2, r3
 80089e8:	463b      	mov	r3, r7
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80089ee:	463b      	mov	r3, r7
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	6a1a      	ldr	r2, [r3, #32]
 80089f4:	463b      	mov	r3, r7
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	691b      	ldr	r3, [r3, #16]
 80089fa:	429a      	cmp	r2, r3
 80089fc:	d909      	bls.n	8008a12 <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 80089fe:	463b      	mov	r3, r7
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	6a1a      	ldr	r2, [r3, #32]
 8008a04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a08:	1ad2      	subs	r2, r2, r3
 8008a0a:	463b      	mov	r3, r7
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	621a      	str	r2, [r3, #32]
 8008a10:	e008      	b.n	8008a24 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 8008a12:	463b      	mov	r3, r7
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	6a1b      	ldr	r3, [r3, #32]
 8008a18:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8008a1c:	463b      	mov	r3, r7
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	2200      	movs	r2, #0
 8008a22:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008a24:	463b      	mov	r3, r7
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	785b      	ldrb	r3, [r3, #1]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d17a      	bne.n	8008b24 <USB_EPStartXfer+0x404>
 8008a2e:	f107 0318 	add.w	r3, r7, #24
 8008a32:	1d3a      	adds	r2, r7, #4
 8008a34:	6812      	ldr	r2, [r2, #0]
 8008a36:	601a      	str	r2, [r3, #0]
 8008a38:	1d3b      	adds	r3, r7, #4
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a40:	b29b      	uxth	r3, r3
 8008a42:	4619      	mov	r1, r3
 8008a44:	f107 0318 	add.w	r3, r7, #24
 8008a48:	f107 0218 	add.w	r2, r7, #24
 8008a4c:	6812      	ldr	r2, [r2, #0]
 8008a4e:	440a      	add	r2, r1
 8008a50:	601a      	str	r2, [r3, #0]
 8008a52:	463b      	mov	r3, r7
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	781b      	ldrb	r3, [r3, #0]
 8008a58:	011a      	lsls	r2, r3, #4
 8008a5a:	f107 0318 	add.w	r3, r7, #24
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	4413      	add	r3, r2
 8008a62:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8008a66:	f107 0314 	add.w	r3, r7, #20
 8008a6a:	601a      	str	r2, [r3, #0]
 8008a6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d11a      	bne.n	8008aaa <USB_EPStartXfer+0x38a>
 8008a74:	f107 0314 	add.w	r3, r7, #20
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	881b      	ldrh	r3, [r3, #0]
 8008a7c:	b29b      	uxth	r3, r3
 8008a7e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008a82:	b29a      	uxth	r2, r3
 8008a84:	f107 0314 	add.w	r3, r7, #20
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	801a      	strh	r2, [r3, #0]
 8008a8c:	f107 0314 	add.w	r3, r7, #20
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	881b      	ldrh	r3, [r3, #0]
 8008a94:	b29b      	uxth	r3, r3
 8008a96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a9e:	b29a      	uxth	r2, r3
 8008aa0:	f107 0314 	add.w	r3, r7, #20
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	801a      	strh	r2, [r3, #0]
 8008aa8:	e067      	b.n	8008b7a <USB_EPStartXfer+0x45a>
 8008aaa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008aae:	2b3e      	cmp	r3, #62	; 0x3e
 8008ab0:	d819      	bhi.n	8008ae6 <USB_EPStartXfer+0x3c6>
 8008ab2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ab6:	085b      	lsrs	r3, r3, #1
 8008ab8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008abc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ac0:	f003 0301 	and.w	r3, r3, #1
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d004      	beq.n	8008ad2 <USB_EPStartXfer+0x3b2>
 8008ac8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008acc:	3301      	adds	r3, #1
 8008ace:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008ad2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008ad6:	b29b      	uxth	r3, r3
 8008ad8:	029b      	lsls	r3, r3, #10
 8008ada:	b29a      	uxth	r2, r3
 8008adc:	f107 0314 	add.w	r3, r7, #20
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	801a      	strh	r2, [r3, #0]
 8008ae4:	e049      	b.n	8008b7a <USB_EPStartXfer+0x45a>
 8008ae6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008aea:	095b      	lsrs	r3, r3, #5
 8008aec:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008af0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008af4:	f003 031f 	and.w	r3, r3, #31
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d104      	bne.n	8008b06 <USB_EPStartXfer+0x3e6>
 8008afc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008b00:	3b01      	subs	r3, #1
 8008b02:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008b06:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008b0a:	b29b      	uxth	r3, r3
 8008b0c:	029b      	lsls	r3, r3, #10
 8008b0e:	b29b      	uxth	r3, r3
 8008b10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b18:	b29a      	uxth	r2, r3
 8008b1a:	f107 0314 	add.w	r3, r7, #20
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	801a      	strh	r2, [r3, #0]
 8008b22:	e02a      	b.n	8008b7a <USB_EPStartXfer+0x45a>
 8008b24:	463b      	mov	r3, r7
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	785b      	ldrb	r3, [r3, #1]
 8008b2a:	2b01      	cmp	r3, #1
 8008b2c:	d125      	bne.n	8008b7a <USB_EPStartXfer+0x45a>
 8008b2e:	f107 0320 	add.w	r3, r7, #32
 8008b32:	1d3a      	adds	r2, r7, #4
 8008b34:	6812      	ldr	r2, [r2, #0]
 8008b36:	601a      	str	r2, [r3, #0]
 8008b38:	1d3b      	adds	r3, r7, #4
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b40:	b29b      	uxth	r3, r3
 8008b42:	4619      	mov	r1, r3
 8008b44:	f107 0320 	add.w	r3, r7, #32
 8008b48:	f107 0220 	add.w	r2, r7, #32
 8008b4c:	6812      	ldr	r2, [r2, #0]
 8008b4e:	440a      	add	r2, r1
 8008b50:	601a      	str	r2, [r3, #0]
 8008b52:	463b      	mov	r3, r7
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	781b      	ldrb	r3, [r3, #0]
 8008b58:	011a      	lsls	r2, r3, #4
 8008b5a:	f107 0320 	add.w	r3, r7, #32
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	4413      	add	r3, r2
 8008b62:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8008b66:	f107 031c 	add.w	r3, r7, #28
 8008b6a:	601a      	str	r2, [r3, #0]
 8008b6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b70:	b29a      	uxth	r2, r3
 8008b72:	f107 031c 	add.w	r3, r7, #28
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008b7a:	463b      	mov	r3, r7
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	891b      	ldrh	r3, [r3, #8]
 8008b80:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008b84:	463b      	mov	r3, r7
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	6959      	ldr	r1, [r3, #20]
 8008b8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b8e:	b29b      	uxth	r3, r3
 8008b90:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008b94:	1d38      	adds	r0, r7, #4
 8008b96:	6800      	ldr	r0, [r0, #0]
 8008b98:	f001 f9f7 	bl	8009f8a <USB_WritePMA>
 8008b9c:	f000 bcc6 	b.w	800952c <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008ba0:	463b      	mov	r3, r7
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	785b      	ldrb	r3, [r3, #1]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d164      	bne.n	8008c74 <USB_EPStartXfer+0x554>
 8008baa:	1d3b      	adds	r3, r7, #4
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	64bb      	str	r3, [r7, #72]	; 0x48
 8008bb0:	1d3b      	adds	r3, r7, #4
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008bb8:	b29b      	uxth	r3, r3
 8008bba:	461a      	mov	r2, r3
 8008bbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bbe:	4413      	add	r3, r2
 8008bc0:	64bb      	str	r3, [r7, #72]	; 0x48
 8008bc2:	463b      	mov	r3, r7
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	781b      	ldrb	r3, [r3, #0]
 8008bc8:	011a      	lsls	r2, r3, #4
 8008bca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bcc:	4413      	add	r3, r2
 8008bce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008bd2:	647b      	str	r3, [r7, #68]	; 0x44
 8008bd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d112      	bne.n	8008c02 <USB_EPStartXfer+0x4e2>
 8008bdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bde:	881b      	ldrh	r3, [r3, #0]
 8008be0:	b29b      	uxth	r3, r3
 8008be2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008be6:	b29a      	uxth	r2, r3
 8008be8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bea:	801a      	strh	r2, [r3, #0]
 8008bec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bee:	881b      	ldrh	r3, [r3, #0]
 8008bf0:	b29b      	uxth	r3, r3
 8008bf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bfa:	b29a      	uxth	r2, r3
 8008bfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bfe:	801a      	strh	r2, [r3, #0]
 8008c00:	e057      	b.n	8008cb2 <USB_EPStartXfer+0x592>
 8008c02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c06:	2b3e      	cmp	r3, #62	; 0x3e
 8008c08:	d817      	bhi.n	8008c3a <USB_EPStartXfer+0x51a>
 8008c0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c0e:	085b      	lsrs	r3, r3, #1
 8008c10:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008c14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c18:	f003 0301 	and.w	r3, r3, #1
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d004      	beq.n	8008c2a <USB_EPStartXfer+0x50a>
 8008c20:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008c24:	3301      	adds	r3, #1
 8008c26:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008c2a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008c2e:	b29b      	uxth	r3, r3
 8008c30:	029b      	lsls	r3, r3, #10
 8008c32:	b29a      	uxth	r2, r3
 8008c34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c36:	801a      	strh	r2, [r3, #0]
 8008c38:	e03b      	b.n	8008cb2 <USB_EPStartXfer+0x592>
 8008c3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c3e:	095b      	lsrs	r3, r3, #5
 8008c40:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008c44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c48:	f003 031f 	and.w	r3, r3, #31
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d104      	bne.n	8008c5a <USB_EPStartXfer+0x53a>
 8008c50:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008c54:	3b01      	subs	r3, #1
 8008c56:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008c5a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008c5e:	b29b      	uxth	r3, r3
 8008c60:	029b      	lsls	r3, r3, #10
 8008c62:	b29b      	uxth	r3, r3
 8008c64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c6c:	b29a      	uxth	r2, r3
 8008c6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c70:	801a      	strh	r2, [r3, #0]
 8008c72:	e01e      	b.n	8008cb2 <USB_EPStartXfer+0x592>
 8008c74:	463b      	mov	r3, r7
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	785b      	ldrb	r3, [r3, #1]
 8008c7a:	2b01      	cmp	r3, #1
 8008c7c:	d119      	bne.n	8008cb2 <USB_EPStartXfer+0x592>
 8008c7e:	1d3b      	adds	r3, r7, #4
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	653b      	str	r3, [r7, #80]	; 0x50
 8008c84:	1d3b      	adds	r3, r7, #4
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c8c:	b29b      	uxth	r3, r3
 8008c8e:	461a      	mov	r2, r3
 8008c90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c92:	4413      	add	r3, r2
 8008c94:	653b      	str	r3, [r7, #80]	; 0x50
 8008c96:	463b      	mov	r3, r7
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	781b      	ldrb	r3, [r3, #0]
 8008c9c:	011a      	lsls	r2, r3, #4
 8008c9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ca0:	4413      	add	r3, r2
 8008ca2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008ca6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ca8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cac:	b29a      	uxth	r2, r3
 8008cae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cb0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008cb2:	463b      	mov	r3, r7
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	891b      	ldrh	r3, [r3, #8]
 8008cb8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008cbc:	463b      	mov	r3, r7
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	6959      	ldr	r1, [r3, #20]
 8008cc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cc6:	b29b      	uxth	r3, r3
 8008cc8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008ccc:	1d38      	adds	r0, r7, #4
 8008cce:	6800      	ldr	r0, [r0, #0]
 8008cd0:	f001 f95b 	bl	8009f8a <USB_WritePMA>
            ep->xfer_buff += len;
 8008cd4:	463b      	mov	r3, r7
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	695a      	ldr	r2, [r3, #20]
 8008cda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cde:	441a      	add	r2, r3
 8008ce0:	463b      	mov	r3, r7
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008ce6:	463b      	mov	r3, r7
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	6a1a      	ldr	r2, [r3, #32]
 8008cec:	463b      	mov	r3, r7
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	691b      	ldr	r3, [r3, #16]
 8008cf2:	429a      	cmp	r2, r3
 8008cf4:	d909      	bls.n	8008d0a <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 8008cf6:	463b      	mov	r3, r7
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	6a1a      	ldr	r2, [r3, #32]
 8008cfc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d00:	1ad2      	subs	r2, r2, r3
 8008d02:	463b      	mov	r3, r7
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	621a      	str	r2, [r3, #32]
 8008d08:	e008      	b.n	8008d1c <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8008d0a:	463b      	mov	r3, r7
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	6a1b      	ldr	r3, [r3, #32]
 8008d10:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8008d14:	463b      	mov	r3, r7
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008d1c:	1d3b      	adds	r3, r7, #4
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	643b      	str	r3, [r7, #64]	; 0x40
 8008d22:	463b      	mov	r3, r7
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	785b      	ldrb	r3, [r3, #1]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d164      	bne.n	8008df6 <USB_EPStartXfer+0x6d6>
 8008d2c:	1d3b      	adds	r3, r7, #4
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	63bb      	str	r3, [r7, #56]	; 0x38
 8008d32:	1d3b      	adds	r3, r7, #4
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d3a:	b29b      	uxth	r3, r3
 8008d3c:	461a      	mov	r2, r3
 8008d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d40:	4413      	add	r3, r2
 8008d42:	63bb      	str	r3, [r7, #56]	; 0x38
 8008d44:	463b      	mov	r3, r7
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	781b      	ldrb	r3, [r3, #0]
 8008d4a:	011a      	lsls	r2, r3, #4
 8008d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d4e:	4413      	add	r3, r2
 8008d50:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008d54:	637b      	str	r3, [r7, #52]	; 0x34
 8008d56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d112      	bne.n	8008d84 <USB_EPStartXfer+0x664>
 8008d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d60:	881b      	ldrh	r3, [r3, #0]
 8008d62:	b29b      	uxth	r3, r3
 8008d64:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008d68:	b29a      	uxth	r2, r3
 8008d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d6c:	801a      	strh	r2, [r3, #0]
 8008d6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d70:	881b      	ldrh	r3, [r3, #0]
 8008d72:	b29b      	uxth	r3, r3
 8008d74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d7c:	b29a      	uxth	r2, r3
 8008d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d80:	801a      	strh	r2, [r3, #0]
 8008d82:	e054      	b.n	8008e2e <USB_EPStartXfer+0x70e>
 8008d84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d88:	2b3e      	cmp	r3, #62	; 0x3e
 8008d8a:	d817      	bhi.n	8008dbc <USB_EPStartXfer+0x69c>
 8008d8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d90:	085b      	lsrs	r3, r3, #1
 8008d92:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008d96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d9a:	f003 0301 	and.w	r3, r3, #1
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d004      	beq.n	8008dac <USB_EPStartXfer+0x68c>
 8008da2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008da6:	3301      	adds	r3, #1
 8008da8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008dac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008db0:	b29b      	uxth	r3, r3
 8008db2:	029b      	lsls	r3, r3, #10
 8008db4:	b29a      	uxth	r2, r3
 8008db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008db8:	801a      	strh	r2, [r3, #0]
 8008dba:	e038      	b.n	8008e2e <USB_EPStartXfer+0x70e>
 8008dbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008dc0:	095b      	lsrs	r3, r3, #5
 8008dc2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008dc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008dca:	f003 031f 	and.w	r3, r3, #31
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d104      	bne.n	8008ddc <USB_EPStartXfer+0x6bc>
 8008dd2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008dd6:	3b01      	subs	r3, #1
 8008dd8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008ddc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008de0:	b29b      	uxth	r3, r3
 8008de2:	029b      	lsls	r3, r3, #10
 8008de4:	b29b      	uxth	r3, r3
 8008de6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008dea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008dee:	b29a      	uxth	r2, r3
 8008df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008df2:	801a      	strh	r2, [r3, #0]
 8008df4:	e01b      	b.n	8008e2e <USB_EPStartXfer+0x70e>
 8008df6:	463b      	mov	r3, r7
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	785b      	ldrb	r3, [r3, #1]
 8008dfc:	2b01      	cmp	r3, #1
 8008dfe:	d116      	bne.n	8008e2e <USB_EPStartXfer+0x70e>
 8008e00:	1d3b      	adds	r3, r7, #4
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e08:	b29b      	uxth	r3, r3
 8008e0a:	461a      	mov	r2, r3
 8008e0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e0e:	4413      	add	r3, r2
 8008e10:	643b      	str	r3, [r7, #64]	; 0x40
 8008e12:	463b      	mov	r3, r7
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	781b      	ldrb	r3, [r3, #0]
 8008e18:	011a      	lsls	r2, r3, #4
 8008e1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e1c:	4413      	add	r3, r2
 8008e1e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008e22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e28:	b29a      	uxth	r2, r3
 8008e2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e2c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008e2e:	463b      	mov	r3, r7
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	895b      	ldrh	r3, [r3, #10]
 8008e34:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008e38:	463b      	mov	r3, r7
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	6959      	ldr	r1, [r3, #20]
 8008e3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e42:	b29b      	uxth	r3, r3
 8008e44:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008e48:	1d38      	adds	r0, r7, #4
 8008e4a:	6800      	ldr	r0, [r0, #0]
 8008e4c:	f001 f89d 	bl	8009f8a <USB_WritePMA>
 8008e50:	e36c      	b.n	800952c <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008e52:	463b      	mov	r3, r7
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	6a1b      	ldr	r3, [r3, #32]
 8008e58:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8008e5c:	1d3b      	adds	r3, r7, #4
 8008e5e:	681a      	ldr	r2, [r3, #0]
 8008e60:	463b      	mov	r3, r7
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	781b      	ldrb	r3, [r3, #0]
 8008e66:	009b      	lsls	r3, r3, #2
 8008e68:	4413      	add	r3, r2
 8008e6a:	881b      	ldrh	r3, [r3, #0]
 8008e6c:	b29b      	uxth	r3, r3
 8008e6e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8008e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e76:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8008e7a:	1d3b      	adds	r3, r7, #4
 8008e7c:	681a      	ldr	r2, [r3, #0]
 8008e7e:	463b      	mov	r3, r7
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	781b      	ldrb	r3, [r3, #0]
 8008e84:	009b      	lsls	r3, r3, #2
 8008e86:	441a      	add	r2, r3
 8008e88:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008e8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e9c:	b29b      	uxth	r3, r3
 8008e9e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008ea0:	1d3b      	adds	r3, r7, #4
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ea6:	1d3b      	adds	r3, r7, #4
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008eae:	b29b      	uxth	r3, r3
 8008eb0:	461a      	mov	r2, r3
 8008eb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008eb4:	4413      	add	r3, r2
 8008eb6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008eb8:	463b      	mov	r3, r7
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	781b      	ldrb	r3, [r3, #0]
 8008ebe:	011a      	lsls	r2, r3, #4
 8008ec0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ec2:	4413      	add	r3, r2
 8008ec4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008ec8:	65bb      	str	r3, [r7, #88]	; 0x58
 8008eca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ece:	b29a      	uxth	r2, r3
 8008ed0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008ed2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008ed4:	463b      	mov	r3, r7
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	891b      	ldrh	r3, [r3, #8]
 8008eda:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008ede:	463b      	mov	r3, r7
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	6959      	ldr	r1, [r3, #20]
 8008ee4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ee8:	b29b      	uxth	r3, r3
 8008eea:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008eee:	1d38      	adds	r0, r7, #4
 8008ef0:	6800      	ldr	r0, [r0, #0]
 8008ef2:	f001 f84a 	bl	8009f8a <USB_WritePMA>
 8008ef6:	e319      	b.n	800952c <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8008ef8:	1d3b      	adds	r3, r7, #4
 8008efa:	681a      	ldr	r2, [r3, #0]
 8008efc:	463b      	mov	r3, r7
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	781b      	ldrb	r3, [r3, #0]
 8008f02:	009b      	lsls	r3, r3, #2
 8008f04:	4413      	add	r3, r2
 8008f06:	881b      	ldrh	r3, [r3, #0]
 8008f08:	b29b      	uxth	r3, r3
 8008f0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f12:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8008f16:	1d3b      	adds	r3, r7, #4
 8008f18:	681a      	ldr	r2, [r3, #0]
 8008f1a:	463b      	mov	r3, r7
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	781b      	ldrb	r3, [r3, #0]
 8008f20:	009b      	lsls	r3, r3, #2
 8008f22:	441a      	add	r2, r3
 8008f24:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8008f28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f30:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008f34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f38:	b29b      	uxth	r3, r3
 8008f3a:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008f3c:	463b      	mov	r3, r7
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	6a1a      	ldr	r2, [r3, #32]
 8008f42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f46:	1ad2      	subs	r2, r2, r3
 8008f48:	463b      	mov	r3, r7
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008f4e:	1d3b      	adds	r3, r7, #4
 8008f50:	681a      	ldr	r2, [r3, #0]
 8008f52:	463b      	mov	r3, r7
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	781b      	ldrb	r3, [r3, #0]
 8008f58:	009b      	lsls	r3, r3, #2
 8008f5a:	4413      	add	r3, r2
 8008f5c:	881b      	ldrh	r3, [r3, #0]
 8008f5e:	b29b      	uxth	r3, r3
 8008f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	f000 8162 	beq.w	800922e <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008f6a:	1d3b      	adds	r3, r7, #4
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008f72:	463b      	mov	r3, r7
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	785b      	ldrb	r3, [r3, #1]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d164      	bne.n	8009046 <USB_EPStartXfer+0x926>
 8008f7c:	1d3b      	adds	r3, r7, #4
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	67bb      	str	r3, [r7, #120]	; 0x78
 8008f82:	1d3b      	adds	r3, r7, #4
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f8a:	b29b      	uxth	r3, r3
 8008f8c:	461a      	mov	r2, r3
 8008f8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f90:	4413      	add	r3, r2
 8008f92:	67bb      	str	r3, [r7, #120]	; 0x78
 8008f94:	463b      	mov	r3, r7
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	781b      	ldrb	r3, [r3, #0]
 8008f9a:	011a      	lsls	r2, r3, #4
 8008f9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f9e:	4413      	add	r3, r2
 8008fa0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008fa4:	677b      	str	r3, [r7, #116]	; 0x74
 8008fa6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d112      	bne.n	8008fd4 <USB_EPStartXfer+0x8b4>
 8008fae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008fb0:	881b      	ldrh	r3, [r3, #0]
 8008fb2:	b29b      	uxth	r3, r3
 8008fb4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008fb8:	b29a      	uxth	r2, r3
 8008fba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008fbc:	801a      	strh	r2, [r3, #0]
 8008fbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008fc0:	881b      	ldrh	r3, [r3, #0]
 8008fc2:	b29b      	uxth	r3, r3
 8008fc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008fc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008fcc:	b29a      	uxth	r2, r3
 8008fce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008fd0:	801a      	strh	r2, [r3, #0]
 8008fd2:	e057      	b.n	8009084 <USB_EPStartXfer+0x964>
 8008fd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fd8:	2b3e      	cmp	r3, #62	; 0x3e
 8008fda:	d817      	bhi.n	800900c <USB_EPStartXfer+0x8ec>
 8008fdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fe0:	085b      	lsrs	r3, r3, #1
 8008fe2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008fe6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fea:	f003 0301 	and.w	r3, r3, #1
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d004      	beq.n	8008ffc <USB_EPStartXfer+0x8dc>
 8008ff2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008ff6:	3301      	adds	r3, #1
 8008ff8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008ffc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009000:	b29b      	uxth	r3, r3
 8009002:	029b      	lsls	r3, r3, #10
 8009004:	b29a      	uxth	r2, r3
 8009006:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009008:	801a      	strh	r2, [r3, #0]
 800900a:	e03b      	b.n	8009084 <USB_EPStartXfer+0x964>
 800900c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009010:	095b      	lsrs	r3, r3, #5
 8009012:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009016:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800901a:	f003 031f 	and.w	r3, r3, #31
 800901e:	2b00      	cmp	r3, #0
 8009020:	d104      	bne.n	800902c <USB_EPStartXfer+0x90c>
 8009022:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009026:	3b01      	subs	r3, #1
 8009028:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800902c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009030:	b29b      	uxth	r3, r3
 8009032:	029b      	lsls	r3, r3, #10
 8009034:	b29b      	uxth	r3, r3
 8009036:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800903a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800903e:	b29a      	uxth	r2, r3
 8009040:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009042:	801a      	strh	r2, [r3, #0]
 8009044:	e01e      	b.n	8009084 <USB_EPStartXfer+0x964>
 8009046:	463b      	mov	r3, r7
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	785b      	ldrb	r3, [r3, #1]
 800904c:	2b01      	cmp	r3, #1
 800904e:	d119      	bne.n	8009084 <USB_EPStartXfer+0x964>
 8009050:	1d3b      	adds	r3, r7, #4
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009058:	b29b      	uxth	r3, r3
 800905a:	461a      	mov	r2, r3
 800905c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009060:	4413      	add	r3, r2
 8009062:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009066:	463b      	mov	r3, r7
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	781b      	ldrb	r3, [r3, #0]
 800906c:	011a      	lsls	r2, r3, #4
 800906e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009072:	4413      	add	r3, r2
 8009074:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009078:	67fb      	str	r3, [r7, #124]	; 0x7c
 800907a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800907e:	b29a      	uxth	r2, r3
 8009080:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009082:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009084:	463b      	mov	r3, r7
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	895b      	ldrh	r3, [r3, #10]
 800908a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800908e:	463b      	mov	r3, r7
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	6959      	ldr	r1, [r3, #20]
 8009094:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009098:	b29b      	uxth	r3, r3
 800909a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800909e:	1d38      	adds	r0, r7, #4
 80090a0:	6800      	ldr	r0, [r0, #0]
 80090a2:	f000 ff72 	bl	8009f8a <USB_WritePMA>
          ep->xfer_buff += len;
 80090a6:	463b      	mov	r3, r7
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	695a      	ldr	r2, [r3, #20]
 80090ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090b0:	441a      	add	r2, r3
 80090b2:	463b      	mov	r3, r7
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80090b8:	463b      	mov	r3, r7
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	6a1a      	ldr	r2, [r3, #32]
 80090be:	463b      	mov	r3, r7
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	691b      	ldr	r3, [r3, #16]
 80090c4:	429a      	cmp	r2, r3
 80090c6:	d909      	bls.n	80090dc <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 80090c8:	463b      	mov	r3, r7
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	6a1a      	ldr	r2, [r3, #32]
 80090ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090d2:	1ad2      	subs	r2, r2, r3
 80090d4:	463b      	mov	r3, r7
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	621a      	str	r2, [r3, #32]
 80090da:	e008      	b.n	80090ee <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 80090dc:	463b      	mov	r3, r7
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	6a1b      	ldr	r3, [r3, #32]
 80090e2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80090e6:	463b      	mov	r3, r7
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	2200      	movs	r2, #0
 80090ec:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80090ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	f000 821a 	beq.w	800952c <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80090f8:	463b      	mov	r3, r7
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	785b      	ldrb	r3, [r3, #1]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d164      	bne.n	80091cc <USB_EPStartXfer+0xaac>
 8009102:	1d3b      	adds	r3, r7, #4
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	66bb      	str	r3, [r7, #104]	; 0x68
 8009108:	1d3b      	adds	r3, r7, #4
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009110:	b29b      	uxth	r3, r3
 8009112:	461a      	mov	r2, r3
 8009114:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009116:	4413      	add	r3, r2
 8009118:	66bb      	str	r3, [r7, #104]	; 0x68
 800911a:	463b      	mov	r3, r7
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	781b      	ldrb	r3, [r3, #0]
 8009120:	011a      	lsls	r2, r3, #4
 8009122:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009124:	4413      	add	r3, r2
 8009126:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800912a:	667b      	str	r3, [r7, #100]	; 0x64
 800912c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009130:	2b00      	cmp	r3, #0
 8009132:	d112      	bne.n	800915a <USB_EPStartXfer+0xa3a>
 8009134:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009136:	881b      	ldrh	r3, [r3, #0]
 8009138:	b29b      	uxth	r3, r3
 800913a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800913e:	b29a      	uxth	r2, r3
 8009140:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009142:	801a      	strh	r2, [r3, #0]
 8009144:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009146:	881b      	ldrh	r3, [r3, #0]
 8009148:	b29b      	uxth	r3, r3
 800914a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800914e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009152:	b29a      	uxth	r2, r3
 8009154:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009156:	801a      	strh	r2, [r3, #0]
 8009158:	e057      	b.n	800920a <USB_EPStartXfer+0xaea>
 800915a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800915e:	2b3e      	cmp	r3, #62	; 0x3e
 8009160:	d817      	bhi.n	8009192 <USB_EPStartXfer+0xa72>
 8009162:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009166:	085b      	lsrs	r3, r3, #1
 8009168:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800916c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009170:	f003 0301 	and.w	r3, r3, #1
 8009174:	2b00      	cmp	r3, #0
 8009176:	d004      	beq.n	8009182 <USB_EPStartXfer+0xa62>
 8009178:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800917c:	3301      	adds	r3, #1
 800917e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8009182:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009186:	b29b      	uxth	r3, r3
 8009188:	029b      	lsls	r3, r3, #10
 800918a:	b29a      	uxth	r2, r3
 800918c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800918e:	801a      	strh	r2, [r3, #0]
 8009190:	e03b      	b.n	800920a <USB_EPStartXfer+0xaea>
 8009192:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009196:	095b      	lsrs	r3, r3, #5
 8009198:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800919c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091a0:	f003 031f 	and.w	r3, r3, #31
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d104      	bne.n	80091b2 <USB_EPStartXfer+0xa92>
 80091a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091ac:	3b01      	subs	r3, #1
 80091ae:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80091b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091b6:	b29b      	uxth	r3, r3
 80091b8:	029b      	lsls	r3, r3, #10
 80091ba:	b29b      	uxth	r3, r3
 80091bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80091c4:	b29a      	uxth	r2, r3
 80091c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80091c8:	801a      	strh	r2, [r3, #0]
 80091ca:	e01e      	b.n	800920a <USB_EPStartXfer+0xaea>
 80091cc:	463b      	mov	r3, r7
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	785b      	ldrb	r3, [r3, #1]
 80091d2:	2b01      	cmp	r3, #1
 80091d4:	d119      	bne.n	800920a <USB_EPStartXfer+0xaea>
 80091d6:	1d3b      	adds	r3, r7, #4
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	673b      	str	r3, [r7, #112]	; 0x70
 80091dc:	1d3b      	adds	r3, r7, #4
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091e4:	b29b      	uxth	r3, r3
 80091e6:	461a      	mov	r2, r3
 80091e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80091ea:	4413      	add	r3, r2
 80091ec:	673b      	str	r3, [r7, #112]	; 0x70
 80091ee:	463b      	mov	r3, r7
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	781b      	ldrb	r3, [r3, #0]
 80091f4:	011a      	lsls	r2, r3, #4
 80091f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80091f8:	4413      	add	r3, r2
 80091fa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80091fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009200:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009204:	b29a      	uxth	r2, r3
 8009206:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009208:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800920a:	463b      	mov	r3, r7
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	891b      	ldrh	r3, [r3, #8]
 8009210:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009214:	463b      	mov	r3, r7
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	6959      	ldr	r1, [r3, #20]
 800921a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800921e:	b29b      	uxth	r3, r3
 8009220:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009224:	1d38      	adds	r0, r7, #4
 8009226:	6800      	ldr	r0, [r0, #0]
 8009228:	f000 feaf 	bl	8009f8a <USB_WritePMA>
 800922c:	e17e      	b.n	800952c <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800922e:	463b      	mov	r3, r7
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	785b      	ldrb	r3, [r3, #1]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d16f      	bne.n	8009318 <USB_EPStartXfer+0xbf8>
 8009238:	1d3b      	adds	r3, r7, #4
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009240:	1d3b      	adds	r3, r7, #4
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009248:	b29b      	uxth	r3, r3
 800924a:	461a      	mov	r2, r3
 800924c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009250:	4413      	add	r3, r2
 8009252:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009256:	463b      	mov	r3, r7
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	781b      	ldrb	r3, [r3, #0]
 800925c:	011a      	lsls	r2, r3, #4
 800925e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009262:	4413      	add	r3, r2
 8009264:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009268:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800926c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009270:	2b00      	cmp	r3, #0
 8009272:	d116      	bne.n	80092a2 <USB_EPStartXfer+0xb82>
 8009274:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009278:	881b      	ldrh	r3, [r3, #0]
 800927a:	b29b      	uxth	r3, r3
 800927c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009280:	b29a      	uxth	r2, r3
 8009282:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009286:	801a      	strh	r2, [r3, #0]
 8009288:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800928c:	881b      	ldrh	r3, [r3, #0]
 800928e:	b29b      	uxth	r3, r3
 8009290:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009294:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009298:	b29a      	uxth	r2, r3
 800929a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800929e:	801a      	strh	r2, [r3, #0]
 80092a0:	e05f      	b.n	8009362 <USB_EPStartXfer+0xc42>
 80092a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092a6:	2b3e      	cmp	r3, #62	; 0x3e
 80092a8:	d818      	bhi.n	80092dc <USB_EPStartXfer+0xbbc>
 80092aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092ae:	085b      	lsrs	r3, r3, #1
 80092b0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80092b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092b8:	f003 0301 	and.w	r3, r3, #1
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d004      	beq.n	80092ca <USB_EPStartXfer+0xbaa>
 80092c0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80092c4:	3301      	adds	r3, #1
 80092c6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80092ca:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80092ce:	b29b      	uxth	r3, r3
 80092d0:	029b      	lsls	r3, r3, #10
 80092d2:	b29a      	uxth	r2, r3
 80092d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80092d8:	801a      	strh	r2, [r3, #0]
 80092da:	e042      	b.n	8009362 <USB_EPStartXfer+0xc42>
 80092dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092e0:	095b      	lsrs	r3, r3, #5
 80092e2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80092e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092ea:	f003 031f 	and.w	r3, r3, #31
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d104      	bne.n	80092fc <USB_EPStartXfer+0xbdc>
 80092f2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80092f6:	3b01      	subs	r3, #1
 80092f8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80092fc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009300:	b29b      	uxth	r3, r3
 8009302:	029b      	lsls	r3, r3, #10
 8009304:	b29b      	uxth	r3, r3
 8009306:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800930a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800930e:	b29a      	uxth	r2, r3
 8009310:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009314:	801a      	strh	r2, [r3, #0]
 8009316:	e024      	b.n	8009362 <USB_EPStartXfer+0xc42>
 8009318:	463b      	mov	r3, r7
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	785b      	ldrb	r3, [r3, #1]
 800931e:	2b01      	cmp	r3, #1
 8009320:	d11f      	bne.n	8009362 <USB_EPStartXfer+0xc42>
 8009322:	1d3b      	adds	r3, r7, #4
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800932a:	1d3b      	adds	r3, r7, #4
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009332:	b29b      	uxth	r3, r3
 8009334:	461a      	mov	r2, r3
 8009336:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800933a:	4413      	add	r3, r2
 800933c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009340:	463b      	mov	r3, r7
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	781b      	ldrb	r3, [r3, #0]
 8009346:	011a      	lsls	r2, r3, #4
 8009348:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800934c:	4413      	add	r3, r2
 800934e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009352:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009356:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800935a:	b29a      	uxth	r2, r3
 800935c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009360:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009362:	463b      	mov	r3, r7
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	891b      	ldrh	r3, [r3, #8]
 8009368:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800936c:	463b      	mov	r3, r7
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	6959      	ldr	r1, [r3, #20]
 8009372:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009376:	b29b      	uxth	r3, r3
 8009378:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800937c:	1d38      	adds	r0, r7, #4
 800937e:	6800      	ldr	r0, [r0, #0]
 8009380:	f000 fe03 	bl	8009f8a <USB_WritePMA>
          ep->xfer_buff += len;
 8009384:	463b      	mov	r3, r7
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	695a      	ldr	r2, [r3, #20]
 800938a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800938e:	441a      	add	r2, r3
 8009390:	463b      	mov	r3, r7
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8009396:	463b      	mov	r3, r7
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	6a1a      	ldr	r2, [r3, #32]
 800939c:	463b      	mov	r3, r7
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	691b      	ldr	r3, [r3, #16]
 80093a2:	429a      	cmp	r2, r3
 80093a4:	d909      	bls.n	80093ba <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 80093a6:	463b      	mov	r3, r7
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	6a1a      	ldr	r2, [r3, #32]
 80093ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093b0:	1ad2      	subs	r2, r2, r3
 80093b2:	463b      	mov	r3, r7
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	621a      	str	r2, [r3, #32]
 80093b8:	e008      	b.n	80093cc <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 80093ba:	463b      	mov	r3, r7
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	6a1b      	ldr	r3, [r3, #32]
 80093c0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80093c4:	463b      	mov	r3, r7
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	2200      	movs	r2, #0
 80093ca:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80093cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	f000 80ab 	beq.w	800952c <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80093d6:	1d3b      	adds	r3, r7, #4
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80093de:	463b      	mov	r3, r7
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	785b      	ldrb	r3, [r3, #1]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d16f      	bne.n	80094c8 <USB_EPStartXfer+0xda8>
 80093e8:	1d3b      	adds	r3, r7, #4
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80093f0:	1d3b      	adds	r3, r7, #4
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80093f8:	b29b      	uxth	r3, r3
 80093fa:	461a      	mov	r2, r3
 80093fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009400:	4413      	add	r3, r2
 8009402:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009406:	463b      	mov	r3, r7
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	781b      	ldrb	r3, [r3, #0]
 800940c:	011a      	lsls	r2, r3, #4
 800940e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009412:	4413      	add	r3, r2
 8009414:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009418:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800941c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009420:	2b00      	cmp	r3, #0
 8009422:	d116      	bne.n	8009452 <USB_EPStartXfer+0xd32>
 8009424:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009428:	881b      	ldrh	r3, [r3, #0]
 800942a:	b29b      	uxth	r3, r3
 800942c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009430:	b29a      	uxth	r2, r3
 8009432:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009436:	801a      	strh	r2, [r3, #0]
 8009438:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800943c:	881b      	ldrh	r3, [r3, #0]
 800943e:	b29b      	uxth	r3, r3
 8009440:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009444:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009448:	b29a      	uxth	r2, r3
 800944a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800944e:	801a      	strh	r2, [r3, #0]
 8009450:	e05b      	b.n	800950a <USB_EPStartXfer+0xdea>
 8009452:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009456:	2b3e      	cmp	r3, #62	; 0x3e
 8009458:	d818      	bhi.n	800948c <USB_EPStartXfer+0xd6c>
 800945a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800945e:	085b      	lsrs	r3, r3, #1
 8009460:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009464:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009468:	f003 0301 	and.w	r3, r3, #1
 800946c:	2b00      	cmp	r3, #0
 800946e:	d004      	beq.n	800947a <USB_EPStartXfer+0xd5a>
 8009470:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009474:	3301      	adds	r3, #1
 8009476:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800947a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800947e:	b29b      	uxth	r3, r3
 8009480:	029b      	lsls	r3, r3, #10
 8009482:	b29a      	uxth	r2, r3
 8009484:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009488:	801a      	strh	r2, [r3, #0]
 800948a:	e03e      	b.n	800950a <USB_EPStartXfer+0xdea>
 800948c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009490:	095b      	lsrs	r3, r3, #5
 8009492:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009496:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800949a:	f003 031f 	and.w	r3, r3, #31
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d104      	bne.n	80094ac <USB_EPStartXfer+0xd8c>
 80094a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80094a6:	3b01      	subs	r3, #1
 80094a8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80094ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80094b0:	b29b      	uxth	r3, r3
 80094b2:	029b      	lsls	r3, r3, #10
 80094b4:	b29b      	uxth	r3, r3
 80094b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094be:	b29a      	uxth	r2, r3
 80094c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80094c4:	801a      	strh	r2, [r3, #0]
 80094c6:	e020      	b.n	800950a <USB_EPStartXfer+0xdea>
 80094c8:	463b      	mov	r3, r7
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	785b      	ldrb	r3, [r3, #1]
 80094ce:	2b01      	cmp	r3, #1
 80094d0:	d11b      	bne.n	800950a <USB_EPStartXfer+0xdea>
 80094d2:	1d3b      	adds	r3, r7, #4
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80094da:	b29b      	uxth	r3, r3
 80094dc:	461a      	mov	r2, r3
 80094de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80094e2:	4413      	add	r3, r2
 80094e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80094e8:	463b      	mov	r3, r7
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	781b      	ldrb	r3, [r3, #0]
 80094ee:	011a      	lsls	r2, r3, #4
 80094f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80094f4:	4413      	add	r3, r2
 80094f6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80094fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80094fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009502:	b29a      	uxth	r2, r3
 8009504:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009508:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800950a:	463b      	mov	r3, r7
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	895b      	ldrh	r3, [r3, #10]
 8009510:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009514:	463b      	mov	r3, r7
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	6959      	ldr	r1, [r3, #20]
 800951a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800951e:	b29b      	uxth	r3, r3
 8009520:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009524:	1d38      	adds	r0, r7, #4
 8009526:	6800      	ldr	r0, [r0, #0]
 8009528:	f000 fd2f 	bl	8009f8a <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800952c:	1d3b      	adds	r3, r7, #4
 800952e:	681a      	ldr	r2, [r3, #0]
 8009530:	463b      	mov	r3, r7
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	781b      	ldrb	r3, [r3, #0]
 8009536:	009b      	lsls	r3, r3, #2
 8009538:	4413      	add	r3, r2
 800953a:	881b      	ldrh	r3, [r3, #0]
 800953c:	b29b      	uxth	r3, r3
 800953e:	f107 020a 	add.w	r2, r7, #10
 8009542:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009546:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800954a:	8013      	strh	r3, [r2, #0]
 800954c:	f107 030a 	add.w	r3, r7, #10
 8009550:	f107 020a 	add.w	r2, r7, #10
 8009554:	8812      	ldrh	r2, [r2, #0]
 8009556:	f082 0210 	eor.w	r2, r2, #16
 800955a:	801a      	strh	r2, [r3, #0]
 800955c:	f107 030a 	add.w	r3, r7, #10
 8009560:	f107 020a 	add.w	r2, r7, #10
 8009564:	8812      	ldrh	r2, [r2, #0]
 8009566:	f082 0220 	eor.w	r2, r2, #32
 800956a:	801a      	strh	r2, [r3, #0]
 800956c:	1d3b      	adds	r3, r7, #4
 800956e:	681a      	ldr	r2, [r3, #0]
 8009570:	463b      	mov	r3, r7
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	781b      	ldrb	r3, [r3, #0]
 8009576:	009b      	lsls	r3, r3, #2
 8009578:	441a      	add	r2, r3
 800957a:	f107 030a 	add.w	r3, r7, #10
 800957e:	881b      	ldrh	r3, [r3, #0]
 8009580:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009584:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009588:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800958c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009590:	b29b      	uxth	r3, r3
 8009592:	8013      	strh	r3, [r2, #0]
 8009594:	e3b5      	b.n	8009d02 <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009596:	463b      	mov	r3, r7
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	7b1b      	ldrb	r3, [r3, #12]
 800959c:	2b00      	cmp	r3, #0
 800959e:	f040 8090 	bne.w	80096c2 <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80095a2:	463b      	mov	r3, r7
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	699a      	ldr	r2, [r3, #24]
 80095a8:	463b      	mov	r3, r7
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	691b      	ldr	r3, [r3, #16]
 80095ae:	429a      	cmp	r2, r3
 80095b0:	d90e      	bls.n	80095d0 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 80095b2:	463b      	mov	r3, r7
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	691b      	ldr	r3, [r3, #16]
 80095b8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80095bc:	463b      	mov	r3, r7
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	699a      	ldr	r2, [r3, #24]
 80095c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095c6:	1ad2      	subs	r2, r2, r3
 80095c8:	463b      	mov	r3, r7
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	619a      	str	r2, [r3, #24]
 80095ce:	e008      	b.n	80095e2 <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 80095d0:	463b      	mov	r3, r7
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	699b      	ldr	r3, [r3, #24]
 80095d6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80095da:	463b      	mov	r3, r7
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	2200      	movs	r2, #0
 80095e0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80095e2:	1d3b      	adds	r3, r7, #4
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80095ea:	1d3b      	adds	r3, r7, #4
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80095f2:	b29b      	uxth	r3, r3
 80095f4:	461a      	mov	r2, r3
 80095f6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80095fa:	4413      	add	r3, r2
 80095fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009600:	463b      	mov	r3, r7
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	781b      	ldrb	r3, [r3, #0]
 8009606:	011a      	lsls	r2, r3, #4
 8009608:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800960c:	4413      	add	r3, r2
 800960e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009612:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009616:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800961a:	2b00      	cmp	r3, #0
 800961c:	d116      	bne.n	800964c <USB_EPStartXfer+0xf2c>
 800961e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009622:	881b      	ldrh	r3, [r3, #0]
 8009624:	b29b      	uxth	r3, r3
 8009626:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800962a:	b29a      	uxth	r2, r3
 800962c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009630:	801a      	strh	r2, [r3, #0]
 8009632:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009636:	881b      	ldrh	r3, [r3, #0]
 8009638:	b29b      	uxth	r3, r3
 800963a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800963e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009642:	b29a      	uxth	r2, r3
 8009644:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009648:	801a      	strh	r2, [r3, #0]
 800964a:	e32c      	b.n	8009ca6 <USB_EPStartXfer+0x1586>
 800964c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009650:	2b3e      	cmp	r3, #62	; 0x3e
 8009652:	d818      	bhi.n	8009686 <USB_EPStartXfer+0xf66>
 8009654:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009658:	085b      	lsrs	r3, r3, #1
 800965a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800965e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009662:	f003 0301 	and.w	r3, r3, #1
 8009666:	2b00      	cmp	r3, #0
 8009668:	d004      	beq.n	8009674 <USB_EPStartXfer+0xf54>
 800966a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800966e:	3301      	adds	r3, #1
 8009670:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009674:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009678:	b29b      	uxth	r3, r3
 800967a:	029b      	lsls	r3, r3, #10
 800967c:	b29a      	uxth	r2, r3
 800967e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009682:	801a      	strh	r2, [r3, #0]
 8009684:	e30f      	b.n	8009ca6 <USB_EPStartXfer+0x1586>
 8009686:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800968a:	095b      	lsrs	r3, r3, #5
 800968c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009690:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009694:	f003 031f 	and.w	r3, r3, #31
 8009698:	2b00      	cmp	r3, #0
 800969a:	d104      	bne.n	80096a6 <USB_EPStartXfer+0xf86>
 800969c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80096a0:	3b01      	subs	r3, #1
 80096a2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80096a6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80096aa:	b29b      	uxth	r3, r3
 80096ac:	029b      	lsls	r3, r3, #10
 80096ae:	b29b      	uxth	r3, r3
 80096b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096b8:	b29a      	uxth	r2, r3
 80096ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80096be:	801a      	strh	r2, [r3, #0]
 80096c0:	e2f1      	b.n	8009ca6 <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80096c2:	463b      	mov	r3, r7
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	78db      	ldrb	r3, [r3, #3]
 80096c8:	2b02      	cmp	r3, #2
 80096ca:	f040 818f 	bne.w	80099ec <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80096ce:	463b      	mov	r3, r7
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	785b      	ldrb	r3, [r3, #1]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d175      	bne.n	80097c4 <USB_EPStartXfer+0x10a4>
 80096d8:	1d3b      	adds	r3, r7, #4
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80096e0:	1d3b      	adds	r3, r7, #4
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80096e8:	b29b      	uxth	r3, r3
 80096ea:	461a      	mov	r2, r3
 80096ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80096f0:	4413      	add	r3, r2
 80096f2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80096f6:	463b      	mov	r3, r7
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	781b      	ldrb	r3, [r3, #0]
 80096fc:	011a      	lsls	r2, r3, #4
 80096fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009702:	4413      	add	r3, r2
 8009704:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009708:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800970c:	463b      	mov	r3, r7
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	691b      	ldr	r3, [r3, #16]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d116      	bne.n	8009744 <USB_EPStartXfer+0x1024>
 8009716:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800971a:	881b      	ldrh	r3, [r3, #0]
 800971c:	b29b      	uxth	r3, r3
 800971e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009722:	b29a      	uxth	r2, r3
 8009724:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009728:	801a      	strh	r2, [r3, #0]
 800972a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800972e:	881b      	ldrh	r3, [r3, #0]
 8009730:	b29b      	uxth	r3, r3
 8009732:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009736:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800973a:	b29a      	uxth	r2, r3
 800973c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009740:	801a      	strh	r2, [r3, #0]
 8009742:	e065      	b.n	8009810 <USB_EPStartXfer+0x10f0>
 8009744:	463b      	mov	r3, r7
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	691b      	ldr	r3, [r3, #16]
 800974a:	2b3e      	cmp	r3, #62	; 0x3e
 800974c:	d81a      	bhi.n	8009784 <USB_EPStartXfer+0x1064>
 800974e:	463b      	mov	r3, r7
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	691b      	ldr	r3, [r3, #16]
 8009754:	085b      	lsrs	r3, r3, #1
 8009756:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800975a:	463b      	mov	r3, r7
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	691b      	ldr	r3, [r3, #16]
 8009760:	f003 0301 	and.w	r3, r3, #1
 8009764:	2b00      	cmp	r3, #0
 8009766:	d004      	beq.n	8009772 <USB_EPStartXfer+0x1052>
 8009768:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800976c:	3301      	adds	r3, #1
 800976e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009772:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009776:	b29b      	uxth	r3, r3
 8009778:	029b      	lsls	r3, r3, #10
 800977a:	b29a      	uxth	r2, r3
 800977c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009780:	801a      	strh	r2, [r3, #0]
 8009782:	e045      	b.n	8009810 <USB_EPStartXfer+0x10f0>
 8009784:	463b      	mov	r3, r7
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	691b      	ldr	r3, [r3, #16]
 800978a:	095b      	lsrs	r3, r3, #5
 800978c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009790:	463b      	mov	r3, r7
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	691b      	ldr	r3, [r3, #16]
 8009796:	f003 031f 	and.w	r3, r3, #31
 800979a:	2b00      	cmp	r3, #0
 800979c:	d104      	bne.n	80097a8 <USB_EPStartXfer+0x1088>
 800979e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097a2:	3b01      	subs	r3, #1
 80097a4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80097a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097ac:	b29b      	uxth	r3, r3
 80097ae:	029b      	lsls	r3, r3, #10
 80097b0:	b29b      	uxth	r3, r3
 80097b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097ba:	b29a      	uxth	r2, r3
 80097bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80097c0:	801a      	strh	r2, [r3, #0]
 80097c2:	e025      	b.n	8009810 <USB_EPStartXfer+0x10f0>
 80097c4:	463b      	mov	r3, r7
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	785b      	ldrb	r3, [r3, #1]
 80097ca:	2b01      	cmp	r3, #1
 80097cc:	d120      	bne.n	8009810 <USB_EPStartXfer+0x10f0>
 80097ce:	1d3b      	adds	r3, r7, #4
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80097d6:	1d3b      	adds	r3, r7, #4
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80097de:	b29b      	uxth	r3, r3
 80097e0:	461a      	mov	r2, r3
 80097e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80097e6:	4413      	add	r3, r2
 80097e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80097ec:	463b      	mov	r3, r7
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	781b      	ldrb	r3, [r3, #0]
 80097f2:	011a      	lsls	r2, r3, #4
 80097f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80097f8:	4413      	add	r3, r2
 80097fa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80097fe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009802:	463b      	mov	r3, r7
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	691b      	ldr	r3, [r3, #16]
 8009808:	b29a      	uxth	r2, r3
 800980a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800980e:	801a      	strh	r2, [r3, #0]
 8009810:	1d3b      	adds	r3, r7, #4
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009818:	463b      	mov	r3, r7
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	785b      	ldrb	r3, [r3, #1]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d175      	bne.n	800990e <USB_EPStartXfer+0x11ee>
 8009822:	1d3b      	adds	r3, r7, #4
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800982a:	1d3b      	adds	r3, r7, #4
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009832:	b29b      	uxth	r3, r3
 8009834:	461a      	mov	r2, r3
 8009836:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800983a:	4413      	add	r3, r2
 800983c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009840:	463b      	mov	r3, r7
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	781b      	ldrb	r3, [r3, #0]
 8009846:	011a      	lsls	r2, r3, #4
 8009848:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800984c:	4413      	add	r3, r2
 800984e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009852:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009856:	463b      	mov	r3, r7
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	691b      	ldr	r3, [r3, #16]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d116      	bne.n	800988e <USB_EPStartXfer+0x116e>
 8009860:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009864:	881b      	ldrh	r3, [r3, #0]
 8009866:	b29b      	uxth	r3, r3
 8009868:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800986c:	b29a      	uxth	r2, r3
 800986e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009872:	801a      	strh	r2, [r3, #0]
 8009874:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009878:	881b      	ldrh	r3, [r3, #0]
 800987a:	b29b      	uxth	r3, r3
 800987c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009880:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009884:	b29a      	uxth	r2, r3
 8009886:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800988a:	801a      	strh	r2, [r3, #0]
 800988c:	e061      	b.n	8009952 <USB_EPStartXfer+0x1232>
 800988e:	463b      	mov	r3, r7
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	691b      	ldr	r3, [r3, #16]
 8009894:	2b3e      	cmp	r3, #62	; 0x3e
 8009896:	d81a      	bhi.n	80098ce <USB_EPStartXfer+0x11ae>
 8009898:	463b      	mov	r3, r7
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	691b      	ldr	r3, [r3, #16]
 800989e:	085b      	lsrs	r3, r3, #1
 80098a0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80098a4:	463b      	mov	r3, r7
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	691b      	ldr	r3, [r3, #16]
 80098aa:	f003 0301 	and.w	r3, r3, #1
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d004      	beq.n	80098bc <USB_EPStartXfer+0x119c>
 80098b2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80098b6:	3301      	adds	r3, #1
 80098b8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80098bc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80098c0:	b29b      	uxth	r3, r3
 80098c2:	029b      	lsls	r3, r3, #10
 80098c4:	b29a      	uxth	r2, r3
 80098c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80098ca:	801a      	strh	r2, [r3, #0]
 80098cc:	e041      	b.n	8009952 <USB_EPStartXfer+0x1232>
 80098ce:	463b      	mov	r3, r7
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	691b      	ldr	r3, [r3, #16]
 80098d4:	095b      	lsrs	r3, r3, #5
 80098d6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80098da:	463b      	mov	r3, r7
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	691b      	ldr	r3, [r3, #16]
 80098e0:	f003 031f 	and.w	r3, r3, #31
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d104      	bne.n	80098f2 <USB_EPStartXfer+0x11d2>
 80098e8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80098ec:	3b01      	subs	r3, #1
 80098ee:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80098f2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80098f6:	b29b      	uxth	r3, r3
 80098f8:	029b      	lsls	r3, r3, #10
 80098fa:	b29b      	uxth	r3, r3
 80098fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009900:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009904:	b29a      	uxth	r2, r3
 8009906:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800990a:	801a      	strh	r2, [r3, #0]
 800990c:	e021      	b.n	8009952 <USB_EPStartXfer+0x1232>
 800990e:	463b      	mov	r3, r7
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	785b      	ldrb	r3, [r3, #1]
 8009914:	2b01      	cmp	r3, #1
 8009916:	d11c      	bne.n	8009952 <USB_EPStartXfer+0x1232>
 8009918:	1d3b      	adds	r3, r7, #4
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009920:	b29b      	uxth	r3, r3
 8009922:	461a      	mov	r2, r3
 8009924:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009928:	4413      	add	r3, r2
 800992a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800992e:	463b      	mov	r3, r7
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	781b      	ldrb	r3, [r3, #0]
 8009934:	011a      	lsls	r2, r3, #4
 8009936:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800993a:	4413      	add	r3, r2
 800993c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009940:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009944:	463b      	mov	r3, r7
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	691b      	ldr	r3, [r3, #16]
 800994a:	b29a      	uxth	r2, r3
 800994c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009950:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009952:	463b      	mov	r3, r7
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	69db      	ldr	r3, [r3, #28]
 8009958:	2b00      	cmp	r3, #0
 800995a:	f000 81a4 	beq.w	8009ca6 <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800995e:	1d3b      	adds	r3, r7, #4
 8009960:	681a      	ldr	r2, [r3, #0]
 8009962:	463b      	mov	r3, r7
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	781b      	ldrb	r3, [r3, #0]
 8009968:	009b      	lsls	r3, r3, #2
 800996a:	4413      	add	r3, r2
 800996c:	881b      	ldrh	r3, [r3, #0]
 800996e:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009972:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009976:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800997a:	2b00      	cmp	r3, #0
 800997c:	d005      	beq.n	800998a <USB_EPStartXfer+0x126a>
 800997e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009986:	2b00      	cmp	r3, #0
 8009988:	d10d      	bne.n	80099a6 <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800998a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800998e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009992:	2b00      	cmp	r3, #0
 8009994:	f040 8187 	bne.w	8009ca6 <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009998:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800999c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	f040 8180 	bne.w	8009ca6 <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80099a6:	1d3b      	adds	r3, r7, #4
 80099a8:	681a      	ldr	r2, [r3, #0]
 80099aa:	463b      	mov	r3, r7
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	781b      	ldrb	r3, [r3, #0]
 80099b0:	009b      	lsls	r3, r3, #2
 80099b2:	4413      	add	r3, r2
 80099b4:	881b      	ldrh	r3, [r3, #0]
 80099b6:	b29b      	uxth	r3, r3
 80099b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099c0:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 80099c4:	1d3b      	adds	r3, r7, #4
 80099c6:	681a      	ldr	r2, [r3, #0]
 80099c8:	463b      	mov	r3, r7
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	781b      	ldrb	r3, [r3, #0]
 80099ce:	009b      	lsls	r3, r3, #2
 80099d0:	441a      	add	r2, r3
 80099d2:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80099d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099e2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80099e6:	b29b      	uxth	r3, r3
 80099e8:	8013      	strh	r3, [r2, #0]
 80099ea:	e15c      	b.n	8009ca6 <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80099ec:	463b      	mov	r3, r7
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	78db      	ldrb	r3, [r3, #3]
 80099f2:	2b01      	cmp	r3, #1
 80099f4:	f040 8155 	bne.w	8009ca2 <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80099f8:	463b      	mov	r3, r7
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	699a      	ldr	r2, [r3, #24]
 80099fe:	463b      	mov	r3, r7
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	691b      	ldr	r3, [r3, #16]
 8009a04:	429a      	cmp	r2, r3
 8009a06:	d90e      	bls.n	8009a26 <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8009a08:	463b      	mov	r3, r7
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	691b      	ldr	r3, [r3, #16]
 8009a0e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8009a12:	463b      	mov	r3, r7
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	699a      	ldr	r2, [r3, #24]
 8009a18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a1c:	1ad2      	subs	r2, r2, r3
 8009a1e:	463b      	mov	r3, r7
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	619a      	str	r2, [r3, #24]
 8009a24:	e008      	b.n	8009a38 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 8009a26:	463b      	mov	r3, r7
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	699b      	ldr	r3, [r3, #24]
 8009a2c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8009a30:	463b      	mov	r3, r7
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	2200      	movs	r2, #0
 8009a36:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009a38:	463b      	mov	r3, r7
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	785b      	ldrb	r3, [r3, #1]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d16f      	bne.n	8009b22 <USB_EPStartXfer+0x1402>
 8009a42:	1d3b      	adds	r3, r7, #4
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009a4a:	1d3b      	adds	r3, r7, #4
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a52:	b29b      	uxth	r3, r3
 8009a54:	461a      	mov	r2, r3
 8009a56:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009a5a:	4413      	add	r3, r2
 8009a5c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009a60:	463b      	mov	r3, r7
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	781b      	ldrb	r3, [r3, #0]
 8009a66:	011a      	lsls	r2, r3, #4
 8009a68:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009a6c:	4413      	add	r3, r2
 8009a6e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009a72:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009a76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d116      	bne.n	8009aac <USB_EPStartXfer+0x138c>
 8009a7e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009a82:	881b      	ldrh	r3, [r3, #0]
 8009a84:	b29b      	uxth	r3, r3
 8009a86:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009a8a:	b29a      	uxth	r2, r3
 8009a8c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009a90:	801a      	strh	r2, [r3, #0]
 8009a92:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009a96:	881b      	ldrh	r3, [r3, #0]
 8009a98:	b29b      	uxth	r3, r3
 8009a9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009aa2:	b29a      	uxth	r2, r3
 8009aa4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009aa8:	801a      	strh	r2, [r3, #0]
 8009aaa:	e05f      	b.n	8009b6c <USB_EPStartXfer+0x144c>
 8009aac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ab0:	2b3e      	cmp	r3, #62	; 0x3e
 8009ab2:	d818      	bhi.n	8009ae6 <USB_EPStartXfer+0x13c6>
 8009ab4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ab8:	085b      	lsrs	r3, r3, #1
 8009aba:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009abe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ac2:	f003 0301 	and.w	r3, r3, #1
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d004      	beq.n	8009ad4 <USB_EPStartXfer+0x13b4>
 8009aca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009ace:	3301      	adds	r3, #1
 8009ad0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009ad4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009ad8:	b29b      	uxth	r3, r3
 8009ada:	029b      	lsls	r3, r3, #10
 8009adc:	b29a      	uxth	r2, r3
 8009ade:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009ae2:	801a      	strh	r2, [r3, #0]
 8009ae4:	e042      	b.n	8009b6c <USB_EPStartXfer+0x144c>
 8009ae6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009aea:	095b      	lsrs	r3, r3, #5
 8009aec:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009af0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009af4:	f003 031f 	and.w	r3, r3, #31
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d104      	bne.n	8009b06 <USB_EPStartXfer+0x13e6>
 8009afc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009b00:	3b01      	subs	r3, #1
 8009b02:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009b06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009b0a:	b29b      	uxth	r3, r3
 8009b0c:	029b      	lsls	r3, r3, #10
 8009b0e:	b29b      	uxth	r3, r3
 8009b10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b18:	b29a      	uxth	r2, r3
 8009b1a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009b1e:	801a      	strh	r2, [r3, #0]
 8009b20:	e024      	b.n	8009b6c <USB_EPStartXfer+0x144c>
 8009b22:	463b      	mov	r3, r7
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	785b      	ldrb	r3, [r3, #1]
 8009b28:	2b01      	cmp	r3, #1
 8009b2a:	d11f      	bne.n	8009b6c <USB_EPStartXfer+0x144c>
 8009b2c:	1d3b      	adds	r3, r7, #4
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009b34:	1d3b      	adds	r3, r7, #4
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b3c:	b29b      	uxth	r3, r3
 8009b3e:	461a      	mov	r2, r3
 8009b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b44:	4413      	add	r3, r2
 8009b46:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009b4a:	463b      	mov	r3, r7
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	781b      	ldrb	r3, [r3, #0]
 8009b50:	011a      	lsls	r2, r3, #4
 8009b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b56:	4413      	add	r3, r2
 8009b58:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009b5c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009b60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b64:	b29a      	uxth	r2, r3
 8009b66:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009b6a:	801a      	strh	r2, [r3, #0]
 8009b6c:	1d3b      	adds	r3, r7, #4
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009b74:	463b      	mov	r3, r7
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	785b      	ldrb	r3, [r3, #1]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d16f      	bne.n	8009c5e <USB_EPStartXfer+0x153e>
 8009b7e:	1d3b      	adds	r3, r7, #4
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009b86:	1d3b      	adds	r3, r7, #4
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b8e:	b29b      	uxth	r3, r3
 8009b90:	461a      	mov	r2, r3
 8009b92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009b96:	4413      	add	r3, r2
 8009b98:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009b9c:	463b      	mov	r3, r7
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	781b      	ldrb	r3, [r3, #0]
 8009ba2:	011a      	lsls	r2, r3, #4
 8009ba4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009ba8:	4413      	add	r3, r2
 8009baa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009bae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009bb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d116      	bne.n	8009be8 <USB_EPStartXfer+0x14c8>
 8009bba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009bbe:	881b      	ldrh	r3, [r3, #0]
 8009bc0:	b29b      	uxth	r3, r3
 8009bc2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009bc6:	b29a      	uxth	r2, r3
 8009bc8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009bcc:	801a      	strh	r2, [r3, #0]
 8009bce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009bd2:	881b      	ldrh	r3, [r3, #0]
 8009bd4:	b29b      	uxth	r3, r3
 8009bd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009bda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009bde:	b29a      	uxth	r2, r3
 8009be0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009be4:	801a      	strh	r2, [r3, #0]
 8009be6:	e05e      	b.n	8009ca6 <USB_EPStartXfer+0x1586>
 8009be8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009bec:	2b3e      	cmp	r3, #62	; 0x3e
 8009bee:	d818      	bhi.n	8009c22 <USB_EPStartXfer+0x1502>
 8009bf0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009bf4:	085b      	lsrs	r3, r3, #1
 8009bf6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009bfa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009bfe:	f003 0301 	and.w	r3, r3, #1
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d004      	beq.n	8009c10 <USB_EPStartXfer+0x14f0>
 8009c06:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009c0a:	3301      	adds	r3, #1
 8009c0c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009c10:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009c14:	b29b      	uxth	r3, r3
 8009c16:	029b      	lsls	r3, r3, #10
 8009c18:	b29a      	uxth	r2, r3
 8009c1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009c1e:	801a      	strh	r2, [r3, #0]
 8009c20:	e041      	b.n	8009ca6 <USB_EPStartXfer+0x1586>
 8009c22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c26:	095b      	lsrs	r3, r3, #5
 8009c28:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009c2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c30:	f003 031f 	and.w	r3, r3, #31
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d104      	bne.n	8009c42 <USB_EPStartXfer+0x1522>
 8009c38:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009c3c:	3b01      	subs	r3, #1
 8009c3e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009c42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009c46:	b29b      	uxth	r3, r3
 8009c48:	029b      	lsls	r3, r3, #10
 8009c4a:	b29b      	uxth	r3, r3
 8009c4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c54:	b29a      	uxth	r2, r3
 8009c56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009c5a:	801a      	strh	r2, [r3, #0]
 8009c5c:	e023      	b.n	8009ca6 <USB_EPStartXfer+0x1586>
 8009c5e:	463b      	mov	r3, r7
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	785b      	ldrb	r3, [r3, #1]
 8009c64:	2b01      	cmp	r3, #1
 8009c66:	d11e      	bne.n	8009ca6 <USB_EPStartXfer+0x1586>
 8009c68:	1d3b      	adds	r3, r7, #4
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c70:	b29b      	uxth	r3, r3
 8009c72:	461a      	mov	r2, r3
 8009c74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c78:	4413      	add	r3, r2
 8009c7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009c7e:	463b      	mov	r3, r7
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	781b      	ldrb	r3, [r3, #0]
 8009c84:	011a      	lsls	r2, r3, #4
 8009c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c8a:	4413      	add	r3, r2
 8009c8c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009c90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009c94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c98:	b29a      	uxth	r2, r3
 8009c9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c9e:	801a      	strh	r2, [r3, #0]
 8009ca0:	e001      	b.n	8009ca6 <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 8009ca2:	2301      	movs	r3, #1
 8009ca4:	e02e      	b.n	8009d04 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009ca6:	1d3b      	adds	r3, r7, #4
 8009ca8:	681a      	ldr	r2, [r3, #0]
 8009caa:	463b      	mov	r3, r7
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	781b      	ldrb	r3, [r3, #0]
 8009cb0:	009b      	lsls	r3, r3, #2
 8009cb2:	4413      	add	r3, r2
 8009cb4:	881b      	ldrh	r3, [r3, #0]
 8009cb6:	b29b      	uxth	r3, r3
 8009cb8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009cbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cc0:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8009cc4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009cc8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009ccc:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8009cd0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009cd4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009cd8:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8009cdc:	1d3b      	adds	r3, r7, #4
 8009cde:	681a      	ldr	r2, [r3, #0]
 8009ce0:	463b      	mov	r3, r7
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	781b      	ldrb	r3, [r3, #0]
 8009ce6:	009b      	lsls	r3, r3, #2
 8009ce8:	441a      	add	r2, r3
 8009cea:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009cee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009cf2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009cf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009cfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cfe:	b29b      	uxth	r3, r3
 8009d00:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009d02:	2300      	movs	r3, #0
}
 8009d04:	4618      	mov	r0, r3
 8009d06:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}

08009d0e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009d0e:	b480      	push	{r7}
 8009d10:	b085      	sub	sp, #20
 8009d12:	af00      	add	r7, sp, #0
 8009d14:	6078      	str	r0, [r7, #4]
 8009d16:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	785b      	ldrb	r3, [r3, #1]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d020      	beq.n	8009d62 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009d20:	687a      	ldr	r2, [r7, #4]
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	781b      	ldrb	r3, [r3, #0]
 8009d26:	009b      	lsls	r3, r3, #2
 8009d28:	4413      	add	r3, r2
 8009d2a:	881b      	ldrh	r3, [r3, #0]
 8009d2c:	b29b      	uxth	r3, r3
 8009d2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d36:	81bb      	strh	r3, [r7, #12]
 8009d38:	89bb      	ldrh	r3, [r7, #12]
 8009d3a:	f083 0310 	eor.w	r3, r3, #16
 8009d3e:	81bb      	strh	r3, [r7, #12]
 8009d40:	687a      	ldr	r2, [r7, #4]
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	781b      	ldrb	r3, [r3, #0]
 8009d46:	009b      	lsls	r3, r3, #2
 8009d48:	441a      	add	r2, r3
 8009d4a:	89bb      	ldrh	r3, [r7, #12]
 8009d4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d5c:	b29b      	uxth	r3, r3
 8009d5e:	8013      	strh	r3, [r2, #0]
 8009d60:	e01f      	b.n	8009da2 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009d62:	687a      	ldr	r2, [r7, #4]
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	781b      	ldrb	r3, [r3, #0]
 8009d68:	009b      	lsls	r3, r3, #2
 8009d6a:	4413      	add	r3, r2
 8009d6c:	881b      	ldrh	r3, [r3, #0]
 8009d6e:	b29b      	uxth	r3, r3
 8009d70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009d74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d78:	81fb      	strh	r3, [r7, #14]
 8009d7a:	89fb      	ldrh	r3, [r7, #14]
 8009d7c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009d80:	81fb      	strh	r3, [r7, #14]
 8009d82:	687a      	ldr	r2, [r7, #4]
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	781b      	ldrb	r3, [r3, #0]
 8009d88:	009b      	lsls	r3, r3, #2
 8009d8a:	441a      	add	r2, r3
 8009d8c:	89fb      	ldrh	r3, [r7, #14]
 8009d8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d9e:	b29b      	uxth	r3, r3
 8009da0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009da2:	2300      	movs	r3, #0
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	3714      	adds	r7, #20
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bc80      	pop	{r7}
 8009dac:	4770      	bx	lr

08009dae <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009dae:	b480      	push	{r7}
 8009db0:	b087      	sub	sp, #28
 8009db2:	af00      	add	r7, sp, #0
 8009db4:	6078      	str	r0, [r7, #4]
 8009db6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	7b1b      	ldrb	r3, [r3, #12]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	f040 809d 	bne.w	8009efc <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	785b      	ldrb	r3, [r3, #1]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d04c      	beq.n	8009e64 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009dca:	687a      	ldr	r2, [r7, #4]
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	781b      	ldrb	r3, [r3, #0]
 8009dd0:	009b      	lsls	r3, r3, #2
 8009dd2:	4413      	add	r3, r2
 8009dd4:	881b      	ldrh	r3, [r3, #0]
 8009dd6:	823b      	strh	r3, [r7, #16]
 8009dd8:	8a3b      	ldrh	r3, [r7, #16]
 8009dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d01b      	beq.n	8009e1a <USB_EPClearStall+0x6c>
 8009de2:	687a      	ldr	r2, [r7, #4]
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	781b      	ldrb	r3, [r3, #0]
 8009de8:	009b      	lsls	r3, r3, #2
 8009dea:	4413      	add	r3, r2
 8009dec:	881b      	ldrh	r3, [r3, #0]
 8009dee:	b29b      	uxth	r3, r3
 8009df0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009df4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009df8:	81fb      	strh	r3, [r7, #14]
 8009dfa:	687a      	ldr	r2, [r7, #4]
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	781b      	ldrb	r3, [r3, #0]
 8009e00:	009b      	lsls	r3, r3, #2
 8009e02:	441a      	add	r2, r3
 8009e04:	89fb      	ldrh	r3, [r7, #14]
 8009e06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e12:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009e16:	b29b      	uxth	r3, r3
 8009e18:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	78db      	ldrb	r3, [r3, #3]
 8009e1e:	2b01      	cmp	r3, #1
 8009e20:	d06c      	beq.n	8009efc <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009e22:	687a      	ldr	r2, [r7, #4]
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	781b      	ldrb	r3, [r3, #0]
 8009e28:	009b      	lsls	r3, r3, #2
 8009e2a:	4413      	add	r3, r2
 8009e2c:	881b      	ldrh	r3, [r3, #0]
 8009e2e:	b29b      	uxth	r3, r3
 8009e30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e38:	81bb      	strh	r3, [r7, #12]
 8009e3a:	89bb      	ldrh	r3, [r7, #12]
 8009e3c:	f083 0320 	eor.w	r3, r3, #32
 8009e40:	81bb      	strh	r3, [r7, #12]
 8009e42:	687a      	ldr	r2, [r7, #4]
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	781b      	ldrb	r3, [r3, #0]
 8009e48:	009b      	lsls	r3, r3, #2
 8009e4a:	441a      	add	r2, r3
 8009e4c:	89bb      	ldrh	r3, [r7, #12]
 8009e4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e5e:	b29b      	uxth	r3, r3
 8009e60:	8013      	strh	r3, [r2, #0]
 8009e62:	e04b      	b.n	8009efc <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009e64:	687a      	ldr	r2, [r7, #4]
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	781b      	ldrb	r3, [r3, #0]
 8009e6a:	009b      	lsls	r3, r3, #2
 8009e6c:	4413      	add	r3, r2
 8009e6e:	881b      	ldrh	r3, [r3, #0]
 8009e70:	82fb      	strh	r3, [r7, #22]
 8009e72:	8afb      	ldrh	r3, [r7, #22]
 8009e74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d01b      	beq.n	8009eb4 <USB_EPClearStall+0x106>
 8009e7c:	687a      	ldr	r2, [r7, #4]
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	781b      	ldrb	r3, [r3, #0]
 8009e82:	009b      	lsls	r3, r3, #2
 8009e84:	4413      	add	r3, r2
 8009e86:	881b      	ldrh	r3, [r3, #0]
 8009e88:	b29b      	uxth	r3, r3
 8009e8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e92:	82bb      	strh	r3, [r7, #20]
 8009e94:	687a      	ldr	r2, [r7, #4]
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	781b      	ldrb	r3, [r3, #0]
 8009e9a:	009b      	lsls	r3, r3, #2
 8009e9c:	441a      	add	r2, r3
 8009e9e:	8abb      	ldrh	r3, [r7, #20]
 8009ea0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ea4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ea8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009eac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009eb0:	b29b      	uxth	r3, r3
 8009eb2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009eb4:	687a      	ldr	r2, [r7, #4]
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	781b      	ldrb	r3, [r3, #0]
 8009eba:	009b      	lsls	r3, r3, #2
 8009ebc:	4413      	add	r3, r2
 8009ebe:	881b      	ldrh	r3, [r3, #0]
 8009ec0:	b29b      	uxth	r3, r3
 8009ec2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009ec6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009eca:	827b      	strh	r3, [r7, #18]
 8009ecc:	8a7b      	ldrh	r3, [r7, #18]
 8009ece:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009ed2:	827b      	strh	r3, [r7, #18]
 8009ed4:	8a7b      	ldrh	r3, [r7, #18]
 8009ed6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009eda:	827b      	strh	r3, [r7, #18]
 8009edc:	687a      	ldr	r2, [r7, #4]
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	781b      	ldrb	r3, [r3, #0]
 8009ee2:	009b      	lsls	r3, r3, #2
 8009ee4:	441a      	add	r2, r3
 8009ee6:	8a7b      	ldrh	r3, [r7, #18]
 8009ee8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009eec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ef0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ef4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ef8:	b29b      	uxth	r3, r3
 8009efa:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009efc:	2300      	movs	r3, #0
}
 8009efe:	4618      	mov	r0, r3
 8009f00:	371c      	adds	r7, #28
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bc80      	pop	{r7}
 8009f06:	4770      	bx	lr

08009f08 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009f08:	b480      	push	{r7}
 8009f0a:	b083      	sub	sp, #12
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
 8009f10:	460b      	mov	r3, r1
 8009f12:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009f14:	78fb      	ldrb	r3, [r7, #3]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d103      	bne.n	8009f22 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2280      	movs	r2, #128	; 0x80
 8009f1e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8009f22:	2300      	movs	r3, #0
}
 8009f24:	4618      	mov	r0, r3
 8009f26:	370c      	adds	r7, #12
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	bc80      	pop	{r7}
 8009f2c:	4770      	bx	lr

08009f2e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009f2e:	b480      	push	{r7}
 8009f30:	b083      	sub	sp, #12
 8009f32:	af00      	add	r7, sp, #0
 8009f34:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009f36:	2300      	movs	r3, #0
}
 8009f38:	4618      	mov	r0, r3
 8009f3a:	370c      	adds	r7, #12
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bc80      	pop	{r7}
 8009f40:	4770      	bx	lr

08009f42 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8009f42:	b480      	push	{r7}
 8009f44:	b083      	sub	sp, #12
 8009f46:	af00      	add	r7, sp, #0
 8009f48:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009f4a:	2300      	movs	r3, #0
}
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	370c      	adds	r7, #12
 8009f50:	46bd      	mov	sp, r7
 8009f52:	bc80      	pop	{r7}
 8009f54:	4770      	bx	lr

08009f56 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8009f56:	b480      	push	{r7}
 8009f58:	b085      	sub	sp, #20
 8009f5a:	af00      	add	r7, sp, #0
 8009f5c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009f64:	b29b      	uxth	r3, r3
 8009f66:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009f68:	68fb      	ldr	r3, [r7, #12]
}
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	3714      	adds	r7, #20
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bc80      	pop	{r7}
 8009f72:	4770      	bx	lr

08009f74 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8009f74:	b480      	push	{r7}
 8009f76:	b083      	sub	sp, #12
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
 8009f7c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8009f7e:	2300      	movs	r3, #0
}
 8009f80:	4618      	mov	r0, r3
 8009f82:	370c      	adds	r7, #12
 8009f84:	46bd      	mov	sp, r7
 8009f86:	bc80      	pop	{r7}
 8009f88:	4770      	bx	lr

08009f8a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009f8a:	b480      	push	{r7}
 8009f8c:	b08d      	sub	sp, #52	; 0x34
 8009f8e:	af00      	add	r7, sp, #0
 8009f90:	60f8      	str	r0, [r7, #12]
 8009f92:	60b9      	str	r1, [r7, #8]
 8009f94:	4611      	mov	r1, r2
 8009f96:	461a      	mov	r2, r3
 8009f98:	460b      	mov	r3, r1
 8009f9a:	80fb      	strh	r3, [r7, #6]
 8009f9c:	4613      	mov	r3, r2
 8009f9e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009fa0:	88bb      	ldrh	r3, [r7, #4]
 8009fa2:	3301      	adds	r3, #1
 8009fa4:	085b      	lsrs	r3, r3, #1
 8009fa6:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009fb0:	88fb      	ldrh	r3, [r7, #6]
 8009fb2:	005a      	lsls	r2, r3, #1
 8009fb4:	69fb      	ldr	r3, [r7, #28]
 8009fb6:	4413      	add	r3, r2
 8009fb8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009fbc:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8009fbe:	6a3b      	ldr	r3, [r7, #32]
 8009fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009fc2:	e01e      	b.n	800a002 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8009fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fc6:	781b      	ldrb	r3, [r3, #0]
 8009fc8:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8009fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fcc:	3301      	adds	r3, #1
 8009fce:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8009fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fd2:	781b      	ldrb	r3, [r3, #0]
 8009fd4:	b29b      	uxth	r3, r3
 8009fd6:	021b      	lsls	r3, r3, #8
 8009fd8:	b29b      	uxth	r3, r3
 8009fda:	461a      	mov	r2, r3
 8009fdc:	69bb      	ldr	r3, [r7, #24]
 8009fde:	4313      	orrs	r3, r2
 8009fe0:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8009fe2:	697b      	ldr	r3, [r7, #20]
 8009fe4:	b29a      	uxth	r2, r3
 8009fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fe8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fec:	3302      	adds	r3, #2
 8009fee:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8009ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ff2:	3302      	adds	r3, #2
 8009ff4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8009ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ff8:	3301      	adds	r3, #1
 8009ffa:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8009ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ffe:	3b01      	subs	r3, #1
 800a000:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a004:	2b00      	cmp	r3, #0
 800a006:	d1dd      	bne.n	8009fc4 <USB_WritePMA+0x3a>
  }
}
 800a008:	bf00      	nop
 800a00a:	bf00      	nop
 800a00c:	3734      	adds	r7, #52	; 0x34
 800a00e:	46bd      	mov	sp, r7
 800a010:	bc80      	pop	{r7}
 800a012:	4770      	bx	lr

0800a014 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a014:	b480      	push	{r7}
 800a016:	b08b      	sub	sp, #44	; 0x2c
 800a018:	af00      	add	r7, sp, #0
 800a01a:	60f8      	str	r0, [r7, #12]
 800a01c:	60b9      	str	r1, [r7, #8]
 800a01e:	4611      	mov	r1, r2
 800a020:	461a      	mov	r2, r3
 800a022:	460b      	mov	r3, r1
 800a024:	80fb      	strh	r3, [r7, #6]
 800a026:	4613      	mov	r3, r2
 800a028:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a02a:	88bb      	ldrh	r3, [r7, #4]
 800a02c:	085b      	lsrs	r3, r3, #1
 800a02e:	b29b      	uxth	r3, r3
 800a030:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a036:	68bb      	ldr	r3, [r7, #8]
 800a038:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a03a:	88fb      	ldrh	r3, [r7, #6]
 800a03c:	005a      	lsls	r2, r3, #1
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	4413      	add	r3, r2
 800a042:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a046:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800a048:	69bb      	ldr	r3, [r7, #24]
 800a04a:	627b      	str	r3, [r7, #36]	; 0x24
 800a04c:	e01b      	b.n	800a086 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800a04e:	6a3b      	ldr	r3, [r7, #32]
 800a050:	881b      	ldrh	r3, [r3, #0]
 800a052:	b29b      	uxth	r3, r3
 800a054:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a056:	6a3b      	ldr	r3, [r7, #32]
 800a058:	3302      	adds	r3, #2
 800a05a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a05c:	693b      	ldr	r3, [r7, #16]
 800a05e:	b2da      	uxtb	r2, r3
 800a060:	69fb      	ldr	r3, [r7, #28]
 800a062:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a064:	69fb      	ldr	r3, [r7, #28]
 800a066:	3301      	adds	r3, #1
 800a068:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800a06a:	693b      	ldr	r3, [r7, #16]
 800a06c:	0a1b      	lsrs	r3, r3, #8
 800a06e:	b2da      	uxtb	r2, r3
 800a070:	69fb      	ldr	r3, [r7, #28]
 800a072:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a074:	69fb      	ldr	r3, [r7, #28]
 800a076:	3301      	adds	r3, #1
 800a078:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800a07a:	6a3b      	ldr	r3, [r7, #32]
 800a07c:	3302      	adds	r3, #2
 800a07e:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800a080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a082:	3b01      	subs	r3, #1
 800a084:	627b      	str	r3, [r7, #36]	; 0x24
 800a086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d1e0      	bne.n	800a04e <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800a08c:	88bb      	ldrh	r3, [r7, #4]
 800a08e:	f003 0301 	and.w	r3, r3, #1
 800a092:	b29b      	uxth	r3, r3
 800a094:	2b00      	cmp	r3, #0
 800a096:	d007      	beq.n	800a0a8 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800a098:	6a3b      	ldr	r3, [r7, #32]
 800a09a:	881b      	ldrh	r3, [r3, #0]
 800a09c:	b29b      	uxth	r3, r3
 800a09e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a0a0:	693b      	ldr	r3, [r7, #16]
 800a0a2:	b2da      	uxtb	r2, r3
 800a0a4:	69fb      	ldr	r3, [r7, #28]
 800a0a6:	701a      	strb	r2, [r3, #0]
  }
}
 800a0a8:	bf00      	nop
 800a0aa:	372c      	adds	r7, #44	; 0x2c
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bc80      	pop	{r7}
 800a0b0:	4770      	bx	lr

0800a0b2 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a0b2:	b580      	push	{r7, lr}
 800a0b4:	b082      	sub	sp, #8
 800a0b6:	af00      	add	r7, sp, #0
 800a0b8:	6078      	str	r0, [r7, #4]
 800a0ba:	460b      	mov	r3, r1
 800a0bc:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800a0be:	2304      	movs	r3, #4
 800a0c0:	2203      	movs	r2, #3
 800a0c2:	2181      	movs	r1, #129	; 0x81
 800a0c4:	6878      	ldr	r0, [r7, #4]
 800a0c6:	f001 fc62 	bl	800b98e <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2201      	movs	r2, #1
 800a0ce:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 800a0d0:	2010      	movs	r0, #16
 800a0d2:	f001 fd71 	bl	800bbb8 <USBD_static_malloc>
 800a0d6:	4602      	mov	r2, r0
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d101      	bne.n	800a0ec <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 800a0e8:	2302      	movs	r3, #2
 800a0ea:	e005      	b.n	800a0f8 <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 800a0f6:	2300      	movs	r3, #0
}
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	3708      	adds	r7, #8
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	bd80      	pop	{r7, pc}

0800a100 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b082      	sub	sp, #8
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
 800a108:	460b      	mov	r3, r1
 800a10a:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 800a10c:	2181      	movs	r1, #129	; 0x81
 800a10e:	6878      	ldr	r0, [r7, #4]
 800a110:	f001 fc63 	bl	800b9da <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2200      	movs	r2, #0
 800a118:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a120:	2b00      	cmp	r3, #0
 800a122:	d009      	beq.n	800a138 <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a12a:	4618      	mov	r0, r3
 800a12c:	f001 fd50 	bl	800bbd0 <USBD_static_free>
    pdev->pClassData = NULL;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2200      	movs	r2, #0
 800a134:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 800a138:	2300      	movs	r3, #0
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	3708      	adds	r7, #8
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}
	...

0800a144 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b088      	sub	sp, #32
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
 800a14c:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a154:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800a156:	2300      	movs	r3, #0
 800a158:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 800a15a:	2300      	movs	r3, #0
 800a15c:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800a15e:	2300      	movs	r3, #0
 800a160:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 800a162:	2300      	movs	r3, #0
 800a164:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	781b      	ldrb	r3, [r3, #0]
 800a16a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d045      	beq.n	800a1fe <USBD_HID_Setup+0xba>
 800a172:	2b20      	cmp	r3, #32
 800a174:	f040 80d3 	bne.w	800a31e <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	785b      	ldrb	r3, [r3, #1]
 800a17c:	3b02      	subs	r3, #2
 800a17e:	2b09      	cmp	r3, #9
 800a180:	d835      	bhi.n	800a1ee <USBD_HID_Setup+0xaa>
 800a182:	a201      	add	r2, pc, #4	; (adr r2, 800a188 <USBD_HID_Setup+0x44>)
 800a184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a188:	0800a1df 	.word	0x0800a1df
 800a18c:	0800a1bf 	.word	0x0800a1bf
 800a190:	0800a1ef 	.word	0x0800a1ef
 800a194:	0800a1ef 	.word	0x0800a1ef
 800a198:	0800a1ef 	.word	0x0800a1ef
 800a19c:	0800a1ef 	.word	0x0800a1ef
 800a1a0:	0800a1ef 	.word	0x0800a1ef
 800a1a4:	0800a1ef 	.word	0x0800a1ef
 800a1a8:	0800a1cd 	.word	0x0800a1cd
 800a1ac:	0800a1b1 	.word	0x0800a1b1
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	885b      	ldrh	r3, [r3, #2]
 800a1b4:	b2db      	uxtb	r3, r3
 800a1b6:	461a      	mov	r2, r3
 800a1b8:	693b      	ldr	r3, [r7, #16]
 800a1ba:	601a      	str	r2, [r3, #0]
          break;
 800a1bc:	e01e      	b.n	800a1fc <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 800a1be:	693b      	ldr	r3, [r7, #16]
 800a1c0:	2201      	movs	r2, #1
 800a1c2:	4619      	mov	r1, r3
 800a1c4:	6878      	ldr	r0, [r7, #4]
 800a1c6:	f001 f922 	bl	800b40e <USBD_CtlSendData>
          break;
 800a1ca:	e017      	b.n	800a1fc <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	885b      	ldrh	r3, [r3, #2]
 800a1d0:	0a1b      	lsrs	r3, r3, #8
 800a1d2:	b29b      	uxth	r3, r3
 800a1d4:	b2db      	uxtb	r3, r3
 800a1d6:	461a      	mov	r2, r3
 800a1d8:	693b      	ldr	r3, [r7, #16]
 800a1da:	605a      	str	r2, [r3, #4]
          break;
 800a1dc:	e00e      	b.n	800a1fc <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 800a1de:	693b      	ldr	r3, [r7, #16]
 800a1e0:	3304      	adds	r3, #4
 800a1e2:	2201      	movs	r2, #1
 800a1e4:	4619      	mov	r1, r3
 800a1e6:	6878      	ldr	r0, [r7, #4]
 800a1e8:	f001 f911 	bl	800b40e <USBD_CtlSendData>
          break;
 800a1ec:	e006      	b.n	800a1fc <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 800a1ee:	6839      	ldr	r1, [r7, #0]
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f001 f8a2 	bl	800b33a <USBD_CtlError>
          ret = USBD_FAIL;
 800a1f6:	2302      	movs	r3, #2
 800a1f8:	75fb      	strb	r3, [r7, #23]
          break;
 800a1fa:	bf00      	nop
      }
      break;
 800a1fc:	e096      	b.n	800a32c <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	785b      	ldrb	r3, [r3, #1]
 800a202:	2b0b      	cmp	r3, #11
 800a204:	f200 8083 	bhi.w	800a30e <USBD_HID_Setup+0x1ca>
 800a208:	a201      	add	r2, pc, #4	; (adr r2, 800a210 <USBD_HID_Setup+0xcc>)
 800a20a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a20e:	bf00      	nop
 800a210:	0800a241 	.word	0x0800a241
 800a214:	0800a30f 	.word	0x0800a30f
 800a218:	0800a30f 	.word	0x0800a30f
 800a21c:	0800a30f 	.word	0x0800a30f
 800a220:	0800a30f 	.word	0x0800a30f
 800a224:	0800a30f 	.word	0x0800a30f
 800a228:	0800a269 	.word	0x0800a269
 800a22c:	0800a30f 	.word	0x0800a30f
 800a230:	0800a30f 	.word	0x0800a30f
 800a234:	0800a30f 	.word	0x0800a30f
 800a238:	0800a2c1 	.word	0x0800a2c1
 800a23c:	0800a2e9 	.word	0x0800a2e9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a246:	2b03      	cmp	r3, #3
 800a248:	d107      	bne.n	800a25a <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800a24a:	f107 030e 	add.w	r3, r7, #14
 800a24e:	2202      	movs	r2, #2
 800a250:	4619      	mov	r1, r3
 800a252:	6878      	ldr	r0, [r7, #4]
 800a254:	f001 f8db 	bl	800b40e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a258:	e060      	b.n	800a31c <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800a25a:	6839      	ldr	r1, [r7, #0]
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f001 f86c 	bl	800b33a <USBD_CtlError>
            ret = USBD_FAIL;
 800a262:	2302      	movs	r3, #2
 800a264:	75fb      	strb	r3, [r7, #23]
          break;
 800a266:	e059      	b.n	800a31c <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	885b      	ldrh	r3, [r3, #2]
 800a26c:	0a1b      	lsrs	r3, r3, #8
 800a26e:	b29b      	uxth	r3, r3
 800a270:	2b22      	cmp	r3, #34	; 0x22
 800a272:	d108      	bne.n	800a286 <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	88db      	ldrh	r3, [r3, #6]
 800a278:	2b4a      	cmp	r3, #74	; 0x4a
 800a27a:	bf28      	it	cs
 800a27c:	234a      	movcs	r3, #74	; 0x4a
 800a27e:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 800a280:	4b2d      	ldr	r3, [pc, #180]	; (800a338 <USBD_HID_Setup+0x1f4>)
 800a282:	61bb      	str	r3, [r7, #24]
 800a284:	e015      	b.n	800a2b2 <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	885b      	ldrh	r3, [r3, #2]
 800a28a:	0a1b      	lsrs	r3, r3, #8
 800a28c:	b29b      	uxth	r3, r3
 800a28e:	2b21      	cmp	r3, #33	; 0x21
 800a290:	d108      	bne.n	800a2a4 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 800a292:	4b2a      	ldr	r3, [pc, #168]	; (800a33c <USBD_HID_Setup+0x1f8>)
 800a294:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	88db      	ldrh	r3, [r3, #6]
 800a29a:	2b09      	cmp	r3, #9
 800a29c:	bf28      	it	cs
 800a29e:	2309      	movcs	r3, #9
 800a2a0:	83fb      	strh	r3, [r7, #30]
 800a2a2:	e006      	b.n	800a2b2 <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 800a2a4:	6839      	ldr	r1, [r7, #0]
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	f001 f847 	bl	800b33a <USBD_CtlError>
            ret = USBD_FAIL;
 800a2ac:	2302      	movs	r3, #2
 800a2ae:	75fb      	strb	r3, [r7, #23]
            break;
 800a2b0:	e034      	b.n	800a31c <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 800a2b2:	8bfb      	ldrh	r3, [r7, #30]
 800a2b4:	461a      	mov	r2, r3
 800a2b6:	69b9      	ldr	r1, [r7, #24]
 800a2b8:	6878      	ldr	r0, [r7, #4]
 800a2ba:	f001 f8a8 	bl	800b40e <USBD_CtlSendData>
          break;
 800a2be:	e02d      	b.n	800a31c <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2c6:	2b03      	cmp	r3, #3
 800a2c8:	d107      	bne.n	800a2da <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 800a2ca:	693b      	ldr	r3, [r7, #16]
 800a2cc:	3308      	adds	r3, #8
 800a2ce:	2201      	movs	r2, #1
 800a2d0:	4619      	mov	r1, r3
 800a2d2:	6878      	ldr	r0, [r7, #4]
 800a2d4:	f001 f89b 	bl	800b40e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a2d8:	e020      	b.n	800a31c <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800a2da:	6839      	ldr	r1, [r7, #0]
 800a2dc:	6878      	ldr	r0, [r7, #4]
 800a2de:	f001 f82c 	bl	800b33a <USBD_CtlError>
            ret = USBD_FAIL;
 800a2e2:	2302      	movs	r3, #2
 800a2e4:	75fb      	strb	r3, [r7, #23]
          break;
 800a2e6:	e019      	b.n	800a31c <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2ee:	2b03      	cmp	r3, #3
 800a2f0:	d106      	bne.n	800a300 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	885b      	ldrh	r3, [r3, #2]
 800a2f6:	b2db      	uxtb	r3, r3
 800a2f8:	461a      	mov	r2, r3
 800a2fa:	693b      	ldr	r3, [r7, #16]
 800a2fc:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a2fe:	e00d      	b.n	800a31c <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800a300:	6839      	ldr	r1, [r7, #0]
 800a302:	6878      	ldr	r0, [r7, #4]
 800a304:	f001 f819 	bl	800b33a <USBD_CtlError>
            ret = USBD_FAIL;
 800a308:	2302      	movs	r3, #2
 800a30a:	75fb      	strb	r3, [r7, #23]
          break;
 800a30c:	e006      	b.n	800a31c <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 800a30e:	6839      	ldr	r1, [r7, #0]
 800a310:	6878      	ldr	r0, [r7, #4]
 800a312:	f001 f812 	bl	800b33a <USBD_CtlError>
          ret = USBD_FAIL;
 800a316:	2302      	movs	r3, #2
 800a318:	75fb      	strb	r3, [r7, #23]
          break;
 800a31a:	bf00      	nop
      }
      break;
 800a31c:	e006      	b.n	800a32c <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 800a31e:	6839      	ldr	r1, [r7, #0]
 800a320:	6878      	ldr	r0, [r7, #4]
 800a322:	f001 f80a 	bl	800b33a <USBD_CtlError>
      ret = USBD_FAIL;
 800a326:	2302      	movs	r3, #2
 800a328:	75fb      	strb	r3, [r7, #23]
      break;
 800a32a:	bf00      	nop
  }

  return ret;
 800a32c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a32e:	4618      	mov	r0, r3
 800a330:	3720      	adds	r7, #32
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}
 800a336:	bf00      	nop
 800a338:	2000015c 	.word	0x2000015c
 800a33c:	20000144 	.word	0x20000144

0800a340 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 800a340:	b480      	push	{r7}
 800a342:	b083      	sub	sp, #12
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2222      	movs	r2, #34	; 0x22
 800a34c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 800a34e:	4b03      	ldr	r3, [pc, #12]	; (800a35c <USBD_HID_GetFSCfgDesc+0x1c>)
}
 800a350:	4618      	mov	r0, r3
 800a352:	370c      	adds	r7, #12
 800a354:	46bd      	mov	sp, r7
 800a356:	bc80      	pop	{r7}
 800a358:	4770      	bx	lr
 800a35a:	bf00      	nop
 800a35c:	200000d8 	.word	0x200000d8

0800a360 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 800a360:	b480      	push	{r7}
 800a362:	b083      	sub	sp, #12
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2222      	movs	r2, #34	; 0x22
 800a36c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 800a36e:	4b03      	ldr	r3, [pc, #12]	; (800a37c <USBD_HID_GetHSCfgDesc+0x1c>)
}
 800a370:	4618      	mov	r0, r3
 800a372:	370c      	adds	r7, #12
 800a374:	46bd      	mov	sp, r7
 800a376:	bc80      	pop	{r7}
 800a378:	4770      	bx	lr
 800a37a:	bf00      	nop
 800a37c:	200000fc 	.word	0x200000fc

0800a380 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a380:	b480      	push	{r7}
 800a382:	b083      	sub	sp, #12
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2222      	movs	r2, #34	; 0x22
 800a38c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 800a38e:	4b03      	ldr	r3, [pc, #12]	; (800a39c <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 800a390:	4618      	mov	r0, r3
 800a392:	370c      	adds	r7, #12
 800a394:	46bd      	mov	sp, r7
 800a396:	bc80      	pop	{r7}
 800a398:	4770      	bx	lr
 800a39a:	bf00      	nop
 800a39c:	20000120 	.word	0x20000120

0800a3a0 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 800a3a0:	b480      	push	{r7}
 800a3a2:	b083      	sub	sp, #12
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
 800a3a8:	460b      	mov	r3, r1
 800a3aa:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 800a3b6:	2300      	movs	r3, #0
}
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	370c      	adds	r7, #12
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	bc80      	pop	{r7}
 800a3c0:	4770      	bx	lr
	...

0800a3c4 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	b083      	sub	sp, #12
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	220a      	movs	r2, #10
 800a3d0:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 800a3d2:	4b03      	ldr	r3, [pc, #12]	; (800a3e0 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	370c      	adds	r7, #12
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	bc80      	pop	{r7}
 800a3dc:	4770      	bx	lr
 800a3de:	bf00      	nop
 800a3e0:	20000150 	.word	0x20000150

0800a3e4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b084      	sub	sp, #16
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	60f8      	str	r0, [r7, #12]
 800a3ec:	60b9      	str	r1, [r7, #8]
 800a3ee:	4613      	mov	r3, r2
 800a3f0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d101      	bne.n	800a3fc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a3f8:	2302      	movs	r3, #2
 800a3fa:	e01a      	b.n	800a432 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a402:	2b00      	cmp	r3, #0
 800a404:	d003      	beq.n	800a40e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	2200      	movs	r2, #0
 800a40a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d003      	beq.n	800a41c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	68ba      	ldr	r2, [r7, #8]
 800a418:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	2201      	movs	r2, #1
 800a420:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	79fa      	ldrb	r2, [r7, #7]
 800a428:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800a42a:	68f8      	ldr	r0, [r7, #12]
 800a42c:	f001 fa4c 	bl	800b8c8 <USBD_LL_Init>

  return USBD_OK;
 800a430:	2300      	movs	r3, #0
}
 800a432:	4618      	mov	r0, r3
 800a434:	3710      	adds	r7, #16
 800a436:	46bd      	mov	sp, r7
 800a438:	bd80      	pop	{r7, pc}

0800a43a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a43a:	b480      	push	{r7}
 800a43c:	b085      	sub	sp, #20
 800a43e:	af00      	add	r7, sp, #0
 800a440:	6078      	str	r0, [r7, #4]
 800a442:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800a444:	2300      	movs	r3, #0
 800a446:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800a448:	683b      	ldr	r3, [r7, #0]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d006      	beq.n	800a45c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	683a      	ldr	r2, [r7, #0]
 800a452:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800a456:	2300      	movs	r3, #0
 800a458:	73fb      	strb	r3, [r7, #15]
 800a45a:	e001      	b.n	800a460 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800a45c:	2302      	movs	r3, #2
 800a45e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a460:	7bfb      	ldrb	r3, [r7, #15]
}
 800a462:	4618      	mov	r0, r3
 800a464:	3714      	adds	r7, #20
 800a466:	46bd      	mov	sp, r7
 800a468:	bc80      	pop	{r7}
 800a46a:	4770      	bx	lr

0800a46c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b082      	sub	sp, #8
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800a474:	6878      	ldr	r0, [r7, #4]
 800a476:	f001 fa6f 	bl	800b958 <USBD_LL_Start>

  return USBD_OK;
 800a47a:	2300      	movs	r3, #0
}
 800a47c:	4618      	mov	r0, r3
 800a47e:	3708      	adds	r7, #8
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}

0800a484 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a484:	b480      	push	{r7}
 800a486:	b083      	sub	sp, #12
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a48c:	2300      	movs	r3, #0
}
 800a48e:	4618      	mov	r0, r3
 800a490:	370c      	adds	r7, #12
 800a492:	46bd      	mov	sp, r7
 800a494:	bc80      	pop	{r7}
 800a496:	4770      	bx	lr

0800a498 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b084      	sub	sp, #16
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
 800a4a0:	460b      	mov	r3, r1
 800a4a2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a4a4:	2302      	movs	r3, #2
 800a4a6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d00c      	beq.n	800a4cc <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	78fa      	ldrb	r2, [r7, #3]
 800a4bc:	4611      	mov	r1, r2
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	4798      	blx	r3
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d101      	bne.n	800a4cc <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800a4cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	3710      	adds	r7, #16
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	bd80      	pop	{r7, pc}

0800a4d6 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a4d6:	b580      	push	{r7, lr}
 800a4d8:	b082      	sub	sp, #8
 800a4da:	af00      	add	r7, sp, #0
 800a4dc:	6078      	str	r0, [r7, #4]
 800a4de:	460b      	mov	r3, r1
 800a4e0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a4e8:	685b      	ldr	r3, [r3, #4]
 800a4ea:	78fa      	ldrb	r2, [r7, #3]
 800a4ec:	4611      	mov	r1, r2
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	4798      	blx	r3

  return USBD_OK;
 800a4f2:	2300      	movs	r3, #0
}
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	3708      	adds	r7, #8
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	bd80      	pop	{r7, pc}

0800a4fc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b082      	sub	sp, #8
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
 800a504:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a50c:	6839      	ldr	r1, [r7, #0]
 800a50e:	4618      	mov	r0, r3
 800a510:	f000 fed7 	bl	800b2c2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2201      	movs	r2, #1
 800a518:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a522:	461a      	mov	r2, r3
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a530:	f003 031f 	and.w	r3, r3, #31
 800a534:	2b02      	cmp	r3, #2
 800a536:	d016      	beq.n	800a566 <USBD_LL_SetupStage+0x6a>
 800a538:	2b02      	cmp	r3, #2
 800a53a:	d81c      	bhi.n	800a576 <USBD_LL_SetupStage+0x7a>
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d002      	beq.n	800a546 <USBD_LL_SetupStage+0x4a>
 800a540:	2b01      	cmp	r3, #1
 800a542:	d008      	beq.n	800a556 <USBD_LL_SetupStage+0x5a>
 800a544:	e017      	b.n	800a576 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a54c:	4619      	mov	r1, r3
 800a54e:	6878      	ldr	r0, [r7, #4]
 800a550:	f000 f9ca 	bl	800a8e8 <USBD_StdDevReq>
      break;
 800a554:	e01a      	b.n	800a58c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a55c:	4619      	mov	r1, r3
 800a55e:	6878      	ldr	r0, [r7, #4]
 800a560:	f000 fa2c 	bl	800a9bc <USBD_StdItfReq>
      break;
 800a564:	e012      	b.n	800a58c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a56c:	4619      	mov	r1, r3
 800a56e:	6878      	ldr	r0, [r7, #4]
 800a570:	f000 fa6c 	bl	800aa4c <USBD_StdEPReq>
      break;
 800a574:	e00a      	b.n	800a58c <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a57c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a580:	b2db      	uxtb	r3, r3
 800a582:	4619      	mov	r1, r3
 800a584:	6878      	ldr	r0, [r7, #4]
 800a586:	f001 fa47 	bl	800ba18 <USBD_LL_StallEP>
      break;
 800a58a:	bf00      	nop
  }

  return USBD_OK;
 800a58c:	2300      	movs	r3, #0
}
 800a58e:	4618      	mov	r0, r3
 800a590:	3708      	adds	r7, #8
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}

0800a596 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a596:	b580      	push	{r7, lr}
 800a598:	b086      	sub	sp, #24
 800a59a:	af00      	add	r7, sp, #0
 800a59c:	60f8      	str	r0, [r7, #12]
 800a59e:	460b      	mov	r3, r1
 800a5a0:	607a      	str	r2, [r7, #4]
 800a5a2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a5a4:	7afb      	ldrb	r3, [r7, #11]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d14b      	bne.n	800a642 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a5b0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a5b8:	2b03      	cmp	r3, #3
 800a5ba:	d134      	bne.n	800a626 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800a5bc:	697b      	ldr	r3, [r7, #20]
 800a5be:	68da      	ldr	r2, [r3, #12]
 800a5c0:	697b      	ldr	r3, [r7, #20]
 800a5c2:	691b      	ldr	r3, [r3, #16]
 800a5c4:	429a      	cmp	r2, r3
 800a5c6:	d919      	bls.n	800a5fc <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800a5c8:	697b      	ldr	r3, [r7, #20]
 800a5ca:	68da      	ldr	r2, [r3, #12]
 800a5cc:	697b      	ldr	r3, [r7, #20]
 800a5ce:	691b      	ldr	r3, [r3, #16]
 800a5d0:	1ad2      	subs	r2, r2, r3
 800a5d2:	697b      	ldr	r3, [r7, #20]
 800a5d4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a5d6:	697b      	ldr	r3, [r7, #20]
 800a5d8:	68da      	ldr	r2, [r3, #12]
 800a5da:	697b      	ldr	r3, [r7, #20]
 800a5dc:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a5de:	429a      	cmp	r2, r3
 800a5e0:	d203      	bcs.n	800a5ea <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a5e2:	697b      	ldr	r3, [r7, #20]
 800a5e4:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800a5e6:	b29b      	uxth	r3, r3
 800a5e8:	e002      	b.n	800a5f0 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a5ea:	697b      	ldr	r3, [r7, #20]
 800a5ec:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a5ee:	b29b      	uxth	r3, r3
 800a5f0:	461a      	mov	r2, r3
 800a5f2:	6879      	ldr	r1, [r7, #4]
 800a5f4:	68f8      	ldr	r0, [r7, #12]
 800a5f6:	f000 ff38 	bl	800b46a <USBD_CtlContinueRx>
 800a5fa:	e038      	b.n	800a66e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a602:	691b      	ldr	r3, [r3, #16]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d00a      	beq.n	800a61e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a60e:	2b03      	cmp	r3, #3
 800a610:	d105      	bne.n	800a61e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a618:	691b      	ldr	r3, [r3, #16]
 800a61a:	68f8      	ldr	r0, [r7, #12]
 800a61c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800a61e:	68f8      	ldr	r0, [r7, #12]
 800a620:	f000 ff35 	bl	800b48e <USBD_CtlSendStatus>
 800a624:	e023      	b.n	800a66e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a62c:	2b05      	cmp	r3, #5
 800a62e:	d11e      	bne.n	800a66e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	2200      	movs	r2, #0
 800a634:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800a638:	2100      	movs	r1, #0
 800a63a:	68f8      	ldr	r0, [r7, #12]
 800a63c:	f001 f9ec 	bl	800ba18 <USBD_LL_StallEP>
 800a640:	e015      	b.n	800a66e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a648:	699b      	ldr	r3, [r3, #24]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d00d      	beq.n	800a66a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800a654:	2b03      	cmp	r3, #3
 800a656:	d108      	bne.n	800a66a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a65e:	699b      	ldr	r3, [r3, #24]
 800a660:	7afa      	ldrb	r2, [r7, #11]
 800a662:	4611      	mov	r1, r2
 800a664:	68f8      	ldr	r0, [r7, #12]
 800a666:	4798      	blx	r3
 800a668:	e001      	b.n	800a66e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a66a:	2302      	movs	r3, #2
 800a66c:	e000      	b.n	800a670 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800a66e:	2300      	movs	r3, #0
}
 800a670:	4618      	mov	r0, r3
 800a672:	3718      	adds	r7, #24
 800a674:	46bd      	mov	sp, r7
 800a676:	bd80      	pop	{r7, pc}

0800a678 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b086      	sub	sp, #24
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	60f8      	str	r0, [r7, #12]
 800a680:	460b      	mov	r3, r1
 800a682:	607a      	str	r2, [r7, #4]
 800a684:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a686:	7afb      	ldrb	r3, [r7, #11]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d17f      	bne.n	800a78c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	3314      	adds	r3, #20
 800a690:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a698:	2b02      	cmp	r3, #2
 800a69a:	d15c      	bne.n	800a756 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800a69c:	697b      	ldr	r3, [r7, #20]
 800a69e:	68da      	ldr	r2, [r3, #12]
 800a6a0:	697b      	ldr	r3, [r7, #20]
 800a6a2:	691b      	ldr	r3, [r3, #16]
 800a6a4:	429a      	cmp	r2, r3
 800a6a6:	d915      	bls.n	800a6d4 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800a6a8:	697b      	ldr	r3, [r7, #20]
 800a6aa:	68da      	ldr	r2, [r3, #12]
 800a6ac:	697b      	ldr	r3, [r7, #20]
 800a6ae:	691b      	ldr	r3, [r3, #16]
 800a6b0:	1ad2      	subs	r2, r2, r3
 800a6b2:	697b      	ldr	r3, [r7, #20]
 800a6b4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800a6b6:	697b      	ldr	r3, [r7, #20]
 800a6b8:	68db      	ldr	r3, [r3, #12]
 800a6ba:	b29b      	uxth	r3, r3
 800a6bc:	461a      	mov	r2, r3
 800a6be:	6879      	ldr	r1, [r7, #4]
 800a6c0:	68f8      	ldr	r0, [r7, #12]
 800a6c2:	f000 fec0 	bl	800b446 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	2100      	movs	r1, #0
 800a6cc:	68f8      	ldr	r0, [r7, #12]
 800a6ce:	f001 fa4f 	bl	800bb70 <USBD_LL_PrepareReceive>
 800a6d2:	e04e      	b.n	800a772 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a6d4:	697b      	ldr	r3, [r7, #20]
 800a6d6:	689b      	ldr	r3, [r3, #8]
 800a6d8:	697a      	ldr	r2, [r7, #20]
 800a6da:	6912      	ldr	r2, [r2, #16]
 800a6dc:	fbb3 f1f2 	udiv	r1, r3, r2
 800a6e0:	fb02 f201 	mul.w	r2, r2, r1
 800a6e4:	1a9b      	subs	r3, r3, r2
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d11c      	bne.n	800a724 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800a6ea:	697b      	ldr	r3, [r7, #20]
 800a6ec:	689a      	ldr	r2, [r3, #8]
 800a6ee:	697b      	ldr	r3, [r7, #20]
 800a6f0:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a6f2:	429a      	cmp	r2, r3
 800a6f4:	d316      	bcc.n	800a724 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800a6f6:	697b      	ldr	r3, [r7, #20]
 800a6f8:	689a      	ldr	r2, [r3, #8]
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a700:	429a      	cmp	r2, r3
 800a702:	d20f      	bcs.n	800a724 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a704:	2200      	movs	r2, #0
 800a706:	2100      	movs	r1, #0
 800a708:	68f8      	ldr	r0, [r7, #12]
 800a70a:	f000 fe9c 	bl	800b446 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	2200      	movs	r2, #0
 800a712:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a716:	2300      	movs	r3, #0
 800a718:	2200      	movs	r2, #0
 800a71a:	2100      	movs	r1, #0
 800a71c:	68f8      	ldr	r0, [r7, #12]
 800a71e:	f001 fa27 	bl	800bb70 <USBD_LL_PrepareReceive>
 800a722:	e026      	b.n	800a772 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a72a:	68db      	ldr	r3, [r3, #12]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d00a      	beq.n	800a746 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a736:	2b03      	cmp	r3, #3
 800a738:	d105      	bne.n	800a746 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a740:	68db      	ldr	r3, [r3, #12]
 800a742:	68f8      	ldr	r0, [r7, #12]
 800a744:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800a746:	2180      	movs	r1, #128	; 0x80
 800a748:	68f8      	ldr	r0, [r7, #12]
 800a74a:	f001 f965 	bl	800ba18 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800a74e:	68f8      	ldr	r0, [r7, #12]
 800a750:	f000 feb0 	bl	800b4b4 <USBD_CtlReceiveStatus>
 800a754:	e00d      	b.n	800a772 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a75c:	2b04      	cmp	r3, #4
 800a75e:	d004      	beq.n	800a76a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a766:	2b00      	cmp	r3, #0
 800a768:	d103      	bne.n	800a772 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800a76a:	2180      	movs	r1, #128	; 0x80
 800a76c:	68f8      	ldr	r0, [r7, #12]
 800a76e:	f001 f953 	bl	800ba18 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a778:	2b01      	cmp	r3, #1
 800a77a:	d11d      	bne.n	800a7b8 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800a77c:	68f8      	ldr	r0, [r7, #12]
 800a77e:	f7ff fe81 	bl	800a484 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	2200      	movs	r2, #0
 800a786:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a78a:	e015      	b.n	800a7b8 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a792:	695b      	ldr	r3, [r3, #20]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d00d      	beq.n	800a7b4 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800a79e:	2b03      	cmp	r3, #3
 800a7a0:	d108      	bne.n	800a7b4 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7a8:	695b      	ldr	r3, [r3, #20]
 800a7aa:	7afa      	ldrb	r2, [r7, #11]
 800a7ac:	4611      	mov	r1, r2
 800a7ae:	68f8      	ldr	r0, [r7, #12]
 800a7b0:	4798      	blx	r3
 800a7b2:	e001      	b.n	800a7b8 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a7b4:	2302      	movs	r3, #2
 800a7b6:	e000      	b.n	800a7ba <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800a7b8:	2300      	movs	r3, #0
}
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	3718      	adds	r7, #24
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	bd80      	pop	{r7, pc}

0800a7c2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a7c2:	b580      	push	{r7, lr}
 800a7c4:	b082      	sub	sp, #8
 800a7c6:	af00      	add	r7, sp, #0
 800a7c8:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a7ca:	2340      	movs	r3, #64	; 0x40
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	2100      	movs	r1, #0
 800a7d0:	6878      	ldr	r0, [r7, #4]
 800a7d2:	f001 f8dc 	bl	800b98e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	2201      	movs	r2, #1
 800a7da:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	2240      	movs	r2, #64	; 0x40
 800a7e2:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a7e6:	2340      	movs	r3, #64	; 0x40
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	2180      	movs	r1, #128	; 0x80
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	f001 f8ce 	bl	800b98e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	2201      	movs	r2, #1
 800a7f6:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2240      	movs	r2, #64	; 0x40
 800a7fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2201      	movs	r2, #1
 800a802:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2200      	movs	r2, #0
 800a80a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	2200      	movs	r2, #0
 800a812:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2200      	movs	r2, #0
 800a818:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a822:	2b00      	cmp	r3, #0
 800a824:	d009      	beq.n	800a83a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a82c:	685b      	ldr	r3, [r3, #4]
 800a82e:	687a      	ldr	r2, [r7, #4]
 800a830:	6852      	ldr	r2, [r2, #4]
 800a832:	b2d2      	uxtb	r2, r2
 800a834:	4611      	mov	r1, r2
 800a836:	6878      	ldr	r0, [r7, #4]
 800a838:	4798      	blx	r3
  }

  return USBD_OK;
 800a83a:	2300      	movs	r3, #0
}
 800a83c:	4618      	mov	r0, r3
 800a83e:	3708      	adds	r7, #8
 800a840:	46bd      	mov	sp, r7
 800a842:	bd80      	pop	{r7, pc}

0800a844 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a844:	b480      	push	{r7}
 800a846:	b083      	sub	sp, #12
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
 800a84c:	460b      	mov	r3, r1
 800a84e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	78fa      	ldrb	r2, [r7, #3]
 800a854:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a856:	2300      	movs	r3, #0
}
 800a858:	4618      	mov	r0, r3
 800a85a:	370c      	adds	r7, #12
 800a85c:	46bd      	mov	sp, r7
 800a85e:	bc80      	pop	{r7}
 800a860:	4770      	bx	lr

0800a862 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a862:	b480      	push	{r7}
 800a864:	b083      	sub	sp, #12
 800a866:	af00      	add	r7, sp, #0
 800a868:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2204      	movs	r2, #4
 800a87a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a87e:	2300      	movs	r3, #0
}
 800a880:	4618      	mov	r0, r3
 800a882:	370c      	adds	r7, #12
 800a884:	46bd      	mov	sp, r7
 800a886:	bc80      	pop	{r7}
 800a888:	4770      	bx	lr

0800a88a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a88a:	b480      	push	{r7}
 800a88c:	b083      	sub	sp, #12
 800a88e:	af00      	add	r7, sp, #0
 800a890:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a898:	2b04      	cmp	r3, #4
 800a89a:	d105      	bne.n	800a8a8 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a8a8:	2300      	movs	r3, #0
}
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	370c      	adds	r7, #12
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bc80      	pop	{r7}
 800a8b2:	4770      	bx	lr

0800a8b4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b082      	sub	sp, #8
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8c2:	2b03      	cmp	r3, #3
 800a8c4:	d10b      	bne.n	800a8de <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8cc:	69db      	ldr	r3, [r3, #28]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d005      	beq.n	800a8de <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8d8:	69db      	ldr	r3, [r3, #28]
 800a8da:	6878      	ldr	r0, [r7, #4]
 800a8dc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a8de:	2300      	movs	r3, #0
}
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	3708      	adds	r7, #8
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	bd80      	pop	{r7, pc}

0800a8e8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b084      	sub	sp, #16
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
 800a8f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	781b      	ldrb	r3, [r3, #0]
 800a8fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a8fe:	2b40      	cmp	r3, #64	; 0x40
 800a900:	d005      	beq.n	800a90e <USBD_StdDevReq+0x26>
 800a902:	2b40      	cmp	r3, #64	; 0x40
 800a904:	d84f      	bhi.n	800a9a6 <USBD_StdDevReq+0xbe>
 800a906:	2b00      	cmp	r3, #0
 800a908:	d009      	beq.n	800a91e <USBD_StdDevReq+0x36>
 800a90a:	2b20      	cmp	r3, #32
 800a90c:	d14b      	bne.n	800a9a6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a914:	689b      	ldr	r3, [r3, #8]
 800a916:	6839      	ldr	r1, [r7, #0]
 800a918:	6878      	ldr	r0, [r7, #4]
 800a91a:	4798      	blx	r3
      break;
 800a91c:	e048      	b.n	800a9b0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	785b      	ldrb	r3, [r3, #1]
 800a922:	2b09      	cmp	r3, #9
 800a924:	d839      	bhi.n	800a99a <USBD_StdDevReq+0xb2>
 800a926:	a201      	add	r2, pc, #4	; (adr r2, 800a92c <USBD_StdDevReq+0x44>)
 800a928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a92c:	0800a97d 	.word	0x0800a97d
 800a930:	0800a991 	.word	0x0800a991
 800a934:	0800a99b 	.word	0x0800a99b
 800a938:	0800a987 	.word	0x0800a987
 800a93c:	0800a99b 	.word	0x0800a99b
 800a940:	0800a95f 	.word	0x0800a95f
 800a944:	0800a955 	.word	0x0800a955
 800a948:	0800a99b 	.word	0x0800a99b
 800a94c:	0800a973 	.word	0x0800a973
 800a950:	0800a969 	.word	0x0800a969
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a954:	6839      	ldr	r1, [r7, #0]
 800a956:	6878      	ldr	r0, [r7, #4]
 800a958:	f000 f9dc 	bl	800ad14 <USBD_GetDescriptor>
          break;
 800a95c:	e022      	b.n	800a9a4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a95e:	6839      	ldr	r1, [r7, #0]
 800a960:	6878      	ldr	r0, [r7, #4]
 800a962:	f000 fb3f 	bl	800afe4 <USBD_SetAddress>
          break;
 800a966:	e01d      	b.n	800a9a4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800a968:	6839      	ldr	r1, [r7, #0]
 800a96a:	6878      	ldr	r0, [r7, #4]
 800a96c:	f000 fb7e 	bl	800b06c <USBD_SetConfig>
          break;
 800a970:	e018      	b.n	800a9a4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a972:	6839      	ldr	r1, [r7, #0]
 800a974:	6878      	ldr	r0, [r7, #4]
 800a976:	f000 fc07 	bl	800b188 <USBD_GetConfig>
          break;
 800a97a:	e013      	b.n	800a9a4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a97c:	6839      	ldr	r1, [r7, #0]
 800a97e:	6878      	ldr	r0, [r7, #4]
 800a980:	f000 fc37 	bl	800b1f2 <USBD_GetStatus>
          break;
 800a984:	e00e      	b.n	800a9a4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a986:	6839      	ldr	r1, [r7, #0]
 800a988:	6878      	ldr	r0, [r7, #4]
 800a98a:	f000 fc65 	bl	800b258 <USBD_SetFeature>
          break;
 800a98e:	e009      	b.n	800a9a4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a990:	6839      	ldr	r1, [r7, #0]
 800a992:	6878      	ldr	r0, [r7, #4]
 800a994:	f000 fc74 	bl	800b280 <USBD_ClrFeature>
          break;
 800a998:	e004      	b.n	800a9a4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800a99a:	6839      	ldr	r1, [r7, #0]
 800a99c:	6878      	ldr	r0, [r7, #4]
 800a99e:	f000 fccc 	bl	800b33a <USBD_CtlError>
          break;
 800a9a2:	bf00      	nop
      }
      break;
 800a9a4:	e004      	b.n	800a9b0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800a9a6:	6839      	ldr	r1, [r7, #0]
 800a9a8:	6878      	ldr	r0, [r7, #4]
 800a9aa:	f000 fcc6 	bl	800b33a <USBD_CtlError>
      break;
 800a9ae:	bf00      	nop
  }

  return ret;
 800a9b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	3710      	adds	r7, #16
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	bd80      	pop	{r7, pc}
 800a9ba:	bf00      	nop

0800a9bc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b084      	sub	sp, #16
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
 800a9c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	781b      	ldrb	r3, [r3, #0]
 800a9ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a9d2:	2b40      	cmp	r3, #64	; 0x40
 800a9d4:	d005      	beq.n	800a9e2 <USBD_StdItfReq+0x26>
 800a9d6:	2b40      	cmp	r3, #64	; 0x40
 800a9d8:	d82e      	bhi.n	800aa38 <USBD_StdItfReq+0x7c>
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d001      	beq.n	800a9e2 <USBD_StdItfReq+0x26>
 800a9de:	2b20      	cmp	r3, #32
 800a9e0:	d12a      	bne.n	800aa38 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9e8:	3b01      	subs	r3, #1
 800a9ea:	2b02      	cmp	r3, #2
 800a9ec:	d81d      	bhi.n	800aa2a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	889b      	ldrh	r3, [r3, #4]
 800a9f2:	b2db      	uxtb	r3, r3
 800a9f4:	2b01      	cmp	r3, #1
 800a9f6:	d813      	bhi.n	800aa20 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9fe:	689b      	ldr	r3, [r3, #8]
 800aa00:	6839      	ldr	r1, [r7, #0]
 800aa02:	6878      	ldr	r0, [r7, #4]
 800aa04:	4798      	blx	r3
 800aa06:	4603      	mov	r3, r0
 800aa08:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	88db      	ldrh	r3, [r3, #6]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d110      	bne.n	800aa34 <USBD_StdItfReq+0x78>
 800aa12:	7bfb      	ldrb	r3, [r7, #15]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d10d      	bne.n	800aa34 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800aa18:	6878      	ldr	r0, [r7, #4]
 800aa1a:	f000 fd38 	bl	800b48e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800aa1e:	e009      	b.n	800aa34 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800aa20:	6839      	ldr	r1, [r7, #0]
 800aa22:	6878      	ldr	r0, [r7, #4]
 800aa24:	f000 fc89 	bl	800b33a <USBD_CtlError>
          break;
 800aa28:	e004      	b.n	800aa34 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800aa2a:	6839      	ldr	r1, [r7, #0]
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	f000 fc84 	bl	800b33a <USBD_CtlError>
          break;
 800aa32:	e000      	b.n	800aa36 <USBD_StdItfReq+0x7a>
          break;
 800aa34:	bf00      	nop
      }
      break;
 800aa36:	e004      	b.n	800aa42 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800aa38:	6839      	ldr	r1, [r7, #0]
 800aa3a:	6878      	ldr	r0, [r7, #4]
 800aa3c:	f000 fc7d 	bl	800b33a <USBD_CtlError>
      break;
 800aa40:	bf00      	nop
  }

  return USBD_OK;
 800aa42:	2300      	movs	r3, #0
}
 800aa44:	4618      	mov	r0, r3
 800aa46:	3710      	adds	r7, #16
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bd80      	pop	{r7, pc}

0800aa4c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b084      	sub	sp, #16
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
 800aa54:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800aa56:	2300      	movs	r3, #0
 800aa58:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800aa5a:	683b      	ldr	r3, [r7, #0]
 800aa5c:	889b      	ldrh	r3, [r3, #4]
 800aa5e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	781b      	ldrb	r3, [r3, #0]
 800aa64:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aa68:	2b40      	cmp	r3, #64	; 0x40
 800aa6a:	d007      	beq.n	800aa7c <USBD_StdEPReq+0x30>
 800aa6c:	2b40      	cmp	r3, #64	; 0x40
 800aa6e:	f200 8146 	bhi.w	800acfe <USBD_StdEPReq+0x2b2>
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d00a      	beq.n	800aa8c <USBD_StdEPReq+0x40>
 800aa76:	2b20      	cmp	r3, #32
 800aa78:	f040 8141 	bne.w	800acfe <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa82:	689b      	ldr	r3, [r3, #8]
 800aa84:	6839      	ldr	r1, [r7, #0]
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	4798      	blx	r3
      break;
 800aa8a:	e13d      	b.n	800ad08 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	781b      	ldrb	r3, [r3, #0]
 800aa90:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aa94:	2b20      	cmp	r3, #32
 800aa96:	d10a      	bne.n	800aaae <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa9e:	689b      	ldr	r3, [r3, #8]
 800aaa0:	6839      	ldr	r1, [r7, #0]
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	4798      	blx	r3
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	73fb      	strb	r3, [r7, #15]

        return ret;
 800aaaa:	7bfb      	ldrb	r3, [r7, #15]
 800aaac:	e12d      	b.n	800ad0a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	785b      	ldrb	r3, [r3, #1]
 800aab2:	2b03      	cmp	r3, #3
 800aab4:	d007      	beq.n	800aac6 <USBD_StdEPReq+0x7a>
 800aab6:	2b03      	cmp	r3, #3
 800aab8:	f300 811b 	bgt.w	800acf2 <USBD_StdEPReq+0x2a6>
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d072      	beq.n	800aba6 <USBD_StdEPReq+0x15a>
 800aac0:	2b01      	cmp	r3, #1
 800aac2:	d03a      	beq.n	800ab3a <USBD_StdEPReq+0xee>
 800aac4:	e115      	b.n	800acf2 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aacc:	2b02      	cmp	r3, #2
 800aace:	d002      	beq.n	800aad6 <USBD_StdEPReq+0x8a>
 800aad0:	2b03      	cmp	r3, #3
 800aad2:	d015      	beq.n	800ab00 <USBD_StdEPReq+0xb4>
 800aad4:	e02b      	b.n	800ab2e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aad6:	7bbb      	ldrb	r3, [r7, #14]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d00c      	beq.n	800aaf6 <USBD_StdEPReq+0xaa>
 800aadc:	7bbb      	ldrb	r3, [r7, #14]
 800aade:	2b80      	cmp	r3, #128	; 0x80
 800aae0:	d009      	beq.n	800aaf6 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800aae2:	7bbb      	ldrb	r3, [r7, #14]
 800aae4:	4619      	mov	r1, r3
 800aae6:	6878      	ldr	r0, [r7, #4]
 800aae8:	f000 ff96 	bl	800ba18 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800aaec:	2180      	movs	r1, #128	; 0x80
 800aaee:	6878      	ldr	r0, [r7, #4]
 800aaf0:	f000 ff92 	bl	800ba18 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aaf4:	e020      	b.n	800ab38 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800aaf6:	6839      	ldr	r1, [r7, #0]
 800aaf8:	6878      	ldr	r0, [r7, #4]
 800aafa:	f000 fc1e 	bl	800b33a <USBD_CtlError>
              break;
 800aafe:	e01b      	b.n	800ab38 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	885b      	ldrh	r3, [r3, #2]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d10e      	bne.n	800ab26 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800ab08:	7bbb      	ldrb	r3, [r7, #14]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d00b      	beq.n	800ab26 <USBD_StdEPReq+0xda>
 800ab0e:	7bbb      	ldrb	r3, [r7, #14]
 800ab10:	2b80      	cmp	r3, #128	; 0x80
 800ab12:	d008      	beq.n	800ab26 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	88db      	ldrh	r3, [r3, #6]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d104      	bne.n	800ab26 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800ab1c:	7bbb      	ldrb	r3, [r7, #14]
 800ab1e:	4619      	mov	r1, r3
 800ab20:	6878      	ldr	r0, [r7, #4]
 800ab22:	f000 ff79 	bl	800ba18 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800ab26:	6878      	ldr	r0, [r7, #4]
 800ab28:	f000 fcb1 	bl	800b48e <USBD_CtlSendStatus>

              break;
 800ab2c:	e004      	b.n	800ab38 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800ab2e:	6839      	ldr	r1, [r7, #0]
 800ab30:	6878      	ldr	r0, [r7, #4]
 800ab32:	f000 fc02 	bl	800b33a <USBD_CtlError>
              break;
 800ab36:	bf00      	nop
          }
          break;
 800ab38:	e0e0      	b.n	800acfc <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab40:	2b02      	cmp	r3, #2
 800ab42:	d002      	beq.n	800ab4a <USBD_StdEPReq+0xfe>
 800ab44:	2b03      	cmp	r3, #3
 800ab46:	d015      	beq.n	800ab74 <USBD_StdEPReq+0x128>
 800ab48:	e026      	b.n	800ab98 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ab4a:	7bbb      	ldrb	r3, [r7, #14]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d00c      	beq.n	800ab6a <USBD_StdEPReq+0x11e>
 800ab50:	7bbb      	ldrb	r3, [r7, #14]
 800ab52:	2b80      	cmp	r3, #128	; 0x80
 800ab54:	d009      	beq.n	800ab6a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800ab56:	7bbb      	ldrb	r3, [r7, #14]
 800ab58:	4619      	mov	r1, r3
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	f000 ff5c 	bl	800ba18 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800ab60:	2180      	movs	r1, #128	; 0x80
 800ab62:	6878      	ldr	r0, [r7, #4]
 800ab64:	f000 ff58 	bl	800ba18 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ab68:	e01c      	b.n	800aba4 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800ab6a:	6839      	ldr	r1, [r7, #0]
 800ab6c:	6878      	ldr	r0, [r7, #4]
 800ab6e:	f000 fbe4 	bl	800b33a <USBD_CtlError>
              break;
 800ab72:	e017      	b.n	800aba4 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	885b      	ldrh	r3, [r3, #2]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d112      	bne.n	800aba2 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ab7c:	7bbb      	ldrb	r3, [r7, #14]
 800ab7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d004      	beq.n	800ab90 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800ab86:	7bbb      	ldrb	r3, [r7, #14]
 800ab88:	4619      	mov	r1, r3
 800ab8a:	6878      	ldr	r0, [r7, #4]
 800ab8c:	f000 ff63 	bl	800ba56 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800ab90:	6878      	ldr	r0, [r7, #4]
 800ab92:	f000 fc7c 	bl	800b48e <USBD_CtlSendStatus>
              }
              break;
 800ab96:	e004      	b.n	800aba2 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800ab98:	6839      	ldr	r1, [r7, #0]
 800ab9a:	6878      	ldr	r0, [r7, #4]
 800ab9c:	f000 fbcd 	bl	800b33a <USBD_CtlError>
              break;
 800aba0:	e000      	b.n	800aba4 <USBD_StdEPReq+0x158>
              break;
 800aba2:	bf00      	nop
          }
          break;
 800aba4:	e0aa      	b.n	800acfc <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abac:	2b02      	cmp	r3, #2
 800abae:	d002      	beq.n	800abb6 <USBD_StdEPReq+0x16a>
 800abb0:	2b03      	cmp	r3, #3
 800abb2:	d032      	beq.n	800ac1a <USBD_StdEPReq+0x1ce>
 800abb4:	e097      	b.n	800ace6 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800abb6:	7bbb      	ldrb	r3, [r7, #14]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d007      	beq.n	800abcc <USBD_StdEPReq+0x180>
 800abbc:	7bbb      	ldrb	r3, [r7, #14]
 800abbe:	2b80      	cmp	r3, #128	; 0x80
 800abc0:	d004      	beq.n	800abcc <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800abc2:	6839      	ldr	r1, [r7, #0]
 800abc4:	6878      	ldr	r0, [r7, #4]
 800abc6:	f000 fbb8 	bl	800b33a <USBD_CtlError>
                break;
 800abca:	e091      	b.n	800acf0 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800abcc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	da0b      	bge.n	800abec <USBD_StdEPReq+0x1a0>
 800abd4:	7bbb      	ldrb	r3, [r7, #14]
 800abd6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800abda:	4613      	mov	r3, r2
 800abdc:	009b      	lsls	r3, r3, #2
 800abde:	4413      	add	r3, r2
 800abe0:	009b      	lsls	r3, r3, #2
 800abe2:	3310      	adds	r3, #16
 800abe4:	687a      	ldr	r2, [r7, #4]
 800abe6:	4413      	add	r3, r2
 800abe8:	3304      	adds	r3, #4
 800abea:	e00b      	b.n	800ac04 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800abec:	7bbb      	ldrb	r3, [r7, #14]
 800abee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800abf2:	4613      	mov	r3, r2
 800abf4:	009b      	lsls	r3, r3, #2
 800abf6:	4413      	add	r3, r2
 800abf8:	009b      	lsls	r3, r3, #2
 800abfa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800abfe:	687a      	ldr	r2, [r7, #4]
 800ac00:	4413      	add	r3, r2
 800ac02:	3304      	adds	r3, #4
 800ac04:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ac06:	68bb      	ldr	r3, [r7, #8]
 800ac08:	2200      	movs	r2, #0
 800ac0a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ac0c:	68bb      	ldr	r3, [r7, #8]
 800ac0e:	2202      	movs	r2, #2
 800ac10:	4619      	mov	r1, r3
 800ac12:	6878      	ldr	r0, [r7, #4]
 800ac14:	f000 fbfb 	bl	800b40e <USBD_CtlSendData>
              break;
 800ac18:	e06a      	b.n	800acf0 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ac1a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	da11      	bge.n	800ac46 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ac22:	7bbb      	ldrb	r3, [r7, #14]
 800ac24:	f003 020f 	and.w	r2, r3, #15
 800ac28:	6879      	ldr	r1, [r7, #4]
 800ac2a:	4613      	mov	r3, r2
 800ac2c:	009b      	lsls	r3, r3, #2
 800ac2e:	4413      	add	r3, r2
 800ac30:	009b      	lsls	r3, r3, #2
 800ac32:	440b      	add	r3, r1
 800ac34:	3318      	adds	r3, #24
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d117      	bne.n	800ac6c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800ac3c:	6839      	ldr	r1, [r7, #0]
 800ac3e:	6878      	ldr	r0, [r7, #4]
 800ac40:	f000 fb7b 	bl	800b33a <USBD_CtlError>
                  break;
 800ac44:	e054      	b.n	800acf0 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ac46:	7bbb      	ldrb	r3, [r7, #14]
 800ac48:	f003 020f 	and.w	r2, r3, #15
 800ac4c:	6879      	ldr	r1, [r7, #4]
 800ac4e:	4613      	mov	r3, r2
 800ac50:	009b      	lsls	r3, r3, #2
 800ac52:	4413      	add	r3, r2
 800ac54:	009b      	lsls	r3, r3, #2
 800ac56:	440b      	add	r3, r1
 800ac58:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d104      	bne.n	800ac6c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800ac62:	6839      	ldr	r1, [r7, #0]
 800ac64:	6878      	ldr	r0, [r7, #4]
 800ac66:	f000 fb68 	bl	800b33a <USBD_CtlError>
                  break;
 800ac6a:	e041      	b.n	800acf0 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ac6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	da0b      	bge.n	800ac8c <USBD_StdEPReq+0x240>
 800ac74:	7bbb      	ldrb	r3, [r7, #14]
 800ac76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ac7a:	4613      	mov	r3, r2
 800ac7c:	009b      	lsls	r3, r3, #2
 800ac7e:	4413      	add	r3, r2
 800ac80:	009b      	lsls	r3, r3, #2
 800ac82:	3310      	adds	r3, #16
 800ac84:	687a      	ldr	r2, [r7, #4]
 800ac86:	4413      	add	r3, r2
 800ac88:	3304      	adds	r3, #4
 800ac8a:	e00b      	b.n	800aca4 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ac8c:	7bbb      	ldrb	r3, [r7, #14]
 800ac8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ac92:	4613      	mov	r3, r2
 800ac94:	009b      	lsls	r3, r3, #2
 800ac96:	4413      	add	r3, r2
 800ac98:	009b      	lsls	r3, r3, #2
 800ac9a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ac9e:	687a      	ldr	r2, [r7, #4]
 800aca0:	4413      	add	r3, r2
 800aca2:	3304      	adds	r3, #4
 800aca4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800aca6:	7bbb      	ldrb	r3, [r7, #14]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d002      	beq.n	800acb2 <USBD_StdEPReq+0x266>
 800acac:	7bbb      	ldrb	r3, [r7, #14]
 800acae:	2b80      	cmp	r3, #128	; 0x80
 800acb0:	d103      	bne.n	800acba <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800acb2:	68bb      	ldr	r3, [r7, #8]
 800acb4:	2200      	movs	r2, #0
 800acb6:	601a      	str	r2, [r3, #0]
 800acb8:	e00e      	b.n	800acd8 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800acba:	7bbb      	ldrb	r3, [r7, #14]
 800acbc:	4619      	mov	r1, r3
 800acbe:	6878      	ldr	r0, [r7, #4]
 800acc0:	f000 fee8 	bl	800ba94 <USBD_LL_IsStallEP>
 800acc4:	4603      	mov	r3, r0
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d003      	beq.n	800acd2 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800acca:	68bb      	ldr	r3, [r7, #8]
 800accc:	2201      	movs	r2, #1
 800acce:	601a      	str	r2, [r3, #0]
 800acd0:	e002      	b.n	800acd8 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800acd2:	68bb      	ldr	r3, [r7, #8]
 800acd4:	2200      	movs	r2, #0
 800acd6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800acd8:	68bb      	ldr	r3, [r7, #8]
 800acda:	2202      	movs	r2, #2
 800acdc:	4619      	mov	r1, r3
 800acde:	6878      	ldr	r0, [r7, #4]
 800ace0:	f000 fb95 	bl	800b40e <USBD_CtlSendData>
              break;
 800ace4:	e004      	b.n	800acf0 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800ace6:	6839      	ldr	r1, [r7, #0]
 800ace8:	6878      	ldr	r0, [r7, #4]
 800acea:	f000 fb26 	bl	800b33a <USBD_CtlError>
              break;
 800acee:	bf00      	nop
          }
          break;
 800acf0:	e004      	b.n	800acfc <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800acf2:	6839      	ldr	r1, [r7, #0]
 800acf4:	6878      	ldr	r0, [r7, #4]
 800acf6:	f000 fb20 	bl	800b33a <USBD_CtlError>
          break;
 800acfa:	bf00      	nop
      }
      break;
 800acfc:	e004      	b.n	800ad08 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800acfe:	6839      	ldr	r1, [r7, #0]
 800ad00:	6878      	ldr	r0, [r7, #4]
 800ad02:	f000 fb1a 	bl	800b33a <USBD_CtlError>
      break;
 800ad06:	bf00      	nop
  }

  return ret;
 800ad08:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	3710      	adds	r7, #16
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	bd80      	pop	{r7, pc}
	...

0800ad14 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b084      	sub	sp, #16
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
 800ad1c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ad1e:	2300      	movs	r3, #0
 800ad20:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ad22:	2300      	movs	r3, #0
 800ad24:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ad26:	2300      	movs	r3, #0
 800ad28:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ad2a:	683b      	ldr	r3, [r7, #0]
 800ad2c:	885b      	ldrh	r3, [r3, #2]
 800ad2e:	0a1b      	lsrs	r3, r3, #8
 800ad30:	b29b      	uxth	r3, r3
 800ad32:	3b01      	subs	r3, #1
 800ad34:	2b06      	cmp	r3, #6
 800ad36:	f200 8128 	bhi.w	800af8a <USBD_GetDescriptor+0x276>
 800ad3a:	a201      	add	r2, pc, #4	; (adr r2, 800ad40 <USBD_GetDescriptor+0x2c>)
 800ad3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad40:	0800ad5d 	.word	0x0800ad5d
 800ad44:	0800ad75 	.word	0x0800ad75
 800ad48:	0800adb5 	.word	0x0800adb5
 800ad4c:	0800af8b 	.word	0x0800af8b
 800ad50:	0800af8b 	.word	0x0800af8b
 800ad54:	0800af2b 	.word	0x0800af2b
 800ad58:	0800af57 	.word	0x0800af57
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	687a      	ldr	r2, [r7, #4]
 800ad66:	7c12      	ldrb	r2, [r2, #16]
 800ad68:	f107 0108 	add.w	r1, r7, #8
 800ad6c:	4610      	mov	r0, r2
 800ad6e:	4798      	blx	r3
 800ad70:	60f8      	str	r0, [r7, #12]
      break;
 800ad72:	e112      	b.n	800af9a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	7c1b      	ldrb	r3, [r3, #16]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d10d      	bne.n	800ad98 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad84:	f107 0208 	add.w	r2, r7, #8
 800ad88:	4610      	mov	r0, r2
 800ad8a:	4798      	blx	r3
 800ad8c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	3301      	adds	r3, #1
 800ad92:	2202      	movs	r2, #2
 800ad94:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ad96:	e100      	b.n	800af9a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ada0:	f107 0208 	add.w	r2, r7, #8
 800ada4:	4610      	mov	r0, r2
 800ada6:	4798      	blx	r3
 800ada8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	3301      	adds	r3, #1
 800adae:	2202      	movs	r2, #2
 800adb0:	701a      	strb	r2, [r3, #0]
      break;
 800adb2:	e0f2      	b.n	800af9a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	885b      	ldrh	r3, [r3, #2]
 800adb8:	b2db      	uxtb	r3, r3
 800adba:	2b05      	cmp	r3, #5
 800adbc:	f200 80ac 	bhi.w	800af18 <USBD_GetDescriptor+0x204>
 800adc0:	a201      	add	r2, pc, #4	; (adr r2, 800adc8 <USBD_GetDescriptor+0xb4>)
 800adc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adc6:	bf00      	nop
 800adc8:	0800ade1 	.word	0x0800ade1
 800adcc:	0800ae15 	.word	0x0800ae15
 800add0:	0800ae49 	.word	0x0800ae49
 800add4:	0800ae7d 	.word	0x0800ae7d
 800add8:	0800aeb1 	.word	0x0800aeb1
 800addc:	0800aee5 	.word	0x0800aee5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ade6:	685b      	ldr	r3, [r3, #4]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d00b      	beq.n	800ae04 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800adf2:	685b      	ldr	r3, [r3, #4]
 800adf4:	687a      	ldr	r2, [r7, #4]
 800adf6:	7c12      	ldrb	r2, [r2, #16]
 800adf8:	f107 0108 	add.w	r1, r7, #8
 800adfc:	4610      	mov	r0, r2
 800adfe:	4798      	blx	r3
 800ae00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae02:	e091      	b.n	800af28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ae04:	6839      	ldr	r1, [r7, #0]
 800ae06:	6878      	ldr	r0, [r7, #4]
 800ae08:	f000 fa97 	bl	800b33a <USBD_CtlError>
            err++;
 800ae0c:	7afb      	ldrb	r3, [r7, #11]
 800ae0e:	3301      	adds	r3, #1
 800ae10:	72fb      	strb	r3, [r7, #11]
          break;
 800ae12:	e089      	b.n	800af28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ae1a:	689b      	ldr	r3, [r3, #8]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d00b      	beq.n	800ae38 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ae26:	689b      	ldr	r3, [r3, #8]
 800ae28:	687a      	ldr	r2, [r7, #4]
 800ae2a:	7c12      	ldrb	r2, [r2, #16]
 800ae2c:	f107 0108 	add.w	r1, r7, #8
 800ae30:	4610      	mov	r0, r2
 800ae32:	4798      	blx	r3
 800ae34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae36:	e077      	b.n	800af28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ae38:	6839      	ldr	r1, [r7, #0]
 800ae3a:	6878      	ldr	r0, [r7, #4]
 800ae3c:	f000 fa7d 	bl	800b33a <USBD_CtlError>
            err++;
 800ae40:	7afb      	ldrb	r3, [r7, #11]
 800ae42:	3301      	adds	r3, #1
 800ae44:	72fb      	strb	r3, [r7, #11]
          break;
 800ae46:	e06f      	b.n	800af28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ae4e:	68db      	ldr	r3, [r3, #12]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d00b      	beq.n	800ae6c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ae5a:	68db      	ldr	r3, [r3, #12]
 800ae5c:	687a      	ldr	r2, [r7, #4]
 800ae5e:	7c12      	ldrb	r2, [r2, #16]
 800ae60:	f107 0108 	add.w	r1, r7, #8
 800ae64:	4610      	mov	r0, r2
 800ae66:	4798      	blx	r3
 800ae68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae6a:	e05d      	b.n	800af28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ae6c:	6839      	ldr	r1, [r7, #0]
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	f000 fa63 	bl	800b33a <USBD_CtlError>
            err++;
 800ae74:	7afb      	ldrb	r3, [r7, #11]
 800ae76:	3301      	adds	r3, #1
 800ae78:	72fb      	strb	r3, [r7, #11]
          break;
 800ae7a:	e055      	b.n	800af28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ae82:	691b      	ldr	r3, [r3, #16]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d00b      	beq.n	800aea0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ae8e:	691b      	ldr	r3, [r3, #16]
 800ae90:	687a      	ldr	r2, [r7, #4]
 800ae92:	7c12      	ldrb	r2, [r2, #16]
 800ae94:	f107 0108 	add.w	r1, r7, #8
 800ae98:	4610      	mov	r0, r2
 800ae9a:	4798      	blx	r3
 800ae9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae9e:	e043      	b.n	800af28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aea0:	6839      	ldr	r1, [r7, #0]
 800aea2:	6878      	ldr	r0, [r7, #4]
 800aea4:	f000 fa49 	bl	800b33a <USBD_CtlError>
            err++;
 800aea8:	7afb      	ldrb	r3, [r7, #11]
 800aeaa:	3301      	adds	r3, #1
 800aeac:	72fb      	strb	r3, [r7, #11]
          break;
 800aeae:	e03b      	b.n	800af28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aeb6:	695b      	ldr	r3, [r3, #20]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d00b      	beq.n	800aed4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aec2:	695b      	ldr	r3, [r3, #20]
 800aec4:	687a      	ldr	r2, [r7, #4]
 800aec6:	7c12      	ldrb	r2, [r2, #16]
 800aec8:	f107 0108 	add.w	r1, r7, #8
 800aecc:	4610      	mov	r0, r2
 800aece:	4798      	blx	r3
 800aed0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aed2:	e029      	b.n	800af28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aed4:	6839      	ldr	r1, [r7, #0]
 800aed6:	6878      	ldr	r0, [r7, #4]
 800aed8:	f000 fa2f 	bl	800b33a <USBD_CtlError>
            err++;
 800aedc:	7afb      	ldrb	r3, [r7, #11]
 800aede:	3301      	adds	r3, #1
 800aee0:	72fb      	strb	r3, [r7, #11]
          break;
 800aee2:	e021      	b.n	800af28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aeea:	699b      	ldr	r3, [r3, #24]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d00b      	beq.n	800af08 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aef6:	699b      	ldr	r3, [r3, #24]
 800aef8:	687a      	ldr	r2, [r7, #4]
 800aefa:	7c12      	ldrb	r2, [r2, #16]
 800aefc:	f107 0108 	add.w	r1, r7, #8
 800af00:	4610      	mov	r0, r2
 800af02:	4798      	blx	r3
 800af04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af06:	e00f      	b.n	800af28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800af08:	6839      	ldr	r1, [r7, #0]
 800af0a:	6878      	ldr	r0, [r7, #4]
 800af0c:	f000 fa15 	bl	800b33a <USBD_CtlError>
            err++;
 800af10:	7afb      	ldrb	r3, [r7, #11]
 800af12:	3301      	adds	r3, #1
 800af14:	72fb      	strb	r3, [r7, #11]
          break;
 800af16:	e007      	b.n	800af28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800af18:	6839      	ldr	r1, [r7, #0]
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	f000 fa0d 	bl	800b33a <USBD_CtlError>
          err++;
 800af20:	7afb      	ldrb	r3, [r7, #11]
 800af22:	3301      	adds	r3, #1
 800af24:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800af26:	e038      	b.n	800af9a <USBD_GetDescriptor+0x286>
 800af28:	e037      	b.n	800af9a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	7c1b      	ldrb	r3, [r3, #16]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d109      	bne.n	800af46 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af3a:	f107 0208 	add.w	r2, r7, #8
 800af3e:	4610      	mov	r0, r2
 800af40:	4798      	blx	r3
 800af42:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800af44:	e029      	b.n	800af9a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800af46:	6839      	ldr	r1, [r7, #0]
 800af48:	6878      	ldr	r0, [r7, #4]
 800af4a:	f000 f9f6 	bl	800b33a <USBD_CtlError>
        err++;
 800af4e:	7afb      	ldrb	r3, [r7, #11]
 800af50:	3301      	adds	r3, #1
 800af52:	72fb      	strb	r3, [r7, #11]
      break;
 800af54:	e021      	b.n	800af9a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	7c1b      	ldrb	r3, [r3, #16]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d10d      	bne.n	800af7a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af66:	f107 0208 	add.w	r2, r7, #8
 800af6a:	4610      	mov	r0, r2
 800af6c:	4798      	blx	r3
 800af6e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	3301      	adds	r3, #1
 800af74:	2207      	movs	r2, #7
 800af76:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800af78:	e00f      	b.n	800af9a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800af7a:	6839      	ldr	r1, [r7, #0]
 800af7c:	6878      	ldr	r0, [r7, #4]
 800af7e:	f000 f9dc 	bl	800b33a <USBD_CtlError>
        err++;
 800af82:	7afb      	ldrb	r3, [r7, #11]
 800af84:	3301      	adds	r3, #1
 800af86:	72fb      	strb	r3, [r7, #11]
      break;
 800af88:	e007      	b.n	800af9a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800af8a:	6839      	ldr	r1, [r7, #0]
 800af8c:	6878      	ldr	r0, [r7, #4]
 800af8e:	f000 f9d4 	bl	800b33a <USBD_CtlError>
      err++;
 800af92:	7afb      	ldrb	r3, [r7, #11]
 800af94:	3301      	adds	r3, #1
 800af96:	72fb      	strb	r3, [r7, #11]
      break;
 800af98:	bf00      	nop
  }

  if (err != 0U)
 800af9a:	7afb      	ldrb	r3, [r7, #11]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d11c      	bne.n	800afda <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800afa0:	893b      	ldrh	r3, [r7, #8]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d011      	beq.n	800afca <USBD_GetDescriptor+0x2b6>
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	88db      	ldrh	r3, [r3, #6]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d00d      	beq.n	800afca <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800afae:	683b      	ldr	r3, [r7, #0]
 800afb0:	88da      	ldrh	r2, [r3, #6]
 800afb2:	893b      	ldrh	r3, [r7, #8]
 800afb4:	4293      	cmp	r3, r2
 800afb6:	bf28      	it	cs
 800afb8:	4613      	movcs	r3, r2
 800afba:	b29b      	uxth	r3, r3
 800afbc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800afbe:	893b      	ldrh	r3, [r7, #8]
 800afc0:	461a      	mov	r2, r3
 800afc2:	68f9      	ldr	r1, [r7, #12]
 800afc4:	6878      	ldr	r0, [r7, #4]
 800afc6:	f000 fa22 	bl	800b40e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	88db      	ldrh	r3, [r3, #6]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d104      	bne.n	800afdc <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800afd2:	6878      	ldr	r0, [r7, #4]
 800afd4:	f000 fa5b 	bl	800b48e <USBD_CtlSendStatus>
 800afd8:	e000      	b.n	800afdc <USBD_GetDescriptor+0x2c8>
    return;
 800afda:	bf00      	nop
    }
  }
}
 800afdc:	3710      	adds	r7, #16
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd80      	pop	{r7, pc}
 800afe2:	bf00      	nop

0800afe4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b084      	sub	sp, #16
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
 800afec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800afee:	683b      	ldr	r3, [r7, #0]
 800aff0:	889b      	ldrh	r3, [r3, #4]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d130      	bne.n	800b058 <USBD_SetAddress+0x74>
 800aff6:	683b      	ldr	r3, [r7, #0]
 800aff8:	88db      	ldrh	r3, [r3, #6]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d12c      	bne.n	800b058 <USBD_SetAddress+0x74>
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	885b      	ldrh	r3, [r3, #2]
 800b002:	2b7f      	cmp	r3, #127	; 0x7f
 800b004:	d828      	bhi.n	800b058 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	885b      	ldrh	r3, [r3, #2]
 800b00a:	b2db      	uxtb	r3, r3
 800b00c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b010:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b018:	2b03      	cmp	r3, #3
 800b01a:	d104      	bne.n	800b026 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800b01c:	6839      	ldr	r1, [r7, #0]
 800b01e:	6878      	ldr	r0, [r7, #4]
 800b020:	f000 f98b 	bl	800b33a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b024:	e01d      	b.n	800b062 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	7bfa      	ldrb	r2, [r7, #15]
 800b02a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b02e:	7bfb      	ldrb	r3, [r7, #15]
 800b030:	4619      	mov	r1, r3
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	f000 fd5a 	bl	800baec <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800b038:	6878      	ldr	r0, [r7, #4]
 800b03a:	f000 fa28 	bl	800b48e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b03e:	7bfb      	ldrb	r3, [r7, #15]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d004      	beq.n	800b04e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2202      	movs	r2, #2
 800b048:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b04c:	e009      	b.n	800b062 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	2201      	movs	r2, #1
 800b052:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b056:	e004      	b.n	800b062 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b058:	6839      	ldr	r1, [r7, #0]
 800b05a:	6878      	ldr	r0, [r7, #4]
 800b05c:	f000 f96d 	bl	800b33a <USBD_CtlError>
  }
}
 800b060:	bf00      	nop
 800b062:	bf00      	nop
 800b064:	3710      	adds	r7, #16
 800b066:	46bd      	mov	sp, r7
 800b068:	bd80      	pop	{r7, pc}
	...

0800b06c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b082      	sub	sp, #8
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
 800b074:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	885b      	ldrh	r3, [r3, #2]
 800b07a:	b2da      	uxtb	r2, r3
 800b07c:	4b41      	ldr	r3, [pc, #260]	; (800b184 <USBD_SetConfig+0x118>)
 800b07e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b080:	4b40      	ldr	r3, [pc, #256]	; (800b184 <USBD_SetConfig+0x118>)
 800b082:	781b      	ldrb	r3, [r3, #0]
 800b084:	2b01      	cmp	r3, #1
 800b086:	d904      	bls.n	800b092 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800b088:	6839      	ldr	r1, [r7, #0]
 800b08a:	6878      	ldr	r0, [r7, #4]
 800b08c:	f000 f955 	bl	800b33a <USBD_CtlError>
 800b090:	e075      	b.n	800b17e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b098:	2b02      	cmp	r3, #2
 800b09a:	d002      	beq.n	800b0a2 <USBD_SetConfig+0x36>
 800b09c:	2b03      	cmp	r3, #3
 800b09e:	d023      	beq.n	800b0e8 <USBD_SetConfig+0x7c>
 800b0a0:	e062      	b.n	800b168 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800b0a2:	4b38      	ldr	r3, [pc, #224]	; (800b184 <USBD_SetConfig+0x118>)
 800b0a4:	781b      	ldrb	r3, [r3, #0]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d01a      	beq.n	800b0e0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800b0aa:	4b36      	ldr	r3, [pc, #216]	; (800b184 <USBD_SetConfig+0x118>)
 800b0ac:	781b      	ldrb	r3, [r3, #0]
 800b0ae:	461a      	mov	r2, r3
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2203      	movs	r2, #3
 800b0b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b0bc:	4b31      	ldr	r3, [pc, #196]	; (800b184 <USBD_SetConfig+0x118>)
 800b0be:	781b      	ldrb	r3, [r3, #0]
 800b0c0:	4619      	mov	r1, r3
 800b0c2:	6878      	ldr	r0, [r7, #4]
 800b0c4:	f7ff f9e8 	bl	800a498 <USBD_SetClassConfig>
 800b0c8:	4603      	mov	r3, r0
 800b0ca:	2b02      	cmp	r3, #2
 800b0cc:	d104      	bne.n	800b0d8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800b0ce:	6839      	ldr	r1, [r7, #0]
 800b0d0:	6878      	ldr	r0, [r7, #4]
 800b0d2:	f000 f932 	bl	800b33a <USBD_CtlError>
            return;
 800b0d6:	e052      	b.n	800b17e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800b0d8:	6878      	ldr	r0, [r7, #4]
 800b0da:	f000 f9d8 	bl	800b48e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b0de:	e04e      	b.n	800b17e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b0e0:	6878      	ldr	r0, [r7, #4]
 800b0e2:	f000 f9d4 	bl	800b48e <USBD_CtlSendStatus>
        break;
 800b0e6:	e04a      	b.n	800b17e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800b0e8:	4b26      	ldr	r3, [pc, #152]	; (800b184 <USBD_SetConfig+0x118>)
 800b0ea:	781b      	ldrb	r3, [r3, #0]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d112      	bne.n	800b116 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	2202      	movs	r2, #2
 800b0f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800b0f8:	4b22      	ldr	r3, [pc, #136]	; (800b184 <USBD_SetConfig+0x118>)
 800b0fa:	781b      	ldrb	r3, [r3, #0]
 800b0fc:	461a      	mov	r2, r3
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800b102:	4b20      	ldr	r3, [pc, #128]	; (800b184 <USBD_SetConfig+0x118>)
 800b104:	781b      	ldrb	r3, [r3, #0]
 800b106:	4619      	mov	r1, r3
 800b108:	6878      	ldr	r0, [r7, #4]
 800b10a:	f7ff f9e4 	bl	800a4d6 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800b10e:	6878      	ldr	r0, [r7, #4]
 800b110:	f000 f9bd 	bl	800b48e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b114:	e033      	b.n	800b17e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800b116:	4b1b      	ldr	r3, [pc, #108]	; (800b184 <USBD_SetConfig+0x118>)
 800b118:	781b      	ldrb	r3, [r3, #0]
 800b11a:	461a      	mov	r2, r3
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	685b      	ldr	r3, [r3, #4]
 800b120:	429a      	cmp	r2, r3
 800b122:	d01d      	beq.n	800b160 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	685b      	ldr	r3, [r3, #4]
 800b128:	b2db      	uxtb	r3, r3
 800b12a:	4619      	mov	r1, r3
 800b12c:	6878      	ldr	r0, [r7, #4]
 800b12e:	f7ff f9d2 	bl	800a4d6 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800b132:	4b14      	ldr	r3, [pc, #80]	; (800b184 <USBD_SetConfig+0x118>)
 800b134:	781b      	ldrb	r3, [r3, #0]
 800b136:	461a      	mov	r2, r3
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b13c:	4b11      	ldr	r3, [pc, #68]	; (800b184 <USBD_SetConfig+0x118>)
 800b13e:	781b      	ldrb	r3, [r3, #0]
 800b140:	4619      	mov	r1, r3
 800b142:	6878      	ldr	r0, [r7, #4]
 800b144:	f7ff f9a8 	bl	800a498 <USBD_SetClassConfig>
 800b148:	4603      	mov	r3, r0
 800b14a:	2b02      	cmp	r3, #2
 800b14c:	d104      	bne.n	800b158 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800b14e:	6839      	ldr	r1, [r7, #0]
 800b150:	6878      	ldr	r0, [r7, #4]
 800b152:	f000 f8f2 	bl	800b33a <USBD_CtlError>
            return;
 800b156:	e012      	b.n	800b17e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b158:	6878      	ldr	r0, [r7, #4]
 800b15a:	f000 f998 	bl	800b48e <USBD_CtlSendStatus>
        break;
 800b15e:	e00e      	b.n	800b17e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b160:	6878      	ldr	r0, [r7, #4]
 800b162:	f000 f994 	bl	800b48e <USBD_CtlSendStatus>
        break;
 800b166:	e00a      	b.n	800b17e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800b168:	6839      	ldr	r1, [r7, #0]
 800b16a:	6878      	ldr	r0, [r7, #4]
 800b16c:	f000 f8e5 	bl	800b33a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800b170:	4b04      	ldr	r3, [pc, #16]	; (800b184 <USBD_SetConfig+0x118>)
 800b172:	781b      	ldrb	r3, [r3, #0]
 800b174:	4619      	mov	r1, r3
 800b176:	6878      	ldr	r0, [r7, #4]
 800b178:	f7ff f9ad 	bl	800a4d6 <USBD_ClrClassConfig>
        break;
 800b17c:	bf00      	nop
    }
  }
}
 800b17e:	3708      	adds	r7, #8
 800b180:	46bd      	mov	sp, r7
 800b182:	bd80      	pop	{r7, pc}
 800b184:	2000041c 	.word	0x2000041c

0800b188 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b082      	sub	sp, #8
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
 800b190:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	88db      	ldrh	r3, [r3, #6]
 800b196:	2b01      	cmp	r3, #1
 800b198:	d004      	beq.n	800b1a4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b19a:	6839      	ldr	r1, [r7, #0]
 800b19c:	6878      	ldr	r0, [r7, #4]
 800b19e:	f000 f8cc 	bl	800b33a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b1a2:	e022      	b.n	800b1ea <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1aa:	2b02      	cmp	r3, #2
 800b1ac:	dc02      	bgt.n	800b1b4 <USBD_GetConfig+0x2c>
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	dc03      	bgt.n	800b1ba <USBD_GetConfig+0x32>
 800b1b2:	e015      	b.n	800b1e0 <USBD_GetConfig+0x58>
 800b1b4:	2b03      	cmp	r3, #3
 800b1b6:	d00b      	beq.n	800b1d0 <USBD_GetConfig+0x48>
 800b1b8:	e012      	b.n	800b1e0 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	2200      	movs	r2, #0
 800b1be:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	3308      	adds	r3, #8
 800b1c4:	2201      	movs	r2, #1
 800b1c6:	4619      	mov	r1, r3
 800b1c8:	6878      	ldr	r0, [r7, #4]
 800b1ca:	f000 f920 	bl	800b40e <USBD_CtlSendData>
        break;
 800b1ce:	e00c      	b.n	800b1ea <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	3304      	adds	r3, #4
 800b1d4:	2201      	movs	r2, #1
 800b1d6:	4619      	mov	r1, r3
 800b1d8:	6878      	ldr	r0, [r7, #4]
 800b1da:	f000 f918 	bl	800b40e <USBD_CtlSendData>
        break;
 800b1de:	e004      	b.n	800b1ea <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800b1e0:	6839      	ldr	r1, [r7, #0]
 800b1e2:	6878      	ldr	r0, [r7, #4]
 800b1e4:	f000 f8a9 	bl	800b33a <USBD_CtlError>
        break;
 800b1e8:	bf00      	nop
}
 800b1ea:	bf00      	nop
 800b1ec:	3708      	adds	r7, #8
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	bd80      	pop	{r7, pc}

0800b1f2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1f2:	b580      	push	{r7, lr}
 800b1f4:	b082      	sub	sp, #8
 800b1f6:	af00      	add	r7, sp, #0
 800b1f8:	6078      	str	r0, [r7, #4]
 800b1fa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b202:	3b01      	subs	r3, #1
 800b204:	2b02      	cmp	r3, #2
 800b206:	d81e      	bhi.n	800b246 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	88db      	ldrh	r3, [r3, #6]
 800b20c:	2b02      	cmp	r3, #2
 800b20e:	d004      	beq.n	800b21a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800b210:	6839      	ldr	r1, [r7, #0]
 800b212:	6878      	ldr	r0, [r7, #4]
 800b214:	f000 f891 	bl	800b33a <USBD_CtlError>
        break;
 800b218:	e01a      	b.n	800b250 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	2201      	movs	r2, #1
 800b21e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b226:	2b00      	cmp	r3, #0
 800b228:	d005      	beq.n	800b236 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	68db      	ldr	r3, [r3, #12]
 800b22e:	f043 0202 	orr.w	r2, r3, #2
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	330c      	adds	r3, #12
 800b23a:	2202      	movs	r2, #2
 800b23c:	4619      	mov	r1, r3
 800b23e:	6878      	ldr	r0, [r7, #4]
 800b240:	f000 f8e5 	bl	800b40e <USBD_CtlSendData>
      break;
 800b244:	e004      	b.n	800b250 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800b246:	6839      	ldr	r1, [r7, #0]
 800b248:	6878      	ldr	r0, [r7, #4]
 800b24a:	f000 f876 	bl	800b33a <USBD_CtlError>
      break;
 800b24e:	bf00      	nop
  }
}
 800b250:	bf00      	nop
 800b252:	3708      	adds	r7, #8
 800b254:	46bd      	mov	sp, r7
 800b256:	bd80      	pop	{r7, pc}

0800b258 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b082      	sub	sp, #8
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
 800b260:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	885b      	ldrh	r3, [r3, #2]
 800b266:	2b01      	cmp	r3, #1
 800b268:	d106      	bne.n	800b278 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	2201      	movs	r2, #1
 800b26e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800b272:	6878      	ldr	r0, [r7, #4]
 800b274:	f000 f90b 	bl	800b48e <USBD_CtlSendStatus>
  }
}
 800b278:	bf00      	nop
 800b27a:	3708      	adds	r7, #8
 800b27c:	46bd      	mov	sp, r7
 800b27e:	bd80      	pop	{r7, pc}

0800b280 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b280:	b580      	push	{r7, lr}
 800b282:	b082      	sub	sp, #8
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
 800b288:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b290:	3b01      	subs	r3, #1
 800b292:	2b02      	cmp	r3, #2
 800b294:	d80b      	bhi.n	800b2ae <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b296:	683b      	ldr	r3, [r7, #0]
 800b298:	885b      	ldrh	r3, [r3, #2]
 800b29a:	2b01      	cmp	r3, #1
 800b29c:	d10c      	bne.n	800b2b8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800b2a6:	6878      	ldr	r0, [r7, #4]
 800b2a8:	f000 f8f1 	bl	800b48e <USBD_CtlSendStatus>
      }
      break;
 800b2ac:	e004      	b.n	800b2b8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800b2ae:	6839      	ldr	r1, [r7, #0]
 800b2b0:	6878      	ldr	r0, [r7, #4]
 800b2b2:	f000 f842 	bl	800b33a <USBD_CtlError>
      break;
 800b2b6:	e000      	b.n	800b2ba <USBD_ClrFeature+0x3a>
      break;
 800b2b8:	bf00      	nop
  }
}
 800b2ba:	bf00      	nop
 800b2bc:	3708      	adds	r7, #8
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	bd80      	pop	{r7, pc}

0800b2c2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b2c2:	b480      	push	{r7}
 800b2c4:	b083      	sub	sp, #12
 800b2c6:	af00      	add	r7, sp, #0
 800b2c8:	6078      	str	r0, [r7, #4]
 800b2ca:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800b2cc:	683b      	ldr	r3, [r7, #0]
 800b2ce:	781a      	ldrb	r2, [r3, #0]
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800b2d4:	683b      	ldr	r3, [r7, #0]
 800b2d6:	785a      	ldrb	r2, [r3, #1]
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800b2dc:	683b      	ldr	r3, [r7, #0]
 800b2de:	3302      	adds	r3, #2
 800b2e0:	781b      	ldrb	r3, [r3, #0]
 800b2e2:	b29a      	uxth	r2, r3
 800b2e4:	683b      	ldr	r3, [r7, #0]
 800b2e6:	3303      	adds	r3, #3
 800b2e8:	781b      	ldrb	r3, [r3, #0]
 800b2ea:	b29b      	uxth	r3, r3
 800b2ec:	021b      	lsls	r3, r3, #8
 800b2ee:	b29b      	uxth	r3, r3
 800b2f0:	4413      	add	r3, r2
 800b2f2:	b29a      	uxth	r2, r3
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	3304      	adds	r3, #4
 800b2fc:	781b      	ldrb	r3, [r3, #0]
 800b2fe:	b29a      	uxth	r2, r3
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	3305      	adds	r3, #5
 800b304:	781b      	ldrb	r3, [r3, #0]
 800b306:	b29b      	uxth	r3, r3
 800b308:	021b      	lsls	r3, r3, #8
 800b30a:	b29b      	uxth	r3, r3
 800b30c:	4413      	add	r3, r2
 800b30e:	b29a      	uxth	r2, r3
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800b314:	683b      	ldr	r3, [r7, #0]
 800b316:	3306      	adds	r3, #6
 800b318:	781b      	ldrb	r3, [r3, #0]
 800b31a:	b29a      	uxth	r2, r3
 800b31c:	683b      	ldr	r3, [r7, #0]
 800b31e:	3307      	adds	r3, #7
 800b320:	781b      	ldrb	r3, [r3, #0]
 800b322:	b29b      	uxth	r3, r3
 800b324:	021b      	lsls	r3, r3, #8
 800b326:	b29b      	uxth	r3, r3
 800b328:	4413      	add	r3, r2
 800b32a:	b29a      	uxth	r2, r3
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	80da      	strh	r2, [r3, #6]

}
 800b330:	bf00      	nop
 800b332:	370c      	adds	r7, #12
 800b334:	46bd      	mov	sp, r7
 800b336:	bc80      	pop	{r7}
 800b338:	4770      	bx	lr

0800b33a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800b33a:	b580      	push	{r7, lr}
 800b33c:	b082      	sub	sp, #8
 800b33e:	af00      	add	r7, sp, #0
 800b340:	6078      	str	r0, [r7, #4]
 800b342:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800b344:	2180      	movs	r1, #128	; 0x80
 800b346:	6878      	ldr	r0, [r7, #4]
 800b348:	f000 fb66 	bl	800ba18 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800b34c:	2100      	movs	r1, #0
 800b34e:	6878      	ldr	r0, [r7, #4]
 800b350:	f000 fb62 	bl	800ba18 <USBD_LL_StallEP>
}
 800b354:	bf00      	nop
 800b356:	3708      	adds	r7, #8
 800b358:	46bd      	mov	sp, r7
 800b35a:	bd80      	pop	{r7, pc}

0800b35c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b086      	sub	sp, #24
 800b360:	af00      	add	r7, sp, #0
 800b362:	60f8      	str	r0, [r7, #12]
 800b364:	60b9      	str	r1, [r7, #8]
 800b366:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b368:	2300      	movs	r3, #0
 800b36a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d032      	beq.n	800b3d8 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800b372:	68f8      	ldr	r0, [r7, #12]
 800b374:	f000 f834 	bl	800b3e0 <USBD_GetLen>
 800b378:	4603      	mov	r3, r0
 800b37a:	3301      	adds	r3, #1
 800b37c:	b29b      	uxth	r3, r3
 800b37e:	005b      	lsls	r3, r3, #1
 800b380:	b29a      	uxth	r2, r3
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800b386:	7dfb      	ldrb	r3, [r7, #23]
 800b388:	1c5a      	adds	r2, r3, #1
 800b38a:	75fa      	strb	r2, [r7, #23]
 800b38c:	461a      	mov	r2, r3
 800b38e:	68bb      	ldr	r3, [r7, #8]
 800b390:	4413      	add	r3, r2
 800b392:	687a      	ldr	r2, [r7, #4]
 800b394:	7812      	ldrb	r2, [r2, #0]
 800b396:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800b398:	7dfb      	ldrb	r3, [r7, #23]
 800b39a:	1c5a      	adds	r2, r3, #1
 800b39c:	75fa      	strb	r2, [r7, #23]
 800b39e:	461a      	mov	r2, r3
 800b3a0:	68bb      	ldr	r3, [r7, #8]
 800b3a2:	4413      	add	r3, r2
 800b3a4:	2203      	movs	r2, #3
 800b3a6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800b3a8:	e012      	b.n	800b3d0 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	1c5a      	adds	r2, r3, #1
 800b3ae:	60fa      	str	r2, [r7, #12]
 800b3b0:	7dfa      	ldrb	r2, [r7, #23]
 800b3b2:	1c51      	adds	r1, r2, #1
 800b3b4:	75f9      	strb	r1, [r7, #23]
 800b3b6:	4611      	mov	r1, r2
 800b3b8:	68ba      	ldr	r2, [r7, #8]
 800b3ba:	440a      	add	r2, r1
 800b3bc:	781b      	ldrb	r3, [r3, #0]
 800b3be:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800b3c0:	7dfb      	ldrb	r3, [r7, #23]
 800b3c2:	1c5a      	adds	r2, r3, #1
 800b3c4:	75fa      	strb	r2, [r7, #23]
 800b3c6:	461a      	mov	r2, r3
 800b3c8:	68bb      	ldr	r3, [r7, #8]
 800b3ca:	4413      	add	r3, r2
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	781b      	ldrb	r3, [r3, #0]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d1e8      	bne.n	800b3aa <USBD_GetString+0x4e>
    }
  }
}
 800b3d8:	bf00      	nop
 800b3da:	3718      	adds	r7, #24
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	bd80      	pop	{r7, pc}

0800b3e0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b3e0:	b480      	push	{r7}
 800b3e2:	b085      	sub	sp, #20
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800b3ec:	e005      	b.n	800b3fa <USBD_GetLen+0x1a>
  {
    len++;
 800b3ee:	7bfb      	ldrb	r3, [r7, #15]
 800b3f0:	3301      	adds	r3, #1
 800b3f2:	73fb      	strb	r3, [r7, #15]
    buf++;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	3301      	adds	r3, #1
 800b3f8:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	781b      	ldrb	r3, [r3, #0]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d1f5      	bne.n	800b3ee <USBD_GetLen+0xe>
  }

  return len;
 800b402:	7bfb      	ldrb	r3, [r7, #15]
}
 800b404:	4618      	mov	r0, r3
 800b406:	3714      	adds	r7, #20
 800b408:	46bd      	mov	sp, r7
 800b40a:	bc80      	pop	{r7}
 800b40c:	4770      	bx	lr

0800b40e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800b40e:	b580      	push	{r7, lr}
 800b410:	b084      	sub	sp, #16
 800b412:	af00      	add	r7, sp, #0
 800b414:	60f8      	str	r0, [r7, #12]
 800b416:	60b9      	str	r1, [r7, #8]
 800b418:	4613      	mov	r3, r2
 800b41a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	2202      	movs	r2, #2
 800b420:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b424:	88fa      	ldrh	r2, [r7, #6]
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800b42a:	88fa      	ldrh	r2, [r7, #6]
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b430:	88fb      	ldrh	r3, [r7, #6]
 800b432:	68ba      	ldr	r2, [r7, #8]
 800b434:	2100      	movs	r1, #0
 800b436:	68f8      	ldr	r0, [r7, #12]
 800b438:	f000 fb77 	bl	800bb2a <USBD_LL_Transmit>

  return USBD_OK;
 800b43c:	2300      	movs	r3, #0
}
 800b43e:	4618      	mov	r0, r3
 800b440:	3710      	adds	r7, #16
 800b442:	46bd      	mov	sp, r7
 800b444:	bd80      	pop	{r7, pc}

0800b446 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800b446:	b580      	push	{r7, lr}
 800b448:	b084      	sub	sp, #16
 800b44a:	af00      	add	r7, sp, #0
 800b44c:	60f8      	str	r0, [r7, #12]
 800b44e:	60b9      	str	r1, [r7, #8]
 800b450:	4613      	mov	r3, r2
 800b452:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b454:	88fb      	ldrh	r3, [r7, #6]
 800b456:	68ba      	ldr	r2, [r7, #8]
 800b458:	2100      	movs	r1, #0
 800b45a:	68f8      	ldr	r0, [r7, #12]
 800b45c:	f000 fb65 	bl	800bb2a <USBD_LL_Transmit>

  return USBD_OK;
 800b460:	2300      	movs	r3, #0
}
 800b462:	4618      	mov	r0, r3
 800b464:	3710      	adds	r7, #16
 800b466:	46bd      	mov	sp, r7
 800b468:	bd80      	pop	{r7, pc}

0800b46a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800b46a:	b580      	push	{r7, lr}
 800b46c:	b084      	sub	sp, #16
 800b46e:	af00      	add	r7, sp, #0
 800b470:	60f8      	str	r0, [r7, #12]
 800b472:	60b9      	str	r1, [r7, #8]
 800b474:	4613      	mov	r3, r2
 800b476:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b478:	88fb      	ldrh	r3, [r7, #6]
 800b47a:	68ba      	ldr	r2, [r7, #8]
 800b47c:	2100      	movs	r1, #0
 800b47e:	68f8      	ldr	r0, [r7, #12]
 800b480:	f000 fb76 	bl	800bb70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b484:	2300      	movs	r3, #0
}
 800b486:	4618      	mov	r0, r3
 800b488:	3710      	adds	r7, #16
 800b48a:	46bd      	mov	sp, r7
 800b48c:	bd80      	pop	{r7, pc}

0800b48e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b48e:	b580      	push	{r7, lr}
 800b490:	b082      	sub	sp, #8
 800b492:	af00      	add	r7, sp, #0
 800b494:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	2204      	movs	r2, #4
 800b49a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b49e:	2300      	movs	r3, #0
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	2100      	movs	r1, #0
 800b4a4:	6878      	ldr	r0, [r7, #4]
 800b4a6:	f000 fb40 	bl	800bb2a <USBD_LL_Transmit>

  return USBD_OK;
 800b4aa:	2300      	movs	r3, #0
}
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	3708      	adds	r7, #8
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	bd80      	pop	{r7, pc}

0800b4b4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b082      	sub	sp, #8
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	2205      	movs	r2, #5
 800b4c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	2100      	movs	r1, #0
 800b4ca:	6878      	ldr	r0, [r7, #4]
 800b4cc:	f000 fb50 	bl	800bb70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b4d0:	2300      	movs	r3, #0
}
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	3708      	adds	r7, #8
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	bd80      	pop	{r7, pc}
	...

0800b4dc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	490e      	ldr	r1, [pc, #56]	; (800b51c <MX_USB_DEVICE_Init+0x40>)
 800b4e4:	480e      	ldr	r0, [pc, #56]	; (800b520 <MX_USB_DEVICE_Init+0x44>)
 800b4e6:	f7fe ff7d 	bl	800a3e4 <USBD_Init>
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d001      	beq.n	800b4f4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b4f0:	f7f6 fbd4 	bl	8001c9c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800b4f4:	490b      	ldr	r1, [pc, #44]	; (800b524 <MX_USB_DEVICE_Init+0x48>)
 800b4f6:	480a      	ldr	r0, [pc, #40]	; (800b520 <MX_USB_DEVICE_Init+0x44>)
 800b4f8:	f7fe ff9f 	bl	800a43a <USBD_RegisterClass>
 800b4fc:	4603      	mov	r3, r0
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d001      	beq.n	800b506 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b502:	f7f6 fbcb 	bl	8001c9c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b506:	4806      	ldr	r0, [pc, #24]	; (800b520 <MX_USB_DEVICE_Init+0x44>)
 800b508:	f7fe ffb0 	bl	800a46c <USBD_Start>
 800b50c:	4603      	mov	r3, r0
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d001      	beq.n	800b516 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800b512:	f7f6 fbc3 	bl	8001c9c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b516:	bf00      	nop
 800b518:	bd80      	pop	{r7, pc}
 800b51a:	bf00      	nop
 800b51c:	200001a8 	.word	0x200001a8
 800b520:	200007e0 	.word	0x200007e0
 800b524:	200000a0 	.word	0x200000a0

0800b528 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b528:	b480      	push	{r7}
 800b52a:	b083      	sub	sp, #12
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	4603      	mov	r3, r0
 800b530:	6039      	str	r1, [r7, #0]
 800b532:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b534:	683b      	ldr	r3, [r7, #0]
 800b536:	2212      	movs	r2, #18
 800b538:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b53a:	4b03      	ldr	r3, [pc, #12]	; (800b548 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b53c:	4618      	mov	r0, r3
 800b53e:	370c      	adds	r7, #12
 800b540:	46bd      	mov	sp, r7
 800b542:	bc80      	pop	{r7}
 800b544:	4770      	bx	lr
 800b546:	bf00      	nop
 800b548:	200001c4 	.word	0x200001c4

0800b54c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b54c:	b480      	push	{r7}
 800b54e:	b083      	sub	sp, #12
 800b550:	af00      	add	r7, sp, #0
 800b552:	4603      	mov	r3, r0
 800b554:	6039      	str	r1, [r7, #0]
 800b556:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b558:	683b      	ldr	r3, [r7, #0]
 800b55a:	2204      	movs	r2, #4
 800b55c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b55e:	4b03      	ldr	r3, [pc, #12]	; (800b56c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b560:	4618      	mov	r0, r3
 800b562:	370c      	adds	r7, #12
 800b564:	46bd      	mov	sp, r7
 800b566:	bc80      	pop	{r7}
 800b568:	4770      	bx	lr
 800b56a:	bf00      	nop
 800b56c:	200001d8 	.word	0x200001d8

0800b570 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b082      	sub	sp, #8
 800b574:	af00      	add	r7, sp, #0
 800b576:	4603      	mov	r3, r0
 800b578:	6039      	str	r1, [r7, #0]
 800b57a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b57c:	79fb      	ldrb	r3, [r7, #7]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d105      	bne.n	800b58e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b582:	683a      	ldr	r2, [r7, #0]
 800b584:	4907      	ldr	r1, [pc, #28]	; (800b5a4 <USBD_FS_ProductStrDescriptor+0x34>)
 800b586:	4808      	ldr	r0, [pc, #32]	; (800b5a8 <USBD_FS_ProductStrDescriptor+0x38>)
 800b588:	f7ff fee8 	bl	800b35c <USBD_GetString>
 800b58c:	e004      	b.n	800b598 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b58e:	683a      	ldr	r2, [r7, #0]
 800b590:	4904      	ldr	r1, [pc, #16]	; (800b5a4 <USBD_FS_ProductStrDescriptor+0x34>)
 800b592:	4805      	ldr	r0, [pc, #20]	; (800b5a8 <USBD_FS_ProductStrDescriptor+0x38>)
 800b594:	f7ff fee2 	bl	800b35c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b598:	4b02      	ldr	r3, [pc, #8]	; (800b5a4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b59a:	4618      	mov	r0, r3
 800b59c:	3708      	adds	r7, #8
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bd80      	pop	{r7, pc}
 800b5a2:	bf00      	nop
 800b5a4:	20000aa4 	.word	0x20000aa4
 800b5a8:	0800f0b8 	.word	0x0800f0b8

0800b5ac <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b082      	sub	sp, #8
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	6039      	str	r1, [r7, #0]
 800b5b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b5b8:	683a      	ldr	r2, [r7, #0]
 800b5ba:	4904      	ldr	r1, [pc, #16]	; (800b5cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b5bc:	4804      	ldr	r0, [pc, #16]	; (800b5d0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b5be:	f7ff fecd 	bl	800b35c <USBD_GetString>
  return USBD_StrDesc;
 800b5c2:	4b02      	ldr	r3, [pc, #8]	; (800b5cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	3708      	adds	r7, #8
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	bd80      	pop	{r7, pc}
 800b5cc:	20000aa4 	.word	0x20000aa4
 800b5d0:	0800f0cc 	.word	0x0800f0cc

0800b5d4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b082      	sub	sp, #8
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	4603      	mov	r3, r0
 800b5dc:	6039      	str	r1, [r7, #0]
 800b5de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b5e0:	683b      	ldr	r3, [r7, #0]
 800b5e2:	221a      	movs	r2, #26
 800b5e4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b5e6:	f000 f843 	bl	800b670 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b5ea:	4b02      	ldr	r3, [pc, #8]	; (800b5f4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	3708      	adds	r7, #8
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	bd80      	pop	{r7, pc}
 800b5f4:	200001dc 	.word	0x200001dc

0800b5f8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b082      	sub	sp, #8
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	4603      	mov	r3, r0
 800b600:	6039      	str	r1, [r7, #0]
 800b602:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b604:	79fb      	ldrb	r3, [r7, #7]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d105      	bne.n	800b616 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b60a:	683a      	ldr	r2, [r7, #0]
 800b60c:	4907      	ldr	r1, [pc, #28]	; (800b62c <USBD_FS_ConfigStrDescriptor+0x34>)
 800b60e:	4808      	ldr	r0, [pc, #32]	; (800b630 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b610:	f7ff fea4 	bl	800b35c <USBD_GetString>
 800b614:	e004      	b.n	800b620 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b616:	683a      	ldr	r2, [r7, #0]
 800b618:	4904      	ldr	r1, [pc, #16]	; (800b62c <USBD_FS_ConfigStrDescriptor+0x34>)
 800b61a:	4805      	ldr	r0, [pc, #20]	; (800b630 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b61c:	f7ff fe9e 	bl	800b35c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b620:	4b02      	ldr	r3, [pc, #8]	; (800b62c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b622:	4618      	mov	r0, r3
 800b624:	3708      	adds	r7, #8
 800b626:	46bd      	mov	sp, r7
 800b628:	bd80      	pop	{r7, pc}
 800b62a:	bf00      	nop
 800b62c:	20000aa4 	.word	0x20000aa4
 800b630:	0800f0e0 	.word	0x0800f0e0

0800b634 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b082      	sub	sp, #8
 800b638:	af00      	add	r7, sp, #0
 800b63a:	4603      	mov	r3, r0
 800b63c:	6039      	str	r1, [r7, #0]
 800b63e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b640:	79fb      	ldrb	r3, [r7, #7]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d105      	bne.n	800b652 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b646:	683a      	ldr	r2, [r7, #0]
 800b648:	4907      	ldr	r1, [pc, #28]	; (800b668 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b64a:	4808      	ldr	r0, [pc, #32]	; (800b66c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b64c:	f7ff fe86 	bl	800b35c <USBD_GetString>
 800b650:	e004      	b.n	800b65c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b652:	683a      	ldr	r2, [r7, #0]
 800b654:	4904      	ldr	r1, [pc, #16]	; (800b668 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b656:	4805      	ldr	r0, [pc, #20]	; (800b66c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b658:	f7ff fe80 	bl	800b35c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b65c:	4b02      	ldr	r3, [pc, #8]	; (800b668 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b65e:	4618      	mov	r0, r3
 800b660:	3708      	adds	r7, #8
 800b662:	46bd      	mov	sp, r7
 800b664:	bd80      	pop	{r7, pc}
 800b666:	bf00      	nop
 800b668:	20000aa4 	.word	0x20000aa4
 800b66c:	0800f0ec 	.word	0x0800f0ec

0800b670 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b670:	b580      	push	{r7, lr}
 800b672:	b084      	sub	sp, #16
 800b674:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b676:	4b0f      	ldr	r3, [pc, #60]	; (800b6b4 <Get_SerialNum+0x44>)
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b67c:	4b0e      	ldr	r3, [pc, #56]	; (800b6b8 <Get_SerialNum+0x48>)
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b682:	4b0e      	ldr	r3, [pc, #56]	; (800b6bc <Get_SerialNum+0x4c>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b688:	68fa      	ldr	r2, [r7, #12]
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	4413      	add	r3, r2
 800b68e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d009      	beq.n	800b6aa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b696:	2208      	movs	r2, #8
 800b698:	4909      	ldr	r1, [pc, #36]	; (800b6c0 <Get_SerialNum+0x50>)
 800b69a:	68f8      	ldr	r0, [r7, #12]
 800b69c:	f000 f814 	bl	800b6c8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b6a0:	2204      	movs	r2, #4
 800b6a2:	4908      	ldr	r1, [pc, #32]	; (800b6c4 <Get_SerialNum+0x54>)
 800b6a4:	68b8      	ldr	r0, [r7, #8]
 800b6a6:	f000 f80f 	bl	800b6c8 <IntToUnicode>
  }
}
 800b6aa:	bf00      	nop
 800b6ac:	3710      	adds	r7, #16
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bd80      	pop	{r7, pc}
 800b6b2:	bf00      	nop
 800b6b4:	1ffff7e8 	.word	0x1ffff7e8
 800b6b8:	1ffff7ec 	.word	0x1ffff7ec
 800b6bc:	1ffff7f0 	.word	0x1ffff7f0
 800b6c0:	200001de 	.word	0x200001de
 800b6c4:	200001ee 	.word	0x200001ee

0800b6c8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b6c8:	b480      	push	{r7}
 800b6ca:	b087      	sub	sp, #28
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	60f8      	str	r0, [r7, #12]
 800b6d0:	60b9      	str	r1, [r7, #8]
 800b6d2:	4613      	mov	r3, r2
 800b6d4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b6da:	2300      	movs	r3, #0
 800b6dc:	75fb      	strb	r3, [r7, #23]
 800b6de:	e027      	b.n	800b730 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	0f1b      	lsrs	r3, r3, #28
 800b6e4:	2b09      	cmp	r3, #9
 800b6e6:	d80b      	bhi.n	800b700 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	0f1b      	lsrs	r3, r3, #28
 800b6ec:	b2da      	uxtb	r2, r3
 800b6ee:	7dfb      	ldrb	r3, [r7, #23]
 800b6f0:	005b      	lsls	r3, r3, #1
 800b6f2:	4619      	mov	r1, r3
 800b6f4:	68bb      	ldr	r3, [r7, #8]
 800b6f6:	440b      	add	r3, r1
 800b6f8:	3230      	adds	r2, #48	; 0x30
 800b6fa:	b2d2      	uxtb	r2, r2
 800b6fc:	701a      	strb	r2, [r3, #0]
 800b6fe:	e00a      	b.n	800b716 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	0f1b      	lsrs	r3, r3, #28
 800b704:	b2da      	uxtb	r2, r3
 800b706:	7dfb      	ldrb	r3, [r7, #23]
 800b708:	005b      	lsls	r3, r3, #1
 800b70a:	4619      	mov	r1, r3
 800b70c:	68bb      	ldr	r3, [r7, #8]
 800b70e:	440b      	add	r3, r1
 800b710:	3237      	adds	r2, #55	; 0x37
 800b712:	b2d2      	uxtb	r2, r2
 800b714:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	011b      	lsls	r3, r3, #4
 800b71a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b71c:	7dfb      	ldrb	r3, [r7, #23]
 800b71e:	005b      	lsls	r3, r3, #1
 800b720:	3301      	adds	r3, #1
 800b722:	68ba      	ldr	r2, [r7, #8]
 800b724:	4413      	add	r3, r2
 800b726:	2200      	movs	r2, #0
 800b728:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b72a:	7dfb      	ldrb	r3, [r7, #23]
 800b72c:	3301      	adds	r3, #1
 800b72e:	75fb      	strb	r3, [r7, #23]
 800b730:	7dfa      	ldrb	r2, [r7, #23]
 800b732:	79fb      	ldrb	r3, [r7, #7]
 800b734:	429a      	cmp	r2, r3
 800b736:	d3d3      	bcc.n	800b6e0 <IntToUnicode+0x18>
  }
}
 800b738:	bf00      	nop
 800b73a:	bf00      	nop
 800b73c:	371c      	adds	r7, #28
 800b73e:	46bd      	mov	sp, r7
 800b740:	bc80      	pop	{r7}
 800b742:	4770      	bx	lr

0800b744 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b744:	b580      	push	{r7, lr}
 800b746:	b084      	sub	sp, #16
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	4a0d      	ldr	r2, [pc, #52]	; (800b788 <HAL_PCD_MspInit+0x44>)
 800b752:	4293      	cmp	r3, r2
 800b754:	d113      	bne.n	800b77e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b756:	4b0d      	ldr	r3, [pc, #52]	; (800b78c <HAL_PCD_MspInit+0x48>)
 800b758:	69db      	ldr	r3, [r3, #28]
 800b75a:	4a0c      	ldr	r2, [pc, #48]	; (800b78c <HAL_PCD_MspInit+0x48>)
 800b75c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b760:	61d3      	str	r3, [r2, #28]
 800b762:	4b0a      	ldr	r3, [pc, #40]	; (800b78c <HAL_PCD_MspInit+0x48>)
 800b764:	69db      	ldr	r3, [r3, #28]
 800b766:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b76a:	60fb      	str	r3, [r7, #12]
 800b76c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800b76e:	2200      	movs	r2, #0
 800b770:	2100      	movs	r1, #0
 800b772:	2014      	movs	r0, #20
 800b774:	f7f7 fba5 	bl	8002ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800b778:	2014      	movs	r0, #20
 800b77a:	f7f7 fbbe 	bl	8002efa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b77e:	bf00      	nop
 800b780:	3710      	adds	r7, #16
 800b782:	46bd      	mov	sp, r7
 800b784:	bd80      	pop	{r7, pc}
 800b786:	bf00      	nop
 800b788:	40005c00 	.word	0x40005c00
 800b78c:	40021000 	.word	0x40021000

0800b790 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b082      	sub	sp, #8
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800b7a4:	4619      	mov	r1, r3
 800b7a6:	4610      	mov	r0, r2
 800b7a8:	f7fe fea8 	bl	800a4fc <USBD_LL_SetupStage>
}
 800b7ac:	bf00      	nop
 800b7ae:	3708      	adds	r7, #8
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	bd80      	pop	{r7, pc}

0800b7b4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b082      	sub	sp, #8
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
 800b7bc:	460b      	mov	r3, r1
 800b7be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800b7c6:	78fa      	ldrb	r2, [r7, #3]
 800b7c8:	6879      	ldr	r1, [r7, #4]
 800b7ca:	4613      	mov	r3, r2
 800b7cc:	009b      	lsls	r3, r3, #2
 800b7ce:	4413      	add	r3, r2
 800b7d0:	00db      	lsls	r3, r3, #3
 800b7d2:	440b      	add	r3, r1
 800b7d4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800b7d8:	681a      	ldr	r2, [r3, #0]
 800b7da:	78fb      	ldrb	r3, [r7, #3]
 800b7dc:	4619      	mov	r1, r3
 800b7de:	f7fe feda 	bl	800a596 <USBD_LL_DataOutStage>
}
 800b7e2:	bf00      	nop
 800b7e4:	3708      	adds	r7, #8
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	bd80      	pop	{r7, pc}

0800b7ea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7ea:	b580      	push	{r7, lr}
 800b7ec:	b082      	sub	sp, #8
 800b7ee:	af00      	add	r7, sp, #0
 800b7f0:	6078      	str	r0, [r7, #4]
 800b7f2:	460b      	mov	r3, r1
 800b7f4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800b7fc:	78fa      	ldrb	r2, [r7, #3]
 800b7fe:	6879      	ldr	r1, [r7, #4]
 800b800:	4613      	mov	r3, r2
 800b802:	009b      	lsls	r3, r3, #2
 800b804:	4413      	add	r3, r2
 800b806:	00db      	lsls	r3, r3, #3
 800b808:	440b      	add	r3, r1
 800b80a:	333c      	adds	r3, #60	; 0x3c
 800b80c:	681a      	ldr	r2, [r3, #0]
 800b80e:	78fb      	ldrb	r3, [r7, #3]
 800b810:	4619      	mov	r1, r3
 800b812:	f7fe ff31 	bl	800a678 <USBD_LL_DataInStage>
}
 800b816:	bf00      	nop
 800b818:	3708      	adds	r7, #8
 800b81a:	46bd      	mov	sp, r7
 800b81c:	bd80      	pop	{r7, pc}

0800b81e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b81e:	b580      	push	{r7, lr}
 800b820:	b082      	sub	sp, #8
 800b822:	af00      	add	r7, sp, #0
 800b824:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b82c:	4618      	mov	r0, r3
 800b82e:	f7ff f841 	bl	800a8b4 <USBD_LL_SOF>
}
 800b832:	bf00      	nop
 800b834:	3708      	adds	r7, #8
 800b836:	46bd      	mov	sp, r7
 800b838:	bd80      	pop	{r7, pc}

0800b83a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b83a:	b580      	push	{r7, lr}
 800b83c:	b084      	sub	sp, #16
 800b83e:	af00      	add	r7, sp, #0
 800b840:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b842:	2301      	movs	r3, #1
 800b844:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	689b      	ldr	r3, [r3, #8]
 800b84a:	2b02      	cmp	r3, #2
 800b84c:	d001      	beq.n	800b852 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b84e:	f7f6 fa25 	bl	8001c9c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b858:	7bfa      	ldrb	r2, [r7, #15]
 800b85a:	4611      	mov	r1, r2
 800b85c:	4618      	mov	r0, r3
 800b85e:	f7fe fff1 	bl	800a844 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b868:	4618      	mov	r0, r3
 800b86a:	f7fe ffaa 	bl	800a7c2 <USBD_LL_Reset>
}
 800b86e:	bf00      	nop
 800b870:	3710      	adds	r7, #16
 800b872:	46bd      	mov	sp, r7
 800b874:	bd80      	pop	{r7, pc}
	...

0800b878 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b082      	sub	sp, #8
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b886:	4618      	mov	r0, r3
 800b888:	f7fe ffeb 	bl	800a862 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	699b      	ldr	r3, [r3, #24]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d005      	beq.n	800b8a0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b894:	4b04      	ldr	r3, [pc, #16]	; (800b8a8 <HAL_PCD_SuspendCallback+0x30>)
 800b896:	691b      	ldr	r3, [r3, #16]
 800b898:	4a03      	ldr	r2, [pc, #12]	; (800b8a8 <HAL_PCD_SuspendCallback+0x30>)
 800b89a:	f043 0306 	orr.w	r3, r3, #6
 800b89e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b8a0:	bf00      	nop
 800b8a2:	3708      	adds	r7, #8
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	bd80      	pop	{r7, pc}
 800b8a8:	e000ed00 	.word	0xe000ed00

0800b8ac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b082      	sub	sp, #8
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	f7fe ffe5 	bl	800a88a <USBD_LL_Resume>
}
 800b8c0:	bf00      	nop
 800b8c2:	3708      	adds	r7, #8
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	bd80      	pop	{r7, pc}

0800b8c8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b082      	sub	sp, #8
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800b8d0:	4a1f      	ldr	r2, [pc, #124]	; (800b950 <USBD_LL_Init+0x88>)
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	4a1d      	ldr	r2, [pc, #116]	; (800b950 <USBD_LL_Init+0x88>)
 800b8dc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800b8e0:	4b1b      	ldr	r3, [pc, #108]	; (800b950 <USBD_LL_Init+0x88>)
 800b8e2:	4a1c      	ldr	r2, [pc, #112]	; (800b954 <USBD_LL_Init+0x8c>)
 800b8e4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b8e6:	4b1a      	ldr	r3, [pc, #104]	; (800b950 <USBD_LL_Init+0x88>)
 800b8e8:	2208      	movs	r2, #8
 800b8ea:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b8ec:	4b18      	ldr	r3, [pc, #96]	; (800b950 <USBD_LL_Init+0x88>)
 800b8ee:	2202      	movs	r2, #2
 800b8f0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b8f2:	4b17      	ldr	r3, [pc, #92]	; (800b950 <USBD_LL_Init+0x88>)
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b8f8:	4b15      	ldr	r3, [pc, #84]	; (800b950 <USBD_LL_Init+0x88>)
 800b8fa:	2200      	movs	r2, #0
 800b8fc:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b8fe:	4b14      	ldr	r3, [pc, #80]	; (800b950 <USBD_LL_Init+0x88>)
 800b900:	2200      	movs	r2, #0
 800b902:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b904:	4812      	ldr	r0, [pc, #72]	; (800b950 <USBD_LL_Init+0x88>)
 800b906:	f7f8 fda7 	bl	8004458 <HAL_PCD_Init>
 800b90a:	4603      	mov	r3, r0
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d001      	beq.n	800b914 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800b910:	f7f6 f9c4 	bl	8001c9c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b91a:	2318      	movs	r3, #24
 800b91c:	2200      	movs	r2, #0
 800b91e:	2100      	movs	r1, #0
 800b920:	f7fa fa06 	bl	8005d30 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b92a:	2358      	movs	r3, #88	; 0x58
 800b92c:	2200      	movs	r2, #0
 800b92e:	2180      	movs	r1, #128	; 0x80
 800b930:	f7fa f9fe 	bl	8005d30 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b93a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b93e:	2200      	movs	r2, #0
 800b940:	2181      	movs	r1, #129	; 0x81
 800b942:	f7fa f9f5 	bl	8005d30 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 800b946:	2300      	movs	r3, #0
}
 800b948:	4618      	mov	r0, r3
 800b94a:	3708      	adds	r7, #8
 800b94c:	46bd      	mov	sp, r7
 800b94e:	bd80      	pop	{r7, pc}
 800b950:	20000ca4 	.word	0x20000ca4
 800b954:	40005c00 	.word	0x40005c00

0800b958 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b084      	sub	sp, #16
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b960:	2300      	movs	r3, #0
 800b962:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b964:	2300      	movs	r3, #0
 800b966:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b96e:	4618      	mov	r0, r3
 800b970:	f7f8 fe7d 	bl	800466e <HAL_PCD_Start>
 800b974:	4603      	mov	r3, r0
 800b976:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b978:	7bfb      	ldrb	r3, [r7, #15]
 800b97a:	4618      	mov	r0, r3
 800b97c:	f000 f93c 	bl	800bbf8 <USBD_Get_USB_Status>
 800b980:	4603      	mov	r3, r0
 800b982:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b984:	7bbb      	ldrb	r3, [r7, #14]
}
 800b986:	4618      	mov	r0, r3
 800b988:	3710      	adds	r7, #16
 800b98a:	46bd      	mov	sp, r7
 800b98c:	bd80      	pop	{r7, pc}

0800b98e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b98e:	b580      	push	{r7, lr}
 800b990:	b084      	sub	sp, #16
 800b992:	af00      	add	r7, sp, #0
 800b994:	6078      	str	r0, [r7, #4]
 800b996:	4608      	mov	r0, r1
 800b998:	4611      	mov	r1, r2
 800b99a:	461a      	mov	r2, r3
 800b99c:	4603      	mov	r3, r0
 800b99e:	70fb      	strb	r3, [r7, #3]
 800b9a0:	460b      	mov	r3, r1
 800b9a2:	70bb      	strb	r3, [r7, #2]
 800b9a4:	4613      	mov	r3, r2
 800b9a6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b9b6:	78bb      	ldrb	r3, [r7, #2]
 800b9b8:	883a      	ldrh	r2, [r7, #0]
 800b9ba:	78f9      	ldrb	r1, [r7, #3]
 800b9bc:	f7f8 fff7 	bl	80049ae <HAL_PCD_EP_Open>
 800b9c0:	4603      	mov	r3, r0
 800b9c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b9c4:	7bfb      	ldrb	r3, [r7, #15]
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	f000 f916 	bl	800bbf8 <USBD_Get_USB_Status>
 800b9cc:	4603      	mov	r3, r0
 800b9ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b9d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	3710      	adds	r7, #16
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	bd80      	pop	{r7, pc}

0800b9da <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b9da:	b580      	push	{r7, lr}
 800b9dc:	b084      	sub	sp, #16
 800b9de:	af00      	add	r7, sp, #0
 800b9e0:	6078      	str	r0, [r7, #4]
 800b9e2:	460b      	mov	r3, r1
 800b9e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b9f4:	78fa      	ldrb	r2, [r7, #3]
 800b9f6:	4611      	mov	r1, r2
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	f7f9 f83e 	bl	8004a7a <HAL_PCD_EP_Close>
 800b9fe:	4603      	mov	r3, r0
 800ba00:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba02:	7bfb      	ldrb	r3, [r7, #15]
 800ba04:	4618      	mov	r0, r3
 800ba06:	f000 f8f7 	bl	800bbf8 <USBD_Get_USB_Status>
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba0e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba10:	4618      	mov	r0, r3
 800ba12:	3710      	adds	r7, #16
 800ba14:	46bd      	mov	sp, r7
 800ba16:	bd80      	pop	{r7, pc}

0800ba18 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b084      	sub	sp, #16
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
 800ba20:	460b      	mov	r3, r1
 800ba22:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba24:	2300      	movs	r3, #0
 800ba26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba28:	2300      	movs	r3, #0
 800ba2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ba32:	78fa      	ldrb	r2, [r7, #3]
 800ba34:	4611      	mov	r1, r2
 800ba36:	4618      	mov	r0, r3
 800ba38:	f7f9 f8e7 	bl	8004c0a <HAL_PCD_EP_SetStall>
 800ba3c:	4603      	mov	r3, r0
 800ba3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba40:	7bfb      	ldrb	r3, [r7, #15]
 800ba42:	4618      	mov	r0, r3
 800ba44:	f000 f8d8 	bl	800bbf8 <USBD_Get_USB_Status>
 800ba48:	4603      	mov	r3, r0
 800ba4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba4c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba4e:	4618      	mov	r0, r3
 800ba50:	3710      	adds	r7, #16
 800ba52:	46bd      	mov	sp, r7
 800ba54:	bd80      	pop	{r7, pc}

0800ba56 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba56:	b580      	push	{r7, lr}
 800ba58:	b084      	sub	sp, #16
 800ba5a:	af00      	add	r7, sp, #0
 800ba5c:	6078      	str	r0, [r7, #4]
 800ba5e:	460b      	mov	r3, r1
 800ba60:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba62:	2300      	movs	r3, #0
 800ba64:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba66:	2300      	movs	r3, #0
 800ba68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ba70:	78fa      	ldrb	r2, [r7, #3]
 800ba72:	4611      	mov	r1, r2
 800ba74:	4618      	mov	r0, r3
 800ba76:	f7f9 f928 	bl	8004cca <HAL_PCD_EP_ClrStall>
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba7e:	7bfb      	ldrb	r3, [r7, #15]
 800ba80:	4618      	mov	r0, r3
 800ba82:	f000 f8b9 	bl	800bbf8 <USBD_Get_USB_Status>
 800ba86:	4603      	mov	r3, r0
 800ba88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba8a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	3710      	adds	r7, #16
 800ba90:	46bd      	mov	sp, r7
 800ba92:	bd80      	pop	{r7, pc}

0800ba94 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba94:	b480      	push	{r7}
 800ba96:	b085      	sub	sp, #20
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
 800ba9c:	460b      	mov	r3, r1
 800ba9e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800baa6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800baa8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800baac:	2b00      	cmp	r3, #0
 800baae:	da0c      	bge.n	800baca <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bab0:	78fb      	ldrb	r3, [r7, #3]
 800bab2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bab6:	68f9      	ldr	r1, [r7, #12]
 800bab8:	1c5a      	adds	r2, r3, #1
 800baba:	4613      	mov	r3, r2
 800babc:	009b      	lsls	r3, r3, #2
 800babe:	4413      	add	r3, r2
 800bac0:	00db      	lsls	r3, r3, #3
 800bac2:	440b      	add	r3, r1
 800bac4:	3302      	adds	r3, #2
 800bac6:	781b      	ldrb	r3, [r3, #0]
 800bac8:	e00b      	b.n	800bae2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800baca:	78fb      	ldrb	r3, [r7, #3]
 800bacc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bad0:	68f9      	ldr	r1, [r7, #12]
 800bad2:	4613      	mov	r3, r2
 800bad4:	009b      	lsls	r3, r3, #2
 800bad6:	4413      	add	r3, r2
 800bad8:	00db      	lsls	r3, r3, #3
 800bada:	440b      	add	r3, r1
 800badc:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800bae0:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bae2:	4618      	mov	r0, r3
 800bae4:	3714      	adds	r7, #20
 800bae6:	46bd      	mov	sp, r7
 800bae8:	bc80      	pop	{r7}
 800baea:	4770      	bx	lr

0800baec <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b084      	sub	sp, #16
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
 800baf4:	460b      	mov	r3, r1
 800baf6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800baf8:	2300      	movs	r3, #0
 800bafa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bafc:	2300      	movs	r3, #0
 800bafe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bb06:	78fa      	ldrb	r2, [r7, #3]
 800bb08:	4611      	mov	r1, r2
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	f7f8 ff2a 	bl	8004964 <HAL_PCD_SetAddress>
 800bb10:	4603      	mov	r3, r0
 800bb12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb14:	7bfb      	ldrb	r3, [r7, #15]
 800bb16:	4618      	mov	r0, r3
 800bb18:	f000 f86e 	bl	800bbf8 <USBD_Get_USB_Status>
 800bb1c:	4603      	mov	r3, r0
 800bb1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb20:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb22:	4618      	mov	r0, r3
 800bb24:	3710      	adds	r7, #16
 800bb26:	46bd      	mov	sp, r7
 800bb28:	bd80      	pop	{r7, pc}

0800bb2a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800bb2a:	b580      	push	{r7, lr}
 800bb2c:	b086      	sub	sp, #24
 800bb2e:	af00      	add	r7, sp, #0
 800bb30:	60f8      	str	r0, [r7, #12]
 800bb32:	607a      	str	r2, [r7, #4]
 800bb34:	461a      	mov	r2, r3
 800bb36:	460b      	mov	r3, r1
 800bb38:	72fb      	strb	r3, [r7, #11]
 800bb3a:	4613      	mov	r3, r2
 800bb3c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb3e:	2300      	movs	r3, #0
 800bb40:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb42:	2300      	movs	r3, #0
 800bb44:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bb4c:	893b      	ldrh	r3, [r7, #8]
 800bb4e:	7af9      	ldrb	r1, [r7, #11]
 800bb50:	687a      	ldr	r2, [r7, #4]
 800bb52:	f7f9 f817 	bl	8004b84 <HAL_PCD_EP_Transmit>
 800bb56:	4603      	mov	r3, r0
 800bb58:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb5a:	7dfb      	ldrb	r3, [r7, #23]
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	f000 f84b 	bl	800bbf8 <USBD_Get_USB_Status>
 800bb62:	4603      	mov	r3, r0
 800bb64:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bb66:	7dbb      	ldrb	r3, [r7, #22]
}
 800bb68:	4618      	mov	r0, r3
 800bb6a:	3718      	adds	r7, #24
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	bd80      	pop	{r7, pc}

0800bb70 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b086      	sub	sp, #24
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	60f8      	str	r0, [r7, #12]
 800bb78:	607a      	str	r2, [r7, #4]
 800bb7a:	461a      	mov	r2, r3
 800bb7c:	460b      	mov	r3, r1
 800bb7e:	72fb      	strb	r3, [r7, #11]
 800bb80:	4613      	mov	r3, r2
 800bb82:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb84:	2300      	movs	r3, #0
 800bb86:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb88:	2300      	movs	r3, #0
 800bb8a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bb92:	893b      	ldrh	r3, [r7, #8]
 800bb94:	7af9      	ldrb	r1, [r7, #11]
 800bb96:	687a      	ldr	r2, [r7, #4]
 800bb98:	f7f8 ffb7 	bl	8004b0a <HAL_PCD_EP_Receive>
 800bb9c:	4603      	mov	r3, r0
 800bb9e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bba0:	7dfb      	ldrb	r3, [r7, #23]
 800bba2:	4618      	mov	r0, r3
 800bba4:	f000 f828 	bl	800bbf8 <USBD_Get_USB_Status>
 800bba8:	4603      	mov	r3, r0
 800bbaa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bbac:	7dbb      	ldrb	r3, [r7, #22]
}
 800bbae:	4618      	mov	r0, r3
 800bbb0:	3718      	adds	r7, #24
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	bd80      	pop	{r7, pc}
	...

0800bbb8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bbb8:	b480      	push	{r7}
 800bbba:	b083      	sub	sp, #12
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bbc0:	4b02      	ldr	r3, [pc, #8]	; (800bbcc <USBD_static_malloc+0x14>)
}
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	370c      	adds	r7, #12
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	bc80      	pop	{r7}
 800bbca:	4770      	bx	lr
 800bbcc:	20000420 	.word	0x20000420

0800bbd0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bbd0:	b480      	push	{r7}
 800bbd2:	b083      	sub	sp, #12
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	6078      	str	r0, [r7, #4]

}
 800bbd8:	bf00      	nop
 800bbda:	370c      	adds	r7, #12
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	bc80      	pop	{r7}
 800bbe0:	4770      	bx	lr

0800bbe2 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbe2:	b480      	push	{r7}
 800bbe4:	b083      	sub	sp, #12
 800bbe6:	af00      	add	r7, sp, #0
 800bbe8:	6078      	str	r0, [r7, #4]
 800bbea:	460b      	mov	r3, r1
 800bbec:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800bbee:	bf00      	nop
 800bbf0:	370c      	adds	r7, #12
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	bc80      	pop	{r7}
 800bbf6:	4770      	bx	lr

0800bbf8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bbf8:	b480      	push	{r7}
 800bbfa:	b085      	sub	sp, #20
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	4603      	mov	r3, r0
 800bc00:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc02:	2300      	movs	r3, #0
 800bc04:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bc06:	79fb      	ldrb	r3, [r7, #7]
 800bc08:	2b03      	cmp	r3, #3
 800bc0a:	d817      	bhi.n	800bc3c <USBD_Get_USB_Status+0x44>
 800bc0c:	a201      	add	r2, pc, #4	; (adr r2, 800bc14 <USBD_Get_USB_Status+0x1c>)
 800bc0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc12:	bf00      	nop
 800bc14:	0800bc25 	.word	0x0800bc25
 800bc18:	0800bc2b 	.word	0x0800bc2b
 800bc1c:	0800bc31 	.word	0x0800bc31
 800bc20:	0800bc37 	.word	0x0800bc37
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bc24:	2300      	movs	r3, #0
 800bc26:	73fb      	strb	r3, [r7, #15]
    break;
 800bc28:	e00b      	b.n	800bc42 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bc2a:	2302      	movs	r3, #2
 800bc2c:	73fb      	strb	r3, [r7, #15]
    break;
 800bc2e:	e008      	b.n	800bc42 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bc30:	2301      	movs	r3, #1
 800bc32:	73fb      	strb	r3, [r7, #15]
    break;
 800bc34:	e005      	b.n	800bc42 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bc36:	2302      	movs	r3, #2
 800bc38:	73fb      	strb	r3, [r7, #15]
    break;
 800bc3a:	e002      	b.n	800bc42 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bc3c:	2302      	movs	r3, #2
 800bc3e:	73fb      	strb	r3, [r7, #15]
    break;
 800bc40:	bf00      	nop
  }
  return usb_status;
 800bc42:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc44:	4618      	mov	r0, r3
 800bc46:	3714      	adds	r7, #20
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	bc80      	pop	{r7}
 800bc4c:	4770      	bx	lr
 800bc4e:	bf00      	nop

0800bc50 <__errno>:
 800bc50:	4b01      	ldr	r3, [pc, #4]	; (800bc58 <__errno+0x8>)
 800bc52:	6818      	ldr	r0, [r3, #0]
 800bc54:	4770      	bx	lr
 800bc56:	bf00      	nop
 800bc58:	200001f8 	.word	0x200001f8

0800bc5c <__libc_init_array>:
 800bc5c:	b570      	push	{r4, r5, r6, lr}
 800bc5e:	2600      	movs	r6, #0
 800bc60:	4d0c      	ldr	r5, [pc, #48]	; (800bc94 <__libc_init_array+0x38>)
 800bc62:	4c0d      	ldr	r4, [pc, #52]	; (800bc98 <__libc_init_array+0x3c>)
 800bc64:	1b64      	subs	r4, r4, r5
 800bc66:	10a4      	asrs	r4, r4, #2
 800bc68:	42a6      	cmp	r6, r4
 800bc6a:	d109      	bne.n	800bc80 <__libc_init_array+0x24>
 800bc6c:	f003 f9f6 	bl	800f05c <_init>
 800bc70:	2600      	movs	r6, #0
 800bc72:	4d0a      	ldr	r5, [pc, #40]	; (800bc9c <__libc_init_array+0x40>)
 800bc74:	4c0a      	ldr	r4, [pc, #40]	; (800bca0 <__libc_init_array+0x44>)
 800bc76:	1b64      	subs	r4, r4, r5
 800bc78:	10a4      	asrs	r4, r4, #2
 800bc7a:	42a6      	cmp	r6, r4
 800bc7c:	d105      	bne.n	800bc8a <__libc_init_array+0x2e>
 800bc7e:	bd70      	pop	{r4, r5, r6, pc}
 800bc80:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc84:	4798      	blx	r3
 800bc86:	3601      	adds	r6, #1
 800bc88:	e7ee      	b.n	800bc68 <__libc_init_array+0xc>
 800bc8a:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc8e:	4798      	blx	r3
 800bc90:	3601      	adds	r6, #1
 800bc92:	e7f2      	b.n	800bc7a <__libc_init_array+0x1e>
 800bc94:	0800f568 	.word	0x0800f568
 800bc98:	0800f568 	.word	0x0800f568
 800bc9c:	0800f568 	.word	0x0800f568
 800bca0:	0800f56c 	.word	0x0800f56c

0800bca4 <memset>:
 800bca4:	4603      	mov	r3, r0
 800bca6:	4402      	add	r2, r0
 800bca8:	4293      	cmp	r3, r2
 800bcaa:	d100      	bne.n	800bcae <memset+0xa>
 800bcac:	4770      	bx	lr
 800bcae:	f803 1b01 	strb.w	r1, [r3], #1
 800bcb2:	e7f9      	b.n	800bca8 <memset+0x4>

0800bcb4 <__cvt>:
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bcba:	461f      	mov	r7, r3
 800bcbc:	bfbb      	ittet	lt
 800bcbe:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800bcc2:	461f      	movlt	r7, r3
 800bcc4:	2300      	movge	r3, #0
 800bcc6:	232d      	movlt	r3, #45	; 0x2d
 800bcc8:	b088      	sub	sp, #32
 800bcca:	4614      	mov	r4, r2
 800bccc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bcce:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800bcd0:	7013      	strb	r3, [r2, #0]
 800bcd2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bcd4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800bcd8:	f023 0820 	bic.w	r8, r3, #32
 800bcdc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bce0:	d005      	beq.n	800bcee <__cvt+0x3a>
 800bce2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800bce6:	d100      	bne.n	800bcea <__cvt+0x36>
 800bce8:	3501      	adds	r5, #1
 800bcea:	2302      	movs	r3, #2
 800bcec:	e000      	b.n	800bcf0 <__cvt+0x3c>
 800bcee:	2303      	movs	r3, #3
 800bcf0:	aa07      	add	r2, sp, #28
 800bcf2:	9204      	str	r2, [sp, #16]
 800bcf4:	aa06      	add	r2, sp, #24
 800bcf6:	e9cd a202 	strd	sl, r2, [sp, #8]
 800bcfa:	e9cd 3500 	strd	r3, r5, [sp]
 800bcfe:	4622      	mov	r2, r4
 800bd00:	463b      	mov	r3, r7
 800bd02:	f000 fce5 	bl	800c6d0 <_dtoa_r>
 800bd06:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800bd0a:	4606      	mov	r6, r0
 800bd0c:	d102      	bne.n	800bd14 <__cvt+0x60>
 800bd0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bd10:	07db      	lsls	r3, r3, #31
 800bd12:	d522      	bpl.n	800bd5a <__cvt+0xa6>
 800bd14:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bd18:	eb06 0905 	add.w	r9, r6, r5
 800bd1c:	d110      	bne.n	800bd40 <__cvt+0x8c>
 800bd1e:	7833      	ldrb	r3, [r6, #0]
 800bd20:	2b30      	cmp	r3, #48	; 0x30
 800bd22:	d10a      	bne.n	800bd3a <__cvt+0x86>
 800bd24:	2200      	movs	r2, #0
 800bd26:	2300      	movs	r3, #0
 800bd28:	4620      	mov	r0, r4
 800bd2a:	4639      	mov	r1, r7
 800bd2c:	f7f4 fe3c 	bl	80009a8 <__aeabi_dcmpeq>
 800bd30:	b918      	cbnz	r0, 800bd3a <__cvt+0x86>
 800bd32:	f1c5 0501 	rsb	r5, r5, #1
 800bd36:	f8ca 5000 	str.w	r5, [sl]
 800bd3a:	f8da 3000 	ldr.w	r3, [sl]
 800bd3e:	4499      	add	r9, r3
 800bd40:	2200      	movs	r2, #0
 800bd42:	2300      	movs	r3, #0
 800bd44:	4620      	mov	r0, r4
 800bd46:	4639      	mov	r1, r7
 800bd48:	f7f4 fe2e 	bl	80009a8 <__aeabi_dcmpeq>
 800bd4c:	b108      	cbz	r0, 800bd52 <__cvt+0x9e>
 800bd4e:	f8cd 901c 	str.w	r9, [sp, #28]
 800bd52:	2230      	movs	r2, #48	; 0x30
 800bd54:	9b07      	ldr	r3, [sp, #28]
 800bd56:	454b      	cmp	r3, r9
 800bd58:	d307      	bcc.n	800bd6a <__cvt+0xb6>
 800bd5a:	4630      	mov	r0, r6
 800bd5c:	9b07      	ldr	r3, [sp, #28]
 800bd5e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800bd60:	1b9b      	subs	r3, r3, r6
 800bd62:	6013      	str	r3, [r2, #0]
 800bd64:	b008      	add	sp, #32
 800bd66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd6a:	1c59      	adds	r1, r3, #1
 800bd6c:	9107      	str	r1, [sp, #28]
 800bd6e:	701a      	strb	r2, [r3, #0]
 800bd70:	e7f0      	b.n	800bd54 <__cvt+0xa0>

0800bd72 <__exponent>:
 800bd72:	4603      	mov	r3, r0
 800bd74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bd76:	2900      	cmp	r1, #0
 800bd78:	f803 2b02 	strb.w	r2, [r3], #2
 800bd7c:	bfb6      	itet	lt
 800bd7e:	222d      	movlt	r2, #45	; 0x2d
 800bd80:	222b      	movge	r2, #43	; 0x2b
 800bd82:	4249      	neglt	r1, r1
 800bd84:	2909      	cmp	r1, #9
 800bd86:	7042      	strb	r2, [r0, #1]
 800bd88:	dd2b      	ble.n	800bde2 <__exponent+0x70>
 800bd8a:	f10d 0407 	add.w	r4, sp, #7
 800bd8e:	46a4      	mov	ip, r4
 800bd90:	270a      	movs	r7, #10
 800bd92:	fb91 f6f7 	sdiv	r6, r1, r7
 800bd96:	460a      	mov	r2, r1
 800bd98:	46a6      	mov	lr, r4
 800bd9a:	fb07 1516 	mls	r5, r7, r6, r1
 800bd9e:	2a63      	cmp	r2, #99	; 0x63
 800bda0:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800bda4:	4631      	mov	r1, r6
 800bda6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800bdaa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800bdae:	dcf0      	bgt.n	800bd92 <__exponent+0x20>
 800bdb0:	3130      	adds	r1, #48	; 0x30
 800bdb2:	f1ae 0502 	sub.w	r5, lr, #2
 800bdb6:	f804 1c01 	strb.w	r1, [r4, #-1]
 800bdba:	4629      	mov	r1, r5
 800bdbc:	1c44      	adds	r4, r0, #1
 800bdbe:	4561      	cmp	r1, ip
 800bdc0:	d30a      	bcc.n	800bdd8 <__exponent+0x66>
 800bdc2:	f10d 0209 	add.w	r2, sp, #9
 800bdc6:	eba2 020e 	sub.w	r2, r2, lr
 800bdca:	4565      	cmp	r5, ip
 800bdcc:	bf88      	it	hi
 800bdce:	2200      	movhi	r2, #0
 800bdd0:	4413      	add	r3, r2
 800bdd2:	1a18      	subs	r0, r3, r0
 800bdd4:	b003      	add	sp, #12
 800bdd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bdd8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bddc:	f804 2f01 	strb.w	r2, [r4, #1]!
 800bde0:	e7ed      	b.n	800bdbe <__exponent+0x4c>
 800bde2:	2330      	movs	r3, #48	; 0x30
 800bde4:	3130      	adds	r1, #48	; 0x30
 800bde6:	7083      	strb	r3, [r0, #2]
 800bde8:	70c1      	strb	r1, [r0, #3]
 800bdea:	1d03      	adds	r3, r0, #4
 800bdec:	e7f1      	b.n	800bdd2 <__exponent+0x60>
	...

0800bdf0 <_printf_float>:
 800bdf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdf4:	b091      	sub	sp, #68	; 0x44
 800bdf6:	460c      	mov	r4, r1
 800bdf8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800bdfc:	4616      	mov	r6, r2
 800bdfe:	461f      	mov	r7, r3
 800be00:	4605      	mov	r5, r0
 800be02:	f001 fa53 	bl	800d2ac <_localeconv_r>
 800be06:	6803      	ldr	r3, [r0, #0]
 800be08:	4618      	mov	r0, r3
 800be0a:	9309      	str	r3, [sp, #36]	; 0x24
 800be0c:	f7f4 f9a0 	bl	8000150 <strlen>
 800be10:	2300      	movs	r3, #0
 800be12:	930e      	str	r3, [sp, #56]	; 0x38
 800be14:	f8d8 3000 	ldr.w	r3, [r8]
 800be18:	900a      	str	r0, [sp, #40]	; 0x28
 800be1a:	3307      	adds	r3, #7
 800be1c:	f023 0307 	bic.w	r3, r3, #7
 800be20:	f103 0208 	add.w	r2, r3, #8
 800be24:	f894 9018 	ldrb.w	r9, [r4, #24]
 800be28:	f8d4 b000 	ldr.w	fp, [r4]
 800be2c:	f8c8 2000 	str.w	r2, [r8]
 800be30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be34:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800be38:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800be3c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800be40:	930b      	str	r3, [sp, #44]	; 0x2c
 800be42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800be46:	4640      	mov	r0, r8
 800be48:	4b9c      	ldr	r3, [pc, #624]	; (800c0bc <_printf_float+0x2cc>)
 800be4a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800be4c:	f7f4 fdde 	bl	8000a0c <__aeabi_dcmpun>
 800be50:	bb70      	cbnz	r0, 800beb0 <_printf_float+0xc0>
 800be52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800be56:	4640      	mov	r0, r8
 800be58:	4b98      	ldr	r3, [pc, #608]	; (800c0bc <_printf_float+0x2cc>)
 800be5a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800be5c:	f7f4 fdb8 	bl	80009d0 <__aeabi_dcmple>
 800be60:	bb30      	cbnz	r0, 800beb0 <_printf_float+0xc0>
 800be62:	2200      	movs	r2, #0
 800be64:	2300      	movs	r3, #0
 800be66:	4640      	mov	r0, r8
 800be68:	4651      	mov	r1, sl
 800be6a:	f7f4 fda7 	bl	80009bc <__aeabi_dcmplt>
 800be6e:	b110      	cbz	r0, 800be76 <_printf_float+0x86>
 800be70:	232d      	movs	r3, #45	; 0x2d
 800be72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800be76:	4b92      	ldr	r3, [pc, #584]	; (800c0c0 <_printf_float+0x2d0>)
 800be78:	4892      	ldr	r0, [pc, #584]	; (800c0c4 <_printf_float+0x2d4>)
 800be7a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800be7e:	bf94      	ite	ls
 800be80:	4698      	movls	r8, r3
 800be82:	4680      	movhi	r8, r0
 800be84:	2303      	movs	r3, #3
 800be86:	f04f 0a00 	mov.w	sl, #0
 800be8a:	6123      	str	r3, [r4, #16]
 800be8c:	f02b 0304 	bic.w	r3, fp, #4
 800be90:	6023      	str	r3, [r4, #0]
 800be92:	4633      	mov	r3, r6
 800be94:	4621      	mov	r1, r4
 800be96:	4628      	mov	r0, r5
 800be98:	9700      	str	r7, [sp, #0]
 800be9a:	aa0f      	add	r2, sp, #60	; 0x3c
 800be9c:	f000 f9d4 	bl	800c248 <_printf_common>
 800bea0:	3001      	adds	r0, #1
 800bea2:	f040 8090 	bne.w	800bfc6 <_printf_float+0x1d6>
 800bea6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800beaa:	b011      	add	sp, #68	; 0x44
 800beac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800beb0:	4642      	mov	r2, r8
 800beb2:	4653      	mov	r3, sl
 800beb4:	4640      	mov	r0, r8
 800beb6:	4651      	mov	r1, sl
 800beb8:	f7f4 fda8 	bl	8000a0c <__aeabi_dcmpun>
 800bebc:	b148      	cbz	r0, 800bed2 <_printf_float+0xe2>
 800bebe:	f1ba 0f00 	cmp.w	sl, #0
 800bec2:	bfb8      	it	lt
 800bec4:	232d      	movlt	r3, #45	; 0x2d
 800bec6:	4880      	ldr	r0, [pc, #512]	; (800c0c8 <_printf_float+0x2d8>)
 800bec8:	bfb8      	it	lt
 800beca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800bece:	4b7f      	ldr	r3, [pc, #508]	; (800c0cc <_printf_float+0x2dc>)
 800bed0:	e7d3      	b.n	800be7a <_printf_float+0x8a>
 800bed2:	6863      	ldr	r3, [r4, #4]
 800bed4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800bed8:	1c5a      	adds	r2, r3, #1
 800beda:	d142      	bne.n	800bf62 <_printf_float+0x172>
 800bedc:	2306      	movs	r3, #6
 800bede:	6063      	str	r3, [r4, #4]
 800bee0:	2200      	movs	r2, #0
 800bee2:	9206      	str	r2, [sp, #24]
 800bee4:	aa0e      	add	r2, sp, #56	; 0x38
 800bee6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800beea:	aa0d      	add	r2, sp, #52	; 0x34
 800beec:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800bef0:	9203      	str	r2, [sp, #12]
 800bef2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800bef6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800befa:	6023      	str	r3, [r4, #0]
 800befc:	6863      	ldr	r3, [r4, #4]
 800befe:	4642      	mov	r2, r8
 800bf00:	9300      	str	r3, [sp, #0]
 800bf02:	4628      	mov	r0, r5
 800bf04:	4653      	mov	r3, sl
 800bf06:	910b      	str	r1, [sp, #44]	; 0x2c
 800bf08:	f7ff fed4 	bl	800bcb4 <__cvt>
 800bf0c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bf0e:	4680      	mov	r8, r0
 800bf10:	2947      	cmp	r1, #71	; 0x47
 800bf12:	990d      	ldr	r1, [sp, #52]	; 0x34
 800bf14:	d108      	bne.n	800bf28 <_printf_float+0x138>
 800bf16:	1cc8      	adds	r0, r1, #3
 800bf18:	db02      	blt.n	800bf20 <_printf_float+0x130>
 800bf1a:	6863      	ldr	r3, [r4, #4]
 800bf1c:	4299      	cmp	r1, r3
 800bf1e:	dd40      	ble.n	800bfa2 <_printf_float+0x1b2>
 800bf20:	f1a9 0902 	sub.w	r9, r9, #2
 800bf24:	fa5f f989 	uxtb.w	r9, r9
 800bf28:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800bf2c:	d81f      	bhi.n	800bf6e <_printf_float+0x17e>
 800bf2e:	464a      	mov	r2, r9
 800bf30:	3901      	subs	r1, #1
 800bf32:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bf36:	910d      	str	r1, [sp, #52]	; 0x34
 800bf38:	f7ff ff1b 	bl	800bd72 <__exponent>
 800bf3c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bf3e:	4682      	mov	sl, r0
 800bf40:	1813      	adds	r3, r2, r0
 800bf42:	2a01      	cmp	r2, #1
 800bf44:	6123      	str	r3, [r4, #16]
 800bf46:	dc02      	bgt.n	800bf4e <_printf_float+0x15e>
 800bf48:	6822      	ldr	r2, [r4, #0]
 800bf4a:	07d2      	lsls	r2, r2, #31
 800bf4c:	d501      	bpl.n	800bf52 <_printf_float+0x162>
 800bf4e:	3301      	adds	r3, #1
 800bf50:	6123      	str	r3, [r4, #16]
 800bf52:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d09b      	beq.n	800be92 <_printf_float+0xa2>
 800bf5a:	232d      	movs	r3, #45	; 0x2d
 800bf5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf60:	e797      	b.n	800be92 <_printf_float+0xa2>
 800bf62:	2947      	cmp	r1, #71	; 0x47
 800bf64:	d1bc      	bne.n	800bee0 <_printf_float+0xf0>
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d1ba      	bne.n	800bee0 <_printf_float+0xf0>
 800bf6a:	2301      	movs	r3, #1
 800bf6c:	e7b7      	b.n	800bede <_printf_float+0xee>
 800bf6e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800bf72:	d118      	bne.n	800bfa6 <_printf_float+0x1b6>
 800bf74:	2900      	cmp	r1, #0
 800bf76:	6863      	ldr	r3, [r4, #4]
 800bf78:	dd0b      	ble.n	800bf92 <_printf_float+0x1a2>
 800bf7a:	6121      	str	r1, [r4, #16]
 800bf7c:	b913      	cbnz	r3, 800bf84 <_printf_float+0x194>
 800bf7e:	6822      	ldr	r2, [r4, #0]
 800bf80:	07d0      	lsls	r0, r2, #31
 800bf82:	d502      	bpl.n	800bf8a <_printf_float+0x19a>
 800bf84:	3301      	adds	r3, #1
 800bf86:	440b      	add	r3, r1
 800bf88:	6123      	str	r3, [r4, #16]
 800bf8a:	f04f 0a00 	mov.w	sl, #0
 800bf8e:	65a1      	str	r1, [r4, #88]	; 0x58
 800bf90:	e7df      	b.n	800bf52 <_printf_float+0x162>
 800bf92:	b913      	cbnz	r3, 800bf9a <_printf_float+0x1aa>
 800bf94:	6822      	ldr	r2, [r4, #0]
 800bf96:	07d2      	lsls	r2, r2, #31
 800bf98:	d501      	bpl.n	800bf9e <_printf_float+0x1ae>
 800bf9a:	3302      	adds	r3, #2
 800bf9c:	e7f4      	b.n	800bf88 <_printf_float+0x198>
 800bf9e:	2301      	movs	r3, #1
 800bfa0:	e7f2      	b.n	800bf88 <_printf_float+0x198>
 800bfa2:	f04f 0967 	mov.w	r9, #103	; 0x67
 800bfa6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bfa8:	4299      	cmp	r1, r3
 800bfaa:	db05      	blt.n	800bfb8 <_printf_float+0x1c8>
 800bfac:	6823      	ldr	r3, [r4, #0]
 800bfae:	6121      	str	r1, [r4, #16]
 800bfb0:	07d8      	lsls	r0, r3, #31
 800bfb2:	d5ea      	bpl.n	800bf8a <_printf_float+0x19a>
 800bfb4:	1c4b      	adds	r3, r1, #1
 800bfb6:	e7e7      	b.n	800bf88 <_printf_float+0x198>
 800bfb8:	2900      	cmp	r1, #0
 800bfba:	bfcc      	ite	gt
 800bfbc:	2201      	movgt	r2, #1
 800bfbe:	f1c1 0202 	rsble	r2, r1, #2
 800bfc2:	4413      	add	r3, r2
 800bfc4:	e7e0      	b.n	800bf88 <_printf_float+0x198>
 800bfc6:	6823      	ldr	r3, [r4, #0]
 800bfc8:	055a      	lsls	r2, r3, #21
 800bfca:	d407      	bmi.n	800bfdc <_printf_float+0x1ec>
 800bfcc:	6923      	ldr	r3, [r4, #16]
 800bfce:	4642      	mov	r2, r8
 800bfd0:	4631      	mov	r1, r6
 800bfd2:	4628      	mov	r0, r5
 800bfd4:	47b8      	blx	r7
 800bfd6:	3001      	adds	r0, #1
 800bfd8:	d12b      	bne.n	800c032 <_printf_float+0x242>
 800bfda:	e764      	b.n	800bea6 <_printf_float+0xb6>
 800bfdc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800bfe0:	f240 80dd 	bls.w	800c19e <_printf_float+0x3ae>
 800bfe4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bfe8:	2200      	movs	r2, #0
 800bfea:	2300      	movs	r3, #0
 800bfec:	f7f4 fcdc 	bl	80009a8 <__aeabi_dcmpeq>
 800bff0:	2800      	cmp	r0, #0
 800bff2:	d033      	beq.n	800c05c <_printf_float+0x26c>
 800bff4:	2301      	movs	r3, #1
 800bff6:	4631      	mov	r1, r6
 800bff8:	4628      	mov	r0, r5
 800bffa:	4a35      	ldr	r2, [pc, #212]	; (800c0d0 <_printf_float+0x2e0>)
 800bffc:	47b8      	blx	r7
 800bffe:	3001      	adds	r0, #1
 800c000:	f43f af51 	beq.w	800bea6 <_printf_float+0xb6>
 800c004:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800c008:	429a      	cmp	r2, r3
 800c00a:	db02      	blt.n	800c012 <_printf_float+0x222>
 800c00c:	6823      	ldr	r3, [r4, #0]
 800c00e:	07d8      	lsls	r0, r3, #31
 800c010:	d50f      	bpl.n	800c032 <_printf_float+0x242>
 800c012:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c016:	4631      	mov	r1, r6
 800c018:	4628      	mov	r0, r5
 800c01a:	47b8      	blx	r7
 800c01c:	3001      	adds	r0, #1
 800c01e:	f43f af42 	beq.w	800bea6 <_printf_float+0xb6>
 800c022:	f04f 0800 	mov.w	r8, #0
 800c026:	f104 091a 	add.w	r9, r4, #26
 800c02a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c02c:	3b01      	subs	r3, #1
 800c02e:	4543      	cmp	r3, r8
 800c030:	dc09      	bgt.n	800c046 <_printf_float+0x256>
 800c032:	6823      	ldr	r3, [r4, #0]
 800c034:	079b      	lsls	r3, r3, #30
 800c036:	f100 8102 	bmi.w	800c23e <_printf_float+0x44e>
 800c03a:	68e0      	ldr	r0, [r4, #12]
 800c03c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c03e:	4298      	cmp	r0, r3
 800c040:	bfb8      	it	lt
 800c042:	4618      	movlt	r0, r3
 800c044:	e731      	b.n	800beaa <_printf_float+0xba>
 800c046:	2301      	movs	r3, #1
 800c048:	464a      	mov	r2, r9
 800c04a:	4631      	mov	r1, r6
 800c04c:	4628      	mov	r0, r5
 800c04e:	47b8      	blx	r7
 800c050:	3001      	adds	r0, #1
 800c052:	f43f af28 	beq.w	800bea6 <_printf_float+0xb6>
 800c056:	f108 0801 	add.w	r8, r8, #1
 800c05a:	e7e6      	b.n	800c02a <_printf_float+0x23a>
 800c05c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c05e:	2b00      	cmp	r3, #0
 800c060:	dc38      	bgt.n	800c0d4 <_printf_float+0x2e4>
 800c062:	2301      	movs	r3, #1
 800c064:	4631      	mov	r1, r6
 800c066:	4628      	mov	r0, r5
 800c068:	4a19      	ldr	r2, [pc, #100]	; (800c0d0 <_printf_float+0x2e0>)
 800c06a:	47b8      	blx	r7
 800c06c:	3001      	adds	r0, #1
 800c06e:	f43f af1a 	beq.w	800bea6 <_printf_float+0xb6>
 800c072:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800c076:	4313      	orrs	r3, r2
 800c078:	d102      	bne.n	800c080 <_printf_float+0x290>
 800c07a:	6823      	ldr	r3, [r4, #0]
 800c07c:	07d9      	lsls	r1, r3, #31
 800c07e:	d5d8      	bpl.n	800c032 <_printf_float+0x242>
 800c080:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c084:	4631      	mov	r1, r6
 800c086:	4628      	mov	r0, r5
 800c088:	47b8      	blx	r7
 800c08a:	3001      	adds	r0, #1
 800c08c:	f43f af0b 	beq.w	800bea6 <_printf_float+0xb6>
 800c090:	f04f 0900 	mov.w	r9, #0
 800c094:	f104 0a1a 	add.w	sl, r4, #26
 800c098:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c09a:	425b      	negs	r3, r3
 800c09c:	454b      	cmp	r3, r9
 800c09e:	dc01      	bgt.n	800c0a4 <_printf_float+0x2b4>
 800c0a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c0a2:	e794      	b.n	800bfce <_printf_float+0x1de>
 800c0a4:	2301      	movs	r3, #1
 800c0a6:	4652      	mov	r2, sl
 800c0a8:	4631      	mov	r1, r6
 800c0aa:	4628      	mov	r0, r5
 800c0ac:	47b8      	blx	r7
 800c0ae:	3001      	adds	r0, #1
 800c0b0:	f43f aef9 	beq.w	800bea6 <_printf_float+0xb6>
 800c0b4:	f109 0901 	add.w	r9, r9, #1
 800c0b8:	e7ee      	b.n	800c098 <_printf_float+0x2a8>
 800c0ba:	bf00      	nop
 800c0bc:	7fefffff 	.word	0x7fefffff
 800c0c0:	0800f118 	.word	0x0800f118
 800c0c4:	0800f11c 	.word	0x0800f11c
 800c0c8:	0800f124 	.word	0x0800f124
 800c0cc:	0800f120 	.word	0x0800f120
 800c0d0:	0800f128 	.word	0x0800f128
 800c0d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c0d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c0d8:	429a      	cmp	r2, r3
 800c0da:	bfa8      	it	ge
 800c0dc:	461a      	movge	r2, r3
 800c0de:	2a00      	cmp	r2, #0
 800c0e0:	4691      	mov	r9, r2
 800c0e2:	dc37      	bgt.n	800c154 <_printf_float+0x364>
 800c0e4:	f04f 0b00 	mov.w	fp, #0
 800c0e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c0ec:	f104 021a 	add.w	r2, r4, #26
 800c0f0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800c0f4:	ebaa 0309 	sub.w	r3, sl, r9
 800c0f8:	455b      	cmp	r3, fp
 800c0fa:	dc33      	bgt.n	800c164 <_printf_float+0x374>
 800c0fc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800c100:	429a      	cmp	r2, r3
 800c102:	db3b      	blt.n	800c17c <_printf_float+0x38c>
 800c104:	6823      	ldr	r3, [r4, #0]
 800c106:	07da      	lsls	r2, r3, #31
 800c108:	d438      	bmi.n	800c17c <_printf_float+0x38c>
 800c10a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c10c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c10e:	eba2 030a 	sub.w	r3, r2, sl
 800c112:	eba2 0901 	sub.w	r9, r2, r1
 800c116:	4599      	cmp	r9, r3
 800c118:	bfa8      	it	ge
 800c11a:	4699      	movge	r9, r3
 800c11c:	f1b9 0f00 	cmp.w	r9, #0
 800c120:	dc34      	bgt.n	800c18c <_printf_float+0x39c>
 800c122:	f04f 0800 	mov.w	r8, #0
 800c126:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c12a:	f104 0a1a 	add.w	sl, r4, #26
 800c12e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800c132:	1a9b      	subs	r3, r3, r2
 800c134:	eba3 0309 	sub.w	r3, r3, r9
 800c138:	4543      	cmp	r3, r8
 800c13a:	f77f af7a 	ble.w	800c032 <_printf_float+0x242>
 800c13e:	2301      	movs	r3, #1
 800c140:	4652      	mov	r2, sl
 800c142:	4631      	mov	r1, r6
 800c144:	4628      	mov	r0, r5
 800c146:	47b8      	blx	r7
 800c148:	3001      	adds	r0, #1
 800c14a:	f43f aeac 	beq.w	800bea6 <_printf_float+0xb6>
 800c14e:	f108 0801 	add.w	r8, r8, #1
 800c152:	e7ec      	b.n	800c12e <_printf_float+0x33e>
 800c154:	4613      	mov	r3, r2
 800c156:	4631      	mov	r1, r6
 800c158:	4642      	mov	r2, r8
 800c15a:	4628      	mov	r0, r5
 800c15c:	47b8      	blx	r7
 800c15e:	3001      	adds	r0, #1
 800c160:	d1c0      	bne.n	800c0e4 <_printf_float+0x2f4>
 800c162:	e6a0      	b.n	800bea6 <_printf_float+0xb6>
 800c164:	2301      	movs	r3, #1
 800c166:	4631      	mov	r1, r6
 800c168:	4628      	mov	r0, r5
 800c16a:	920b      	str	r2, [sp, #44]	; 0x2c
 800c16c:	47b8      	blx	r7
 800c16e:	3001      	adds	r0, #1
 800c170:	f43f ae99 	beq.w	800bea6 <_printf_float+0xb6>
 800c174:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c176:	f10b 0b01 	add.w	fp, fp, #1
 800c17a:	e7b9      	b.n	800c0f0 <_printf_float+0x300>
 800c17c:	4631      	mov	r1, r6
 800c17e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c182:	4628      	mov	r0, r5
 800c184:	47b8      	blx	r7
 800c186:	3001      	adds	r0, #1
 800c188:	d1bf      	bne.n	800c10a <_printf_float+0x31a>
 800c18a:	e68c      	b.n	800bea6 <_printf_float+0xb6>
 800c18c:	464b      	mov	r3, r9
 800c18e:	4631      	mov	r1, r6
 800c190:	4628      	mov	r0, r5
 800c192:	eb08 020a 	add.w	r2, r8, sl
 800c196:	47b8      	blx	r7
 800c198:	3001      	adds	r0, #1
 800c19a:	d1c2      	bne.n	800c122 <_printf_float+0x332>
 800c19c:	e683      	b.n	800bea6 <_printf_float+0xb6>
 800c19e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c1a0:	2a01      	cmp	r2, #1
 800c1a2:	dc01      	bgt.n	800c1a8 <_printf_float+0x3b8>
 800c1a4:	07db      	lsls	r3, r3, #31
 800c1a6:	d537      	bpl.n	800c218 <_printf_float+0x428>
 800c1a8:	2301      	movs	r3, #1
 800c1aa:	4642      	mov	r2, r8
 800c1ac:	4631      	mov	r1, r6
 800c1ae:	4628      	mov	r0, r5
 800c1b0:	47b8      	blx	r7
 800c1b2:	3001      	adds	r0, #1
 800c1b4:	f43f ae77 	beq.w	800bea6 <_printf_float+0xb6>
 800c1b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c1bc:	4631      	mov	r1, r6
 800c1be:	4628      	mov	r0, r5
 800c1c0:	47b8      	blx	r7
 800c1c2:	3001      	adds	r0, #1
 800c1c4:	f43f ae6f 	beq.w	800bea6 <_printf_float+0xb6>
 800c1c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	f7f4 fbea 	bl	80009a8 <__aeabi_dcmpeq>
 800c1d4:	b9d8      	cbnz	r0, 800c20e <_printf_float+0x41e>
 800c1d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c1d8:	f108 0201 	add.w	r2, r8, #1
 800c1dc:	3b01      	subs	r3, #1
 800c1de:	4631      	mov	r1, r6
 800c1e0:	4628      	mov	r0, r5
 800c1e2:	47b8      	blx	r7
 800c1e4:	3001      	adds	r0, #1
 800c1e6:	d10e      	bne.n	800c206 <_printf_float+0x416>
 800c1e8:	e65d      	b.n	800bea6 <_printf_float+0xb6>
 800c1ea:	2301      	movs	r3, #1
 800c1ec:	464a      	mov	r2, r9
 800c1ee:	4631      	mov	r1, r6
 800c1f0:	4628      	mov	r0, r5
 800c1f2:	47b8      	blx	r7
 800c1f4:	3001      	adds	r0, #1
 800c1f6:	f43f ae56 	beq.w	800bea6 <_printf_float+0xb6>
 800c1fa:	f108 0801 	add.w	r8, r8, #1
 800c1fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c200:	3b01      	subs	r3, #1
 800c202:	4543      	cmp	r3, r8
 800c204:	dcf1      	bgt.n	800c1ea <_printf_float+0x3fa>
 800c206:	4653      	mov	r3, sl
 800c208:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c20c:	e6e0      	b.n	800bfd0 <_printf_float+0x1e0>
 800c20e:	f04f 0800 	mov.w	r8, #0
 800c212:	f104 091a 	add.w	r9, r4, #26
 800c216:	e7f2      	b.n	800c1fe <_printf_float+0x40e>
 800c218:	2301      	movs	r3, #1
 800c21a:	4642      	mov	r2, r8
 800c21c:	e7df      	b.n	800c1de <_printf_float+0x3ee>
 800c21e:	2301      	movs	r3, #1
 800c220:	464a      	mov	r2, r9
 800c222:	4631      	mov	r1, r6
 800c224:	4628      	mov	r0, r5
 800c226:	47b8      	blx	r7
 800c228:	3001      	adds	r0, #1
 800c22a:	f43f ae3c 	beq.w	800bea6 <_printf_float+0xb6>
 800c22e:	f108 0801 	add.w	r8, r8, #1
 800c232:	68e3      	ldr	r3, [r4, #12]
 800c234:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c236:	1a5b      	subs	r3, r3, r1
 800c238:	4543      	cmp	r3, r8
 800c23a:	dcf0      	bgt.n	800c21e <_printf_float+0x42e>
 800c23c:	e6fd      	b.n	800c03a <_printf_float+0x24a>
 800c23e:	f04f 0800 	mov.w	r8, #0
 800c242:	f104 0919 	add.w	r9, r4, #25
 800c246:	e7f4      	b.n	800c232 <_printf_float+0x442>

0800c248 <_printf_common>:
 800c248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c24c:	4616      	mov	r6, r2
 800c24e:	4699      	mov	r9, r3
 800c250:	688a      	ldr	r2, [r1, #8]
 800c252:	690b      	ldr	r3, [r1, #16]
 800c254:	4607      	mov	r7, r0
 800c256:	4293      	cmp	r3, r2
 800c258:	bfb8      	it	lt
 800c25a:	4613      	movlt	r3, r2
 800c25c:	6033      	str	r3, [r6, #0]
 800c25e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c262:	460c      	mov	r4, r1
 800c264:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c268:	b10a      	cbz	r2, 800c26e <_printf_common+0x26>
 800c26a:	3301      	adds	r3, #1
 800c26c:	6033      	str	r3, [r6, #0]
 800c26e:	6823      	ldr	r3, [r4, #0]
 800c270:	0699      	lsls	r1, r3, #26
 800c272:	bf42      	ittt	mi
 800c274:	6833      	ldrmi	r3, [r6, #0]
 800c276:	3302      	addmi	r3, #2
 800c278:	6033      	strmi	r3, [r6, #0]
 800c27a:	6825      	ldr	r5, [r4, #0]
 800c27c:	f015 0506 	ands.w	r5, r5, #6
 800c280:	d106      	bne.n	800c290 <_printf_common+0x48>
 800c282:	f104 0a19 	add.w	sl, r4, #25
 800c286:	68e3      	ldr	r3, [r4, #12]
 800c288:	6832      	ldr	r2, [r6, #0]
 800c28a:	1a9b      	subs	r3, r3, r2
 800c28c:	42ab      	cmp	r3, r5
 800c28e:	dc28      	bgt.n	800c2e2 <_printf_common+0x9a>
 800c290:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c294:	1e13      	subs	r3, r2, #0
 800c296:	6822      	ldr	r2, [r4, #0]
 800c298:	bf18      	it	ne
 800c29a:	2301      	movne	r3, #1
 800c29c:	0692      	lsls	r2, r2, #26
 800c29e:	d42d      	bmi.n	800c2fc <_printf_common+0xb4>
 800c2a0:	4649      	mov	r1, r9
 800c2a2:	4638      	mov	r0, r7
 800c2a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c2a8:	47c0      	blx	r8
 800c2aa:	3001      	adds	r0, #1
 800c2ac:	d020      	beq.n	800c2f0 <_printf_common+0xa8>
 800c2ae:	6823      	ldr	r3, [r4, #0]
 800c2b0:	68e5      	ldr	r5, [r4, #12]
 800c2b2:	f003 0306 	and.w	r3, r3, #6
 800c2b6:	2b04      	cmp	r3, #4
 800c2b8:	bf18      	it	ne
 800c2ba:	2500      	movne	r5, #0
 800c2bc:	6832      	ldr	r2, [r6, #0]
 800c2be:	f04f 0600 	mov.w	r6, #0
 800c2c2:	68a3      	ldr	r3, [r4, #8]
 800c2c4:	bf08      	it	eq
 800c2c6:	1aad      	subeq	r5, r5, r2
 800c2c8:	6922      	ldr	r2, [r4, #16]
 800c2ca:	bf08      	it	eq
 800c2cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c2d0:	4293      	cmp	r3, r2
 800c2d2:	bfc4      	itt	gt
 800c2d4:	1a9b      	subgt	r3, r3, r2
 800c2d6:	18ed      	addgt	r5, r5, r3
 800c2d8:	341a      	adds	r4, #26
 800c2da:	42b5      	cmp	r5, r6
 800c2dc:	d11a      	bne.n	800c314 <_printf_common+0xcc>
 800c2de:	2000      	movs	r0, #0
 800c2e0:	e008      	b.n	800c2f4 <_printf_common+0xac>
 800c2e2:	2301      	movs	r3, #1
 800c2e4:	4652      	mov	r2, sl
 800c2e6:	4649      	mov	r1, r9
 800c2e8:	4638      	mov	r0, r7
 800c2ea:	47c0      	blx	r8
 800c2ec:	3001      	adds	r0, #1
 800c2ee:	d103      	bne.n	800c2f8 <_printf_common+0xb0>
 800c2f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c2f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2f8:	3501      	adds	r5, #1
 800c2fa:	e7c4      	b.n	800c286 <_printf_common+0x3e>
 800c2fc:	2030      	movs	r0, #48	; 0x30
 800c2fe:	18e1      	adds	r1, r4, r3
 800c300:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c304:	1c5a      	adds	r2, r3, #1
 800c306:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c30a:	4422      	add	r2, r4
 800c30c:	3302      	adds	r3, #2
 800c30e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c312:	e7c5      	b.n	800c2a0 <_printf_common+0x58>
 800c314:	2301      	movs	r3, #1
 800c316:	4622      	mov	r2, r4
 800c318:	4649      	mov	r1, r9
 800c31a:	4638      	mov	r0, r7
 800c31c:	47c0      	blx	r8
 800c31e:	3001      	adds	r0, #1
 800c320:	d0e6      	beq.n	800c2f0 <_printf_common+0xa8>
 800c322:	3601      	adds	r6, #1
 800c324:	e7d9      	b.n	800c2da <_printf_common+0x92>
	...

0800c328 <_printf_i>:
 800c328:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c32c:	460c      	mov	r4, r1
 800c32e:	7e27      	ldrb	r7, [r4, #24]
 800c330:	4691      	mov	r9, r2
 800c332:	2f78      	cmp	r7, #120	; 0x78
 800c334:	4680      	mov	r8, r0
 800c336:	469a      	mov	sl, r3
 800c338:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c33a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c33e:	d807      	bhi.n	800c350 <_printf_i+0x28>
 800c340:	2f62      	cmp	r7, #98	; 0x62
 800c342:	d80a      	bhi.n	800c35a <_printf_i+0x32>
 800c344:	2f00      	cmp	r7, #0
 800c346:	f000 80d9 	beq.w	800c4fc <_printf_i+0x1d4>
 800c34a:	2f58      	cmp	r7, #88	; 0x58
 800c34c:	f000 80a4 	beq.w	800c498 <_printf_i+0x170>
 800c350:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c354:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c358:	e03a      	b.n	800c3d0 <_printf_i+0xa8>
 800c35a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c35e:	2b15      	cmp	r3, #21
 800c360:	d8f6      	bhi.n	800c350 <_printf_i+0x28>
 800c362:	a001      	add	r0, pc, #4	; (adr r0, 800c368 <_printf_i+0x40>)
 800c364:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c368:	0800c3c1 	.word	0x0800c3c1
 800c36c:	0800c3d5 	.word	0x0800c3d5
 800c370:	0800c351 	.word	0x0800c351
 800c374:	0800c351 	.word	0x0800c351
 800c378:	0800c351 	.word	0x0800c351
 800c37c:	0800c351 	.word	0x0800c351
 800c380:	0800c3d5 	.word	0x0800c3d5
 800c384:	0800c351 	.word	0x0800c351
 800c388:	0800c351 	.word	0x0800c351
 800c38c:	0800c351 	.word	0x0800c351
 800c390:	0800c351 	.word	0x0800c351
 800c394:	0800c4e3 	.word	0x0800c4e3
 800c398:	0800c405 	.word	0x0800c405
 800c39c:	0800c4c5 	.word	0x0800c4c5
 800c3a0:	0800c351 	.word	0x0800c351
 800c3a4:	0800c351 	.word	0x0800c351
 800c3a8:	0800c505 	.word	0x0800c505
 800c3ac:	0800c351 	.word	0x0800c351
 800c3b0:	0800c405 	.word	0x0800c405
 800c3b4:	0800c351 	.word	0x0800c351
 800c3b8:	0800c351 	.word	0x0800c351
 800c3bc:	0800c4cd 	.word	0x0800c4cd
 800c3c0:	680b      	ldr	r3, [r1, #0]
 800c3c2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c3c6:	1d1a      	adds	r2, r3, #4
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	600a      	str	r2, [r1, #0]
 800c3cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c3d0:	2301      	movs	r3, #1
 800c3d2:	e0a4      	b.n	800c51e <_printf_i+0x1f6>
 800c3d4:	6825      	ldr	r5, [r4, #0]
 800c3d6:	6808      	ldr	r0, [r1, #0]
 800c3d8:	062e      	lsls	r6, r5, #24
 800c3da:	f100 0304 	add.w	r3, r0, #4
 800c3de:	d50a      	bpl.n	800c3f6 <_printf_i+0xce>
 800c3e0:	6805      	ldr	r5, [r0, #0]
 800c3e2:	600b      	str	r3, [r1, #0]
 800c3e4:	2d00      	cmp	r5, #0
 800c3e6:	da03      	bge.n	800c3f0 <_printf_i+0xc8>
 800c3e8:	232d      	movs	r3, #45	; 0x2d
 800c3ea:	426d      	negs	r5, r5
 800c3ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c3f0:	230a      	movs	r3, #10
 800c3f2:	485e      	ldr	r0, [pc, #376]	; (800c56c <_printf_i+0x244>)
 800c3f4:	e019      	b.n	800c42a <_printf_i+0x102>
 800c3f6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c3fa:	6805      	ldr	r5, [r0, #0]
 800c3fc:	600b      	str	r3, [r1, #0]
 800c3fe:	bf18      	it	ne
 800c400:	b22d      	sxthne	r5, r5
 800c402:	e7ef      	b.n	800c3e4 <_printf_i+0xbc>
 800c404:	680b      	ldr	r3, [r1, #0]
 800c406:	6825      	ldr	r5, [r4, #0]
 800c408:	1d18      	adds	r0, r3, #4
 800c40a:	6008      	str	r0, [r1, #0]
 800c40c:	0628      	lsls	r0, r5, #24
 800c40e:	d501      	bpl.n	800c414 <_printf_i+0xec>
 800c410:	681d      	ldr	r5, [r3, #0]
 800c412:	e002      	b.n	800c41a <_printf_i+0xf2>
 800c414:	0669      	lsls	r1, r5, #25
 800c416:	d5fb      	bpl.n	800c410 <_printf_i+0xe8>
 800c418:	881d      	ldrh	r5, [r3, #0]
 800c41a:	2f6f      	cmp	r7, #111	; 0x6f
 800c41c:	bf0c      	ite	eq
 800c41e:	2308      	moveq	r3, #8
 800c420:	230a      	movne	r3, #10
 800c422:	4852      	ldr	r0, [pc, #328]	; (800c56c <_printf_i+0x244>)
 800c424:	2100      	movs	r1, #0
 800c426:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c42a:	6866      	ldr	r6, [r4, #4]
 800c42c:	2e00      	cmp	r6, #0
 800c42e:	bfa8      	it	ge
 800c430:	6821      	ldrge	r1, [r4, #0]
 800c432:	60a6      	str	r6, [r4, #8]
 800c434:	bfa4      	itt	ge
 800c436:	f021 0104 	bicge.w	r1, r1, #4
 800c43a:	6021      	strge	r1, [r4, #0]
 800c43c:	b90d      	cbnz	r5, 800c442 <_printf_i+0x11a>
 800c43e:	2e00      	cmp	r6, #0
 800c440:	d04d      	beq.n	800c4de <_printf_i+0x1b6>
 800c442:	4616      	mov	r6, r2
 800c444:	fbb5 f1f3 	udiv	r1, r5, r3
 800c448:	fb03 5711 	mls	r7, r3, r1, r5
 800c44c:	5dc7      	ldrb	r7, [r0, r7]
 800c44e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c452:	462f      	mov	r7, r5
 800c454:	42bb      	cmp	r3, r7
 800c456:	460d      	mov	r5, r1
 800c458:	d9f4      	bls.n	800c444 <_printf_i+0x11c>
 800c45a:	2b08      	cmp	r3, #8
 800c45c:	d10b      	bne.n	800c476 <_printf_i+0x14e>
 800c45e:	6823      	ldr	r3, [r4, #0]
 800c460:	07df      	lsls	r7, r3, #31
 800c462:	d508      	bpl.n	800c476 <_printf_i+0x14e>
 800c464:	6923      	ldr	r3, [r4, #16]
 800c466:	6861      	ldr	r1, [r4, #4]
 800c468:	4299      	cmp	r1, r3
 800c46a:	bfde      	ittt	le
 800c46c:	2330      	movle	r3, #48	; 0x30
 800c46e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c472:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800c476:	1b92      	subs	r2, r2, r6
 800c478:	6122      	str	r2, [r4, #16]
 800c47a:	464b      	mov	r3, r9
 800c47c:	4621      	mov	r1, r4
 800c47e:	4640      	mov	r0, r8
 800c480:	f8cd a000 	str.w	sl, [sp]
 800c484:	aa03      	add	r2, sp, #12
 800c486:	f7ff fedf 	bl	800c248 <_printf_common>
 800c48a:	3001      	adds	r0, #1
 800c48c:	d14c      	bne.n	800c528 <_printf_i+0x200>
 800c48e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c492:	b004      	add	sp, #16
 800c494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c498:	4834      	ldr	r0, [pc, #208]	; (800c56c <_printf_i+0x244>)
 800c49a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c49e:	680e      	ldr	r6, [r1, #0]
 800c4a0:	6823      	ldr	r3, [r4, #0]
 800c4a2:	f856 5b04 	ldr.w	r5, [r6], #4
 800c4a6:	061f      	lsls	r7, r3, #24
 800c4a8:	600e      	str	r6, [r1, #0]
 800c4aa:	d514      	bpl.n	800c4d6 <_printf_i+0x1ae>
 800c4ac:	07d9      	lsls	r1, r3, #31
 800c4ae:	bf44      	itt	mi
 800c4b0:	f043 0320 	orrmi.w	r3, r3, #32
 800c4b4:	6023      	strmi	r3, [r4, #0]
 800c4b6:	b91d      	cbnz	r5, 800c4c0 <_printf_i+0x198>
 800c4b8:	6823      	ldr	r3, [r4, #0]
 800c4ba:	f023 0320 	bic.w	r3, r3, #32
 800c4be:	6023      	str	r3, [r4, #0]
 800c4c0:	2310      	movs	r3, #16
 800c4c2:	e7af      	b.n	800c424 <_printf_i+0xfc>
 800c4c4:	6823      	ldr	r3, [r4, #0]
 800c4c6:	f043 0320 	orr.w	r3, r3, #32
 800c4ca:	6023      	str	r3, [r4, #0]
 800c4cc:	2378      	movs	r3, #120	; 0x78
 800c4ce:	4828      	ldr	r0, [pc, #160]	; (800c570 <_printf_i+0x248>)
 800c4d0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c4d4:	e7e3      	b.n	800c49e <_printf_i+0x176>
 800c4d6:	065e      	lsls	r6, r3, #25
 800c4d8:	bf48      	it	mi
 800c4da:	b2ad      	uxthmi	r5, r5
 800c4dc:	e7e6      	b.n	800c4ac <_printf_i+0x184>
 800c4de:	4616      	mov	r6, r2
 800c4e0:	e7bb      	b.n	800c45a <_printf_i+0x132>
 800c4e2:	680b      	ldr	r3, [r1, #0]
 800c4e4:	6826      	ldr	r6, [r4, #0]
 800c4e6:	1d1d      	adds	r5, r3, #4
 800c4e8:	6960      	ldr	r0, [r4, #20]
 800c4ea:	600d      	str	r5, [r1, #0]
 800c4ec:	0635      	lsls	r5, r6, #24
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	d501      	bpl.n	800c4f6 <_printf_i+0x1ce>
 800c4f2:	6018      	str	r0, [r3, #0]
 800c4f4:	e002      	b.n	800c4fc <_printf_i+0x1d4>
 800c4f6:	0671      	lsls	r1, r6, #25
 800c4f8:	d5fb      	bpl.n	800c4f2 <_printf_i+0x1ca>
 800c4fa:	8018      	strh	r0, [r3, #0]
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	4616      	mov	r6, r2
 800c500:	6123      	str	r3, [r4, #16]
 800c502:	e7ba      	b.n	800c47a <_printf_i+0x152>
 800c504:	680b      	ldr	r3, [r1, #0]
 800c506:	1d1a      	adds	r2, r3, #4
 800c508:	600a      	str	r2, [r1, #0]
 800c50a:	681e      	ldr	r6, [r3, #0]
 800c50c:	2100      	movs	r1, #0
 800c50e:	4630      	mov	r0, r6
 800c510:	6862      	ldr	r2, [r4, #4]
 800c512:	f000 fed7 	bl	800d2c4 <memchr>
 800c516:	b108      	cbz	r0, 800c51c <_printf_i+0x1f4>
 800c518:	1b80      	subs	r0, r0, r6
 800c51a:	6060      	str	r0, [r4, #4]
 800c51c:	6863      	ldr	r3, [r4, #4]
 800c51e:	6123      	str	r3, [r4, #16]
 800c520:	2300      	movs	r3, #0
 800c522:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c526:	e7a8      	b.n	800c47a <_printf_i+0x152>
 800c528:	4632      	mov	r2, r6
 800c52a:	4649      	mov	r1, r9
 800c52c:	4640      	mov	r0, r8
 800c52e:	6923      	ldr	r3, [r4, #16]
 800c530:	47d0      	blx	sl
 800c532:	3001      	adds	r0, #1
 800c534:	d0ab      	beq.n	800c48e <_printf_i+0x166>
 800c536:	6823      	ldr	r3, [r4, #0]
 800c538:	079b      	lsls	r3, r3, #30
 800c53a:	d413      	bmi.n	800c564 <_printf_i+0x23c>
 800c53c:	68e0      	ldr	r0, [r4, #12]
 800c53e:	9b03      	ldr	r3, [sp, #12]
 800c540:	4298      	cmp	r0, r3
 800c542:	bfb8      	it	lt
 800c544:	4618      	movlt	r0, r3
 800c546:	e7a4      	b.n	800c492 <_printf_i+0x16a>
 800c548:	2301      	movs	r3, #1
 800c54a:	4632      	mov	r2, r6
 800c54c:	4649      	mov	r1, r9
 800c54e:	4640      	mov	r0, r8
 800c550:	47d0      	blx	sl
 800c552:	3001      	adds	r0, #1
 800c554:	d09b      	beq.n	800c48e <_printf_i+0x166>
 800c556:	3501      	adds	r5, #1
 800c558:	68e3      	ldr	r3, [r4, #12]
 800c55a:	9903      	ldr	r1, [sp, #12]
 800c55c:	1a5b      	subs	r3, r3, r1
 800c55e:	42ab      	cmp	r3, r5
 800c560:	dcf2      	bgt.n	800c548 <_printf_i+0x220>
 800c562:	e7eb      	b.n	800c53c <_printf_i+0x214>
 800c564:	2500      	movs	r5, #0
 800c566:	f104 0619 	add.w	r6, r4, #25
 800c56a:	e7f5      	b.n	800c558 <_printf_i+0x230>
 800c56c:	0800f12a 	.word	0x0800f12a
 800c570:	0800f13b 	.word	0x0800f13b

0800c574 <siprintf>:
 800c574:	b40e      	push	{r1, r2, r3}
 800c576:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c57a:	b500      	push	{lr}
 800c57c:	b09c      	sub	sp, #112	; 0x70
 800c57e:	ab1d      	add	r3, sp, #116	; 0x74
 800c580:	9002      	str	r0, [sp, #8]
 800c582:	9006      	str	r0, [sp, #24]
 800c584:	9107      	str	r1, [sp, #28]
 800c586:	9104      	str	r1, [sp, #16]
 800c588:	4808      	ldr	r0, [pc, #32]	; (800c5ac <siprintf+0x38>)
 800c58a:	4909      	ldr	r1, [pc, #36]	; (800c5b0 <siprintf+0x3c>)
 800c58c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c590:	9105      	str	r1, [sp, #20]
 800c592:	6800      	ldr	r0, [r0, #0]
 800c594:	a902      	add	r1, sp, #8
 800c596:	9301      	str	r3, [sp, #4]
 800c598:	f001 fb42 	bl	800dc20 <_svfiprintf_r>
 800c59c:	2200      	movs	r2, #0
 800c59e:	9b02      	ldr	r3, [sp, #8]
 800c5a0:	701a      	strb	r2, [r3, #0]
 800c5a2:	b01c      	add	sp, #112	; 0x70
 800c5a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c5a8:	b003      	add	sp, #12
 800c5aa:	4770      	bx	lr
 800c5ac:	200001f8 	.word	0x200001f8
 800c5b0:	ffff0208 	.word	0xffff0208

0800c5b4 <quorem>:
 800c5b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5b8:	6903      	ldr	r3, [r0, #16]
 800c5ba:	690c      	ldr	r4, [r1, #16]
 800c5bc:	4607      	mov	r7, r0
 800c5be:	42a3      	cmp	r3, r4
 800c5c0:	f2c0 8083 	blt.w	800c6ca <quorem+0x116>
 800c5c4:	3c01      	subs	r4, #1
 800c5c6:	f100 0514 	add.w	r5, r0, #20
 800c5ca:	f101 0814 	add.w	r8, r1, #20
 800c5ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c5d2:	9301      	str	r3, [sp, #4]
 800c5d4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c5d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c5dc:	3301      	adds	r3, #1
 800c5de:	429a      	cmp	r2, r3
 800c5e0:	fbb2 f6f3 	udiv	r6, r2, r3
 800c5e4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c5e8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c5ec:	d332      	bcc.n	800c654 <quorem+0xa0>
 800c5ee:	f04f 0e00 	mov.w	lr, #0
 800c5f2:	4640      	mov	r0, r8
 800c5f4:	46ac      	mov	ip, r5
 800c5f6:	46f2      	mov	sl, lr
 800c5f8:	f850 2b04 	ldr.w	r2, [r0], #4
 800c5fc:	b293      	uxth	r3, r2
 800c5fe:	fb06 e303 	mla	r3, r6, r3, lr
 800c602:	0c12      	lsrs	r2, r2, #16
 800c604:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c608:	fb06 e202 	mla	r2, r6, r2, lr
 800c60c:	b29b      	uxth	r3, r3
 800c60e:	ebaa 0303 	sub.w	r3, sl, r3
 800c612:	f8dc a000 	ldr.w	sl, [ip]
 800c616:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c61a:	fa1f fa8a 	uxth.w	sl, sl
 800c61e:	4453      	add	r3, sl
 800c620:	fa1f fa82 	uxth.w	sl, r2
 800c624:	f8dc 2000 	ldr.w	r2, [ip]
 800c628:	4581      	cmp	r9, r0
 800c62a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800c62e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c632:	b29b      	uxth	r3, r3
 800c634:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c638:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c63c:	f84c 3b04 	str.w	r3, [ip], #4
 800c640:	d2da      	bcs.n	800c5f8 <quorem+0x44>
 800c642:	f855 300b 	ldr.w	r3, [r5, fp]
 800c646:	b92b      	cbnz	r3, 800c654 <quorem+0xa0>
 800c648:	9b01      	ldr	r3, [sp, #4]
 800c64a:	3b04      	subs	r3, #4
 800c64c:	429d      	cmp	r5, r3
 800c64e:	461a      	mov	r2, r3
 800c650:	d32f      	bcc.n	800c6b2 <quorem+0xfe>
 800c652:	613c      	str	r4, [r7, #16]
 800c654:	4638      	mov	r0, r7
 800c656:	f001 f8cb 	bl	800d7f0 <__mcmp>
 800c65a:	2800      	cmp	r0, #0
 800c65c:	db25      	blt.n	800c6aa <quorem+0xf6>
 800c65e:	4628      	mov	r0, r5
 800c660:	f04f 0c00 	mov.w	ip, #0
 800c664:	3601      	adds	r6, #1
 800c666:	f858 1b04 	ldr.w	r1, [r8], #4
 800c66a:	f8d0 e000 	ldr.w	lr, [r0]
 800c66e:	b28b      	uxth	r3, r1
 800c670:	ebac 0303 	sub.w	r3, ip, r3
 800c674:	fa1f f28e 	uxth.w	r2, lr
 800c678:	4413      	add	r3, r2
 800c67a:	0c0a      	lsrs	r2, r1, #16
 800c67c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c680:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c684:	b29b      	uxth	r3, r3
 800c686:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c68a:	45c1      	cmp	r9, r8
 800c68c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c690:	f840 3b04 	str.w	r3, [r0], #4
 800c694:	d2e7      	bcs.n	800c666 <quorem+0xb2>
 800c696:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c69a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c69e:	b922      	cbnz	r2, 800c6aa <quorem+0xf6>
 800c6a0:	3b04      	subs	r3, #4
 800c6a2:	429d      	cmp	r5, r3
 800c6a4:	461a      	mov	r2, r3
 800c6a6:	d30a      	bcc.n	800c6be <quorem+0x10a>
 800c6a8:	613c      	str	r4, [r7, #16]
 800c6aa:	4630      	mov	r0, r6
 800c6ac:	b003      	add	sp, #12
 800c6ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6b2:	6812      	ldr	r2, [r2, #0]
 800c6b4:	3b04      	subs	r3, #4
 800c6b6:	2a00      	cmp	r2, #0
 800c6b8:	d1cb      	bne.n	800c652 <quorem+0x9e>
 800c6ba:	3c01      	subs	r4, #1
 800c6bc:	e7c6      	b.n	800c64c <quorem+0x98>
 800c6be:	6812      	ldr	r2, [r2, #0]
 800c6c0:	3b04      	subs	r3, #4
 800c6c2:	2a00      	cmp	r2, #0
 800c6c4:	d1f0      	bne.n	800c6a8 <quorem+0xf4>
 800c6c6:	3c01      	subs	r4, #1
 800c6c8:	e7eb      	b.n	800c6a2 <quorem+0xee>
 800c6ca:	2000      	movs	r0, #0
 800c6cc:	e7ee      	b.n	800c6ac <quorem+0xf8>
	...

0800c6d0 <_dtoa_r>:
 800c6d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6d4:	4616      	mov	r6, r2
 800c6d6:	461f      	mov	r7, r3
 800c6d8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800c6da:	b099      	sub	sp, #100	; 0x64
 800c6dc:	4605      	mov	r5, r0
 800c6de:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800c6e2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800c6e6:	b974      	cbnz	r4, 800c706 <_dtoa_r+0x36>
 800c6e8:	2010      	movs	r0, #16
 800c6ea:	f000 fde3 	bl	800d2b4 <malloc>
 800c6ee:	4602      	mov	r2, r0
 800c6f0:	6268      	str	r0, [r5, #36]	; 0x24
 800c6f2:	b920      	cbnz	r0, 800c6fe <_dtoa_r+0x2e>
 800c6f4:	21ea      	movs	r1, #234	; 0xea
 800c6f6:	4bae      	ldr	r3, [pc, #696]	; (800c9b0 <_dtoa_r+0x2e0>)
 800c6f8:	48ae      	ldr	r0, [pc, #696]	; (800c9b4 <_dtoa_r+0x2e4>)
 800c6fa:	f001 fba1 	bl	800de40 <__assert_func>
 800c6fe:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c702:	6004      	str	r4, [r0, #0]
 800c704:	60c4      	str	r4, [r0, #12]
 800c706:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c708:	6819      	ldr	r1, [r3, #0]
 800c70a:	b151      	cbz	r1, 800c722 <_dtoa_r+0x52>
 800c70c:	685a      	ldr	r2, [r3, #4]
 800c70e:	2301      	movs	r3, #1
 800c710:	4093      	lsls	r3, r2
 800c712:	604a      	str	r2, [r1, #4]
 800c714:	608b      	str	r3, [r1, #8]
 800c716:	4628      	mov	r0, r5
 800c718:	f000 fe30 	bl	800d37c <_Bfree>
 800c71c:	2200      	movs	r2, #0
 800c71e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c720:	601a      	str	r2, [r3, #0]
 800c722:	1e3b      	subs	r3, r7, #0
 800c724:	bfaf      	iteee	ge
 800c726:	2300      	movge	r3, #0
 800c728:	2201      	movlt	r2, #1
 800c72a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c72e:	9305      	strlt	r3, [sp, #20]
 800c730:	bfa8      	it	ge
 800c732:	f8c8 3000 	strge.w	r3, [r8]
 800c736:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800c73a:	4b9f      	ldr	r3, [pc, #636]	; (800c9b8 <_dtoa_r+0x2e8>)
 800c73c:	bfb8      	it	lt
 800c73e:	f8c8 2000 	strlt.w	r2, [r8]
 800c742:	ea33 0309 	bics.w	r3, r3, r9
 800c746:	d119      	bne.n	800c77c <_dtoa_r+0xac>
 800c748:	f242 730f 	movw	r3, #9999	; 0x270f
 800c74c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c74e:	6013      	str	r3, [r2, #0]
 800c750:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c754:	4333      	orrs	r3, r6
 800c756:	f000 8580 	beq.w	800d25a <_dtoa_r+0xb8a>
 800c75a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c75c:	b953      	cbnz	r3, 800c774 <_dtoa_r+0xa4>
 800c75e:	4b97      	ldr	r3, [pc, #604]	; (800c9bc <_dtoa_r+0x2ec>)
 800c760:	e022      	b.n	800c7a8 <_dtoa_r+0xd8>
 800c762:	4b97      	ldr	r3, [pc, #604]	; (800c9c0 <_dtoa_r+0x2f0>)
 800c764:	9308      	str	r3, [sp, #32]
 800c766:	3308      	adds	r3, #8
 800c768:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800c76a:	6013      	str	r3, [r2, #0]
 800c76c:	9808      	ldr	r0, [sp, #32]
 800c76e:	b019      	add	sp, #100	; 0x64
 800c770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c774:	4b91      	ldr	r3, [pc, #580]	; (800c9bc <_dtoa_r+0x2ec>)
 800c776:	9308      	str	r3, [sp, #32]
 800c778:	3303      	adds	r3, #3
 800c77a:	e7f5      	b.n	800c768 <_dtoa_r+0x98>
 800c77c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800c780:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800c784:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c788:	2200      	movs	r2, #0
 800c78a:	2300      	movs	r3, #0
 800c78c:	f7f4 f90c 	bl	80009a8 <__aeabi_dcmpeq>
 800c790:	4680      	mov	r8, r0
 800c792:	b158      	cbz	r0, 800c7ac <_dtoa_r+0xdc>
 800c794:	2301      	movs	r3, #1
 800c796:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c798:	6013      	str	r3, [r2, #0]
 800c79a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	f000 8559 	beq.w	800d254 <_dtoa_r+0xb84>
 800c7a2:	4888      	ldr	r0, [pc, #544]	; (800c9c4 <_dtoa_r+0x2f4>)
 800c7a4:	6018      	str	r0, [r3, #0]
 800c7a6:	1e43      	subs	r3, r0, #1
 800c7a8:	9308      	str	r3, [sp, #32]
 800c7aa:	e7df      	b.n	800c76c <_dtoa_r+0x9c>
 800c7ac:	ab16      	add	r3, sp, #88	; 0x58
 800c7ae:	9301      	str	r3, [sp, #4]
 800c7b0:	ab17      	add	r3, sp, #92	; 0x5c
 800c7b2:	9300      	str	r3, [sp, #0]
 800c7b4:	4628      	mov	r0, r5
 800c7b6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c7ba:	f001 f8c5 	bl	800d948 <__d2b>
 800c7be:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800c7c2:	4682      	mov	sl, r0
 800c7c4:	2c00      	cmp	r4, #0
 800c7c6:	d07e      	beq.n	800c8c6 <_dtoa_r+0x1f6>
 800c7c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c7cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c7ce:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800c7d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c7d6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800c7da:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800c7de:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800c7e2:	2200      	movs	r2, #0
 800c7e4:	4b78      	ldr	r3, [pc, #480]	; (800c9c8 <_dtoa_r+0x2f8>)
 800c7e6:	f7f3 fcbf 	bl	8000168 <__aeabi_dsub>
 800c7ea:	a36b      	add	r3, pc, #428	; (adr r3, 800c998 <_dtoa_r+0x2c8>)
 800c7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7f0:	f7f3 fe72 	bl	80004d8 <__aeabi_dmul>
 800c7f4:	a36a      	add	r3, pc, #424	; (adr r3, 800c9a0 <_dtoa_r+0x2d0>)
 800c7f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7fa:	f7f3 fcb7 	bl	800016c <__adddf3>
 800c7fe:	4606      	mov	r6, r0
 800c800:	4620      	mov	r0, r4
 800c802:	460f      	mov	r7, r1
 800c804:	f7f3 fdfe 	bl	8000404 <__aeabi_i2d>
 800c808:	a367      	add	r3, pc, #412	; (adr r3, 800c9a8 <_dtoa_r+0x2d8>)
 800c80a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c80e:	f7f3 fe63 	bl	80004d8 <__aeabi_dmul>
 800c812:	4602      	mov	r2, r0
 800c814:	460b      	mov	r3, r1
 800c816:	4630      	mov	r0, r6
 800c818:	4639      	mov	r1, r7
 800c81a:	f7f3 fca7 	bl	800016c <__adddf3>
 800c81e:	4606      	mov	r6, r0
 800c820:	460f      	mov	r7, r1
 800c822:	f7f4 f909 	bl	8000a38 <__aeabi_d2iz>
 800c826:	2200      	movs	r2, #0
 800c828:	4681      	mov	r9, r0
 800c82a:	2300      	movs	r3, #0
 800c82c:	4630      	mov	r0, r6
 800c82e:	4639      	mov	r1, r7
 800c830:	f7f4 f8c4 	bl	80009bc <__aeabi_dcmplt>
 800c834:	b148      	cbz	r0, 800c84a <_dtoa_r+0x17a>
 800c836:	4648      	mov	r0, r9
 800c838:	f7f3 fde4 	bl	8000404 <__aeabi_i2d>
 800c83c:	4632      	mov	r2, r6
 800c83e:	463b      	mov	r3, r7
 800c840:	f7f4 f8b2 	bl	80009a8 <__aeabi_dcmpeq>
 800c844:	b908      	cbnz	r0, 800c84a <_dtoa_r+0x17a>
 800c846:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800c84a:	f1b9 0f16 	cmp.w	r9, #22
 800c84e:	d857      	bhi.n	800c900 <_dtoa_r+0x230>
 800c850:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c854:	4b5d      	ldr	r3, [pc, #372]	; (800c9cc <_dtoa_r+0x2fc>)
 800c856:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800c85a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c85e:	f7f4 f8ad 	bl	80009bc <__aeabi_dcmplt>
 800c862:	2800      	cmp	r0, #0
 800c864:	d04e      	beq.n	800c904 <_dtoa_r+0x234>
 800c866:	2300      	movs	r3, #0
 800c868:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800c86c:	930f      	str	r3, [sp, #60]	; 0x3c
 800c86e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c870:	1b1c      	subs	r4, r3, r4
 800c872:	1e63      	subs	r3, r4, #1
 800c874:	9309      	str	r3, [sp, #36]	; 0x24
 800c876:	bf49      	itett	mi
 800c878:	f1c4 0301 	rsbmi	r3, r4, #1
 800c87c:	2300      	movpl	r3, #0
 800c87e:	9306      	strmi	r3, [sp, #24]
 800c880:	2300      	movmi	r3, #0
 800c882:	bf54      	ite	pl
 800c884:	9306      	strpl	r3, [sp, #24]
 800c886:	9309      	strmi	r3, [sp, #36]	; 0x24
 800c888:	f1b9 0f00 	cmp.w	r9, #0
 800c88c:	db3c      	blt.n	800c908 <_dtoa_r+0x238>
 800c88e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c890:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800c894:	444b      	add	r3, r9
 800c896:	9309      	str	r3, [sp, #36]	; 0x24
 800c898:	2300      	movs	r3, #0
 800c89a:	930a      	str	r3, [sp, #40]	; 0x28
 800c89c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c89e:	2b09      	cmp	r3, #9
 800c8a0:	d86c      	bhi.n	800c97c <_dtoa_r+0x2ac>
 800c8a2:	2b05      	cmp	r3, #5
 800c8a4:	bfc4      	itt	gt
 800c8a6:	3b04      	subgt	r3, #4
 800c8a8:	9322      	strgt	r3, [sp, #136]	; 0x88
 800c8aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c8ac:	bfc8      	it	gt
 800c8ae:	2400      	movgt	r4, #0
 800c8b0:	f1a3 0302 	sub.w	r3, r3, #2
 800c8b4:	bfd8      	it	le
 800c8b6:	2401      	movle	r4, #1
 800c8b8:	2b03      	cmp	r3, #3
 800c8ba:	f200 808b 	bhi.w	800c9d4 <_dtoa_r+0x304>
 800c8be:	e8df f003 	tbb	[pc, r3]
 800c8c2:	4f2d      	.short	0x4f2d
 800c8c4:	5b4d      	.short	0x5b4d
 800c8c6:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800c8ca:	441c      	add	r4, r3
 800c8cc:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800c8d0:	2b20      	cmp	r3, #32
 800c8d2:	bfc3      	ittte	gt
 800c8d4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c8d8:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800c8dc:	fa09 f303 	lslgt.w	r3, r9, r3
 800c8e0:	f1c3 0320 	rsble	r3, r3, #32
 800c8e4:	bfc6      	itte	gt
 800c8e6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c8ea:	4318      	orrgt	r0, r3
 800c8ec:	fa06 f003 	lslle.w	r0, r6, r3
 800c8f0:	f7f3 fd78 	bl	80003e4 <__aeabi_ui2d>
 800c8f4:	2301      	movs	r3, #1
 800c8f6:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800c8fa:	3c01      	subs	r4, #1
 800c8fc:	9313      	str	r3, [sp, #76]	; 0x4c
 800c8fe:	e770      	b.n	800c7e2 <_dtoa_r+0x112>
 800c900:	2301      	movs	r3, #1
 800c902:	e7b3      	b.n	800c86c <_dtoa_r+0x19c>
 800c904:	900f      	str	r0, [sp, #60]	; 0x3c
 800c906:	e7b2      	b.n	800c86e <_dtoa_r+0x19e>
 800c908:	9b06      	ldr	r3, [sp, #24]
 800c90a:	eba3 0309 	sub.w	r3, r3, r9
 800c90e:	9306      	str	r3, [sp, #24]
 800c910:	f1c9 0300 	rsb	r3, r9, #0
 800c914:	930a      	str	r3, [sp, #40]	; 0x28
 800c916:	2300      	movs	r3, #0
 800c918:	930e      	str	r3, [sp, #56]	; 0x38
 800c91a:	e7bf      	b.n	800c89c <_dtoa_r+0x1cc>
 800c91c:	2300      	movs	r3, #0
 800c91e:	930b      	str	r3, [sp, #44]	; 0x2c
 800c920:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c922:	2b00      	cmp	r3, #0
 800c924:	dc59      	bgt.n	800c9da <_dtoa_r+0x30a>
 800c926:	f04f 0b01 	mov.w	fp, #1
 800c92a:	465b      	mov	r3, fp
 800c92c:	f8cd b008 	str.w	fp, [sp, #8]
 800c930:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800c934:	2200      	movs	r2, #0
 800c936:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800c938:	6042      	str	r2, [r0, #4]
 800c93a:	2204      	movs	r2, #4
 800c93c:	f102 0614 	add.w	r6, r2, #20
 800c940:	429e      	cmp	r6, r3
 800c942:	6841      	ldr	r1, [r0, #4]
 800c944:	d94f      	bls.n	800c9e6 <_dtoa_r+0x316>
 800c946:	4628      	mov	r0, r5
 800c948:	f000 fcd8 	bl	800d2fc <_Balloc>
 800c94c:	9008      	str	r0, [sp, #32]
 800c94e:	2800      	cmp	r0, #0
 800c950:	d14d      	bne.n	800c9ee <_dtoa_r+0x31e>
 800c952:	4602      	mov	r2, r0
 800c954:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c958:	4b1d      	ldr	r3, [pc, #116]	; (800c9d0 <_dtoa_r+0x300>)
 800c95a:	e6cd      	b.n	800c6f8 <_dtoa_r+0x28>
 800c95c:	2301      	movs	r3, #1
 800c95e:	e7de      	b.n	800c91e <_dtoa_r+0x24e>
 800c960:	2300      	movs	r3, #0
 800c962:	930b      	str	r3, [sp, #44]	; 0x2c
 800c964:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c966:	eb09 0b03 	add.w	fp, r9, r3
 800c96a:	f10b 0301 	add.w	r3, fp, #1
 800c96e:	2b01      	cmp	r3, #1
 800c970:	9302      	str	r3, [sp, #8]
 800c972:	bfb8      	it	lt
 800c974:	2301      	movlt	r3, #1
 800c976:	e7dd      	b.n	800c934 <_dtoa_r+0x264>
 800c978:	2301      	movs	r3, #1
 800c97a:	e7f2      	b.n	800c962 <_dtoa_r+0x292>
 800c97c:	2401      	movs	r4, #1
 800c97e:	2300      	movs	r3, #0
 800c980:	940b      	str	r4, [sp, #44]	; 0x2c
 800c982:	9322      	str	r3, [sp, #136]	; 0x88
 800c984:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800c988:	2200      	movs	r2, #0
 800c98a:	2312      	movs	r3, #18
 800c98c:	f8cd b008 	str.w	fp, [sp, #8]
 800c990:	9223      	str	r2, [sp, #140]	; 0x8c
 800c992:	e7cf      	b.n	800c934 <_dtoa_r+0x264>
 800c994:	f3af 8000 	nop.w
 800c998:	636f4361 	.word	0x636f4361
 800c99c:	3fd287a7 	.word	0x3fd287a7
 800c9a0:	8b60c8b3 	.word	0x8b60c8b3
 800c9a4:	3fc68a28 	.word	0x3fc68a28
 800c9a8:	509f79fb 	.word	0x509f79fb
 800c9ac:	3fd34413 	.word	0x3fd34413
 800c9b0:	0800f159 	.word	0x0800f159
 800c9b4:	0800f170 	.word	0x0800f170
 800c9b8:	7ff00000 	.word	0x7ff00000
 800c9bc:	0800f155 	.word	0x0800f155
 800c9c0:	0800f14c 	.word	0x0800f14c
 800c9c4:	0800f129 	.word	0x0800f129
 800c9c8:	3ff80000 	.word	0x3ff80000
 800c9cc:	0800f268 	.word	0x0800f268
 800c9d0:	0800f1cf 	.word	0x0800f1cf
 800c9d4:	2301      	movs	r3, #1
 800c9d6:	930b      	str	r3, [sp, #44]	; 0x2c
 800c9d8:	e7d4      	b.n	800c984 <_dtoa_r+0x2b4>
 800c9da:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800c9de:	465b      	mov	r3, fp
 800c9e0:	f8cd b008 	str.w	fp, [sp, #8]
 800c9e4:	e7a6      	b.n	800c934 <_dtoa_r+0x264>
 800c9e6:	3101      	adds	r1, #1
 800c9e8:	6041      	str	r1, [r0, #4]
 800c9ea:	0052      	lsls	r2, r2, #1
 800c9ec:	e7a6      	b.n	800c93c <_dtoa_r+0x26c>
 800c9ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c9f0:	9a08      	ldr	r2, [sp, #32]
 800c9f2:	601a      	str	r2, [r3, #0]
 800c9f4:	9b02      	ldr	r3, [sp, #8]
 800c9f6:	2b0e      	cmp	r3, #14
 800c9f8:	f200 80a8 	bhi.w	800cb4c <_dtoa_r+0x47c>
 800c9fc:	2c00      	cmp	r4, #0
 800c9fe:	f000 80a5 	beq.w	800cb4c <_dtoa_r+0x47c>
 800ca02:	f1b9 0f00 	cmp.w	r9, #0
 800ca06:	dd34      	ble.n	800ca72 <_dtoa_r+0x3a2>
 800ca08:	4a9a      	ldr	r2, [pc, #616]	; (800cc74 <_dtoa_r+0x5a4>)
 800ca0a:	f009 030f 	and.w	r3, r9, #15
 800ca0e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ca12:	f419 7f80 	tst.w	r9, #256	; 0x100
 800ca16:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ca1a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800ca1e:	ea4f 1429 	mov.w	r4, r9, asr #4
 800ca22:	d016      	beq.n	800ca52 <_dtoa_r+0x382>
 800ca24:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ca28:	4b93      	ldr	r3, [pc, #588]	; (800cc78 <_dtoa_r+0x5a8>)
 800ca2a:	2703      	movs	r7, #3
 800ca2c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ca30:	f7f3 fe7c 	bl	800072c <__aeabi_ddiv>
 800ca34:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ca38:	f004 040f 	and.w	r4, r4, #15
 800ca3c:	4e8e      	ldr	r6, [pc, #568]	; (800cc78 <_dtoa_r+0x5a8>)
 800ca3e:	b954      	cbnz	r4, 800ca56 <_dtoa_r+0x386>
 800ca40:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ca44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ca48:	f7f3 fe70 	bl	800072c <__aeabi_ddiv>
 800ca4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ca50:	e029      	b.n	800caa6 <_dtoa_r+0x3d6>
 800ca52:	2702      	movs	r7, #2
 800ca54:	e7f2      	b.n	800ca3c <_dtoa_r+0x36c>
 800ca56:	07e1      	lsls	r1, r4, #31
 800ca58:	d508      	bpl.n	800ca6c <_dtoa_r+0x39c>
 800ca5a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ca5e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ca62:	f7f3 fd39 	bl	80004d8 <__aeabi_dmul>
 800ca66:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ca6a:	3701      	adds	r7, #1
 800ca6c:	1064      	asrs	r4, r4, #1
 800ca6e:	3608      	adds	r6, #8
 800ca70:	e7e5      	b.n	800ca3e <_dtoa_r+0x36e>
 800ca72:	f000 80a5 	beq.w	800cbc0 <_dtoa_r+0x4f0>
 800ca76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ca7a:	f1c9 0400 	rsb	r4, r9, #0
 800ca7e:	4b7d      	ldr	r3, [pc, #500]	; (800cc74 <_dtoa_r+0x5a4>)
 800ca80:	f004 020f 	and.w	r2, r4, #15
 800ca84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ca88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca8c:	f7f3 fd24 	bl	80004d8 <__aeabi_dmul>
 800ca90:	2702      	movs	r7, #2
 800ca92:	2300      	movs	r3, #0
 800ca94:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ca98:	4e77      	ldr	r6, [pc, #476]	; (800cc78 <_dtoa_r+0x5a8>)
 800ca9a:	1124      	asrs	r4, r4, #4
 800ca9c:	2c00      	cmp	r4, #0
 800ca9e:	f040 8084 	bne.w	800cbaa <_dtoa_r+0x4da>
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d1d2      	bne.n	800ca4c <_dtoa_r+0x37c>
 800caa6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	f000 808b 	beq.w	800cbc4 <_dtoa_r+0x4f4>
 800caae:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800cab2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800cab6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800caba:	2200      	movs	r2, #0
 800cabc:	4b6f      	ldr	r3, [pc, #444]	; (800cc7c <_dtoa_r+0x5ac>)
 800cabe:	f7f3 ff7d 	bl	80009bc <__aeabi_dcmplt>
 800cac2:	2800      	cmp	r0, #0
 800cac4:	d07e      	beq.n	800cbc4 <_dtoa_r+0x4f4>
 800cac6:	9b02      	ldr	r3, [sp, #8]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d07b      	beq.n	800cbc4 <_dtoa_r+0x4f4>
 800cacc:	f1bb 0f00 	cmp.w	fp, #0
 800cad0:	dd38      	ble.n	800cb44 <_dtoa_r+0x474>
 800cad2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800cad6:	2200      	movs	r2, #0
 800cad8:	4b69      	ldr	r3, [pc, #420]	; (800cc80 <_dtoa_r+0x5b0>)
 800cada:	f7f3 fcfd 	bl	80004d8 <__aeabi_dmul>
 800cade:	465c      	mov	r4, fp
 800cae0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cae4:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
 800cae8:	3701      	adds	r7, #1
 800caea:	4638      	mov	r0, r7
 800caec:	f7f3 fc8a 	bl	8000404 <__aeabi_i2d>
 800caf0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800caf4:	f7f3 fcf0 	bl	80004d8 <__aeabi_dmul>
 800caf8:	2200      	movs	r2, #0
 800cafa:	4b62      	ldr	r3, [pc, #392]	; (800cc84 <_dtoa_r+0x5b4>)
 800cafc:	f7f3 fb36 	bl	800016c <__adddf3>
 800cb00:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800cb04:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800cb08:	9611      	str	r6, [sp, #68]	; 0x44
 800cb0a:	2c00      	cmp	r4, #0
 800cb0c:	d15d      	bne.n	800cbca <_dtoa_r+0x4fa>
 800cb0e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cb12:	2200      	movs	r2, #0
 800cb14:	4b5c      	ldr	r3, [pc, #368]	; (800cc88 <_dtoa_r+0x5b8>)
 800cb16:	f7f3 fb27 	bl	8000168 <__aeabi_dsub>
 800cb1a:	4602      	mov	r2, r0
 800cb1c:	460b      	mov	r3, r1
 800cb1e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cb22:	4633      	mov	r3, r6
 800cb24:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800cb26:	f7f3 ff67 	bl	80009f8 <__aeabi_dcmpgt>
 800cb2a:	2800      	cmp	r0, #0
 800cb2c:	f040 829e 	bne.w	800d06c <_dtoa_r+0x99c>
 800cb30:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cb34:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800cb36:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800cb3a:	f7f3 ff3f 	bl	80009bc <__aeabi_dcmplt>
 800cb3e:	2800      	cmp	r0, #0
 800cb40:	f040 8292 	bne.w	800d068 <_dtoa_r+0x998>
 800cb44:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800cb48:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800cb4c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	f2c0 8153 	blt.w	800cdfa <_dtoa_r+0x72a>
 800cb54:	f1b9 0f0e 	cmp.w	r9, #14
 800cb58:	f300 814f 	bgt.w	800cdfa <_dtoa_r+0x72a>
 800cb5c:	4b45      	ldr	r3, [pc, #276]	; (800cc74 <_dtoa_r+0x5a4>)
 800cb5e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800cb62:	e9d3 3400 	ldrd	r3, r4, [r3]
 800cb66:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800cb6a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	f280 80db 	bge.w	800cd28 <_dtoa_r+0x658>
 800cb72:	9b02      	ldr	r3, [sp, #8]
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	f300 80d7 	bgt.w	800cd28 <_dtoa_r+0x658>
 800cb7a:	f040 8274 	bne.w	800d066 <_dtoa_r+0x996>
 800cb7e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cb82:	2200      	movs	r2, #0
 800cb84:	4b40      	ldr	r3, [pc, #256]	; (800cc88 <_dtoa_r+0x5b8>)
 800cb86:	f7f3 fca7 	bl	80004d8 <__aeabi_dmul>
 800cb8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cb8e:	f7f3 ff29 	bl	80009e4 <__aeabi_dcmpge>
 800cb92:	9c02      	ldr	r4, [sp, #8]
 800cb94:	4626      	mov	r6, r4
 800cb96:	2800      	cmp	r0, #0
 800cb98:	f040 824a 	bne.w	800d030 <_dtoa_r+0x960>
 800cb9c:	2331      	movs	r3, #49	; 0x31
 800cb9e:	9f08      	ldr	r7, [sp, #32]
 800cba0:	f109 0901 	add.w	r9, r9, #1
 800cba4:	f807 3b01 	strb.w	r3, [r7], #1
 800cba8:	e246      	b.n	800d038 <_dtoa_r+0x968>
 800cbaa:	07e2      	lsls	r2, r4, #31
 800cbac:	d505      	bpl.n	800cbba <_dtoa_r+0x4ea>
 800cbae:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cbb2:	f7f3 fc91 	bl	80004d8 <__aeabi_dmul>
 800cbb6:	2301      	movs	r3, #1
 800cbb8:	3701      	adds	r7, #1
 800cbba:	1064      	asrs	r4, r4, #1
 800cbbc:	3608      	adds	r6, #8
 800cbbe:	e76d      	b.n	800ca9c <_dtoa_r+0x3cc>
 800cbc0:	2702      	movs	r7, #2
 800cbc2:	e770      	b.n	800caa6 <_dtoa_r+0x3d6>
 800cbc4:	46c8      	mov	r8, r9
 800cbc6:	9c02      	ldr	r4, [sp, #8]
 800cbc8:	e78f      	b.n	800caea <_dtoa_r+0x41a>
 800cbca:	9908      	ldr	r1, [sp, #32]
 800cbcc:	4b29      	ldr	r3, [pc, #164]	; (800cc74 <_dtoa_r+0x5a4>)
 800cbce:	4421      	add	r1, r4
 800cbd0:	9112      	str	r1, [sp, #72]	; 0x48
 800cbd2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cbd4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cbd8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800cbdc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cbe0:	2900      	cmp	r1, #0
 800cbe2:	d055      	beq.n	800cc90 <_dtoa_r+0x5c0>
 800cbe4:	2000      	movs	r0, #0
 800cbe6:	4929      	ldr	r1, [pc, #164]	; (800cc8c <_dtoa_r+0x5bc>)
 800cbe8:	f7f3 fda0 	bl	800072c <__aeabi_ddiv>
 800cbec:	463b      	mov	r3, r7
 800cbee:	4632      	mov	r2, r6
 800cbf0:	f7f3 faba 	bl	8000168 <__aeabi_dsub>
 800cbf4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800cbf8:	9f08      	ldr	r7, [sp, #32]
 800cbfa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cbfe:	f7f3 ff1b 	bl	8000a38 <__aeabi_d2iz>
 800cc02:	4604      	mov	r4, r0
 800cc04:	f7f3 fbfe 	bl	8000404 <__aeabi_i2d>
 800cc08:	4602      	mov	r2, r0
 800cc0a:	460b      	mov	r3, r1
 800cc0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cc10:	f7f3 faaa 	bl	8000168 <__aeabi_dsub>
 800cc14:	4602      	mov	r2, r0
 800cc16:	460b      	mov	r3, r1
 800cc18:	3430      	adds	r4, #48	; 0x30
 800cc1a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cc1e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800cc22:	f807 4b01 	strb.w	r4, [r7], #1
 800cc26:	f7f3 fec9 	bl	80009bc <__aeabi_dcmplt>
 800cc2a:	2800      	cmp	r0, #0
 800cc2c:	d174      	bne.n	800cd18 <_dtoa_r+0x648>
 800cc2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cc32:	2000      	movs	r0, #0
 800cc34:	4911      	ldr	r1, [pc, #68]	; (800cc7c <_dtoa_r+0x5ac>)
 800cc36:	f7f3 fa97 	bl	8000168 <__aeabi_dsub>
 800cc3a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800cc3e:	f7f3 febd 	bl	80009bc <__aeabi_dcmplt>
 800cc42:	2800      	cmp	r0, #0
 800cc44:	f040 80b6 	bne.w	800cdb4 <_dtoa_r+0x6e4>
 800cc48:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cc4a:	429f      	cmp	r7, r3
 800cc4c:	f43f af7a 	beq.w	800cb44 <_dtoa_r+0x474>
 800cc50:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800cc54:	2200      	movs	r2, #0
 800cc56:	4b0a      	ldr	r3, [pc, #40]	; (800cc80 <_dtoa_r+0x5b0>)
 800cc58:	f7f3 fc3e 	bl	80004d8 <__aeabi_dmul>
 800cc5c:	2200      	movs	r2, #0
 800cc5e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800cc62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cc66:	4b06      	ldr	r3, [pc, #24]	; (800cc80 <_dtoa_r+0x5b0>)
 800cc68:	f7f3 fc36 	bl	80004d8 <__aeabi_dmul>
 800cc6c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cc70:	e7c3      	b.n	800cbfa <_dtoa_r+0x52a>
 800cc72:	bf00      	nop
 800cc74:	0800f268 	.word	0x0800f268
 800cc78:	0800f240 	.word	0x0800f240
 800cc7c:	3ff00000 	.word	0x3ff00000
 800cc80:	40240000 	.word	0x40240000
 800cc84:	401c0000 	.word	0x401c0000
 800cc88:	40140000 	.word	0x40140000
 800cc8c:	3fe00000 	.word	0x3fe00000
 800cc90:	4630      	mov	r0, r6
 800cc92:	4639      	mov	r1, r7
 800cc94:	f7f3 fc20 	bl	80004d8 <__aeabi_dmul>
 800cc98:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cc9a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800cc9e:	9c08      	ldr	r4, [sp, #32]
 800cca0:	9314      	str	r3, [sp, #80]	; 0x50
 800cca2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cca6:	f7f3 fec7 	bl	8000a38 <__aeabi_d2iz>
 800ccaa:	9015      	str	r0, [sp, #84]	; 0x54
 800ccac:	f7f3 fbaa 	bl	8000404 <__aeabi_i2d>
 800ccb0:	4602      	mov	r2, r0
 800ccb2:	460b      	mov	r3, r1
 800ccb4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ccb8:	f7f3 fa56 	bl	8000168 <__aeabi_dsub>
 800ccbc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ccbe:	4606      	mov	r6, r0
 800ccc0:	3330      	adds	r3, #48	; 0x30
 800ccc2:	f804 3b01 	strb.w	r3, [r4], #1
 800ccc6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ccc8:	460f      	mov	r7, r1
 800ccca:	429c      	cmp	r4, r3
 800cccc:	f04f 0200 	mov.w	r2, #0
 800ccd0:	d124      	bne.n	800cd1c <_dtoa_r+0x64c>
 800ccd2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ccd6:	4bb3      	ldr	r3, [pc, #716]	; (800cfa4 <_dtoa_r+0x8d4>)
 800ccd8:	f7f3 fa48 	bl	800016c <__adddf3>
 800ccdc:	4602      	mov	r2, r0
 800ccde:	460b      	mov	r3, r1
 800cce0:	4630      	mov	r0, r6
 800cce2:	4639      	mov	r1, r7
 800cce4:	f7f3 fe88 	bl	80009f8 <__aeabi_dcmpgt>
 800cce8:	2800      	cmp	r0, #0
 800ccea:	d162      	bne.n	800cdb2 <_dtoa_r+0x6e2>
 800ccec:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ccf0:	2000      	movs	r0, #0
 800ccf2:	49ac      	ldr	r1, [pc, #688]	; (800cfa4 <_dtoa_r+0x8d4>)
 800ccf4:	f7f3 fa38 	bl	8000168 <__aeabi_dsub>
 800ccf8:	4602      	mov	r2, r0
 800ccfa:	460b      	mov	r3, r1
 800ccfc:	4630      	mov	r0, r6
 800ccfe:	4639      	mov	r1, r7
 800cd00:	f7f3 fe5c 	bl	80009bc <__aeabi_dcmplt>
 800cd04:	2800      	cmp	r0, #0
 800cd06:	f43f af1d 	beq.w	800cb44 <_dtoa_r+0x474>
 800cd0a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800cd0c:	1e7b      	subs	r3, r7, #1
 800cd0e:	9314      	str	r3, [sp, #80]	; 0x50
 800cd10:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800cd14:	2b30      	cmp	r3, #48	; 0x30
 800cd16:	d0f8      	beq.n	800cd0a <_dtoa_r+0x63a>
 800cd18:	46c1      	mov	r9, r8
 800cd1a:	e03a      	b.n	800cd92 <_dtoa_r+0x6c2>
 800cd1c:	4ba2      	ldr	r3, [pc, #648]	; (800cfa8 <_dtoa_r+0x8d8>)
 800cd1e:	f7f3 fbdb 	bl	80004d8 <__aeabi_dmul>
 800cd22:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cd26:	e7bc      	b.n	800cca2 <_dtoa_r+0x5d2>
 800cd28:	9f08      	ldr	r7, [sp, #32]
 800cd2a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cd2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cd32:	f7f3 fcfb 	bl	800072c <__aeabi_ddiv>
 800cd36:	f7f3 fe7f 	bl	8000a38 <__aeabi_d2iz>
 800cd3a:	4604      	mov	r4, r0
 800cd3c:	f7f3 fb62 	bl	8000404 <__aeabi_i2d>
 800cd40:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cd44:	f7f3 fbc8 	bl	80004d8 <__aeabi_dmul>
 800cd48:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800cd4c:	460b      	mov	r3, r1
 800cd4e:	4602      	mov	r2, r0
 800cd50:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cd54:	f7f3 fa08 	bl	8000168 <__aeabi_dsub>
 800cd58:	f807 6b01 	strb.w	r6, [r7], #1
 800cd5c:	9e08      	ldr	r6, [sp, #32]
 800cd5e:	9b02      	ldr	r3, [sp, #8]
 800cd60:	1bbe      	subs	r6, r7, r6
 800cd62:	42b3      	cmp	r3, r6
 800cd64:	d13a      	bne.n	800cddc <_dtoa_r+0x70c>
 800cd66:	4602      	mov	r2, r0
 800cd68:	460b      	mov	r3, r1
 800cd6a:	f7f3 f9ff 	bl	800016c <__adddf3>
 800cd6e:	4602      	mov	r2, r0
 800cd70:	460b      	mov	r3, r1
 800cd72:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cd76:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cd7a:	f7f3 fe3d 	bl	80009f8 <__aeabi_dcmpgt>
 800cd7e:	bb58      	cbnz	r0, 800cdd8 <_dtoa_r+0x708>
 800cd80:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cd84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cd88:	f7f3 fe0e 	bl	80009a8 <__aeabi_dcmpeq>
 800cd8c:	b108      	cbz	r0, 800cd92 <_dtoa_r+0x6c2>
 800cd8e:	07e1      	lsls	r1, r4, #31
 800cd90:	d422      	bmi.n	800cdd8 <_dtoa_r+0x708>
 800cd92:	4628      	mov	r0, r5
 800cd94:	4651      	mov	r1, sl
 800cd96:	f000 faf1 	bl	800d37c <_Bfree>
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	703b      	strb	r3, [r7, #0]
 800cd9e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800cda0:	f109 0001 	add.w	r0, r9, #1
 800cda4:	6018      	str	r0, [r3, #0]
 800cda6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	f43f acdf 	beq.w	800c76c <_dtoa_r+0x9c>
 800cdae:	601f      	str	r7, [r3, #0]
 800cdb0:	e4dc      	b.n	800c76c <_dtoa_r+0x9c>
 800cdb2:	4627      	mov	r7, r4
 800cdb4:	463b      	mov	r3, r7
 800cdb6:	461f      	mov	r7, r3
 800cdb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cdbc:	2a39      	cmp	r2, #57	; 0x39
 800cdbe:	d107      	bne.n	800cdd0 <_dtoa_r+0x700>
 800cdc0:	9a08      	ldr	r2, [sp, #32]
 800cdc2:	429a      	cmp	r2, r3
 800cdc4:	d1f7      	bne.n	800cdb6 <_dtoa_r+0x6e6>
 800cdc6:	2230      	movs	r2, #48	; 0x30
 800cdc8:	9908      	ldr	r1, [sp, #32]
 800cdca:	f108 0801 	add.w	r8, r8, #1
 800cdce:	700a      	strb	r2, [r1, #0]
 800cdd0:	781a      	ldrb	r2, [r3, #0]
 800cdd2:	3201      	adds	r2, #1
 800cdd4:	701a      	strb	r2, [r3, #0]
 800cdd6:	e79f      	b.n	800cd18 <_dtoa_r+0x648>
 800cdd8:	46c8      	mov	r8, r9
 800cdda:	e7eb      	b.n	800cdb4 <_dtoa_r+0x6e4>
 800cddc:	2200      	movs	r2, #0
 800cdde:	4b72      	ldr	r3, [pc, #456]	; (800cfa8 <_dtoa_r+0x8d8>)
 800cde0:	f7f3 fb7a 	bl	80004d8 <__aeabi_dmul>
 800cde4:	4602      	mov	r2, r0
 800cde6:	460b      	mov	r3, r1
 800cde8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cdec:	2200      	movs	r2, #0
 800cdee:	2300      	movs	r3, #0
 800cdf0:	f7f3 fdda 	bl	80009a8 <__aeabi_dcmpeq>
 800cdf4:	2800      	cmp	r0, #0
 800cdf6:	d098      	beq.n	800cd2a <_dtoa_r+0x65a>
 800cdf8:	e7cb      	b.n	800cd92 <_dtoa_r+0x6c2>
 800cdfa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cdfc:	2a00      	cmp	r2, #0
 800cdfe:	f000 80cd 	beq.w	800cf9c <_dtoa_r+0x8cc>
 800ce02:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800ce04:	2a01      	cmp	r2, #1
 800ce06:	f300 80af 	bgt.w	800cf68 <_dtoa_r+0x898>
 800ce0a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ce0c:	2a00      	cmp	r2, #0
 800ce0e:	f000 80a7 	beq.w	800cf60 <_dtoa_r+0x890>
 800ce12:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ce16:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ce18:	9f06      	ldr	r7, [sp, #24]
 800ce1a:	9a06      	ldr	r2, [sp, #24]
 800ce1c:	2101      	movs	r1, #1
 800ce1e:	441a      	add	r2, r3
 800ce20:	9206      	str	r2, [sp, #24]
 800ce22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce24:	4628      	mov	r0, r5
 800ce26:	441a      	add	r2, r3
 800ce28:	9209      	str	r2, [sp, #36]	; 0x24
 800ce2a:	f000 fb61 	bl	800d4f0 <__i2b>
 800ce2e:	4606      	mov	r6, r0
 800ce30:	2f00      	cmp	r7, #0
 800ce32:	dd0c      	ble.n	800ce4e <_dtoa_r+0x77e>
 800ce34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	dd09      	ble.n	800ce4e <_dtoa_r+0x77e>
 800ce3a:	42bb      	cmp	r3, r7
 800ce3c:	bfa8      	it	ge
 800ce3e:	463b      	movge	r3, r7
 800ce40:	9a06      	ldr	r2, [sp, #24]
 800ce42:	1aff      	subs	r7, r7, r3
 800ce44:	1ad2      	subs	r2, r2, r3
 800ce46:	9206      	str	r2, [sp, #24]
 800ce48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce4a:	1ad3      	subs	r3, r2, r3
 800ce4c:	9309      	str	r3, [sp, #36]	; 0x24
 800ce4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce50:	b1f3      	cbz	r3, 800ce90 <_dtoa_r+0x7c0>
 800ce52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	f000 80a9 	beq.w	800cfac <_dtoa_r+0x8dc>
 800ce5a:	2c00      	cmp	r4, #0
 800ce5c:	dd10      	ble.n	800ce80 <_dtoa_r+0x7b0>
 800ce5e:	4631      	mov	r1, r6
 800ce60:	4622      	mov	r2, r4
 800ce62:	4628      	mov	r0, r5
 800ce64:	f000 fbfe 	bl	800d664 <__pow5mult>
 800ce68:	4652      	mov	r2, sl
 800ce6a:	4601      	mov	r1, r0
 800ce6c:	4606      	mov	r6, r0
 800ce6e:	4628      	mov	r0, r5
 800ce70:	f000 fb54 	bl	800d51c <__multiply>
 800ce74:	4680      	mov	r8, r0
 800ce76:	4651      	mov	r1, sl
 800ce78:	4628      	mov	r0, r5
 800ce7a:	f000 fa7f 	bl	800d37c <_Bfree>
 800ce7e:	46c2      	mov	sl, r8
 800ce80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce82:	1b1a      	subs	r2, r3, r4
 800ce84:	d004      	beq.n	800ce90 <_dtoa_r+0x7c0>
 800ce86:	4651      	mov	r1, sl
 800ce88:	4628      	mov	r0, r5
 800ce8a:	f000 fbeb 	bl	800d664 <__pow5mult>
 800ce8e:	4682      	mov	sl, r0
 800ce90:	2101      	movs	r1, #1
 800ce92:	4628      	mov	r0, r5
 800ce94:	f000 fb2c 	bl	800d4f0 <__i2b>
 800ce98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ce9a:	4604      	mov	r4, r0
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	f340 8087 	ble.w	800cfb0 <_dtoa_r+0x8e0>
 800cea2:	461a      	mov	r2, r3
 800cea4:	4601      	mov	r1, r0
 800cea6:	4628      	mov	r0, r5
 800cea8:	f000 fbdc 	bl	800d664 <__pow5mult>
 800ceac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ceae:	4604      	mov	r4, r0
 800ceb0:	2b01      	cmp	r3, #1
 800ceb2:	f340 8080 	ble.w	800cfb6 <_dtoa_r+0x8e6>
 800ceb6:	f04f 0800 	mov.w	r8, #0
 800ceba:	6923      	ldr	r3, [r4, #16]
 800cebc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cec0:	6918      	ldr	r0, [r3, #16]
 800cec2:	f000 fac7 	bl	800d454 <__hi0bits>
 800cec6:	f1c0 0020 	rsb	r0, r0, #32
 800ceca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cecc:	4418      	add	r0, r3
 800cece:	f010 001f 	ands.w	r0, r0, #31
 800ced2:	f000 8092 	beq.w	800cffa <_dtoa_r+0x92a>
 800ced6:	f1c0 0320 	rsb	r3, r0, #32
 800ceda:	2b04      	cmp	r3, #4
 800cedc:	f340 808a 	ble.w	800cff4 <_dtoa_r+0x924>
 800cee0:	f1c0 001c 	rsb	r0, r0, #28
 800cee4:	9b06      	ldr	r3, [sp, #24]
 800cee6:	4407      	add	r7, r0
 800cee8:	4403      	add	r3, r0
 800ceea:	9306      	str	r3, [sp, #24]
 800ceec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ceee:	4403      	add	r3, r0
 800cef0:	9309      	str	r3, [sp, #36]	; 0x24
 800cef2:	9b06      	ldr	r3, [sp, #24]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	dd05      	ble.n	800cf04 <_dtoa_r+0x834>
 800cef8:	4651      	mov	r1, sl
 800cefa:	461a      	mov	r2, r3
 800cefc:	4628      	mov	r0, r5
 800cefe:	f000 fc0b 	bl	800d718 <__lshift>
 800cf02:	4682      	mov	sl, r0
 800cf04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	dd05      	ble.n	800cf16 <_dtoa_r+0x846>
 800cf0a:	4621      	mov	r1, r4
 800cf0c:	461a      	mov	r2, r3
 800cf0e:	4628      	mov	r0, r5
 800cf10:	f000 fc02 	bl	800d718 <__lshift>
 800cf14:	4604      	mov	r4, r0
 800cf16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d070      	beq.n	800cffe <_dtoa_r+0x92e>
 800cf1c:	4621      	mov	r1, r4
 800cf1e:	4650      	mov	r0, sl
 800cf20:	f000 fc66 	bl	800d7f0 <__mcmp>
 800cf24:	2800      	cmp	r0, #0
 800cf26:	da6a      	bge.n	800cffe <_dtoa_r+0x92e>
 800cf28:	2300      	movs	r3, #0
 800cf2a:	4651      	mov	r1, sl
 800cf2c:	220a      	movs	r2, #10
 800cf2e:	4628      	mov	r0, r5
 800cf30:	f000 fa46 	bl	800d3c0 <__multadd>
 800cf34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf36:	4682      	mov	sl, r0
 800cf38:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	f000 8193 	beq.w	800d268 <_dtoa_r+0xb98>
 800cf42:	4631      	mov	r1, r6
 800cf44:	2300      	movs	r3, #0
 800cf46:	220a      	movs	r2, #10
 800cf48:	4628      	mov	r0, r5
 800cf4a:	f000 fa39 	bl	800d3c0 <__multadd>
 800cf4e:	f1bb 0f00 	cmp.w	fp, #0
 800cf52:	4606      	mov	r6, r0
 800cf54:	f300 8093 	bgt.w	800d07e <_dtoa_r+0x9ae>
 800cf58:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cf5a:	2b02      	cmp	r3, #2
 800cf5c:	dc57      	bgt.n	800d00e <_dtoa_r+0x93e>
 800cf5e:	e08e      	b.n	800d07e <_dtoa_r+0x9ae>
 800cf60:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800cf62:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cf66:	e756      	b.n	800ce16 <_dtoa_r+0x746>
 800cf68:	9b02      	ldr	r3, [sp, #8]
 800cf6a:	1e5c      	subs	r4, r3, #1
 800cf6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf6e:	42a3      	cmp	r3, r4
 800cf70:	bfb7      	itett	lt
 800cf72:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800cf74:	1b1c      	subge	r4, r3, r4
 800cf76:	1ae2      	sublt	r2, r4, r3
 800cf78:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800cf7a:	bfbe      	ittt	lt
 800cf7c:	940a      	strlt	r4, [sp, #40]	; 0x28
 800cf7e:	189b      	addlt	r3, r3, r2
 800cf80:	930e      	strlt	r3, [sp, #56]	; 0x38
 800cf82:	9b02      	ldr	r3, [sp, #8]
 800cf84:	bfb8      	it	lt
 800cf86:	2400      	movlt	r4, #0
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	bfbb      	ittet	lt
 800cf8c:	9b06      	ldrlt	r3, [sp, #24]
 800cf8e:	9a02      	ldrlt	r2, [sp, #8]
 800cf90:	9f06      	ldrge	r7, [sp, #24]
 800cf92:	1a9f      	sublt	r7, r3, r2
 800cf94:	bfac      	ite	ge
 800cf96:	9b02      	ldrge	r3, [sp, #8]
 800cf98:	2300      	movlt	r3, #0
 800cf9a:	e73e      	b.n	800ce1a <_dtoa_r+0x74a>
 800cf9c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800cf9e:	9f06      	ldr	r7, [sp, #24]
 800cfa0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800cfa2:	e745      	b.n	800ce30 <_dtoa_r+0x760>
 800cfa4:	3fe00000 	.word	0x3fe00000
 800cfa8:	40240000 	.word	0x40240000
 800cfac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cfae:	e76a      	b.n	800ce86 <_dtoa_r+0x7b6>
 800cfb0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cfb2:	2b01      	cmp	r3, #1
 800cfb4:	dc19      	bgt.n	800cfea <_dtoa_r+0x91a>
 800cfb6:	9b04      	ldr	r3, [sp, #16]
 800cfb8:	b9bb      	cbnz	r3, 800cfea <_dtoa_r+0x91a>
 800cfba:	9b05      	ldr	r3, [sp, #20]
 800cfbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cfc0:	b99b      	cbnz	r3, 800cfea <_dtoa_r+0x91a>
 800cfc2:	9b05      	ldr	r3, [sp, #20]
 800cfc4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cfc8:	0d1b      	lsrs	r3, r3, #20
 800cfca:	051b      	lsls	r3, r3, #20
 800cfcc:	b183      	cbz	r3, 800cff0 <_dtoa_r+0x920>
 800cfce:	f04f 0801 	mov.w	r8, #1
 800cfd2:	9b06      	ldr	r3, [sp, #24]
 800cfd4:	3301      	adds	r3, #1
 800cfd6:	9306      	str	r3, [sp, #24]
 800cfd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfda:	3301      	adds	r3, #1
 800cfdc:	9309      	str	r3, [sp, #36]	; 0x24
 800cfde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	f47f af6a 	bne.w	800ceba <_dtoa_r+0x7ea>
 800cfe6:	2001      	movs	r0, #1
 800cfe8:	e76f      	b.n	800ceca <_dtoa_r+0x7fa>
 800cfea:	f04f 0800 	mov.w	r8, #0
 800cfee:	e7f6      	b.n	800cfde <_dtoa_r+0x90e>
 800cff0:	4698      	mov	r8, r3
 800cff2:	e7f4      	b.n	800cfde <_dtoa_r+0x90e>
 800cff4:	f43f af7d 	beq.w	800cef2 <_dtoa_r+0x822>
 800cff8:	4618      	mov	r0, r3
 800cffa:	301c      	adds	r0, #28
 800cffc:	e772      	b.n	800cee4 <_dtoa_r+0x814>
 800cffe:	9b02      	ldr	r3, [sp, #8]
 800d000:	2b00      	cmp	r3, #0
 800d002:	dc36      	bgt.n	800d072 <_dtoa_r+0x9a2>
 800d004:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d006:	2b02      	cmp	r3, #2
 800d008:	dd33      	ble.n	800d072 <_dtoa_r+0x9a2>
 800d00a:	f8dd b008 	ldr.w	fp, [sp, #8]
 800d00e:	f1bb 0f00 	cmp.w	fp, #0
 800d012:	d10d      	bne.n	800d030 <_dtoa_r+0x960>
 800d014:	4621      	mov	r1, r4
 800d016:	465b      	mov	r3, fp
 800d018:	2205      	movs	r2, #5
 800d01a:	4628      	mov	r0, r5
 800d01c:	f000 f9d0 	bl	800d3c0 <__multadd>
 800d020:	4601      	mov	r1, r0
 800d022:	4604      	mov	r4, r0
 800d024:	4650      	mov	r0, sl
 800d026:	f000 fbe3 	bl	800d7f0 <__mcmp>
 800d02a:	2800      	cmp	r0, #0
 800d02c:	f73f adb6 	bgt.w	800cb9c <_dtoa_r+0x4cc>
 800d030:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d032:	9f08      	ldr	r7, [sp, #32]
 800d034:	ea6f 0903 	mvn.w	r9, r3
 800d038:	f04f 0800 	mov.w	r8, #0
 800d03c:	4621      	mov	r1, r4
 800d03e:	4628      	mov	r0, r5
 800d040:	f000 f99c 	bl	800d37c <_Bfree>
 800d044:	2e00      	cmp	r6, #0
 800d046:	f43f aea4 	beq.w	800cd92 <_dtoa_r+0x6c2>
 800d04a:	f1b8 0f00 	cmp.w	r8, #0
 800d04e:	d005      	beq.n	800d05c <_dtoa_r+0x98c>
 800d050:	45b0      	cmp	r8, r6
 800d052:	d003      	beq.n	800d05c <_dtoa_r+0x98c>
 800d054:	4641      	mov	r1, r8
 800d056:	4628      	mov	r0, r5
 800d058:	f000 f990 	bl	800d37c <_Bfree>
 800d05c:	4631      	mov	r1, r6
 800d05e:	4628      	mov	r0, r5
 800d060:	f000 f98c 	bl	800d37c <_Bfree>
 800d064:	e695      	b.n	800cd92 <_dtoa_r+0x6c2>
 800d066:	2400      	movs	r4, #0
 800d068:	4626      	mov	r6, r4
 800d06a:	e7e1      	b.n	800d030 <_dtoa_r+0x960>
 800d06c:	46c1      	mov	r9, r8
 800d06e:	4626      	mov	r6, r4
 800d070:	e594      	b.n	800cb9c <_dtoa_r+0x4cc>
 800d072:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d074:	f8dd b008 	ldr.w	fp, [sp, #8]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	f000 80fc 	beq.w	800d276 <_dtoa_r+0xba6>
 800d07e:	2f00      	cmp	r7, #0
 800d080:	dd05      	ble.n	800d08e <_dtoa_r+0x9be>
 800d082:	4631      	mov	r1, r6
 800d084:	463a      	mov	r2, r7
 800d086:	4628      	mov	r0, r5
 800d088:	f000 fb46 	bl	800d718 <__lshift>
 800d08c:	4606      	mov	r6, r0
 800d08e:	f1b8 0f00 	cmp.w	r8, #0
 800d092:	d05c      	beq.n	800d14e <_dtoa_r+0xa7e>
 800d094:	4628      	mov	r0, r5
 800d096:	6871      	ldr	r1, [r6, #4]
 800d098:	f000 f930 	bl	800d2fc <_Balloc>
 800d09c:	4607      	mov	r7, r0
 800d09e:	b928      	cbnz	r0, 800d0ac <_dtoa_r+0x9dc>
 800d0a0:	4602      	mov	r2, r0
 800d0a2:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d0a6:	4b7e      	ldr	r3, [pc, #504]	; (800d2a0 <_dtoa_r+0xbd0>)
 800d0a8:	f7ff bb26 	b.w	800c6f8 <_dtoa_r+0x28>
 800d0ac:	6932      	ldr	r2, [r6, #16]
 800d0ae:	f106 010c 	add.w	r1, r6, #12
 800d0b2:	3202      	adds	r2, #2
 800d0b4:	0092      	lsls	r2, r2, #2
 800d0b6:	300c      	adds	r0, #12
 800d0b8:	f000 f912 	bl	800d2e0 <memcpy>
 800d0bc:	2201      	movs	r2, #1
 800d0be:	4639      	mov	r1, r7
 800d0c0:	4628      	mov	r0, r5
 800d0c2:	f000 fb29 	bl	800d718 <__lshift>
 800d0c6:	46b0      	mov	r8, r6
 800d0c8:	4606      	mov	r6, r0
 800d0ca:	9b08      	ldr	r3, [sp, #32]
 800d0cc:	3301      	adds	r3, #1
 800d0ce:	9302      	str	r3, [sp, #8]
 800d0d0:	9b08      	ldr	r3, [sp, #32]
 800d0d2:	445b      	add	r3, fp
 800d0d4:	930a      	str	r3, [sp, #40]	; 0x28
 800d0d6:	9b04      	ldr	r3, [sp, #16]
 800d0d8:	f003 0301 	and.w	r3, r3, #1
 800d0dc:	9309      	str	r3, [sp, #36]	; 0x24
 800d0de:	9b02      	ldr	r3, [sp, #8]
 800d0e0:	4621      	mov	r1, r4
 800d0e2:	4650      	mov	r0, sl
 800d0e4:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800d0e8:	f7ff fa64 	bl	800c5b4 <quorem>
 800d0ec:	4603      	mov	r3, r0
 800d0ee:	4641      	mov	r1, r8
 800d0f0:	3330      	adds	r3, #48	; 0x30
 800d0f2:	9004      	str	r0, [sp, #16]
 800d0f4:	4650      	mov	r0, sl
 800d0f6:	930b      	str	r3, [sp, #44]	; 0x2c
 800d0f8:	f000 fb7a 	bl	800d7f0 <__mcmp>
 800d0fc:	4632      	mov	r2, r6
 800d0fe:	9006      	str	r0, [sp, #24]
 800d100:	4621      	mov	r1, r4
 800d102:	4628      	mov	r0, r5
 800d104:	f000 fb90 	bl	800d828 <__mdiff>
 800d108:	68c2      	ldr	r2, [r0, #12]
 800d10a:	4607      	mov	r7, r0
 800d10c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d10e:	bb02      	cbnz	r2, 800d152 <_dtoa_r+0xa82>
 800d110:	4601      	mov	r1, r0
 800d112:	4650      	mov	r0, sl
 800d114:	f000 fb6c 	bl	800d7f0 <__mcmp>
 800d118:	4602      	mov	r2, r0
 800d11a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d11c:	4639      	mov	r1, r7
 800d11e:	4628      	mov	r0, r5
 800d120:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800d124:	f000 f92a 	bl	800d37c <_Bfree>
 800d128:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d12a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d12c:	9f02      	ldr	r7, [sp, #8]
 800d12e:	ea43 0102 	orr.w	r1, r3, r2
 800d132:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d134:	430b      	orrs	r3, r1
 800d136:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d138:	d10d      	bne.n	800d156 <_dtoa_r+0xa86>
 800d13a:	2b39      	cmp	r3, #57	; 0x39
 800d13c:	d027      	beq.n	800d18e <_dtoa_r+0xabe>
 800d13e:	9a06      	ldr	r2, [sp, #24]
 800d140:	2a00      	cmp	r2, #0
 800d142:	dd01      	ble.n	800d148 <_dtoa_r+0xa78>
 800d144:	9b04      	ldr	r3, [sp, #16]
 800d146:	3331      	adds	r3, #49	; 0x31
 800d148:	f88b 3000 	strb.w	r3, [fp]
 800d14c:	e776      	b.n	800d03c <_dtoa_r+0x96c>
 800d14e:	4630      	mov	r0, r6
 800d150:	e7b9      	b.n	800d0c6 <_dtoa_r+0x9f6>
 800d152:	2201      	movs	r2, #1
 800d154:	e7e2      	b.n	800d11c <_dtoa_r+0xa4c>
 800d156:	9906      	ldr	r1, [sp, #24]
 800d158:	2900      	cmp	r1, #0
 800d15a:	db04      	blt.n	800d166 <_dtoa_r+0xa96>
 800d15c:	9822      	ldr	r0, [sp, #136]	; 0x88
 800d15e:	4301      	orrs	r1, r0
 800d160:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d162:	4301      	orrs	r1, r0
 800d164:	d120      	bne.n	800d1a8 <_dtoa_r+0xad8>
 800d166:	2a00      	cmp	r2, #0
 800d168:	ddee      	ble.n	800d148 <_dtoa_r+0xa78>
 800d16a:	4651      	mov	r1, sl
 800d16c:	2201      	movs	r2, #1
 800d16e:	4628      	mov	r0, r5
 800d170:	9302      	str	r3, [sp, #8]
 800d172:	f000 fad1 	bl	800d718 <__lshift>
 800d176:	4621      	mov	r1, r4
 800d178:	4682      	mov	sl, r0
 800d17a:	f000 fb39 	bl	800d7f0 <__mcmp>
 800d17e:	2800      	cmp	r0, #0
 800d180:	9b02      	ldr	r3, [sp, #8]
 800d182:	dc02      	bgt.n	800d18a <_dtoa_r+0xaba>
 800d184:	d1e0      	bne.n	800d148 <_dtoa_r+0xa78>
 800d186:	07da      	lsls	r2, r3, #31
 800d188:	d5de      	bpl.n	800d148 <_dtoa_r+0xa78>
 800d18a:	2b39      	cmp	r3, #57	; 0x39
 800d18c:	d1da      	bne.n	800d144 <_dtoa_r+0xa74>
 800d18e:	2339      	movs	r3, #57	; 0x39
 800d190:	f88b 3000 	strb.w	r3, [fp]
 800d194:	463b      	mov	r3, r7
 800d196:	461f      	mov	r7, r3
 800d198:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800d19c:	3b01      	subs	r3, #1
 800d19e:	2a39      	cmp	r2, #57	; 0x39
 800d1a0:	d050      	beq.n	800d244 <_dtoa_r+0xb74>
 800d1a2:	3201      	adds	r2, #1
 800d1a4:	701a      	strb	r2, [r3, #0]
 800d1a6:	e749      	b.n	800d03c <_dtoa_r+0x96c>
 800d1a8:	2a00      	cmp	r2, #0
 800d1aa:	dd03      	ble.n	800d1b4 <_dtoa_r+0xae4>
 800d1ac:	2b39      	cmp	r3, #57	; 0x39
 800d1ae:	d0ee      	beq.n	800d18e <_dtoa_r+0xabe>
 800d1b0:	3301      	adds	r3, #1
 800d1b2:	e7c9      	b.n	800d148 <_dtoa_r+0xa78>
 800d1b4:	9a02      	ldr	r2, [sp, #8]
 800d1b6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d1b8:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d1bc:	428a      	cmp	r2, r1
 800d1be:	d02a      	beq.n	800d216 <_dtoa_r+0xb46>
 800d1c0:	4651      	mov	r1, sl
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	220a      	movs	r2, #10
 800d1c6:	4628      	mov	r0, r5
 800d1c8:	f000 f8fa 	bl	800d3c0 <__multadd>
 800d1cc:	45b0      	cmp	r8, r6
 800d1ce:	4682      	mov	sl, r0
 800d1d0:	f04f 0300 	mov.w	r3, #0
 800d1d4:	f04f 020a 	mov.w	r2, #10
 800d1d8:	4641      	mov	r1, r8
 800d1da:	4628      	mov	r0, r5
 800d1dc:	d107      	bne.n	800d1ee <_dtoa_r+0xb1e>
 800d1de:	f000 f8ef 	bl	800d3c0 <__multadd>
 800d1e2:	4680      	mov	r8, r0
 800d1e4:	4606      	mov	r6, r0
 800d1e6:	9b02      	ldr	r3, [sp, #8]
 800d1e8:	3301      	adds	r3, #1
 800d1ea:	9302      	str	r3, [sp, #8]
 800d1ec:	e777      	b.n	800d0de <_dtoa_r+0xa0e>
 800d1ee:	f000 f8e7 	bl	800d3c0 <__multadd>
 800d1f2:	4631      	mov	r1, r6
 800d1f4:	4680      	mov	r8, r0
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	220a      	movs	r2, #10
 800d1fa:	4628      	mov	r0, r5
 800d1fc:	f000 f8e0 	bl	800d3c0 <__multadd>
 800d200:	4606      	mov	r6, r0
 800d202:	e7f0      	b.n	800d1e6 <_dtoa_r+0xb16>
 800d204:	f1bb 0f00 	cmp.w	fp, #0
 800d208:	bfcc      	ite	gt
 800d20a:	465f      	movgt	r7, fp
 800d20c:	2701      	movle	r7, #1
 800d20e:	f04f 0800 	mov.w	r8, #0
 800d212:	9a08      	ldr	r2, [sp, #32]
 800d214:	4417      	add	r7, r2
 800d216:	4651      	mov	r1, sl
 800d218:	2201      	movs	r2, #1
 800d21a:	4628      	mov	r0, r5
 800d21c:	9302      	str	r3, [sp, #8]
 800d21e:	f000 fa7b 	bl	800d718 <__lshift>
 800d222:	4621      	mov	r1, r4
 800d224:	4682      	mov	sl, r0
 800d226:	f000 fae3 	bl	800d7f0 <__mcmp>
 800d22a:	2800      	cmp	r0, #0
 800d22c:	dcb2      	bgt.n	800d194 <_dtoa_r+0xac4>
 800d22e:	d102      	bne.n	800d236 <_dtoa_r+0xb66>
 800d230:	9b02      	ldr	r3, [sp, #8]
 800d232:	07db      	lsls	r3, r3, #31
 800d234:	d4ae      	bmi.n	800d194 <_dtoa_r+0xac4>
 800d236:	463b      	mov	r3, r7
 800d238:	461f      	mov	r7, r3
 800d23a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d23e:	2a30      	cmp	r2, #48	; 0x30
 800d240:	d0fa      	beq.n	800d238 <_dtoa_r+0xb68>
 800d242:	e6fb      	b.n	800d03c <_dtoa_r+0x96c>
 800d244:	9a08      	ldr	r2, [sp, #32]
 800d246:	429a      	cmp	r2, r3
 800d248:	d1a5      	bne.n	800d196 <_dtoa_r+0xac6>
 800d24a:	2331      	movs	r3, #49	; 0x31
 800d24c:	f109 0901 	add.w	r9, r9, #1
 800d250:	7013      	strb	r3, [r2, #0]
 800d252:	e6f3      	b.n	800d03c <_dtoa_r+0x96c>
 800d254:	4b13      	ldr	r3, [pc, #76]	; (800d2a4 <_dtoa_r+0xbd4>)
 800d256:	f7ff baa7 	b.w	800c7a8 <_dtoa_r+0xd8>
 800d25a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	f47f aa80 	bne.w	800c762 <_dtoa_r+0x92>
 800d262:	4b11      	ldr	r3, [pc, #68]	; (800d2a8 <_dtoa_r+0xbd8>)
 800d264:	f7ff baa0 	b.w	800c7a8 <_dtoa_r+0xd8>
 800d268:	f1bb 0f00 	cmp.w	fp, #0
 800d26c:	dc03      	bgt.n	800d276 <_dtoa_r+0xba6>
 800d26e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d270:	2b02      	cmp	r3, #2
 800d272:	f73f aecc 	bgt.w	800d00e <_dtoa_r+0x93e>
 800d276:	9f08      	ldr	r7, [sp, #32]
 800d278:	4621      	mov	r1, r4
 800d27a:	4650      	mov	r0, sl
 800d27c:	f7ff f99a 	bl	800c5b4 <quorem>
 800d280:	9a08      	ldr	r2, [sp, #32]
 800d282:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800d286:	f807 3b01 	strb.w	r3, [r7], #1
 800d28a:	1aba      	subs	r2, r7, r2
 800d28c:	4593      	cmp	fp, r2
 800d28e:	ddb9      	ble.n	800d204 <_dtoa_r+0xb34>
 800d290:	4651      	mov	r1, sl
 800d292:	2300      	movs	r3, #0
 800d294:	220a      	movs	r2, #10
 800d296:	4628      	mov	r0, r5
 800d298:	f000 f892 	bl	800d3c0 <__multadd>
 800d29c:	4682      	mov	sl, r0
 800d29e:	e7eb      	b.n	800d278 <_dtoa_r+0xba8>
 800d2a0:	0800f1cf 	.word	0x0800f1cf
 800d2a4:	0800f128 	.word	0x0800f128
 800d2a8:	0800f14c 	.word	0x0800f14c

0800d2ac <_localeconv_r>:
 800d2ac:	4800      	ldr	r0, [pc, #0]	; (800d2b0 <_localeconv_r+0x4>)
 800d2ae:	4770      	bx	lr
 800d2b0:	2000034c 	.word	0x2000034c

0800d2b4 <malloc>:
 800d2b4:	4b02      	ldr	r3, [pc, #8]	; (800d2c0 <malloc+0xc>)
 800d2b6:	4601      	mov	r1, r0
 800d2b8:	6818      	ldr	r0, [r3, #0]
 800d2ba:	f000 bbfb 	b.w	800dab4 <_malloc_r>
 800d2be:	bf00      	nop
 800d2c0:	200001f8 	.word	0x200001f8

0800d2c4 <memchr>:
 800d2c4:	4603      	mov	r3, r0
 800d2c6:	b510      	push	{r4, lr}
 800d2c8:	b2c9      	uxtb	r1, r1
 800d2ca:	4402      	add	r2, r0
 800d2cc:	4293      	cmp	r3, r2
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	d101      	bne.n	800d2d6 <memchr+0x12>
 800d2d2:	2000      	movs	r0, #0
 800d2d4:	e003      	b.n	800d2de <memchr+0x1a>
 800d2d6:	7804      	ldrb	r4, [r0, #0]
 800d2d8:	3301      	adds	r3, #1
 800d2da:	428c      	cmp	r4, r1
 800d2dc:	d1f6      	bne.n	800d2cc <memchr+0x8>
 800d2de:	bd10      	pop	{r4, pc}

0800d2e0 <memcpy>:
 800d2e0:	440a      	add	r2, r1
 800d2e2:	4291      	cmp	r1, r2
 800d2e4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d2e8:	d100      	bne.n	800d2ec <memcpy+0xc>
 800d2ea:	4770      	bx	lr
 800d2ec:	b510      	push	{r4, lr}
 800d2ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d2f2:	4291      	cmp	r1, r2
 800d2f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d2f8:	d1f9      	bne.n	800d2ee <memcpy+0xe>
 800d2fa:	bd10      	pop	{r4, pc}

0800d2fc <_Balloc>:
 800d2fc:	b570      	push	{r4, r5, r6, lr}
 800d2fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d300:	4604      	mov	r4, r0
 800d302:	460d      	mov	r5, r1
 800d304:	b976      	cbnz	r6, 800d324 <_Balloc+0x28>
 800d306:	2010      	movs	r0, #16
 800d308:	f7ff ffd4 	bl	800d2b4 <malloc>
 800d30c:	4602      	mov	r2, r0
 800d30e:	6260      	str	r0, [r4, #36]	; 0x24
 800d310:	b920      	cbnz	r0, 800d31c <_Balloc+0x20>
 800d312:	2166      	movs	r1, #102	; 0x66
 800d314:	4b17      	ldr	r3, [pc, #92]	; (800d374 <_Balloc+0x78>)
 800d316:	4818      	ldr	r0, [pc, #96]	; (800d378 <_Balloc+0x7c>)
 800d318:	f000 fd92 	bl	800de40 <__assert_func>
 800d31c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d320:	6006      	str	r6, [r0, #0]
 800d322:	60c6      	str	r6, [r0, #12]
 800d324:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d326:	68f3      	ldr	r3, [r6, #12]
 800d328:	b183      	cbz	r3, 800d34c <_Balloc+0x50>
 800d32a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d32c:	68db      	ldr	r3, [r3, #12]
 800d32e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d332:	b9b8      	cbnz	r0, 800d364 <_Balloc+0x68>
 800d334:	2101      	movs	r1, #1
 800d336:	fa01 f605 	lsl.w	r6, r1, r5
 800d33a:	1d72      	adds	r2, r6, #5
 800d33c:	4620      	mov	r0, r4
 800d33e:	0092      	lsls	r2, r2, #2
 800d340:	f000 fb5e 	bl	800da00 <_calloc_r>
 800d344:	b160      	cbz	r0, 800d360 <_Balloc+0x64>
 800d346:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d34a:	e00e      	b.n	800d36a <_Balloc+0x6e>
 800d34c:	2221      	movs	r2, #33	; 0x21
 800d34e:	2104      	movs	r1, #4
 800d350:	4620      	mov	r0, r4
 800d352:	f000 fb55 	bl	800da00 <_calloc_r>
 800d356:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d358:	60f0      	str	r0, [r6, #12]
 800d35a:	68db      	ldr	r3, [r3, #12]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d1e4      	bne.n	800d32a <_Balloc+0x2e>
 800d360:	2000      	movs	r0, #0
 800d362:	bd70      	pop	{r4, r5, r6, pc}
 800d364:	6802      	ldr	r2, [r0, #0]
 800d366:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d36a:	2300      	movs	r3, #0
 800d36c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d370:	e7f7      	b.n	800d362 <_Balloc+0x66>
 800d372:	bf00      	nop
 800d374:	0800f159 	.word	0x0800f159
 800d378:	0800f1e0 	.word	0x0800f1e0

0800d37c <_Bfree>:
 800d37c:	b570      	push	{r4, r5, r6, lr}
 800d37e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d380:	4605      	mov	r5, r0
 800d382:	460c      	mov	r4, r1
 800d384:	b976      	cbnz	r6, 800d3a4 <_Bfree+0x28>
 800d386:	2010      	movs	r0, #16
 800d388:	f7ff ff94 	bl	800d2b4 <malloc>
 800d38c:	4602      	mov	r2, r0
 800d38e:	6268      	str	r0, [r5, #36]	; 0x24
 800d390:	b920      	cbnz	r0, 800d39c <_Bfree+0x20>
 800d392:	218a      	movs	r1, #138	; 0x8a
 800d394:	4b08      	ldr	r3, [pc, #32]	; (800d3b8 <_Bfree+0x3c>)
 800d396:	4809      	ldr	r0, [pc, #36]	; (800d3bc <_Bfree+0x40>)
 800d398:	f000 fd52 	bl	800de40 <__assert_func>
 800d39c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d3a0:	6006      	str	r6, [r0, #0]
 800d3a2:	60c6      	str	r6, [r0, #12]
 800d3a4:	b13c      	cbz	r4, 800d3b6 <_Bfree+0x3a>
 800d3a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d3a8:	6862      	ldr	r2, [r4, #4]
 800d3aa:	68db      	ldr	r3, [r3, #12]
 800d3ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d3b0:	6021      	str	r1, [r4, #0]
 800d3b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d3b6:	bd70      	pop	{r4, r5, r6, pc}
 800d3b8:	0800f159 	.word	0x0800f159
 800d3bc:	0800f1e0 	.word	0x0800f1e0

0800d3c0 <__multadd>:
 800d3c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3c4:	4698      	mov	r8, r3
 800d3c6:	460c      	mov	r4, r1
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	690e      	ldr	r6, [r1, #16]
 800d3cc:	4607      	mov	r7, r0
 800d3ce:	f101 0014 	add.w	r0, r1, #20
 800d3d2:	6805      	ldr	r5, [r0, #0]
 800d3d4:	3301      	adds	r3, #1
 800d3d6:	b2a9      	uxth	r1, r5
 800d3d8:	fb02 8101 	mla	r1, r2, r1, r8
 800d3dc:	0c2d      	lsrs	r5, r5, #16
 800d3de:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800d3e2:	fb02 c505 	mla	r5, r2, r5, ip
 800d3e6:	b289      	uxth	r1, r1
 800d3e8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800d3ec:	429e      	cmp	r6, r3
 800d3ee:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800d3f2:	f840 1b04 	str.w	r1, [r0], #4
 800d3f6:	dcec      	bgt.n	800d3d2 <__multadd+0x12>
 800d3f8:	f1b8 0f00 	cmp.w	r8, #0
 800d3fc:	d022      	beq.n	800d444 <__multadd+0x84>
 800d3fe:	68a3      	ldr	r3, [r4, #8]
 800d400:	42b3      	cmp	r3, r6
 800d402:	dc19      	bgt.n	800d438 <__multadd+0x78>
 800d404:	6861      	ldr	r1, [r4, #4]
 800d406:	4638      	mov	r0, r7
 800d408:	3101      	adds	r1, #1
 800d40a:	f7ff ff77 	bl	800d2fc <_Balloc>
 800d40e:	4605      	mov	r5, r0
 800d410:	b928      	cbnz	r0, 800d41e <__multadd+0x5e>
 800d412:	4602      	mov	r2, r0
 800d414:	21b5      	movs	r1, #181	; 0xb5
 800d416:	4b0d      	ldr	r3, [pc, #52]	; (800d44c <__multadd+0x8c>)
 800d418:	480d      	ldr	r0, [pc, #52]	; (800d450 <__multadd+0x90>)
 800d41a:	f000 fd11 	bl	800de40 <__assert_func>
 800d41e:	6922      	ldr	r2, [r4, #16]
 800d420:	f104 010c 	add.w	r1, r4, #12
 800d424:	3202      	adds	r2, #2
 800d426:	0092      	lsls	r2, r2, #2
 800d428:	300c      	adds	r0, #12
 800d42a:	f7ff ff59 	bl	800d2e0 <memcpy>
 800d42e:	4621      	mov	r1, r4
 800d430:	4638      	mov	r0, r7
 800d432:	f7ff ffa3 	bl	800d37c <_Bfree>
 800d436:	462c      	mov	r4, r5
 800d438:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800d43c:	3601      	adds	r6, #1
 800d43e:	f8c3 8014 	str.w	r8, [r3, #20]
 800d442:	6126      	str	r6, [r4, #16]
 800d444:	4620      	mov	r0, r4
 800d446:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d44a:	bf00      	nop
 800d44c:	0800f1cf 	.word	0x0800f1cf
 800d450:	0800f1e0 	.word	0x0800f1e0

0800d454 <__hi0bits>:
 800d454:	0c02      	lsrs	r2, r0, #16
 800d456:	0412      	lsls	r2, r2, #16
 800d458:	4603      	mov	r3, r0
 800d45a:	b9ca      	cbnz	r2, 800d490 <__hi0bits+0x3c>
 800d45c:	0403      	lsls	r3, r0, #16
 800d45e:	2010      	movs	r0, #16
 800d460:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800d464:	bf04      	itt	eq
 800d466:	021b      	lsleq	r3, r3, #8
 800d468:	3008      	addeq	r0, #8
 800d46a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800d46e:	bf04      	itt	eq
 800d470:	011b      	lsleq	r3, r3, #4
 800d472:	3004      	addeq	r0, #4
 800d474:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800d478:	bf04      	itt	eq
 800d47a:	009b      	lsleq	r3, r3, #2
 800d47c:	3002      	addeq	r0, #2
 800d47e:	2b00      	cmp	r3, #0
 800d480:	db05      	blt.n	800d48e <__hi0bits+0x3a>
 800d482:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800d486:	f100 0001 	add.w	r0, r0, #1
 800d48a:	bf08      	it	eq
 800d48c:	2020      	moveq	r0, #32
 800d48e:	4770      	bx	lr
 800d490:	2000      	movs	r0, #0
 800d492:	e7e5      	b.n	800d460 <__hi0bits+0xc>

0800d494 <__lo0bits>:
 800d494:	6803      	ldr	r3, [r0, #0]
 800d496:	4602      	mov	r2, r0
 800d498:	f013 0007 	ands.w	r0, r3, #7
 800d49c:	d00b      	beq.n	800d4b6 <__lo0bits+0x22>
 800d49e:	07d9      	lsls	r1, r3, #31
 800d4a0:	d422      	bmi.n	800d4e8 <__lo0bits+0x54>
 800d4a2:	0798      	lsls	r0, r3, #30
 800d4a4:	bf49      	itett	mi
 800d4a6:	085b      	lsrmi	r3, r3, #1
 800d4a8:	089b      	lsrpl	r3, r3, #2
 800d4aa:	2001      	movmi	r0, #1
 800d4ac:	6013      	strmi	r3, [r2, #0]
 800d4ae:	bf5c      	itt	pl
 800d4b0:	2002      	movpl	r0, #2
 800d4b2:	6013      	strpl	r3, [r2, #0]
 800d4b4:	4770      	bx	lr
 800d4b6:	b299      	uxth	r1, r3
 800d4b8:	b909      	cbnz	r1, 800d4be <__lo0bits+0x2a>
 800d4ba:	2010      	movs	r0, #16
 800d4bc:	0c1b      	lsrs	r3, r3, #16
 800d4be:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d4c2:	bf04      	itt	eq
 800d4c4:	0a1b      	lsreq	r3, r3, #8
 800d4c6:	3008      	addeq	r0, #8
 800d4c8:	0719      	lsls	r1, r3, #28
 800d4ca:	bf04      	itt	eq
 800d4cc:	091b      	lsreq	r3, r3, #4
 800d4ce:	3004      	addeq	r0, #4
 800d4d0:	0799      	lsls	r1, r3, #30
 800d4d2:	bf04      	itt	eq
 800d4d4:	089b      	lsreq	r3, r3, #2
 800d4d6:	3002      	addeq	r0, #2
 800d4d8:	07d9      	lsls	r1, r3, #31
 800d4da:	d403      	bmi.n	800d4e4 <__lo0bits+0x50>
 800d4dc:	085b      	lsrs	r3, r3, #1
 800d4de:	f100 0001 	add.w	r0, r0, #1
 800d4e2:	d003      	beq.n	800d4ec <__lo0bits+0x58>
 800d4e4:	6013      	str	r3, [r2, #0]
 800d4e6:	4770      	bx	lr
 800d4e8:	2000      	movs	r0, #0
 800d4ea:	4770      	bx	lr
 800d4ec:	2020      	movs	r0, #32
 800d4ee:	4770      	bx	lr

0800d4f0 <__i2b>:
 800d4f0:	b510      	push	{r4, lr}
 800d4f2:	460c      	mov	r4, r1
 800d4f4:	2101      	movs	r1, #1
 800d4f6:	f7ff ff01 	bl	800d2fc <_Balloc>
 800d4fa:	4602      	mov	r2, r0
 800d4fc:	b928      	cbnz	r0, 800d50a <__i2b+0x1a>
 800d4fe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d502:	4b04      	ldr	r3, [pc, #16]	; (800d514 <__i2b+0x24>)
 800d504:	4804      	ldr	r0, [pc, #16]	; (800d518 <__i2b+0x28>)
 800d506:	f000 fc9b 	bl	800de40 <__assert_func>
 800d50a:	2301      	movs	r3, #1
 800d50c:	6144      	str	r4, [r0, #20]
 800d50e:	6103      	str	r3, [r0, #16]
 800d510:	bd10      	pop	{r4, pc}
 800d512:	bf00      	nop
 800d514:	0800f1cf 	.word	0x0800f1cf
 800d518:	0800f1e0 	.word	0x0800f1e0

0800d51c <__multiply>:
 800d51c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d520:	4614      	mov	r4, r2
 800d522:	690a      	ldr	r2, [r1, #16]
 800d524:	6923      	ldr	r3, [r4, #16]
 800d526:	460d      	mov	r5, r1
 800d528:	429a      	cmp	r2, r3
 800d52a:	bfbe      	ittt	lt
 800d52c:	460b      	movlt	r3, r1
 800d52e:	4625      	movlt	r5, r4
 800d530:	461c      	movlt	r4, r3
 800d532:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800d536:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d53a:	68ab      	ldr	r3, [r5, #8]
 800d53c:	6869      	ldr	r1, [r5, #4]
 800d53e:	eb0a 0709 	add.w	r7, sl, r9
 800d542:	42bb      	cmp	r3, r7
 800d544:	b085      	sub	sp, #20
 800d546:	bfb8      	it	lt
 800d548:	3101      	addlt	r1, #1
 800d54a:	f7ff fed7 	bl	800d2fc <_Balloc>
 800d54e:	b930      	cbnz	r0, 800d55e <__multiply+0x42>
 800d550:	4602      	mov	r2, r0
 800d552:	f240 115d 	movw	r1, #349	; 0x15d
 800d556:	4b41      	ldr	r3, [pc, #260]	; (800d65c <__multiply+0x140>)
 800d558:	4841      	ldr	r0, [pc, #260]	; (800d660 <__multiply+0x144>)
 800d55a:	f000 fc71 	bl	800de40 <__assert_func>
 800d55e:	f100 0614 	add.w	r6, r0, #20
 800d562:	4633      	mov	r3, r6
 800d564:	2200      	movs	r2, #0
 800d566:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800d56a:	4543      	cmp	r3, r8
 800d56c:	d31e      	bcc.n	800d5ac <__multiply+0x90>
 800d56e:	f105 0c14 	add.w	ip, r5, #20
 800d572:	f104 0314 	add.w	r3, r4, #20
 800d576:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800d57a:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800d57e:	9202      	str	r2, [sp, #8]
 800d580:	ebac 0205 	sub.w	r2, ip, r5
 800d584:	3a15      	subs	r2, #21
 800d586:	f022 0203 	bic.w	r2, r2, #3
 800d58a:	3204      	adds	r2, #4
 800d58c:	f105 0115 	add.w	r1, r5, #21
 800d590:	458c      	cmp	ip, r1
 800d592:	bf38      	it	cc
 800d594:	2204      	movcc	r2, #4
 800d596:	9201      	str	r2, [sp, #4]
 800d598:	9a02      	ldr	r2, [sp, #8]
 800d59a:	9303      	str	r3, [sp, #12]
 800d59c:	429a      	cmp	r2, r3
 800d59e:	d808      	bhi.n	800d5b2 <__multiply+0x96>
 800d5a0:	2f00      	cmp	r7, #0
 800d5a2:	dc55      	bgt.n	800d650 <__multiply+0x134>
 800d5a4:	6107      	str	r7, [r0, #16]
 800d5a6:	b005      	add	sp, #20
 800d5a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5ac:	f843 2b04 	str.w	r2, [r3], #4
 800d5b0:	e7db      	b.n	800d56a <__multiply+0x4e>
 800d5b2:	f8b3 a000 	ldrh.w	sl, [r3]
 800d5b6:	f1ba 0f00 	cmp.w	sl, #0
 800d5ba:	d020      	beq.n	800d5fe <__multiply+0xe2>
 800d5bc:	46b1      	mov	r9, r6
 800d5be:	2200      	movs	r2, #0
 800d5c0:	f105 0e14 	add.w	lr, r5, #20
 800d5c4:	f85e 4b04 	ldr.w	r4, [lr], #4
 800d5c8:	f8d9 b000 	ldr.w	fp, [r9]
 800d5cc:	b2a1      	uxth	r1, r4
 800d5ce:	fa1f fb8b 	uxth.w	fp, fp
 800d5d2:	fb0a b101 	mla	r1, sl, r1, fp
 800d5d6:	4411      	add	r1, r2
 800d5d8:	f8d9 2000 	ldr.w	r2, [r9]
 800d5dc:	0c24      	lsrs	r4, r4, #16
 800d5de:	0c12      	lsrs	r2, r2, #16
 800d5e0:	fb0a 2404 	mla	r4, sl, r4, r2
 800d5e4:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800d5e8:	b289      	uxth	r1, r1
 800d5ea:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800d5ee:	45f4      	cmp	ip, lr
 800d5f0:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800d5f4:	f849 1b04 	str.w	r1, [r9], #4
 800d5f8:	d8e4      	bhi.n	800d5c4 <__multiply+0xa8>
 800d5fa:	9901      	ldr	r1, [sp, #4]
 800d5fc:	5072      	str	r2, [r6, r1]
 800d5fe:	9a03      	ldr	r2, [sp, #12]
 800d600:	3304      	adds	r3, #4
 800d602:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d606:	f1b9 0f00 	cmp.w	r9, #0
 800d60a:	d01f      	beq.n	800d64c <__multiply+0x130>
 800d60c:	46b6      	mov	lr, r6
 800d60e:	f04f 0a00 	mov.w	sl, #0
 800d612:	6834      	ldr	r4, [r6, #0]
 800d614:	f105 0114 	add.w	r1, r5, #20
 800d618:	880a      	ldrh	r2, [r1, #0]
 800d61a:	f8be b002 	ldrh.w	fp, [lr, #2]
 800d61e:	b2a4      	uxth	r4, r4
 800d620:	fb09 b202 	mla	r2, r9, r2, fp
 800d624:	4492      	add	sl, r2
 800d626:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800d62a:	f84e 4b04 	str.w	r4, [lr], #4
 800d62e:	f851 4b04 	ldr.w	r4, [r1], #4
 800d632:	f8be 2000 	ldrh.w	r2, [lr]
 800d636:	0c24      	lsrs	r4, r4, #16
 800d638:	fb09 2404 	mla	r4, r9, r4, r2
 800d63c:	458c      	cmp	ip, r1
 800d63e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800d642:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d646:	d8e7      	bhi.n	800d618 <__multiply+0xfc>
 800d648:	9a01      	ldr	r2, [sp, #4]
 800d64a:	50b4      	str	r4, [r6, r2]
 800d64c:	3604      	adds	r6, #4
 800d64e:	e7a3      	b.n	800d598 <__multiply+0x7c>
 800d650:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d654:	2b00      	cmp	r3, #0
 800d656:	d1a5      	bne.n	800d5a4 <__multiply+0x88>
 800d658:	3f01      	subs	r7, #1
 800d65a:	e7a1      	b.n	800d5a0 <__multiply+0x84>
 800d65c:	0800f1cf 	.word	0x0800f1cf
 800d660:	0800f1e0 	.word	0x0800f1e0

0800d664 <__pow5mult>:
 800d664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d668:	4615      	mov	r5, r2
 800d66a:	f012 0203 	ands.w	r2, r2, #3
 800d66e:	4606      	mov	r6, r0
 800d670:	460f      	mov	r7, r1
 800d672:	d007      	beq.n	800d684 <__pow5mult+0x20>
 800d674:	4c25      	ldr	r4, [pc, #148]	; (800d70c <__pow5mult+0xa8>)
 800d676:	3a01      	subs	r2, #1
 800d678:	2300      	movs	r3, #0
 800d67a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d67e:	f7ff fe9f 	bl	800d3c0 <__multadd>
 800d682:	4607      	mov	r7, r0
 800d684:	10ad      	asrs	r5, r5, #2
 800d686:	d03d      	beq.n	800d704 <__pow5mult+0xa0>
 800d688:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d68a:	b97c      	cbnz	r4, 800d6ac <__pow5mult+0x48>
 800d68c:	2010      	movs	r0, #16
 800d68e:	f7ff fe11 	bl	800d2b4 <malloc>
 800d692:	4602      	mov	r2, r0
 800d694:	6270      	str	r0, [r6, #36]	; 0x24
 800d696:	b928      	cbnz	r0, 800d6a4 <__pow5mult+0x40>
 800d698:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d69c:	4b1c      	ldr	r3, [pc, #112]	; (800d710 <__pow5mult+0xac>)
 800d69e:	481d      	ldr	r0, [pc, #116]	; (800d714 <__pow5mult+0xb0>)
 800d6a0:	f000 fbce 	bl	800de40 <__assert_func>
 800d6a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d6a8:	6004      	str	r4, [r0, #0]
 800d6aa:	60c4      	str	r4, [r0, #12]
 800d6ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d6b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d6b4:	b94c      	cbnz	r4, 800d6ca <__pow5mult+0x66>
 800d6b6:	f240 2171 	movw	r1, #625	; 0x271
 800d6ba:	4630      	mov	r0, r6
 800d6bc:	f7ff ff18 	bl	800d4f0 <__i2b>
 800d6c0:	2300      	movs	r3, #0
 800d6c2:	4604      	mov	r4, r0
 800d6c4:	f8c8 0008 	str.w	r0, [r8, #8]
 800d6c8:	6003      	str	r3, [r0, #0]
 800d6ca:	f04f 0900 	mov.w	r9, #0
 800d6ce:	07eb      	lsls	r3, r5, #31
 800d6d0:	d50a      	bpl.n	800d6e8 <__pow5mult+0x84>
 800d6d2:	4639      	mov	r1, r7
 800d6d4:	4622      	mov	r2, r4
 800d6d6:	4630      	mov	r0, r6
 800d6d8:	f7ff ff20 	bl	800d51c <__multiply>
 800d6dc:	4680      	mov	r8, r0
 800d6de:	4639      	mov	r1, r7
 800d6e0:	4630      	mov	r0, r6
 800d6e2:	f7ff fe4b 	bl	800d37c <_Bfree>
 800d6e6:	4647      	mov	r7, r8
 800d6e8:	106d      	asrs	r5, r5, #1
 800d6ea:	d00b      	beq.n	800d704 <__pow5mult+0xa0>
 800d6ec:	6820      	ldr	r0, [r4, #0]
 800d6ee:	b938      	cbnz	r0, 800d700 <__pow5mult+0x9c>
 800d6f0:	4622      	mov	r2, r4
 800d6f2:	4621      	mov	r1, r4
 800d6f4:	4630      	mov	r0, r6
 800d6f6:	f7ff ff11 	bl	800d51c <__multiply>
 800d6fa:	6020      	str	r0, [r4, #0]
 800d6fc:	f8c0 9000 	str.w	r9, [r0]
 800d700:	4604      	mov	r4, r0
 800d702:	e7e4      	b.n	800d6ce <__pow5mult+0x6a>
 800d704:	4638      	mov	r0, r7
 800d706:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d70a:	bf00      	nop
 800d70c:	0800f330 	.word	0x0800f330
 800d710:	0800f159 	.word	0x0800f159
 800d714:	0800f1e0 	.word	0x0800f1e0

0800d718 <__lshift>:
 800d718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d71c:	460c      	mov	r4, r1
 800d71e:	4607      	mov	r7, r0
 800d720:	4691      	mov	r9, r2
 800d722:	6923      	ldr	r3, [r4, #16]
 800d724:	6849      	ldr	r1, [r1, #4]
 800d726:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d72a:	68a3      	ldr	r3, [r4, #8]
 800d72c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d730:	f108 0601 	add.w	r6, r8, #1
 800d734:	42b3      	cmp	r3, r6
 800d736:	db0b      	blt.n	800d750 <__lshift+0x38>
 800d738:	4638      	mov	r0, r7
 800d73a:	f7ff fddf 	bl	800d2fc <_Balloc>
 800d73e:	4605      	mov	r5, r0
 800d740:	b948      	cbnz	r0, 800d756 <__lshift+0x3e>
 800d742:	4602      	mov	r2, r0
 800d744:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d748:	4b27      	ldr	r3, [pc, #156]	; (800d7e8 <__lshift+0xd0>)
 800d74a:	4828      	ldr	r0, [pc, #160]	; (800d7ec <__lshift+0xd4>)
 800d74c:	f000 fb78 	bl	800de40 <__assert_func>
 800d750:	3101      	adds	r1, #1
 800d752:	005b      	lsls	r3, r3, #1
 800d754:	e7ee      	b.n	800d734 <__lshift+0x1c>
 800d756:	2300      	movs	r3, #0
 800d758:	f100 0114 	add.w	r1, r0, #20
 800d75c:	f100 0210 	add.w	r2, r0, #16
 800d760:	4618      	mov	r0, r3
 800d762:	4553      	cmp	r3, sl
 800d764:	db33      	blt.n	800d7ce <__lshift+0xb6>
 800d766:	6920      	ldr	r0, [r4, #16]
 800d768:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d76c:	f104 0314 	add.w	r3, r4, #20
 800d770:	f019 091f 	ands.w	r9, r9, #31
 800d774:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d778:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d77c:	d02b      	beq.n	800d7d6 <__lshift+0xbe>
 800d77e:	468a      	mov	sl, r1
 800d780:	2200      	movs	r2, #0
 800d782:	f1c9 0e20 	rsb	lr, r9, #32
 800d786:	6818      	ldr	r0, [r3, #0]
 800d788:	fa00 f009 	lsl.w	r0, r0, r9
 800d78c:	4302      	orrs	r2, r0
 800d78e:	f84a 2b04 	str.w	r2, [sl], #4
 800d792:	f853 2b04 	ldr.w	r2, [r3], #4
 800d796:	459c      	cmp	ip, r3
 800d798:	fa22 f20e 	lsr.w	r2, r2, lr
 800d79c:	d8f3      	bhi.n	800d786 <__lshift+0x6e>
 800d79e:	ebac 0304 	sub.w	r3, ip, r4
 800d7a2:	3b15      	subs	r3, #21
 800d7a4:	f023 0303 	bic.w	r3, r3, #3
 800d7a8:	3304      	adds	r3, #4
 800d7aa:	f104 0015 	add.w	r0, r4, #21
 800d7ae:	4584      	cmp	ip, r0
 800d7b0:	bf38      	it	cc
 800d7b2:	2304      	movcc	r3, #4
 800d7b4:	50ca      	str	r2, [r1, r3]
 800d7b6:	b10a      	cbz	r2, 800d7bc <__lshift+0xa4>
 800d7b8:	f108 0602 	add.w	r6, r8, #2
 800d7bc:	3e01      	subs	r6, #1
 800d7be:	4638      	mov	r0, r7
 800d7c0:	4621      	mov	r1, r4
 800d7c2:	612e      	str	r6, [r5, #16]
 800d7c4:	f7ff fdda 	bl	800d37c <_Bfree>
 800d7c8:	4628      	mov	r0, r5
 800d7ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7ce:	f842 0f04 	str.w	r0, [r2, #4]!
 800d7d2:	3301      	adds	r3, #1
 800d7d4:	e7c5      	b.n	800d762 <__lshift+0x4a>
 800d7d6:	3904      	subs	r1, #4
 800d7d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d7dc:	459c      	cmp	ip, r3
 800d7de:	f841 2f04 	str.w	r2, [r1, #4]!
 800d7e2:	d8f9      	bhi.n	800d7d8 <__lshift+0xc0>
 800d7e4:	e7ea      	b.n	800d7bc <__lshift+0xa4>
 800d7e6:	bf00      	nop
 800d7e8:	0800f1cf 	.word	0x0800f1cf
 800d7ec:	0800f1e0 	.word	0x0800f1e0

0800d7f0 <__mcmp>:
 800d7f0:	4603      	mov	r3, r0
 800d7f2:	690a      	ldr	r2, [r1, #16]
 800d7f4:	6900      	ldr	r0, [r0, #16]
 800d7f6:	b530      	push	{r4, r5, lr}
 800d7f8:	1a80      	subs	r0, r0, r2
 800d7fa:	d10d      	bne.n	800d818 <__mcmp+0x28>
 800d7fc:	3314      	adds	r3, #20
 800d7fe:	3114      	adds	r1, #20
 800d800:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d804:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d808:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d80c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d810:	4295      	cmp	r5, r2
 800d812:	d002      	beq.n	800d81a <__mcmp+0x2a>
 800d814:	d304      	bcc.n	800d820 <__mcmp+0x30>
 800d816:	2001      	movs	r0, #1
 800d818:	bd30      	pop	{r4, r5, pc}
 800d81a:	42a3      	cmp	r3, r4
 800d81c:	d3f4      	bcc.n	800d808 <__mcmp+0x18>
 800d81e:	e7fb      	b.n	800d818 <__mcmp+0x28>
 800d820:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d824:	e7f8      	b.n	800d818 <__mcmp+0x28>
	...

0800d828 <__mdiff>:
 800d828:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d82c:	460c      	mov	r4, r1
 800d82e:	4606      	mov	r6, r0
 800d830:	4611      	mov	r1, r2
 800d832:	4620      	mov	r0, r4
 800d834:	4692      	mov	sl, r2
 800d836:	f7ff ffdb 	bl	800d7f0 <__mcmp>
 800d83a:	1e05      	subs	r5, r0, #0
 800d83c:	d111      	bne.n	800d862 <__mdiff+0x3a>
 800d83e:	4629      	mov	r1, r5
 800d840:	4630      	mov	r0, r6
 800d842:	f7ff fd5b 	bl	800d2fc <_Balloc>
 800d846:	4602      	mov	r2, r0
 800d848:	b928      	cbnz	r0, 800d856 <__mdiff+0x2e>
 800d84a:	f240 2132 	movw	r1, #562	; 0x232
 800d84e:	4b3c      	ldr	r3, [pc, #240]	; (800d940 <__mdiff+0x118>)
 800d850:	483c      	ldr	r0, [pc, #240]	; (800d944 <__mdiff+0x11c>)
 800d852:	f000 faf5 	bl	800de40 <__assert_func>
 800d856:	2301      	movs	r3, #1
 800d858:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d85c:	4610      	mov	r0, r2
 800d85e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d862:	bfa4      	itt	ge
 800d864:	4653      	movge	r3, sl
 800d866:	46a2      	movge	sl, r4
 800d868:	4630      	mov	r0, r6
 800d86a:	f8da 1004 	ldr.w	r1, [sl, #4]
 800d86e:	bfa6      	itte	ge
 800d870:	461c      	movge	r4, r3
 800d872:	2500      	movge	r5, #0
 800d874:	2501      	movlt	r5, #1
 800d876:	f7ff fd41 	bl	800d2fc <_Balloc>
 800d87a:	4602      	mov	r2, r0
 800d87c:	b918      	cbnz	r0, 800d886 <__mdiff+0x5e>
 800d87e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d882:	4b2f      	ldr	r3, [pc, #188]	; (800d940 <__mdiff+0x118>)
 800d884:	e7e4      	b.n	800d850 <__mdiff+0x28>
 800d886:	f100 0814 	add.w	r8, r0, #20
 800d88a:	f8da 7010 	ldr.w	r7, [sl, #16]
 800d88e:	60c5      	str	r5, [r0, #12]
 800d890:	f04f 0c00 	mov.w	ip, #0
 800d894:	f10a 0514 	add.w	r5, sl, #20
 800d898:	f10a 0010 	add.w	r0, sl, #16
 800d89c:	46c2      	mov	sl, r8
 800d89e:	6926      	ldr	r6, [r4, #16]
 800d8a0:	f104 0914 	add.w	r9, r4, #20
 800d8a4:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800d8a8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d8ac:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800d8b0:	f859 3b04 	ldr.w	r3, [r9], #4
 800d8b4:	fa1f f18b 	uxth.w	r1, fp
 800d8b8:	4461      	add	r1, ip
 800d8ba:	fa1f fc83 	uxth.w	ip, r3
 800d8be:	0c1b      	lsrs	r3, r3, #16
 800d8c0:	eba1 010c 	sub.w	r1, r1, ip
 800d8c4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d8c8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800d8cc:	b289      	uxth	r1, r1
 800d8ce:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800d8d2:	454e      	cmp	r6, r9
 800d8d4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800d8d8:	f84a 3b04 	str.w	r3, [sl], #4
 800d8dc:	d8e6      	bhi.n	800d8ac <__mdiff+0x84>
 800d8de:	1b33      	subs	r3, r6, r4
 800d8e0:	3b15      	subs	r3, #21
 800d8e2:	f023 0303 	bic.w	r3, r3, #3
 800d8e6:	3415      	adds	r4, #21
 800d8e8:	3304      	adds	r3, #4
 800d8ea:	42a6      	cmp	r6, r4
 800d8ec:	bf38      	it	cc
 800d8ee:	2304      	movcc	r3, #4
 800d8f0:	441d      	add	r5, r3
 800d8f2:	4443      	add	r3, r8
 800d8f4:	461e      	mov	r6, r3
 800d8f6:	462c      	mov	r4, r5
 800d8f8:	4574      	cmp	r4, lr
 800d8fa:	d30e      	bcc.n	800d91a <__mdiff+0xf2>
 800d8fc:	f10e 0103 	add.w	r1, lr, #3
 800d900:	1b49      	subs	r1, r1, r5
 800d902:	f021 0103 	bic.w	r1, r1, #3
 800d906:	3d03      	subs	r5, #3
 800d908:	45ae      	cmp	lr, r5
 800d90a:	bf38      	it	cc
 800d90c:	2100      	movcc	r1, #0
 800d90e:	4419      	add	r1, r3
 800d910:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800d914:	b18b      	cbz	r3, 800d93a <__mdiff+0x112>
 800d916:	6117      	str	r7, [r2, #16]
 800d918:	e7a0      	b.n	800d85c <__mdiff+0x34>
 800d91a:	f854 8b04 	ldr.w	r8, [r4], #4
 800d91e:	fa1f f188 	uxth.w	r1, r8
 800d922:	4461      	add	r1, ip
 800d924:	1408      	asrs	r0, r1, #16
 800d926:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800d92a:	b289      	uxth	r1, r1
 800d92c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d930:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d934:	f846 1b04 	str.w	r1, [r6], #4
 800d938:	e7de      	b.n	800d8f8 <__mdiff+0xd0>
 800d93a:	3f01      	subs	r7, #1
 800d93c:	e7e8      	b.n	800d910 <__mdiff+0xe8>
 800d93e:	bf00      	nop
 800d940:	0800f1cf 	.word	0x0800f1cf
 800d944:	0800f1e0 	.word	0x0800f1e0

0800d948 <__d2b>:
 800d948:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d94c:	2101      	movs	r1, #1
 800d94e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800d952:	4690      	mov	r8, r2
 800d954:	461d      	mov	r5, r3
 800d956:	f7ff fcd1 	bl	800d2fc <_Balloc>
 800d95a:	4604      	mov	r4, r0
 800d95c:	b930      	cbnz	r0, 800d96c <__d2b+0x24>
 800d95e:	4602      	mov	r2, r0
 800d960:	f240 310a 	movw	r1, #778	; 0x30a
 800d964:	4b24      	ldr	r3, [pc, #144]	; (800d9f8 <__d2b+0xb0>)
 800d966:	4825      	ldr	r0, [pc, #148]	; (800d9fc <__d2b+0xb4>)
 800d968:	f000 fa6a 	bl	800de40 <__assert_func>
 800d96c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800d970:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800d974:	bb2d      	cbnz	r5, 800d9c2 <__d2b+0x7a>
 800d976:	9301      	str	r3, [sp, #4]
 800d978:	f1b8 0300 	subs.w	r3, r8, #0
 800d97c:	d026      	beq.n	800d9cc <__d2b+0x84>
 800d97e:	4668      	mov	r0, sp
 800d980:	9300      	str	r3, [sp, #0]
 800d982:	f7ff fd87 	bl	800d494 <__lo0bits>
 800d986:	9900      	ldr	r1, [sp, #0]
 800d988:	b1f0      	cbz	r0, 800d9c8 <__d2b+0x80>
 800d98a:	9a01      	ldr	r2, [sp, #4]
 800d98c:	f1c0 0320 	rsb	r3, r0, #32
 800d990:	fa02 f303 	lsl.w	r3, r2, r3
 800d994:	430b      	orrs	r3, r1
 800d996:	40c2      	lsrs	r2, r0
 800d998:	6163      	str	r3, [r4, #20]
 800d99a:	9201      	str	r2, [sp, #4]
 800d99c:	9b01      	ldr	r3, [sp, #4]
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	bf14      	ite	ne
 800d9a2:	2102      	movne	r1, #2
 800d9a4:	2101      	moveq	r1, #1
 800d9a6:	61a3      	str	r3, [r4, #24]
 800d9a8:	6121      	str	r1, [r4, #16]
 800d9aa:	b1c5      	cbz	r5, 800d9de <__d2b+0x96>
 800d9ac:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d9b0:	4405      	add	r5, r0
 800d9b2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d9b6:	603d      	str	r5, [r7, #0]
 800d9b8:	6030      	str	r0, [r6, #0]
 800d9ba:	4620      	mov	r0, r4
 800d9bc:	b002      	add	sp, #8
 800d9be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d9c6:	e7d6      	b.n	800d976 <__d2b+0x2e>
 800d9c8:	6161      	str	r1, [r4, #20]
 800d9ca:	e7e7      	b.n	800d99c <__d2b+0x54>
 800d9cc:	a801      	add	r0, sp, #4
 800d9ce:	f7ff fd61 	bl	800d494 <__lo0bits>
 800d9d2:	2101      	movs	r1, #1
 800d9d4:	9b01      	ldr	r3, [sp, #4]
 800d9d6:	6121      	str	r1, [r4, #16]
 800d9d8:	6163      	str	r3, [r4, #20]
 800d9da:	3020      	adds	r0, #32
 800d9dc:	e7e5      	b.n	800d9aa <__d2b+0x62>
 800d9de:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800d9e2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d9e6:	6038      	str	r0, [r7, #0]
 800d9e8:	6918      	ldr	r0, [r3, #16]
 800d9ea:	f7ff fd33 	bl	800d454 <__hi0bits>
 800d9ee:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800d9f2:	6031      	str	r1, [r6, #0]
 800d9f4:	e7e1      	b.n	800d9ba <__d2b+0x72>
 800d9f6:	bf00      	nop
 800d9f8:	0800f1cf 	.word	0x0800f1cf
 800d9fc:	0800f1e0 	.word	0x0800f1e0

0800da00 <_calloc_r>:
 800da00:	b538      	push	{r3, r4, r5, lr}
 800da02:	fb02 f501 	mul.w	r5, r2, r1
 800da06:	4629      	mov	r1, r5
 800da08:	f000 f854 	bl	800dab4 <_malloc_r>
 800da0c:	4604      	mov	r4, r0
 800da0e:	b118      	cbz	r0, 800da18 <_calloc_r+0x18>
 800da10:	462a      	mov	r2, r5
 800da12:	2100      	movs	r1, #0
 800da14:	f7fe f946 	bl	800bca4 <memset>
 800da18:	4620      	mov	r0, r4
 800da1a:	bd38      	pop	{r3, r4, r5, pc}

0800da1c <_free_r>:
 800da1c:	b538      	push	{r3, r4, r5, lr}
 800da1e:	4605      	mov	r5, r0
 800da20:	2900      	cmp	r1, #0
 800da22:	d043      	beq.n	800daac <_free_r+0x90>
 800da24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da28:	1f0c      	subs	r4, r1, #4
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	bfb8      	it	lt
 800da2e:	18e4      	addlt	r4, r4, r3
 800da30:	f000 fa62 	bl	800def8 <__malloc_lock>
 800da34:	4a1e      	ldr	r2, [pc, #120]	; (800dab0 <_free_r+0x94>)
 800da36:	6813      	ldr	r3, [r2, #0]
 800da38:	4610      	mov	r0, r2
 800da3a:	b933      	cbnz	r3, 800da4a <_free_r+0x2e>
 800da3c:	6063      	str	r3, [r4, #4]
 800da3e:	6014      	str	r4, [r2, #0]
 800da40:	4628      	mov	r0, r5
 800da42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800da46:	f000 ba5d 	b.w	800df04 <__malloc_unlock>
 800da4a:	42a3      	cmp	r3, r4
 800da4c:	d90a      	bls.n	800da64 <_free_r+0x48>
 800da4e:	6821      	ldr	r1, [r4, #0]
 800da50:	1862      	adds	r2, r4, r1
 800da52:	4293      	cmp	r3, r2
 800da54:	bf01      	itttt	eq
 800da56:	681a      	ldreq	r2, [r3, #0]
 800da58:	685b      	ldreq	r3, [r3, #4]
 800da5a:	1852      	addeq	r2, r2, r1
 800da5c:	6022      	streq	r2, [r4, #0]
 800da5e:	6063      	str	r3, [r4, #4]
 800da60:	6004      	str	r4, [r0, #0]
 800da62:	e7ed      	b.n	800da40 <_free_r+0x24>
 800da64:	461a      	mov	r2, r3
 800da66:	685b      	ldr	r3, [r3, #4]
 800da68:	b10b      	cbz	r3, 800da6e <_free_r+0x52>
 800da6a:	42a3      	cmp	r3, r4
 800da6c:	d9fa      	bls.n	800da64 <_free_r+0x48>
 800da6e:	6811      	ldr	r1, [r2, #0]
 800da70:	1850      	adds	r0, r2, r1
 800da72:	42a0      	cmp	r0, r4
 800da74:	d10b      	bne.n	800da8e <_free_r+0x72>
 800da76:	6820      	ldr	r0, [r4, #0]
 800da78:	4401      	add	r1, r0
 800da7a:	1850      	adds	r0, r2, r1
 800da7c:	4283      	cmp	r3, r0
 800da7e:	6011      	str	r1, [r2, #0]
 800da80:	d1de      	bne.n	800da40 <_free_r+0x24>
 800da82:	6818      	ldr	r0, [r3, #0]
 800da84:	685b      	ldr	r3, [r3, #4]
 800da86:	4401      	add	r1, r0
 800da88:	6011      	str	r1, [r2, #0]
 800da8a:	6053      	str	r3, [r2, #4]
 800da8c:	e7d8      	b.n	800da40 <_free_r+0x24>
 800da8e:	d902      	bls.n	800da96 <_free_r+0x7a>
 800da90:	230c      	movs	r3, #12
 800da92:	602b      	str	r3, [r5, #0]
 800da94:	e7d4      	b.n	800da40 <_free_r+0x24>
 800da96:	6820      	ldr	r0, [r4, #0]
 800da98:	1821      	adds	r1, r4, r0
 800da9a:	428b      	cmp	r3, r1
 800da9c:	bf01      	itttt	eq
 800da9e:	6819      	ldreq	r1, [r3, #0]
 800daa0:	685b      	ldreq	r3, [r3, #4]
 800daa2:	1809      	addeq	r1, r1, r0
 800daa4:	6021      	streq	r1, [r4, #0]
 800daa6:	6063      	str	r3, [r4, #4]
 800daa8:	6054      	str	r4, [r2, #4]
 800daaa:	e7c9      	b.n	800da40 <_free_r+0x24>
 800daac:	bd38      	pop	{r3, r4, r5, pc}
 800daae:	bf00      	nop
 800dab0:	20000434 	.word	0x20000434

0800dab4 <_malloc_r>:
 800dab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dab6:	1ccd      	adds	r5, r1, #3
 800dab8:	f025 0503 	bic.w	r5, r5, #3
 800dabc:	3508      	adds	r5, #8
 800dabe:	2d0c      	cmp	r5, #12
 800dac0:	bf38      	it	cc
 800dac2:	250c      	movcc	r5, #12
 800dac4:	2d00      	cmp	r5, #0
 800dac6:	4606      	mov	r6, r0
 800dac8:	db01      	blt.n	800dace <_malloc_r+0x1a>
 800daca:	42a9      	cmp	r1, r5
 800dacc:	d903      	bls.n	800dad6 <_malloc_r+0x22>
 800dace:	230c      	movs	r3, #12
 800dad0:	6033      	str	r3, [r6, #0]
 800dad2:	2000      	movs	r0, #0
 800dad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dad6:	f000 fa0f 	bl	800def8 <__malloc_lock>
 800dada:	4921      	ldr	r1, [pc, #132]	; (800db60 <_malloc_r+0xac>)
 800dadc:	680a      	ldr	r2, [r1, #0]
 800dade:	4614      	mov	r4, r2
 800dae0:	b99c      	cbnz	r4, 800db0a <_malloc_r+0x56>
 800dae2:	4f20      	ldr	r7, [pc, #128]	; (800db64 <_malloc_r+0xb0>)
 800dae4:	683b      	ldr	r3, [r7, #0]
 800dae6:	b923      	cbnz	r3, 800daf2 <_malloc_r+0x3e>
 800dae8:	4621      	mov	r1, r4
 800daea:	4630      	mov	r0, r6
 800daec:	f000 f998 	bl	800de20 <_sbrk_r>
 800daf0:	6038      	str	r0, [r7, #0]
 800daf2:	4629      	mov	r1, r5
 800daf4:	4630      	mov	r0, r6
 800daf6:	f000 f993 	bl	800de20 <_sbrk_r>
 800dafa:	1c43      	adds	r3, r0, #1
 800dafc:	d123      	bne.n	800db46 <_malloc_r+0x92>
 800dafe:	230c      	movs	r3, #12
 800db00:	4630      	mov	r0, r6
 800db02:	6033      	str	r3, [r6, #0]
 800db04:	f000 f9fe 	bl	800df04 <__malloc_unlock>
 800db08:	e7e3      	b.n	800dad2 <_malloc_r+0x1e>
 800db0a:	6823      	ldr	r3, [r4, #0]
 800db0c:	1b5b      	subs	r3, r3, r5
 800db0e:	d417      	bmi.n	800db40 <_malloc_r+0x8c>
 800db10:	2b0b      	cmp	r3, #11
 800db12:	d903      	bls.n	800db1c <_malloc_r+0x68>
 800db14:	6023      	str	r3, [r4, #0]
 800db16:	441c      	add	r4, r3
 800db18:	6025      	str	r5, [r4, #0]
 800db1a:	e004      	b.n	800db26 <_malloc_r+0x72>
 800db1c:	6863      	ldr	r3, [r4, #4]
 800db1e:	42a2      	cmp	r2, r4
 800db20:	bf0c      	ite	eq
 800db22:	600b      	streq	r3, [r1, #0]
 800db24:	6053      	strne	r3, [r2, #4]
 800db26:	4630      	mov	r0, r6
 800db28:	f000 f9ec 	bl	800df04 <__malloc_unlock>
 800db2c:	f104 000b 	add.w	r0, r4, #11
 800db30:	1d23      	adds	r3, r4, #4
 800db32:	f020 0007 	bic.w	r0, r0, #7
 800db36:	1ac2      	subs	r2, r0, r3
 800db38:	d0cc      	beq.n	800dad4 <_malloc_r+0x20>
 800db3a:	1a1b      	subs	r3, r3, r0
 800db3c:	50a3      	str	r3, [r4, r2]
 800db3e:	e7c9      	b.n	800dad4 <_malloc_r+0x20>
 800db40:	4622      	mov	r2, r4
 800db42:	6864      	ldr	r4, [r4, #4]
 800db44:	e7cc      	b.n	800dae0 <_malloc_r+0x2c>
 800db46:	1cc4      	adds	r4, r0, #3
 800db48:	f024 0403 	bic.w	r4, r4, #3
 800db4c:	42a0      	cmp	r0, r4
 800db4e:	d0e3      	beq.n	800db18 <_malloc_r+0x64>
 800db50:	1a21      	subs	r1, r4, r0
 800db52:	4630      	mov	r0, r6
 800db54:	f000 f964 	bl	800de20 <_sbrk_r>
 800db58:	3001      	adds	r0, #1
 800db5a:	d1dd      	bne.n	800db18 <_malloc_r+0x64>
 800db5c:	e7cf      	b.n	800dafe <_malloc_r+0x4a>
 800db5e:	bf00      	nop
 800db60:	20000434 	.word	0x20000434
 800db64:	20000438 	.word	0x20000438

0800db68 <__ssputs_r>:
 800db68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db6c:	688e      	ldr	r6, [r1, #8]
 800db6e:	4682      	mov	sl, r0
 800db70:	429e      	cmp	r6, r3
 800db72:	460c      	mov	r4, r1
 800db74:	4690      	mov	r8, r2
 800db76:	461f      	mov	r7, r3
 800db78:	d838      	bhi.n	800dbec <__ssputs_r+0x84>
 800db7a:	898a      	ldrh	r2, [r1, #12]
 800db7c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800db80:	d032      	beq.n	800dbe8 <__ssputs_r+0x80>
 800db82:	6825      	ldr	r5, [r4, #0]
 800db84:	6909      	ldr	r1, [r1, #16]
 800db86:	3301      	adds	r3, #1
 800db88:	eba5 0901 	sub.w	r9, r5, r1
 800db8c:	6965      	ldr	r5, [r4, #20]
 800db8e:	444b      	add	r3, r9
 800db90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800db94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800db98:	106d      	asrs	r5, r5, #1
 800db9a:	429d      	cmp	r5, r3
 800db9c:	bf38      	it	cc
 800db9e:	461d      	movcc	r5, r3
 800dba0:	0553      	lsls	r3, r2, #21
 800dba2:	d531      	bpl.n	800dc08 <__ssputs_r+0xa0>
 800dba4:	4629      	mov	r1, r5
 800dba6:	f7ff ff85 	bl	800dab4 <_malloc_r>
 800dbaa:	4606      	mov	r6, r0
 800dbac:	b950      	cbnz	r0, 800dbc4 <__ssputs_r+0x5c>
 800dbae:	230c      	movs	r3, #12
 800dbb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dbb4:	f8ca 3000 	str.w	r3, [sl]
 800dbb8:	89a3      	ldrh	r3, [r4, #12]
 800dbba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dbbe:	81a3      	strh	r3, [r4, #12]
 800dbc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbc4:	464a      	mov	r2, r9
 800dbc6:	6921      	ldr	r1, [r4, #16]
 800dbc8:	f7ff fb8a 	bl	800d2e0 <memcpy>
 800dbcc:	89a3      	ldrh	r3, [r4, #12]
 800dbce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800dbd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dbd6:	81a3      	strh	r3, [r4, #12]
 800dbd8:	6126      	str	r6, [r4, #16]
 800dbda:	444e      	add	r6, r9
 800dbdc:	6026      	str	r6, [r4, #0]
 800dbde:	463e      	mov	r6, r7
 800dbe0:	6165      	str	r5, [r4, #20]
 800dbe2:	eba5 0509 	sub.w	r5, r5, r9
 800dbe6:	60a5      	str	r5, [r4, #8]
 800dbe8:	42be      	cmp	r6, r7
 800dbea:	d900      	bls.n	800dbee <__ssputs_r+0x86>
 800dbec:	463e      	mov	r6, r7
 800dbee:	4632      	mov	r2, r6
 800dbf0:	4641      	mov	r1, r8
 800dbf2:	6820      	ldr	r0, [r4, #0]
 800dbf4:	f000 f966 	bl	800dec4 <memmove>
 800dbf8:	68a3      	ldr	r3, [r4, #8]
 800dbfa:	6822      	ldr	r2, [r4, #0]
 800dbfc:	1b9b      	subs	r3, r3, r6
 800dbfe:	4432      	add	r2, r6
 800dc00:	2000      	movs	r0, #0
 800dc02:	60a3      	str	r3, [r4, #8]
 800dc04:	6022      	str	r2, [r4, #0]
 800dc06:	e7db      	b.n	800dbc0 <__ssputs_r+0x58>
 800dc08:	462a      	mov	r2, r5
 800dc0a:	f000 f981 	bl	800df10 <_realloc_r>
 800dc0e:	4606      	mov	r6, r0
 800dc10:	2800      	cmp	r0, #0
 800dc12:	d1e1      	bne.n	800dbd8 <__ssputs_r+0x70>
 800dc14:	4650      	mov	r0, sl
 800dc16:	6921      	ldr	r1, [r4, #16]
 800dc18:	f7ff ff00 	bl	800da1c <_free_r>
 800dc1c:	e7c7      	b.n	800dbae <__ssputs_r+0x46>
	...

0800dc20 <_svfiprintf_r>:
 800dc20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc24:	4698      	mov	r8, r3
 800dc26:	898b      	ldrh	r3, [r1, #12]
 800dc28:	4607      	mov	r7, r0
 800dc2a:	061b      	lsls	r3, r3, #24
 800dc2c:	460d      	mov	r5, r1
 800dc2e:	4614      	mov	r4, r2
 800dc30:	b09d      	sub	sp, #116	; 0x74
 800dc32:	d50e      	bpl.n	800dc52 <_svfiprintf_r+0x32>
 800dc34:	690b      	ldr	r3, [r1, #16]
 800dc36:	b963      	cbnz	r3, 800dc52 <_svfiprintf_r+0x32>
 800dc38:	2140      	movs	r1, #64	; 0x40
 800dc3a:	f7ff ff3b 	bl	800dab4 <_malloc_r>
 800dc3e:	6028      	str	r0, [r5, #0]
 800dc40:	6128      	str	r0, [r5, #16]
 800dc42:	b920      	cbnz	r0, 800dc4e <_svfiprintf_r+0x2e>
 800dc44:	230c      	movs	r3, #12
 800dc46:	603b      	str	r3, [r7, #0]
 800dc48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dc4c:	e0d1      	b.n	800ddf2 <_svfiprintf_r+0x1d2>
 800dc4e:	2340      	movs	r3, #64	; 0x40
 800dc50:	616b      	str	r3, [r5, #20]
 800dc52:	2300      	movs	r3, #0
 800dc54:	9309      	str	r3, [sp, #36]	; 0x24
 800dc56:	2320      	movs	r3, #32
 800dc58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dc5c:	2330      	movs	r3, #48	; 0x30
 800dc5e:	f04f 0901 	mov.w	r9, #1
 800dc62:	f8cd 800c 	str.w	r8, [sp, #12]
 800dc66:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800de0c <_svfiprintf_r+0x1ec>
 800dc6a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dc6e:	4623      	mov	r3, r4
 800dc70:	469a      	mov	sl, r3
 800dc72:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dc76:	b10a      	cbz	r2, 800dc7c <_svfiprintf_r+0x5c>
 800dc78:	2a25      	cmp	r2, #37	; 0x25
 800dc7a:	d1f9      	bne.n	800dc70 <_svfiprintf_r+0x50>
 800dc7c:	ebba 0b04 	subs.w	fp, sl, r4
 800dc80:	d00b      	beq.n	800dc9a <_svfiprintf_r+0x7a>
 800dc82:	465b      	mov	r3, fp
 800dc84:	4622      	mov	r2, r4
 800dc86:	4629      	mov	r1, r5
 800dc88:	4638      	mov	r0, r7
 800dc8a:	f7ff ff6d 	bl	800db68 <__ssputs_r>
 800dc8e:	3001      	adds	r0, #1
 800dc90:	f000 80aa 	beq.w	800dde8 <_svfiprintf_r+0x1c8>
 800dc94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dc96:	445a      	add	r2, fp
 800dc98:	9209      	str	r2, [sp, #36]	; 0x24
 800dc9a:	f89a 3000 	ldrb.w	r3, [sl]
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	f000 80a2 	beq.w	800dde8 <_svfiprintf_r+0x1c8>
 800dca4:	2300      	movs	r3, #0
 800dca6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dcaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dcae:	f10a 0a01 	add.w	sl, sl, #1
 800dcb2:	9304      	str	r3, [sp, #16]
 800dcb4:	9307      	str	r3, [sp, #28]
 800dcb6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dcba:	931a      	str	r3, [sp, #104]	; 0x68
 800dcbc:	4654      	mov	r4, sl
 800dcbe:	2205      	movs	r2, #5
 800dcc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dcc4:	4851      	ldr	r0, [pc, #324]	; (800de0c <_svfiprintf_r+0x1ec>)
 800dcc6:	f7ff fafd 	bl	800d2c4 <memchr>
 800dcca:	9a04      	ldr	r2, [sp, #16]
 800dccc:	b9d8      	cbnz	r0, 800dd06 <_svfiprintf_r+0xe6>
 800dcce:	06d0      	lsls	r0, r2, #27
 800dcd0:	bf44      	itt	mi
 800dcd2:	2320      	movmi	r3, #32
 800dcd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dcd8:	0711      	lsls	r1, r2, #28
 800dcda:	bf44      	itt	mi
 800dcdc:	232b      	movmi	r3, #43	; 0x2b
 800dcde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dce2:	f89a 3000 	ldrb.w	r3, [sl]
 800dce6:	2b2a      	cmp	r3, #42	; 0x2a
 800dce8:	d015      	beq.n	800dd16 <_svfiprintf_r+0xf6>
 800dcea:	4654      	mov	r4, sl
 800dcec:	2000      	movs	r0, #0
 800dcee:	f04f 0c0a 	mov.w	ip, #10
 800dcf2:	9a07      	ldr	r2, [sp, #28]
 800dcf4:	4621      	mov	r1, r4
 800dcf6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dcfa:	3b30      	subs	r3, #48	; 0x30
 800dcfc:	2b09      	cmp	r3, #9
 800dcfe:	d94e      	bls.n	800dd9e <_svfiprintf_r+0x17e>
 800dd00:	b1b0      	cbz	r0, 800dd30 <_svfiprintf_r+0x110>
 800dd02:	9207      	str	r2, [sp, #28]
 800dd04:	e014      	b.n	800dd30 <_svfiprintf_r+0x110>
 800dd06:	eba0 0308 	sub.w	r3, r0, r8
 800dd0a:	fa09 f303 	lsl.w	r3, r9, r3
 800dd0e:	4313      	orrs	r3, r2
 800dd10:	46a2      	mov	sl, r4
 800dd12:	9304      	str	r3, [sp, #16]
 800dd14:	e7d2      	b.n	800dcbc <_svfiprintf_r+0x9c>
 800dd16:	9b03      	ldr	r3, [sp, #12]
 800dd18:	1d19      	adds	r1, r3, #4
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	9103      	str	r1, [sp, #12]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	bfbb      	ittet	lt
 800dd22:	425b      	neglt	r3, r3
 800dd24:	f042 0202 	orrlt.w	r2, r2, #2
 800dd28:	9307      	strge	r3, [sp, #28]
 800dd2a:	9307      	strlt	r3, [sp, #28]
 800dd2c:	bfb8      	it	lt
 800dd2e:	9204      	strlt	r2, [sp, #16]
 800dd30:	7823      	ldrb	r3, [r4, #0]
 800dd32:	2b2e      	cmp	r3, #46	; 0x2e
 800dd34:	d10c      	bne.n	800dd50 <_svfiprintf_r+0x130>
 800dd36:	7863      	ldrb	r3, [r4, #1]
 800dd38:	2b2a      	cmp	r3, #42	; 0x2a
 800dd3a:	d135      	bne.n	800dda8 <_svfiprintf_r+0x188>
 800dd3c:	9b03      	ldr	r3, [sp, #12]
 800dd3e:	3402      	adds	r4, #2
 800dd40:	1d1a      	adds	r2, r3, #4
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	9203      	str	r2, [sp, #12]
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	bfb8      	it	lt
 800dd4a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800dd4e:	9305      	str	r3, [sp, #20]
 800dd50:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800de1c <_svfiprintf_r+0x1fc>
 800dd54:	2203      	movs	r2, #3
 800dd56:	4650      	mov	r0, sl
 800dd58:	7821      	ldrb	r1, [r4, #0]
 800dd5a:	f7ff fab3 	bl	800d2c4 <memchr>
 800dd5e:	b140      	cbz	r0, 800dd72 <_svfiprintf_r+0x152>
 800dd60:	2340      	movs	r3, #64	; 0x40
 800dd62:	eba0 000a 	sub.w	r0, r0, sl
 800dd66:	fa03 f000 	lsl.w	r0, r3, r0
 800dd6a:	9b04      	ldr	r3, [sp, #16]
 800dd6c:	3401      	adds	r4, #1
 800dd6e:	4303      	orrs	r3, r0
 800dd70:	9304      	str	r3, [sp, #16]
 800dd72:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd76:	2206      	movs	r2, #6
 800dd78:	4825      	ldr	r0, [pc, #148]	; (800de10 <_svfiprintf_r+0x1f0>)
 800dd7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dd7e:	f7ff faa1 	bl	800d2c4 <memchr>
 800dd82:	2800      	cmp	r0, #0
 800dd84:	d038      	beq.n	800ddf8 <_svfiprintf_r+0x1d8>
 800dd86:	4b23      	ldr	r3, [pc, #140]	; (800de14 <_svfiprintf_r+0x1f4>)
 800dd88:	bb1b      	cbnz	r3, 800ddd2 <_svfiprintf_r+0x1b2>
 800dd8a:	9b03      	ldr	r3, [sp, #12]
 800dd8c:	3307      	adds	r3, #7
 800dd8e:	f023 0307 	bic.w	r3, r3, #7
 800dd92:	3308      	adds	r3, #8
 800dd94:	9303      	str	r3, [sp, #12]
 800dd96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd98:	4433      	add	r3, r6
 800dd9a:	9309      	str	r3, [sp, #36]	; 0x24
 800dd9c:	e767      	b.n	800dc6e <_svfiprintf_r+0x4e>
 800dd9e:	460c      	mov	r4, r1
 800dda0:	2001      	movs	r0, #1
 800dda2:	fb0c 3202 	mla	r2, ip, r2, r3
 800dda6:	e7a5      	b.n	800dcf4 <_svfiprintf_r+0xd4>
 800dda8:	2300      	movs	r3, #0
 800ddaa:	f04f 0c0a 	mov.w	ip, #10
 800ddae:	4619      	mov	r1, r3
 800ddb0:	3401      	adds	r4, #1
 800ddb2:	9305      	str	r3, [sp, #20]
 800ddb4:	4620      	mov	r0, r4
 800ddb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ddba:	3a30      	subs	r2, #48	; 0x30
 800ddbc:	2a09      	cmp	r2, #9
 800ddbe:	d903      	bls.n	800ddc8 <_svfiprintf_r+0x1a8>
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d0c5      	beq.n	800dd50 <_svfiprintf_r+0x130>
 800ddc4:	9105      	str	r1, [sp, #20]
 800ddc6:	e7c3      	b.n	800dd50 <_svfiprintf_r+0x130>
 800ddc8:	4604      	mov	r4, r0
 800ddca:	2301      	movs	r3, #1
 800ddcc:	fb0c 2101 	mla	r1, ip, r1, r2
 800ddd0:	e7f0      	b.n	800ddb4 <_svfiprintf_r+0x194>
 800ddd2:	ab03      	add	r3, sp, #12
 800ddd4:	9300      	str	r3, [sp, #0]
 800ddd6:	462a      	mov	r2, r5
 800ddd8:	4638      	mov	r0, r7
 800ddda:	4b0f      	ldr	r3, [pc, #60]	; (800de18 <_svfiprintf_r+0x1f8>)
 800dddc:	a904      	add	r1, sp, #16
 800ddde:	f7fe f807 	bl	800bdf0 <_printf_float>
 800dde2:	1c42      	adds	r2, r0, #1
 800dde4:	4606      	mov	r6, r0
 800dde6:	d1d6      	bne.n	800dd96 <_svfiprintf_r+0x176>
 800dde8:	89ab      	ldrh	r3, [r5, #12]
 800ddea:	065b      	lsls	r3, r3, #25
 800ddec:	f53f af2c 	bmi.w	800dc48 <_svfiprintf_r+0x28>
 800ddf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ddf2:	b01d      	add	sp, #116	; 0x74
 800ddf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddf8:	ab03      	add	r3, sp, #12
 800ddfa:	9300      	str	r3, [sp, #0]
 800ddfc:	462a      	mov	r2, r5
 800ddfe:	4638      	mov	r0, r7
 800de00:	4b05      	ldr	r3, [pc, #20]	; (800de18 <_svfiprintf_r+0x1f8>)
 800de02:	a904      	add	r1, sp, #16
 800de04:	f7fe fa90 	bl	800c328 <_printf_i>
 800de08:	e7eb      	b.n	800dde2 <_svfiprintf_r+0x1c2>
 800de0a:	bf00      	nop
 800de0c:	0800f33c 	.word	0x0800f33c
 800de10:	0800f346 	.word	0x0800f346
 800de14:	0800bdf1 	.word	0x0800bdf1
 800de18:	0800db69 	.word	0x0800db69
 800de1c:	0800f342 	.word	0x0800f342

0800de20 <_sbrk_r>:
 800de20:	b538      	push	{r3, r4, r5, lr}
 800de22:	2300      	movs	r3, #0
 800de24:	4d05      	ldr	r5, [pc, #20]	; (800de3c <_sbrk_r+0x1c>)
 800de26:	4604      	mov	r4, r0
 800de28:	4608      	mov	r0, r1
 800de2a:	602b      	str	r3, [r5, #0]
 800de2c:	f7f4 f9b2 	bl	8002194 <_sbrk>
 800de30:	1c43      	adds	r3, r0, #1
 800de32:	d102      	bne.n	800de3a <_sbrk_r+0x1a>
 800de34:	682b      	ldr	r3, [r5, #0]
 800de36:	b103      	cbz	r3, 800de3a <_sbrk_r+0x1a>
 800de38:	6023      	str	r3, [r4, #0]
 800de3a:	bd38      	pop	{r3, r4, r5, pc}
 800de3c:	20000f90 	.word	0x20000f90

0800de40 <__assert_func>:
 800de40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800de42:	4614      	mov	r4, r2
 800de44:	461a      	mov	r2, r3
 800de46:	4b09      	ldr	r3, [pc, #36]	; (800de6c <__assert_func+0x2c>)
 800de48:	4605      	mov	r5, r0
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	68d8      	ldr	r0, [r3, #12]
 800de4e:	b14c      	cbz	r4, 800de64 <__assert_func+0x24>
 800de50:	4b07      	ldr	r3, [pc, #28]	; (800de70 <__assert_func+0x30>)
 800de52:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800de56:	9100      	str	r1, [sp, #0]
 800de58:	462b      	mov	r3, r5
 800de5a:	4906      	ldr	r1, [pc, #24]	; (800de74 <__assert_func+0x34>)
 800de5c:	f000 f80e 	bl	800de7c <fiprintf>
 800de60:	f000 faa2 	bl	800e3a8 <abort>
 800de64:	4b04      	ldr	r3, [pc, #16]	; (800de78 <__assert_func+0x38>)
 800de66:	461c      	mov	r4, r3
 800de68:	e7f3      	b.n	800de52 <__assert_func+0x12>
 800de6a:	bf00      	nop
 800de6c:	200001f8 	.word	0x200001f8
 800de70:	0800f34d 	.word	0x0800f34d
 800de74:	0800f35a 	.word	0x0800f35a
 800de78:	0800f388 	.word	0x0800f388

0800de7c <fiprintf>:
 800de7c:	b40e      	push	{r1, r2, r3}
 800de7e:	b503      	push	{r0, r1, lr}
 800de80:	4601      	mov	r1, r0
 800de82:	ab03      	add	r3, sp, #12
 800de84:	4805      	ldr	r0, [pc, #20]	; (800de9c <fiprintf+0x20>)
 800de86:	f853 2b04 	ldr.w	r2, [r3], #4
 800de8a:	6800      	ldr	r0, [r0, #0]
 800de8c:	9301      	str	r3, [sp, #4]
 800de8e:	f000 f88d 	bl	800dfac <_vfiprintf_r>
 800de92:	b002      	add	sp, #8
 800de94:	f85d eb04 	ldr.w	lr, [sp], #4
 800de98:	b003      	add	sp, #12
 800de9a:	4770      	bx	lr
 800de9c:	200001f8 	.word	0x200001f8

0800dea0 <__ascii_mbtowc>:
 800dea0:	b082      	sub	sp, #8
 800dea2:	b901      	cbnz	r1, 800dea6 <__ascii_mbtowc+0x6>
 800dea4:	a901      	add	r1, sp, #4
 800dea6:	b142      	cbz	r2, 800deba <__ascii_mbtowc+0x1a>
 800dea8:	b14b      	cbz	r3, 800debe <__ascii_mbtowc+0x1e>
 800deaa:	7813      	ldrb	r3, [r2, #0]
 800deac:	600b      	str	r3, [r1, #0]
 800deae:	7812      	ldrb	r2, [r2, #0]
 800deb0:	1e10      	subs	r0, r2, #0
 800deb2:	bf18      	it	ne
 800deb4:	2001      	movne	r0, #1
 800deb6:	b002      	add	sp, #8
 800deb8:	4770      	bx	lr
 800deba:	4610      	mov	r0, r2
 800debc:	e7fb      	b.n	800deb6 <__ascii_mbtowc+0x16>
 800debe:	f06f 0001 	mvn.w	r0, #1
 800dec2:	e7f8      	b.n	800deb6 <__ascii_mbtowc+0x16>

0800dec4 <memmove>:
 800dec4:	4288      	cmp	r0, r1
 800dec6:	b510      	push	{r4, lr}
 800dec8:	eb01 0402 	add.w	r4, r1, r2
 800decc:	d902      	bls.n	800ded4 <memmove+0x10>
 800dece:	4284      	cmp	r4, r0
 800ded0:	4623      	mov	r3, r4
 800ded2:	d807      	bhi.n	800dee4 <memmove+0x20>
 800ded4:	1e43      	subs	r3, r0, #1
 800ded6:	42a1      	cmp	r1, r4
 800ded8:	d008      	beq.n	800deec <memmove+0x28>
 800deda:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dede:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dee2:	e7f8      	b.n	800ded6 <memmove+0x12>
 800dee4:	4601      	mov	r1, r0
 800dee6:	4402      	add	r2, r0
 800dee8:	428a      	cmp	r2, r1
 800deea:	d100      	bne.n	800deee <memmove+0x2a>
 800deec:	bd10      	pop	{r4, pc}
 800deee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800def2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800def6:	e7f7      	b.n	800dee8 <memmove+0x24>

0800def8 <__malloc_lock>:
 800def8:	4801      	ldr	r0, [pc, #4]	; (800df00 <__malloc_lock+0x8>)
 800defa:	f000 bc15 	b.w	800e728 <__retarget_lock_acquire_recursive>
 800defe:	bf00      	nop
 800df00:	20000f98 	.word	0x20000f98

0800df04 <__malloc_unlock>:
 800df04:	4801      	ldr	r0, [pc, #4]	; (800df0c <__malloc_unlock+0x8>)
 800df06:	f000 bc10 	b.w	800e72a <__retarget_lock_release_recursive>
 800df0a:	bf00      	nop
 800df0c:	20000f98 	.word	0x20000f98

0800df10 <_realloc_r>:
 800df10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df12:	4607      	mov	r7, r0
 800df14:	4614      	mov	r4, r2
 800df16:	460e      	mov	r6, r1
 800df18:	b921      	cbnz	r1, 800df24 <_realloc_r+0x14>
 800df1a:	4611      	mov	r1, r2
 800df1c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800df20:	f7ff bdc8 	b.w	800dab4 <_malloc_r>
 800df24:	b922      	cbnz	r2, 800df30 <_realloc_r+0x20>
 800df26:	f7ff fd79 	bl	800da1c <_free_r>
 800df2a:	4625      	mov	r5, r4
 800df2c:	4628      	mov	r0, r5
 800df2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df30:	f000 fc60 	bl	800e7f4 <_malloc_usable_size_r>
 800df34:	42a0      	cmp	r0, r4
 800df36:	d20f      	bcs.n	800df58 <_realloc_r+0x48>
 800df38:	4621      	mov	r1, r4
 800df3a:	4638      	mov	r0, r7
 800df3c:	f7ff fdba 	bl	800dab4 <_malloc_r>
 800df40:	4605      	mov	r5, r0
 800df42:	2800      	cmp	r0, #0
 800df44:	d0f2      	beq.n	800df2c <_realloc_r+0x1c>
 800df46:	4631      	mov	r1, r6
 800df48:	4622      	mov	r2, r4
 800df4a:	f7ff f9c9 	bl	800d2e0 <memcpy>
 800df4e:	4631      	mov	r1, r6
 800df50:	4638      	mov	r0, r7
 800df52:	f7ff fd63 	bl	800da1c <_free_r>
 800df56:	e7e9      	b.n	800df2c <_realloc_r+0x1c>
 800df58:	4635      	mov	r5, r6
 800df5a:	e7e7      	b.n	800df2c <_realloc_r+0x1c>

0800df5c <__sfputc_r>:
 800df5c:	6893      	ldr	r3, [r2, #8]
 800df5e:	b410      	push	{r4}
 800df60:	3b01      	subs	r3, #1
 800df62:	2b00      	cmp	r3, #0
 800df64:	6093      	str	r3, [r2, #8]
 800df66:	da07      	bge.n	800df78 <__sfputc_r+0x1c>
 800df68:	6994      	ldr	r4, [r2, #24]
 800df6a:	42a3      	cmp	r3, r4
 800df6c:	db01      	blt.n	800df72 <__sfputc_r+0x16>
 800df6e:	290a      	cmp	r1, #10
 800df70:	d102      	bne.n	800df78 <__sfputc_r+0x1c>
 800df72:	bc10      	pop	{r4}
 800df74:	f000 b94a 	b.w	800e20c <__swbuf_r>
 800df78:	6813      	ldr	r3, [r2, #0]
 800df7a:	1c58      	adds	r0, r3, #1
 800df7c:	6010      	str	r0, [r2, #0]
 800df7e:	7019      	strb	r1, [r3, #0]
 800df80:	4608      	mov	r0, r1
 800df82:	bc10      	pop	{r4}
 800df84:	4770      	bx	lr

0800df86 <__sfputs_r>:
 800df86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df88:	4606      	mov	r6, r0
 800df8a:	460f      	mov	r7, r1
 800df8c:	4614      	mov	r4, r2
 800df8e:	18d5      	adds	r5, r2, r3
 800df90:	42ac      	cmp	r4, r5
 800df92:	d101      	bne.n	800df98 <__sfputs_r+0x12>
 800df94:	2000      	movs	r0, #0
 800df96:	e007      	b.n	800dfa8 <__sfputs_r+0x22>
 800df98:	463a      	mov	r2, r7
 800df9a:	4630      	mov	r0, r6
 800df9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dfa0:	f7ff ffdc 	bl	800df5c <__sfputc_r>
 800dfa4:	1c43      	adds	r3, r0, #1
 800dfa6:	d1f3      	bne.n	800df90 <__sfputs_r+0xa>
 800dfa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dfac <_vfiprintf_r>:
 800dfac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfb0:	460d      	mov	r5, r1
 800dfb2:	4614      	mov	r4, r2
 800dfb4:	4698      	mov	r8, r3
 800dfb6:	4606      	mov	r6, r0
 800dfb8:	b09d      	sub	sp, #116	; 0x74
 800dfba:	b118      	cbz	r0, 800dfc4 <_vfiprintf_r+0x18>
 800dfbc:	6983      	ldr	r3, [r0, #24]
 800dfbe:	b90b      	cbnz	r3, 800dfc4 <_vfiprintf_r+0x18>
 800dfc0:	f000 fb14 	bl	800e5ec <__sinit>
 800dfc4:	4b89      	ldr	r3, [pc, #548]	; (800e1ec <_vfiprintf_r+0x240>)
 800dfc6:	429d      	cmp	r5, r3
 800dfc8:	d11b      	bne.n	800e002 <_vfiprintf_r+0x56>
 800dfca:	6875      	ldr	r5, [r6, #4]
 800dfcc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dfce:	07d9      	lsls	r1, r3, #31
 800dfd0:	d405      	bmi.n	800dfde <_vfiprintf_r+0x32>
 800dfd2:	89ab      	ldrh	r3, [r5, #12]
 800dfd4:	059a      	lsls	r2, r3, #22
 800dfd6:	d402      	bmi.n	800dfde <_vfiprintf_r+0x32>
 800dfd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dfda:	f000 fba5 	bl	800e728 <__retarget_lock_acquire_recursive>
 800dfde:	89ab      	ldrh	r3, [r5, #12]
 800dfe0:	071b      	lsls	r3, r3, #28
 800dfe2:	d501      	bpl.n	800dfe8 <_vfiprintf_r+0x3c>
 800dfe4:	692b      	ldr	r3, [r5, #16]
 800dfe6:	b9eb      	cbnz	r3, 800e024 <_vfiprintf_r+0x78>
 800dfe8:	4629      	mov	r1, r5
 800dfea:	4630      	mov	r0, r6
 800dfec:	f000 f96e 	bl	800e2cc <__swsetup_r>
 800dff0:	b1c0      	cbz	r0, 800e024 <_vfiprintf_r+0x78>
 800dff2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dff4:	07dc      	lsls	r4, r3, #31
 800dff6:	d50e      	bpl.n	800e016 <_vfiprintf_r+0x6a>
 800dff8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dffc:	b01d      	add	sp, #116	; 0x74
 800dffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e002:	4b7b      	ldr	r3, [pc, #492]	; (800e1f0 <_vfiprintf_r+0x244>)
 800e004:	429d      	cmp	r5, r3
 800e006:	d101      	bne.n	800e00c <_vfiprintf_r+0x60>
 800e008:	68b5      	ldr	r5, [r6, #8]
 800e00a:	e7df      	b.n	800dfcc <_vfiprintf_r+0x20>
 800e00c:	4b79      	ldr	r3, [pc, #484]	; (800e1f4 <_vfiprintf_r+0x248>)
 800e00e:	429d      	cmp	r5, r3
 800e010:	bf08      	it	eq
 800e012:	68f5      	ldreq	r5, [r6, #12]
 800e014:	e7da      	b.n	800dfcc <_vfiprintf_r+0x20>
 800e016:	89ab      	ldrh	r3, [r5, #12]
 800e018:	0598      	lsls	r0, r3, #22
 800e01a:	d4ed      	bmi.n	800dff8 <_vfiprintf_r+0x4c>
 800e01c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e01e:	f000 fb84 	bl	800e72a <__retarget_lock_release_recursive>
 800e022:	e7e9      	b.n	800dff8 <_vfiprintf_r+0x4c>
 800e024:	2300      	movs	r3, #0
 800e026:	9309      	str	r3, [sp, #36]	; 0x24
 800e028:	2320      	movs	r3, #32
 800e02a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e02e:	2330      	movs	r3, #48	; 0x30
 800e030:	f04f 0901 	mov.w	r9, #1
 800e034:	f8cd 800c 	str.w	r8, [sp, #12]
 800e038:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800e1f8 <_vfiprintf_r+0x24c>
 800e03c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e040:	4623      	mov	r3, r4
 800e042:	469a      	mov	sl, r3
 800e044:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e048:	b10a      	cbz	r2, 800e04e <_vfiprintf_r+0xa2>
 800e04a:	2a25      	cmp	r2, #37	; 0x25
 800e04c:	d1f9      	bne.n	800e042 <_vfiprintf_r+0x96>
 800e04e:	ebba 0b04 	subs.w	fp, sl, r4
 800e052:	d00b      	beq.n	800e06c <_vfiprintf_r+0xc0>
 800e054:	465b      	mov	r3, fp
 800e056:	4622      	mov	r2, r4
 800e058:	4629      	mov	r1, r5
 800e05a:	4630      	mov	r0, r6
 800e05c:	f7ff ff93 	bl	800df86 <__sfputs_r>
 800e060:	3001      	adds	r0, #1
 800e062:	f000 80aa 	beq.w	800e1ba <_vfiprintf_r+0x20e>
 800e066:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e068:	445a      	add	r2, fp
 800e06a:	9209      	str	r2, [sp, #36]	; 0x24
 800e06c:	f89a 3000 	ldrb.w	r3, [sl]
 800e070:	2b00      	cmp	r3, #0
 800e072:	f000 80a2 	beq.w	800e1ba <_vfiprintf_r+0x20e>
 800e076:	2300      	movs	r3, #0
 800e078:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e07c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e080:	f10a 0a01 	add.w	sl, sl, #1
 800e084:	9304      	str	r3, [sp, #16]
 800e086:	9307      	str	r3, [sp, #28]
 800e088:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e08c:	931a      	str	r3, [sp, #104]	; 0x68
 800e08e:	4654      	mov	r4, sl
 800e090:	2205      	movs	r2, #5
 800e092:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e096:	4858      	ldr	r0, [pc, #352]	; (800e1f8 <_vfiprintf_r+0x24c>)
 800e098:	f7ff f914 	bl	800d2c4 <memchr>
 800e09c:	9a04      	ldr	r2, [sp, #16]
 800e09e:	b9d8      	cbnz	r0, 800e0d8 <_vfiprintf_r+0x12c>
 800e0a0:	06d1      	lsls	r1, r2, #27
 800e0a2:	bf44      	itt	mi
 800e0a4:	2320      	movmi	r3, #32
 800e0a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e0aa:	0713      	lsls	r3, r2, #28
 800e0ac:	bf44      	itt	mi
 800e0ae:	232b      	movmi	r3, #43	; 0x2b
 800e0b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e0b4:	f89a 3000 	ldrb.w	r3, [sl]
 800e0b8:	2b2a      	cmp	r3, #42	; 0x2a
 800e0ba:	d015      	beq.n	800e0e8 <_vfiprintf_r+0x13c>
 800e0bc:	4654      	mov	r4, sl
 800e0be:	2000      	movs	r0, #0
 800e0c0:	f04f 0c0a 	mov.w	ip, #10
 800e0c4:	9a07      	ldr	r2, [sp, #28]
 800e0c6:	4621      	mov	r1, r4
 800e0c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e0cc:	3b30      	subs	r3, #48	; 0x30
 800e0ce:	2b09      	cmp	r3, #9
 800e0d0:	d94e      	bls.n	800e170 <_vfiprintf_r+0x1c4>
 800e0d2:	b1b0      	cbz	r0, 800e102 <_vfiprintf_r+0x156>
 800e0d4:	9207      	str	r2, [sp, #28]
 800e0d6:	e014      	b.n	800e102 <_vfiprintf_r+0x156>
 800e0d8:	eba0 0308 	sub.w	r3, r0, r8
 800e0dc:	fa09 f303 	lsl.w	r3, r9, r3
 800e0e0:	4313      	orrs	r3, r2
 800e0e2:	46a2      	mov	sl, r4
 800e0e4:	9304      	str	r3, [sp, #16]
 800e0e6:	e7d2      	b.n	800e08e <_vfiprintf_r+0xe2>
 800e0e8:	9b03      	ldr	r3, [sp, #12]
 800e0ea:	1d19      	adds	r1, r3, #4
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	9103      	str	r1, [sp, #12]
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	bfbb      	ittet	lt
 800e0f4:	425b      	neglt	r3, r3
 800e0f6:	f042 0202 	orrlt.w	r2, r2, #2
 800e0fa:	9307      	strge	r3, [sp, #28]
 800e0fc:	9307      	strlt	r3, [sp, #28]
 800e0fe:	bfb8      	it	lt
 800e100:	9204      	strlt	r2, [sp, #16]
 800e102:	7823      	ldrb	r3, [r4, #0]
 800e104:	2b2e      	cmp	r3, #46	; 0x2e
 800e106:	d10c      	bne.n	800e122 <_vfiprintf_r+0x176>
 800e108:	7863      	ldrb	r3, [r4, #1]
 800e10a:	2b2a      	cmp	r3, #42	; 0x2a
 800e10c:	d135      	bne.n	800e17a <_vfiprintf_r+0x1ce>
 800e10e:	9b03      	ldr	r3, [sp, #12]
 800e110:	3402      	adds	r4, #2
 800e112:	1d1a      	adds	r2, r3, #4
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	9203      	str	r2, [sp, #12]
 800e118:	2b00      	cmp	r3, #0
 800e11a:	bfb8      	it	lt
 800e11c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e120:	9305      	str	r3, [sp, #20]
 800e122:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e208 <_vfiprintf_r+0x25c>
 800e126:	2203      	movs	r2, #3
 800e128:	4650      	mov	r0, sl
 800e12a:	7821      	ldrb	r1, [r4, #0]
 800e12c:	f7ff f8ca 	bl	800d2c4 <memchr>
 800e130:	b140      	cbz	r0, 800e144 <_vfiprintf_r+0x198>
 800e132:	2340      	movs	r3, #64	; 0x40
 800e134:	eba0 000a 	sub.w	r0, r0, sl
 800e138:	fa03 f000 	lsl.w	r0, r3, r0
 800e13c:	9b04      	ldr	r3, [sp, #16]
 800e13e:	3401      	adds	r4, #1
 800e140:	4303      	orrs	r3, r0
 800e142:	9304      	str	r3, [sp, #16]
 800e144:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e148:	2206      	movs	r2, #6
 800e14a:	482c      	ldr	r0, [pc, #176]	; (800e1fc <_vfiprintf_r+0x250>)
 800e14c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e150:	f7ff f8b8 	bl	800d2c4 <memchr>
 800e154:	2800      	cmp	r0, #0
 800e156:	d03f      	beq.n	800e1d8 <_vfiprintf_r+0x22c>
 800e158:	4b29      	ldr	r3, [pc, #164]	; (800e200 <_vfiprintf_r+0x254>)
 800e15a:	bb1b      	cbnz	r3, 800e1a4 <_vfiprintf_r+0x1f8>
 800e15c:	9b03      	ldr	r3, [sp, #12]
 800e15e:	3307      	adds	r3, #7
 800e160:	f023 0307 	bic.w	r3, r3, #7
 800e164:	3308      	adds	r3, #8
 800e166:	9303      	str	r3, [sp, #12]
 800e168:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e16a:	443b      	add	r3, r7
 800e16c:	9309      	str	r3, [sp, #36]	; 0x24
 800e16e:	e767      	b.n	800e040 <_vfiprintf_r+0x94>
 800e170:	460c      	mov	r4, r1
 800e172:	2001      	movs	r0, #1
 800e174:	fb0c 3202 	mla	r2, ip, r2, r3
 800e178:	e7a5      	b.n	800e0c6 <_vfiprintf_r+0x11a>
 800e17a:	2300      	movs	r3, #0
 800e17c:	f04f 0c0a 	mov.w	ip, #10
 800e180:	4619      	mov	r1, r3
 800e182:	3401      	adds	r4, #1
 800e184:	9305      	str	r3, [sp, #20]
 800e186:	4620      	mov	r0, r4
 800e188:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e18c:	3a30      	subs	r2, #48	; 0x30
 800e18e:	2a09      	cmp	r2, #9
 800e190:	d903      	bls.n	800e19a <_vfiprintf_r+0x1ee>
 800e192:	2b00      	cmp	r3, #0
 800e194:	d0c5      	beq.n	800e122 <_vfiprintf_r+0x176>
 800e196:	9105      	str	r1, [sp, #20]
 800e198:	e7c3      	b.n	800e122 <_vfiprintf_r+0x176>
 800e19a:	4604      	mov	r4, r0
 800e19c:	2301      	movs	r3, #1
 800e19e:	fb0c 2101 	mla	r1, ip, r1, r2
 800e1a2:	e7f0      	b.n	800e186 <_vfiprintf_r+0x1da>
 800e1a4:	ab03      	add	r3, sp, #12
 800e1a6:	9300      	str	r3, [sp, #0]
 800e1a8:	462a      	mov	r2, r5
 800e1aa:	4630      	mov	r0, r6
 800e1ac:	4b15      	ldr	r3, [pc, #84]	; (800e204 <_vfiprintf_r+0x258>)
 800e1ae:	a904      	add	r1, sp, #16
 800e1b0:	f7fd fe1e 	bl	800bdf0 <_printf_float>
 800e1b4:	4607      	mov	r7, r0
 800e1b6:	1c78      	adds	r0, r7, #1
 800e1b8:	d1d6      	bne.n	800e168 <_vfiprintf_r+0x1bc>
 800e1ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e1bc:	07d9      	lsls	r1, r3, #31
 800e1be:	d405      	bmi.n	800e1cc <_vfiprintf_r+0x220>
 800e1c0:	89ab      	ldrh	r3, [r5, #12]
 800e1c2:	059a      	lsls	r2, r3, #22
 800e1c4:	d402      	bmi.n	800e1cc <_vfiprintf_r+0x220>
 800e1c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e1c8:	f000 faaf 	bl	800e72a <__retarget_lock_release_recursive>
 800e1cc:	89ab      	ldrh	r3, [r5, #12]
 800e1ce:	065b      	lsls	r3, r3, #25
 800e1d0:	f53f af12 	bmi.w	800dff8 <_vfiprintf_r+0x4c>
 800e1d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e1d6:	e711      	b.n	800dffc <_vfiprintf_r+0x50>
 800e1d8:	ab03      	add	r3, sp, #12
 800e1da:	9300      	str	r3, [sp, #0]
 800e1dc:	462a      	mov	r2, r5
 800e1de:	4630      	mov	r0, r6
 800e1e0:	4b08      	ldr	r3, [pc, #32]	; (800e204 <_vfiprintf_r+0x258>)
 800e1e2:	a904      	add	r1, sp, #16
 800e1e4:	f7fe f8a0 	bl	800c328 <_printf_i>
 800e1e8:	e7e4      	b.n	800e1b4 <_vfiprintf_r+0x208>
 800e1ea:	bf00      	nop
 800e1ec:	0800f4b4 	.word	0x0800f4b4
 800e1f0:	0800f4d4 	.word	0x0800f4d4
 800e1f4:	0800f494 	.word	0x0800f494
 800e1f8:	0800f33c 	.word	0x0800f33c
 800e1fc:	0800f346 	.word	0x0800f346
 800e200:	0800bdf1 	.word	0x0800bdf1
 800e204:	0800df87 	.word	0x0800df87
 800e208:	0800f342 	.word	0x0800f342

0800e20c <__swbuf_r>:
 800e20c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e20e:	460e      	mov	r6, r1
 800e210:	4614      	mov	r4, r2
 800e212:	4605      	mov	r5, r0
 800e214:	b118      	cbz	r0, 800e21e <__swbuf_r+0x12>
 800e216:	6983      	ldr	r3, [r0, #24]
 800e218:	b90b      	cbnz	r3, 800e21e <__swbuf_r+0x12>
 800e21a:	f000 f9e7 	bl	800e5ec <__sinit>
 800e21e:	4b21      	ldr	r3, [pc, #132]	; (800e2a4 <__swbuf_r+0x98>)
 800e220:	429c      	cmp	r4, r3
 800e222:	d12b      	bne.n	800e27c <__swbuf_r+0x70>
 800e224:	686c      	ldr	r4, [r5, #4]
 800e226:	69a3      	ldr	r3, [r4, #24]
 800e228:	60a3      	str	r3, [r4, #8]
 800e22a:	89a3      	ldrh	r3, [r4, #12]
 800e22c:	071a      	lsls	r2, r3, #28
 800e22e:	d52f      	bpl.n	800e290 <__swbuf_r+0x84>
 800e230:	6923      	ldr	r3, [r4, #16]
 800e232:	b36b      	cbz	r3, 800e290 <__swbuf_r+0x84>
 800e234:	6923      	ldr	r3, [r4, #16]
 800e236:	6820      	ldr	r0, [r4, #0]
 800e238:	b2f6      	uxtb	r6, r6
 800e23a:	1ac0      	subs	r0, r0, r3
 800e23c:	6963      	ldr	r3, [r4, #20]
 800e23e:	4637      	mov	r7, r6
 800e240:	4283      	cmp	r3, r0
 800e242:	dc04      	bgt.n	800e24e <__swbuf_r+0x42>
 800e244:	4621      	mov	r1, r4
 800e246:	4628      	mov	r0, r5
 800e248:	f000 f93c 	bl	800e4c4 <_fflush_r>
 800e24c:	bb30      	cbnz	r0, 800e29c <__swbuf_r+0x90>
 800e24e:	68a3      	ldr	r3, [r4, #8]
 800e250:	3001      	adds	r0, #1
 800e252:	3b01      	subs	r3, #1
 800e254:	60a3      	str	r3, [r4, #8]
 800e256:	6823      	ldr	r3, [r4, #0]
 800e258:	1c5a      	adds	r2, r3, #1
 800e25a:	6022      	str	r2, [r4, #0]
 800e25c:	701e      	strb	r6, [r3, #0]
 800e25e:	6963      	ldr	r3, [r4, #20]
 800e260:	4283      	cmp	r3, r0
 800e262:	d004      	beq.n	800e26e <__swbuf_r+0x62>
 800e264:	89a3      	ldrh	r3, [r4, #12]
 800e266:	07db      	lsls	r3, r3, #31
 800e268:	d506      	bpl.n	800e278 <__swbuf_r+0x6c>
 800e26a:	2e0a      	cmp	r6, #10
 800e26c:	d104      	bne.n	800e278 <__swbuf_r+0x6c>
 800e26e:	4621      	mov	r1, r4
 800e270:	4628      	mov	r0, r5
 800e272:	f000 f927 	bl	800e4c4 <_fflush_r>
 800e276:	b988      	cbnz	r0, 800e29c <__swbuf_r+0x90>
 800e278:	4638      	mov	r0, r7
 800e27a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e27c:	4b0a      	ldr	r3, [pc, #40]	; (800e2a8 <__swbuf_r+0x9c>)
 800e27e:	429c      	cmp	r4, r3
 800e280:	d101      	bne.n	800e286 <__swbuf_r+0x7a>
 800e282:	68ac      	ldr	r4, [r5, #8]
 800e284:	e7cf      	b.n	800e226 <__swbuf_r+0x1a>
 800e286:	4b09      	ldr	r3, [pc, #36]	; (800e2ac <__swbuf_r+0xa0>)
 800e288:	429c      	cmp	r4, r3
 800e28a:	bf08      	it	eq
 800e28c:	68ec      	ldreq	r4, [r5, #12]
 800e28e:	e7ca      	b.n	800e226 <__swbuf_r+0x1a>
 800e290:	4621      	mov	r1, r4
 800e292:	4628      	mov	r0, r5
 800e294:	f000 f81a 	bl	800e2cc <__swsetup_r>
 800e298:	2800      	cmp	r0, #0
 800e29a:	d0cb      	beq.n	800e234 <__swbuf_r+0x28>
 800e29c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800e2a0:	e7ea      	b.n	800e278 <__swbuf_r+0x6c>
 800e2a2:	bf00      	nop
 800e2a4:	0800f4b4 	.word	0x0800f4b4
 800e2a8:	0800f4d4 	.word	0x0800f4d4
 800e2ac:	0800f494 	.word	0x0800f494

0800e2b0 <__ascii_wctomb>:
 800e2b0:	4603      	mov	r3, r0
 800e2b2:	4608      	mov	r0, r1
 800e2b4:	b141      	cbz	r1, 800e2c8 <__ascii_wctomb+0x18>
 800e2b6:	2aff      	cmp	r2, #255	; 0xff
 800e2b8:	d904      	bls.n	800e2c4 <__ascii_wctomb+0x14>
 800e2ba:	228a      	movs	r2, #138	; 0x8a
 800e2bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e2c0:	601a      	str	r2, [r3, #0]
 800e2c2:	4770      	bx	lr
 800e2c4:	2001      	movs	r0, #1
 800e2c6:	700a      	strb	r2, [r1, #0]
 800e2c8:	4770      	bx	lr
	...

0800e2cc <__swsetup_r>:
 800e2cc:	4b32      	ldr	r3, [pc, #200]	; (800e398 <__swsetup_r+0xcc>)
 800e2ce:	b570      	push	{r4, r5, r6, lr}
 800e2d0:	681d      	ldr	r5, [r3, #0]
 800e2d2:	4606      	mov	r6, r0
 800e2d4:	460c      	mov	r4, r1
 800e2d6:	b125      	cbz	r5, 800e2e2 <__swsetup_r+0x16>
 800e2d8:	69ab      	ldr	r3, [r5, #24]
 800e2da:	b913      	cbnz	r3, 800e2e2 <__swsetup_r+0x16>
 800e2dc:	4628      	mov	r0, r5
 800e2de:	f000 f985 	bl	800e5ec <__sinit>
 800e2e2:	4b2e      	ldr	r3, [pc, #184]	; (800e39c <__swsetup_r+0xd0>)
 800e2e4:	429c      	cmp	r4, r3
 800e2e6:	d10f      	bne.n	800e308 <__swsetup_r+0x3c>
 800e2e8:	686c      	ldr	r4, [r5, #4]
 800e2ea:	89a3      	ldrh	r3, [r4, #12]
 800e2ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e2f0:	0719      	lsls	r1, r3, #28
 800e2f2:	d42c      	bmi.n	800e34e <__swsetup_r+0x82>
 800e2f4:	06dd      	lsls	r5, r3, #27
 800e2f6:	d411      	bmi.n	800e31c <__swsetup_r+0x50>
 800e2f8:	2309      	movs	r3, #9
 800e2fa:	6033      	str	r3, [r6, #0]
 800e2fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e300:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e304:	81a3      	strh	r3, [r4, #12]
 800e306:	e03e      	b.n	800e386 <__swsetup_r+0xba>
 800e308:	4b25      	ldr	r3, [pc, #148]	; (800e3a0 <__swsetup_r+0xd4>)
 800e30a:	429c      	cmp	r4, r3
 800e30c:	d101      	bne.n	800e312 <__swsetup_r+0x46>
 800e30e:	68ac      	ldr	r4, [r5, #8]
 800e310:	e7eb      	b.n	800e2ea <__swsetup_r+0x1e>
 800e312:	4b24      	ldr	r3, [pc, #144]	; (800e3a4 <__swsetup_r+0xd8>)
 800e314:	429c      	cmp	r4, r3
 800e316:	bf08      	it	eq
 800e318:	68ec      	ldreq	r4, [r5, #12]
 800e31a:	e7e6      	b.n	800e2ea <__swsetup_r+0x1e>
 800e31c:	0758      	lsls	r0, r3, #29
 800e31e:	d512      	bpl.n	800e346 <__swsetup_r+0x7a>
 800e320:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e322:	b141      	cbz	r1, 800e336 <__swsetup_r+0x6a>
 800e324:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e328:	4299      	cmp	r1, r3
 800e32a:	d002      	beq.n	800e332 <__swsetup_r+0x66>
 800e32c:	4630      	mov	r0, r6
 800e32e:	f7ff fb75 	bl	800da1c <_free_r>
 800e332:	2300      	movs	r3, #0
 800e334:	6363      	str	r3, [r4, #52]	; 0x34
 800e336:	89a3      	ldrh	r3, [r4, #12]
 800e338:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e33c:	81a3      	strh	r3, [r4, #12]
 800e33e:	2300      	movs	r3, #0
 800e340:	6063      	str	r3, [r4, #4]
 800e342:	6923      	ldr	r3, [r4, #16]
 800e344:	6023      	str	r3, [r4, #0]
 800e346:	89a3      	ldrh	r3, [r4, #12]
 800e348:	f043 0308 	orr.w	r3, r3, #8
 800e34c:	81a3      	strh	r3, [r4, #12]
 800e34e:	6923      	ldr	r3, [r4, #16]
 800e350:	b94b      	cbnz	r3, 800e366 <__swsetup_r+0x9a>
 800e352:	89a3      	ldrh	r3, [r4, #12]
 800e354:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e358:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e35c:	d003      	beq.n	800e366 <__swsetup_r+0x9a>
 800e35e:	4621      	mov	r1, r4
 800e360:	4630      	mov	r0, r6
 800e362:	f000 fa07 	bl	800e774 <__smakebuf_r>
 800e366:	89a0      	ldrh	r0, [r4, #12]
 800e368:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e36c:	f010 0301 	ands.w	r3, r0, #1
 800e370:	d00a      	beq.n	800e388 <__swsetup_r+0xbc>
 800e372:	2300      	movs	r3, #0
 800e374:	60a3      	str	r3, [r4, #8]
 800e376:	6963      	ldr	r3, [r4, #20]
 800e378:	425b      	negs	r3, r3
 800e37a:	61a3      	str	r3, [r4, #24]
 800e37c:	6923      	ldr	r3, [r4, #16]
 800e37e:	b943      	cbnz	r3, 800e392 <__swsetup_r+0xc6>
 800e380:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e384:	d1ba      	bne.n	800e2fc <__swsetup_r+0x30>
 800e386:	bd70      	pop	{r4, r5, r6, pc}
 800e388:	0781      	lsls	r1, r0, #30
 800e38a:	bf58      	it	pl
 800e38c:	6963      	ldrpl	r3, [r4, #20]
 800e38e:	60a3      	str	r3, [r4, #8]
 800e390:	e7f4      	b.n	800e37c <__swsetup_r+0xb0>
 800e392:	2000      	movs	r0, #0
 800e394:	e7f7      	b.n	800e386 <__swsetup_r+0xba>
 800e396:	bf00      	nop
 800e398:	200001f8 	.word	0x200001f8
 800e39c:	0800f4b4 	.word	0x0800f4b4
 800e3a0:	0800f4d4 	.word	0x0800f4d4
 800e3a4:	0800f494 	.word	0x0800f494

0800e3a8 <abort>:
 800e3a8:	2006      	movs	r0, #6
 800e3aa:	b508      	push	{r3, lr}
 800e3ac:	f000 fa52 	bl	800e854 <raise>
 800e3b0:	2001      	movs	r0, #1
 800e3b2:	f7f3 fe7c 	bl	80020ae <_exit>
	...

0800e3b8 <__sflush_r>:
 800e3b8:	898a      	ldrh	r2, [r1, #12]
 800e3ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3be:	4605      	mov	r5, r0
 800e3c0:	0710      	lsls	r0, r2, #28
 800e3c2:	460c      	mov	r4, r1
 800e3c4:	d458      	bmi.n	800e478 <__sflush_r+0xc0>
 800e3c6:	684b      	ldr	r3, [r1, #4]
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	dc05      	bgt.n	800e3d8 <__sflush_r+0x20>
 800e3cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	dc02      	bgt.n	800e3d8 <__sflush_r+0x20>
 800e3d2:	2000      	movs	r0, #0
 800e3d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e3da:	2e00      	cmp	r6, #0
 800e3dc:	d0f9      	beq.n	800e3d2 <__sflush_r+0x1a>
 800e3de:	2300      	movs	r3, #0
 800e3e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e3e4:	682f      	ldr	r7, [r5, #0]
 800e3e6:	602b      	str	r3, [r5, #0]
 800e3e8:	d032      	beq.n	800e450 <__sflush_r+0x98>
 800e3ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e3ec:	89a3      	ldrh	r3, [r4, #12]
 800e3ee:	075a      	lsls	r2, r3, #29
 800e3f0:	d505      	bpl.n	800e3fe <__sflush_r+0x46>
 800e3f2:	6863      	ldr	r3, [r4, #4]
 800e3f4:	1ac0      	subs	r0, r0, r3
 800e3f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e3f8:	b10b      	cbz	r3, 800e3fe <__sflush_r+0x46>
 800e3fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e3fc:	1ac0      	subs	r0, r0, r3
 800e3fe:	2300      	movs	r3, #0
 800e400:	4602      	mov	r2, r0
 800e402:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e404:	4628      	mov	r0, r5
 800e406:	6a21      	ldr	r1, [r4, #32]
 800e408:	47b0      	blx	r6
 800e40a:	1c43      	adds	r3, r0, #1
 800e40c:	89a3      	ldrh	r3, [r4, #12]
 800e40e:	d106      	bne.n	800e41e <__sflush_r+0x66>
 800e410:	6829      	ldr	r1, [r5, #0]
 800e412:	291d      	cmp	r1, #29
 800e414:	d82c      	bhi.n	800e470 <__sflush_r+0xb8>
 800e416:	4a2a      	ldr	r2, [pc, #168]	; (800e4c0 <__sflush_r+0x108>)
 800e418:	40ca      	lsrs	r2, r1
 800e41a:	07d6      	lsls	r6, r2, #31
 800e41c:	d528      	bpl.n	800e470 <__sflush_r+0xb8>
 800e41e:	2200      	movs	r2, #0
 800e420:	6062      	str	r2, [r4, #4]
 800e422:	6922      	ldr	r2, [r4, #16]
 800e424:	04d9      	lsls	r1, r3, #19
 800e426:	6022      	str	r2, [r4, #0]
 800e428:	d504      	bpl.n	800e434 <__sflush_r+0x7c>
 800e42a:	1c42      	adds	r2, r0, #1
 800e42c:	d101      	bne.n	800e432 <__sflush_r+0x7a>
 800e42e:	682b      	ldr	r3, [r5, #0]
 800e430:	b903      	cbnz	r3, 800e434 <__sflush_r+0x7c>
 800e432:	6560      	str	r0, [r4, #84]	; 0x54
 800e434:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e436:	602f      	str	r7, [r5, #0]
 800e438:	2900      	cmp	r1, #0
 800e43a:	d0ca      	beq.n	800e3d2 <__sflush_r+0x1a>
 800e43c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e440:	4299      	cmp	r1, r3
 800e442:	d002      	beq.n	800e44a <__sflush_r+0x92>
 800e444:	4628      	mov	r0, r5
 800e446:	f7ff fae9 	bl	800da1c <_free_r>
 800e44a:	2000      	movs	r0, #0
 800e44c:	6360      	str	r0, [r4, #52]	; 0x34
 800e44e:	e7c1      	b.n	800e3d4 <__sflush_r+0x1c>
 800e450:	6a21      	ldr	r1, [r4, #32]
 800e452:	2301      	movs	r3, #1
 800e454:	4628      	mov	r0, r5
 800e456:	47b0      	blx	r6
 800e458:	1c41      	adds	r1, r0, #1
 800e45a:	d1c7      	bne.n	800e3ec <__sflush_r+0x34>
 800e45c:	682b      	ldr	r3, [r5, #0]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d0c4      	beq.n	800e3ec <__sflush_r+0x34>
 800e462:	2b1d      	cmp	r3, #29
 800e464:	d001      	beq.n	800e46a <__sflush_r+0xb2>
 800e466:	2b16      	cmp	r3, #22
 800e468:	d101      	bne.n	800e46e <__sflush_r+0xb6>
 800e46a:	602f      	str	r7, [r5, #0]
 800e46c:	e7b1      	b.n	800e3d2 <__sflush_r+0x1a>
 800e46e:	89a3      	ldrh	r3, [r4, #12]
 800e470:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e474:	81a3      	strh	r3, [r4, #12]
 800e476:	e7ad      	b.n	800e3d4 <__sflush_r+0x1c>
 800e478:	690f      	ldr	r7, [r1, #16]
 800e47a:	2f00      	cmp	r7, #0
 800e47c:	d0a9      	beq.n	800e3d2 <__sflush_r+0x1a>
 800e47e:	0793      	lsls	r3, r2, #30
 800e480:	bf18      	it	ne
 800e482:	2300      	movne	r3, #0
 800e484:	680e      	ldr	r6, [r1, #0]
 800e486:	bf08      	it	eq
 800e488:	694b      	ldreq	r3, [r1, #20]
 800e48a:	eba6 0807 	sub.w	r8, r6, r7
 800e48e:	600f      	str	r7, [r1, #0]
 800e490:	608b      	str	r3, [r1, #8]
 800e492:	f1b8 0f00 	cmp.w	r8, #0
 800e496:	dd9c      	ble.n	800e3d2 <__sflush_r+0x1a>
 800e498:	4643      	mov	r3, r8
 800e49a:	463a      	mov	r2, r7
 800e49c:	4628      	mov	r0, r5
 800e49e:	6a21      	ldr	r1, [r4, #32]
 800e4a0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e4a2:	47b0      	blx	r6
 800e4a4:	2800      	cmp	r0, #0
 800e4a6:	dc06      	bgt.n	800e4b6 <__sflush_r+0xfe>
 800e4a8:	89a3      	ldrh	r3, [r4, #12]
 800e4aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e4ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e4b2:	81a3      	strh	r3, [r4, #12]
 800e4b4:	e78e      	b.n	800e3d4 <__sflush_r+0x1c>
 800e4b6:	4407      	add	r7, r0
 800e4b8:	eba8 0800 	sub.w	r8, r8, r0
 800e4bc:	e7e9      	b.n	800e492 <__sflush_r+0xda>
 800e4be:	bf00      	nop
 800e4c0:	20400001 	.word	0x20400001

0800e4c4 <_fflush_r>:
 800e4c4:	b538      	push	{r3, r4, r5, lr}
 800e4c6:	690b      	ldr	r3, [r1, #16]
 800e4c8:	4605      	mov	r5, r0
 800e4ca:	460c      	mov	r4, r1
 800e4cc:	b913      	cbnz	r3, 800e4d4 <_fflush_r+0x10>
 800e4ce:	2500      	movs	r5, #0
 800e4d0:	4628      	mov	r0, r5
 800e4d2:	bd38      	pop	{r3, r4, r5, pc}
 800e4d4:	b118      	cbz	r0, 800e4de <_fflush_r+0x1a>
 800e4d6:	6983      	ldr	r3, [r0, #24]
 800e4d8:	b90b      	cbnz	r3, 800e4de <_fflush_r+0x1a>
 800e4da:	f000 f887 	bl	800e5ec <__sinit>
 800e4de:	4b14      	ldr	r3, [pc, #80]	; (800e530 <_fflush_r+0x6c>)
 800e4e0:	429c      	cmp	r4, r3
 800e4e2:	d11b      	bne.n	800e51c <_fflush_r+0x58>
 800e4e4:	686c      	ldr	r4, [r5, #4]
 800e4e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d0ef      	beq.n	800e4ce <_fflush_r+0xa>
 800e4ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e4f0:	07d0      	lsls	r0, r2, #31
 800e4f2:	d404      	bmi.n	800e4fe <_fflush_r+0x3a>
 800e4f4:	0599      	lsls	r1, r3, #22
 800e4f6:	d402      	bmi.n	800e4fe <_fflush_r+0x3a>
 800e4f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e4fa:	f000 f915 	bl	800e728 <__retarget_lock_acquire_recursive>
 800e4fe:	4628      	mov	r0, r5
 800e500:	4621      	mov	r1, r4
 800e502:	f7ff ff59 	bl	800e3b8 <__sflush_r>
 800e506:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e508:	4605      	mov	r5, r0
 800e50a:	07da      	lsls	r2, r3, #31
 800e50c:	d4e0      	bmi.n	800e4d0 <_fflush_r+0xc>
 800e50e:	89a3      	ldrh	r3, [r4, #12]
 800e510:	059b      	lsls	r3, r3, #22
 800e512:	d4dd      	bmi.n	800e4d0 <_fflush_r+0xc>
 800e514:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e516:	f000 f908 	bl	800e72a <__retarget_lock_release_recursive>
 800e51a:	e7d9      	b.n	800e4d0 <_fflush_r+0xc>
 800e51c:	4b05      	ldr	r3, [pc, #20]	; (800e534 <_fflush_r+0x70>)
 800e51e:	429c      	cmp	r4, r3
 800e520:	d101      	bne.n	800e526 <_fflush_r+0x62>
 800e522:	68ac      	ldr	r4, [r5, #8]
 800e524:	e7df      	b.n	800e4e6 <_fflush_r+0x22>
 800e526:	4b04      	ldr	r3, [pc, #16]	; (800e538 <_fflush_r+0x74>)
 800e528:	429c      	cmp	r4, r3
 800e52a:	bf08      	it	eq
 800e52c:	68ec      	ldreq	r4, [r5, #12]
 800e52e:	e7da      	b.n	800e4e6 <_fflush_r+0x22>
 800e530:	0800f4b4 	.word	0x0800f4b4
 800e534:	0800f4d4 	.word	0x0800f4d4
 800e538:	0800f494 	.word	0x0800f494

0800e53c <std>:
 800e53c:	2300      	movs	r3, #0
 800e53e:	b510      	push	{r4, lr}
 800e540:	4604      	mov	r4, r0
 800e542:	e9c0 3300 	strd	r3, r3, [r0]
 800e546:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e54a:	6083      	str	r3, [r0, #8]
 800e54c:	8181      	strh	r1, [r0, #12]
 800e54e:	6643      	str	r3, [r0, #100]	; 0x64
 800e550:	81c2      	strh	r2, [r0, #14]
 800e552:	6183      	str	r3, [r0, #24]
 800e554:	4619      	mov	r1, r3
 800e556:	2208      	movs	r2, #8
 800e558:	305c      	adds	r0, #92	; 0x5c
 800e55a:	f7fd fba3 	bl	800bca4 <memset>
 800e55e:	4b05      	ldr	r3, [pc, #20]	; (800e574 <std+0x38>)
 800e560:	6224      	str	r4, [r4, #32]
 800e562:	6263      	str	r3, [r4, #36]	; 0x24
 800e564:	4b04      	ldr	r3, [pc, #16]	; (800e578 <std+0x3c>)
 800e566:	62a3      	str	r3, [r4, #40]	; 0x28
 800e568:	4b04      	ldr	r3, [pc, #16]	; (800e57c <std+0x40>)
 800e56a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e56c:	4b04      	ldr	r3, [pc, #16]	; (800e580 <std+0x44>)
 800e56e:	6323      	str	r3, [r4, #48]	; 0x30
 800e570:	bd10      	pop	{r4, pc}
 800e572:	bf00      	nop
 800e574:	0800e88d 	.word	0x0800e88d
 800e578:	0800e8af 	.word	0x0800e8af
 800e57c:	0800e8e7 	.word	0x0800e8e7
 800e580:	0800e90b 	.word	0x0800e90b

0800e584 <_cleanup_r>:
 800e584:	4901      	ldr	r1, [pc, #4]	; (800e58c <_cleanup_r+0x8>)
 800e586:	f000 b8af 	b.w	800e6e8 <_fwalk_reent>
 800e58a:	bf00      	nop
 800e58c:	0800e4c5 	.word	0x0800e4c5

0800e590 <__sfmoreglue>:
 800e590:	b570      	push	{r4, r5, r6, lr}
 800e592:	2568      	movs	r5, #104	; 0x68
 800e594:	1e4a      	subs	r2, r1, #1
 800e596:	4355      	muls	r5, r2
 800e598:	460e      	mov	r6, r1
 800e59a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e59e:	f7ff fa89 	bl	800dab4 <_malloc_r>
 800e5a2:	4604      	mov	r4, r0
 800e5a4:	b140      	cbz	r0, 800e5b8 <__sfmoreglue+0x28>
 800e5a6:	2100      	movs	r1, #0
 800e5a8:	e9c0 1600 	strd	r1, r6, [r0]
 800e5ac:	300c      	adds	r0, #12
 800e5ae:	60a0      	str	r0, [r4, #8]
 800e5b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e5b4:	f7fd fb76 	bl	800bca4 <memset>
 800e5b8:	4620      	mov	r0, r4
 800e5ba:	bd70      	pop	{r4, r5, r6, pc}

0800e5bc <__sfp_lock_acquire>:
 800e5bc:	4801      	ldr	r0, [pc, #4]	; (800e5c4 <__sfp_lock_acquire+0x8>)
 800e5be:	f000 b8b3 	b.w	800e728 <__retarget_lock_acquire_recursive>
 800e5c2:	bf00      	nop
 800e5c4:	20000f9c 	.word	0x20000f9c

0800e5c8 <__sfp_lock_release>:
 800e5c8:	4801      	ldr	r0, [pc, #4]	; (800e5d0 <__sfp_lock_release+0x8>)
 800e5ca:	f000 b8ae 	b.w	800e72a <__retarget_lock_release_recursive>
 800e5ce:	bf00      	nop
 800e5d0:	20000f9c 	.word	0x20000f9c

0800e5d4 <__sinit_lock_acquire>:
 800e5d4:	4801      	ldr	r0, [pc, #4]	; (800e5dc <__sinit_lock_acquire+0x8>)
 800e5d6:	f000 b8a7 	b.w	800e728 <__retarget_lock_acquire_recursive>
 800e5da:	bf00      	nop
 800e5dc:	20000f97 	.word	0x20000f97

0800e5e0 <__sinit_lock_release>:
 800e5e0:	4801      	ldr	r0, [pc, #4]	; (800e5e8 <__sinit_lock_release+0x8>)
 800e5e2:	f000 b8a2 	b.w	800e72a <__retarget_lock_release_recursive>
 800e5e6:	bf00      	nop
 800e5e8:	20000f97 	.word	0x20000f97

0800e5ec <__sinit>:
 800e5ec:	b510      	push	{r4, lr}
 800e5ee:	4604      	mov	r4, r0
 800e5f0:	f7ff fff0 	bl	800e5d4 <__sinit_lock_acquire>
 800e5f4:	69a3      	ldr	r3, [r4, #24]
 800e5f6:	b11b      	cbz	r3, 800e600 <__sinit+0x14>
 800e5f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e5fc:	f7ff bff0 	b.w	800e5e0 <__sinit_lock_release>
 800e600:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e604:	6523      	str	r3, [r4, #80]	; 0x50
 800e606:	4b13      	ldr	r3, [pc, #76]	; (800e654 <__sinit+0x68>)
 800e608:	4a13      	ldr	r2, [pc, #76]	; (800e658 <__sinit+0x6c>)
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	62a2      	str	r2, [r4, #40]	; 0x28
 800e60e:	42a3      	cmp	r3, r4
 800e610:	bf08      	it	eq
 800e612:	2301      	moveq	r3, #1
 800e614:	4620      	mov	r0, r4
 800e616:	bf08      	it	eq
 800e618:	61a3      	streq	r3, [r4, #24]
 800e61a:	f000 f81f 	bl	800e65c <__sfp>
 800e61e:	6060      	str	r0, [r4, #4]
 800e620:	4620      	mov	r0, r4
 800e622:	f000 f81b 	bl	800e65c <__sfp>
 800e626:	60a0      	str	r0, [r4, #8]
 800e628:	4620      	mov	r0, r4
 800e62a:	f000 f817 	bl	800e65c <__sfp>
 800e62e:	2200      	movs	r2, #0
 800e630:	2104      	movs	r1, #4
 800e632:	60e0      	str	r0, [r4, #12]
 800e634:	6860      	ldr	r0, [r4, #4]
 800e636:	f7ff ff81 	bl	800e53c <std>
 800e63a:	2201      	movs	r2, #1
 800e63c:	2109      	movs	r1, #9
 800e63e:	68a0      	ldr	r0, [r4, #8]
 800e640:	f7ff ff7c 	bl	800e53c <std>
 800e644:	2202      	movs	r2, #2
 800e646:	2112      	movs	r1, #18
 800e648:	68e0      	ldr	r0, [r4, #12]
 800e64a:	f7ff ff77 	bl	800e53c <std>
 800e64e:	2301      	movs	r3, #1
 800e650:	61a3      	str	r3, [r4, #24]
 800e652:	e7d1      	b.n	800e5f8 <__sinit+0xc>
 800e654:	0800f114 	.word	0x0800f114
 800e658:	0800e585 	.word	0x0800e585

0800e65c <__sfp>:
 800e65c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e65e:	4607      	mov	r7, r0
 800e660:	f7ff ffac 	bl	800e5bc <__sfp_lock_acquire>
 800e664:	4b1e      	ldr	r3, [pc, #120]	; (800e6e0 <__sfp+0x84>)
 800e666:	681e      	ldr	r6, [r3, #0]
 800e668:	69b3      	ldr	r3, [r6, #24]
 800e66a:	b913      	cbnz	r3, 800e672 <__sfp+0x16>
 800e66c:	4630      	mov	r0, r6
 800e66e:	f7ff ffbd 	bl	800e5ec <__sinit>
 800e672:	3648      	adds	r6, #72	; 0x48
 800e674:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e678:	3b01      	subs	r3, #1
 800e67a:	d503      	bpl.n	800e684 <__sfp+0x28>
 800e67c:	6833      	ldr	r3, [r6, #0]
 800e67e:	b30b      	cbz	r3, 800e6c4 <__sfp+0x68>
 800e680:	6836      	ldr	r6, [r6, #0]
 800e682:	e7f7      	b.n	800e674 <__sfp+0x18>
 800e684:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e688:	b9d5      	cbnz	r5, 800e6c0 <__sfp+0x64>
 800e68a:	4b16      	ldr	r3, [pc, #88]	; (800e6e4 <__sfp+0x88>)
 800e68c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e690:	60e3      	str	r3, [r4, #12]
 800e692:	6665      	str	r5, [r4, #100]	; 0x64
 800e694:	f000 f847 	bl	800e726 <__retarget_lock_init_recursive>
 800e698:	f7ff ff96 	bl	800e5c8 <__sfp_lock_release>
 800e69c:	2208      	movs	r2, #8
 800e69e:	4629      	mov	r1, r5
 800e6a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e6a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e6a8:	6025      	str	r5, [r4, #0]
 800e6aa:	61a5      	str	r5, [r4, #24]
 800e6ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e6b0:	f7fd faf8 	bl	800bca4 <memset>
 800e6b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e6b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e6bc:	4620      	mov	r0, r4
 800e6be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e6c0:	3468      	adds	r4, #104	; 0x68
 800e6c2:	e7d9      	b.n	800e678 <__sfp+0x1c>
 800e6c4:	2104      	movs	r1, #4
 800e6c6:	4638      	mov	r0, r7
 800e6c8:	f7ff ff62 	bl	800e590 <__sfmoreglue>
 800e6cc:	4604      	mov	r4, r0
 800e6ce:	6030      	str	r0, [r6, #0]
 800e6d0:	2800      	cmp	r0, #0
 800e6d2:	d1d5      	bne.n	800e680 <__sfp+0x24>
 800e6d4:	f7ff ff78 	bl	800e5c8 <__sfp_lock_release>
 800e6d8:	230c      	movs	r3, #12
 800e6da:	603b      	str	r3, [r7, #0]
 800e6dc:	e7ee      	b.n	800e6bc <__sfp+0x60>
 800e6de:	bf00      	nop
 800e6e0:	0800f114 	.word	0x0800f114
 800e6e4:	ffff0001 	.word	0xffff0001

0800e6e8 <_fwalk_reent>:
 800e6e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e6ec:	4606      	mov	r6, r0
 800e6ee:	4688      	mov	r8, r1
 800e6f0:	2700      	movs	r7, #0
 800e6f2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e6f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e6fa:	f1b9 0901 	subs.w	r9, r9, #1
 800e6fe:	d505      	bpl.n	800e70c <_fwalk_reent+0x24>
 800e700:	6824      	ldr	r4, [r4, #0]
 800e702:	2c00      	cmp	r4, #0
 800e704:	d1f7      	bne.n	800e6f6 <_fwalk_reent+0xe>
 800e706:	4638      	mov	r0, r7
 800e708:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e70c:	89ab      	ldrh	r3, [r5, #12]
 800e70e:	2b01      	cmp	r3, #1
 800e710:	d907      	bls.n	800e722 <_fwalk_reent+0x3a>
 800e712:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e716:	3301      	adds	r3, #1
 800e718:	d003      	beq.n	800e722 <_fwalk_reent+0x3a>
 800e71a:	4629      	mov	r1, r5
 800e71c:	4630      	mov	r0, r6
 800e71e:	47c0      	blx	r8
 800e720:	4307      	orrs	r7, r0
 800e722:	3568      	adds	r5, #104	; 0x68
 800e724:	e7e9      	b.n	800e6fa <_fwalk_reent+0x12>

0800e726 <__retarget_lock_init_recursive>:
 800e726:	4770      	bx	lr

0800e728 <__retarget_lock_acquire_recursive>:
 800e728:	4770      	bx	lr

0800e72a <__retarget_lock_release_recursive>:
 800e72a:	4770      	bx	lr

0800e72c <__swhatbuf_r>:
 800e72c:	b570      	push	{r4, r5, r6, lr}
 800e72e:	460e      	mov	r6, r1
 800e730:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e734:	4614      	mov	r4, r2
 800e736:	2900      	cmp	r1, #0
 800e738:	461d      	mov	r5, r3
 800e73a:	b096      	sub	sp, #88	; 0x58
 800e73c:	da07      	bge.n	800e74e <__swhatbuf_r+0x22>
 800e73e:	2300      	movs	r3, #0
 800e740:	602b      	str	r3, [r5, #0]
 800e742:	89b3      	ldrh	r3, [r6, #12]
 800e744:	061a      	lsls	r2, r3, #24
 800e746:	d410      	bmi.n	800e76a <__swhatbuf_r+0x3e>
 800e748:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e74c:	e00e      	b.n	800e76c <__swhatbuf_r+0x40>
 800e74e:	466a      	mov	r2, sp
 800e750:	f000 f902 	bl	800e958 <_fstat_r>
 800e754:	2800      	cmp	r0, #0
 800e756:	dbf2      	blt.n	800e73e <__swhatbuf_r+0x12>
 800e758:	9a01      	ldr	r2, [sp, #4]
 800e75a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e75e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e762:	425a      	negs	r2, r3
 800e764:	415a      	adcs	r2, r3
 800e766:	602a      	str	r2, [r5, #0]
 800e768:	e7ee      	b.n	800e748 <__swhatbuf_r+0x1c>
 800e76a:	2340      	movs	r3, #64	; 0x40
 800e76c:	2000      	movs	r0, #0
 800e76e:	6023      	str	r3, [r4, #0]
 800e770:	b016      	add	sp, #88	; 0x58
 800e772:	bd70      	pop	{r4, r5, r6, pc}

0800e774 <__smakebuf_r>:
 800e774:	898b      	ldrh	r3, [r1, #12]
 800e776:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e778:	079d      	lsls	r5, r3, #30
 800e77a:	4606      	mov	r6, r0
 800e77c:	460c      	mov	r4, r1
 800e77e:	d507      	bpl.n	800e790 <__smakebuf_r+0x1c>
 800e780:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e784:	6023      	str	r3, [r4, #0]
 800e786:	6123      	str	r3, [r4, #16]
 800e788:	2301      	movs	r3, #1
 800e78a:	6163      	str	r3, [r4, #20]
 800e78c:	b002      	add	sp, #8
 800e78e:	bd70      	pop	{r4, r5, r6, pc}
 800e790:	466a      	mov	r2, sp
 800e792:	ab01      	add	r3, sp, #4
 800e794:	f7ff ffca 	bl	800e72c <__swhatbuf_r>
 800e798:	9900      	ldr	r1, [sp, #0]
 800e79a:	4605      	mov	r5, r0
 800e79c:	4630      	mov	r0, r6
 800e79e:	f7ff f989 	bl	800dab4 <_malloc_r>
 800e7a2:	b948      	cbnz	r0, 800e7b8 <__smakebuf_r+0x44>
 800e7a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e7a8:	059a      	lsls	r2, r3, #22
 800e7aa:	d4ef      	bmi.n	800e78c <__smakebuf_r+0x18>
 800e7ac:	f023 0303 	bic.w	r3, r3, #3
 800e7b0:	f043 0302 	orr.w	r3, r3, #2
 800e7b4:	81a3      	strh	r3, [r4, #12]
 800e7b6:	e7e3      	b.n	800e780 <__smakebuf_r+0xc>
 800e7b8:	4b0d      	ldr	r3, [pc, #52]	; (800e7f0 <__smakebuf_r+0x7c>)
 800e7ba:	62b3      	str	r3, [r6, #40]	; 0x28
 800e7bc:	89a3      	ldrh	r3, [r4, #12]
 800e7be:	6020      	str	r0, [r4, #0]
 800e7c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e7c4:	81a3      	strh	r3, [r4, #12]
 800e7c6:	9b00      	ldr	r3, [sp, #0]
 800e7c8:	6120      	str	r0, [r4, #16]
 800e7ca:	6163      	str	r3, [r4, #20]
 800e7cc:	9b01      	ldr	r3, [sp, #4]
 800e7ce:	b15b      	cbz	r3, 800e7e8 <__smakebuf_r+0x74>
 800e7d0:	4630      	mov	r0, r6
 800e7d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e7d6:	f000 f8d1 	bl	800e97c <_isatty_r>
 800e7da:	b128      	cbz	r0, 800e7e8 <__smakebuf_r+0x74>
 800e7dc:	89a3      	ldrh	r3, [r4, #12]
 800e7de:	f023 0303 	bic.w	r3, r3, #3
 800e7e2:	f043 0301 	orr.w	r3, r3, #1
 800e7e6:	81a3      	strh	r3, [r4, #12]
 800e7e8:	89a0      	ldrh	r0, [r4, #12]
 800e7ea:	4305      	orrs	r5, r0
 800e7ec:	81a5      	strh	r5, [r4, #12]
 800e7ee:	e7cd      	b.n	800e78c <__smakebuf_r+0x18>
 800e7f0:	0800e585 	.word	0x0800e585

0800e7f4 <_malloc_usable_size_r>:
 800e7f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e7f8:	1f18      	subs	r0, r3, #4
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	bfbc      	itt	lt
 800e7fe:	580b      	ldrlt	r3, [r1, r0]
 800e800:	18c0      	addlt	r0, r0, r3
 800e802:	4770      	bx	lr

0800e804 <_raise_r>:
 800e804:	291f      	cmp	r1, #31
 800e806:	b538      	push	{r3, r4, r5, lr}
 800e808:	4604      	mov	r4, r0
 800e80a:	460d      	mov	r5, r1
 800e80c:	d904      	bls.n	800e818 <_raise_r+0x14>
 800e80e:	2316      	movs	r3, #22
 800e810:	6003      	str	r3, [r0, #0]
 800e812:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e816:	bd38      	pop	{r3, r4, r5, pc}
 800e818:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e81a:	b112      	cbz	r2, 800e822 <_raise_r+0x1e>
 800e81c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e820:	b94b      	cbnz	r3, 800e836 <_raise_r+0x32>
 800e822:	4620      	mov	r0, r4
 800e824:	f000 f830 	bl	800e888 <_getpid_r>
 800e828:	462a      	mov	r2, r5
 800e82a:	4601      	mov	r1, r0
 800e82c:	4620      	mov	r0, r4
 800e82e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e832:	f000 b817 	b.w	800e864 <_kill_r>
 800e836:	2b01      	cmp	r3, #1
 800e838:	d00a      	beq.n	800e850 <_raise_r+0x4c>
 800e83a:	1c59      	adds	r1, r3, #1
 800e83c:	d103      	bne.n	800e846 <_raise_r+0x42>
 800e83e:	2316      	movs	r3, #22
 800e840:	6003      	str	r3, [r0, #0]
 800e842:	2001      	movs	r0, #1
 800e844:	e7e7      	b.n	800e816 <_raise_r+0x12>
 800e846:	2400      	movs	r4, #0
 800e848:	4628      	mov	r0, r5
 800e84a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e84e:	4798      	blx	r3
 800e850:	2000      	movs	r0, #0
 800e852:	e7e0      	b.n	800e816 <_raise_r+0x12>

0800e854 <raise>:
 800e854:	4b02      	ldr	r3, [pc, #8]	; (800e860 <raise+0xc>)
 800e856:	4601      	mov	r1, r0
 800e858:	6818      	ldr	r0, [r3, #0]
 800e85a:	f7ff bfd3 	b.w	800e804 <_raise_r>
 800e85e:	bf00      	nop
 800e860:	200001f8 	.word	0x200001f8

0800e864 <_kill_r>:
 800e864:	b538      	push	{r3, r4, r5, lr}
 800e866:	2300      	movs	r3, #0
 800e868:	4d06      	ldr	r5, [pc, #24]	; (800e884 <_kill_r+0x20>)
 800e86a:	4604      	mov	r4, r0
 800e86c:	4608      	mov	r0, r1
 800e86e:	4611      	mov	r1, r2
 800e870:	602b      	str	r3, [r5, #0]
 800e872:	f7f3 fc0c 	bl	800208e <_kill>
 800e876:	1c43      	adds	r3, r0, #1
 800e878:	d102      	bne.n	800e880 <_kill_r+0x1c>
 800e87a:	682b      	ldr	r3, [r5, #0]
 800e87c:	b103      	cbz	r3, 800e880 <_kill_r+0x1c>
 800e87e:	6023      	str	r3, [r4, #0]
 800e880:	bd38      	pop	{r3, r4, r5, pc}
 800e882:	bf00      	nop
 800e884:	20000f90 	.word	0x20000f90

0800e888 <_getpid_r>:
 800e888:	f7f3 bbfa 	b.w	8002080 <_getpid>

0800e88c <__sread>:
 800e88c:	b510      	push	{r4, lr}
 800e88e:	460c      	mov	r4, r1
 800e890:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e894:	f000 f894 	bl	800e9c0 <_read_r>
 800e898:	2800      	cmp	r0, #0
 800e89a:	bfab      	itete	ge
 800e89c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e89e:	89a3      	ldrhlt	r3, [r4, #12]
 800e8a0:	181b      	addge	r3, r3, r0
 800e8a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e8a6:	bfac      	ite	ge
 800e8a8:	6563      	strge	r3, [r4, #84]	; 0x54
 800e8aa:	81a3      	strhlt	r3, [r4, #12]
 800e8ac:	bd10      	pop	{r4, pc}

0800e8ae <__swrite>:
 800e8ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8b2:	461f      	mov	r7, r3
 800e8b4:	898b      	ldrh	r3, [r1, #12]
 800e8b6:	4605      	mov	r5, r0
 800e8b8:	05db      	lsls	r3, r3, #23
 800e8ba:	460c      	mov	r4, r1
 800e8bc:	4616      	mov	r6, r2
 800e8be:	d505      	bpl.n	800e8cc <__swrite+0x1e>
 800e8c0:	2302      	movs	r3, #2
 800e8c2:	2200      	movs	r2, #0
 800e8c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e8c8:	f000 f868 	bl	800e99c <_lseek_r>
 800e8cc:	89a3      	ldrh	r3, [r4, #12]
 800e8ce:	4632      	mov	r2, r6
 800e8d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e8d4:	81a3      	strh	r3, [r4, #12]
 800e8d6:	4628      	mov	r0, r5
 800e8d8:	463b      	mov	r3, r7
 800e8da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e8de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e8e2:	f000 b817 	b.w	800e914 <_write_r>

0800e8e6 <__sseek>:
 800e8e6:	b510      	push	{r4, lr}
 800e8e8:	460c      	mov	r4, r1
 800e8ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e8ee:	f000 f855 	bl	800e99c <_lseek_r>
 800e8f2:	1c43      	adds	r3, r0, #1
 800e8f4:	89a3      	ldrh	r3, [r4, #12]
 800e8f6:	bf15      	itete	ne
 800e8f8:	6560      	strne	r0, [r4, #84]	; 0x54
 800e8fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e8fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e902:	81a3      	strheq	r3, [r4, #12]
 800e904:	bf18      	it	ne
 800e906:	81a3      	strhne	r3, [r4, #12]
 800e908:	bd10      	pop	{r4, pc}

0800e90a <__sclose>:
 800e90a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e90e:	f000 b813 	b.w	800e938 <_close_r>
	...

0800e914 <_write_r>:
 800e914:	b538      	push	{r3, r4, r5, lr}
 800e916:	4604      	mov	r4, r0
 800e918:	4608      	mov	r0, r1
 800e91a:	4611      	mov	r1, r2
 800e91c:	2200      	movs	r2, #0
 800e91e:	4d05      	ldr	r5, [pc, #20]	; (800e934 <_write_r+0x20>)
 800e920:	602a      	str	r2, [r5, #0]
 800e922:	461a      	mov	r2, r3
 800e924:	f7f3 fbea 	bl	80020fc <_write>
 800e928:	1c43      	adds	r3, r0, #1
 800e92a:	d102      	bne.n	800e932 <_write_r+0x1e>
 800e92c:	682b      	ldr	r3, [r5, #0]
 800e92e:	b103      	cbz	r3, 800e932 <_write_r+0x1e>
 800e930:	6023      	str	r3, [r4, #0]
 800e932:	bd38      	pop	{r3, r4, r5, pc}
 800e934:	20000f90 	.word	0x20000f90

0800e938 <_close_r>:
 800e938:	b538      	push	{r3, r4, r5, lr}
 800e93a:	2300      	movs	r3, #0
 800e93c:	4d05      	ldr	r5, [pc, #20]	; (800e954 <_close_r+0x1c>)
 800e93e:	4604      	mov	r4, r0
 800e940:	4608      	mov	r0, r1
 800e942:	602b      	str	r3, [r5, #0]
 800e944:	f7f3 fbf6 	bl	8002134 <_close>
 800e948:	1c43      	adds	r3, r0, #1
 800e94a:	d102      	bne.n	800e952 <_close_r+0x1a>
 800e94c:	682b      	ldr	r3, [r5, #0]
 800e94e:	b103      	cbz	r3, 800e952 <_close_r+0x1a>
 800e950:	6023      	str	r3, [r4, #0]
 800e952:	bd38      	pop	{r3, r4, r5, pc}
 800e954:	20000f90 	.word	0x20000f90

0800e958 <_fstat_r>:
 800e958:	b538      	push	{r3, r4, r5, lr}
 800e95a:	2300      	movs	r3, #0
 800e95c:	4d06      	ldr	r5, [pc, #24]	; (800e978 <_fstat_r+0x20>)
 800e95e:	4604      	mov	r4, r0
 800e960:	4608      	mov	r0, r1
 800e962:	4611      	mov	r1, r2
 800e964:	602b      	str	r3, [r5, #0]
 800e966:	f7f3 fbf0 	bl	800214a <_fstat>
 800e96a:	1c43      	adds	r3, r0, #1
 800e96c:	d102      	bne.n	800e974 <_fstat_r+0x1c>
 800e96e:	682b      	ldr	r3, [r5, #0]
 800e970:	b103      	cbz	r3, 800e974 <_fstat_r+0x1c>
 800e972:	6023      	str	r3, [r4, #0]
 800e974:	bd38      	pop	{r3, r4, r5, pc}
 800e976:	bf00      	nop
 800e978:	20000f90 	.word	0x20000f90

0800e97c <_isatty_r>:
 800e97c:	b538      	push	{r3, r4, r5, lr}
 800e97e:	2300      	movs	r3, #0
 800e980:	4d05      	ldr	r5, [pc, #20]	; (800e998 <_isatty_r+0x1c>)
 800e982:	4604      	mov	r4, r0
 800e984:	4608      	mov	r0, r1
 800e986:	602b      	str	r3, [r5, #0]
 800e988:	f7f3 fbee 	bl	8002168 <_isatty>
 800e98c:	1c43      	adds	r3, r0, #1
 800e98e:	d102      	bne.n	800e996 <_isatty_r+0x1a>
 800e990:	682b      	ldr	r3, [r5, #0]
 800e992:	b103      	cbz	r3, 800e996 <_isatty_r+0x1a>
 800e994:	6023      	str	r3, [r4, #0]
 800e996:	bd38      	pop	{r3, r4, r5, pc}
 800e998:	20000f90 	.word	0x20000f90

0800e99c <_lseek_r>:
 800e99c:	b538      	push	{r3, r4, r5, lr}
 800e99e:	4604      	mov	r4, r0
 800e9a0:	4608      	mov	r0, r1
 800e9a2:	4611      	mov	r1, r2
 800e9a4:	2200      	movs	r2, #0
 800e9a6:	4d05      	ldr	r5, [pc, #20]	; (800e9bc <_lseek_r+0x20>)
 800e9a8:	602a      	str	r2, [r5, #0]
 800e9aa:	461a      	mov	r2, r3
 800e9ac:	f7f3 fbe6 	bl	800217c <_lseek>
 800e9b0:	1c43      	adds	r3, r0, #1
 800e9b2:	d102      	bne.n	800e9ba <_lseek_r+0x1e>
 800e9b4:	682b      	ldr	r3, [r5, #0]
 800e9b6:	b103      	cbz	r3, 800e9ba <_lseek_r+0x1e>
 800e9b8:	6023      	str	r3, [r4, #0]
 800e9ba:	bd38      	pop	{r3, r4, r5, pc}
 800e9bc:	20000f90 	.word	0x20000f90

0800e9c0 <_read_r>:
 800e9c0:	b538      	push	{r3, r4, r5, lr}
 800e9c2:	4604      	mov	r4, r0
 800e9c4:	4608      	mov	r0, r1
 800e9c6:	4611      	mov	r1, r2
 800e9c8:	2200      	movs	r2, #0
 800e9ca:	4d05      	ldr	r5, [pc, #20]	; (800e9e0 <_read_r+0x20>)
 800e9cc:	602a      	str	r2, [r5, #0]
 800e9ce:	461a      	mov	r2, r3
 800e9d0:	f7f3 fb77 	bl	80020c2 <_read>
 800e9d4:	1c43      	adds	r3, r0, #1
 800e9d6:	d102      	bne.n	800e9de <_read_r+0x1e>
 800e9d8:	682b      	ldr	r3, [r5, #0]
 800e9da:	b103      	cbz	r3, 800e9de <_read_r+0x1e>
 800e9dc:	6023      	str	r3, [r4, #0]
 800e9de:	bd38      	pop	{r3, r4, r5, pc}
 800e9e0:	20000f90 	.word	0x20000f90
 800e9e4:	00000000 	.word	0x00000000

0800e9e8 <atan>:
 800e9e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9ec:	4bb6      	ldr	r3, [pc, #728]	; (800ecc8 <atan+0x2e0>)
 800e9ee:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800e9f2:	429e      	cmp	r6, r3
 800e9f4:	4604      	mov	r4, r0
 800e9f6:	460d      	mov	r5, r1
 800e9f8:	468b      	mov	fp, r1
 800e9fa:	dd17      	ble.n	800ea2c <atan+0x44>
 800e9fc:	4bb3      	ldr	r3, [pc, #716]	; (800eccc <atan+0x2e4>)
 800e9fe:	429e      	cmp	r6, r3
 800ea00:	dc01      	bgt.n	800ea06 <atan+0x1e>
 800ea02:	d109      	bne.n	800ea18 <atan+0x30>
 800ea04:	b140      	cbz	r0, 800ea18 <atan+0x30>
 800ea06:	4622      	mov	r2, r4
 800ea08:	462b      	mov	r3, r5
 800ea0a:	4620      	mov	r0, r4
 800ea0c:	4629      	mov	r1, r5
 800ea0e:	f7f1 fbad 	bl	800016c <__adddf3>
 800ea12:	4604      	mov	r4, r0
 800ea14:	460d      	mov	r5, r1
 800ea16:	e005      	b.n	800ea24 <atan+0x3c>
 800ea18:	f1bb 0f00 	cmp.w	fp, #0
 800ea1c:	4cac      	ldr	r4, [pc, #688]	; (800ecd0 <atan+0x2e8>)
 800ea1e:	f300 8121 	bgt.w	800ec64 <atan+0x27c>
 800ea22:	4dac      	ldr	r5, [pc, #688]	; (800ecd4 <atan+0x2ec>)
 800ea24:	4620      	mov	r0, r4
 800ea26:	4629      	mov	r1, r5
 800ea28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea2c:	4baa      	ldr	r3, [pc, #680]	; (800ecd8 <atan+0x2f0>)
 800ea2e:	429e      	cmp	r6, r3
 800ea30:	dc11      	bgt.n	800ea56 <atan+0x6e>
 800ea32:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800ea36:	429e      	cmp	r6, r3
 800ea38:	dc0a      	bgt.n	800ea50 <atan+0x68>
 800ea3a:	a38b      	add	r3, pc, #556	; (adr r3, 800ec68 <atan+0x280>)
 800ea3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea40:	f7f1 fb94 	bl	800016c <__adddf3>
 800ea44:	2200      	movs	r2, #0
 800ea46:	4ba5      	ldr	r3, [pc, #660]	; (800ecdc <atan+0x2f4>)
 800ea48:	f7f1 ffd6 	bl	80009f8 <__aeabi_dcmpgt>
 800ea4c:	2800      	cmp	r0, #0
 800ea4e:	d1e9      	bne.n	800ea24 <atan+0x3c>
 800ea50:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800ea54:	e027      	b.n	800eaa6 <atan+0xbe>
 800ea56:	f000 f951 	bl	800ecfc <fabs>
 800ea5a:	4ba1      	ldr	r3, [pc, #644]	; (800ece0 <atan+0x2f8>)
 800ea5c:	4604      	mov	r4, r0
 800ea5e:	429e      	cmp	r6, r3
 800ea60:	460d      	mov	r5, r1
 800ea62:	f300 80b8 	bgt.w	800ebd6 <atan+0x1ee>
 800ea66:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800ea6a:	429e      	cmp	r6, r3
 800ea6c:	f300 809c 	bgt.w	800eba8 <atan+0x1c0>
 800ea70:	4602      	mov	r2, r0
 800ea72:	460b      	mov	r3, r1
 800ea74:	f7f1 fb7a 	bl	800016c <__adddf3>
 800ea78:	2200      	movs	r2, #0
 800ea7a:	4b98      	ldr	r3, [pc, #608]	; (800ecdc <atan+0x2f4>)
 800ea7c:	f7f1 fb74 	bl	8000168 <__aeabi_dsub>
 800ea80:	2200      	movs	r2, #0
 800ea82:	4606      	mov	r6, r0
 800ea84:	460f      	mov	r7, r1
 800ea86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ea8a:	4620      	mov	r0, r4
 800ea8c:	4629      	mov	r1, r5
 800ea8e:	f7f1 fb6d 	bl	800016c <__adddf3>
 800ea92:	4602      	mov	r2, r0
 800ea94:	460b      	mov	r3, r1
 800ea96:	4630      	mov	r0, r6
 800ea98:	4639      	mov	r1, r7
 800ea9a:	f7f1 fe47 	bl	800072c <__aeabi_ddiv>
 800ea9e:	f04f 0a00 	mov.w	sl, #0
 800eaa2:	4604      	mov	r4, r0
 800eaa4:	460d      	mov	r5, r1
 800eaa6:	4622      	mov	r2, r4
 800eaa8:	462b      	mov	r3, r5
 800eaaa:	4620      	mov	r0, r4
 800eaac:	4629      	mov	r1, r5
 800eaae:	f7f1 fd13 	bl	80004d8 <__aeabi_dmul>
 800eab2:	4602      	mov	r2, r0
 800eab4:	460b      	mov	r3, r1
 800eab6:	4680      	mov	r8, r0
 800eab8:	4689      	mov	r9, r1
 800eaba:	f7f1 fd0d 	bl	80004d8 <__aeabi_dmul>
 800eabe:	a36c      	add	r3, pc, #432	; (adr r3, 800ec70 <atan+0x288>)
 800eac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eac4:	4606      	mov	r6, r0
 800eac6:	460f      	mov	r7, r1
 800eac8:	f7f1 fd06 	bl	80004d8 <__aeabi_dmul>
 800eacc:	a36a      	add	r3, pc, #424	; (adr r3, 800ec78 <atan+0x290>)
 800eace:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ead2:	f7f1 fb4b 	bl	800016c <__adddf3>
 800ead6:	4632      	mov	r2, r6
 800ead8:	463b      	mov	r3, r7
 800eada:	f7f1 fcfd 	bl	80004d8 <__aeabi_dmul>
 800eade:	a368      	add	r3, pc, #416	; (adr r3, 800ec80 <atan+0x298>)
 800eae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eae4:	f7f1 fb42 	bl	800016c <__adddf3>
 800eae8:	4632      	mov	r2, r6
 800eaea:	463b      	mov	r3, r7
 800eaec:	f7f1 fcf4 	bl	80004d8 <__aeabi_dmul>
 800eaf0:	a365      	add	r3, pc, #404	; (adr r3, 800ec88 <atan+0x2a0>)
 800eaf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaf6:	f7f1 fb39 	bl	800016c <__adddf3>
 800eafa:	4632      	mov	r2, r6
 800eafc:	463b      	mov	r3, r7
 800eafe:	f7f1 fceb 	bl	80004d8 <__aeabi_dmul>
 800eb02:	a363      	add	r3, pc, #396	; (adr r3, 800ec90 <atan+0x2a8>)
 800eb04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb08:	f7f1 fb30 	bl	800016c <__adddf3>
 800eb0c:	4632      	mov	r2, r6
 800eb0e:	463b      	mov	r3, r7
 800eb10:	f7f1 fce2 	bl	80004d8 <__aeabi_dmul>
 800eb14:	a360      	add	r3, pc, #384	; (adr r3, 800ec98 <atan+0x2b0>)
 800eb16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb1a:	f7f1 fb27 	bl	800016c <__adddf3>
 800eb1e:	4642      	mov	r2, r8
 800eb20:	464b      	mov	r3, r9
 800eb22:	f7f1 fcd9 	bl	80004d8 <__aeabi_dmul>
 800eb26:	a35e      	add	r3, pc, #376	; (adr r3, 800eca0 <atan+0x2b8>)
 800eb28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb2c:	4680      	mov	r8, r0
 800eb2e:	4689      	mov	r9, r1
 800eb30:	4630      	mov	r0, r6
 800eb32:	4639      	mov	r1, r7
 800eb34:	f7f1 fcd0 	bl	80004d8 <__aeabi_dmul>
 800eb38:	a35b      	add	r3, pc, #364	; (adr r3, 800eca8 <atan+0x2c0>)
 800eb3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb3e:	f7f1 fb13 	bl	8000168 <__aeabi_dsub>
 800eb42:	4632      	mov	r2, r6
 800eb44:	463b      	mov	r3, r7
 800eb46:	f7f1 fcc7 	bl	80004d8 <__aeabi_dmul>
 800eb4a:	a359      	add	r3, pc, #356	; (adr r3, 800ecb0 <atan+0x2c8>)
 800eb4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb50:	f7f1 fb0a 	bl	8000168 <__aeabi_dsub>
 800eb54:	4632      	mov	r2, r6
 800eb56:	463b      	mov	r3, r7
 800eb58:	f7f1 fcbe 	bl	80004d8 <__aeabi_dmul>
 800eb5c:	a356      	add	r3, pc, #344	; (adr r3, 800ecb8 <atan+0x2d0>)
 800eb5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb62:	f7f1 fb01 	bl	8000168 <__aeabi_dsub>
 800eb66:	4632      	mov	r2, r6
 800eb68:	463b      	mov	r3, r7
 800eb6a:	f7f1 fcb5 	bl	80004d8 <__aeabi_dmul>
 800eb6e:	a354      	add	r3, pc, #336	; (adr r3, 800ecc0 <atan+0x2d8>)
 800eb70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb74:	f7f1 faf8 	bl	8000168 <__aeabi_dsub>
 800eb78:	4632      	mov	r2, r6
 800eb7a:	463b      	mov	r3, r7
 800eb7c:	f7f1 fcac 	bl	80004d8 <__aeabi_dmul>
 800eb80:	4602      	mov	r2, r0
 800eb82:	460b      	mov	r3, r1
 800eb84:	4640      	mov	r0, r8
 800eb86:	4649      	mov	r1, r9
 800eb88:	f7f1 faf0 	bl	800016c <__adddf3>
 800eb8c:	4622      	mov	r2, r4
 800eb8e:	462b      	mov	r3, r5
 800eb90:	f7f1 fca2 	bl	80004d8 <__aeabi_dmul>
 800eb94:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800eb98:	4602      	mov	r2, r0
 800eb9a:	460b      	mov	r3, r1
 800eb9c:	d144      	bne.n	800ec28 <atan+0x240>
 800eb9e:	4620      	mov	r0, r4
 800eba0:	4629      	mov	r1, r5
 800eba2:	f7f1 fae1 	bl	8000168 <__aeabi_dsub>
 800eba6:	e734      	b.n	800ea12 <atan+0x2a>
 800eba8:	2200      	movs	r2, #0
 800ebaa:	4b4c      	ldr	r3, [pc, #304]	; (800ecdc <atan+0x2f4>)
 800ebac:	f7f1 fadc 	bl	8000168 <__aeabi_dsub>
 800ebb0:	2200      	movs	r2, #0
 800ebb2:	4606      	mov	r6, r0
 800ebb4:	460f      	mov	r7, r1
 800ebb6:	4620      	mov	r0, r4
 800ebb8:	4629      	mov	r1, r5
 800ebba:	4b48      	ldr	r3, [pc, #288]	; (800ecdc <atan+0x2f4>)
 800ebbc:	f7f1 fad6 	bl	800016c <__adddf3>
 800ebc0:	4602      	mov	r2, r0
 800ebc2:	460b      	mov	r3, r1
 800ebc4:	4630      	mov	r0, r6
 800ebc6:	4639      	mov	r1, r7
 800ebc8:	f7f1 fdb0 	bl	800072c <__aeabi_ddiv>
 800ebcc:	f04f 0a01 	mov.w	sl, #1
 800ebd0:	4604      	mov	r4, r0
 800ebd2:	460d      	mov	r5, r1
 800ebd4:	e767      	b.n	800eaa6 <atan+0xbe>
 800ebd6:	4b43      	ldr	r3, [pc, #268]	; (800ece4 <atan+0x2fc>)
 800ebd8:	429e      	cmp	r6, r3
 800ebda:	da1a      	bge.n	800ec12 <atan+0x22a>
 800ebdc:	2200      	movs	r2, #0
 800ebde:	4b42      	ldr	r3, [pc, #264]	; (800ece8 <atan+0x300>)
 800ebe0:	f7f1 fac2 	bl	8000168 <__aeabi_dsub>
 800ebe4:	2200      	movs	r2, #0
 800ebe6:	4606      	mov	r6, r0
 800ebe8:	460f      	mov	r7, r1
 800ebea:	4620      	mov	r0, r4
 800ebec:	4629      	mov	r1, r5
 800ebee:	4b3e      	ldr	r3, [pc, #248]	; (800ece8 <atan+0x300>)
 800ebf0:	f7f1 fc72 	bl	80004d8 <__aeabi_dmul>
 800ebf4:	2200      	movs	r2, #0
 800ebf6:	4b39      	ldr	r3, [pc, #228]	; (800ecdc <atan+0x2f4>)
 800ebf8:	f7f1 fab8 	bl	800016c <__adddf3>
 800ebfc:	4602      	mov	r2, r0
 800ebfe:	460b      	mov	r3, r1
 800ec00:	4630      	mov	r0, r6
 800ec02:	4639      	mov	r1, r7
 800ec04:	f7f1 fd92 	bl	800072c <__aeabi_ddiv>
 800ec08:	f04f 0a02 	mov.w	sl, #2
 800ec0c:	4604      	mov	r4, r0
 800ec0e:	460d      	mov	r5, r1
 800ec10:	e749      	b.n	800eaa6 <atan+0xbe>
 800ec12:	4602      	mov	r2, r0
 800ec14:	460b      	mov	r3, r1
 800ec16:	2000      	movs	r0, #0
 800ec18:	4934      	ldr	r1, [pc, #208]	; (800ecec <atan+0x304>)
 800ec1a:	f7f1 fd87 	bl	800072c <__aeabi_ddiv>
 800ec1e:	f04f 0a03 	mov.w	sl, #3
 800ec22:	4604      	mov	r4, r0
 800ec24:	460d      	mov	r5, r1
 800ec26:	e73e      	b.n	800eaa6 <atan+0xbe>
 800ec28:	4b31      	ldr	r3, [pc, #196]	; (800ecf0 <atan+0x308>)
 800ec2a:	4e32      	ldr	r6, [pc, #200]	; (800ecf4 <atan+0x30c>)
 800ec2c:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800ec30:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800ec34:	e9da 2300 	ldrd	r2, r3, [sl]
 800ec38:	f7f1 fa96 	bl	8000168 <__aeabi_dsub>
 800ec3c:	4622      	mov	r2, r4
 800ec3e:	462b      	mov	r3, r5
 800ec40:	f7f1 fa92 	bl	8000168 <__aeabi_dsub>
 800ec44:	4602      	mov	r2, r0
 800ec46:	460b      	mov	r3, r1
 800ec48:	e9d6 0100 	ldrd	r0, r1, [r6]
 800ec4c:	f7f1 fa8c 	bl	8000168 <__aeabi_dsub>
 800ec50:	f1bb 0f00 	cmp.w	fp, #0
 800ec54:	4604      	mov	r4, r0
 800ec56:	460d      	mov	r5, r1
 800ec58:	f6bf aee4 	bge.w	800ea24 <atan+0x3c>
 800ec5c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ec60:	461d      	mov	r5, r3
 800ec62:	e6df      	b.n	800ea24 <atan+0x3c>
 800ec64:	4d24      	ldr	r5, [pc, #144]	; (800ecf8 <atan+0x310>)
 800ec66:	e6dd      	b.n	800ea24 <atan+0x3c>
 800ec68:	8800759c 	.word	0x8800759c
 800ec6c:	7e37e43c 	.word	0x7e37e43c
 800ec70:	e322da11 	.word	0xe322da11
 800ec74:	3f90ad3a 	.word	0x3f90ad3a
 800ec78:	24760deb 	.word	0x24760deb
 800ec7c:	3fa97b4b 	.word	0x3fa97b4b
 800ec80:	a0d03d51 	.word	0xa0d03d51
 800ec84:	3fb10d66 	.word	0x3fb10d66
 800ec88:	c54c206e 	.word	0xc54c206e
 800ec8c:	3fb745cd 	.word	0x3fb745cd
 800ec90:	920083ff 	.word	0x920083ff
 800ec94:	3fc24924 	.word	0x3fc24924
 800ec98:	5555550d 	.word	0x5555550d
 800ec9c:	3fd55555 	.word	0x3fd55555
 800eca0:	2c6a6c2f 	.word	0x2c6a6c2f
 800eca4:	bfa2b444 	.word	0xbfa2b444
 800eca8:	52defd9a 	.word	0x52defd9a
 800ecac:	3fadde2d 	.word	0x3fadde2d
 800ecb0:	af749a6d 	.word	0xaf749a6d
 800ecb4:	3fb3b0f2 	.word	0x3fb3b0f2
 800ecb8:	fe231671 	.word	0xfe231671
 800ecbc:	3fbc71c6 	.word	0x3fbc71c6
 800ecc0:	9998ebc4 	.word	0x9998ebc4
 800ecc4:	3fc99999 	.word	0x3fc99999
 800ecc8:	440fffff 	.word	0x440fffff
 800eccc:	7ff00000 	.word	0x7ff00000
 800ecd0:	54442d18 	.word	0x54442d18
 800ecd4:	bff921fb 	.word	0xbff921fb
 800ecd8:	3fdbffff 	.word	0x3fdbffff
 800ecdc:	3ff00000 	.word	0x3ff00000
 800ece0:	3ff2ffff 	.word	0x3ff2ffff
 800ece4:	40038000 	.word	0x40038000
 800ece8:	3ff80000 	.word	0x3ff80000
 800ecec:	bff00000 	.word	0xbff00000
 800ecf0:	0800f518 	.word	0x0800f518
 800ecf4:	0800f4f8 	.word	0x0800f4f8
 800ecf8:	3ff921fb 	.word	0x3ff921fb

0800ecfc <fabs>:
 800ecfc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800ed00:	4770      	bx	lr

0800ed02 <atan2>:
 800ed02:	f000 b82d 	b.w	800ed60 <__ieee754_atan2>
	...

0800ed08 <sqrt>:
 800ed08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed0a:	4606      	mov	r6, r0
 800ed0c:	460f      	mov	r7, r1
 800ed0e:	f000 f8f9 	bl	800ef04 <__ieee754_sqrt>
 800ed12:	4b12      	ldr	r3, [pc, #72]	; (800ed5c <sqrt+0x54>)
 800ed14:	4604      	mov	r4, r0
 800ed16:	f993 3000 	ldrsb.w	r3, [r3]
 800ed1a:	460d      	mov	r5, r1
 800ed1c:	3301      	adds	r3, #1
 800ed1e:	d019      	beq.n	800ed54 <sqrt+0x4c>
 800ed20:	4632      	mov	r2, r6
 800ed22:	463b      	mov	r3, r7
 800ed24:	4630      	mov	r0, r6
 800ed26:	4639      	mov	r1, r7
 800ed28:	f7f1 fe70 	bl	8000a0c <__aeabi_dcmpun>
 800ed2c:	b990      	cbnz	r0, 800ed54 <sqrt+0x4c>
 800ed2e:	2200      	movs	r2, #0
 800ed30:	2300      	movs	r3, #0
 800ed32:	4630      	mov	r0, r6
 800ed34:	4639      	mov	r1, r7
 800ed36:	f7f1 fe41 	bl	80009bc <__aeabi_dcmplt>
 800ed3a:	b158      	cbz	r0, 800ed54 <sqrt+0x4c>
 800ed3c:	f7fc ff88 	bl	800bc50 <__errno>
 800ed40:	2321      	movs	r3, #33	; 0x21
 800ed42:	2200      	movs	r2, #0
 800ed44:	6003      	str	r3, [r0, #0]
 800ed46:	2300      	movs	r3, #0
 800ed48:	4610      	mov	r0, r2
 800ed4a:	4619      	mov	r1, r3
 800ed4c:	f7f1 fcee 	bl	800072c <__aeabi_ddiv>
 800ed50:	4604      	mov	r4, r0
 800ed52:	460d      	mov	r5, r1
 800ed54:	4620      	mov	r0, r4
 800ed56:	4629      	mov	r1, r5
 800ed58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed5a:	bf00      	nop
 800ed5c:	200003c8 	.word	0x200003c8

0800ed60 <__ieee754_atan2>:
 800ed60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed64:	4692      	mov	sl, r2
 800ed66:	4699      	mov	r9, r3
 800ed68:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800ed6c:	461f      	mov	r7, r3
 800ed6e:	f1ca 0300 	rsb	r3, sl, #0
 800ed72:	f8df e18c 	ldr.w	lr, [pc, #396]	; 800ef00 <__ieee754_atan2+0x1a0>
 800ed76:	ea43 030a 	orr.w	r3, r3, sl
 800ed7a:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800ed7e:	4573      	cmp	r3, lr
 800ed80:	4604      	mov	r4, r0
 800ed82:	460d      	mov	r5, r1
 800ed84:	d808      	bhi.n	800ed98 <__ieee754_atan2+0x38>
 800ed86:	4246      	negs	r6, r0
 800ed88:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ed8c:	4306      	orrs	r6, r0
 800ed8e:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 800ed92:	4576      	cmp	r6, lr
 800ed94:	468c      	mov	ip, r1
 800ed96:	d908      	bls.n	800edaa <__ieee754_atan2+0x4a>
 800ed98:	4652      	mov	r2, sl
 800ed9a:	464b      	mov	r3, r9
 800ed9c:	4620      	mov	r0, r4
 800ed9e:	4629      	mov	r1, r5
 800eda0:	f7f1 f9e4 	bl	800016c <__adddf3>
 800eda4:	4604      	mov	r4, r0
 800eda6:	460d      	mov	r5, r1
 800eda8:	e019      	b.n	800edde <__ieee754_atan2+0x7e>
 800edaa:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 800edae:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 800edb2:	ea56 060a 	orrs.w	r6, r6, sl
 800edb6:	d103      	bne.n	800edc0 <__ieee754_atan2+0x60>
 800edb8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edbc:	f7ff be14 	b.w	800e9e8 <atan>
 800edc0:	17be      	asrs	r6, r7, #30
 800edc2:	f006 0602 	and.w	r6, r6, #2
 800edc6:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800edca:	ea53 0100 	orrs.w	r1, r3, r0
 800edce:	d10a      	bne.n	800ede6 <__ieee754_atan2+0x86>
 800edd0:	2e02      	cmp	r6, #2
 800edd2:	d067      	beq.n	800eea4 <__ieee754_atan2+0x144>
 800edd4:	2e03      	cmp	r6, #3
 800edd6:	d102      	bne.n	800edde <__ieee754_atan2+0x7e>
 800edd8:	a53b      	add	r5, pc, #236	; (adr r5, 800eec8 <__ieee754_atan2+0x168>)
 800edda:	e9d5 4500 	ldrd	r4, r5, [r5]
 800edde:	4620      	mov	r0, r4
 800ede0:	4629      	mov	r1, r5
 800ede2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ede6:	ea52 010a 	orrs.w	r1, r2, sl
 800edea:	d106      	bne.n	800edfa <__ieee754_atan2+0x9a>
 800edec:	f1bc 0f00 	cmp.w	ip, #0
 800edf0:	da63      	bge.n	800eeba <__ieee754_atan2+0x15a>
 800edf2:	a537      	add	r5, pc, #220	; (adr r5, 800eed0 <__ieee754_atan2+0x170>)
 800edf4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800edf8:	e7f1      	b.n	800edde <__ieee754_atan2+0x7e>
 800edfa:	4572      	cmp	r2, lr
 800edfc:	d10f      	bne.n	800ee1e <__ieee754_atan2+0xbe>
 800edfe:	4293      	cmp	r3, r2
 800ee00:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 800ee04:	d107      	bne.n	800ee16 <__ieee754_atan2+0xb6>
 800ee06:	2e02      	cmp	r6, #2
 800ee08:	d850      	bhi.n	800eeac <__ieee754_atan2+0x14c>
 800ee0a:	4b3b      	ldr	r3, [pc, #236]	; (800eef8 <__ieee754_atan2+0x198>)
 800ee0c:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800ee10:	e9d6 4500 	ldrd	r4, r5, [r6]
 800ee14:	e7e3      	b.n	800edde <__ieee754_atan2+0x7e>
 800ee16:	2e02      	cmp	r6, #2
 800ee18:	d84c      	bhi.n	800eeb4 <__ieee754_atan2+0x154>
 800ee1a:	4b38      	ldr	r3, [pc, #224]	; (800eefc <__ieee754_atan2+0x19c>)
 800ee1c:	e7f6      	b.n	800ee0c <__ieee754_atan2+0xac>
 800ee1e:	4573      	cmp	r3, lr
 800ee20:	d0e4      	beq.n	800edec <__ieee754_atan2+0x8c>
 800ee22:	1a9b      	subs	r3, r3, r2
 800ee24:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800ee28:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ee2c:	da20      	bge.n	800ee70 <__ieee754_atan2+0x110>
 800ee2e:	2f00      	cmp	r7, #0
 800ee30:	da01      	bge.n	800ee36 <__ieee754_atan2+0xd6>
 800ee32:	323c      	adds	r2, #60	; 0x3c
 800ee34:	db20      	blt.n	800ee78 <__ieee754_atan2+0x118>
 800ee36:	4652      	mov	r2, sl
 800ee38:	464b      	mov	r3, r9
 800ee3a:	4620      	mov	r0, r4
 800ee3c:	4629      	mov	r1, r5
 800ee3e:	f7f1 fc75 	bl	800072c <__aeabi_ddiv>
 800ee42:	f7ff ff5b 	bl	800ecfc <fabs>
 800ee46:	f7ff fdcf 	bl	800e9e8 <atan>
 800ee4a:	4604      	mov	r4, r0
 800ee4c:	460d      	mov	r5, r1
 800ee4e:	2e01      	cmp	r6, #1
 800ee50:	d015      	beq.n	800ee7e <__ieee754_atan2+0x11e>
 800ee52:	2e02      	cmp	r6, #2
 800ee54:	d017      	beq.n	800ee86 <__ieee754_atan2+0x126>
 800ee56:	2e00      	cmp	r6, #0
 800ee58:	d0c1      	beq.n	800edde <__ieee754_atan2+0x7e>
 800ee5a:	a31f      	add	r3, pc, #124	; (adr r3, 800eed8 <__ieee754_atan2+0x178>)
 800ee5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee60:	4620      	mov	r0, r4
 800ee62:	4629      	mov	r1, r5
 800ee64:	f7f1 f980 	bl	8000168 <__aeabi_dsub>
 800ee68:	a31d      	add	r3, pc, #116	; (adr r3, 800eee0 <__ieee754_atan2+0x180>)
 800ee6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee6e:	e016      	b.n	800ee9e <__ieee754_atan2+0x13e>
 800ee70:	a51d      	add	r5, pc, #116	; (adr r5, 800eee8 <__ieee754_atan2+0x188>)
 800ee72:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ee76:	e7ea      	b.n	800ee4e <__ieee754_atan2+0xee>
 800ee78:	2400      	movs	r4, #0
 800ee7a:	2500      	movs	r5, #0
 800ee7c:	e7e7      	b.n	800ee4e <__ieee754_atan2+0xee>
 800ee7e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800ee82:	461d      	mov	r5, r3
 800ee84:	e7ab      	b.n	800edde <__ieee754_atan2+0x7e>
 800ee86:	a314      	add	r3, pc, #80	; (adr r3, 800eed8 <__ieee754_atan2+0x178>)
 800ee88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee8c:	4620      	mov	r0, r4
 800ee8e:	4629      	mov	r1, r5
 800ee90:	f7f1 f96a 	bl	8000168 <__aeabi_dsub>
 800ee94:	4602      	mov	r2, r0
 800ee96:	460b      	mov	r3, r1
 800ee98:	a111      	add	r1, pc, #68	; (adr r1, 800eee0 <__ieee754_atan2+0x180>)
 800ee9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ee9e:	f7f1 f963 	bl	8000168 <__aeabi_dsub>
 800eea2:	e77f      	b.n	800eda4 <__ieee754_atan2+0x44>
 800eea4:	a50e      	add	r5, pc, #56	; (adr r5, 800eee0 <__ieee754_atan2+0x180>)
 800eea6:	e9d5 4500 	ldrd	r4, r5, [r5]
 800eeaa:	e798      	b.n	800edde <__ieee754_atan2+0x7e>
 800eeac:	a510      	add	r5, pc, #64	; (adr r5, 800eef0 <__ieee754_atan2+0x190>)
 800eeae:	e9d5 4500 	ldrd	r4, r5, [r5]
 800eeb2:	e794      	b.n	800edde <__ieee754_atan2+0x7e>
 800eeb4:	2400      	movs	r4, #0
 800eeb6:	2500      	movs	r5, #0
 800eeb8:	e791      	b.n	800edde <__ieee754_atan2+0x7e>
 800eeba:	a50b      	add	r5, pc, #44	; (adr r5, 800eee8 <__ieee754_atan2+0x188>)
 800eebc:	e9d5 4500 	ldrd	r4, r5, [r5]
 800eec0:	e78d      	b.n	800edde <__ieee754_atan2+0x7e>
 800eec2:	bf00      	nop
 800eec4:	f3af 8000 	nop.w
 800eec8:	54442d18 	.word	0x54442d18
 800eecc:	c00921fb 	.word	0xc00921fb
 800eed0:	54442d18 	.word	0x54442d18
 800eed4:	bff921fb 	.word	0xbff921fb
 800eed8:	33145c07 	.word	0x33145c07
 800eedc:	3ca1a626 	.word	0x3ca1a626
 800eee0:	54442d18 	.word	0x54442d18
 800eee4:	400921fb 	.word	0x400921fb
 800eee8:	54442d18 	.word	0x54442d18
 800eeec:	3ff921fb 	.word	0x3ff921fb
 800eef0:	54442d18 	.word	0x54442d18
 800eef4:	3fe921fb 	.word	0x3fe921fb
 800eef8:	0800f538 	.word	0x0800f538
 800eefc:	0800f550 	.word	0x0800f550
 800ef00:	7ff00000 	.word	0x7ff00000

0800ef04 <__ieee754_sqrt>:
 800ef04:	f8df c150 	ldr.w	ip, [pc, #336]	; 800f058 <__ieee754_sqrt+0x154>
 800ef08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef0c:	ea3c 0c01 	bics.w	ip, ip, r1
 800ef10:	460b      	mov	r3, r1
 800ef12:	4606      	mov	r6, r0
 800ef14:	460d      	mov	r5, r1
 800ef16:	460a      	mov	r2, r1
 800ef18:	4607      	mov	r7, r0
 800ef1a:	4604      	mov	r4, r0
 800ef1c:	d10e      	bne.n	800ef3c <__ieee754_sqrt+0x38>
 800ef1e:	4602      	mov	r2, r0
 800ef20:	f7f1 fada 	bl	80004d8 <__aeabi_dmul>
 800ef24:	4602      	mov	r2, r0
 800ef26:	460b      	mov	r3, r1
 800ef28:	4630      	mov	r0, r6
 800ef2a:	4629      	mov	r1, r5
 800ef2c:	f7f1 f91e 	bl	800016c <__adddf3>
 800ef30:	4606      	mov	r6, r0
 800ef32:	460d      	mov	r5, r1
 800ef34:	4630      	mov	r0, r6
 800ef36:	4629      	mov	r1, r5
 800ef38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef3c:	2900      	cmp	r1, #0
 800ef3e:	dc0d      	bgt.n	800ef5c <__ieee754_sqrt+0x58>
 800ef40:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800ef44:	ea5c 0707 	orrs.w	r7, ip, r7
 800ef48:	d0f4      	beq.n	800ef34 <__ieee754_sqrt+0x30>
 800ef4a:	b139      	cbz	r1, 800ef5c <__ieee754_sqrt+0x58>
 800ef4c:	4602      	mov	r2, r0
 800ef4e:	f7f1 f90b 	bl	8000168 <__aeabi_dsub>
 800ef52:	4602      	mov	r2, r0
 800ef54:	460b      	mov	r3, r1
 800ef56:	f7f1 fbe9 	bl	800072c <__aeabi_ddiv>
 800ef5a:	e7e9      	b.n	800ef30 <__ieee754_sqrt+0x2c>
 800ef5c:	1512      	asrs	r2, r2, #20
 800ef5e:	d074      	beq.n	800f04a <__ieee754_sqrt+0x146>
 800ef60:	2000      	movs	r0, #0
 800ef62:	07d5      	lsls	r5, r2, #31
 800ef64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ef68:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 800ef6c:	bf5e      	ittt	pl
 800ef6e:	0fe3      	lsrpl	r3, r4, #31
 800ef70:	0064      	lslpl	r4, r4, #1
 800ef72:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 800ef76:	0fe3      	lsrs	r3, r4, #31
 800ef78:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800ef7c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800ef80:	2516      	movs	r5, #22
 800ef82:	4601      	mov	r1, r0
 800ef84:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800ef88:	1076      	asrs	r6, r6, #1
 800ef8a:	0064      	lsls	r4, r4, #1
 800ef8c:	188f      	adds	r7, r1, r2
 800ef8e:	429f      	cmp	r7, r3
 800ef90:	bfde      	ittt	le
 800ef92:	1bdb      	suble	r3, r3, r7
 800ef94:	18b9      	addle	r1, r7, r2
 800ef96:	1880      	addle	r0, r0, r2
 800ef98:	005b      	lsls	r3, r3, #1
 800ef9a:	3d01      	subs	r5, #1
 800ef9c:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800efa0:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800efa4:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800efa8:	d1f0      	bne.n	800ef8c <__ieee754_sqrt+0x88>
 800efaa:	462a      	mov	r2, r5
 800efac:	f04f 0e20 	mov.w	lr, #32
 800efb0:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800efb4:	428b      	cmp	r3, r1
 800efb6:	eb07 0c05 	add.w	ip, r7, r5
 800efba:	dc02      	bgt.n	800efc2 <__ieee754_sqrt+0xbe>
 800efbc:	d113      	bne.n	800efe6 <__ieee754_sqrt+0xe2>
 800efbe:	45a4      	cmp	ip, r4
 800efc0:	d811      	bhi.n	800efe6 <__ieee754_sqrt+0xe2>
 800efc2:	f1bc 0f00 	cmp.w	ip, #0
 800efc6:	eb0c 0507 	add.w	r5, ip, r7
 800efca:	da43      	bge.n	800f054 <__ieee754_sqrt+0x150>
 800efcc:	2d00      	cmp	r5, #0
 800efce:	db41      	blt.n	800f054 <__ieee754_sqrt+0x150>
 800efd0:	f101 0801 	add.w	r8, r1, #1
 800efd4:	1a5b      	subs	r3, r3, r1
 800efd6:	4641      	mov	r1, r8
 800efd8:	45a4      	cmp	ip, r4
 800efda:	bf88      	it	hi
 800efdc:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 800efe0:	eba4 040c 	sub.w	r4, r4, ip
 800efe4:	443a      	add	r2, r7
 800efe6:	005b      	lsls	r3, r3, #1
 800efe8:	f1be 0e01 	subs.w	lr, lr, #1
 800efec:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800eff0:	ea4f 0757 	mov.w	r7, r7, lsr #1
 800eff4:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800eff8:	d1dc      	bne.n	800efb4 <__ieee754_sqrt+0xb0>
 800effa:	4323      	orrs	r3, r4
 800effc:	d006      	beq.n	800f00c <__ieee754_sqrt+0x108>
 800effe:	1c54      	adds	r4, r2, #1
 800f000:	bf0b      	itete	eq
 800f002:	4672      	moveq	r2, lr
 800f004:	3201      	addne	r2, #1
 800f006:	3001      	addeq	r0, #1
 800f008:	f022 0201 	bicne.w	r2, r2, #1
 800f00c:	1043      	asrs	r3, r0, #1
 800f00e:	07c1      	lsls	r1, r0, #31
 800f010:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800f014:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800f018:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800f01c:	bf48      	it	mi
 800f01e:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800f022:	4610      	mov	r0, r2
 800f024:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800f028:	e782      	b.n	800ef30 <__ieee754_sqrt+0x2c>
 800f02a:	0ae3      	lsrs	r3, r4, #11
 800f02c:	3915      	subs	r1, #21
 800f02e:	0564      	lsls	r4, r4, #21
 800f030:	2b00      	cmp	r3, #0
 800f032:	d0fa      	beq.n	800f02a <__ieee754_sqrt+0x126>
 800f034:	02de      	lsls	r6, r3, #11
 800f036:	d50a      	bpl.n	800f04e <__ieee754_sqrt+0x14a>
 800f038:	f1c2 0020 	rsb	r0, r2, #32
 800f03c:	fa24 f000 	lsr.w	r0, r4, r0
 800f040:	1e55      	subs	r5, r2, #1
 800f042:	4094      	lsls	r4, r2
 800f044:	4303      	orrs	r3, r0
 800f046:	1b4a      	subs	r2, r1, r5
 800f048:	e78a      	b.n	800ef60 <__ieee754_sqrt+0x5c>
 800f04a:	4611      	mov	r1, r2
 800f04c:	e7f0      	b.n	800f030 <__ieee754_sqrt+0x12c>
 800f04e:	005b      	lsls	r3, r3, #1
 800f050:	3201      	adds	r2, #1
 800f052:	e7ef      	b.n	800f034 <__ieee754_sqrt+0x130>
 800f054:	4688      	mov	r8, r1
 800f056:	e7bd      	b.n	800efd4 <__ieee754_sqrt+0xd0>
 800f058:	7ff00000 	.word	0x7ff00000

0800f05c <_init>:
 800f05c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f05e:	bf00      	nop
 800f060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f062:	bc08      	pop	{r3}
 800f064:	469e      	mov	lr, r3
 800f066:	4770      	bx	lr

0800f068 <_fini>:
 800f068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f06a:	bf00      	nop
 800f06c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f06e:	bc08      	pop	{r3}
 800f070:	469e      	mov	lr, r3
 800f072:	4770      	bx	lr
