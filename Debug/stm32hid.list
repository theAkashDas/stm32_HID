
stm32hid.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e1c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08006f28  08006f28  00016f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f8c  08006f8c  00020158  2**0
                  CONTENTS
  4 .ARM          00000000  08006f8c  08006f8c  00020158  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006f8c  08006f8c  00020158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f8c  08006f8c  00016f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f90  08006f90  00016f90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000158  20000000  08006f94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007f4  20000158  080070ec  00020158  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000094c  080070ec  0002094c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020158  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010207  00000000  00000000  00020181  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029b0  00000000  00000000  00030388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f8  00000000  00000000  00032d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008c0  00000000  00000000  00033730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001925c  00000000  00000000  00033ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d002  00000000  00000000  0004d24c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084a42  00000000  00000000  0005a24e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dec90  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000262c  00000000  00000000  000dece4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000158 	.word	0x20000158
 8000128:	00000000 	.word	0x00000000
 800012c:	08006f10 	.word	0x08006f10

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000015c 	.word	0x2000015c
 8000148:	08006f10 	.word	0x08006f10

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 f9a2 	bl	8000498 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f864 	bl	8000220 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8be 	bl	80002d8 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800015c:	f006 faf2 	bl	8006744 <MX_USB_DEVICE_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1))
 8000160:	2102      	movs	r1, #2
 8000162:	482b      	ldr	r0, [pc, #172]	; (8000210 <main+0xc4>)
 8000164:	f000 fcb0 	bl	8000ac8 <HAL_GPIO_ReadPin>
 8000168:	4603      	mov	r3, r0
 800016a:	2b00      	cmp	r3, #0
 800016c:	d11b      	bne.n	80001a6 <main+0x5a>
	  {
		  HAL_Delay(50);
 800016e:	2032      	movs	r0, #50	; 0x32
 8000170:	f000 f9f4 	bl	800055c <HAL_Delay>
//		  keyboardhid.MODIFIER = 0x02;   // for left shift to print capital
		  keyboardhid.MODIFIER = 0x01;   // for left ctrl to copy
 8000174:	4b27      	ldr	r3, [pc, #156]	; (8000214 <main+0xc8>)
 8000176:	2201      	movs	r2, #1
 8000178:	701a      	strb	r2, [r3, #0]
//		  keyboardhid.KEYCODE1 = 0x04;   // for a
		  keyboardhid.KEYCODE1 = 0x06;   // for c
 800017a:	4b26      	ldr	r3, [pc, #152]	; (8000214 <main+0xc8>)
 800017c:	2206      	movs	r2, #6
 800017e:	709a      	strb	r2, [r3, #2]





		  USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof(keyboardhid));
 8000180:	2208      	movs	r2, #8
 8000182:	4924      	ldr	r1, [pc, #144]	; (8000214 <main+0xc8>)
 8000184:	4824      	ldr	r0, [pc, #144]	; (8000218 <main+0xcc>)
 8000186:	f005 f9ed 	bl	8005564 <USBD_HID_SendReport>
		  HAL_Delay(50);
 800018a:	2032      	movs	r0, #50	; 0x32
 800018c:	f000 f9e6 	bl	800055c <HAL_Delay>
		  keyboardhid.MODIFIER = 0x00;   //release left shift
 8000190:	4b20      	ldr	r3, [pc, #128]	; (8000214 <main+0xc8>)
 8000192:	2200      	movs	r2, #0
 8000194:	701a      	strb	r2, [r3, #0]
		  keyboardhid.KEYCODE1 = 0x00;   //realease key
 8000196:	4b1f      	ldr	r3, [pc, #124]	; (8000214 <main+0xc8>)
 8000198:	2200      	movs	r2, #0
 800019a:	709a      	strb	r2, [r3, #2]
		  USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof(keyboardhid));
 800019c:	2208      	movs	r2, #8
 800019e:	491d      	ldr	r1, [pc, #116]	; (8000214 <main+0xc8>)
 80001a0:	481d      	ldr	r0, [pc, #116]	; (8000218 <main+0xcc>)
 80001a2:	f005 f9df 	bl	8005564 <USBD_HID_SendReport>


	  }
	  if(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2))
 80001a6:	2104      	movs	r1, #4
 80001a8:	4819      	ldr	r0, [pc, #100]	; (8000210 <main+0xc4>)
 80001aa:	f000 fc8d 	bl	8000ac8 <HAL_GPIO_ReadPin>
 80001ae:	4603      	mov	r3, r0
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d128      	bne.n	8000206 <main+0xba>
	  {
		  HAL_Delay(50);
 80001b4:	2032      	movs	r0, #50	; 0x32
 80001b6:	f000 f9d1 	bl	800055c <HAL_Delay>
		  if(HAL_GetTick() - pressed > 100)
 80001ba:	f000 f9c5 	bl	8000548 <HAL_GetTick>
 80001be:	4602      	mov	r2, r0
 80001c0:	4b16      	ldr	r3, [pc, #88]	; (800021c <main+0xd0>)
 80001c2:	681b      	ldr	r3, [r3, #0]
 80001c4:	1ad3      	subs	r3, r2, r3
 80001c6:	2b64      	cmp	r3, #100	; 0x64
 80001c8:	d91d      	bls.n	8000206 <main+0xba>
		  {
			  keyboardhid.MODIFIER = 0x01;   // for left ctrl to paste
 80001ca:	4b12      	ldr	r3, [pc, #72]	; (8000214 <main+0xc8>)
 80001cc:	2201      	movs	r2, #1
 80001ce:	701a      	strb	r2, [r3, #0]
			  keyboardhid.KEYCODE1 = 0x19;   // for v
 80001d0:	4b10      	ldr	r3, [pc, #64]	; (8000214 <main+0xc8>)
 80001d2:	2219      	movs	r2, #25
 80001d4:	709a      	strb	r2, [r3, #2]
			  USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof(keyboardhid));
 80001d6:	2208      	movs	r2, #8
 80001d8:	490e      	ldr	r1, [pc, #56]	; (8000214 <main+0xc8>)
 80001da:	480f      	ldr	r0, [pc, #60]	; (8000218 <main+0xcc>)
 80001dc:	f005 f9c2 	bl	8005564 <USBD_HID_SendReport>
			  HAL_Delay(50);
 80001e0:	2032      	movs	r0, #50	; 0x32
 80001e2:	f000 f9bb 	bl	800055c <HAL_Delay>

			  keyboardhid.MODIFIER = 0x00;   //release left shift
 80001e6:	4b0b      	ldr	r3, [pc, #44]	; (8000214 <main+0xc8>)
 80001e8:	2200      	movs	r2, #0
 80001ea:	701a      	strb	r2, [r3, #0]
			  keyboardhid.KEYCODE1 = 0x00;   //realease key
 80001ec:	4b09      	ldr	r3, [pc, #36]	; (8000214 <main+0xc8>)
 80001ee:	2200      	movs	r2, #0
 80001f0:	709a      	strb	r2, [r3, #2]
			  USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof(keyboardhid));
 80001f2:	2208      	movs	r2, #8
 80001f4:	4907      	ldr	r1, [pc, #28]	; (8000214 <main+0xc8>)
 80001f6:	4808      	ldr	r0, [pc, #32]	; (8000218 <main+0xcc>)
 80001f8:	f005 f9b4 	bl	8005564 <USBD_HID_SendReport>

			  pressed = HAL_GetTick();
 80001fc:	f000 f9a4 	bl	8000548 <HAL_GetTick>
 8000200:	4603      	mov	r3, r0
 8000202:	4a06      	ldr	r2, [pc, #24]	; (800021c <main+0xd0>)
 8000204:	6013      	str	r3, [r2, #0]
		  }
	  }
	  HAL_Delay(10);
 8000206:	200a      	movs	r0, #10
 8000208:	f000 f9a8 	bl	800055c <HAL_Delay>
	  if(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1))
 800020c:	e7a8      	b.n	8000160 <main+0x14>
 800020e:	bf00      	nop
 8000210:	40010800 	.word	0x40010800
 8000214:	20000178 	.word	0x20000178
 8000218:	2000019c 	.word	0x2000019c
 800021c:	20000174 	.word	0x20000174

08000220 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b094      	sub	sp, #80	; 0x50
 8000224:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000226:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800022a:	2228      	movs	r2, #40	; 0x28
 800022c:	2100      	movs	r1, #0
 800022e:	4618      	mov	r0, r3
 8000230:	f006 fe66 	bl	8006f00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000234:	f107 0314 	add.w	r3, r7, #20
 8000238:	2200      	movs	r2, #0
 800023a:	601a      	str	r2, [r3, #0]
 800023c:	605a      	str	r2, [r3, #4]
 800023e:	609a      	str	r2, [r3, #8]
 8000240:	60da      	str	r2, [r3, #12]
 8000242:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000244:	1d3b      	adds	r3, r7, #4
 8000246:	2200      	movs	r2, #0
 8000248:	601a      	str	r2, [r3, #0]
 800024a:	605a      	str	r2, [r3, #4]
 800024c:	609a      	str	r2, [r3, #8]
 800024e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000250:	2301      	movs	r3, #1
 8000252:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000254:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000258:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800025a:	2300      	movs	r3, #0
 800025c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800025e:	2301      	movs	r3, #1
 8000260:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000262:	2302      	movs	r3, #2
 8000264:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000266:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800026a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800026c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000270:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000272:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000276:	4618      	mov	r0, r3
 8000278:	f002 f904 	bl	8002484 <HAL_RCC_OscConfig>
 800027c:	4603      	mov	r3, r0
 800027e:	2b00      	cmp	r3, #0
 8000280:	d001      	beq.n	8000286 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000282:	f000 f873 	bl	800036c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000286:	230f      	movs	r3, #15
 8000288:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800028a:	2302      	movs	r3, #2
 800028c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800028e:	2300      	movs	r3, #0
 8000290:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000292:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000296:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000298:	2300      	movs	r3, #0
 800029a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800029c:	f107 0314 	add.w	r3, r7, #20
 80002a0:	2101      	movs	r1, #1
 80002a2:	4618      	mov	r0, r3
 80002a4:	f002 fb6e 	bl	8002984 <HAL_RCC_ClockConfig>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d001      	beq.n	80002b2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002ae:	f000 f85d 	bl	800036c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80002b2:	2310      	movs	r3, #16
 80002b4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80002b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80002ba:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002bc:	1d3b      	adds	r3, r7, #4
 80002be:	4618      	mov	r0, r3
 80002c0:	f002 fcc8 	bl	8002c54 <HAL_RCCEx_PeriphCLKConfig>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d001      	beq.n	80002ce <SystemClock_Config+0xae>
  {
    Error_Handler();
 80002ca:	f000 f84f 	bl	800036c <Error_Handler>
  }
}
 80002ce:	bf00      	nop
 80002d0:	3750      	adds	r7, #80	; 0x50
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
	...

080002d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b086      	sub	sp, #24
 80002dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002de:	f107 0308 	add.w	r3, r7, #8
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]
 80002e8:	609a      	str	r2, [r3, #8]
 80002ea:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002ec:	4b1d      	ldr	r3, [pc, #116]	; (8000364 <MX_GPIO_Init+0x8c>)
 80002ee:	699b      	ldr	r3, [r3, #24]
 80002f0:	4a1c      	ldr	r2, [pc, #112]	; (8000364 <MX_GPIO_Init+0x8c>)
 80002f2:	f043 0320 	orr.w	r3, r3, #32
 80002f6:	6193      	str	r3, [r2, #24]
 80002f8:	4b1a      	ldr	r3, [pc, #104]	; (8000364 <MX_GPIO_Init+0x8c>)
 80002fa:	699b      	ldr	r3, [r3, #24]
 80002fc:	f003 0320 	and.w	r3, r3, #32
 8000300:	607b      	str	r3, [r7, #4]
 8000302:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000304:	4b17      	ldr	r3, [pc, #92]	; (8000364 <MX_GPIO_Init+0x8c>)
 8000306:	699b      	ldr	r3, [r3, #24]
 8000308:	4a16      	ldr	r2, [pc, #88]	; (8000364 <MX_GPIO_Init+0x8c>)
 800030a:	f043 0304 	orr.w	r3, r3, #4
 800030e:	6193      	str	r3, [r2, #24]
 8000310:	4b14      	ldr	r3, [pc, #80]	; (8000364 <MX_GPIO_Init+0x8c>)
 8000312:	699b      	ldr	r3, [r3, #24]
 8000314:	f003 0304 	and.w	r3, r3, #4
 8000318:	603b      	str	r3, [r7, #0]
 800031a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800031c:	2200      	movs	r2, #0
 800031e:	21f0      	movs	r1, #240	; 0xf0
 8000320:	4811      	ldr	r0, [pc, #68]	; (8000368 <MX_GPIO_Init+0x90>)
 8000322:	f000 fbe8 	bl	8000af6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000326:	230f      	movs	r3, #15
 8000328:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800032a:	2300      	movs	r3, #0
 800032c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800032e:	2301      	movs	r3, #1
 8000330:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000332:	f107 0308 	add.w	r3, r7, #8
 8000336:	4619      	mov	r1, r3
 8000338:	480b      	ldr	r0, [pc, #44]	; (8000368 <MX_GPIO_Init+0x90>)
 800033a:	f000 fa41 	bl	80007c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800033e:	23f0      	movs	r3, #240	; 0xf0
 8000340:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000342:	2301      	movs	r3, #1
 8000344:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000346:	2300      	movs	r3, #0
 8000348:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800034a:	2302      	movs	r3, #2
 800034c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800034e:	f107 0308 	add.w	r3, r7, #8
 8000352:	4619      	mov	r1, r3
 8000354:	4804      	ldr	r0, [pc, #16]	; (8000368 <MX_GPIO_Init+0x90>)
 8000356:	f000 fa33 	bl	80007c0 <HAL_GPIO_Init>

}
 800035a:	bf00      	nop
 800035c:	3718      	adds	r7, #24
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	40021000 	.word	0x40021000
 8000368:	40010800 	.word	0x40010800

0800036c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800036c:	b480      	push	{r7}
 800036e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000370:	b672      	cpsid	i
}
 8000372:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000374:	e7fe      	b.n	8000374 <Error_Handler+0x8>
	...

08000378 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000378:	b480      	push	{r7}
 800037a:	b085      	sub	sp, #20
 800037c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800037e:	4b15      	ldr	r3, [pc, #84]	; (80003d4 <HAL_MspInit+0x5c>)
 8000380:	699b      	ldr	r3, [r3, #24]
 8000382:	4a14      	ldr	r2, [pc, #80]	; (80003d4 <HAL_MspInit+0x5c>)
 8000384:	f043 0301 	orr.w	r3, r3, #1
 8000388:	6193      	str	r3, [r2, #24]
 800038a:	4b12      	ldr	r3, [pc, #72]	; (80003d4 <HAL_MspInit+0x5c>)
 800038c:	699b      	ldr	r3, [r3, #24]
 800038e:	f003 0301 	and.w	r3, r3, #1
 8000392:	60bb      	str	r3, [r7, #8]
 8000394:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000396:	4b0f      	ldr	r3, [pc, #60]	; (80003d4 <HAL_MspInit+0x5c>)
 8000398:	69db      	ldr	r3, [r3, #28]
 800039a:	4a0e      	ldr	r2, [pc, #56]	; (80003d4 <HAL_MspInit+0x5c>)
 800039c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003a0:	61d3      	str	r3, [r2, #28]
 80003a2:	4b0c      	ldr	r3, [pc, #48]	; (80003d4 <HAL_MspInit+0x5c>)
 80003a4:	69db      	ldr	r3, [r3, #28]
 80003a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003aa:	607b      	str	r3, [r7, #4]
 80003ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003ae:	4b0a      	ldr	r3, [pc, #40]	; (80003d8 <HAL_MspInit+0x60>)
 80003b0:	685b      	ldr	r3, [r3, #4]
 80003b2:	60fb      	str	r3, [r7, #12]
 80003b4:	68fb      	ldr	r3, [r7, #12]
 80003b6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003ba:	60fb      	str	r3, [r7, #12]
 80003bc:	68fb      	ldr	r3, [r7, #12]
 80003be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003c2:	60fb      	str	r3, [r7, #12]
 80003c4:	4a04      	ldr	r2, [pc, #16]	; (80003d8 <HAL_MspInit+0x60>)
 80003c6:	68fb      	ldr	r3, [r7, #12]
 80003c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003ca:	bf00      	nop
 80003cc:	3714      	adds	r7, #20
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bc80      	pop	{r7}
 80003d2:	4770      	bx	lr
 80003d4:	40021000 	.word	0x40021000
 80003d8:	40010000 	.word	0x40010000

080003dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003dc:	b480      	push	{r7}
 80003de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003e0:	e7fe      	b.n	80003e0 <NMI_Handler+0x4>

080003e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003e2:	b480      	push	{r7}
 80003e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003e6:	e7fe      	b.n	80003e6 <HardFault_Handler+0x4>

080003e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003ec:	e7fe      	b.n	80003ec <MemManage_Handler+0x4>

080003ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003ee:	b480      	push	{r7}
 80003f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003f2:	e7fe      	b.n	80003f2 <BusFault_Handler+0x4>

080003f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003f8:	e7fe      	b.n	80003f8 <UsageFault_Handler+0x4>

080003fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003fa:	b480      	push	{r7}
 80003fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003fe:	bf00      	nop
 8000400:	46bd      	mov	sp, r7
 8000402:	bc80      	pop	{r7}
 8000404:	4770      	bx	lr

08000406 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000406:	b480      	push	{r7}
 8000408:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800040a:	bf00      	nop
 800040c:	46bd      	mov	sp, r7
 800040e:	bc80      	pop	{r7}
 8000410:	4770      	bx	lr

08000412 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000412:	b480      	push	{r7}
 8000414:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000416:	bf00      	nop
 8000418:	46bd      	mov	sp, r7
 800041a:	bc80      	pop	{r7}
 800041c:	4770      	bx	lr

0800041e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800041e:	b580      	push	{r7, lr}
 8000420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000422:	f000 f87f 	bl	8000524 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000426:	bf00      	nop
 8000428:	bd80      	pop	{r7, pc}
	...

0800042c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000430:	4802      	ldr	r0, [pc, #8]	; (800043c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000432:	f000 fca9 	bl	8000d88 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000436:	bf00      	nop
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	20000660 	.word	0x20000660

08000440 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000444:	bf00      	nop
 8000446:	46bd      	mov	sp, r7
 8000448:	bc80      	pop	{r7}
 800044a:	4770      	bx	lr

0800044c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800044c:	480c      	ldr	r0, [pc, #48]	; (8000480 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800044e:	490d      	ldr	r1, [pc, #52]	; (8000484 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000450:	4a0d      	ldr	r2, [pc, #52]	; (8000488 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000452:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000454:	e002      	b.n	800045c <LoopCopyDataInit>

08000456 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000456:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000458:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800045a:	3304      	adds	r3, #4

0800045c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800045c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800045e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000460:	d3f9      	bcc.n	8000456 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000462:	4a0a      	ldr	r2, [pc, #40]	; (800048c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000464:	4c0a      	ldr	r4, [pc, #40]	; (8000490 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000466:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000468:	e001      	b.n	800046e <LoopFillZerobss>

0800046a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800046a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800046c:	3204      	adds	r2, #4

0800046e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800046e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000470:	d3fb      	bcc.n	800046a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000472:	f7ff ffe5 	bl	8000440 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000476:	f006 fd1f 	bl	8006eb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800047a:	f7ff fe67 	bl	800014c <main>
  bx lr
 800047e:	4770      	bx	lr
  ldr r0, =_sdata
 8000480:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000484:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 8000488:	08006f94 	.word	0x08006f94
  ldr r2, =_sbss
 800048c:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 8000490:	2000094c 	.word	0x2000094c

08000494 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000494:	e7fe      	b.n	8000494 <ADC1_2_IRQHandler>
	...

08000498 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800049c:	4b08      	ldr	r3, [pc, #32]	; (80004c0 <HAL_Init+0x28>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	4a07      	ldr	r2, [pc, #28]	; (80004c0 <HAL_Init+0x28>)
 80004a2:	f043 0310 	orr.w	r3, r3, #16
 80004a6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004a8:	2003      	movs	r0, #3
 80004aa:	f000 f947 	bl	800073c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004ae:	2000      	movs	r0, #0
 80004b0:	f000 f808 	bl	80004c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004b4:	f7ff ff60 	bl	8000378 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80004b8:	2300      	movs	r3, #0
}
 80004ba:	4618      	mov	r0, r3
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	40022000 	.word	0x40022000

080004c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004cc:	4b12      	ldr	r3, [pc, #72]	; (8000518 <HAL_InitTick+0x54>)
 80004ce:	681a      	ldr	r2, [r3, #0]
 80004d0:	4b12      	ldr	r3, [pc, #72]	; (800051c <HAL_InitTick+0x58>)
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	4619      	mov	r1, r3
 80004d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004da:	fbb3 f3f1 	udiv	r3, r3, r1
 80004de:	fbb2 f3f3 	udiv	r3, r2, r3
 80004e2:	4618      	mov	r0, r3
 80004e4:	f000 f95f 	bl	80007a6 <HAL_SYSTICK_Config>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d001      	beq.n	80004f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80004ee:	2301      	movs	r3, #1
 80004f0:	e00e      	b.n	8000510 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	2b0f      	cmp	r3, #15
 80004f6:	d80a      	bhi.n	800050e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004f8:	2200      	movs	r2, #0
 80004fa:	6879      	ldr	r1, [r7, #4]
 80004fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000500:	f000 f927 	bl	8000752 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000504:	4a06      	ldr	r2, [pc, #24]	; (8000520 <HAL_InitTick+0x5c>)
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800050a:	2300      	movs	r3, #0
 800050c:	e000      	b.n	8000510 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800050e:	2301      	movs	r3, #1
}
 8000510:	4618      	mov	r0, r3
 8000512:	3708      	adds	r7, #8
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}
 8000518:	20000000 	.word	0x20000000
 800051c:	20000008 	.word	0x20000008
 8000520:	20000004 	.word	0x20000004

08000524 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000528:	4b05      	ldr	r3, [pc, #20]	; (8000540 <HAL_IncTick+0x1c>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	461a      	mov	r2, r3
 800052e:	4b05      	ldr	r3, [pc, #20]	; (8000544 <HAL_IncTick+0x20>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	4413      	add	r3, r2
 8000534:	4a03      	ldr	r2, [pc, #12]	; (8000544 <HAL_IncTick+0x20>)
 8000536:	6013      	str	r3, [r2, #0]
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	bc80      	pop	{r7}
 800053e:	4770      	bx	lr
 8000540:	20000008 	.word	0x20000008
 8000544:	20000198 	.word	0x20000198

08000548 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  return uwTick;
 800054c:	4b02      	ldr	r3, [pc, #8]	; (8000558 <HAL_GetTick+0x10>)
 800054e:	681b      	ldr	r3, [r3, #0]
}
 8000550:	4618      	mov	r0, r3
 8000552:	46bd      	mov	sp, r7
 8000554:	bc80      	pop	{r7}
 8000556:	4770      	bx	lr
 8000558:	20000198 	.word	0x20000198

0800055c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b084      	sub	sp, #16
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000564:	f7ff fff0 	bl	8000548 <HAL_GetTick>
 8000568:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000574:	d005      	beq.n	8000582 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000576:	4b0a      	ldr	r3, [pc, #40]	; (80005a0 <HAL_Delay+0x44>)
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	461a      	mov	r2, r3
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	4413      	add	r3, r2
 8000580:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000582:	bf00      	nop
 8000584:	f7ff ffe0 	bl	8000548 <HAL_GetTick>
 8000588:	4602      	mov	r2, r0
 800058a:	68bb      	ldr	r3, [r7, #8]
 800058c:	1ad3      	subs	r3, r2, r3
 800058e:	68fa      	ldr	r2, [r7, #12]
 8000590:	429a      	cmp	r2, r3
 8000592:	d8f7      	bhi.n	8000584 <HAL_Delay+0x28>
  {
  }
}
 8000594:	bf00      	nop
 8000596:	bf00      	nop
 8000598:	3710      	adds	r7, #16
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	20000008 	.word	0x20000008

080005a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b085      	sub	sp, #20
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	f003 0307 	and.w	r3, r3, #7
 80005b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005b4:	4b0c      	ldr	r3, [pc, #48]	; (80005e8 <__NVIC_SetPriorityGrouping+0x44>)
 80005b6:	68db      	ldr	r3, [r3, #12]
 80005b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005ba:	68ba      	ldr	r2, [r7, #8]
 80005bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005c0:	4013      	ands	r3, r2
 80005c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005c8:	68bb      	ldr	r3, [r7, #8]
 80005ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005d6:	4a04      	ldr	r2, [pc, #16]	; (80005e8 <__NVIC_SetPriorityGrouping+0x44>)
 80005d8:	68bb      	ldr	r3, [r7, #8]
 80005da:	60d3      	str	r3, [r2, #12]
}
 80005dc:	bf00      	nop
 80005de:	3714      	adds	r7, #20
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bc80      	pop	{r7}
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	e000ed00 	.word	0xe000ed00

080005ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005f0:	4b04      	ldr	r3, [pc, #16]	; (8000604 <__NVIC_GetPriorityGrouping+0x18>)
 80005f2:	68db      	ldr	r3, [r3, #12]
 80005f4:	0a1b      	lsrs	r3, r3, #8
 80005f6:	f003 0307 	and.w	r3, r3, #7
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bc80      	pop	{r7}
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	e000ed00 	.word	0xe000ed00

08000608 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
 800060e:	4603      	mov	r3, r0
 8000610:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000616:	2b00      	cmp	r3, #0
 8000618:	db0b      	blt.n	8000632 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800061a:	79fb      	ldrb	r3, [r7, #7]
 800061c:	f003 021f 	and.w	r2, r3, #31
 8000620:	4906      	ldr	r1, [pc, #24]	; (800063c <__NVIC_EnableIRQ+0x34>)
 8000622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000626:	095b      	lsrs	r3, r3, #5
 8000628:	2001      	movs	r0, #1
 800062a:	fa00 f202 	lsl.w	r2, r0, r2
 800062e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000632:	bf00      	nop
 8000634:	370c      	adds	r7, #12
 8000636:	46bd      	mov	sp, r7
 8000638:	bc80      	pop	{r7}
 800063a:	4770      	bx	lr
 800063c:	e000e100 	.word	0xe000e100

08000640 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
 8000646:	4603      	mov	r3, r0
 8000648:	6039      	str	r1, [r7, #0]
 800064a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800064c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000650:	2b00      	cmp	r3, #0
 8000652:	db0a      	blt.n	800066a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	b2da      	uxtb	r2, r3
 8000658:	490c      	ldr	r1, [pc, #48]	; (800068c <__NVIC_SetPriority+0x4c>)
 800065a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800065e:	0112      	lsls	r2, r2, #4
 8000660:	b2d2      	uxtb	r2, r2
 8000662:	440b      	add	r3, r1
 8000664:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000668:	e00a      	b.n	8000680 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	b2da      	uxtb	r2, r3
 800066e:	4908      	ldr	r1, [pc, #32]	; (8000690 <__NVIC_SetPriority+0x50>)
 8000670:	79fb      	ldrb	r3, [r7, #7]
 8000672:	f003 030f 	and.w	r3, r3, #15
 8000676:	3b04      	subs	r3, #4
 8000678:	0112      	lsls	r2, r2, #4
 800067a:	b2d2      	uxtb	r2, r2
 800067c:	440b      	add	r3, r1
 800067e:	761a      	strb	r2, [r3, #24]
}
 8000680:	bf00      	nop
 8000682:	370c      	adds	r7, #12
 8000684:	46bd      	mov	sp, r7
 8000686:	bc80      	pop	{r7}
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	e000e100 	.word	0xe000e100
 8000690:	e000ed00 	.word	0xe000ed00

08000694 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000694:	b480      	push	{r7}
 8000696:	b089      	sub	sp, #36	; 0x24
 8000698:	af00      	add	r7, sp, #0
 800069a:	60f8      	str	r0, [r7, #12]
 800069c:	60b9      	str	r1, [r7, #8]
 800069e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	f003 0307 	and.w	r3, r3, #7
 80006a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006a8:	69fb      	ldr	r3, [r7, #28]
 80006aa:	f1c3 0307 	rsb	r3, r3, #7
 80006ae:	2b04      	cmp	r3, #4
 80006b0:	bf28      	it	cs
 80006b2:	2304      	movcs	r3, #4
 80006b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006b6:	69fb      	ldr	r3, [r7, #28]
 80006b8:	3304      	adds	r3, #4
 80006ba:	2b06      	cmp	r3, #6
 80006bc:	d902      	bls.n	80006c4 <NVIC_EncodePriority+0x30>
 80006be:	69fb      	ldr	r3, [r7, #28]
 80006c0:	3b03      	subs	r3, #3
 80006c2:	e000      	b.n	80006c6 <NVIC_EncodePriority+0x32>
 80006c4:	2300      	movs	r3, #0
 80006c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80006cc:	69bb      	ldr	r3, [r7, #24]
 80006ce:	fa02 f303 	lsl.w	r3, r2, r3
 80006d2:	43da      	mvns	r2, r3
 80006d4:	68bb      	ldr	r3, [r7, #8]
 80006d6:	401a      	ands	r2, r3
 80006d8:	697b      	ldr	r3, [r7, #20]
 80006da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80006e0:	697b      	ldr	r3, [r7, #20]
 80006e2:	fa01 f303 	lsl.w	r3, r1, r3
 80006e6:	43d9      	mvns	r1, r3
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006ec:	4313      	orrs	r3, r2
         );
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	3724      	adds	r7, #36	; 0x24
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bc80      	pop	{r7}
 80006f6:	4770      	bx	lr

080006f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	3b01      	subs	r3, #1
 8000704:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000708:	d301      	bcc.n	800070e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800070a:	2301      	movs	r3, #1
 800070c:	e00f      	b.n	800072e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800070e:	4a0a      	ldr	r2, [pc, #40]	; (8000738 <SysTick_Config+0x40>)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	3b01      	subs	r3, #1
 8000714:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000716:	210f      	movs	r1, #15
 8000718:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800071c:	f7ff ff90 	bl	8000640 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000720:	4b05      	ldr	r3, [pc, #20]	; (8000738 <SysTick_Config+0x40>)
 8000722:	2200      	movs	r2, #0
 8000724:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000726:	4b04      	ldr	r3, [pc, #16]	; (8000738 <SysTick_Config+0x40>)
 8000728:	2207      	movs	r2, #7
 800072a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800072c:	2300      	movs	r3, #0
}
 800072e:	4618      	mov	r0, r3
 8000730:	3708      	adds	r7, #8
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	e000e010 	.word	0xe000e010

0800073c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000744:	6878      	ldr	r0, [r7, #4]
 8000746:	f7ff ff2d 	bl	80005a4 <__NVIC_SetPriorityGrouping>
}
 800074a:	bf00      	nop
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}

08000752 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000752:	b580      	push	{r7, lr}
 8000754:	b086      	sub	sp, #24
 8000756:	af00      	add	r7, sp, #0
 8000758:	4603      	mov	r3, r0
 800075a:	60b9      	str	r1, [r7, #8]
 800075c:	607a      	str	r2, [r7, #4]
 800075e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000760:	2300      	movs	r3, #0
 8000762:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000764:	f7ff ff42 	bl	80005ec <__NVIC_GetPriorityGrouping>
 8000768:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800076a:	687a      	ldr	r2, [r7, #4]
 800076c:	68b9      	ldr	r1, [r7, #8]
 800076e:	6978      	ldr	r0, [r7, #20]
 8000770:	f7ff ff90 	bl	8000694 <NVIC_EncodePriority>
 8000774:	4602      	mov	r2, r0
 8000776:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800077a:	4611      	mov	r1, r2
 800077c:	4618      	mov	r0, r3
 800077e:	f7ff ff5f 	bl	8000640 <__NVIC_SetPriority>
}
 8000782:	bf00      	nop
 8000784:	3718      	adds	r7, #24
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}

0800078a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800078a:	b580      	push	{r7, lr}
 800078c:	b082      	sub	sp, #8
 800078e:	af00      	add	r7, sp, #0
 8000790:	4603      	mov	r3, r0
 8000792:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff ff35 	bl	8000608 <__NVIC_EnableIRQ>
}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}

080007a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007a6:	b580      	push	{r7, lr}
 80007a8:	b082      	sub	sp, #8
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007ae:	6878      	ldr	r0, [r7, #4]
 80007b0:	f7ff ffa2 	bl	80006f8 <SysTick_Config>
 80007b4:	4603      	mov	r3, r0
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
	...

080007c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b08b      	sub	sp, #44	; 0x2c
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007ca:	2300      	movs	r3, #0
 80007cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80007ce:	2300      	movs	r3, #0
 80007d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007d2:	e169      	b.n	8000aa8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80007d4:	2201      	movs	r2, #1
 80007d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007d8:	fa02 f303 	lsl.w	r3, r2, r3
 80007dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	69fa      	ldr	r2, [r7, #28]
 80007e4:	4013      	ands	r3, r2
 80007e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80007e8:	69ba      	ldr	r2, [r7, #24]
 80007ea:	69fb      	ldr	r3, [r7, #28]
 80007ec:	429a      	cmp	r2, r3
 80007ee:	f040 8158 	bne.w	8000aa2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	685b      	ldr	r3, [r3, #4]
 80007f6:	4a9a      	ldr	r2, [pc, #616]	; (8000a60 <HAL_GPIO_Init+0x2a0>)
 80007f8:	4293      	cmp	r3, r2
 80007fa:	d05e      	beq.n	80008ba <HAL_GPIO_Init+0xfa>
 80007fc:	4a98      	ldr	r2, [pc, #608]	; (8000a60 <HAL_GPIO_Init+0x2a0>)
 80007fe:	4293      	cmp	r3, r2
 8000800:	d875      	bhi.n	80008ee <HAL_GPIO_Init+0x12e>
 8000802:	4a98      	ldr	r2, [pc, #608]	; (8000a64 <HAL_GPIO_Init+0x2a4>)
 8000804:	4293      	cmp	r3, r2
 8000806:	d058      	beq.n	80008ba <HAL_GPIO_Init+0xfa>
 8000808:	4a96      	ldr	r2, [pc, #600]	; (8000a64 <HAL_GPIO_Init+0x2a4>)
 800080a:	4293      	cmp	r3, r2
 800080c:	d86f      	bhi.n	80008ee <HAL_GPIO_Init+0x12e>
 800080e:	4a96      	ldr	r2, [pc, #600]	; (8000a68 <HAL_GPIO_Init+0x2a8>)
 8000810:	4293      	cmp	r3, r2
 8000812:	d052      	beq.n	80008ba <HAL_GPIO_Init+0xfa>
 8000814:	4a94      	ldr	r2, [pc, #592]	; (8000a68 <HAL_GPIO_Init+0x2a8>)
 8000816:	4293      	cmp	r3, r2
 8000818:	d869      	bhi.n	80008ee <HAL_GPIO_Init+0x12e>
 800081a:	4a94      	ldr	r2, [pc, #592]	; (8000a6c <HAL_GPIO_Init+0x2ac>)
 800081c:	4293      	cmp	r3, r2
 800081e:	d04c      	beq.n	80008ba <HAL_GPIO_Init+0xfa>
 8000820:	4a92      	ldr	r2, [pc, #584]	; (8000a6c <HAL_GPIO_Init+0x2ac>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d863      	bhi.n	80008ee <HAL_GPIO_Init+0x12e>
 8000826:	4a92      	ldr	r2, [pc, #584]	; (8000a70 <HAL_GPIO_Init+0x2b0>)
 8000828:	4293      	cmp	r3, r2
 800082a:	d046      	beq.n	80008ba <HAL_GPIO_Init+0xfa>
 800082c:	4a90      	ldr	r2, [pc, #576]	; (8000a70 <HAL_GPIO_Init+0x2b0>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d85d      	bhi.n	80008ee <HAL_GPIO_Init+0x12e>
 8000832:	2b12      	cmp	r3, #18
 8000834:	d82a      	bhi.n	800088c <HAL_GPIO_Init+0xcc>
 8000836:	2b12      	cmp	r3, #18
 8000838:	d859      	bhi.n	80008ee <HAL_GPIO_Init+0x12e>
 800083a:	a201      	add	r2, pc, #4	; (adr r2, 8000840 <HAL_GPIO_Init+0x80>)
 800083c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000840:	080008bb 	.word	0x080008bb
 8000844:	08000895 	.word	0x08000895
 8000848:	080008a7 	.word	0x080008a7
 800084c:	080008e9 	.word	0x080008e9
 8000850:	080008ef 	.word	0x080008ef
 8000854:	080008ef 	.word	0x080008ef
 8000858:	080008ef 	.word	0x080008ef
 800085c:	080008ef 	.word	0x080008ef
 8000860:	080008ef 	.word	0x080008ef
 8000864:	080008ef 	.word	0x080008ef
 8000868:	080008ef 	.word	0x080008ef
 800086c:	080008ef 	.word	0x080008ef
 8000870:	080008ef 	.word	0x080008ef
 8000874:	080008ef 	.word	0x080008ef
 8000878:	080008ef 	.word	0x080008ef
 800087c:	080008ef 	.word	0x080008ef
 8000880:	080008ef 	.word	0x080008ef
 8000884:	0800089d 	.word	0x0800089d
 8000888:	080008b1 	.word	0x080008b1
 800088c:	4a79      	ldr	r2, [pc, #484]	; (8000a74 <HAL_GPIO_Init+0x2b4>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d013      	beq.n	80008ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000892:	e02c      	b.n	80008ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	68db      	ldr	r3, [r3, #12]
 8000898:	623b      	str	r3, [r7, #32]
          break;
 800089a:	e029      	b.n	80008f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	68db      	ldr	r3, [r3, #12]
 80008a0:	3304      	adds	r3, #4
 80008a2:	623b      	str	r3, [r7, #32]
          break;
 80008a4:	e024      	b.n	80008f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	68db      	ldr	r3, [r3, #12]
 80008aa:	3308      	adds	r3, #8
 80008ac:	623b      	str	r3, [r7, #32]
          break;
 80008ae:	e01f      	b.n	80008f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	68db      	ldr	r3, [r3, #12]
 80008b4:	330c      	adds	r3, #12
 80008b6:	623b      	str	r3, [r7, #32]
          break;
 80008b8:	e01a      	b.n	80008f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	689b      	ldr	r3, [r3, #8]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d102      	bne.n	80008c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80008c2:	2304      	movs	r3, #4
 80008c4:	623b      	str	r3, [r7, #32]
          break;
 80008c6:	e013      	b.n	80008f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	689b      	ldr	r3, [r3, #8]
 80008cc:	2b01      	cmp	r3, #1
 80008ce:	d105      	bne.n	80008dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80008d0:	2308      	movs	r3, #8
 80008d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	69fa      	ldr	r2, [r7, #28]
 80008d8:	611a      	str	r2, [r3, #16]
          break;
 80008da:	e009      	b.n	80008f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80008dc:	2308      	movs	r3, #8
 80008de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	69fa      	ldr	r2, [r7, #28]
 80008e4:	615a      	str	r2, [r3, #20]
          break;
 80008e6:	e003      	b.n	80008f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80008e8:	2300      	movs	r3, #0
 80008ea:	623b      	str	r3, [r7, #32]
          break;
 80008ec:	e000      	b.n	80008f0 <HAL_GPIO_Init+0x130>
          break;
 80008ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80008f0:	69bb      	ldr	r3, [r7, #24]
 80008f2:	2bff      	cmp	r3, #255	; 0xff
 80008f4:	d801      	bhi.n	80008fa <HAL_GPIO_Init+0x13a>
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	e001      	b.n	80008fe <HAL_GPIO_Init+0x13e>
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	3304      	adds	r3, #4
 80008fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000900:	69bb      	ldr	r3, [r7, #24]
 8000902:	2bff      	cmp	r3, #255	; 0xff
 8000904:	d802      	bhi.n	800090c <HAL_GPIO_Init+0x14c>
 8000906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000908:	009b      	lsls	r3, r3, #2
 800090a:	e002      	b.n	8000912 <HAL_GPIO_Init+0x152>
 800090c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800090e:	3b08      	subs	r3, #8
 8000910:	009b      	lsls	r3, r3, #2
 8000912:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	681a      	ldr	r2, [r3, #0]
 8000918:	210f      	movs	r1, #15
 800091a:	693b      	ldr	r3, [r7, #16]
 800091c:	fa01 f303 	lsl.w	r3, r1, r3
 8000920:	43db      	mvns	r3, r3
 8000922:	401a      	ands	r2, r3
 8000924:	6a39      	ldr	r1, [r7, #32]
 8000926:	693b      	ldr	r3, [r7, #16]
 8000928:	fa01 f303 	lsl.w	r3, r1, r3
 800092c:	431a      	orrs	r2, r3
 800092e:	697b      	ldr	r3, [r7, #20]
 8000930:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	685b      	ldr	r3, [r3, #4]
 8000936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800093a:	2b00      	cmp	r3, #0
 800093c:	f000 80b1 	beq.w	8000aa2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000940:	4b4d      	ldr	r3, [pc, #308]	; (8000a78 <HAL_GPIO_Init+0x2b8>)
 8000942:	699b      	ldr	r3, [r3, #24]
 8000944:	4a4c      	ldr	r2, [pc, #304]	; (8000a78 <HAL_GPIO_Init+0x2b8>)
 8000946:	f043 0301 	orr.w	r3, r3, #1
 800094a:	6193      	str	r3, [r2, #24]
 800094c:	4b4a      	ldr	r3, [pc, #296]	; (8000a78 <HAL_GPIO_Init+0x2b8>)
 800094e:	699b      	ldr	r3, [r3, #24]
 8000950:	f003 0301 	and.w	r3, r3, #1
 8000954:	60bb      	str	r3, [r7, #8]
 8000956:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000958:	4a48      	ldr	r2, [pc, #288]	; (8000a7c <HAL_GPIO_Init+0x2bc>)
 800095a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800095c:	089b      	lsrs	r3, r3, #2
 800095e:	3302      	adds	r3, #2
 8000960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000964:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000968:	f003 0303 	and.w	r3, r3, #3
 800096c:	009b      	lsls	r3, r3, #2
 800096e:	220f      	movs	r2, #15
 8000970:	fa02 f303 	lsl.w	r3, r2, r3
 8000974:	43db      	mvns	r3, r3
 8000976:	68fa      	ldr	r2, [r7, #12]
 8000978:	4013      	ands	r3, r2
 800097a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	4a40      	ldr	r2, [pc, #256]	; (8000a80 <HAL_GPIO_Init+0x2c0>)
 8000980:	4293      	cmp	r3, r2
 8000982:	d013      	beq.n	80009ac <HAL_GPIO_Init+0x1ec>
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	4a3f      	ldr	r2, [pc, #252]	; (8000a84 <HAL_GPIO_Init+0x2c4>)
 8000988:	4293      	cmp	r3, r2
 800098a:	d00d      	beq.n	80009a8 <HAL_GPIO_Init+0x1e8>
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	4a3e      	ldr	r2, [pc, #248]	; (8000a88 <HAL_GPIO_Init+0x2c8>)
 8000990:	4293      	cmp	r3, r2
 8000992:	d007      	beq.n	80009a4 <HAL_GPIO_Init+0x1e4>
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	4a3d      	ldr	r2, [pc, #244]	; (8000a8c <HAL_GPIO_Init+0x2cc>)
 8000998:	4293      	cmp	r3, r2
 800099a:	d101      	bne.n	80009a0 <HAL_GPIO_Init+0x1e0>
 800099c:	2303      	movs	r3, #3
 800099e:	e006      	b.n	80009ae <HAL_GPIO_Init+0x1ee>
 80009a0:	2304      	movs	r3, #4
 80009a2:	e004      	b.n	80009ae <HAL_GPIO_Init+0x1ee>
 80009a4:	2302      	movs	r3, #2
 80009a6:	e002      	b.n	80009ae <HAL_GPIO_Init+0x1ee>
 80009a8:	2301      	movs	r3, #1
 80009aa:	e000      	b.n	80009ae <HAL_GPIO_Init+0x1ee>
 80009ac:	2300      	movs	r3, #0
 80009ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009b0:	f002 0203 	and.w	r2, r2, #3
 80009b4:	0092      	lsls	r2, r2, #2
 80009b6:	4093      	lsls	r3, r2
 80009b8:	68fa      	ldr	r2, [r7, #12]
 80009ba:	4313      	orrs	r3, r2
 80009bc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80009be:	492f      	ldr	r1, [pc, #188]	; (8000a7c <HAL_GPIO_Init+0x2bc>)
 80009c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009c2:	089b      	lsrs	r3, r3, #2
 80009c4:	3302      	adds	r3, #2
 80009c6:	68fa      	ldr	r2, [r7, #12]
 80009c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	685b      	ldr	r3, [r3, #4]
 80009d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d006      	beq.n	80009e6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80009d8:	4b2d      	ldr	r3, [pc, #180]	; (8000a90 <HAL_GPIO_Init+0x2d0>)
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	492c      	ldr	r1, [pc, #176]	; (8000a90 <HAL_GPIO_Init+0x2d0>)
 80009de:	69bb      	ldr	r3, [r7, #24]
 80009e0:	4313      	orrs	r3, r2
 80009e2:	600b      	str	r3, [r1, #0]
 80009e4:	e006      	b.n	80009f4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80009e6:	4b2a      	ldr	r3, [pc, #168]	; (8000a90 <HAL_GPIO_Init+0x2d0>)
 80009e8:	681a      	ldr	r2, [r3, #0]
 80009ea:	69bb      	ldr	r3, [r7, #24]
 80009ec:	43db      	mvns	r3, r3
 80009ee:	4928      	ldr	r1, [pc, #160]	; (8000a90 <HAL_GPIO_Init+0x2d0>)
 80009f0:	4013      	ands	r3, r2
 80009f2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	685b      	ldr	r3, [r3, #4]
 80009f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d006      	beq.n	8000a0e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a00:	4b23      	ldr	r3, [pc, #140]	; (8000a90 <HAL_GPIO_Init+0x2d0>)
 8000a02:	685a      	ldr	r2, [r3, #4]
 8000a04:	4922      	ldr	r1, [pc, #136]	; (8000a90 <HAL_GPIO_Init+0x2d0>)
 8000a06:	69bb      	ldr	r3, [r7, #24]
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	604b      	str	r3, [r1, #4]
 8000a0c:	e006      	b.n	8000a1c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a0e:	4b20      	ldr	r3, [pc, #128]	; (8000a90 <HAL_GPIO_Init+0x2d0>)
 8000a10:	685a      	ldr	r2, [r3, #4]
 8000a12:	69bb      	ldr	r3, [r7, #24]
 8000a14:	43db      	mvns	r3, r3
 8000a16:	491e      	ldr	r1, [pc, #120]	; (8000a90 <HAL_GPIO_Init+0x2d0>)
 8000a18:	4013      	ands	r3, r2
 8000a1a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d006      	beq.n	8000a36 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a28:	4b19      	ldr	r3, [pc, #100]	; (8000a90 <HAL_GPIO_Init+0x2d0>)
 8000a2a:	689a      	ldr	r2, [r3, #8]
 8000a2c:	4918      	ldr	r1, [pc, #96]	; (8000a90 <HAL_GPIO_Init+0x2d0>)
 8000a2e:	69bb      	ldr	r3, [r7, #24]
 8000a30:	4313      	orrs	r3, r2
 8000a32:	608b      	str	r3, [r1, #8]
 8000a34:	e006      	b.n	8000a44 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a36:	4b16      	ldr	r3, [pc, #88]	; (8000a90 <HAL_GPIO_Init+0x2d0>)
 8000a38:	689a      	ldr	r2, [r3, #8]
 8000a3a:	69bb      	ldr	r3, [r7, #24]
 8000a3c:	43db      	mvns	r3, r3
 8000a3e:	4914      	ldr	r1, [pc, #80]	; (8000a90 <HAL_GPIO_Init+0x2d0>)
 8000a40:	4013      	ands	r3, r2
 8000a42:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d021      	beq.n	8000a94 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a50:	4b0f      	ldr	r3, [pc, #60]	; (8000a90 <HAL_GPIO_Init+0x2d0>)
 8000a52:	68da      	ldr	r2, [r3, #12]
 8000a54:	490e      	ldr	r1, [pc, #56]	; (8000a90 <HAL_GPIO_Init+0x2d0>)
 8000a56:	69bb      	ldr	r3, [r7, #24]
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	60cb      	str	r3, [r1, #12]
 8000a5c:	e021      	b.n	8000aa2 <HAL_GPIO_Init+0x2e2>
 8000a5e:	bf00      	nop
 8000a60:	10320000 	.word	0x10320000
 8000a64:	10310000 	.word	0x10310000
 8000a68:	10220000 	.word	0x10220000
 8000a6c:	10210000 	.word	0x10210000
 8000a70:	10120000 	.word	0x10120000
 8000a74:	10110000 	.word	0x10110000
 8000a78:	40021000 	.word	0x40021000
 8000a7c:	40010000 	.word	0x40010000
 8000a80:	40010800 	.word	0x40010800
 8000a84:	40010c00 	.word	0x40010c00
 8000a88:	40011000 	.word	0x40011000
 8000a8c:	40011400 	.word	0x40011400
 8000a90:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000a94:	4b0b      	ldr	r3, [pc, #44]	; (8000ac4 <HAL_GPIO_Init+0x304>)
 8000a96:	68da      	ldr	r2, [r3, #12]
 8000a98:	69bb      	ldr	r3, [r7, #24]
 8000a9a:	43db      	mvns	r3, r3
 8000a9c:	4909      	ldr	r1, [pc, #36]	; (8000ac4 <HAL_GPIO_Init+0x304>)
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	681a      	ldr	r2, [r3, #0]
 8000aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aae:	fa22 f303 	lsr.w	r3, r2, r3
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	f47f ae8e 	bne.w	80007d4 <HAL_GPIO_Init+0x14>
  }
}
 8000ab8:	bf00      	nop
 8000aba:	bf00      	nop
 8000abc:	372c      	adds	r7, #44	; 0x2c
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bc80      	pop	{r7}
 8000ac2:	4770      	bx	lr
 8000ac4:	40010400 	.word	0x40010400

08000ac8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b085      	sub	sp, #20
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
 8000ad0:	460b      	mov	r3, r1
 8000ad2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	689a      	ldr	r2, [r3, #8]
 8000ad8:	887b      	ldrh	r3, [r7, #2]
 8000ada:	4013      	ands	r3, r2
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d002      	beq.n	8000ae6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	73fb      	strb	r3, [r7, #15]
 8000ae4:	e001      	b.n	8000aea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3714      	adds	r7, #20
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bc80      	pop	{r7}
 8000af4:	4770      	bx	lr

08000af6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000af6:	b480      	push	{r7}
 8000af8:	b083      	sub	sp, #12
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	6078      	str	r0, [r7, #4]
 8000afe:	460b      	mov	r3, r1
 8000b00:	807b      	strh	r3, [r7, #2]
 8000b02:	4613      	mov	r3, r2
 8000b04:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b06:	787b      	ldrb	r3, [r7, #1]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d003      	beq.n	8000b14 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b0c:	887a      	ldrh	r2, [r7, #2]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000b12:	e003      	b.n	8000b1c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b14:	887b      	ldrh	r3, [r7, #2]
 8000b16:	041a      	lsls	r2, r3, #16
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	611a      	str	r2, [r3, #16]
}
 8000b1c:	bf00      	nop
 8000b1e:	370c      	adds	r7, #12
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bc80      	pop	{r7}
 8000b24:	4770      	bx	lr

08000b26 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000b26:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b28:	b08b      	sub	sp, #44	; 0x2c
 8000b2a:	af06      	add	r7, sp, #24
 8000b2c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d101      	bne.n	8000b38 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000b34:	2301      	movs	r3, #1
 8000b36:	e0fd      	b.n	8000d34 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d106      	bne.n	8000b52 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2200      	movs	r2, #0
 8000b48:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000b4c:	6878      	ldr	r0, [r7, #4]
 8000b4e:	f005 ff2d 	bl	80069ac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2203      	movs	r2, #3
 8000b56:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f002 f954 	bl	8002e0c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	603b      	str	r3, [r7, #0]
 8000b6a:	687e      	ldr	r6, [r7, #4]
 8000b6c:	466d      	mov	r5, sp
 8000b6e:	f106 0410 	add.w	r4, r6, #16
 8000b72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b76:	6823      	ldr	r3, [r4, #0]
 8000b78:	602b      	str	r3, [r5, #0]
 8000b7a:	1d33      	adds	r3, r6, #4
 8000b7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b7e:	6838      	ldr	r0, [r7, #0]
 8000b80:	f002 f91e 	bl	8002dc0 <USB_CoreInit>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d005      	beq.n	8000b96 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2202      	movs	r2, #2
 8000b8e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000b92:	2301      	movs	r3, #1
 8000b94:	e0ce      	b.n	8000d34 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f002 f94f 	bl	8002e40 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	73fb      	strb	r3, [r7, #15]
 8000ba6:	e04c      	b.n	8000c42 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000ba8:	7bfb      	ldrb	r3, [r7, #15]
 8000baa:	6879      	ldr	r1, [r7, #4]
 8000bac:	1c5a      	adds	r2, r3, #1
 8000bae:	4613      	mov	r3, r2
 8000bb0:	009b      	lsls	r3, r3, #2
 8000bb2:	4413      	add	r3, r2
 8000bb4:	00db      	lsls	r3, r3, #3
 8000bb6:	440b      	add	r3, r1
 8000bb8:	3301      	adds	r3, #1
 8000bba:	2201      	movs	r2, #1
 8000bbc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000bbe:	7bfb      	ldrb	r3, [r7, #15]
 8000bc0:	6879      	ldr	r1, [r7, #4]
 8000bc2:	1c5a      	adds	r2, r3, #1
 8000bc4:	4613      	mov	r3, r2
 8000bc6:	009b      	lsls	r3, r3, #2
 8000bc8:	4413      	add	r3, r2
 8000bca:	00db      	lsls	r3, r3, #3
 8000bcc:	440b      	add	r3, r1
 8000bce:	7bfa      	ldrb	r2, [r7, #15]
 8000bd0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000bd2:	7bfa      	ldrb	r2, [r7, #15]
 8000bd4:	7bfb      	ldrb	r3, [r7, #15]
 8000bd6:	b298      	uxth	r0, r3
 8000bd8:	6879      	ldr	r1, [r7, #4]
 8000bda:	4613      	mov	r3, r2
 8000bdc:	009b      	lsls	r3, r3, #2
 8000bde:	4413      	add	r3, r2
 8000be0:	00db      	lsls	r3, r3, #3
 8000be2:	440b      	add	r3, r1
 8000be4:	3336      	adds	r3, #54	; 0x36
 8000be6:	4602      	mov	r2, r0
 8000be8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000bea:	7bfb      	ldrb	r3, [r7, #15]
 8000bec:	6879      	ldr	r1, [r7, #4]
 8000bee:	1c5a      	adds	r2, r3, #1
 8000bf0:	4613      	mov	r3, r2
 8000bf2:	009b      	lsls	r3, r3, #2
 8000bf4:	4413      	add	r3, r2
 8000bf6:	00db      	lsls	r3, r3, #3
 8000bf8:	440b      	add	r3, r1
 8000bfa:	3303      	adds	r3, #3
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000c00:	7bfa      	ldrb	r2, [r7, #15]
 8000c02:	6879      	ldr	r1, [r7, #4]
 8000c04:	4613      	mov	r3, r2
 8000c06:	009b      	lsls	r3, r3, #2
 8000c08:	4413      	add	r3, r2
 8000c0a:	00db      	lsls	r3, r3, #3
 8000c0c:	440b      	add	r3, r1
 8000c0e:	3338      	adds	r3, #56	; 0x38
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000c14:	7bfa      	ldrb	r2, [r7, #15]
 8000c16:	6879      	ldr	r1, [r7, #4]
 8000c18:	4613      	mov	r3, r2
 8000c1a:	009b      	lsls	r3, r3, #2
 8000c1c:	4413      	add	r3, r2
 8000c1e:	00db      	lsls	r3, r3, #3
 8000c20:	440b      	add	r3, r1
 8000c22:	333c      	adds	r3, #60	; 0x3c
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000c28:	7bfa      	ldrb	r2, [r7, #15]
 8000c2a:	6879      	ldr	r1, [r7, #4]
 8000c2c:	4613      	mov	r3, r2
 8000c2e:	009b      	lsls	r3, r3, #2
 8000c30:	4413      	add	r3, r2
 8000c32:	00db      	lsls	r3, r3, #3
 8000c34:	440b      	add	r3, r1
 8000c36:	3340      	adds	r3, #64	; 0x40
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c3c:	7bfb      	ldrb	r3, [r7, #15]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	73fb      	strb	r3, [r7, #15]
 8000c42:	7bfa      	ldrb	r2, [r7, #15]
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d3ad      	bcc.n	8000ba8 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	73fb      	strb	r3, [r7, #15]
 8000c50:	e044      	b.n	8000cdc <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000c52:	7bfa      	ldrb	r2, [r7, #15]
 8000c54:	6879      	ldr	r1, [r7, #4]
 8000c56:	4613      	mov	r3, r2
 8000c58:	009b      	lsls	r3, r3, #2
 8000c5a:	4413      	add	r3, r2
 8000c5c:	00db      	lsls	r3, r3, #3
 8000c5e:	440b      	add	r3, r1
 8000c60:	f203 1369 	addw	r3, r3, #361	; 0x169
 8000c64:	2200      	movs	r2, #0
 8000c66:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000c68:	7bfa      	ldrb	r2, [r7, #15]
 8000c6a:	6879      	ldr	r1, [r7, #4]
 8000c6c:	4613      	mov	r3, r2
 8000c6e:	009b      	lsls	r3, r3, #2
 8000c70:	4413      	add	r3, r2
 8000c72:	00db      	lsls	r3, r3, #3
 8000c74:	440b      	add	r3, r1
 8000c76:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000c7a:	7bfa      	ldrb	r2, [r7, #15]
 8000c7c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000c7e:	7bfa      	ldrb	r2, [r7, #15]
 8000c80:	6879      	ldr	r1, [r7, #4]
 8000c82:	4613      	mov	r3, r2
 8000c84:	009b      	lsls	r3, r3, #2
 8000c86:	4413      	add	r3, r2
 8000c88:	00db      	lsls	r3, r3, #3
 8000c8a:	440b      	add	r3, r1
 8000c8c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8000c90:	2200      	movs	r2, #0
 8000c92:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000c94:	7bfa      	ldrb	r2, [r7, #15]
 8000c96:	6879      	ldr	r1, [r7, #4]
 8000c98:	4613      	mov	r3, r2
 8000c9a:	009b      	lsls	r3, r3, #2
 8000c9c:	4413      	add	r3, r2
 8000c9e:	00db      	lsls	r3, r3, #3
 8000ca0:	440b      	add	r3, r1
 8000ca2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000caa:	7bfa      	ldrb	r2, [r7, #15]
 8000cac:	6879      	ldr	r1, [r7, #4]
 8000cae:	4613      	mov	r3, r2
 8000cb0:	009b      	lsls	r3, r3, #2
 8000cb2:	4413      	add	r3, r2
 8000cb4:	00db      	lsls	r3, r3, #3
 8000cb6:	440b      	add	r3, r1
 8000cb8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000cc0:	7bfa      	ldrb	r2, [r7, #15]
 8000cc2:	6879      	ldr	r1, [r7, #4]
 8000cc4:	4613      	mov	r3, r2
 8000cc6:	009b      	lsls	r3, r3, #2
 8000cc8:	4413      	add	r3, r2
 8000cca:	00db      	lsls	r3, r3, #3
 8000ccc:	440b      	add	r3, r1
 8000cce:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000cd6:	7bfb      	ldrb	r3, [r7, #15]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	73fb      	strb	r3, [r7, #15]
 8000cdc:	7bfa      	ldrb	r2, [r7, #15]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d3b5      	bcc.n	8000c52 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	603b      	str	r3, [r7, #0]
 8000cec:	687e      	ldr	r6, [r7, #4]
 8000cee:	466d      	mov	r5, sp
 8000cf0:	f106 0410 	add.w	r4, r6, #16
 8000cf4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cf6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cf8:	6823      	ldr	r3, [r4, #0]
 8000cfa:	602b      	str	r3, [r5, #0]
 8000cfc:	1d33      	adds	r3, r6, #4
 8000cfe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d00:	6838      	ldr	r0, [r7, #0]
 8000d02:	f002 f8a9 	bl	8002e58 <USB_DevInit>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d005      	beq.n	8000d18 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2202      	movs	r2, #2
 8000d10:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000d14:	2301      	movs	r3, #1
 8000d16:	e00d      	b.n	8000d34 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2201      	movs	r2, #1
 8000d24:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f004 fa1a 	bl	8005166 <USB_DevDisconnect>

  return HAL_OK;
 8000d32:	2300      	movs	r3, #0
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3714      	adds	r7, #20
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000d3c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	d101      	bne.n	8000d52 <HAL_PCD_Start+0x16>
 8000d4e:	2302      	movs	r3, #2
 8000d50:	e016      	b.n	8000d80 <HAL_PCD_Start+0x44>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2201      	movs	r2, #1
 8000d56:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f002 f83e 	bl	8002de0 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000d64:	2101      	movs	r1, #1
 8000d66:	6878      	ldr	r0, [r7, #4]
 8000d68:	f006 f86f 	bl	8006e4a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4618      	mov	r0, r3
 8000d72:	f004 f9ee 	bl	8005152 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2200      	movs	r2, #0
 8000d7a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000d7e:	2300      	movs	r3, #0
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	3708      	adds	r7, #8
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b088      	sub	sp, #32
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4618      	mov	r0, r3
 8000d96:	f004 f9f0 	bl	800517a <USB_ReadInterrupts>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000da0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000da4:	d102      	bne.n	8000dac <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000da6:	6878      	ldr	r0, [r7, #4]
 8000da8:	f000 fb4a 	bl	8001440 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4618      	mov	r0, r3
 8000db2:	f004 f9e2 	bl	800517a <USB_ReadInterrupts>
 8000db6:	4603      	mov	r3, r0
 8000db8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000dc0:	d112      	bne.n	8000de8 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000dca:	b29a      	uxth	r2, r3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000dd4:	b292      	uxth	r2, r2
 8000dd6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000dda:	6878      	ldr	r0, [r7, #4]
 8000ddc:	f005 fe61 	bl	8006aa2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000de0:	2100      	movs	r1, #0
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	f000 f925 	bl	8001032 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4618      	mov	r0, r3
 8000dee:	f004 f9c4 	bl	800517a <USB_ReadInterrupts>
 8000df2:	4603      	mov	r3, r0
 8000df4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000df8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000dfc:	d10b      	bne.n	8000e16 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e06:	b29a      	uxth	r2, r3
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000e10:	b292      	uxth	r2, r2
 8000e12:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f004 f9ad 	bl	800517a <USB_ReadInterrupts>
 8000e20:	4603      	mov	r3, r0
 8000e22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e2a:	d10b      	bne.n	8000e44 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e34:	b29a      	uxth	r2, r3
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000e3e:	b292      	uxth	r2, r2
 8000e40:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f004 f996 	bl	800517a <USB_ReadInterrupts>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e58:	d126      	bne.n	8000ea8 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000e62:	b29a      	uxth	r2, r3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f022 0204 	bic.w	r2, r2, #4
 8000e6c:	b292      	uxth	r2, r2
 8000e6e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000e7a:	b29a      	uxth	r2, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f022 0208 	bic.w	r2, r2, #8
 8000e84:	b292      	uxth	r2, r2
 8000e86:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	f005 fe42 	bl	8006b14 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e98:	b29a      	uxth	r2, r3
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000ea2:	b292      	uxth	r2, r2
 8000ea4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4618      	mov	r0, r3
 8000eae:	f004 f964 	bl	800517a <USB_ReadInterrupts>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000eb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000ebc:	f040 8084 	bne.w	8000fc8 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	77fb      	strb	r3, [r7, #31]
 8000ec4:	e011      	b.n	8000eea <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	461a      	mov	r2, r3
 8000ecc:	7ffb      	ldrb	r3, [r7, #31]
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	441a      	add	r2, r3
 8000ed2:	7ffb      	ldrb	r3, [r7, #31]
 8000ed4:	8812      	ldrh	r2, [r2, #0]
 8000ed6:	b292      	uxth	r2, r2
 8000ed8:	005b      	lsls	r3, r3, #1
 8000eda:	f107 0120 	add.w	r1, r7, #32
 8000ede:	440b      	add	r3, r1
 8000ee0:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8000ee4:	7ffb      	ldrb	r3, [r7, #31]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	77fb      	strb	r3, [r7, #31]
 8000eea:	7ffb      	ldrb	r3, [r7, #31]
 8000eec:	2b07      	cmp	r3, #7
 8000eee:	d9ea      	bls.n	8000ec6 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000ef8:	b29a      	uxth	r2, r3
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f042 0201 	orr.w	r2, r2, #1
 8000f02:	b292      	uxth	r2, r2
 8000f04:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000f10:	b29a      	uxth	r2, r3
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f022 0201 	bic.w	r2, r2, #1
 8000f1a:	b292      	uxth	r2, r2
 8000f1c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8000f20:	bf00      	nop
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f2a:	b29b      	uxth	r3, r3
 8000f2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d0f6      	beq.n	8000f22 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f3c:	b29a      	uxth	r2, r3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f46:	b292      	uxth	r2, r2
 8000f48:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	77fb      	strb	r3, [r7, #31]
 8000f50:	e010      	b.n	8000f74 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8000f52:	7ffb      	ldrb	r3, [r7, #31]
 8000f54:	687a      	ldr	r2, [r7, #4]
 8000f56:	6812      	ldr	r2, [r2, #0]
 8000f58:	4611      	mov	r1, r2
 8000f5a:	7ffa      	ldrb	r2, [r7, #31]
 8000f5c:	0092      	lsls	r2, r2, #2
 8000f5e:	440a      	add	r2, r1
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	f107 0120 	add.w	r1, r7, #32
 8000f66:	440b      	add	r3, r1
 8000f68:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8000f6c:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8000f6e:	7ffb      	ldrb	r3, [r7, #31]
 8000f70:	3301      	adds	r3, #1
 8000f72:	77fb      	strb	r3, [r7, #31]
 8000f74:	7ffb      	ldrb	r3, [r7, #31]
 8000f76:	2b07      	cmp	r3, #7
 8000f78:	d9eb      	bls.n	8000f52 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000f82:	b29a      	uxth	r2, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f042 0208 	orr.w	r2, r2, #8
 8000f8c:	b292      	uxth	r2, r2
 8000f8e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f9a:	b29a      	uxth	r2, r3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000fa4:	b292      	uxth	r2, r2
 8000fa6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000fb2:	b29a      	uxth	r2, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f042 0204 	orr.w	r2, r2, #4
 8000fbc:	b292      	uxth	r2, r2
 8000fbe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f005 fd8c 	bl	8006ae0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f004 f8d4 	bl	800517a <USB_ReadInterrupts>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000fdc:	d10e      	bne.n	8000ffc <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000fe6:	b29a      	uxth	r2, r3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000ff0:	b292      	uxth	r2, r2
 8000ff2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f005 fd45 	bl	8006a86 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4618      	mov	r0, r3
 8001002:	f004 f8ba 	bl	800517a <USB_ReadInterrupts>
 8001006:	4603      	mov	r3, r0
 8001008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800100c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001010:	d10b      	bne.n	800102a <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800101a:	b29a      	uxth	r2, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001024:	b292      	uxth	r2, r2
 8001026:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800102a:	bf00      	nop
 800102c:	3720      	adds	r7, #32
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b082      	sub	sp, #8
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
 800103a:	460b      	mov	r3, r1
 800103c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001044:	2b01      	cmp	r3, #1
 8001046:	d101      	bne.n	800104c <HAL_PCD_SetAddress+0x1a>
 8001048:	2302      	movs	r3, #2
 800104a:	e013      	b.n	8001074 <HAL_PCD_SetAddress+0x42>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2201      	movs	r2, #1
 8001050:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	78fa      	ldrb	r2, [r7, #3]
 8001058:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	78fa      	ldrb	r2, [r7, #3]
 8001062:	4611      	mov	r1, r2
 8001064:	4618      	mov	r0, r3
 8001066:	f004 f861 	bl	800512c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2200      	movs	r2, #0
 800106e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001072:	2300      	movs	r3, #0
}
 8001074:	4618      	mov	r0, r3
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	4608      	mov	r0, r1
 8001086:	4611      	mov	r1, r2
 8001088:	461a      	mov	r2, r3
 800108a:	4603      	mov	r3, r0
 800108c:	70fb      	strb	r3, [r7, #3]
 800108e:	460b      	mov	r3, r1
 8001090:	803b      	strh	r3, [r7, #0]
 8001092:	4613      	mov	r3, r2
 8001094:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001096:	2300      	movs	r3, #0
 8001098:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800109a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	da0e      	bge.n	80010c0 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80010a2:	78fb      	ldrb	r3, [r7, #3]
 80010a4:	f003 0307 	and.w	r3, r3, #7
 80010a8:	1c5a      	adds	r2, r3, #1
 80010aa:	4613      	mov	r3, r2
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	4413      	add	r3, r2
 80010b0:	00db      	lsls	r3, r3, #3
 80010b2:	687a      	ldr	r2, [r7, #4]
 80010b4:	4413      	add	r3, r2
 80010b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	2201      	movs	r2, #1
 80010bc:	705a      	strb	r2, [r3, #1]
 80010be:	e00e      	b.n	80010de <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80010c0:	78fb      	ldrb	r3, [r7, #3]
 80010c2:	f003 0207 	and.w	r2, r3, #7
 80010c6:	4613      	mov	r3, r2
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	4413      	add	r3, r2
 80010cc:	00db      	lsls	r3, r3, #3
 80010ce:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	4413      	add	r3, r2
 80010d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	2200      	movs	r2, #0
 80010dc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80010de:	78fb      	ldrb	r3, [r7, #3]
 80010e0:	f003 0307 	and.w	r3, r3, #7
 80010e4:	b2da      	uxtb	r2, r3
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80010ea:	883a      	ldrh	r2, [r7, #0]
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	78ba      	ldrb	r2, [r7, #2]
 80010f4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	785b      	ldrb	r3, [r3, #1]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d004      	beq.n	8001108 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	b29a      	uxth	r2, r3
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001108:	78bb      	ldrb	r3, [r7, #2]
 800110a:	2b02      	cmp	r3, #2
 800110c:	d102      	bne.n	8001114 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	2200      	movs	r2, #0
 8001112:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800111a:	2b01      	cmp	r3, #1
 800111c:	d101      	bne.n	8001122 <HAL_PCD_EP_Open+0xa6>
 800111e:	2302      	movs	r3, #2
 8001120:	e00e      	b.n	8001140 <HAL_PCD_EP_Open+0xc4>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2201      	movs	r2, #1
 8001126:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	68f9      	ldr	r1, [r7, #12]
 8001130:	4618      	mov	r0, r3
 8001132:	f001 feb1 	bl	8002e98 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2200      	movs	r2, #0
 800113a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800113e:	7afb      	ldrb	r3, [r7, #11]
}
 8001140:	4618      	mov	r0, r3
 8001142:	3710      	adds	r7, #16
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	460b      	mov	r3, r1
 8001152:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001154:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001158:	2b00      	cmp	r3, #0
 800115a:	da0e      	bge.n	800117a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800115c:	78fb      	ldrb	r3, [r7, #3]
 800115e:	f003 0307 	and.w	r3, r3, #7
 8001162:	1c5a      	adds	r2, r3, #1
 8001164:	4613      	mov	r3, r2
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	4413      	add	r3, r2
 800116a:	00db      	lsls	r3, r3, #3
 800116c:	687a      	ldr	r2, [r7, #4]
 800116e:	4413      	add	r3, r2
 8001170:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	2201      	movs	r2, #1
 8001176:	705a      	strb	r2, [r3, #1]
 8001178:	e00e      	b.n	8001198 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800117a:	78fb      	ldrb	r3, [r7, #3]
 800117c:	f003 0207 	and.w	r2, r3, #7
 8001180:	4613      	mov	r3, r2
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	4413      	add	r3, r2
 8001186:	00db      	lsls	r3, r3, #3
 8001188:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	4413      	add	r3, r2
 8001190:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	2200      	movs	r2, #0
 8001196:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001198:	78fb      	ldrb	r3, [r7, #3]
 800119a:	f003 0307 	and.w	r3, r3, #7
 800119e:	b2da      	uxtb	r2, r3
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d101      	bne.n	80011b2 <HAL_PCD_EP_Close+0x6a>
 80011ae:	2302      	movs	r3, #2
 80011b0:	e00e      	b.n	80011d0 <HAL_PCD_EP_Close+0x88>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2201      	movs	r2, #1
 80011b6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	68f9      	ldr	r1, [r7, #12]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f002 f9d3 	bl	800356c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2200      	movs	r2, #0
 80011ca:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80011ce:	2300      	movs	r3, #0
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3710      	adds	r7, #16
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b086      	sub	sp, #24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	607a      	str	r2, [r7, #4]
 80011e2:	603b      	str	r3, [r7, #0]
 80011e4:	460b      	mov	r3, r1
 80011e6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80011e8:	7afb      	ldrb	r3, [r7, #11]
 80011ea:	f003 0207 	and.w	r2, r3, #7
 80011ee:	4613      	mov	r3, r2
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	4413      	add	r3, r2
 80011f4:	00db      	lsls	r3, r3, #3
 80011f6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80011fa:	68fa      	ldr	r2, [r7, #12]
 80011fc:	4413      	add	r3, r2
 80011fe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	683a      	ldr	r2, [r7, #0]
 800120a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	2200      	movs	r2, #0
 8001210:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	2200      	movs	r2, #0
 8001216:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001218:	7afb      	ldrb	r3, [r7, #11]
 800121a:	f003 0307 	and.w	r3, r3, #7
 800121e:	b2da      	uxtb	r2, r3
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001224:	7afb      	ldrb	r3, [r7, #11]
 8001226:	f003 0307 	and.w	r3, r3, #7
 800122a:	2b00      	cmp	r3, #0
 800122c:	d106      	bne.n	800123c <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	6979      	ldr	r1, [r7, #20]
 8001234:	4618      	mov	r0, r3
 8001236:	f002 fb85 	bl	8003944 <USB_EPStartXfer>
 800123a:	e005      	b.n	8001248 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	6979      	ldr	r1, [r7, #20]
 8001242:	4618      	mov	r0, r3
 8001244:	f002 fb7e 	bl	8003944 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001248:	2300      	movs	r3, #0
}
 800124a:	4618      	mov	r0, r3
 800124c:	3718      	adds	r7, #24
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	b086      	sub	sp, #24
 8001256:	af00      	add	r7, sp, #0
 8001258:	60f8      	str	r0, [r7, #12]
 800125a:	607a      	str	r2, [r7, #4]
 800125c:	603b      	str	r3, [r7, #0]
 800125e:	460b      	mov	r3, r1
 8001260:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001262:	7afb      	ldrb	r3, [r7, #11]
 8001264:	f003 0307 	and.w	r3, r3, #7
 8001268:	1c5a      	adds	r2, r3, #1
 800126a:	4613      	mov	r3, r2
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	4413      	add	r3, r2
 8001270:	00db      	lsls	r3, r3, #3
 8001272:	68fa      	ldr	r2, [r7, #12]
 8001274:	4413      	add	r3, r2
 8001276:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	687a      	ldr	r2, [r7, #4]
 800127c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	683a      	ldr	r2, [r7, #0]
 8001282:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	2201      	movs	r2, #1
 8001288:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	683a      	ldr	r2, [r7, #0]
 8001290:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	2200      	movs	r2, #0
 8001296:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	2201      	movs	r2, #1
 800129c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800129e:	7afb      	ldrb	r3, [r7, #11]
 80012a0:	f003 0307 	and.w	r3, r3, #7
 80012a4:	b2da      	uxtb	r2, r3
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80012aa:	7afb      	ldrb	r3, [r7, #11]
 80012ac:	f003 0307 	and.w	r3, r3, #7
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d106      	bne.n	80012c2 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	6979      	ldr	r1, [r7, #20]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f002 fb42 	bl	8003944 <USB_EPStartXfer>
 80012c0:	e005      	b.n	80012ce <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	6979      	ldr	r1, [r7, #20]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f002 fb3b 	bl	8003944 <USB_EPStartXfer>
  }

  return HAL_OK;
 80012ce:	2300      	movs	r3, #0
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3718      	adds	r7, #24
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	460b      	mov	r3, r1
 80012e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80012e4:	78fb      	ldrb	r3, [r7, #3]
 80012e6:	f003 0207 	and.w	r2, r3, #7
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d901      	bls.n	80012f6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e04c      	b.n	8001390 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80012f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	da0e      	bge.n	800131c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80012fe:	78fb      	ldrb	r3, [r7, #3]
 8001300:	f003 0307 	and.w	r3, r3, #7
 8001304:	1c5a      	adds	r2, r3, #1
 8001306:	4613      	mov	r3, r2
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	4413      	add	r3, r2
 800130c:	00db      	lsls	r3, r3, #3
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	4413      	add	r3, r2
 8001312:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	2201      	movs	r2, #1
 8001318:	705a      	strb	r2, [r3, #1]
 800131a:	e00c      	b.n	8001336 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800131c:	78fa      	ldrb	r2, [r7, #3]
 800131e:	4613      	mov	r3, r2
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	4413      	add	r3, r2
 8001324:	00db      	lsls	r3, r3, #3
 8001326:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	4413      	add	r3, r2
 800132e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	2200      	movs	r2, #0
 8001334:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	2201      	movs	r2, #1
 800133a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800133c:	78fb      	ldrb	r3, [r7, #3]
 800133e:	f003 0307 	and.w	r3, r3, #7
 8001342:	b2da      	uxtb	r2, r3
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800134e:	2b01      	cmp	r3, #1
 8001350:	d101      	bne.n	8001356 <HAL_PCD_EP_SetStall+0x7e>
 8001352:	2302      	movs	r3, #2
 8001354:	e01c      	b.n	8001390 <HAL_PCD_EP_SetStall+0xb8>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2201      	movs	r2, #1
 800135a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	68f9      	ldr	r1, [r7, #12]
 8001364:	4618      	mov	r0, r3
 8001366:	f003 fde4 	bl	8004f32 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800136a:	78fb      	ldrb	r3, [r7, #3]
 800136c:	f003 0307 	and.w	r3, r3, #7
 8001370:	2b00      	cmp	r3, #0
 8001372:	d108      	bne.n	8001386 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800137e:	4619      	mov	r1, r3
 8001380:	4610      	mov	r0, r2
 8001382:	f003 ff09 	bl	8005198 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2200      	movs	r2, #0
 800138a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800138e:	2300      	movs	r3, #0
}
 8001390:	4618      	mov	r0, r3
 8001392:	3710      	adds	r7, #16
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}

08001398 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	460b      	mov	r3, r1
 80013a2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80013a4:	78fb      	ldrb	r3, [r7, #3]
 80013a6:	f003 020f 	and.w	r2, r3, #15
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d901      	bls.n	80013b6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e040      	b.n	8001438 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80013b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	da0e      	bge.n	80013dc <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80013be:	78fb      	ldrb	r3, [r7, #3]
 80013c0:	f003 0307 	and.w	r3, r3, #7
 80013c4:	1c5a      	adds	r2, r3, #1
 80013c6:	4613      	mov	r3, r2
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	4413      	add	r3, r2
 80013cc:	00db      	lsls	r3, r3, #3
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	4413      	add	r3, r2
 80013d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	2201      	movs	r2, #1
 80013d8:	705a      	strb	r2, [r3, #1]
 80013da:	e00e      	b.n	80013fa <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80013dc:	78fb      	ldrb	r3, [r7, #3]
 80013de:	f003 0207 	and.w	r2, r3, #7
 80013e2:	4613      	mov	r3, r2
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	4413      	add	r3, r2
 80013e8:	00db      	lsls	r3, r3, #3
 80013ea:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	4413      	add	r3, r2
 80013f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	2200      	movs	r2, #0
 80013f8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	2200      	movs	r2, #0
 80013fe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001400:	78fb      	ldrb	r3, [r7, #3]
 8001402:	f003 0307 	and.w	r3, r3, #7
 8001406:	b2da      	uxtb	r2, r3
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001412:	2b01      	cmp	r3, #1
 8001414:	d101      	bne.n	800141a <HAL_PCD_EP_ClrStall+0x82>
 8001416:	2302      	movs	r3, #2
 8001418:	e00e      	b.n	8001438 <HAL_PCD_EP_ClrStall+0xa0>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2201      	movs	r2, #1
 800141e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	68f9      	ldr	r1, [r7, #12]
 8001428:	4618      	mov	r0, r3
 800142a:	f003 fdd2 	bl	8004fd2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2200      	movs	r2, #0
 8001432:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001436:	2300      	movs	r3, #0
}
 8001438:	4618      	mov	r0, r3
 800143a:	3710      	adds	r7, #16
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}

08001440 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b08e      	sub	sp, #56	; 0x38
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001448:	e2ec      	b.n	8001a24 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001452:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001454:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001456:	b2db      	uxtb	r3, r3
 8001458:	f003 030f 	and.w	r3, r3, #15
 800145c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001460:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001464:	2b00      	cmp	r3, #0
 8001466:	f040 8161 	bne.w	800172c <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800146a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800146c:	f003 0310 	and.w	r3, r3, #16
 8001470:	2b00      	cmp	r3, #0
 8001472:	d152      	bne.n	800151a <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	881b      	ldrh	r3, [r3, #0]
 800147a:	b29b      	uxth	r3, r3
 800147c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001480:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001484:	81fb      	strh	r3, [r7, #14]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	89fb      	ldrh	r3, [r7, #14]
 800148c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001490:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001494:	b29b      	uxth	r3, r3
 8001496:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	3328      	adds	r3, #40	; 0x28
 800149c:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80014a6:	b29b      	uxth	r3, r3
 80014a8:	461a      	mov	r2, r3
 80014aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	00db      	lsls	r3, r3, #3
 80014b0:	4413      	add	r3, r2
 80014b2:	3302      	adds	r3, #2
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	6812      	ldr	r2, [r2, #0]
 80014ba:	4413      	add	r3, r2
 80014bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80014c0:	881b      	ldrh	r3, [r3, #0]
 80014c2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80014c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80014ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014cc:	695a      	ldr	r2, [r3, #20]
 80014ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d0:	69db      	ldr	r3, [r3, #28]
 80014d2:	441a      	add	r2, r3
 80014d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80014d8:	2100      	movs	r1, #0
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f005 fab9 	bl	8006a52 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	f000 829b 	beq.w	8001a24 <PCD_EP_ISR_Handler+0x5e4>
 80014ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f0:	699b      	ldr	r3, [r3, #24]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	f040 8296 	bne.w	8001a24 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001504:	b2da      	uxtb	r2, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	b292      	uxth	r2, r2
 800150c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2200      	movs	r2, #0
 8001514:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001518:	e284      	b.n	8001a24 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001520:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	881b      	ldrh	r3, [r3, #0]
 8001528:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800152a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800152c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001530:	2b00      	cmp	r3, #0
 8001532:	d034      	beq.n	800159e <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800153c:	b29b      	uxth	r3, r3
 800153e:	461a      	mov	r2, r3
 8001540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	00db      	lsls	r3, r3, #3
 8001546:	4413      	add	r3, r2
 8001548:	3306      	adds	r3, #6
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	6812      	ldr	r2, [r2, #0]
 8001550:	4413      	add	r3, r2
 8001552:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001556:	881b      	ldrh	r3, [r3, #0]
 8001558:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800155c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6818      	ldr	r0, [r3, #0]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800156a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800156e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001570:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001572:	b29b      	uxth	r3, r3
 8001574:	f003 fe60 	bl	8005238 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	881b      	ldrh	r3, [r3, #0]
 800157e:	b29a      	uxth	r2, r3
 8001580:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001584:	4013      	ands	r3, r2
 8001586:	823b      	strh	r3, [r7, #16]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	8a3a      	ldrh	r2, [r7, #16]
 800158e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001592:	b292      	uxth	r2, r2
 8001594:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f005 fa2e 	bl	80069f8 <HAL_PCD_SetupStageCallback>
 800159c:	e242      	b.n	8001a24 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800159e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f280 823e 	bge.w	8001a24 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	881b      	ldrh	r3, [r3, #0]
 80015ae:	b29a      	uxth	r2, r3
 80015b0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80015b4:	4013      	ands	r3, r2
 80015b6:	83bb      	strh	r3, [r7, #28]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	8bba      	ldrh	r2, [r7, #28]
 80015be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80015c2:	b292      	uxth	r2, r2
 80015c4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	461a      	mov	r2, r3
 80015d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	00db      	lsls	r3, r3, #3
 80015d8:	4413      	add	r3, r2
 80015da:	3306      	adds	r3, #6
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	6812      	ldr	r2, [r2, #0]
 80015e2:	4413      	add	r3, r2
 80015e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80015e8:	881b      	ldrh	r3, [r3, #0]
 80015ea:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80015ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80015f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f4:	69db      	ldr	r3, [r3, #28]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d019      	beq.n	800162e <PCD_EP_ISR_Handler+0x1ee>
 80015fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fc:	695b      	ldr	r3, [r3, #20]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d015      	beq.n	800162e <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6818      	ldr	r0, [r3, #0]
 8001606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001608:	6959      	ldr	r1, [r3, #20]
 800160a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800160e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001610:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001612:	b29b      	uxth	r3, r3
 8001614:	f003 fe10 	bl	8005238 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161a:	695a      	ldr	r2, [r3, #20]
 800161c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161e:	69db      	ldr	r3, [r3, #28]
 8001620:	441a      	add	r2, r3
 8001622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001624:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001626:	2100      	movs	r1, #0
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f005 f9f7 	bl	8006a1c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	881b      	ldrh	r3, [r3, #0]
 8001634:	b29b      	uxth	r3, r3
 8001636:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800163a:	2b00      	cmp	r3, #0
 800163c:	f040 81f2 	bne.w	8001a24 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	61bb      	str	r3, [r7, #24]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800164e:	b29b      	uxth	r3, r3
 8001650:	461a      	mov	r2, r3
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	4413      	add	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800165e:	617b      	str	r3, [r7, #20]
 8001660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001662:	691b      	ldr	r3, [r3, #16]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d112      	bne.n	800168e <PCD_EP_ISR_Handler+0x24e>
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	881b      	ldrh	r3, [r3, #0]
 800166c:	b29b      	uxth	r3, r3
 800166e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001672:	b29a      	uxth	r2, r3
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	801a      	strh	r2, [r3, #0]
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	881b      	ldrh	r3, [r3, #0]
 800167c:	b29b      	uxth	r3, r3
 800167e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001682:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001686:	b29a      	uxth	r2, r3
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	801a      	strh	r2, [r3, #0]
 800168c:	e02f      	b.n	80016ee <PCD_EP_ISR_Handler+0x2ae>
 800168e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001690:	691b      	ldr	r3, [r3, #16]
 8001692:	2b3e      	cmp	r3, #62	; 0x3e
 8001694:	d813      	bhi.n	80016be <PCD_EP_ISR_Handler+0x27e>
 8001696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001698:	691b      	ldr	r3, [r3, #16]
 800169a:	085b      	lsrs	r3, r3, #1
 800169c:	633b      	str	r3, [r7, #48]	; 0x30
 800169e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a0:	691b      	ldr	r3, [r3, #16]
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d002      	beq.n	80016b0 <PCD_EP_ISR_Handler+0x270>
 80016aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016ac:	3301      	adds	r3, #1
 80016ae:	633b      	str	r3, [r7, #48]	; 0x30
 80016b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	029b      	lsls	r3, r3, #10
 80016b6:	b29a      	uxth	r2, r3
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	801a      	strh	r2, [r3, #0]
 80016bc:	e017      	b.n	80016ee <PCD_EP_ISR_Handler+0x2ae>
 80016be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c0:	691b      	ldr	r3, [r3, #16]
 80016c2:	095b      	lsrs	r3, r3, #5
 80016c4:	633b      	str	r3, [r7, #48]	; 0x30
 80016c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c8:	691b      	ldr	r3, [r3, #16]
 80016ca:	f003 031f 	and.w	r3, r3, #31
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d102      	bne.n	80016d8 <PCD_EP_ISR_Handler+0x298>
 80016d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016d4:	3b01      	subs	r3, #1
 80016d6:	633b      	str	r3, [r7, #48]	; 0x30
 80016d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016da:	b29b      	uxth	r3, r3
 80016dc:	029b      	lsls	r3, r3, #10
 80016de:	b29b      	uxth	r3, r3
 80016e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80016e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80016e8:	b29a      	uxth	r2, r3
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	881b      	ldrh	r3, [r3, #0]
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80016fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016fe:	827b      	strh	r3, [r7, #18]
 8001700:	8a7b      	ldrh	r3, [r7, #18]
 8001702:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001706:	827b      	strh	r3, [r7, #18]
 8001708:	8a7b      	ldrh	r3, [r7, #18]
 800170a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800170e:	827b      	strh	r3, [r7, #18]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	8a7b      	ldrh	r3, [r7, #18]
 8001716:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800171a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800171e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001722:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001726:	b29b      	uxth	r3, r3
 8001728:	8013      	strh	r3, [r2, #0]
 800172a:	e17b      	b.n	8001a24 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	461a      	mov	r2, r3
 8001732:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	4413      	add	r3, r2
 800173a:	881b      	ldrh	r3, [r3, #0]
 800173c:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800173e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001742:	2b00      	cmp	r3, #0
 8001744:	f280 80ea 	bge.w	800191c <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	461a      	mov	r2, r3
 800174e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	4413      	add	r3, r2
 8001756:	881b      	ldrh	r3, [r3, #0]
 8001758:	b29a      	uxth	r2, r3
 800175a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800175e:	4013      	ands	r3, r2
 8001760:	853b      	strh	r3, [r7, #40]	; 0x28
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	461a      	mov	r2, r3
 8001768:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	4413      	add	r3, r2
 8001770:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001772:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001776:	b292      	uxth	r2, r2
 8001778:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800177a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800177e:	4613      	mov	r3, r2
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	4413      	add	r3, r2
 8001784:	00db      	lsls	r3, r3, #3
 8001786:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	4413      	add	r3, r2
 800178e:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001792:	7b1b      	ldrb	r3, [r3, #12]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d122      	bne.n	80017de <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	461a      	mov	r2, r3
 80017a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	00db      	lsls	r3, r3, #3
 80017aa:	4413      	add	r3, r2
 80017ac:	3306      	adds	r3, #6
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	6812      	ldr	r2, [r2, #0]
 80017b4:	4413      	add	r3, r2
 80017b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80017ba:	881b      	ldrh	r3, [r3, #0]
 80017bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80017c0:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80017c2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	f000 8087 	beq.w	80018d8 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6818      	ldr	r0, [r3, #0]
 80017ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d0:	6959      	ldr	r1, [r3, #20]
 80017d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d4:	88da      	ldrh	r2, [r3, #6]
 80017d6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80017d8:	f003 fd2e 	bl	8005238 <USB_ReadPMA>
 80017dc:	e07c      	b.n	80018d8 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80017de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e0:	78db      	ldrb	r3, [r3, #3]
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d108      	bne.n	80017f8 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80017e6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80017e8:	461a      	mov	r2, r3
 80017ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f000 f927 	bl	8001a40 <HAL_PCD_EP_DB_Receive>
 80017f2:	4603      	mov	r3, r0
 80017f4:	86fb      	strh	r3, [r7, #54]	; 0x36
 80017f6:	e06f      	b.n	80018d8 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	461a      	mov	r2, r3
 80017fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	4413      	add	r3, r2
 8001806:	881b      	ldrh	r3, [r3, #0]
 8001808:	b29b      	uxth	r3, r3
 800180a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800180e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001812:	847b      	strh	r3, [r7, #34]	; 0x22
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	461a      	mov	r2, r3
 800181a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	441a      	add	r2, r3
 8001822:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001824:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001828:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800182c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001830:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001834:	b29b      	uxth	r3, r3
 8001836:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	461a      	mov	r2, r3
 800183e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	4413      	add	r3, r2
 8001846:	881b      	ldrh	r3, [r3, #0]
 8001848:	b29b      	uxth	r3, r3
 800184a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d021      	beq.n	8001896 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800185a:	b29b      	uxth	r3, r3
 800185c:	461a      	mov	r2, r3
 800185e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	00db      	lsls	r3, r3, #3
 8001864:	4413      	add	r3, r2
 8001866:	3302      	adds	r3, #2
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	6812      	ldr	r2, [r2, #0]
 800186e:	4413      	add	r3, r2
 8001870:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001874:	881b      	ldrh	r3, [r3, #0]
 8001876:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800187a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800187c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800187e:	2b00      	cmp	r3, #0
 8001880:	d02a      	beq.n	80018d8 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6818      	ldr	r0, [r3, #0]
 8001886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001888:	6959      	ldr	r1, [r3, #20]
 800188a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188c:	891a      	ldrh	r2, [r3, #8]
 800188e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001890:	f003 fcd2 	bl	8005238 <USB_ReadPMA>
 8001894:	e020      	b.n	80018d8 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800189e:	b29b      	uxth	r3, r3
 80018a0:	461a      	mov	r2, r3
 80018a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	00db      	lsls	r3, r3, #3
 80018a8:	4413      	add	r3, r2
 80018aa:	3306      	adds	r3, #6
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	6812      	ldr	r2, [r2, #0]
 80018b2:	4413      	add	r3, r2
 80018b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80018b8:	881b      	ldrh	r3, [r3, #0]
 80018ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018be:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80018c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d008      	beq.n	80018d8 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6818      	ldr	r0, [r3, #0]
 80018ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018cc:	6959      	ldr	r1, [r3, #20]
 80018ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d0:	895a      	ldrh	r2, [r3, #10]
 80018d2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80018d4:	f003 fcb0 	bl	8005238 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80018d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018da:	69da      	ldr	r2, [r3, #28]
 80018dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80018de:	441a      	add	r2, r3
 80018e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80018e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e6:	695a      	ldr	r2, [r3, #20]
 80018e8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80018ea:	441a      	add	r2, r3
 80018ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ee:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80018f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d004      	beq.n	8001902 <PCD_EP_ISR_Handler+0x4c2>
 80018f8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80018fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fc:	691b      	ldr	r3, [r3, #16]
 80018fe:	429a      	cmp	r2, r3
 8001900:	d206      	bcs.n	8001910 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	4619      	mov	r1, r3
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f005 f887 	bl	8006a1c <HAL_PCD_DataOutStageCallback>
 800190e:	e005      	b.n	800191c <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001916:	4618      	mov	r0, r3
 8001918:	f002 f814 	bl	8003944 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800191c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800191e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001922:	2b00      	cmp	r3, #0
 8001924:	d07e      	beq.n	8001a24 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8001926:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800192a:	1c5a      	adds	r2, r3, #1
 800192c:	4613      	mov	r3, r2
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	4413      	add	r3, r2
 8001932:	00db      	lsls	r3, r3, #3
 8001934:	687a      	ldr	r2, [r7, #4]
 8001936:	4413      	add	r3, r2
 8001938:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	461a      	mov	r2, r3
 8001940:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	4413      	add	r3, r2
 8001948:	881b      	ldrh	r3, [r3, #0]
 800194a:	b29b      	uxth	r3, r3
 800194c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001950:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001954:	843b      	strh	r3, [r7, #32]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	461a      	mov	r2, r3
 800195c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	441a      	add	r2, r3
 8001964:	8c3b      	ldrh	r3, [r7, #32]
 8001966:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800196a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800196e:	b29b      	uxth	r3, r3
 8001970:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8001972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001974:	78db      	ldrb	r3, [r3, #3]
 8001976:	2b03      	cmp	r3, #3
 8001978:	d00c      	beq.n	8001994 <PCD_EP_ISR_Handler+0x554>
 800197a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197c:	78db      	ldrb	r3, [r3, #3]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d008      	beq.n	8001994 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001984:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8001986:	2b02      	cmp	r3, #2
 8001988:	d146      	bne.n	8001a18 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800198a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800198c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001990:	2b00      	cmp	r3, #0
 8001992:	d141      	bne.n	8001a18 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800199c:	b29b      	uxth	r3, r3
 800199e:	461a      	mov	r2, r3
 80019a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	00db      	lsls	r3, r3, #3
 80019a6:	4413      	add	r3, r2
 80019a8:	3302      	adds	r3, #2
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	6812      	ldr	r2, [r2, #0]
 80019b0:	4413      	add	r3, r2
 80019b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80019b6:	881b      	ldrh	r3, [r3, #0]
 80019b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019bc:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80019be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c0:	699a      	ldr	r2, [r3, #24]
 80019c2:	8bfb      	ldrh	r3, [r7, #30]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d906      	bls.n	80019d6 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80019c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ca:	699a      	ldr	r2, [r3, #24]
 80019cc:	8bfb      	ldrh	r3, [r7, #30]
 80019ce:	1ad2      	subs	r2, r2, r3
 80019d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d2:	619a      	str	r2, [r3, #24]
 80019d4:	e002      	b.n	80019dc <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80019d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d8:	2200      	movs	r2, #0
 80019da:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80019dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019de:	699b      	ldr	r3, [r3, #24]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d106      	bne.n	80019f2 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80019e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	4619      	mov	r1, r3
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f005 f831 	bl	8006a52 <HAL_PCD_DataInStageCallback>
 80019f0:	e018      	b.n	8001a24 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80019f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f4:	695a      	ldr	r2, [r3, #20]
 80019f6:	8bfb      	ldrh	r3, [r7, #30]
 80019f8:	441a      	add	r2, r3
 80019fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fc:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80019fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a00:	69da      	ldr	r2, [r3, #28]
 8001a02:	8bfb      	ldrh	r3, [r7, #30]
 8001a04:	441a      	add	r2, r3
 8001a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a08:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a10:	4618      	mov	r0, r3
 8001a12:	f001 ff97 	bl	8003944 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8001a16:	e005      	b.n	8001a24 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001a18:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f000 f91b 	bl	8001c5a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	b21b      	sxth	r3, r3
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	f6ff ad0a 	blt.w	800144a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001a36:	2300      	movs	r3, #0
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3738      	adds	r7, #56	; 0x38
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b088      	sub	sp, #32
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001a4e:	88fb      	ldrh	r3, [r7, #6]
 8001a50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d07e      	beq.n	8001b56 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	461a      	mov	r2, r3
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	00db      	lsls	r3, r3, #3
 8001a6a:	4413      	add	r3, r2
 8001a6c:	3302      	adds	r3, #2
 8001a6e:	005b      	lsls	r3, r3, #1
 8001a70:	68fa      	ldr	r2, [r7, #12]
 8001a72:	6812      	ldr	r2, [r2, #0]
 8001a74:	4413      	add	r3, r2
 8001a76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a7a:	881b      	ldrh	r3, [r3, #0]
 8001a7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a80:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	699a      	ldr	r2, [r3, #24]
 8001a86:	8b7b      	ldrh	r3, [r7, #26]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d306      	bcc.n	8001a9a <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	699a      	ldr	r2, [r3, #24]
 8001a90:	8b7b      	ldrh	r3, [r7, #26]
 8001a92:	1ad2      	subs	r2, r2, r3
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	619a      	str	r2, [r3, #24]
 8001a98:	e002      	b.n	8001aa0 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	699b      	ldr	r3, [r3, #24]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d123      	bne.n	8001af0 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	461a      	mov	r2, r3
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	4413      	add	r3, r2
 8001ab6:	881b      	ldrh	r3, [r3, #0]
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001abe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ac2:	833b      	strh	r3, [r7, #24]
 8001ac4:	8b3b      	ldrh	r3, [r7, #24]
 8001ac6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001aca:	833b      	strh	r3, [r7, #24]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	441a      	add	r2, r3
 8001ada:	8b3b      	ldrh	r3, [r7, #24]
 8001adc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001ae0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001ae4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ae8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001af0:	88fb      	ldrh	r3, [r7, #6]
 8001af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d01f      	beq.n	8001b3a <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	461a      	mov	r2, r3
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	4413      	add	r3, r2
 8001b08:	881b      	ldrh	r3, [r3, #0]
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b14:	82fb      	strh	r3, [r7, #22]
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	441a      	add	r2, r3
 8001b24:	8afb      	ldrh	r3, [r7, #22]
 8001b26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001b2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001b2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b32:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001b36:	b29b      	uxth	r3, r3
 8001b38:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001b3a:	8b7b      	ldrh	r3, [r7, #26]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	f000 8087 	beq.w	8001c50 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	6818      	ldr	r0, [r3, #0]
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	6959      	ldr	r1, [r3, #20]
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	891a      	ldrh	r2, [r3, #8]
 8001b4e:	8b7b      	ldrh	r3, [r7, #26]
 8001b50:	f003 fb72 	bl	8005238 <USB_ReadPMA>
 8001b54:	e07c      	b.n	8001c50 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	461a      	mov	r2, r3
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	00db      	lsls	r3, r3, #3
 8001b68:	4413      	add	r3, r2
 8001b6a:	3306      	adds	r3, #6
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	68fa      	ldr	r2, [r7, #12]
 8001b70:	6812      	ldr	r2, [r2, #0]
 8001b72:	4413      	add	r3, r2
 8001b74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b78:	881b      	ldrh	r3, [r3, #0]
 8001b7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b7e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	699a      	ldr	r2, [r3, #24]
 8001b84:	8b7b      	ldrh	r3, [r7, #26]
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d306      	bcc.n	8001b98 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	699a      	ldr	r2, [r3, #24]
 8001b8e:	8b7b      	ldrh	r3, [r7, #26]
 8001b90:	1ad2      	subs	r2, r2, r3
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	619a      	str	r2, [r3, #24]
 8001b96:	e002      	b.n	8001b9e <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	699b      	ldr	r3, [r3, #24]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d123      	bne.n	8001bee <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	461a      	mov	r2, r3
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	4413      	add	r3, r2
 8001bb4:	881b      	ldrh	r3, [r3, #0]
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001bbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bc0:	83fb      	strh	r3, [r7, #30]
 8001bc2:	8bfb      	ldrh	r3, [r7, #30]
 8001bc4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001bc8:	83fb      	strh	r3, [r7, #30]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	461a      	mov	r2, r3
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	441a      	add	r2, r3
 8001bd8:	8bfb      	ldrh	r3, [r7, #30]
 8001bda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001bde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001be2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001be6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001bee:	88fb      	ldrh	r3, [r7, #6]
 8001bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d11f      	bne.n	8001c38 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	4413      	add	r3, r2
 8001c06:	881b      	ldrh	r3, [r3, #0]
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c12:	83bb      	strh	r3, [r7, #28]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	461a      	mov	r2, r3
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	441a      	add	r2, r3
 8001c22:	8bbb      	ldrh	r3, [r7, #28]
 8001c24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001c28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001c2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c30:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001c38:	8b7b      	ldrh	r3, [r7, #26]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d008      	beq.n	8001c50 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	6818      	ldr	r0, [r3, #0]
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	6959      	ldr	r1, [r3, #20]
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	895a      	ldrh	r2, [r3, #10]
 8001c4a:	8b7b      	ldrh	r3, [r7, #26]
 8001c4c:	f003 faf4 	bl	8005238 <USB_ReadPMA>
    }
  }

  return count;
 8001c50:	8b7b      	ldrh	r3, [r7, #26]
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3720      	adds	r7, #32
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b0a2      	sub	sp, #136	; 0x88
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	60f8      	str	r0, [r7, #12]
 8001c62:	60b9      	str	r1, [r7, #8]
 8001c64:	4613      	mov	r3, r2
 8001c66:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001c68:	88fb      	ldrh	r3, [r7, #6]
 8001c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	f000 81c7 	beq.w	8002002 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	461a      	mov	r2, r3
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	00db      	lsls	r3, r3, #3
 8001c86:	4413      	add	r3, r2
 8001c88:	3302      	adds	r3, #2
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	68fa      	ldr	r2, [r7, #12]
 8001c8e:	6812      	ldr	r2, [r2, #0]
 8001c90:	4413      	add	r3, r2
 8001c92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c96:	881b      	ldrh	r3, [r3, #0]
 8001c98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c9c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	699a      	ldr	r2, [r3, #24]
 8001ca4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d907      	bls.n	8001cbc <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	699a      	ldr	r2, [r3, #24]
 8001cb0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001cb4:	1ad2      	subs	r2, r2, r3
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	619a      	str	r2, [r3, #24]
 8001cba:	e002      	b.n	8001cc2 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	699b      	ldr	r3, [r3, #24]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	f040 80b9 	bne.w	8001e3e <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	785b      	ldrb	r3, [r3, #1]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d126      	bne.n	8001d22 <HAL_PCD_EP_DB_Transmit+0xc8>
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ce8:	4413      	add	r3, r2
 8001cea:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	011a      	lsls	r2, r3, #4
 8001cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cf4:	4413      	add	r3, r2
 8001cf6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001cfa:	627b      	str	r3, [r7, #36]	; 0x24
 8001cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfe:	881b      	ldrh	r3, [r3, #0]
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0a:	801a      	strh	r2, [r3, #0]
 8001d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0e:	881b      	ldrh	r3, [r3, #0]
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d1a:	b29a      	uxth	r2, r3
 8001d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1e:	801a      	strh	r2, [r3, #0]
 8001d20:	e01a      	b.n	8001d58 <HAL_PCD_EP_DB_Transmit+0xfe>
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	785b      	ldrb	r3, [r3, #1]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d116      	bne.n	8001d58 <HAL_PCD_EP_DB_Transmit+0xfe>
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	633b      	str	r3, [r7, #48]	; 0x30
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d3e:	4413      	add	r3, r2
 8001d40:	633b      	str	r3, [r7, #48]	; 0x30
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	011a      	lsls	r2, r3, #4
 8001d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d4a:	4413      	add	r3, r2
 8001d4c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001d50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d54:	2200      	movs	r2, #0
 8001d56:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	623b      	str	r3, [r7, #32]
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	785b      	ldrb	r3, [r3, #1]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d126      	bne.n	8001db4 <HAL_PCD_EP_DB_Transmit+0x15a>
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	61bb      	str	r3, [r7, #24]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	461a      	mov	r2, r3
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	61bb      	str	r3, [r7, #24]
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	011a      	lsls	r2, r3, #4
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	4413      	add	r3, r2
 8001d88:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001d8c:	617b      	str	r3, [r7, #20]
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	881b      	ldrh	r3, [r3, #0]
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001d98:	b29a      	uxth	r2, r3
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	801a      	strh	r2, [r3, #0]
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	881b      	ldrh	r3, [r3, #0]
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001da8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001dac:	b29a      	uxth	r2, r3
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	801a      	strh	r2, [r3, #0]
 8001db2:	e017      	b.n	8001de4 <HAL_PCD_EP_DB_Transmit+0x18a>
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	785b      	ldrb	r3, [r3, #1]
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d113      	bne.n	8001de4 <HAL_PCD_EP_DB_Transmit+0x18a>
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dc4:	b29b      	uxth	r3, r3
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	6a3b      	ldr	r3, [r7, #32]
 8001dca:	4413      	add	r3, r2
 8001dcc:	623b      	str	r3, [r7, #32]
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	011a      	lsls	r2, r3, #4
 8001dd4:	6a3b      	ldr	r3, [r7, #32]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001ddc:	61fb      	str	r3, [r7, #28]
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	2200      	movs	r2, #0
 8001de2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	4619      	mov	r1, r3
 8001dea:	68f8      	ldr	r0, [r7, #12]
 8001dec:	f004 fe31 	bl	8006a52 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001df0:	88fb      	ldrh	r3, [r7, #6]
 8001df2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	f000 82d4 	beq.w	80023a4 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	461a      	mov	r2, r3
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	4413      	add	r3, r2
 8001e0a:	881b      	ldrh	r3, [r3, #0]
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e16:	827b      	strh	r3, [r7, #18]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	441a      	add	r2, r3
 8001e26:	8a7b      	ldrh	r3, [r7, #18]
 8001e28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	8013      	strh	r3, [r2, #0]
 8001e3c:	e2b2      	b.n	80023a4 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001e3e:	88fb      	ldrh	r3, [r7, #6]
 8001e40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d021      	beq.n	8001e8c <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	4413      	add	r3, r2
 8001e56:	881b      	ldrh	r3, [r3, #0]
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e62:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	441a      	add	r2, r3
 8001e74:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001e78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e80:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	f040 8286 	bne.w	80023a4 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	695a      	ldr	r2, [r3, #20]
 8001e9c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001ea0:	441a      	add	r2, r3
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	69da      	ldr	r2, [r3, #28]
 8001eaa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001eae:	441a      	add	r2, r3
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	6a1a      	ldr	r2, [r3, #32]
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	691b      	ldr	r3, [r3, #16]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d309      	bcc.n	8001ed4 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	691b      	ldr	r3, [r3, #16]
 8001ec4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	6a1a      	ldr	r2, [r3, #32]
 8001eca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ecc:	1ad2      	subs	r2, r2, r3
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	621a      	str	r2, [r3, #32]
 8001ed2:	e015      	b.n	8001f00 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	6a1b      	ldr	r3, [r3, #32]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d107      	bne.n	8001eec <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8001edc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001ee0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001eea:	e009      	b.n	8001f00 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	6a1b      	ldr	r3, [r3, #32]
 8001ef8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	2200      	movs	r2, #0
 8001efe:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	785b      	ldrb	r3, [r3, #1]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d155      	bne.n	8001fb4 <HAL_PCD_EP_DB_Transmit+0x35a>
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	461a      	mov	r2, r3
 8001f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f1c:	4413      	add	r3, r2
 8001f1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	011a      	lsls	r2, r3, #4
 8001f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f28:	4413      	add	r3, r2
 8001f2a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001f2e:	637b      	str	r3, [r7, #52]	; 0x34
 8001f30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d112      	bne.n	8001f5c <HAL_PCD_EP_DB_Transmit+0x302>
 8001f36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f38:	881b      	ldrh	r3, [r3, #0]
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001f40:	b29a      	uxth	r2, r3
 8001f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f44:	801a      	strh	r2, [r3, #0]
 8001f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f48:	881b      	ldrh	r3, [r3, #0]
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f54:	b29a      	uxth	r2, r3
 8001f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f58:	801a      	strh	r2, [r3, #0]
 8001f5a:	e047      	b.n	8001fec <HAL_PCD_EP_DB_Transmit+0x392>
 8001f5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f5e:	2b3e      	cmp	r3, #62	; 0x3e
 8001f60:	d811      	bhi.n	8001f86 <HAL_PCD_EP_DB_Transmit+0x32c>
 8001f62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f64:	085b      	lsrs	r3, r3, #1
 8001f66:	64bb      	str	r3, [r7, #72]	; 0x48
 8001f68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d002      	beq.n	8001f78 <HAL_PCD_EP_DB_Transmit+0x31e>
 8001f72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f74:	3301      	adds	r3, #1
 8001f76:	64bb      	str	r3, [r7, #72]	; 0x48
 8001f78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	029b      	lsls	r3, r3, #10
 8001f7e:	b29a      	uxth	r2, r3
 8001f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f82:	801a      	strh	r2, [r3, #0]
 8001f84:	e032      	b.n	8001fec <HAL_PCD_EP_DB_Transmit+0x392>
 8001f86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f88:	095b      	lsrs	r3, r3, #5
 8001f8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8001f8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f8e:	f003 031f 	and.w	r3, r3, #31
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d102      	bne.n	8001f9c <HAL_PCD_EP_DB_Transmit+0x342>
 8001f96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f98:	3b01      	subs	r3, #1
 8001f9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8001f9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	029b      	lsls	r3, r3, #10
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fa8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fac:	b29a      	uxth	r2, r3
 8001fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fb0:	801a      	strh	r2, [r3, #0]
 8001fb2:	e01b      	b.n	8001fec <HAL_PCD_EP_DB_Transmit+0x392>
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	785b      	ldrb	r3, [r3, #1]
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d117      	bne.n	8001fec <HAL_PCD_EP_DB_Transmit+0x392>
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	643b      	str	r3, [r7, #64]	; 0x40
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	461a      	mov	r2, r3
 8001fce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fd0:	4413      	add	r3, r2
 8001fd2:	643b      	str	r3, [r7, #64]	; 0x40
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	011a      	lsls	r2, r3, #4
 8001fda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fdc:	4413      	add	r3, r2
 8001fde:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fe4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fe6:	b29a      	uxth	r2, r3
 8001fe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fea:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	6818      	ldr	r0, [r3, #0]
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	6959      	ldr	r1, [r3, #20]
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	891a      	ldrh	r2, [r3, #8]
 8001ff8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	f003 f8d7 	bl	80051ae <USB_WritePMA>
 8002000:	e1d0      	b.n	80023a4 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800200a:	b29b      	uxth	r3, r3
 800200c:	461a      	mov	r2, r3
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	00db      	lsls	r3, r3, #3
 8002014:	4413      	add	r3, r2
 8002016:	3306      	adds	r3, #6
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	68fa      	ldr	r2, [r7, #12]
 800201c:	6812      	ldr	r2, [r2, #0]
 800201e:	4413      	add	r3, r2
 8002020:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002024:	881b      	ldrh	r3, [r3, #0]
 8002026:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800202a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	699a      	ldr	r2, [r3, #24]
 8002032:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002036:	429a      	cmp	r2, r3
 8002038:	d307      	bcc.n	800204a <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	699a      	ldr	r2, [r3, #24]
 800203e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002042:	1ad2      	subs	r2, r2, r3
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	619a      	str	r2, [r3, #24]
 8002048:	e002      	b.n	8002050 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	2200      	movs	r2, #0
 800204e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	699b      	ldr	r3, [r3, #24]
 8002054:	2b00      	cmp	r3, #0
 8002056:	f040 80c4 	bne.w	80021e2 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	785b      	ldrb	r3, [r3, #1]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d126      	bne.n	80020b0 <HAL_PCD_EP_DB_Transmit+0x456>
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002070:	b29b      	uxth	r3, r3
 8002072:	461a      	mov	r2, r3
 8002074:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002076:	4413      	add	r3, r2
 8002078:	66fb      	str	r3, [r7, #108]	; 0x6c
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	011a      	lsls	r2, r3, #4
 8002080:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002082:	4413      	add	r3, r2
 8002084:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002088:	66bb      	str	r3, [r7, #104]	; 0x68
 800208a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800208c:	881b      	ldrh	r3, [r3, #0]
 800208e:	b29b      	uxth	r3, r3
 8002090:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002094:	b29a      	uxth	r2, r3
 8002096:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002098:	801a      	strh	r2, [r3, #0]
 800209a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800209c:	881b      	ldrh	r3, [r3, #0]
 800209e:	b29b      	uxth	r3, r3
 80020a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020a8:	b29a      	uxth	r2, r3
 80020aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020ac:	801a      	strh	r2, [r3, #0]
 80020ae:	e01a      	b.n	80020e6 <HAL_PCD_EP_DB_Transmit+0x48c>
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	785b      	ldrb	r3, [r3, #1]
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d116      	bne.n	80020e6 <HAL_PCD_EP_DB_Transmit+0x48c>
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	677b      	str	r3, [r7, #116]	; 0x74
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	461a      	mov	r2, r3
 80020ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020cc:	4413      	add	r3, r2
 80020ce:	677b      	str	r3, [r7, #116]	; 0x74
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	011a      	lsls	r2, r3, #4
 80020d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020d8:	4413      	add	r3, r2
 80020da:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80020de:	673b      	str	r3, [r7, #112]	; 0x70
 80020e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020e2:	2200      	movs	r2, #0
 80020e4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	67bb      	str	r3, [r7, #120]	; 0x78
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	785b      	ldrb	r3, [r3, #1]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d12f      	bne.n	8002154 <HAL_PCD_EP_DB_Transmit+0x4fa>
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002104:	b29b      	uxth	r3, r3
 8002106:	461a      	mov	r2, r3
 8002108:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800210c:	4413      	add	r3, r2
 800210e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	011a      	lsls	r2, r3, #4
 8002118:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800211c:	4413      	add	r3, r2
 800211e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002122:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002126:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800212a:	881b      	ldrh	r3, [r3, #0]
 800212c:	b29b      	uxth	r3, r3
 800212e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002132:	b29a      	uxth	r2, r3
 8002134:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002138:	801a      	strh	r2, [r3, #0]
 800213a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800213e:	881b      	ldrh	r3, [r3, #0]
 8002140:	b29b      	uxth	r3, r3
 8002142:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002146:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800214a:	b29a      	uxth	r2, r3
 800214c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002150:	801a      	strh	r2, [r3, #0]
 8002152:	e017      	b.n	8002184 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	785b      	ldrb	r3, [r3, #1]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d113      	bne.n	8002184 <HAL_PCD_EP_DB_Transmit+0x52a>
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002164:	b29b      	uxth	r3, r3
 8002166:	461a      	mov	r2, r3
 8002168:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800216a:	4413      	add	r3, r2
 800216c:	67bb      	str	r3, [r7, #120]	; 0x78
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	011a      	lsls	r2, r3, #4
 8002174:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002176:	4413      	add	r3, r2
 8002178:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800217c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800217e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002180:	2200      	movs	r2, #0
 8002182:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	4619      	mov	r1, r3
 800218a:	68f8      	ldr	r0, [r7, #12]
 800218c:	f004 fc61 	bl	8006a52 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002190:	88fb      	ldrh	r3, [r7, #6]
 8002192:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002196:	2b00      	cmp	r3, #0
 8002198:	f040 8104 	bne.w	80023a4 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	461a      	mov	r2, r3
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	4413      	add	r3, r2
 80021aa:	881b      	ldrh	r3, [r3, #0]
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021b6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	461a      	mov	r2, r3
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	441a      	add	r2, r3
 80021c8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80021cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80021d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80021d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021dc:	b29b      	uxth	r3, r3
 80021de:	8013      	strh	r3, [r2, #0]
 80021e0:	e0e0      	b.n	80023a4 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80021e2:	88fb      	ldrh	r3, [r7, #6]
 80021e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d121      	bne.n	8002230 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	461a      	mov	r2, r3
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	4413      	add	r3, r2
 80021fa:	881b      	ldrh	r3, [r3, #0]
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002202:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002206:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	461a      	mov	r2, r3
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	441a      	add	r2, r3
 8002218:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800221c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002220:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002224:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002228:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800222c:	b29b      	uxth	r3, r3
 800222e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002236:	2b01      	cmp	r3, #1
 8002238:	f040 80b4 	bne.w	80023a4 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	695a      	ldr	r2, [r3, #20]
 8002240:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002244:	441a      	add	r2, r3
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	69da      	ldr	r2, [r3, #28]
 800224e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002252:	441a      	add	r2, r3
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	6a1a      	ldr	r2, [r3, #32]
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	691b      	ldr	r3, [r3, #16]
 8002260:	429a      	cmp	r2, r3
 8002262:	d309      	bcc.n	8002278 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	691b      	ldr	r3, [r3, #16]
 8002268:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	6a1a      	ldr	r2, [r3, #32]
 800226e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002270:	1ad2      	subs	r2, r2, r3
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	621a      	str	r2, [r3, #32]
 8002276:	e015      	b.n	80022a4 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	6a1b      	ldr	r3, [r3, #32]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d107      	bne.n	8002290 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8002280:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002284:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	2200      	movs	r2, #0
 800228a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800228e:	e009      	b.n	80022a4 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	6a1b      	ldr	r3, [r3, #32]
 8002294:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	2200      	movs	r2, #0
 800229a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	667b      	str	r3, [r7, #100]	; 0x64
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	785b      	ldrb	r3, [r3, #1]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d155      	bne.n	800235e <HAL_PCD_EP_DB_Transmit+0x704>
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	461a      	mov	r2, r3
 80022c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022c6:	4413      	add	r3, r2
 80022c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	011a      	lsls	r2, r3, #4
 80022d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022d2:	4413      	add	r3, r2
 80022d4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80022d8:	65bb      	str	r3, [r7, #88]	; 0x58
 80022da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d112      	bne.n	8002306 <HAL_PCD_EP_DB_Transmit+0x6ac>
 80022e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022e2:	881b      	ldrh	r3, [r3, #0]
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80022ea:	b29a      	uxth	r2, r3
 80022ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022ee:	801a      	strh	r2, [r3, #0]
 80022f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022f2:	881b      	ldrh	r3, [r3, #0]
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022fe:	b29a      	uxth	r2, r3
 8002300:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002302:	801a      	strh	r2, [r3, #0]
 8002304:	e044      	b.n	8002390 <HAL_PCD_EP_DB_Transmit+0x736>
 8002306:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002308:	2b3e      	cmp	r3, #62	; 0x3e
 800230a:	d811      	bhi.n	8002330 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800230c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800230e:	085b      	lsrs	r3, r3, #1
 8002310:	657b      	str	r3, [r7, #84]	; 0x54
 8002312:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002314:	f003 0301 	and.w	r3, r3, #1
 8002318:	2b00      	cmp	r3, #0
 800231a:	d002      	beq.n	8002322 <HAL_PCD_EP_DB_Transmit+0x6c8>
 800231c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800231e:	3301      	adds	r3, #1
 8002320:	657b      	str	r3, [r7, #84]	; 0x54
 8002322:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002324:	b29b      	uxth	r3, r3
 8002326:	029b      	lsls	r3, r3, #10
 8002328:	b29a      	uxth	r2, r3
 800232a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800232c:	801a      	strh	r2, [r3, #0]
 800232e:	e02f      	b.n	8002390 <HAL_PCD_EP_DB_Transmit+0x736>
 8002330:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002332:	095b      	lsrs	r3, r3, #5
 8002334:	657b      	str	r3, [r7, #84]	; 0x54
 8002336:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002338:	f003 031f 	and.w	r3, r3, #31
 800233c:	2b00      	cmp	r3, #0
 800233e:	d102      	bne.n	8002346 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8002340:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002342:	3b01      	subs	r3, #1
 8002344:	657b      	str	r3, [r7, #84]	; 0x54
 8002346:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002348:	b29b      	uxth	r3, r3
 800234a:	029b      	lsls	r3, r3, #10
 800234c:	b29b      	uxth	r3, r3
 800234e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002352:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002356:	b29a      	uxth	r2, r3
 8002358:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800235a:	801a      	strh	r2, [r3, #0]
 800235c:	e018      	b.n	8002390 <HAL_PCD_EP_DB_Transmit+0x736>
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	785b      	ldrb	r3, [r3, #1]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d114      	bne.n	8002390 <HAL_PCD_EP_DB_Transmit+0x736>
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800236e:	b29b      	uxth	r3, r3
 8002370:	461a      	mov	r2, r3
 8002372:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002374:	4413      	add	r3, r2
 8002376:	667b      	str	r3, [r7, #100]	; 0x64
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	011a      	lsls	r2, r3, #4
 800237e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002380:	4413      	add	r3, r2
 8002382:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002386:	663b      	str	r3, [r7, #96]	; 0x60
 8002388:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800238a:	b29a      	uxth	r2, r3
 800238c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800238e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6818      	ldr	r0, [r3, #0]
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	6959      	ldr	r1, [r3, #20]
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	895a      	ldrh	r2, [r3, #10]
 800239c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800239e:	b29b      	uxth	r3, r3
 80023a0:	f002 ff05 	bl	80051ae <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	461a      	mov	r2, r3
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	4413      	add	r3, r2
 80023b2:	881b      	ldrh	r3, [r3, #0]
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80023be:	823b      	strh	r3, [r7, #16]
 80023c0:	8a3b      	ldrh	r3, [r7, #16]
 80023c2:	f083 0310 	eor.w	r3, r3, #16
 80023c6:	823b      	strh	r3, [r7, #16]
 80023c8:	8a3b      	ldrh	r3, [r7, #16]
 80023ca:	f083 0320 	eor.w	r3, r3, #32
 80023ce:	823b      	strh	r3, [r7, #16]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	461a      	mov	r2, r3
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	441a      	add	r2, r3
 80023de:	8a3b      	ldrh	r3, [r7, #16]
 80023e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3788      	adds	r7, #136	; 0x88
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80023fe:	b480      	push	{r7}
 8002400:	b087      	sub	sp, #28
 8002402:	af00      	add	r7, sp, #0
 8002404:	60f8      	str	r0, [r7, #12]
 8002406:	607b      	str	r3, [r7, #4]
 8002408:	460b      	mov	r3, r1
 800240a:	817b      	strh	r3, [r7, #10]
 800240c:	4613      	mov	r3, r2
 800240e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002410:	897b      	ldrh	r3, [r7, #10]
 8002412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002416:	b29b      	uxth	r3, r3
 8002418:	2b00      	cmp	r3, #0
 800241a:	d00b      	beq.n	8002434 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800241c:	897b      	ldrh	r3, [r7, #10]
 800241e:	f003 0307 	and.w	r3, r3, #7
 8002422:	1c5a      	adds	r2, r3, #1
 8002424:	4613      	mov	r3, r2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	4413      	add	r3, r2
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	68fa      	ldr	r2, [r7, #12]
 800242e:	4413      	add	r3, r2
 8002430:	617b      	str	r3, [r7, #20]
 8002432:	e009      	b.n	8002448 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002434:	897a      	ldrh	r2, [r7, #10]
 8002436:	4613      	mov	r3, r2
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	4413      	add	r3, r2
 800243c:	00db      	lsls	r3, r3, #3
 800243e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002442:	68fa      	ldr	r2, [r7, #12]
 8002444:	4413      	add	r3, r2
 8002446:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002448:	893b      	ldrh	r3, [r7, #8]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d107      	bne.n	800245e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	2200      	movs	r2, #0
 8002452:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	b29a      	uxth	r2, r3
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	80da      	strh	r2, [r3, #6]
 800245c:	e00b      	b.n	8002476 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	2201      	movs	r2, #1
 8002462:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	b29a      	uxth	r2, r3
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	0c1b      	lsrs	r3, r3, #16
 8002470:	b29a      	uxth	r2, r3
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002476:	2300      	movs	r3, #0
}
 8002478:	4618      	mov	r0, r3
 800247a:	371c      	adds	r7, #28
 800247c:	46bd      	mov	sp, r7
 800247e:	bc80      	pop	{r7}
 8002480:	4770      	bx	lr
	...

08002484 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b086      	sub	sp, #24
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d101      	bne.n	8002496 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e26c      	b.n	8002970 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	2b00      	cmp	r3, #0
 80024a0:	f000 8087 	beq.w	80025b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024a4:	4b92      	ldr	r3, [pc, #584]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f003 030c 	and.w	r3, r3, #12
 80024ac:	2b04      	cmp	r3, #4
 80024ae:	d00c      	beq.n	80024ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80024b0:	4b8f      	ldr	r3, [pc, #572]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f003 030c 	and.w	r3, r3, #12
 80024b8:	2b08      	cmp	r3, #8
 80024ba:	d112      	bne.n	80024e2 <HAL_RCC_OscConfig+0x5e>
 80024bc:	4b8c      	ldr	r3, [pc, #560]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024c8:	d10b      	bne.n	80024e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024ca:	4b89      	ldr	r3, [pc, #548]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d06c      	beq.n	80025b0 <HAL_RCC_OscConfig+0x12c>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d168      	bne.n	80025b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e246      	b.n	8002970 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024ea:	d106      	bne.n	80024fa <HAL_RCC_OscConfig+0x76>
 80024ec:	4b80      	ldr	r3, [pc, #512]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a7f      	ldr	r2, [pc, #508]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 80024f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024f6:	6013      	str	r3, [r2, #0]
 80024f8:	e02e      	b.n	8002558 <HAL_RCC_OscConfig+0xd4>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d10c      	bne.n	800251c <HAL_RCC_OscConfig+0x98>
 8002502:	4b7b      	ldr	r3, [pc, #492]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a7a      	ldr	r2, [pc, #488]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 8002508:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800250c:	6013      	str	r3, [r2, #0]
 800250e:	4b78      	ldr	r3, [pc, #480]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a77      	ldr	r2, [pc, #476]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 8002514:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002518:	6013      	str	r3, [r2, #0]
 800251a:	e01d      	b.n	8002558 <HAL_RCC_OscConfig+0xd4>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002524:	d10c      	bne.n	8002540 <HAL_RCC_OscConfig+0xbc>
 8002526:	4b72      	ldr	r3, [pc, #456]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a71      	ldr	r2, [pc, #452]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 800252c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002530:	6013      	str	r3, [r2, #0]
 8002532:	4b6f      	ldr	r3, [pc, #444]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a6e      	ldr	r2, [pc, #440]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 8002538:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800253c:	6013      	str	r3, [r2, #0]
 800253e:	e00b      	b.n	8002558 <HAL_RCC_OscConfig+0xd4>
 8002540:	4b6b      	ldr	r3, [pc, #428]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a6a      	ldr	r2, [pc, #424]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 8002546:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800254a:	6013      	str	r3, [r2, #0]
 800254c:	4b68      	ldr	r3, [pc, #416]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a67      	ldr	r2, [pc, #412]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 8002552:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002556:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d013      	beq.n	8002588 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002560:	f7fd fff2 	bl	8000548 <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002566:	e008      	b.n	800257a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002568:	f7fd ffee 	bl	8000548 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b64      	cmp	r3, #100	; 0x64
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e1fa      	b.n	8002970 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800257a:	4b5d      	ldr	r3, [pc, #372]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d0f0      	beq.n	8002568 <HAL_RCC_OscConfig+0xe4>
 8002586:	e014      	b.n	80025b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002588:	f7fd ffde 	bl	8000548 <HAL_GetTick>
 800258c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800258e:	e008      	b.n	80025a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002590:	f7fd ffda 	bl	8000548 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b64      	cmp	r3, #100	; 0x64
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e1e6      	b.n	8002970 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025a2:	4b53      	ldr	r3, [pc, #332]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1f0      	bne.n	8002590 <HAL_RCC_OscConfig+0x10c>
 80025ae:	e000      	b.n	80025b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d063      	beq.n	8002686 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025be:	4b4c      	ldr	r3, [pc, #304]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f003 030c 	and.w	r3, r3, #12
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d00b      	beq.n	80025e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80025ca:	4b49      	ldr	r3, [pc, #292]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f003 030c 	and.w	r3, r3, #12
 80025d2:	2b08      	cmp	r3, #8
 80025d4:	d11c      	bne.n	8002610 <HAL_RCC_OscConfig+0x18c>
 80025d6:	4b46      	ldr	r3, [pc, #280]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d116      	bne.n	8002610 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025e2:	4b43      	ldr	r3, [pc, #268]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d005      	beq.n	80025fa <HAL_RCC_OscConfig+0x176>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d001      	beq.n	80025fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e1ba      	b.n	8002970 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025fa:	4b3d      	ldr	r3, [pc, #244]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	695b      	ldr	r3, [r3, #20]
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	4939      	ldr	r1, [pc, #228]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 800260a:	4313      	orrs	r3, r2
 800260c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800260e:	e03a      	b.n	8002686 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	691b      	ldr	r3, [r3, #16]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d020      	beq.n	800265a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002618:	4b36      	ldr	r3, [pc, #216]	; (80026f4 <HAL_RCC_OscConfig+0x270>)
 800261a:	2201      	movs	r2, #1
 800261c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800261e:	f7fd ff93 	bl	8000548 <HAL_GetTick>
 8002622:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002624:	e008      	b.n	8002638 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002626:	f7fd ff8f 	bl	8000548 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d901      	bls.n	8002638 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e19b      	b.n	8002970 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002638:	4b2d      	ldr	r3, [pc, #180]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0302 	and.w	r3, r3, #2
 8002640:	2b00      	cmp	r3, #0
 8002642:	d0f0      	beq.n	8002626 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002644:	4b2a      	ldr	r3, [pc, #168]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	695b      	ldr	r3, [r3, #20]
 8002650:	00db      	lsls	r3, r3, #3
 8002652:	4927      	ldr	r1, [pc, #156]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 8002654:	4313      	orrs	r3, r2
 8002656:	600b      	str	r3, [r1, #0]
 8002658:	e015      	b.n	8002686 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800265a:	4b26      	ldr	r3, [pc, #152]	; (80026f4 <HAL_RCC_OscConfig+0x270>)
 800265c:	2200      	movs	r2, #0
 800265e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002660:	f7fd ff72 	bl	8000548 <HAL_GetTick>
 8002664:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002666:	e008      	b.n	800267a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002668:	f7fd ff6e 	bl	8000548 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b02      	cmp	r3, #2
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e17a      	b.n	8002970 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800267a:	4b1d      	ldr	r3, [pc, #116]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1f0      	bne.n	8002668 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0308 	and.w	r3, r3, #8
 800268e:	2b00      	cmp	r3, #0
 8002690:	d03a      	beq.n	8002708 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	699b      	ldr	r3, [r3, #24]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d019      	beq.n	80026ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800269a:	4b17      	ldr	r3, [pc, #92]	; (80026f8 <HAL_RCC_OscConfig+0x274>)
 800269c:	2201      	movs	r2, #1
 800269e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026a0:	f7fd ff52 	bl	8000548 <HAL_GetTick>
 80026a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026a6:	e008      	b.n	80026ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026a8:	f7fd ff4e 	bl	8000548 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e15a      	b.n	8002970 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ba:	4b0d      	ldr	r3, [pc, #52]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 80026bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d0f0      	beq.n	80026a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80026c6:	2001      	movs	r0, #1
 80026c8:	f000 faa6 	bl	8002c18 <RCC_Delay>
 80026cc:	e01c      	b.n	8002708 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026ce:	4b0a      	ldr	r3, [pc, #40]	; (80026f8 <HAL_RCC_OscConfig+0x274>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026d4:	f7fd ff38 	bl	8000548 <HAL_GetTick>
 80026d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026da:	e00f      	b.n	80026fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026dc:	f7fd ff34 	bl	8000548 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d908      	bls.n	80026fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e140      	b.n	8002970 <HAL_RCC_OscConfig+0x4ec>
 80026ee:	bf00      	nop
 80026f0:	40021000 	.word	0x40021000
 80026f4:	42420000 	.word	0x42420000
 80026f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026fc:	4b9e      	ldr	r3, [pc, #632]	; (8002978 <HAL_RCC_OscConfig+0x4f4>)
 80026fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002700:	f003 0302 	and.w	r3, r3, #2
 8002704:	2b00      	cmp	r3, #0
 8002706:	d1e9      	bne.n	80026dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0304 	and.w	r3, r3, #4
 8002710:	2b00      	cmp	r3, #0
 8002712:	f000 80a6 	beq.w	8002862 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002716:	2300      	movs	r3, #0
 8002718:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800271a:	4b97      	ldr	r3, [pc, #604]	; (8002978 <HAL_RCC_OscConfig+0x4f4>)
 800271c:	69db      	ldr	r3, [r3, #28]
 800271e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d10d      	bne.n	8002742 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002726:	4b94      	ldr	r3, [pc, #592]	; (8002978 <HAL_RCC_OscConfig+0x4f4>)
 8002728:	69db      	ldr	r3, [r3, #28]
 800272a:	4a93      	ldr	r2, [pc, #588]	; (8002978 <HAL_RCC_OscConfig+0x4f4>)
 800272c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002730:	61d3      	str	r3, [r2, #28]
 8002732:	4b91      	ldr	r3, [pc, #580]	; (8002978 <HAL_RCC_OscConfig+0x4f4>)
 8002734:	69db      	ldr	r3, [r3, #28]
 8002736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800273a:	60bb      	str	r3, [r7, #8]
 800273c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800273e:	2301      	movs	r3, #1
 8002740:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002742:	4b8e      	ldr	r3, [pc, #568]	; (800297c <HAL_RCC_OscConfig+0x4f8>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800274a:	2b00      	cmp	r3, #0
 800274c:	d118      	bne.n	8002780 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800274e:	4b8b      	ldr	r3, [pc, #556]	; (800297c <HAL_RCC_OscConfig+0x4f8>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a8a      	ldr	r2, [pc, #552]	; (800297c <HAL_RCC_OscConfig+0x4f8>)
 8002754:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002758:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800275a:	f7fd fef5 	bl	8000548 <HAL_GetTick>
 800275e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002760:	e008      	b.n	8002774 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002762:	f7fd fef1 	bl	8000548 <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	2b64      	cmp	r3, #100	; 0x64
 800276e:	d901      	bls.n	8002774 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e0fd      	b.n	8002970 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002774:	4b81      	ldr	r3, [pc, #516]	; (800297c <HAL_RCC_OscConfig+0x4f8>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800277c:	2b00      	cmp	r3, #0
 800277e:	d0f0      	beq.n	8002762 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	2b01      	cmp	r3, #1
 8002786:	d106      	bne.n	8002796 <HAL_RCC_OscConfig+0x312>
 8002788:	4b7b      	ldr	r3, [pc, #492]	; (8002978 <HAL_RCC_OscConfig+0x4f4>)
 800278a:	6a1b      	ldr	r3, [r3, #32]
 800278c:	4a7a      	ldr	r2, [pc, #488]	; (8002978 <HAL_RCC_OscConfig+0x4f4>)
 800278e:	f043 0301 	orr.w	r3, r3, #1
 8002792:	6213      	str	r3, [r2, #32]
 8002794:	e02d      	b.n	80027f2 <HAL_RCC_OscConfig+0x36e>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d10c      	bne.n	80027b8 <HAL_RCC_OscConfig+0x334>
 800279e:	4b76      	ldr	r3, [pc, #472]	; (8002978 <HAL_RCC_OscConfig+0x4f4>)
 80027a0:	6a1b      	ldr	r3, [r3, #32]
 80027a2:	4a75      	ldr	r2, [pc, #468]	; (8002978 <HAL_RCC_OscConfig+0x4f4>)
 80027a4:	f023 0301 	bic.w	r3, r3, #1
 80027a8:	6213      	str	r3, [r2, #32]
 80027aa:	4b73      	ldr	r3, [pc, #460]	; (8002978 <HAL_RCC_OscConfig+0x4f4>)
 80027ac:	6a1b      	ldr	r3, [r3, #32]
 80027ae:	4a72      	ldr	r2, [pc, #456]	; (8002978 <HAL_RCC_OscConfig+0x4f4>)
 80027b0:	f023 0304 	bic.w	r3, r3, #4
 80027b4:	6213      	str	r3, [r2, #32]
 80027b6:	e01c      	b.n	80027f2 <HAL_RCC_OscConfig+0x36e>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	2b05      	cmp	r3, #5
 80027be:	d10c      	bne.n	80027da <HAL_RCC_OscConfig+0x356>
 80027c0:	4b6d      	ldr	r3, [pc, #436]	; (8002978 <HAL_RCC_OscConfig+0x4f4>)
 80027c2:	6a1b      	ldr	r3, [r3, #32]
 80027c4:	4a6c      	ldr	r2, [pc, #432]	; (8002978 <HAL_RCC_OscConfig+0x4f4>)
 80027c6:	f043 0304 	orr.w	r3, r3, #4
 80027ca:	6213      	str	r3, [r2, #32]
 80027cc:	4b6a      	ldr	r3, [pc, #424]	; (8002978 <HAL_RCC_OscConfig+0x4f4>)
 80027ce:	6a1b      	ldr	r3, [r3, #32]
 80027d0:	4a69      	ldr	r2, [pc, #420]	; (8002978 <HAL_RCC_OscConfig+0x4f4>)
 80027d2:	f043 0301 	orr.w	r3, r3, #1
 80027d6:	6213      	str	r3, [r2, #32]
 80027d8:	e00b      	b.n	80027f2 <HAL_RCC_OscConfig+0x36e>
 80027da:	4b67      	ldr	r3, [pc, #412]	; (8002978 <HAL_RCC_OscConfig+0x4f4>)
 80027dc:	6a1b      	ldr	r3, [r3, #32]
 80027de:	4a66      	ldr	r2, [pc, #408]	; (8002978 <HAL_RCC_OscConfig+0x4f4>)
 80027e0:	f023 0301 	bic.w	r3, r3, #1
 80027e4:	6213      	str	r3, [r2, #32]
 80027e6:	4b64      	ldr	r3, [pc, #400]	; (8002978 <HAL_RCC_OscConfig+0x4f4>)
 80027e8:	6a1b      	ldr	r3, [r3, #32]
 80027ea:	4a63      	ldr	r2, [pc, #396]	; (8002978 <HAL_RCC_OscConfig+0x4f4>)
 80027ec:	f023 0304 	bic.w	r3, r3, #4
 80027f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d015      	beq.n	8002826 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027fa:	f7fd fea5 	bl	8000548 <HAL_GetTick>
 80027fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002800:	e00a      	b.n	8002818 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002802:	f7fd fea1 	bl	8000548 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002810:	4293      	cmp	r3, r2
 8002812:	d901      	bls.n	8002818 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e0ab      	b.n	8002970 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002818:	4b57      	ldr	r3, [pc, #348]	; (8002978 <HAL_RCC_OscConfig+0x4f4>)
 800281a:	6a1b      	ldr	r3, [r3, #32]
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	2b00      	cmp	r3, #0
 8002822:	d0ee      	beq.n	8002802 <HAL_RCC_OscConfig+0x37e>
 8002824:	e014      	b.n	8002850 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002826:	f7fd fe8f 	bl	8000548 <HAL_GetTick>
 800282a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800282c:	e00a      	b.n	8002844 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800282e:	f7fd fe8b 	bl	8000548 <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	f241 3288 	movw	r2, #5000	; 0x1388
 800283c:	4293      	cmp	r3, r2
 800283e:	d901      	bls.n	8002844 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	e095      	b.n	8002970 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002844:	4b4c      	ldr	r3, [pc, #304]	; (8002978 <HAL_RCC_OscConfig+0x4f4>)
 8002846:	6a1b      	ldr	r3, [r3, #32]
 8002848:	f003 0302 	and.w	r3, r3, #2
 800284c:	2b00      	cmp	r3, #0
 800284e:	d1ee      	bne.n	800282e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002850:	7dfb      	ldrb	r3, [r7, #23]
 8002852:	2b01      	cmp	r3, #1
 8002854:	d105      	bne.n	8002862 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002856:	4b48      	ldr	r3, [pc, #288]	; (8002978 <HAL_RCC_OscConfig+0x4f4>)
 8002858:	69db      	ldr	r3, [r3, #28]
 800285a:	4a47      	ldr	r2, [pc, #284]	; (8002978 <HAL_RCC_OscConfig+0x4f4>)
 800285c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002860:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	69db      	ldr	r3, [r3, #28]
 8002866:	2b00      	cmp	r3, #0
 8002868:	f000 8081 	beq.w	800296e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800286c:	4b42      	ldr	r3, [pc, #264]	; (8002978 <HAL_RCC_OscConfig+0x4f4>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f003 030c 	and.w	r3, r3, #12
 8002874:	2b08      	cmp	r3, #8
 8002876:	d061      	beq.n	800293c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	69db      	ldr	r3, [r3, #28]
 800287c:	2b02      	cmp	r3, #2
 800287e:	d146      	bne.n	800290e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002880:	4b3f      	ldr	r3, [pc, #252]	; (8002980 <HAL_RCC_OscConfig+0x4fc>)
 8002882:	2200      	movs	r2, #0
 8002884:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002886:	f7fd fe5f 	bl	8000548 <HAL_GetTick>
 800288a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800288c:	e008      	b.n	80028a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800288e:	f7fd fe5b 	bl	8000548 <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d901      	bls.n	80028a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e067      	b.n	8002970 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028a0:	4b35      	ldr	r3, [pc, #212]	; (8002978 <HAL_RCC_OscConfig+0x4f4>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1f0      	bne.n	800288e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a1b      	ldr	r3, [r3, #32]
 80028b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028b4:	d108      	bne.n	80028c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80028b6:	4b30      	ldr	r3, [pc, #192]	; (8002978 <HAL_RCC_OscConfig+0x4f4>)
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	492d      	ldr	r1, [pc, #180]	; (8002978 <HAL_RCC_OscConfig+0x4f4>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028c8:	4b2b      	ldr	r3, [pc, #172]	; (8002978 <HAL_RCC_OscConfig+0x4f4>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a19      	ldr	r1, [r3, #32]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d8:	430b      	orrs	r3, r1
 80028da:	4927      	ldr	r1, [pc, #156]	; (8002978 <HAL_RCC_OscConfig+0x4f4>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028e0:	4b27      	ldr	r3, [pc, #156]	; (8002980 <HAL_RCC_OscConfig+0x4fc>)
 80028e2:	2201      	movs	r2, #1
 80028e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e6:	f7fd fe2f 	bl	8000548 <HAL_GetTick>
 80028ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028ec:	e008      	b.n	8002900 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028ee:	f7fd fe2b 	bl	8000548 <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d901      	bls.n	8002900 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e037      	b.n	8002970 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002900:	4b1d      	ldr	r3, [pc, #116]	; (8002978 <HAL_RCC_OscConfig+0x4f4>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d0f0      	beq.n	80028ee <HAL_RCC_OscConfig+0x46a>
 800290c:	e02f      	b.n	800296e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800290e:	4b1c      	ldr	r3, [pc, #112]	; (8002980 <HAL_RCC_OscConfig+0x4fc>)
 8002910:	2200      	movs	r2, #0
 8002912:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002914:	f7fd fe18 	bl	8000548 <HAL_GetTick>
 8002918:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800291a:	e008      	b.n	800292e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800291c:	f7fd fe14 	bl	8000548 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b02      	cmp	r3, #2
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e020      	b.n	8002970 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800292e:	4b12      	ldr	r3, [pc, #72]	; (8002978 <HAL_RCC_OscConfig+0x4f4>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d1f0      	bne.n	800291c <HAL_RCC_OscConfig+0x498>
 800293a:	e018      	b.n	800296e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	69db      	ldr	r3, [r3, #28]
 8002940:	2b01      	cmp	r3, #1
 8002942:	d101      	bne.n	8002948 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e013      	b.n	8002970 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002948:	4b0b      	ldr	r3, [pc, #44]	; (8002978 <HAL_RCC_OscConfig+0x4f4>)
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a1b      	ldr	r3, [r3, #32]
 8002958:	429a      	cmp	r2, r3
 800295a:	d106      	bne.n	800296a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002966:	429a      	cmp	r2, r3
 8002968:	d001      	beq.n	800296e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e000      	b.n	8002970 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	3718      	adds	r7, #24
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	40021000 	.word	0x40021000
 800297c:	40007000 	.word	0x40007000
 8002980:	42420060 	.word	0x42420060

08002984 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d101      	bne.n	8002998 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e0d0      	b.n	8002b3a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002998:	4b6a      	ldr	r3, [pc, #424]	; (8002b44 <HAL_RCC_ClockConfig+0x1c0>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0307 	and.w	r3, r3, #7
 80029a0:	683a      	ldr	r2, [r7, #0]
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d910      	bls.n	80029c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029a6:	4b67      	ldr	r3, [pc, #412]	; (8002b44 <HAL_RCC_ClockConfig+0x1c0>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f023 0207 	bic.w	r2, r3, #7
 80029ae:	4965      	ldr	r1, [pc, #404]	; (8002b44 <HAL_RCC_ClockConfig+0x1c0>)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029b6:	4b63      	ldr	r3, [pc, #396]	; (8002b44 <HAL_RCC_ClockConfig+0x1c0>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0307 	and.w	r3, r3, #7
 80029be:	683a      	ldr	r2, [r7, #0]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d001      	beq.n	80029c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e0b8      	b.n	8002b3a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0302 	and.w	r3, r3, #2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d020      	beq.n	8002a16 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0304 	and.w	r3, r3, #4
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d005      	beq.n	80029ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029e0:	4b59      	ldr	r3, [pc, #356]	; (8002b48 <HAL_RCC_ClockConfig+0x1c4>)
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	4a58      	ldr	r2, [pc, #352]	; (8002b48 <HAL_RCC_ClockConfig+0x1c4>)
 80029e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80029ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0308 	and.w	r3, r3, #8
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d005      	beq.n	8002a04 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029f8:	4b53      	ldr	r3, [pc, #332]	; (8002b48 <HAL_RCC_ClockConfig+0x1c4>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	4a52      	ldr	r2, [pc, #328]	; (8002b48 <HAL_RCC_ClockConfig+0x1c4>)
 80029fe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002a02:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a04:	4b50      	ldr	r3, [pc, #320]	; (8002b48 <HAL_RCC_ClockConfig+0x1c4>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	494d      	ldr	r1, [pc, #308]	; (8002b48 <HAL_RCC_ClockConfig+0x1c4>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0301 	and.w	r3, r3, #1
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d040      	beq.n	8002aa4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d107      	bne.n	8002a3a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a2a:	4b47      	ldr	r3, [pc, #284]	; (8002b48 <HAL_RCC_ClockConfig+0x1c4>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d115      	bne.n	8002a62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e07f      	b.n	8002b3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d107      	bne.n	8002a52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a42:	4b41      	ldr	r3, [pc, #260]	; (8002b48 <HAL_RCC_ClockConfig+0x1c4>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d109      	bne.n	8002a62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e073      	b.n	8002b3a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a52:	4b3d      	ldr	r3, [pc, #244]	; (8002b48 <HAL_RCC_ClockConfig+0x1c4>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e06b      	b.n	8002b3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a62:	4b39      	ldr	r3, [pc, #228]	; (8002b48 <HAL_RCC_ClockConfig+0x1c4>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f023 0203 	bic.w	r2, r3, #3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	4936      	ldr	r1, [pc, #216]	; (8002b48 <HAL_RCC_ClockConfig+0x1c4>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a74:	f7fd fd68 	bl	8000548 <HAL_GetTick>
 8002a78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a7a:	e00a      	b.n	8002a92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a7c:	f7fd fd64 	bl	8000548 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e053      	b.n	8002b3a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a92:	4b2d      	ldr	r3, [pc, #180]	; (8002b48 <HAL_RCC_ClockConfig+0x1c4>)
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f003 020c 	and.w	r2, r3, #12
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d1eb      	bne.n	8002a7c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002aa4:	4b27      	ldr	r3, [pc, #156]	; (8002b44 <HAL_RCC_ClockConfig+0x1c0>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0307 	and.w	r3, r3, #7
 8002aac:	683a      	ldr	r2, [r7, #0]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d210      	bcs.n	8002ad4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ab2:	4b24      	ldr	r3, [pc, #144]	; (8002b44 <HAL_RCC_ClockConfig+0x1c0>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f023 0207 	bic.w	r2, r3, #7
 8002aba:	4922      	ldr	r1, [pc, #136]	; (8002b44 <HAL_RCC_ClockConfig+0x1c0>)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ac2:	4b20      	ldr	r3, [pc, #128]	; (8002b44 <HAL_RCC_ClockConfig+0x1c0>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0307 	and.w	r3, r3, #7
 8002aca:	683a      	ldr	r2, [r7, #0]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d001      	beq.n	8002ad4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e032      	b.n	8002b3a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0304 	and.w	r3, r3, #4
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d008      	beq.n	8002af2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ae0:	4b19      	ldr	r3, [pc, #100]	; (8002b48 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	4916      	ldr	r1, [pc, #88]	; (8002b48 <HAL_RCC_ClockConfig+0x1c4>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0308 	and.w	r3, r3, #8
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d009      	beq.n	8002b12 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002afe:	4b12      	ldr	r3, [pc, #72]	; (8002b48 <HAL_RCC_ClockConfig+0x1c4>)
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	00db      	lsls	r3, r3, #3
 8002b0c:	490e      	ldr	r1, [pc, #56]	; (8002b48 <HAL_RCC_ClockConfig+0x1c4>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b12:	f000 f821 	bl	8002b58 <HAL_RCC_GetSysClockFreq>
 8002b16:	4602      	mov	r2, r0
 8002b18:	4b0b      	ldr	r3, [pc, #44]	; (8002b48 <HAL_RCC_ClockConfig+0x1c4>)
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	091b      	lsrs	r3, r3, #4
 8002b1e:	f003 030f 	and.w	r3, r3, #15
 8002b22:	490a      	ldr	r1, [pc, #40]	; (8002b4c <HAL_RCC_ClockConfig+0x1c8>)
 8002b24:	5ccb      	ldrb	r3, [r1, r3]
 8002b26:	fa22 f303 	lsr.w	r3, r2, r3
 8002b2a:	4a09      	ldr	r2, [pc, #36]	; (8002b50 <HAL_RCC_ClockConfig+0x1cc>)
 8002b2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b2e:	4b09      	ldr	r3, [pc, #36]	; (8002b54 <HAL_RCC_ClockConfig+0x1d0>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7fd fcc6 	bl	80004c4 <HAL_InitTick>

  return HAL_OK;
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3710      	adds	r7, #16
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	40022000 	.word	0x40022000
 8002b48:	40021000 	.word	0x40021000
 8002b4c:	08006f7c 	.word	0x08006f7c
 8002b50:	20000000 	.word	0x20000000
 8002b54:	20000004 	.word	0x20000004

08002b58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b58:	b490      	push	{r4, r7}
 8002b5a:	b08a      	sub	sp, #40	; 0x28
 8002b5c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002b5e:	4b2a      	ldr	r3, [pc, #168]	; (8002c08 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002b60:	1d3c      	adds	r4, r7, #4
 8002b62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002b68:	f240 2301 	movw	r3, #513	; 0x201
 8002b6c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	61fb      	str	r3, [r7, #28]
 8002b72:	2300      	movs	r3, #0
 8002b74:	61bb      	str	r3, [r7, #24]
 8002b76:	2300      	movs	r3, #0
 8002b78:	627b      	str	r3, [r7, #36]	; 0x24
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b82:	4b22      	ldr	r3, [pc, #136]	; (8002c0c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	f003 030c 	and.w	r3, r3, #12
 8002b8e:	2b04      	cmp	r3, #4
 8002b90:	d002      	beq.n	8002b98 <HAL_RCC_GetSysClockFreq+0x40>
 8002b92:	2b08      	cmp	r3, #8
 8002b94:	d003      	beq.n	8002b9e <HAL_RCC_GetSysClockFreq+0x46>
 8002b96:	e02d      	b.n	8002bf4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b98:	4b1d      	ldr	r3, [pc, #116]	; (8002c10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b9a:	623b      	str	r3, [r7, #32]
      break;
 8002b9c:	e02d      	b.n	8002bfa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	0c9b      	lsrs	r3, r3, #18
 8002ba2:	f003 030f 	and.w	r3, r3, #15
 8002ba6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002baa:	4413      	add	r3, r2
 8002bac:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002bb0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d013      	beq.n	8002be4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002bbc:	4b13      	ldr	r3, [pc, #76]	; (8002c0c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	0c5b      	lsrs	r3, r3, #17
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002bca:	4413      	add	r3, r2
 8002bcc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002bd0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	4a0e      	ldr	r2, [pc, #56]	; (8002c10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bd6:	fb02 f203 	mul.w	r2, r2, r3
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be0:	627b      	str	r3, [r7, #36]	; 0x24
 8002be2:	e004      	b.n	8002bee <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	4a0b      	ldr	r2, [pc, #44]	; (8002c14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002be8:	fb02 f303 	mul.w	r3, r2, r3
 8002bec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf0:	623b      	str	r3, [r7, #32]
      break;
 8002bf2:	e002      	b.n	8002bfa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002bf4:	4b06      	ldr	r3, [pc, #24]	; (8002c10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bf6:	623b      	str	r3, [r7, #32]
      break;
 8002bf8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bfa:	6a3b      	ldr	r3, [r7, #32]
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3728      	adds	r7, #40	; 0x28
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bc90      	pop	{r4, r7}
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	08006f28 	.word	0x08006f28
 8002c0c:	40021000 	.word	0x40021000
 8002c10:	007a1200 	.word	0x007a1200
 8002c14:	003d0900 	.word	0x003d0900

08002c18 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b085      	sub	sp, #20
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c20:	4b0a      	ldr	r3, [pc, #40]	; (8002c4c <RCC_Delay+0x34>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a0a      	ldr	r2, [pc, #40]	; (8002c50 <RCC_Delay+0x38>)
 8002c26:	fba2 2303 	umull	r2, r3, r2, r3
 8002c2a:	0a5b      	lsrs	r3, r3, #9
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	fb02 f303 	mul.w	r3, r2, r3
 8002c32:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c34:	bf00      	nop
  }
  while (Delay --);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	1e5a      	subs	r2, r3, #1
 8002c3a:	60fa      	str	r2, [r7, #12]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d1f9      	bne.n	8002c34 <RCC_Delay+0x1c>
}
 8002c40:	bf00      	nop
 8002c42:	bf00      	nop
 8002c44:	3714      	adds	r7, #20
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bc80      	pop	{r7}
 8002c4a:	4770      	bx	lr
 8002c4c:	20000000 	.word	0x20000000
 8002c50:	10624dd3 	.word	0x10624dd3

08002c54 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b086      	sub	sp, #24
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	613b      	str	r3, [r7, #16]
 8002c60:	2300      	movs	r3, #0
 8002c62:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0301 	and.w	r3, r3, #1
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d07d      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002c70:	2300      	movs	r3, #0
 8002c72:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c74:	4b4f      	ldr	r3, [pc, #316]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c76:	69db      	ldr	r3, [r3, #28]
 8002c78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d10d      	bne.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c80:	4b4c      	ldr	r3, [pc, #304]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c82:	69db      	ldr	r3, [r3, #28]
 8002c84:	4a4b      	ldr	r2, [pc, #300]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c8a:	61d3      	str	r3, [r2, #28]
 8002c8c:	4b49      	ldr	r3, [pc, #292]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c8e:	69db      	ldr	r3, [r3, #28]
 8002c90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c94:	60bb      	str	r3, [r7, #8]
 8002c96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c9c:	4b46      	ldr	r3, [pc, #280]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d118      	bne.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ca8:	4b43      	ldr	r3, [pc, #268]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a42      	ldr	r2, [pc, #264]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cb2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cb4:	f7fd fc48 	bl	8000548 <HAL_GetTick>
 8002cb8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cba:	e008      	b.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cbc:	f7fd fc44 	bl	8000548 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b64      	cmp	r3, #100	; 0x64
 8002cc8:	d901      	bls.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e06d      	b.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cce:	4b3a      	ldr	r3, [pc, #232]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d0f0      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002cda:	4b36      	ldr	r3, [pc, #216]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cdc:	6a1b      	ldr	r3, [r3, #32]
 8002cde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ce2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d02e      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cf2:	68fa      	ldr	r2, [r7, #12]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d027      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002cf8:	4b2e      	ldr	r3, [pc, #184]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cfa:	6a1b      	ldr	r3, [r3, #32]
 8002cfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d00:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d02:	4b2e      	ldr	r3, [pc, #184]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d04:	2201      	movs	r2, #1
 8002d06:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d08:	4b2c      	ldr	r3, [pc, #176]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002d0e:	4a29      	ldr	r2, [pc, #164]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d014      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d1e:	f7fd fc13 	bl	8000548 <HAL_GetTick>
 8002d22:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d24:	e00a      	b.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d26:	f7fd fc0f 	bl	8000548 <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d901      	bls.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e036      	b.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d3c:	4b1d      	ldr	r3, [pc, #116]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d3e:	6a1b      	ldr	r3, [r3, #32]
 8002d40:	f003 0302 	and.w	r3, r3, #2
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d0ee      	beq.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d48:	4b1a      	ldr	r3, [pc, #104]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d4a:	6a1b      	ldr	r3, [r3, #32]
 8002d4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	4917      	ldr	r1, [pc, #92]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d5a:	7dfb      	ldrb	r3, [r7, #23]
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d105      	bne.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d60:	4b14      	ldr	r3, [pc, #80]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d62:	69db      	ldr	r3, [r3, #28]
 8002d64:	4a13      	ldr	r2, [pc, #76]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d6a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d008      	beq.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d78:	4b0e      	ldr	r3, [pc, #56]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	490b      	ldr	r1, [pc, #44]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0310 	and.w	r3, r3, #16
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d008      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d96:	4b07      	ldr	r3, [pc, #28]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	4904      	ldr	r1, [pc, #16]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3718      	adds	r7, #24
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	40021000 	.word	0x40021000
 8002db8:	40007000 	.word	0x40007000
 8002dbc:	42420440 	.word	0x42420440

08002dc0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002dc0:	b084      	sub	sp, #16
 8002dc2:	b480      	push	{r7}
 8002dc4:	b083      	sub	sp, #12
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
 8002dca:	f107 0014 	add.w	r0, r7, #20
 8002dce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002dd2:	2300      	movs	r3, #0
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bc80      	pop	{r7}
 8002ddc:	b004      	add	sp, #16
 8002dde:	4770      	bx	lr

08002de0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b085      	sub	sp, #20
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002df0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002df4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	b29a      	uxth	r2, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3714      	adds	r7, #20
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bc80      	pop	{r7}
 8002e0a:	4770      	bx	lr

08002e0c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b085      	sub	sp, #20
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002e14:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002e18:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002e20:	b29a      	uxth	r2, r3
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	43db      	mvns	r3, r3
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3714      	adds	r7, #20
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bc80      	pop	{r7}
 8002e3e:	4770      	bx	lr

08002e40 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	460b      	mov	r3, r1
 8002e4a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	370c      	adds	r7, #12
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bc80      	pop	{r7}
 8002e56:	4770      	bx	lr

08002e58 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002e58:	b084      	sub	sp, #16
 8002e5a:	b480      	push	{r7}
 8002e5c:	b083      	sub	sp, #12
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
 8002e62:	f107 0014 	add.w	r0, r7, #20
 8002e66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bc80      	pop	{r7}
 8002e94:	b004      	add	sp, #16
 8002e96:	4770      	bx	lr

08002e98 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b09b      	sub	sp, #108	; 0x6c
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	4413      	add	r3, r2
 8002eb2:	881b      	ldrh	r3, [r3, #0]
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ebe:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	78db      	ldrb	r3, [r3, #3]
 8002ec6:	2b03      	cmp	r3, #3
 8002ec8:	d81f      	bhi.n	8002f0a <USB_ActivateEndpoint+0x72>
 8002eca:	a201      	add	r2, pc, #4	; (adr r2, 8002ed0 <USB_ActivateEndpoint+0x38>)
 8002ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ed0:	08002ee1 	.word	0x08002ee1
 8002ed4:	08002efd 	.word	0x08002efd
 8002ed8:	08002f13 	.word	0x08002f13
 8002edc:	08002eef 	.word	0x08002eef
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002ee0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002ee4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ee8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002eec:	e012      	b.n	8002f14 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8002eee:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002ef2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002ef6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002efa:	e00b      	b.n	8002f14 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002efc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002f00:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f04:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002f08:	e004      	b.n	8002f14 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8002f10:	e000      	b.n	8002f14 <USB_ActivateEndpoint+0x7c>
      break;
 8002f12:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	441a      	add	r2, r3
 8002f1e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002f22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	4413      	add	r3, r2
 8002f40:	881b      	ldrh	r3, [r3, #0]
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f4c:	b29a      	uxth	r2, r3
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	4313      	orrs	r3, r2
 8002f56:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	441a      	add	r2, r3
 8002f64:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002f68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	7b1b      	ldrb	r3, [r3, #12]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	f040 8149 	bne.w	8003218 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	785b      	ldrb	r3, [r3, #1]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	f000 8084 	beq.w	8003098 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	617b      	str	r3, [r7, #20]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	617b      	str	r3, [r7, #20]
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	011a      	lsls	r2, r3, #4
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	4413      	add	r3, r2
 8002fae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002fb2:	613b      	str	r3, [r7, #16]
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	88db      	ldrh	r3, [r3, #6]
 8002fb8:	085b      	lsrs	r3, r3, #1
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	005b      	lsls	r3, r3, #1
 8002fbe:	b29a      	uxth	r2, r3
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	4413      	add	r3, r2
 8002fce:	881b      	ldrh	r3, [r3, #0]
 8002fd0:	81fb      	strh	r3, [r7, #14]
 8002fd2:	89fb      	ldrh	r3, [r7, #14]
 8002fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d01b      	beq.n	8003014 <USB_ActivateEndpoint+0x17c>
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	4413      	add	r3, r2
 8002fe6:	881b      	ldrh	r3, [r3, #0]
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ff2:	81bb      	strh	r3, [r7, #12]
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	441a      	add	r2, r3
 8002ffe:	89bb      	ldrh	r3, [r7, #12]
 8003000:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003004:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003008:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800300c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003010:	b29b      	uxth	r3, r3
 8003012:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	78db      	ldrb	r3, [r3, #3]
 8003018:	2b01      	cmp	r3, #1
 800301a:	d020      	beq.n	800305e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	4413      	add	r3, r2
 8003026:	881b      	ldrh	r3, [r3, #0]
 8003028:	b29b      	uxth	r3, r3
 800302a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800302e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003032:	813b      	strh	r3, [r7, #8]
 8003034:	893b      	ldrh	r3, [r7, #8]
 8003036:	f083 0320 	eor.w	r3, r3, #32
 800303a:	813b      	strh	r3, [r7, #8]
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	441a      	add	r2, r3
 8003046:	893b      	ldrh	r3, [r7, #8]
 8003048:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800304c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003050:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003054:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003058:	b29b      	uxth	r3, r3
 800305a:	8013      	strh	r3, [r2, #0]
 800305c:	e27f      	b.n	800355e <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	4413      	add	r3, r2
 8003068:	881b      	ldrh	r3, [r3, #0]
 800306a:	b29b      	uxth	r3, r3
 800306c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003070:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003074:	817b      	strh	r3, [r7, #10]
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	441a      	add	r2, r3
 8003080:	897b      	ldrh	r3, [r7, #10]
 8003082:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003086:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800308a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800308e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003092:	b29b      	uxth	r3, r3
 8003094:	8013      	strh	r3, [r2, #0]
 8003096:	e262      	b.n	800355e <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	461a      	mov	r2, r3
 80030a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030a8:	4413      	add	r3, r2
 80030aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	011a      	lsls	r2, r3, #4
 80030b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030b4:	4413      	add	r3, r2
 80030b6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80030ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	88db      	ldrh	r3, [r3, #6]
 80030c0:	085b      	lsrs	r3, r3, #1
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	b29a      	uxth	r2, r3
 80030c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ca:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	627b      	str	r3, [r7, #36]	; 0x24
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	461a      	mov	r2, r3
 80030da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030dc:	4413      	add	r3, r2
 80030de:	627b      	str	r3, [r7, #36]	; 0x24
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	011a      	lsls	r2, r3, #4
 80030e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e8:	4413      	add	r3, r2
 80030ea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80030ee:	623b      	str	r3, [r7, #32]
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	691b      	ldr	r3, [r3, #16]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d112      	bne.n	800311e <USB_ActivateEndpoint+0x286>
 80030f8:	6a3b      	ldr	r3, [r7, #32]
 80030fa:	881b      	ldrh	r3, [r3, #0]
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003102:	b29a      	uxth	r2, r3
 8003104:	6a3b      	ldr	r3, [r7, #32]
 8003106:	801a      	strh	r2, [r3, #0]
 8003108:	6a3b      	ldr	r3, [r7, #32]
 800310a:	881b      	ldrh	r3, [r3, #0]
 800310c:	b29b      	uxth	r3, r3
 800310e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003112:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003116:	b29a      	uxth	r2, r3
 8003118:	6a3b      	ldr	r3, [r7, #32]
 800311a:	801a      	strh	r2, [r3, #0]
 800311c:	e02f      	b.n	800317e <USB_ActivateEndpoint+0x2e6>
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	2b3e      	cmp	r3, #62	; 0x3e
 8003124:	d813      	bhi.n	800314e <USB_ActivateEndpoint+0x2b6>
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	691b      	ldr	r3, [r3, #16]
 800312a:	085b      	lsrs	r3, r3, #1
 800312c:	663b      	str	r3, [r7, #96]	; 0x60
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b00      	cmp	r3, #0
 8003138:	d002      	beq.n	8003140 <USB_ActivateEndpoint+0x2a8>
 800313a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800313c:	3301      	adds	r3, #1
 800313e:	663b      	str	r3, [r7, #96]	; 0x60
 8003140:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003142:	b29b      	uxth	r3, r3
 8003144:	029b      	lsls	r3, r3, #10
 8003146:	b29a      	uxth	r2, r3
 8003148:	6a3b      	ldr	r3, [r7, #32]
 800314a:	801a      	strh	r2, [r3, #0]
 800314c:	e017      	b.n	800317e <USB_ActivateEndpoint+0x2e6>
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	095b      	lsrs	r3, r3, #5
 8003154:	663b      	str	r3, [r7, #96]	; 0x60
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	691b      	ldr	r3, [r3, #16]
 800315a:	f003 031f 	and.w	r3, r3, #31
 800315e:	2b00      	cmp	r3, #0
 8003160:	d102      	bne.n	8003168 <USB_ActivateEndpoint+0x2d0>
 8003162:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003164:	3b01      	subs	r3, #1
 8003166:	663b      	str	r3, [r7, #96]	; 0x60
 8003168:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800316a:	b29b      	uxth	r3, r3
 800316c:	029b      	lsls	r3, r3, #10
 800316e:	b29b      	uxth	r3, r3
 8003170:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003174:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003178:	b29a      	uxth	r2, r3
 800317a:	6a3b      	ldr	r3, [r7, #32]
 800317c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	4413      	add	r3, r2
 8003188:	881b      	ldrh	r3, [r3, #0]
 800318a:	83fb      	strh	r3, [r7, #30]
 800318c:	8bfb      	ldrh	r3, [r7, #30]
 800318e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d01b      	beq.n	80031ce <USB_ActivateEndpoint+0x336>
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	4413      	add	r3, r2
 80031a0:	881b      	ldrh	r3, [r3, #0]
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031ac:	83bb      	strh	r3, [r7, #28]
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	441a      	add	r2, r3
 80031b8:	8bbb      	ldrh	r3, [r7, #28]
 80031ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	4413      	add	r3, r2
 80031d8:	881b      	ldrh	r3, [r3, #0]
 80031da:	b29b      	uxth	r3, r3
 80031dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031e4:	837b      	strh	r3, [r7, #26]
 80031e6:	8b7b      	ldrh	r3, [r7, #26]
 80031e8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80031ec:	837b      	strh	r3, [r7, #26]
 80031ee:	8b7b      	ldrh	r3, [r7, #26]
 80031f0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80031f4:	837b      	strh	r3, [r7, #26]
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	441a      	add	r2, r3
 8003200:	8b7b      	ldrh	r3, [r7, #26]
 8003202:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003206:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800320a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800320e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003212:	b29b      	uxth	r3, r3
 8003214:	8013      	strh	r3, [r2, #0]
 8003216:	e1a2      	b.n	800355e <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	4413      	add	r3, r2
 8003222:	881b      	ldrh	r3, [r3, #0]
 8003224:	b29b      	uxth	r3, r3
 8003226:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800322a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800322e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	441a      	add	r2, r3
 800323c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003240:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003244:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003248:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800324c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003250:	b29b      	uxth	r3, r3
 8003252:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	65bb      	str	r3, [r7, #88]	; 0x58
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800325e:	b29b      	uxth	r3, r3
 8003260:	461a      	mov	r2, r3
 8003262:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003264:	4413      	add	r3, r2
 8003266:	65bb      	str	r3, [r7, #88]	; 0x58
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	011a      	lsls	r2, r3, #4
 800326e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003270:	4413      	add	r3, r2
 8003272:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003276:	657b      	str	r3, [r7, #84]	; 0x54
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	891b      	ldrh	r3, [r3, #8]
 800327c:	085b      	lsrs	r3, r3, #1
 800327e:	b29b      	uxth	r3, r3
 8003280:	005b      	lsls	r3, r3, #1
 8003282:	b29a      	uxth	r2, r3
 8003284:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003286:	801a      	strh	r2, [r3, #0]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	653b      	str	r3, [r7, #80]	; 0x50
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003292:	b29b      	uxth	r3, r3
 8003294:	461a      	mov	r2, r3
 8003296:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003298:	4413      	add	r3, r2
 800329a:	653b      	str	r3, [r7, #80]	; 0x50
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	011a      	lsls	r2, r3, #4
 80032a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032a4:	4413      	add	r3, r2
 80032a6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80032aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	895b      	ldrh	r3, [r3, #10]
 80032b0:	085b      	lsrs	r3, r3, #1
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	005b      	lsls	r3, r3, #1
 80032b6:	b29a      	uxth	r2, r3
 80032b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032ba:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	785b      	ldrb	r3, [r3, #1]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	f040 8091 	bne.w	80033e8 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	4413      	add	r3, r2
 80032d0:	881b      	ldrh	r3, [r3, #0]
 80032d2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80032d4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80032d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d01b      	beq.n	8003316 <USB_ActivateEndpoint+0x47e>
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	4413      	add	r3, r2
 80032e8:	881b      	ldrh	r3, [r3, #0]
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032f4:	877b      	strh	r3, [r7, #58]	; 0x3a
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	441a      	add	r2, r3
 8003300:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003302:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003306:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800330a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800330e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003312:	b29b      	uxth	r3, r3
 8003314:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	4413      	add	r3, r2
 8003320:	881b      	ldrh	r3, [r3, #0]
 8003322:	873b      	strh	r3, [r7, #56]	; 0x38
 8003324:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800332a:	2b00      	cmp	r3, #0
 800332c:	d01b      	beq.n	8003366 <USB_ActivateEndpoint+0x4ce>
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	4413      	add	r3, r2
 8003338:	881b      	ldrh	r3, [r3, #0]
 800333a:	b29b      	uxth	r3, r3
 800333c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003340:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003344:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	441a      	add	r2, r3
 8003350:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003352:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003356:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800335a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800335e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003362:	b29b      	uxth	r3, r3
 8003364:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	4413      	add	r3, r2
 8003370:	881b      	ldrh	r3, [r3, #0]
 8003372:	b29b      	uxth	r3, r3
 8003374:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003378:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800337c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800337e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003380:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003384:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003386:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003388:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800338c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	441a      	add	r2, r3
 8003398:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800339a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800339e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	4413      	add	r3, r2
 80033b8:	881b      	ldrh	r3, [r3, #0]
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033c4:	867b      	strh	r3, [r7, #50]	; 0x32
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	441a      	add	r2, r3
 80033d0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80033d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	8013      	strh	r3, [r2, #0]
 80033e6:	e0ba      	b.n	800355e <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	4413      	add	r3, r2
 80033f2:	881b      	ldrh	r3, [r3, #0]
 80033f4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80033f8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80033fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d01d      	beq.n	8003440 <USB_ActivateEndpoint+0x5a8>
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	4413      	add	r3, r2
 800340e:	881b      	ldrh	r3, [r3, #0]
 8003410:	b29b      	uxth	r3, r3
 8003412:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800341a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	441a      	add	r2, r3
 8003428:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800342c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003430:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003434:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003438:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800343c:	b29b      	uxth	r3, r3
 800343e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	4413      	add	r3, r2
 800344a:	881b      	ldrh	r3, [r3, #0]
 800344c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003450:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003458:	2b00      	cmp	r3, #0
 800345a:	d01d      	beq.n	8003498 <USB_ActivateEndpoint+0x600>
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	4413      	add	r3, r2
 8003466:	881b      	ldrh	r3, [r3, #0]
 8003468:	b29b      	uxth	r3, r3
 800346a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800346e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003472:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	441a      	add	r2, r3
 8003480:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003484:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003488:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800348c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003490:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003494:	b29b      	uxth	r3, r3
 8003496:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	78db      	ldrb	r3, [r3, #3]
 800349c:	2b01      	cmp	r3, #1
 800349e:	d024      	beq.n	80034ea <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	4413      	add	r3, r2
 80034aa:	881b      	ldrh	r3, [r3, #0]
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034b6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80034ba:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80034be:	f083 0320 	eor.w	r3, r3, #32
 80034c2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	441a      	add	r2, r3
 80034d0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80034d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	8013      	strh	r3, [r2, #0]
 80034e8:	e01d      	b.n	8003526 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	4413      	add	r3, r2
 80034f4:	881b      	ldrh	r3, [r3, #0]
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003500:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	441a      	add	r2, r3
 800350e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003512:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003516:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800351a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800351e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003522:	b29b      	uxth	r3, r3
 8003524:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	4413      	add	r3, r2
 8003530:	881b      	ldrh	r3, [r3, #0]
 8003532:	b29b      	uxth	r3, r3
 8003534:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003538:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800353c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	441a      	add	r2, r3
 8003548:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800354a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800354e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003552:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003556:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800355a:	b29b      	uxth	r3, r3
 800355c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800355e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003562:	4618      	mov	r0, r3
 8003564:	376c      	adds	r7, #108	; 0x6c
 8003566:	46bd      	mov	sp, r7
 8003568:	bc80      	pop	{r7}
 800356a:	4770      	bx	lr

0800356c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800356c:	b480      	push	{r7}
 800356e:	b08d      	sub	sp, #52	; 0x34
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	7b1b      	ldrb	r3, [r3, #12]
 800357a:	2b00      	cmp	r3, #0
 800357c:	f040 808e 	bne.w	800369c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	785b      	ldrb	r3, [r3, #1]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d044      	beq.n	8003612 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	4413      	add	r3, r2
 8003592:	881b      	ldrh	r3, [r3, #0]
 8003594:	81bb      	strh	r3, [r7, #12]
 8003596:	89bb      	ldrh	r3, [r7, #12]
 8003598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800359c:	2b00      	cmp	r3, #0
 800359e:	d01b      	beq.n	80035d8 <USB_DeactivateEndpoint+0x6c>
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	4413      	add	r3, r2
 80035aa:	881b      	ldrh	r3, [r3, #0]
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035b6:	817b      	strh	r3, [r7, #10]
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	781b      	ldrb	r3, [r3, #0]
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	441a      	add	r2, r3
 80035c2:	897b      	ldrh	r3, [r7, #10]
 80035c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035d0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	4413      	add	r3, r2
 80035e2:	881b      	ldrh	r3, [r3, #0]
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035ee:	813b      	strh	r3, [r7, #8]
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	441a      	add	r2, r3
 80035fa:	893b      	ldrh	r3, [r7, #8]
 80035fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003600:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003604:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003608:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800360c:	b29b      	uxth	r3, r3
 800360e:	8013      	strh	r3, [r2, #0]
 8003610:	e192      	b.n	8003938 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	4413      	add	r3, r2
 800361c:	881b      	ldrh	r3, [r3, #0]
 800361e:	827b      	strh	r3, [r7, #18]
 8003620:	8a7b      	ldrh	r3, [r7, #18]
 8003622:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d01b      	beq.n	8003662 <USB_DeactivateEndpoint+0xf6>
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	4413      	add	r3, r2
 8003634:	881b      	ldrh	r3, [r3, #0]
 8003636:	b29b      	uxth	r3, r3
 8003638:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800363c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003640:	823b      	strh	r3, [r7, #16]
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	441a      	add	r2, r3
 800364c:	8a3b      	ldrh	r3, [r7, #16]
 800364e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003652:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003656:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800365a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800365e:	b29b      	uxth	r3, r3
 8003660:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	4413      	add	r3, r2
 800366c:	881b      	ldrh	r3, [r3, #0]
 800366e:	b29b      	uxth	r3, r3
 8003670:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003674:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003678:	81fb      	strh	r3, [r7, #14]
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	441a      	add	r2, r3
 8003684:	89fb      	ldrh	r3, [r7, #14]
 8003686:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800368a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800368e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003692:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003696:	b29b      	uxth	r3, r3
 8003698:	8013      	strh	r3, [r2, #0]
 800369a:	e14d      	b.n	8003938 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	785b      	ldrb	r3, [r3, #1]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	f040 80a5 	bne.w	80037f0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	4413      	add	r3, r2
 80036b0:	881b      	ldrh	r3, [r3, #0]
 80036b2:	843b      	strh	r3, [r7, #32]
 80036b4:	8c3b      	ldrh	r3, [r7, #32]
 80036b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d01b      	beq.n	80036f6 <USB_DeactivateEndpoint+0x18a>
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	4413      	add	r3, r2
 80036c8:	881b      	ldrh	r3, [r3, #0]
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036d4:	83fb      	strh	r3, [r7, #30]
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	441a      	add	r2, r3
 80036e0:	8bfb      	ldrh	r3, [r7, #30]
 80036e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80036ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	4413      	add	r3, r2
 8003700:	881b      	ldrh	r3, [r3, #0]
 8003702:	83bb      	strh	r3, [r7, #28]
 8003704:	8bbb      	ldrh	r3, [r7, #28]
 8003706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800370a:	2b00      	cmp	r3, #0
 800370c:	d01b      	beq.n	8003746 <USB_DeactivateEndpoint+0x1da>
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	4413      	add	r3, r2
 8003718:	881b      	ldrh	r3, [r3, #0]
 800371a:	b29b      	uxth	r3, r3
 800371c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003720:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003724:	837b      	strh	r3, [r7, #26]
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	441a      	add	r2, r3
 8003730:	8b7b      	ldrh	r3, [r7, #26]
 8003732:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003736:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800373a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800373e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003742:	b29b      	uxth	r3, r3
 8003744:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	4413      	add	r3, r2
 8003750:	881b      	ldrh	r3, [r3, #0]
 8003752:	b29b      	uxth	r3, r3
 8003754:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003758:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800375c:	833b      	strh	r3, [r7, #24]
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	441a      	add	r2, r3
 8003768:	8b3b      	ldrh	r3, [r7, #24]
 800376a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800376e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003772:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003776:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800377a:	b29b      	uxth	r3, r3
 800377c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	4413      	add	r3, r2
 8003788:	881b      	ldrh	r3, [r3, #0]
 800378a:	b29b      	uxth	r3, r3
 800378c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003790:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003794:	82fb      	strh	r3, [r7, #22]
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	441a      	add	r2, r3
 80037a0:	8afb      	ldrh	r3, [r7, #22]
 80037a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	4413      	add	r3, r2
 80037c0:	881b      	ldrh	r3, [r3, #0]
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037cc:	82bb      	strh	r3, [r7, #20]
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	441a      	add	r2, r3
 80037d8:	8abb      	ldrh	r3, [r7, #20]
 80037da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	8013      	strh	r3, [r2, #0]
 80037ee:	e0a3      	b.n	8003938 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	4413      	add	r3, r2
 80037fa:	881b      	ldrh	r3, [r3, #0]
 80037fc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80037fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003800:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d01b      	beq.n	8003840 <USB_DeactivateEndpoint+0x2d4>
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	4413      	add	r3, r2
 8003812:	881b      	ldrh	r3, [r3, #0]
 8003814:	b29b      	uxth	r3, r3
 8003816:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800381a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800381e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	441a      	add	r2, r3
 800382a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800382c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003830:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003834:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800383c:	b29b      	uxth	r3, r3
 800383e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	4413      	add	r3, r2
 800384a:	881b      	ldrh	r3, [r3, #0]
 800384c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800384e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003854:	2b00      	cmp	r3, #0
 8003856:	d01b      	beq.n	8003890 <USB_DeactivateEndpoint+0x324>
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	4413      	add	r3, r2
 8003862:	881b      	ldrh	r3, [r3, #0]
 8003864:	b29b      	uxth	r3, r3
 8003866:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800386a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800386e:	853b      	strh	r3, [r7, #40]	; 0x28
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	441a      	add	r2, r3
 800387a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800387c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003880:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003884:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003888:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800388c:	b29b      	uxth	r3, r3
 800388e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	4413      	add	r3, r2
 800389a:	881b      	ldrh	r3, [r3, #0]
 800389c:	b29b      	uxth	r3, r3
 800389e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038a6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	441a      	add	r2, r3
 80038b2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80038b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80038c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	4413      	add	r3, r2
 80038d2:	881b      	ldrh	r3, [r3, #0]
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038de:	84bb      	strh	r3, [r7, #36]	; 0x24
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	441a      	add	r2, r3
 80038ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80038ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	4413      	add	r3, r2
 800390a:	881b      	ldrh	r3, [r3, #0]
 800390c:	b29b      	uxth	r3, r3
 800390e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003916:	847b      	strh	r3, [r7, #34]	; 0x22
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	781b      	ldrb	r3, [r3, #0]
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	441a      	add	r2, r3
 8003922:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003924:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003928:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800392c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003934:	b29b      	uxth	r3, r3
 8003936:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3734      	adds	r7, #52	; 0x34
 800393e:	46bd      	mov	sp, r7
 8003940:	bc80      	pop	{r7}
 8003942:	4770      	bx	lr

08003944 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b0cc      	sub	sp, #304	; 0x130
 8003948:	af00      	add	r7, sp, #0
 800394a:	1d3b      	adds	r3, r7, #4
 800394c:	6018      	str	r0, [r3, #0]
 800394e:	463b      	mov	r3, r7
 8003950:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003952:	463b      	mov	r3, r7
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	785b      	ldrb	r3, [r3, #1]
 8003958:	2b01      	cmp	r3, #1
 800395a:	f040 872e 	bne.w	80047ba <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800395e:	463b      	mov	r3, r7
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	699a      	ldr	r2, [r3, #24]
 8003964:	463b      	mov	r3, r7
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	429a      	cmp	r2, r3
 800396c:	d905      	bls.n	800397a <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800396e:	463b      	mov	r3, r7
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	691b      	ldr	r3, [r3, #16]
 8003974:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8003978:	e004      	b.n	8003984 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800397a:	463b      	mov	r3, r7
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	699b      	ldr	r3, [r3, #24]
 8003980:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8003984:	463b      	mov	r3, r7
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	7b1b      	ldrb	r3, [r3, #12]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d134      	bne.n	80039f8 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800398e:	463b      	mov	r3, r7
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	6959      	ldr	r1, [r3, #20]
 8003994:	463b      	mov	r3, r7
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	88da      	ldrh	r2, [r3, #6]
 800399a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800399e:	b29b      	uxth	r3, r3
 80039a0:	1d38      	adds	r0, r7, #4
 80039a2:	6800      	ldr	r0, [r0, #0]
 80039a4:	f001 fc03 	bl	80051ae <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80039a8:	f107 0310 	add.w	r3, r7, #16
 80039ac:	1d3a      	adds	r2, r7, #4
 80039ae:	6812      	ldr	r2, [r2, #0]
 80039b0:	601a      	str	r2, [r3, #0]
 80039b2:	1d3b      	adds	r3, r7, #4
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	4619      	mov	r1, r3
 80039be:	f107 0310 	add.w	r3, r7, #16
 80039c2:	f107 0210 	add.w	r2, r7, #16
 80039c6:	6812      	ldr	r2, [r2, #0]
 80039c8:	440a      	add	r2, r1
 80039ca:	601a      	str	r2, [r3, #0]
 80039cc:	463b      	mov	r3, r7
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	011a      	lsls	r2, r3, #4
 80039d4:	f107 0310 	add.w	r3, r7, #16
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4413      	add	r3, r2
 80039dc:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80039e0:	f107 030c 	add.w	r3, r7, #12
 80039e4:	601a      	str	r2, [r3, #0]
 80039e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80039ea:	b29a      	uxth	r2, r3
 80039ec:	f107 030c 	add.w	r3, r7, #12
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	801a      	strh	r2, [r3, #0]
 80039f4:	f000 beac 	b.w	8004750 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80039f8:	463b      	mov	r3, r7
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	78db      	ldrb	r3, [r3, #3]
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	f040 838c 	bne.w	800411c <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8003a04:	463b      	mov	r3, r7
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	6a1a      	ldr	r2, [r3, #32]
 8003a0a:	463b      	mov	r3, r7
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	691b      	ldr	r3, [r3, #16]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	f240 8330 	bls.w	8004076 <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8003a16:	1d3b      	adds	r3, r7, #4
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	463b      	mov	r3, r7
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	4413      	add	r3, r2
 8003a24:	881b      	ldrh	r3, [r3, #0]
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a30:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8003a34:	1d3b      	adds	r3, r7, #4
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	463b      	mov	r3, r7
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	441a      	add	r2, r3
 8003a42:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003a46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a4e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003a52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8003a5a:	463b      	mov	r3, r7
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	6a1a      	ldr	r2, [r3, #32]
 8003a60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003a64:	1ad2      	subs	r2, r2, r3
 8003a66:	463b      	mov	r3, r7
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003a6c:	1d3b      	adds	r3, r7, #4
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	463b      	mov	r3, r7
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	4413      	add	r3, r2
 8003a7a:	881b      	ldrh	r3, [r3, #0]
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	f000 819e 	beq.w	8003dc4 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003a88:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003a8c:	1d3a      	adds	r2, r7, #4
 8003a8e:	6812      	ldr	r2, [r2, #0]
 8003a90:	601a      	str	r2, [r3, #0]
 8003a92:	463b      	mov	r3, r7
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	785b      	ldrb	r3, [r3, #1]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d17a      	bne.n	8003b92 <USB_EPStartXfer+0x24e>
 8003a9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003aa0:	1d3a      	adds	r2, r7, #4
 8003aa2:	6812      	ldr	r2, [r2, #0]
 8003aa4:	601a      	str	r2, [r3, #0]
 8003aa6:	1d3b      	adds	r3, r7, #4
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ab6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003aba:	6812      	ldr	r2, [r2, #0]
 8003abc:	440a      	add	r2, r1
 8003abe:	601a      	str	r2, [r3, #0]
 8003ac0:	463b      	mov	r3, r7
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	011a      	lsls	r2, r3, #4
 8003ac8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4413      	add	r3, r2
 8003ad0:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8003ad4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ad8:	601a      	str	r2, [r3, #0]
 8003ada:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d11a      	bne.n	8003b18 <USB_EPStartXfer+0x1d4>
 8003ae2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	881b      	ldrh	r3, [r3, #0]
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003af0:	b29a      	uxth	r2, r3
 8003af2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	801a      	strh	r2, [r3, #0]
 8003afa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	881b      	ldrh	r3, [r3, #0]
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b0c:	b29a      	uxth	r2, r3
 8003b0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	801a      	strh	r2, [r3, #0]
 8003b16:	e062      	b.n	8003bde <USB_EPStartXfer+0x29a>
 8003b18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003b1c:	2b3e      	cmp	r3, #62	; 0x3e
 8003b1e:	d819      	bhi.n	8003b54 <USB_EPStartXfer+0x210>
 8003b20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003b24:	085b      	lsrs	r3, r3, #1
 8003b26:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003b2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003b2e:	f003 0301 	and.w	r3, r3, #1
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d004      	beq.n	8003b40 <USB_EPStartXfer+0x1fc>
 8003b36:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003b40:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	029b      	lsls	r3, r3, #10
 8003b48:	b29a      	uxth	r2, r3
 8003b4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	801a      	strh	r2, [r3, #0]
 8003b52:	e044      	b.n	8003bde <USB_EPStartXfer+0x29a>
 8003b54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003b58:	095b      	lsrs	r3, r3, #5
 8003b5a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003b5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003b62:	f003 031f 	and.w	r3, r3, #31
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d104      	bne.n	8003b74 <USB_EPStartXfer+0x230>
 8003b6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003b6e:	3b01      	subs	r3, #1
 8003b70:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003b74:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	029b      	lsls	r3, r3, #10
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b86:	b29a      	uxth	r2, r3
 8003b88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	801a      	strh	r2, [r3, #0]
 8003b90:	e025      	b.n	8003bde <USB_EPStartXfer+0x29a>
 8003b92:	463b      	mov	r3, r7
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	785b      	ldrb	r3, [r3, #1]
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d120      	bne.n	8003bde <USB_EPStartXfer+0x29a>
 8003b9c:	1d3b      	adds	r3, r7, #4
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003bac:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003bb0:	6812      	ldr	r2, [r2, #0]
 8003bb2:	440a      	add	r2, r1
 8003bb4:	601a      	str	r2, [r3, #0]
 8003bb6:	463b      	mov	r3, r7
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	011a      	lsls	r2, r3, #4
 8003bbe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8003bca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003bce:	601a      	str	r2, [r3, #0]
 8003bd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003bd4:	b29a      	uxth	r2, r3
 8003bd6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003bde:	463b      	mov	r3, r7
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	895b      	ldrh	r3, [r3, #10]
 8003be4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003be8:	463b      	mov	r3, r7
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	6959      	ldr	r1, [r3, #20]
 8003bee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8003bf8:	1d38      	adds	r0, r7, #4
 8003bfa:	6800      	ldr	r0, [r0, #0]
 8003bfc:	f001 fad7 	bl	80051ae <USB_WritePMA>
            ep->xfer_buff += len;
 8003c00:	463b      	mov	r3, r7
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	695a      	ldr	r2, [r3, #20]
 8003c06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003c0a:	441a      	add	r2, r3
 8003c0c:	463b      	mov	r3, r7
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003c12:	463b      	mov	r3, r7
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	6a1a      	ldr	r2, [r3, #32]
 8003c18:	463b      	mov	r3, r7
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d909      	bls.n	8003c36 <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 8003c22:	463b      	mov	r3, r7
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	6a1a      	ldr	r2, [r3, #32]
 8003c28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003c2c:	1ad2      	subs	r2, r2, r3
 8003c2e:	463b      	mov	r3, r7
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	621a      	str	r2, [r3, #32]
 8003c34:	e008      	b.n	8003c48 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 8003c36:	463b      	mov	r3, r7
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	6a1b      	ldr	r3, [r3, #32]
 8003c3c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8003c40:	463b      	mov	r3, r7
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2200      	movs	r2, #0
 8003c46:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003c48:	463b      	mov	r3, r7
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	785b      	ldrb	r3, [r3, #1]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d17a      	bne.n	8003d48 <USB_EPStartXfer+0x404>
 8003c52:	f107 0318 	add.w	r3, r7, #24
 8003c56:	1d3a      	adds	r2, r7, #4
 8003c58:	6812      	ldr	r2, [r2, #0]
 8003c5a:	601a      	str	r2, [r3, #0]
 8003c5c:	1d3b      	adds	r3, r7, #4
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	4619      	mov	r1, r3
 8003c68:	f107 0318 	add.w	r3, r7, #24
 8003c6c:	f107 0218 	add.w	r2, r7, #24
 8003c70:	6812      	ldr	r2, [r2, #0]
 8003c72:	440a      	add	r2, r1
 8003c74:	601a      	str	r2, [r3, #0]
 8003c76:	463b      	mov	r3, r7
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	011a      	lsls	r2, r3, #4
 8003c7e:	f107 0318 	add.w	r3, r7, #24
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4413      	add	r3, r2
 8003c86:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8003c8a:	f107 0314 	add.w	r3, r7, #20
 8003c8e:	601a      	str	r2, [r3, #0]
 8003c90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d11a      	bne.n	8003cce <USB_EPStartXfer+0x38a>
 8003c98:	f107 0314 	add.w	r3, r7, #20
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	881b      	ldrh	r3, [r3, #0]
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003ca6:	b29a      	uxth	r2, r3
 8003ca8:	f107 0314 	add.w	r3, r7, #20
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	801a      	strh	r2, [r3, #0]
 8003cb0:	f107 0314 	add.w	r3, r7, #20
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	881b      	ldrh	r3, [r3, #0]
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cc2:	b29a      	uxth	r2, r3
 8003cc4:	f107 0314 	add.w	r3, r7, #20
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	801a      	strh	r2, [r3, #0]
 8003ccc:	e067      	b.n	8003d9e <USB_EPStartXfer+0x45a>
 8003cce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003cd2:	2b3e      	cmp	r3, #62	; 0x3e
 8003cd4:	d819      	bhi.n	8003d0a <USB_EPStartXfer+0x3c6>
 8003cd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003cda:	085b      	lsrs	r3, r3, #1
 8003cdc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003ce0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ce4:	f003 0301 	and.w	r3, r3, #1
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d004      	beq.n	8003cf6 <USB_EPStartXfer+0x3b2>
 8003cec:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003cf6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	029b      	lsls	r3, r3, #10
 8003cfe:	b29a      	uxth	r2, r3
 8003d00:	f107 0314 	add.w	r3, r7, #20
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	801a      	strh	r2, [r3, #0]
 8003d08:	e049      	b.n	8003d9e <USB_EPStartXfer+0x45a>
 8003d0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003d0e:	095b      	lsrs	r3, r3, #5
 8003d10:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003d14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003d18:	f003 031f 	and.w	r3, r3, #31
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d104      	bne.n	8003d2a <USB_EPStartXfer+0x3e6>
 8003d20:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003d24:	3b01      	subs	r3, #1
 8003d26:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003d2a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	029b      	lsls	r3, r3, #10
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d3c:	b29a      	uxth	r2, r3
 8003d3e:	f107 0314 	add.w	r3, r7, #20
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	801a      	strh	r2, [r3, #0]
 8003d46:	e02a      	b.n	8003d9e <USB_EPStartXfer+0x45a>
 8003d48:	463b      	mov	r3, r7
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	785b      	ldrb	r3, [r3, #1]
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d125      	bne.n	8003d9e <USB_EPStartXfer+0x45a>
 8003d52:	f107 0320 	add.w	r3, r7, #32
 8003d56:	1d3a      	adds	r2, r7, #4
 8003d58:	6812      	ldr	r2, [r2, #0]
 8003d5a:	601a      	str	r2, [r3, #0]
 8003d5c:	1d3b      	adds	r3, r7, #4
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	4619      	mov	r1, r3
 8003d68:	f107 0320 	add.w	r3, r7, #32
 8003d6c:	f107 0220 	add.w	r2, r7, #32
 8003d70:	6812      	ldr	r2, [r2, #0]
 8003d72:	440a      	add	r2, r1
 8003d74:	601a      	str	r2, [r3, #0]
 8003d76:	463b      	mov	r3, r7
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	011a      	lsls	r2, r3, #4
 8003d7e:	f107 0320 	add.w	r3, r7, #32
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4413      	add	r3, r2
 8003d86:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8003d8a:	f107 031c 	add.w	r3, r7, #28
 8003d8e:	601a      	str	r2, [r3, #0]
 8003d90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003d94:	b29a      	uxth	r2, r3
 8003d96:	f107 031c 	add.w	r3, r7, #28
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003d9e:	463b      	mov	r3, r7
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	891b      	ldrh	r3, [r3, #8]
 8003da4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003da8:	463b      	mov	r3, r7
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	6959      	ldr	r1, [r3, #20]
 8003dae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8003db8:	1d38      	adds	r0, r7, #4
 8003dba:	6800      	ldr	r0, [r0, #0]
 8003dbc:	f001 f9f7 	bl	80051ae <USB_WritePMA>
 8003dc0:	f000 bcc6 	b.w	8004750 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003dc4:	463b      	mov	r3, r7
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	785b      	ldrb	r3, [r3, #1]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d164      	bne.n	8003e98 <USB_EPStartXfer+0x554>
 8003dce:	1d3b      	adds	r3, r7, #4
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003dd4:	1d3b      	adds	r3, r7, #4
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	461a      	mov	r2, r3
 8003de0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003de2:	4413      	add	r3, r2
 8003de4:	64bb      	str	r3, [r7, #72]	; 0x48
 8003de6:	463b      	mov	r3, r7
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	011a      	lsls	r2, r3, #4
 8003dee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003df0:	4413      	add	r3, r2
 8003df2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003df6:	647b      	str	r3, [r7, #68]	; 0x44
 8003df8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d112      	bne.n	8003e26 <USB_EPStartXfer+0x4e2>
 8003e00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e02:	881b      	ldrh	r3, [r3, #0]
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003e0a:	b29a      	uxth	r2, r3
 8003e0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e0e:	801a      	strh	r2, [r3, #0]
 8003e10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e12:	881b      	ldrh	r3, [r3, #0]
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e22:	801a      	strh	r2, [r3, #0]
 8003e24:	e057      	b.n	8003ed6 <USB_EPStartXfer+0x592>
 8003e26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e2a:	2b3e      	cmp	r3, #62	; 0x3e
 8003e2c:	d817      	bhi.n	8003e5e <USB_EPStartXfer+0x51a>
 8003e2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e32:	085b      	lsrs	r3, r3, #1
 8003e34:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003e38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e3c:	f003 0301 	and.w	r3, r3, #1
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d004      	beq.n	8003e4e <USB_EPStartXfer+0x50a>
 8003e44:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003e48:	3301      	adds	r3, #1
 8003e4a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003e4e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	029b      	lsls	r3, r3, #10
 8003e56:	b29a      	uxth	r2, r3
 8003e58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e5a:	801a      	strh	r2, [r3, #0]
 8003e5c:	e03b      	b.n	8003ed6 <USB_EPStartXfer+0x592>
 8003e5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e62:	095b      	lsrs	r3, r3, #5
 8003e64:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003e68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e6c:	f003 031f 	and.w	r3, r3, #31
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d104      	bne.n	8003e7e <USB_EPStartXfer+0x53a>
 8003e74:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003e7e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	029b      	lsls	r3, r3, #10
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e90:	b29a      	uxth	r2, r3
 8003e92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e94:	801a      	strh	r2, [r3, #0]
 8003e96:	e01e      	b.n	8003ed6 <USB_EPStartXfer+0x592>
 8003e98:	463b      	mov	r3, r7
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	785b      	ldrb	r3, [r3, #1]
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d119      	bne.n	8003ed6 <USB_EPStartXfer+0x592>
 8003ea2:	1d3b      	adds	r3, r7, #4
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	653b      	str	r3, [r7, #80]	; 0x50
 8003ea8:	1d3b      	adds	r3, r7, #4
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003eb6:	4413      	add	r3, r2
 8003eb8:	653b      	str	r3, [r7, #80]	; 0x50
 8003eba:	463b      	mov	r3, r7
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	011a      	lsls	r2, r3, #4
 8003ec2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ec4:	4413      	add	r3, r2
 8003ec6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003eca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ecc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ed0:	b29a      	uxth	r2, r3
 8003ed2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ed4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003ed6:	463b      	mov	r3, r7
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	891b      	ldrh	r3, [r3, #8]
 8003edc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003ee0:	463b      	mov	r3, r7
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	6959      	ldr	r1, [r3, #20]
 8003ee6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8003ef0:	1d38      	adds	r0, r7, #4
 8003ef2:	6800      	ldr	r0, [r0, #0]
 8003ef4:	f001 f95b 	bl	80051ae <USB_WritePMA>
            ep->xfer_buff += len;
 8003ef8:	463b      	mov	r3, r7
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	695a      	ldr	r2, [r3, #20]
 8003efe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f02:	441a      	add	r2, r3
 8003f04:	463b      	mov	r3, r7
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003f0a:	463b      	mov	r3, r7
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	6a1a      	ldr	r2, [r3, #32]
 8003f10:	463b      	mov	r3, r7
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d909      	bls.n	8003f2e <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 8003f1a:	463b      	mov	r3, r7
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	6a1a      	ldr	r2, [r3, #32]
 8003f20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f24:	1ad2      	subs	r2, r2, r3
 8003f26:	463b      	mov	r3, r7
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	621a      	str	r2, [r3, #32]
 8003f2c:	e008      	b.n	8003f40 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8003f2e:	463b      	mov	r3, r7
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	6a1b      	ldr	r3, [r3, #32]
 8003f34:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8003f38:	463b      	mov	r3, r7
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003f40:	1d3b      	adds	r3, r7, #4
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	643b      	str	r3, [r7, #64]	; 0x40
 8003f46:	463b      	mov	r3, r7
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	785b      	ldrb	r3, [r3, #1]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d164      	bne.n	800401a <USB_EPStartXfer+0x6d6>
 8003f50:	1d3b      	adds	r3, r7, #4
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f56:	1d3b      	adds	r3, r7, #4
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	461a      	mov	r2, r3
 8003f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f64:	4413      	add	r3, r2
 8003f66:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f68:	463b      	mov	r3, r7
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	011a      	lsls	r2, r3, #4
 8003f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f72:	4413      	add	r3, r2
 8003f74:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f78:	637b      	str	r3, [r7, #52]	; 0x34
 8003f7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d112      	bne.n	8003fa8 <USB_EPStartXfer+0x664>
 8003f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f84:	881b      	ldrh	r3, [r3, #0]
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003f8c:	b29a      	uxth	r2, r3
 8003f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f90:	801a      	strh	r2, [r3, #0]
 8003f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f94:	881b      	ldrh	r3, [r3, #0]
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fa0:	b29a      	uxth	r2, r3
 8003fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fa4:	801a      	strh	r2, [r3, #0]
 8003fa6:	e054      	b.n	8004052 <USB_EPStartXfer+0x70e>
 8003fa8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003fac:	2b3e      	cmp	r3, #62	; 0x3e
 8003fae:	d817      	bhi.n	8003fe0 <USB_EPStartXfer+0x69c>
 8003fb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003fb4:	085b      	lsrs	r3, r3, #1
 8003fb6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003fba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003fbe:	f003 0301 	and.w	r3, r3, #1
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d004      	beq.n	8003fd0 <USB_EPStartXfer+0x68c>
 8003fc6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003fca:	3301      	adds	r3, #1
 8003fcc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003fd0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	029b      	lsls	r3, r3, #10
 8003fd8:	b29a      	uxth	r2, r3
 8003fda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fdc:	801a      	strh	r2, [r3, #0]
 8003fde:	e038      	b.n	8004052 <USB_EPStartXfer+0x70e>
 8003fe0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003fe4:	095b      	lsrs	r3, r3, #5
 8003fe6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003fea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003fee:	f003 031f 	and.w	r3, r3, #31
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d104      	bne.n	8004000 <USB_EPStartXfer+0x6bc>
 8003ff6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004000:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004004:	b29b      	uxth	r3, r3
 8004006:	029b      	lsls	r3, r3, #10
 8004008:	b29b      	uxth	r3, r3
 800400a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800400e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004012:	b29a      	uxth	r2, r3
 8004014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004016:	801a      	strh	r2, [r3, #0]
 8004018:	e01b      	b.n	8004052 <USB_EPStartXfer+0x70e>
 800401a:	463b      	mov	r3, r7
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	785b      	ldrb	r3, [r3, #1]
 8004020:	2b01      	cmp	r3, #1
 8004022:	d116      	bne.n	8004052 <USB_EPStartXfer+0x70e>
 8004024:	1d3b      	adds	r3, r7, #4
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800402c:	b29b      	uxth	r3, r3
 800402e:	461a      	mov	r2, r3
 8004030:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004032:	4413      	add	r3, r2
 8004034:	643b      	str	r3, [r7, #64]	; 0x40
 8004036:	463b      	mov	r3, r7
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	011a      	lsls	r2, r3, #4
 800403e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004040:	4413      	add	r3, r2
 8004042:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004046:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004048:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800404c:	b29a      	uxth	r2, r3
 800404e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004050:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004052:	463b      	mov	r3, r7
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	895b      	ldrh	r3, [r3, #10]
 8004058:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800405c:	463b      	mov	r3, r7
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	6959      	ldr	r1, [r3, #20]
 8004062:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004066:	b29b      	uxth	r3, r3
 8004068:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800406c:	1d38      	adds	r0, r7, #4
 800406e:	6800      	ldr	r0, [r0, #0]
 8004070:	f001 f89d 	bl	80051ae <USB_WritePMA>
 8004074:	e36c      	b.n	8004750 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004076:	463b      	mov	r3, r7
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	6a1b      	ldr	r3, [r3, #32]
 800407c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8004080:	1d3b      	adds	r3, r7, #4
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	463b      	mov	r3, r7
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	4413      	add	r3, r2
 800408e:	881b      	ldrh	r3, [r3, #0]
 8004090:	b29b      	uxth	r3, r3
 8004092:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800409a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800409e:	1d3b      	adds	r3, r7, #4
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	463b      	mov	r3, r7
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	441a      	add	r2, r3
 80040ac:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80040b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80040c4:	1d3b      	adds	r3, r7, #4
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040ca:	1d3b      	adds	r3, r7, #4
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	461a      	mov	r2, r3
 80040d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040d8:	4413      	add	r3, r2
 80040da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040dc:	463b      	mov	r3, r7
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	011a      	lsls	r2, r3, #4
 80040e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040e6:	4413      	add	r3, r2
 80040e8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80040ec:	65bb      	str	r3, [r7, #88]	; 0x58
 80040ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80040f2:	b29a      	uxth	r2, r3
 80040f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040f6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80040f8:	463b      	mov	r3, r7
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	891b      	ldrh	r3, [r3, #8]
 80040fe:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004102:	463b      	mov	r3, r7
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	6959      	ldr	r1, [r3, #20]
 8004108:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800410c:	b29b      	uxth	r3, r3
 800410e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004112:	1d38      	adds	r0, r7, #4
 8004114:	6800      	ldr	r0, [r0, #0]
 8004116:	f001 f84a 	bl	80051ae <USB_WritePMA>
 800411a:	e319      	b.n	8004750 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 800411c:	1d3b      	adds	r3, r7, #4
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	463b      	mov	r3, r7
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	781b      	ldrb	r3, [r3, #0]
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	4413      	add	r3, r2
 800412a:	881b      	ldrh	r3, [r3, #0]
 800412c:	b29b      	uxth	r3, r3
 800412e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004136:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 800413a:	1d3b      	adds	r3, r7, #4
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	463b      	mov	r3, r7
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	441a      	add	r2, r3
 8004148:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800414c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004150:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004154:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800415c:	b29b      	uxth	r3, r3
 800415e:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8004160:	463b      	mov	r3, r7
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	6a1a      	ldr	r2, [r3, #32]
 8004166:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800416a:	1ad2      	subs	r2, r2, r3
 800416c:	463b      	mov	r3, r7
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004172:	1d3b      	adds	r3, r7, #4
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	463b      	mov	r3, r7
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	4413      	add	r3, r2
 8004180:	881b      	ldrh	r3, [r3, #0]
 8004182:	b29b      	uxth	r3, r3
 8004184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004188:	2b00      	cmp	r3, #0
 800418a:	f000 8162 	beq.w	8004452 <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800418e:	1d3b      	adds	r3, r7, #4
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004196:	463b      	mov	r3, r7
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	785b      	ldrb	r3, [r3, #1]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d164      	bne.n	800426a <USB_EPStartXfer+0x926>
 80041a0:	1d3b      	adds	r3, r7, #4
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	67bb      	str	r3, [r7, #120]	; 0x78
 80041a6:	1d3b      	adds	r3, r7, #4
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	461a      	mov	r2, r3
 80041b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041b4:	4413      	add	r3, r2
 80041b6:	67bb      	str	r3, [r7, #120]	; 0x78
 80041b8:	463b      	mov	r3, r7
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	011a      	lsls	r2, r3, #4
 80041c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041c2:	4413      	add	r3, r2
 80041c4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80041c8:	677b      	str	r3, [r7, #116]	; 0x74
 80041ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d112      	bne.n	80041f8 <USB_EPStartXfer+0x8b4>
 80041d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041d4:	881b      	ldrh	r3, [r3, #0]
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80041dc:	b29a      	uxth	r2, r3
 80041de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041e0:	801a      	strh	r2, [r3, #0]
 80041e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041e4:	881b      	ldrh	r3, [r3, #0]
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041f0:	b29a      	uxth	r2, r3
 80041f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041f4:	801a      	strh	r2, [r3, #0]
 80041f6:	e057      	b.n	80042a8 <USB_EPStartXfer+0x964>
 80041f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80041fc:	2b3e      	cmp	r3, #62	; 0x3e
 80041fe:	d817      	bhi.n	8004230 <USB_EPStartXfer+0x8ec>
 8004200:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004204:	085b      	lsrs	r3, r3, #1
 8004206:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800420a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800420e:	f003 0301 	and.w	r3, r3, #1
 8004212:	2b00      	cmp	r3, #0
 8004214:	d004      	beq.n	8004220 <USB_EPStartXfer+0x8dc>
 8004216:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800421a:	3301      	adds	r3, #1
 800421c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004220:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004224:	b29b      	uxth	r3, r3
 8004226:	029b      	lsls	r3, r3, #10
 8004228:	b29a      	uxth	r2, r3
 800422a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800422c:	801a      	strh	r2, [r3, #0]
 800422e:	e03b      	b.n	80042a8 <USB_EPStartXfer+0x964>
 8004230:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004234:	095b      	lsrs	r3, r3, #5
 8004236:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800423a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800423e:	f003 031f 	and.w	r3, r3, #31
 8004242:	2b00      	cmp	r3, #0
 8004244:	d104      	bne.n	8004250 <USB_EPStartXfer+0x90c>
 8004246:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800424a:	3b01      	subs	r3, #1
 800424c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004250:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004254:	b29b      	uxth	r3, r3
 8004256:	029b      	lsls	r3, r3, #10
 8004258:	b29b      	uxth	r3, r3
 800425a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800425e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004262:	b29a      	uxth	r2, r3
 8004264:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004266:	801a      	strh	r2, [r3, #0]
 8004268:	e01e      	b.n	80042a8 <USB_EPStartXfer+0x964>
 800426a:	463b      	mov	r3, r7
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	785b      	ldrb	r3, [r3, #1]
 8004270:	2b01      	cmp	r3, #1
 8004272:	d119      	bne.n	80042a8 <USB_EPStartXfer+0x964>
 8004274:	1d3b      	adds	r3, r7, #4
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800427c:	b29b      	uxth	r3, r3
 800427e:	461a      	mov	r2, r3
 8004280:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004284:	4413      	add	r3, r2
 8004286:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800428a:	463b      	mov	r3, r7
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	011a      	lsls	r2, r3, #4
 8004292:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004296:	4413      	add	r3, r2
 8004298:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800429c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800429e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80042a2:	b29a      	uxth	r2, r3
 80042a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80042a6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80042a8:	463b      	mov	r3, r7
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	895b      	ldrh	r3, [r3, #10]
 80042ae:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80042b2:	463b      	mov	r3, r7
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	6959      	ldr	r1, [r3, #20]
 80042b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80042bc:	b29b      	uxth	r3, r3
 80042be:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80042c2:	1d38      	adds	r0, r7, #4
 80042c4:	6800      	ldr	r0, [r0, #0]
 80042c6:	f000 ff72 	bl	80051ae <USB_WritePMA>
          ep->xfer_buff += len;
 80042ca:	463b      	mov	r3, r7
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	695a      	ldr	r2, [r3, #20]
 80042d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80042d4:	441a      	add	r2, r3
 80042d6:	463b      	mov	r3, r7
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80042dc:	463b      	mov	r3, r7
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	6a1a      	ldr	r2, [r3, #32]
 80042e2:	463b      	mov	r3, r7
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	691b      	ldr	r3, [r3, #16]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d909      	bls.n	8004300 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 80042ec:	463b      	mov	r3, r7
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	6a1a      	ldr	r2, [r3, #32]
 80042f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80042f6:	1ad2      	subs	r2, r2, r3
 80042f8:	463b      	mov	r3, r7
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	621a      	str	r2, [r3, #32]
 80042fe:	e008      	b.n	8004312 <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8004300:	463b      	mov	r3, r7
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	6a1b      	ldr	r3, [r3, #32]
 8004306:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800430a:	463b      	mov	r3, r7
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2200      	movs	r2, #0
 8004310:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8004312:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004316:	2b00      	cmp	r3, #0
 8004318:	f000 821a 	beq.w	8004750 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800431c:	463b      	mov	r3, r7
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	785b      	ldrb	r3, [r3, #1]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d164      	bne.n	80043f0 <USB_EPStartXfer+0xaac>
 8004326:	1d3b      	adds	r3, r7, #4
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	66bb      	str	r3, [r7, #104]	; 0x68
 800432c:	1d3b      	adds	r3, r7, #4
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004334:	b29b      	uxth	r3, r3
 8004336:	461a      	mov	r2, r3
 8004338:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800433a:	4413      	add	r3, r2
 800433c:	66bb      	str	r3, [r7, #104]	; 0x68
 800433e:	463b      	mov	r3, r7
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	011a      	lsls	r2, r3, #4
 8004346:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004348:	4413      	add	r3, r2
 800434a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800434e:	667b      	str	r3, [r7, #100]	; 0x64
 8004350:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004354:	2b00      	cmp	r3, #0
 8004356:	d112      	bne.n	800437e <USB_EPStartXfer+0xa3a>
 8004358:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800435a:	881b      	ldrh	r3, [r3, #0]
 800435c:	b29b      	uxth	r3, r3
 800435e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004362:	b29a      	uxth	r2, r3
 8004364:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004366:	801a      	strh	r2, [r3, #0]
 8004368:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800436a:	881b      	ldrh	r3, [r3, #0]
 800436c:	b29b      	uxth	r3, r3
 800436e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004372:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004376:	b29a      	uxth	r2, r3
 8004378:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800437a:	801a      	strh	r2, [r3, #0]
 800437c:	e057      	b.n	800442e <USB_EPStartXfer+0xaea>
 800437e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004382:	2b3e      	cmp	r3, #62	; 0x3e
 8004384:	d817      	bhi.n	80043b6 <USB_EPStartXfer+0xa72>
 8004386:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800438a:	085b      	lsrs	r3, r3, #1
 800438c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004390:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004394:	f003 0301 	and.w	r3, r3, #1
 8004398:	2b00      	cmp	r3, #0
 800439a:	d004      	beq.n	80043a6 <USB_EPStartXfer+0xa62>
 800439c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043a0:	3301      	adds	r3, #1
 80043a2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80043a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	029b      	lsls	r3, r3, #10
 80043ae:	b29a      	uxth	r2, r3
 80043b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80043b2:	801a      	strh	r2, [r3, #0]
 80043b4:	e03b      	b.n	800442e <USB_EPStartXfer+0xaea>
 80043b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80043ba:	095b      	lsrs	r3, r3, #5
 80043bc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80043c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80043c4:	f003 031f 	and.w	r3, r3, #31
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d104      	bne.n	80043d6 <USB_EPStartXfer+0xa92>
 80043cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043d0:	3b01      	subs	r3, #1
 80043d2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80043d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043da:	b29b      	uxth	r3, r3
 80043dc:	029b      	lsls	r3, r3, #10
 80043de:	b29b      	uxth	r3, r3
 80043e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043e8:	b29a      	uxth	r2, r3
 80043ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80043ec:	801a      	strh	r2, [r3, #0]
 80043ee:	e01e      	b.n	800442e <USB_EPStartXfer+0xaea>
 80043f0:	463b      	mov	r3, r7
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	785b      	ldrb	r3, [r3, #1]
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d119      	bne.n	800442e <USB_EPStartXfer+0xaea>
 80043fa:	1d3b      	adds	r3, r7, #4
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	673b      	str	r3, [r7, #112]	; 0x70
 8004400:	1d3b      	adds	r3, r7, #4
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004408:	b29b      	uxth	r3, r3
 800440a:	461a      	mov	r2, r3
 800440c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800440e:	4413      	add	r3, r2
 8004410:	673b      	str	r3, [r7, #112]	; 0x70
 8004412:	463b      	mov	r3, r7
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	011a      	lsls	r2, r3, #4
 800441a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800441c:	4413      	add	r3, r2
 800441e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004422:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004424:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004428:	b29a      	uxth	r2, r3
 800442a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800442c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800442e:	463b      	mov	r3, r7
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	891b      	ldrh	r3, [r3, #8]
 8004434:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004438:	463b      	mov	r3, r7
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	6959      	ldr	r1, [r3, #20]
 800443e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004442:	b29b      	uxth	r3, r3
 8004444:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004448:	1d38      	adds	r0, r7, #4
 800444a:	6800      	ldr	r0, [r0, #0]
 800444c:	f000 feaf 	bl	80051ae <USB_WritePMA>
 8004450:	e17e      	b.n	8004750 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004452:	463b      	mov	r3, r7
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	785b      	ldrb	r3, [r3, #1]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d16f      	bne.n	800453c <USB_EPStartXfer+0xbf8>
 800445c:	1d3b      	adds	r3, r7, #4
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004464:	1d3b      	adds	r3, r7, #4
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800446c:	b29b      	uxth	r3, r3
 800446e:	461a      	mov	r2, r3
 8004470:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004474:	4413      	add	r3, r2
 8004476:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800447a:	463b      	mov	r3, r7
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	011a      	lsls	r2, r3, #4
 8004482:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004486:	4413      	add	r3, r2
 8004488:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800448c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004490:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004494:	2b00      	cmp	r3, #0
 8004496:	d116      	bne.n	80044c6 <USB_EPStartXfer+0xb82>
 8004498:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800449c:	881b      	ldrh	r3, [r3, #0]
 800449e:	b29b      	uxth	r3, r3
 80044a0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80044a4:	b29a      	uxth	r2, r3
 80044a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80044aa:	801a      	strh	r2, [r3, #0]
 80044ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80044b0:	881b      	ldrh	r3, [r3, #0]
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044bc:	b29a      	uxth	r2, r3
 80044be:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80044c2:	801a      	strh	r2, [r3, #0]
 80044c4:	e05f      	b.n	8004586 <USB_EPStartXfer+0xc42>
 80044c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044ca:	2b3e      	cmp	r3, #62	; 0x3e
 80044cc:	d818      	bhi.n	8004500 <USB_EPStartXfer+0xbbc>
 80044ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044d2:	085b      	lsrs	r3, r3, #1
 80044d4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80044d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044dc:	f003 0301 	and.w	r3, r3, #1
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d004      	beq.n	80044ee <USB_EPStartXfer+0xbaa>
 80044e4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80044e8:	3301      	adds	r3, #1
 80044ea:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80044ee:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	029b      	lsls	r3, r3, #10
 80044f6:	b29a      	uxth	r2, r3
 80044f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80044fc:	801a      	strh	r2, [r3, #0]
 80044fe:	e042      	b.n	8004586 <USB_EPStartXfer+0xc42>
 8004500:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004504:	095b      	lsrs	r3, r3, #5
 8004506:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800450a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800450e:	f003 031f 	and.w	r3, r3, #31
 8004512:	2b00      	cmp	r3, #0
 8004514:	d104      	bne.n	8004520 <USB_EPStartXfer+0xbdc>
 8004516:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800451a:	3b01      	subs	r3, #1
 800451c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004520:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004524:	b29b      	uxth	r3, r3
 8004526:	029b      	lsls	r3, r3, #10
 8004528:	b29b      	uxth	r3, r3
 800452a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800452e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004532:	b29a      	uxth	r2, r3
 8004534:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004538:	801a      	strh	r2, [r3, #0]
 800453a:	e024      	b.n	8004586 <USB_EPStartXfer+0xc42>
 800453c:	463b      	mov	r3, r7
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	785b      	ldrb	r3, [r3, #1]
 8004542:	2b01      	cmp	r3, #1
 8004544:	d11f      	bne.n	8004586 <USB_EPStartXfer+0xc42>
 8004546:	1d3b      	adds	r3, r7, #4
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800454e:	1d3b      	adds	r3, r7, #4
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004556:	b29b      	uxth	r3, r3
 8004558:	461a      	mov	r2, r3
 800455a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800455e:	4413      	add	r3, r2
 8004560:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004564:	463b      	mov	r3, r7
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	011a      	lsls	r2, r3, #4
 800456c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004570:	4413      	add	r3, r2
 8004572:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004576:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800457a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800457e:	b29a      	uxth	r2, r3
 8004580:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004584:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004586:	463b      	mov	r3, r7
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	891b      	ldrh	r3, [r3, #8]
 800458c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004590:	463b      	mov	r3, r7
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	6959      	ldr	r1, [r3, #20]
 8004596:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800459a:	b29b      	uxth	r3, r3
 800459c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80045a0:	1d38      	adds	r0, r7, #4
 80045a2:	6800      	ldr	r0, [r0, #0]
 80045a4:	f000 fe03 	bl	80051ae <USB_WritePMA>
          ep->xfer_buff += len;
 80045a8:	463b      	mov	r3, r7
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	695a      	ldr	r2, [r3, #20]
 80045ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80045b2:	441a      	add	r2, r3
 80045b4:	463b      	mov	r3, r7
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80045ba:	463b      	mov	r3, r7
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	6a1a      	ldr	r2, [r3, #32]
 80045c0:	463b      	mov	r3, r7
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d909      	bls.n	80045de <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 80045ca:	463b      	mov	r3, r7
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	6a1a      	ldr	r2, [r3, #32]
 80045d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80045d4:	1ad2      	subs	r2, r2, r3
 80045d6:	463b      	mov	r3, r7
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	621a      	str	r2, [r3, #32]
 80045dc:	e008      	b.n	80045f0 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 80045de:	463b      	mov	r3, r7
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	6a1b      	ldr	r3, [r3, #32]
 80045e4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80045e8:	463b      	mov	r3, r7
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2200      	movs	r2, #0
 80045ee:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80045f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	f000 80ab 	beq.w	8004750 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80045fa:	1d3b      	adds	r3, r7, #4
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004602:	463b      	mov	r3, r7
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	785b      	ldrb	r3, [r3, #1]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d16f      	bne.n	80046ec <USB_EPStartXfer+0xda8>
 800460c:	1d3b      	adds	r3, r7, #4
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004614:	1d3b      	adds	r3, r7, #4
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800461c:	b29b      	uxth	r3, r3
 800461e:	461a      	mov	r2, r3
 8004620:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004624:	4413      	add	r3, r2
 8004626:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800462a:	463b      	mov	r3, r7
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	011a      	lsls	r2, r3, #4
 8004632:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004636:	4413      	add	r3, r2
 8004638:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800463c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004640:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004644:	2b00      	cmp	r3, #0
 8004646:	d116      	bne.n	8004676 <USB_EPStartXfer+0xd32>
 8004648:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800464c:	881b      	ldrh	r3, [r3, #0]
 800464e:	b29b      	uxth	r3, r3
 8004650:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004654:	b29a      	uxth	r2, r3
 8004656:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800465a:	801a      	strh	r2, [r3, #0]
 800465c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004660:	881b      	ldrh	r3, [r3, #0]
 8004662:	b29b      	uxth	r3, r3
 8004664:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004668:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800466c:	b29a      	uxth	r2, r3
 800466e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004672:	801a      	strh	r2, [r3, #0]
 8004674:	e05b      	b.n	800472e <USB_EPStartXfer+0xdea>
 8004676:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800467a:	2b3e      	cmp	r3, #62	; 0x3e
 800467c:	d818      	bhi.n	80046b0 <USB_EPStartXfer+0xd6c>
 800467e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004682:	085b      	lsrs	r3, r3, #1
 8004684:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004688:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800468c:	f003 0301 	and.w	r3, r3, #1
 8004690:	2b00      	cmp	r3, #0
 8004692:	d004      	beq.n	800469e <USB_EPStartXfer+0xd5a>
 8004694:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004698:	3301      	adds	r3, #1
 800469a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800469e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	029b      	lsls	r3, r3, #10
 80046a6:	b29a      	uxth	r2, r3
 80046a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80046ac:	801a      	strh	r2, [r3, #0]
 80046ae:	e03e      	b.n	800472e <USB_EPStartXfer+0xdea>
 80046b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80046b4:	095b      	lsrs	r3, r3, #5
 80046b6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80046ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80046be:	f003 031f 	and.w	r3, r3, #31
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d104      	bne.n	80046d0 <USB_EPStartXfer+0xd8c>
 80046c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046ca:	3b01      	subs	r3, #1
 80046cc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80046d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	029b      	lsls	r3, r3, #10
 80046d8:	b29b      	uxth	r3, r3
 80046da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046e2:	b29a      	uxth	r2, r3
 80046e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80046e8:	801a      	strh	r2, [r3, #0]
 80046ea:	e020      	b.n	800472e <USB_EPStartXfer+0xdea>
 80046ec:	463b      	mov	r3, r7
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	785b      	ldrb	r3, [r3, #1]
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d11b      	bne.n	800472e <USB_EPStartXfer+0xdea>
 80046f6:	1d3b      	adds	r3, r7, #4
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046fe:	b29b      	uxth	r3, r3
 8004700:	461a      	mov	r2, r3
 8004702:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004706:	4413      	add	r3, r2
 8004708:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800470c:	463b      	mov	r3, r7
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	011a      	lsls	r2, r3, #4
 8004714:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004718:	4413      	add	r3, r2
 800471a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800471e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004722:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004726:	b29a      	uxth	r2, r3
 8004728:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800472c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800472e:	463b      	mov	r3, r7
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	895b      	ldrh	r3, [r3, #10]
 8004734:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004738:	463b      	mov	r3, r7
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	6959      	ldr	r1, [r3, #20]
 800473e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004742:	b29b      	uxth	r3, r3
 8004744:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004748:	1d38      	adds	r0, r7, #4
 800474a:	6800      	ldr	r0, [r0, #0]
 800474c:	f000 fd2f 	bl	80051ae <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004750:	1d3b      	adds	r3, r7, #4
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	463b      	mov	r3, r7
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	4413      	add	r3, r2
 800475e:	881b      	ldrh	r3, [r3, #0]
 8004760:	b29b      	uxth	r3, r3
 8004762:	f107 020a 	add.w	r2, r7, #10
 8004766:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800476a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800476e:	8013      	strh	r3, [r2, #0]
 8004770:	f107 030a 	add.w	r3, r7, #10
 8004774:	f107 020a 	add.w	r2, r7, #10
 8004778:	8812      	ldrh	r2, [r2, #0]
 800477a:	f082 0210 	eor.w	r2, r2, #16
 800477e:	801a      	strh	r2, [r3, #0]
 8004780:	f107 030a 	add.w	r3, r7, #10
 8004784:	f107 020a 	add.w	r2, r7, #10
 8004788:	8812      	ldrh	r2, [r2, #0]
 800478a:	f082 0220 	eor.w	r2, r2, #32
 800478e:	801a      	strh	r2, [r3, #0]
 8004790:	1d3b      	adds	r3, r7, #4
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	463b      	mov	r3, r7
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	781b      	ldrb	r3, [r3, #0]
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	441a      	add	r2, r3
 800479e:	f107 030a 	add.w	r3, r7, #10
 80047a2:	881b      	ldrh	r3, [r3, #0]
 80047a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	8013      	strh	r3, [r2, #0]
 80047b8:	e3b5      	b.n	8004f26 <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80047ba:	463b      	mov	r3, r7
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	7b1b      	ldrb	r3, [r3, #12]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	f040 8090 	bne.w	80048e6 <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80047c6:	463b      	mov	r3, r7
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	699a      	ldr	r2, [r3, #24]
 80047cc:	463b      	mov	r3, r7
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d90e      	bls.n	80047f4 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 80047d6:	463b      	mov	r3, r7
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	691b      	ldr	r3, [r3, #16]
 80047dc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80047e0:	463b      	mov	r3, r7
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	699a      	ldr	r2, [r3, #24]
 80047e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80047ea:	1ad2      	subs	r2, r2, r3
 80047ec:	463b      	mov	r3, r7
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	619a      	str	r2, [r3, #24]
 80047f2:	e008      	b.n	8004806 <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 80047f4:	463b      	mov	r3, r7
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	699b      	ldr	r3, [r3, #24]
 80047fa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80047fe:	463b      	mov	r3, r7
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2200      	movs	r2, #0
 8004804:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004806:	1d3b      	adds	r3, r7, #4
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800480e:	1d3b      	adds	r3, r7, #4
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004816:	b29b      	uxth	r3, r3
 8004818:	461a      	mov	r2, r3
 800481a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800481e:	4413      	add	r3, r2
 8004820:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004824:	463b      	mov	r3, r7
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	011a      	lsls	r2, r3, #4
 800482c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004830:	4413      	add	r3, r2
 8004832:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004836:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800483a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800483e:	2b00      	cmp	r3, #0
 8004840:	d116      	bne.n	8004870 <USB_EPStartXfer+0xf2c>
 8004842:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004846:	881b      	ldrh	r3, [r3, #0]
 8004848:	b29b      	uxth	r3, r3
 800484a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800484e:	b29a      	uxth	r2, r3
 8004850:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004854:	801a      	strh	r2, [r3, #0]
 8004856:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800485a:	881b      	ldrh	r3, [r3, #0]
 800485c:	b29b      	uxth	r3, r3
 800485e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004862:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004866:	b29a      	uxth	r2, r3
 8004868:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800486c:	801a      	strh	r2, [r3, #0]
 800486e:	e32c      	b.n	8004eca <USB_EPStartXfer+0x1586>
 8004870:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004874:	2b3e      	cmp	r3, #62	; 0x3e
 8004876:	d818      	bhi.n	80048aa <USB_EPStartXfer+0xf66>
 8004878:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800487c:	085b      	lsrs	r3, r3, #1
 800487e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004882:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004886:	f003 0301 	and.w	r3, r3, #1
 800488a:	2b00      	cmp	r3, #0
 800488c:	d004      	beq.n	8004898 <USB_EPStartXfer+0xf54>
 800488e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004892:	3301      	adds	r3, #1
 8004894:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004898:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800489c:	b29b      	uxth	r3, r3
 800489e:	029b      	lsls	r3, r3, #10
 80048a0:	b29a      	uxth	r2, r3
 80048a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80048a6:	801a      	strh	r2, [r3, #0]
 80048a8:	e30f      	b.n	8004eca <USB_EPStartXfer+0x1586>
 80048aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048ae:	095b      	lsrs	r3, r3, #5
 80048b0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80048b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048b8:	f003 031f 	and.w	r3, r3, #31
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d104      	bne.n	80048ca <USB_EPStartXfer+0xf86>
 80048c0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80048c4:	3b01      	subs	r3, #1
 80048c6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80048ca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	029b      	lsls	r3, r3, #10
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048dc:	b29a      	uxth	r2, r3
 80048de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80048e2:	801a      	strh	r2, [r3, #0]
 80048e4:	e2f1      	b.n	8004eca <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80048e6:	463b      	mov	r3, r7
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	78db      	ldrb	r3, [r3, #3]
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	f040 818f 	bne.w	8004c10 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80048f2:	463b      	mov	r3, r7
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	785b      	ldrb	r3, [r3, #1]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d175      	bne.n	80049e8 <USB_EPStartXfer+0x10a4>
 80048fc:	1d3b      	adds	r3, r7, #4
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004904:	1d3b      	adds	r3, r7, #4
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800490c:	b29b      	uxth	r3, r3
 800490e:	461a      	mov	r2, r3
 8004910:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004914:	4413      	add	r3, r2
 8004916:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800491a:	463b      	mov	r3, r7
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	011a      	lsls	r2, r3, #4
 8004922:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004926:	4413      	add	r3, r2
 8004928:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800492c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004930:	463b      	mov	r3, r7
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d116      	bne.n	8004968 <USB_EPStartXfer+0x1024>
 800493a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800493e:	881b      	ldrh	r3, [r3, #0]
 8004940:	b29b      	uxth	r3, r3
 8004942:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004946:	b29a      	uxth	r2, r3
 8004948:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800494c:	801a      	strh	r2, [r3, #0]
 800494e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004952:	881b      	ldrh	r3, [r3, #0]
 8004954:	b29b      	uxth	r3, r3
 8004956:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800495a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800495e:	b29a      	uxth	r2, r3
 8004960:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004964:	801a      	strh	r2, [r3, #0]
 8004966:	e065      	b.n	8004a34 <USB_EPStartXfer+0x10f0>
 8004968:	463b      	mov	r3, r7
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	691b      	ldr	r3, [r3, #16]
 800496e:	2b3e      	cmp	r3, #62	; 0x3e
 8004970:	d81a      	bhi.n	80049a8 <USB_EPStartXfer+0x1064>
 8004972:	463b      	mov	r3, r7
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	691b      	ldr	r3, [r3, #16]
 8004978:	085b      	lsrs	r3, r3, #1
 800497a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800497e:	463b      	mov	r3, r7
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	691b      	ldr	r3, [r3, #16]
 8004984:	f003 0301 	and.w	r3, r3, #1
 8004988:	2b00      	cmp	r3, #0
 800498a:	d004      	beq.n	8004996 <USB_EPStartXfer+0x1052>
 800498c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004990:	3301      	adds	r3, #1
 8004992:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004996:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800499a:	b29b      	uxth	r3, r3
 800499c:	029b      	lsls	r3, r3, #10
 800499e:	b29a      	uxth	r2, r3
 80049a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80049a4:	801a      	strh	r2, [r3, #0]
 80049a6:	e045      	b.n	8004a34 <USB_EPStartXfer+0x10f0>
 80049a8:	463b      	mov	r3, r7
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	095b      	lsrs	r3, r3, #5
 80049b0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80049b4:	463b      	mov	r3, r7
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	691b      	ldr	r3, [r3, #16]
 80049ba:	f003 031f 	and.w	r3, r3, #31
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d104      	bne.n	80049cc <USB_EPStartXfer+0x1088>
 80049c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049c6:	3b01      	subs	r3, #1
 80049c8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80049cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	029b      	lsls	r3, r3, #10
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049de:	b29a      	uxth	r2, r3
 80049e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80049e4:	801a      	strh	r2, [r3, #0]
 80049e6:	e025      	b.n	8004a34 <USB_EPStartXfer+0x10f0>
 80049e8:	463b      	mov	r3, r7
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	785b      	ldrb	r3, [r3, #1]
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d120      	bne.n	8004a34 <USB_EPStartXfer+0x10f0>
 80049f2:	1d3b      	adds	r3, r7, #4
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80049fa:	1d3b      	adds	r3, r7, #4
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	461a      	mov	r2, r3
 8004a06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a0a:	4413      	add	r3, r2
 8004a0c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004a10:	463b      	mov	r3, r7
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	011a      	lsls	r2, r3, #4
 8004a18:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a1c:	4413      	add	r3, r2
 8004a1e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004a22:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a26:	463b      	mov	r3, r7
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	691b      	ldr	r3, [r3, #16]
 8004a2c:	b29a      	uxth	r2, r3
 8004a2e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004a32:	801a      	strh	r2, [r3, #0]
 8004a34:	1d3b      	adds	r3, r7, #4
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004a3c:	463b      	mov	r3, r7
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	785b      	ldrb	r3, [r3, #1]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d175      	bne.n	8004b32 <USB_EPStartXfer+0x11ee>
 8004a46:	1d3b      	adds	r3, r7, #4
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004a4e:	1d3b      	adds	r3, r7, #4
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	461a      	mov	r2, r3
 8004a5a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004a5e:	4413      	add	r3, r2
 8004a60:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004a64:	463b      	mov	r3, r7
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	781b      	ldrb	r3, [r3, #0]
 8004a6a:	011a      	lsls	r2, r3, #4
 8004a6c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004a70:	4413      	add	r3, r2
 8004a72:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004a76:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a7a:	463b      	mov	r3, r7
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	691b      	ldr	r3, [r3, #16]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d116      	bne.n	8004ab2 <USB_EPStartXfer+0x116e>
 8004a84:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004a88:	881b      	ldrh	r3, [r3, #0]
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004a90:	b29a      	uxth	r2, r3
 8004a92:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004a96:	801a      	strh	r2, [r3, #0]
 8004a98:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004a9c:	881b      	ldrh	r3, [r3, #0]
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004aa4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004aa8:	b29a      	uxth	r2, r3
 8004aaa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004aae:	801a      	strh	r2, [r3, #0]
 8004ab0:	e061      	b.n	8004b76 <USB_EPStartXfer+0x1232>
 8004ab2:	463b      	mov	r3, r7
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	691b      	ldr	r3, [r3, #16]
 8004ab8:	2b3e      	cmp	r3, #62	; 0x3e
 8004aba:	d81a      	bhi.n	8004af2 <USB_EPStartXfer+0x11ae>
 8004abc:	463b      	mov	r3, r7
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	085b      	lsrs	r3, r3, #1
 8004ac4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004ac8:	463b      	mov	r3, r7
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	691b      	ldr	r3, [r3, #16]
 8004ace:	f003 0301 	and.w	r3, r3, #1
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d004      	beq.n	8004ae0 <USB_EPStartXfer+0x119c>
 8004ad6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004ada:	3301      	adds	r3, #1
 8004adc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004ae0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	029b      	lsls	r3, r3, #10
 8004ae8:	b29a      	uxth	r2, r3
 8004aea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004aee:	801a      	strh	r2, [r3, #0]
 8004af0:	e041      	b.n	8004b76 <USB_EPStartXfer+0x1232>
 8004af2:	463b      	mov	r3, r7
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	691b      	ldr	r3, [r3, #16]
 8004af8:	095b      	lsrs	r3, r3, #5
 8004afa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004afe:	463b      	mov	r3, r7
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	691b      	ldr	r3, [r3, #16]
 8004b04:	f003 031f 	and.w	r3, r3, #31
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d104      	bne.n	8004b16 <USB_EPStartXfer+0x11d2>
 8004b0c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004b10:	3b01      	subs	r3, #1
 8004b12:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004b16:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	029b      	lsls	r3, r3, #10
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b28:	b29a      	uxth	r2, r3
 8004b2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004b2e:	801a      	strh	r2, [r3, #0]
 8004b30:	e021      	b.n	8004b76 <USB_EPStartXfer+0x1232>
 8004b32:	463b      	mov	r3, r7
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	785b      	ldrb	r3, [r3, #1]
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d11c      	bne.n	8004b76 <USB_EPStartXfer+0x1232>
 8004b3c:	1d3b      	adds	r3, r7, #4
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	461a      	mov	r2, r3
 8004b48:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004b4c:	4413      	add	r3, r2
 8004b4e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004b52:	463b      	mov	r3, r7
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	011a      	lsls	r2, r3, #4
 8004b5a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004b5e:	4413      	add	r3, r2
 8004b60:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004b64:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b68:	463b      	mov	r3, r7
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	691b      	ldr	r3, [r3, #16]
 8004b6e:	b29a      	uxth	r2, r3
 8004b70:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004b74:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8004b76:	463b      	mov	r3, r7
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	69db      	ldr	r3, [r3, #28]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	f000 81a4 	beq.w	8004eca <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8004b82:	1d3b      	adds	r3, r7, #4
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	463b      	mov	r3, r7
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	4413      	add	r3, r2
 8004b90:	881b      	ldrh	r3, [r3, #0]
 8004b92:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004b96:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8004b9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d005      	beq.n	8004bae <USB_EPStartXfer+0x126a>
 8004ba2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8004ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d10d      	bne.n	8004bca <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004bae:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8004bb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	f040 8187 	bne.w	8004eca <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004bbc:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8004bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	f040 8180 	bne.w	8004eca <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8004bca:	1d3b      	adds	r3, r7, #4
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	463b      	mov	r3, r7
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	4413      	add	r3, r2
 8004bd8:	881b      	ldrh	r3, [r3, #0]
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004be0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004be4:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8004be8:	1d3b      	adds	r3, r7, #4
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	463b      	mov	r3, r7
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	441a      	add	r2, r3
 8004bf6:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8004bfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c06:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	8013      	strh	r3, [r2, #0]
 8004c0e:	e15c      	b.n	8004eca <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8004c10:	463b      	mov	r3, r7
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	78db      	ldrb	r3, [r3, #3]
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	f040 8155 	bne.w	8004ec6 <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8004c1c:	463b      	mov	r3, r7
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	699a      	ldr	r2, [r3, #24]
 8004c22:	463b      	mov	r3, r7
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	691b      	ldr	r3, [r3, #16]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d90e      	bls.n	8004c4a <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8004c2c:	463b      	mov	r3, r7
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8004c36:	463b      	mov	r3, r7
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	699a      	ldr	r2, [r3, #24]
 8004c3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c40:	1ad2      	subs	r2, r2, r3
 8004c42:	463b      	mov	r3, r7
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	619a      	str	r2, [r3, #24]
 8004c48:	e008      	b.n	8004c5c <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 8004c4a:	463b      	mov	r3, r7
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	699b      	ldr	r3, [r3, #24]
 8004c50:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8004c54:	463b      	mov	r3, r7
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004c5c:	463b      	mov	r3, r7
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	785b      	ldrb	r3, [r3, #1]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d16f      	bne.n	8004d46 <USB_EPStartXfer+0x1402>
 8004c66:	1d3b      	adds	r3, r7, #4
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004c6e:	1d3b      	adds	r3, r7, #4
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	461a      	mov	r2, r3
 8004c7a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004c7e:	4413      	add	r3, r2
 8004c80:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004c84:	463b      	mov	r3, r7
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	011a      	lsls	r2, r3, #4
 8004c8c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004c90:	4413      	add	r3, r2
 8004c92:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004c96:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004c9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d116      	bne.n	8004cd0 <USB_EPStartXfer+0x138c>
 8004ca2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004ca6:	881b      	ldrh	r3, [r3, #0]
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004cae:	b29a      	uxth	r2, r3
 8004cb0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004cb4:	801a      	strh	r2, [r3, #0]
 8004cb6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004cba:	881b      	ldrh	r3, [r3, #0]
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cc6:	b29a      	uxth	r2, r3
 8004cc8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004ccc:	801a      	strh	r2, [r3, #0]
 8004cce:	e05f      	b.n	8004d90 <USB_EPStartXfer+0x144c>
 8004cd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cd4:	2b3e      	cmp	r3, #62	; 0x3e
 8004cd6:	d818      	bhi.n	8004d0a <USB_EPStartXfer+0x13c6>
 8004cd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cdc:	085b      	lsrs	r3, r3, #1
 8004cde:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004ce2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ce6:	f003 0301 	and.w	r3, r3, #1
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d004      	beq.n	8004cf8 <USB_EPStartXfer+0x13b4>
 8004cee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004cf8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	029b      	lsls	r3, r3, #10
 8004d00:	b29a      	uxth	r2, r3
 8004d02:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004d06:	801a      	strh	r2, [r3, #0]
 8004d08:	e042      	b.n	8004d90 <USB_EPStartXfer+0x144c>
 8004d0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d0e:	095b      	lsrs	r3, r3, #5
 8004d10:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004d14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d18:	f003 031f 	and.w	r3, r3, #31
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d104      	bne.n	8004d2a <USB_EPStartXfer+0x13e6>
 8004d20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d24:	3b01      	subs	r3, #1
 8004d26:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004d2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	029b      	lsls	r3, r3, #10
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d3c:	b29a      	uxth	r2, r3
 8004d3e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004d42:	801a      	strh	r2, [r3, #0]
 8004d44:	e024      	b.n	8004d90 <USB_EPStartXfer+0x144c>
 8004d46:	463b      	mov	r3, r7
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	785b      	ldrb	r3, [r3, #1]
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d11f      	bne.n	8004d90 <USB_EPStartXfer+0x144c>
 8004d50:	1d3b      	adds	r3, r7, #4
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004d58:	1d3b      	adds	r3, r7, #4
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	461a      	mov	r2, r3
 8004d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d68:	4413      	add	r3, r2
 8004d6a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004d6e:	463b      	mov	r3, r7
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	011a      	lsls	r2, r3, #4
 8004d76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d7a:	4413      	add	r3, r2
 8004d7c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004d80:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004d84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d88:	b29a      	uxth	r2, r3
 8004d8a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004d8e:	801a      	strh	r2, [r3, #0]
 8004d90:	1d3b      	adds	r3, r7, #4
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004d98:	463b      	mov	r3, r7
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	785b      	ldrb	r3, [r3, #1]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d16f      	bne.n	8004e82 <USB_EPStartXfer+0x153e>
 8004da2:	1d3b      	adds	r3, r7, #4
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004daa:	1d3b      	adds	r3, r7, #4
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	461a      	mov	r2, r3
 8004db6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004dba:	4413      	add	r3, r2
 8004dbc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004dc0:	463b      	mov	r3, r7
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	011a      	lsls	r2, r3, #4
 8004dc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004dcc:	4413      	add	r3, r2
 8004dce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004dd2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004dd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d116      	bne.n	8004e0c <USB_EPStartXfer+0x14c8>
 8004dde:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004de2:	881b      	ldrh	r3, [r3, #0]
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004dea:	b29a      	uxth	r2, r3
 8004dec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004df0:	801a      	strh	r2, [r3, #0]
 8004df2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004df6:	881b      	ldrh	r3, [r3, #0]
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dfe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e02:	b29a      	uxth	r2, r3
 8004e04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004e08:	801a      	strh	r2, [r3, #0]
 8004e0a:	e05e      	b.n	8004eca <USB_EPStartXfer+0x1586>
 8004e0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e10:	2b3e      	cmp	r3, #62	; 0x3e
 8004e12:	d818      	bhi.n	8004e46 <USB_EPStartXfer+0x1502>
 8004e14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e18:	085b      	lsrs	r3, r3, #1
 8004e1a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004e1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e22:	f003 0301 	and.w	r3, r3, #1
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d004      	beq.n	8004e34 <USB_EPStartXfer+0x14f0>
 8004e2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004e2e:	3301      	adds	r3, #1
 8004e30:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004e34:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	029b      	lsls	r3, r3, #10
 8004e3c:	b29a      	uxth	r2, r3
 8004e3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004e42:	801a      	strh	r2, [r3, #0]
 8004e44:	e041      	b.n	8004eca <USB_EPStartXfer+0x1586>
 8004e46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e4a:	095b      	lsrs	r3, r3, #5
 8004e4c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004e50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e54:	f003 031f 	and.w	r3, r3, #31
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d104      	bne.n	8004e66 <USB_EPStartXfer+0x1522>
 8004e5c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004e60:	3b01      	subs	r3, #1
 8004e62:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004e66:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	029b      	lsls	r3, r3, #10
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e78:	b29a      	uxth	r2, r3
 8004e7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004e7e:	801a      	strh	r2, [r3, #0]
 8004e80:	e023      	b.n	8004eca <USB_EPStartXfer+0x1586>
 8004e82:	463b      	mov	r3, r7
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	785b      	ldrb	r3, [r3, #1]
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d11e      	bne.n	8004eca <USB_EPStartXfer+0x1586>
 8004e8c:	1d3b      	adds	r3, r7, #4
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	461a      	mov	r2, r3
 8004e98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e9c:	4413      	add	r3, r2
 8004e9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004ea2:	463b      	mov	r3, r7
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	011a      	lsls	r2, r3, #4
 8004eaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004eae:	4413      	add	r3, r2
 8004eb0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004eb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004eb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ebc:	b29a      	uxth	r2, r3
 8004ebe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ec2:	801a      	strh	r2, [r3, #0]
 8004ec4:	e001      	b.n	8004eca <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e02e      	b.n	8004f28 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004eca:	1d3b      	adds	r3, r7, #4
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	463b      	mov	r3, r7
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	4413      	add	r3, r2
 8004ed8:	881b      	ldrh	r3, [r3, #0]
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ee0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ee4:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8004ee8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8004eec:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004ef0:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8004ef4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8004ef8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004efc:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8004f00:	1d3b      	adds	r3, r7, #4
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	463b      	mov	r3, r7
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	441a      	add	r2, r3
 8004f0e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8004f12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004f26:	2300      	movs	r3, #0
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}

08004f32 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004f32:	b480      	push	{r7}
 8004f34:	b085      	sub	sp, #20
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	6078      	str	r0, [r7, #4]
 8004f3a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	785b      	ldrb	r3, [r3, #1]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d020      	beq.n	8004f86 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	4413      	add	r3, r2
 8004f4e:	881b      	ldrh	r3, [r3, #0]
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f5a:	81bb      	strh	r3, [r7, #12]
 8004f5c:	89bb      	ldrh	r3, [r7, #12]
 8004f5e:	f083 0310 	eor.w	r3, r3, #16
 8004f62:	81bb      	strh	r3, [r7, #12]
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	441a      	add	r2, r3
 8004f6e:	89bb      	ldrh	r3, [r7, #12]
 8004f70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	8013      	strh	r3, [r2, #0]
 8004f84:	e01f      	b.n	8004fc6 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	4413      	add	r3, r2
 8004f90:	881b      	ldrh	r3, [r3, #0]
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f9c:	81fb      	strh	r3, [r7, #14]
 8004f9e:	89fb      	ldrh	r3, [r7, #14]
 8004fa0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004fa4:	81fb      	strh	r3, [r7, #14]
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	441a      	add	r2, r3
 8004fb0:	89fb      	ldrh	r3, [r7, #14]
 8004fb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004fc6:	2300      	movs	r3, #0
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3714      	adds	r7, #20
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bc80      	pop	{r7}
 8004fd0:	4770      	bx	lr

08004fd2 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004fd2:	b480      	push	{r7}
 8004fd4:	b087      	sub	sp, #28
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
 8004fda:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	7b1b      	ldrb	r3, [r3, #12]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	f040 809d 	bne.w	8005120 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	785b      	ldrb	r3, [r3, #1]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d04c      	beq.n	8005088 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	4413      	add	r3, r2
 8004ff8:	881b      	ldrh	r3, [r3, #0]
 8004ffa:	823b      	strh	r3, [r7, #16]
 8004ffc:	8a3b      	ldrh	r3, [r7, #16]
 8004ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005002:	2b00      	cmp	r3, #0
 8005004:	d01b      	beq.n	800503e <USB_EPClearStall+0x6c>
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	4413      	add	r3, r2
 8005010:	881b      	ldrh	r3, [r3, #0]
 8005012:	b29b      	uxth	r3, r3
 8005014:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005018:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800501c:	81fb      	strh	r3, [r7, #14]
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	441a      	add	r2, r3
 8005028:	89fb      	ldrh	r3, [r7, #14]
 800502a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800502e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005032:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005036:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800503a:	b29b      	uxth	r3, r3
 800503c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	78db      	ldrb	r3, [r3, #3]
 8005042:	2b01      	cmp	r3, #1
 8005044:	d06c      	beq.n	8005120 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	4413      	add	r3, r2
 8005050:	881b      	ldrh	r3, [r3, #0]
 8005052:	b29b      	uxth	r3, r3
 8005054:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005058:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800505c:	81bb      	strh	r3, [r7, #12]
 800505e:	89bb      	ldrh	r3, [r7, #12]
 8005060:	f083 0320 	eor.w	r3, r3, #32
 8005064:	81bb      	strh	r3, [r7, #12]
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	441a      	add	r2, r3
 8005070:	89bb      	ldrh	r3, [r7, #12]
 8005072:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005076:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800507a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800507e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005082:	b29b      	uxth	r3, r3
 8005084:	8013      	strh	r3, [r2, #0]
 8005086:	e04b      	b.n	8005120 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	4413      	add	r3, r2
 8005092:	881b      	ldrh	r3, [r3, #0]
 8005094:	82fb      	strh	r3, [r7, #22]
 8005096:	8afb      	ldrh	r3, [r7, #22]
 8005098:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800509c:	2b00      	cmp	r3, #0
 800509e:	d01b      	beq.n	80050d8 <USB_EPClearStall+0x106>
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	4413      	add	r3, r2
 80050aa:	881b      	ldrh	r3, [r3, #0]
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050b6:	82bb      	strh	r3, [r7, #20]
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	441a      	add	r2, r3
 80050c2:	8abb      	ldrh	r3, [r7, #20]
 80050c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80050d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	4413      	add	r3, r2
 80050e2:	881b      	ldrh	r3, [r3, #0]
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ee:	827b      	strh	r3, [r7, #18]
 80050f0:	8a7b      	ldrh	r3, [r7, #18]
 80050f2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80050f6:	827b      	strh	r3, [r7, #18]
 80050f8:	8a7b      	ldrh	r3, [r7, #18]
 80050fa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80050fe:	827b      	strh	r3, [r7, #18]
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	441a      	add	r2, r3
 800510a:	8a7b      	ldrh	r3, [r7, #18]
 800510c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005110:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005114:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800511c:	b29b      	uxth	r3, r3
 800511e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005120:	2300      	movs	r3, #0
}
 8005122:	4618      	mov	r0, r3
 8005124:	371c      	adds	r7, #28
 8005126:	46bd      	mov	sp, r7
 8005128:	bc80      	pop	{r7}
 800512a:	4770      	bx	lr

0800512c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800512c:	b480      	push	{r7}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	460b      	mov	r3, r1
 8005136:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005138:	78fb      	ldrb	r3, [r7, #3]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d103      	bne.n	8005146 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2280      	movs	r2, #128	; 0x80
 8005142:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005146:	2300      	movs	r3, #0
}
 8005148:	4618      	mov	r0, r3
 800514a:	370c      	adds	r7, #12
 800514c:	46bd      	mov	sp, r7
 800514e:	bc80      	pop	{r7}
 8005150:	4770      	bx	lr

08005152 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005152:	b480      	push	{r7}
 8005154:	b083      	sub	sp, #12
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800515a:	2300      	movs	r3, #0
}
 800515c:	4618      	mov	r0, r3
 800515e:	370c      	adds	r7, #12
 8005160:	46bd      	mov	sp, r7
 8005162:	bc80      	pop	{r7}
 8005164:	4770      	bx	lr

08005166 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005166:	b480      	push	{r7}
 8005168:	b083      	sub	sp, #12
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800516e:	2300      	movs	r3, #0
}
 8005170:	4618      	mov	r0, r3
 8005172:	370c      	adds	r7, #12
 8005174:	46bd      	mov	sp, r7
 8005176:	bc80      	pop	{r7}
 8005178:	4770      	bx	lr

0800517a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800517a:	b480      	push	{r7}
 800517c:	b085      	sub	sp, #20
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005188:	b29b      	uxth	r3, r3
 800518a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800518c:	68fb      	ldr	r3, [r7, #12]
}
 800518e:	4618      	mov	r0, r3
 8005190:	3714      	adds	r7, #20
 8005192:	46bd      	mov	sp, r7
 8005194:	bc80      	pop	{r7}
 8005196:	4770      	bx	lr

08005198 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80051a2:	2300      	movs	r3, #0
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	370c      	adds	r7, #12
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bc80      	pop	{r7}
 80051ac:	4770      	bx	lr

080051ae <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80051ae:	b480      	push	{r7}
 80051b0:	b08d      	sub	sp, #52	; 0x34
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	60f8      	str	r0, [r7, #12]
 80051b6:	60b9      	str	r1, [r7, #8]
 80051b8:	4611      	mov	r1, r2
 80051ba:	461a      	mov	r2, r3
 80051bc:	460b      	mov	r3, r1
 80051be:	80fb      	strh	r3, [r7, #6]
 80051c0:	4613      	mov	r3, r2
 80051c2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80051c4:	88bb      	ldrh	r3, [r7, #4]
 80051c6:	3301      	adds	r3, #1
 80051c8:	085b      	lsrs	r3, r3, #1
 80051ca:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80051d4:	88fb      	ldrh	r3, [r7, #6]
 80051d6:	005a      	lsls	r2, r3, #1
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	4413      	add	r3, r2
 80051dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051e0:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80051e2:	6a3b      	ldr	r3, [r7, #32]
 80051e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051e6:	e01e      	b.n	8005226 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80051e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80051ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f0:	3301      	adds	r3, #1
 80051f2:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80051f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	021b      	lsls	r3, r3, #8
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	461a      	mov	r2, r3
 8005200:	69bb      	ldr	r3, [r7, #24]
 8005202:	4313      	orrs	r3, r2
 8005204:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	b29a      	uxth	r2, r3
 800520a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800520c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800520e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005210:	3302      	adds	r3, #2
 8005212:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8005214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005216:	3302      	adds	r3, #2
 8005218:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800521a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521c:	3301      	adds	r3, #1
 800521e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8005220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005222:	3b01      	subs	r3, #1
 8005224:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005228:	2b00      	cmp	r3, #0
 800522a:	d1dd      	bne.n	80051e8 <USB_WritePMA+0x3a>
  }
}
 800522c:	bf00      	nop
 800522e:	bf00      	nop
 8005230:	3734      	adds	r7, #52	; 0x34
 8005232:	46bd      	mov	sp, r7
 8005234:	bc80      	pop	{r7}
 8005236:	4770      	bx	lr

08005238 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005238:	b480      	push	{r7}
 800523a:	b08b      	sub	sp, #44	; 0x2c
 800523c:	af00      	add	r7, sp, #0
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	60b9      	str	r1, [r7, #8]
 8005242:	4611      	mov	r1, r2
 8005244:	461a      	mov	r2, r3
 8005246:	460b      	mov	r3, r1
 8005248:	80fb      	strh	r3, [r7, #6]
 800524a:	4613      	mov	r3, r2
 800524c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800524e:	88bb      	ldrh	r3, [r7, #4]
 8005250:	085b      	lsrs	r3, r3, #1
 8005252:	b29b      	uxth	r3, r3
 8005254:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800525e:	88fb      	ldrh	r3, [r7, #6]
 8005260:	005a      	lsls	r2, r3, #1
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	4413      	add	r3, r2
 8005266:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800526a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800526c:	69bb      	ldr	r3, [r7, #24]
 800526e:	627b      	str	r3, [r7, #36]	; 0x24
 8005270:	e01b      	b.n	80052aa <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8005272:	6a3b      	ldr	r3, [r7, #32]
 8005274:	881b      	ldrh	r3, [r3, #0]
 8005276:	b29b      	uxth	r3, r3
 8005278:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800527a:	6a3b      	ldr	r3, [r7, #32]
 800527c:	3302      	adds	r3, #2
 800527e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	b2da      	uxtb	r2, r3
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	3301      	adds	r3, #1
 800528c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	0a1b      	lsrs	r3, r3, #8
 8005292:	b2da      	uxtb	r2, r3
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005298:	69fb      	ldr	r3, [r7, #28]
 800529a:	3301      	adds	r3, #1
 800529c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800529e:	6a3b      	ldr	r3, [r7, #32]
 80052a0:	3302      	adds	r3, #2
 80052a2:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80052a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a6:	3b01      	subs	r3, #1
 80052a8:	627b      	str	r3, [r7, #36]	; 0x24
 80052aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d1e0      	bne.n	8005272 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80052b0:	88bb      	ldrh	r3, [r7, #4]
 80052b2:	f003 0301 	and.w	r3, r3, #1
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d007      	beq.n	80052cc <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80052bc:	6a3b      	ldr	r3, [r7, #32]
 80052be:	881b      	ldrh	r3, [r3, #0]
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	b2da      	uxtb	r2, r3
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	701a      	strb	r2, [r3, #0]
  }
}
 80052cc:	bf00      	nop
 80052ce:	372c      	adds	r7, #44	; 0x2c
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bc80      	pop	{r7}
 80052d4:	4770      	bx	lr

080052d6 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80052d6:	b580      	push	{r7, lr}
 80052d8:	b082      	sub	sp, #8
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
 80052de:	460b      	mov	r3, r1
 80052e0:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80052e2:	2304      	movs	r3, #4
 80052e4:	2203      	movs	r2, #3
 80052e6:	2181      	movs	r1, #129	; 0x81
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f001 fc84 	bl	8006bf6 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2201      	movs	r2, #1
 80052f2:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80052f4:	2010      	movs	r0, #16
 80052f6:	f001 fd93 	bl	8006e20 <USBD_static_malloc>
 80052fa:	4602      	mov	r2, r0
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005308:	2b00      	cmp	r3, #0
 800530a:	d101      	bne.n	8005310 <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 800530c:	2302      	movs	r3, #2
 800530e:	e005      	b.n	800531c <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005316:	2200      	movs	r2, #0
 8005318:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 800531a:	2300      	movs	r3, #0
}
 800531c:	4618      	mov	r0, r3
 800531e:	3708      	adds	r7, #8
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b082      	sub	sp, #8
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	460b      	mov	r3, r1
 800532e:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8005330:	2181      	movs	r1, #129	; 0x81
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f001 fc85 	bl	8006c42 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2200      	movs	r2, #0
 800533c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005344:	2b00      	cmp	r3, #0
 8005346:	d009      	beq.n	800535c <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800534e:	4618      	mov	r0, r3
 8005350:	f001 fd72 	bl	8006e38 <USBD_static_free>
    pdev->pClassData = NULL;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 800535c:	2300      	movs	r3, #0
}
 800535e:	4618      	mov	r0, r3
 8005360:	3708      	adds	r7, #8
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
	...

08005368 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b088      	sub	sp, #32
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005378:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800537a:	2300      	movs	r3, #0
 800537c:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 800537e:	2300      	movs	r3, #0
 8005380:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8005382:	2300      	movs	r3, #0
 8005384:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8005386:	2300      	movs	r3, #0
 8005388:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	781b      	ldrb	r3, [r3, #0]
 800538e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005392:	2b00      	cmp	r3, #0
 8005394:	d045      	beq.n	8005422 <USBD_HID_Setup+0xba>
 8005396:	2b20      	cmp	r3, #32
 8005398:	f040 80d3 	bne.w	8005542 <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	785b      	ldrb	r3, [r3, #1]
 80053a0:	3b02      	subs	r3, #2
 80053a2:	2b09      	cmp	r3, #9
 80053a4:	d835      	bhi.n	8005412 <USBD_HID_Setup+0xaa>
 80053a6:	a201      	add	r2, pc, #4	; (adr r2, 80053ac <USBD_HID_Setup+0x44>)
 80053a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ac:	08005403 	.word	0x08005403
 80053b0:	080053e3 	.word	0x080053e3
 80053b4:	08005413 	.word	0x08005413
 80053b8:	08005413 	.word	0x08005413
 80053bc:	08005413 	.word	0x08005413
 80053c0:	08005413 	.word	0x08005413
 80053c4:	08005413 	.word	0x08005413
 80053c8:	08005413 	.word	0x08005413
 80053cc:	080053f1 	.word	0x080053f1
 80053d0:	080053d5 	.word	0x080053d5
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	885b      	ldrh	r3, [r3, #2]
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	461a      	mov	r2, r3
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	601a      	str	r2, [r3, #0]
          break;
 80053e0:	e01e      	b.n	8005420 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	2201      	movs	r2, #1
 80053e6:	4619      	mov	r1, r3
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f001 f944 	bl	8006676 <USBD_CtlSendData>
          break;
 80053ee:	e017      	b.n	8005420 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	885b      	ldrh	r3, [r3, #2]
 80053f4:	0a1b      	lsrs	r3, r3, #8
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	461a      	mov	r2, r3
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	605a      	str	r2, [r3, #4]
          break;
 8005400:	e00e      	b.n	8005420 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	3304      	adds	r3, #4
 8005406:	2201      	movs	r2, #1
 8005408:	4619      	mov	r1, r3
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f001 f933 	bl	8006676 <USBD_CtlSendData>
          break;
 8005410:	e006      	b.n	8005420 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 8005412:	6839      	ldr	r1, [r7, #0]
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f001 f8c4 	bl	80065a2 <USBD_CtlError>
          ret = USBD_FAIL;
 800541a:	2302      	movs	r3, #2
 800541c:	75fb      	strb	r3, [r7, #23]
          break;
 800541e:	bf00      	nop
      }
      break;
 8005420:	e096      	b.n	8005550 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	785b      	ldrb	r3, [r3, #1]
 8005426:	2b0b      	cmp	r3, #11
 8005428:	f200 8083 	bhi.w	8005532 <USBD_HID_Setup+0x1ca>
 800542c:	a201      	add	r2, pc, #4	; (adr r2, 8005434 <USBD_HID_Setup+0xcc>)
 800542e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005432:	bf00      	nop
 8005434:	08005465 	.word	0x08005465
 8005438:	08005533 	.word	0x08005533
 800543c:	08005533 	.word	0x08005533
 8005440:	08005533 	.word	0x08005533
 8005444:	08005533 	.word	0x08005533
 8005448:	08005533 	.word	0x08005533
 800544c:	0800548d 	.word	0x0800548d
 8005450:	08005533 	.word	0x08005533
 8005454:	08005533 	.word	0x08005533
 8005458:	08005533 	.word	0x08005533
 800545c:	080054e5 	.word	0x080054e5
 8005460:	0800550d 	.word	0x0800550d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800546a:	2b03      	cmp	r3, #3
 800546c:	d107      	bne.n	800547e <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800546e:	f107 030e 	add.w	r3, r7, #14
 8005472:	2202      	movs	r2, #2
 8005474:	4619      	mov	r1, r3
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f001 f8fd 	bl	8006676 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800547c:	e060      	b.n	8005540 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800547e:	6839      	ldr	r1, [r7, #0]
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f001 f88e 	bl	80065a2 <USBD_CtlError>
            ret = USBD_FAIL;
 8005486:	2302      	movs	r3, #2
 8005488:	75fb      	strb	r3, [r7, #23]
          break;
 800548a:	e059      	b.n	8005540 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	885b      	ldrh	r3, [r3, #2]
 8005490:	0a1b      	lsrs	r3, r3, #8
 8005492:	b29b      	uxth	r3, r3
 8005494:	2b22      	cmp	r3, #34	; 0x22
 8005496:	d108      	bne.n	80054aa <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	88db      	ldrh	r3, [r3, #6]
 800549c:	2b3f      	cmp	r3, #63	; 0x3f
 800549e:	bf28      	it	cs
 80054a0:	233f      	movcs	r3, #63	; 0x3f
 80054a2:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 80054a4:	4b2d      	ldr	r3, [pc, #180]	; (800555c <USBD_HID_Setup+0x1f4>)
 80054a6:	61bb      	str	r3, [r7, #24]
 80054a8:	e015      	b.n	80054d6 <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	885b      	ldrh	r3, [r3, #2]
 80054ae:	0a1b      	lsrs	r3, r3, #8
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	2b21      	cmp	r3, #33	; 0x21
 80054b4:	d108      	bne.n	80054c8 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 80054b6:	4b2a      	ldr	r3, [pc, #168]	; (8005560 <USBD_HID_Setup+0x1f8>)
 80054b8:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	88db      	ldrh	r3, [r3, #6]
 80054be:	2b09      	cmp	r3, #9
 80054c0:	bf28      	it	cs
 80054c2:	2309      	movcs	r3, #9
 80054c4:	83fb      	strh	r3, [r7, #30]
 80054c6:	e006      	b.n	80054d6 <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 80054c8:	6839      	ldr	r1, [r7, #0]
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f001 f869 	bl	80065a2 <USBD_CtlError>
            ret = USBD_FAIL;
 80054d0:	2302      	movs	r3, #2
 80054d2:	75fb      	strb	r3, [r7, #23]
            break;
 80054d4:	e034      	b.n	8005540 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 80054d6:	8bfb      	ldrh	r3, [r7, #30]
 80054d8:	461a      	mov	r2, r3
 80054da:	69b9      	ldr	r1, [r7, #24]
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f001 f8ca 	bl	8006676 <USBD_CtlSendData>
          break;
 80054e2:	e02d      	b.n	8005540 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054ea:	2b03      	cmp	r3, #3
 80054ec:	d107      	bne.n	80054fe <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	3308      	adds	r3, #8
 80054f2:	2201      	movs	r2, #1
 80054f4:	4619      	mov	r1, r3
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f001 f8bd 	bl	8006676 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80054fc:	e020      	b.n	8005540 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 80054fe:	6839      	ldr	r1, [r7, #0]
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f001 f84e 	bl	80065a2 <USBD_CtlError>
            ret = USBD_FAIL;
 8005506:	2302      	movs	r3, #2
 8005508:	75fb      	strb	r3, [r7, #23]
          break;
 800550a:	e019      	b.n	8005540 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005512:	2b03      	cmp	r3, #3
 8005514:	d106      	bne.n	8005524 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	885b      	ldrh	r3, [r3, #2]
 800551a:	b2db      	uxtb	r3, r3
 800551c:	461a      	mov	r2, r3
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005522:	e00d      	b.n	8005540 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8005524:	6839      	ldr	r1, [r7, #0]
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f001 f83b 	bl	80065a2 <USBD_CtlError>
            ret = USBD_FAIL;
 800552c:	2302      	movs	r3, #2
 800552e:	75fb      	strb	r3, [r7, #23]
          break;
 8005530:	e006      	b.n	8005540 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 8005532:	6839      	ldr	r1, [r7, #0]
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f001 f834 	bl	80065a2 <USBD_CtlError>
          ret = USBD_FAIL;
 800553a:	2302      	movs	r3, #2
 800553c:	75fb      	strb	r3, [r7, #23]
          break;
 800553e:	bf00      	nop
      }
      break;
 8005540:	e006      	b.n	8005550 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 8005542:	6839      	ldr	r1, [r7, #0]
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f001 f82c 	bl	80065a2 <USBD_CtlError>
      ret = USBD_FAIL;
 800554a:	2302      	movs	r3, #2
 800554c:	75fb      	strb	r3, [r7, #23]
      break;
 800554e:	bf00      	nop
  }

  return ret;
 8005550:	7dfb      	ldrb	r3, [r7, #23]
}
 8005552:	4618      	mov	r0, r3
 8005554:	3720      	adds	r7, #32
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}
 800555a:	bf00      	nop
 800555c:	200000c8 	.word	0x200000c8
 8005560:	200000b0 	.word	0x200000b0

08005564 <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b086      	sub	sp, #24
 8005568:	af00      	add	r7, sp, #0
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	60b9      	str	r1, [r7, #8]
 800556e:	4613      	mov	r3, r2
 8005570:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005578:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005580:	2b03      	cmp	r3, #3
 8005582:	d10c      	bne.n	800559e <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	7b1b      	ldrb	r3, [r3, #12]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d108      	bne.n	800559e <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	2201      	movs	r2, #1
 8005590:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 8005592:	88fb      	ldrh	r3, [r7, #6]
 8005594:	68ba      	ldr	r2, [r7, #8]
 8005596:	2181      	movs	r1, #129	; 0x81
 8005598:	68f8      	ldr	r0, [r7, #12]
 800559a:	f001 fbfa 	bl	8006d92 <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 800559e:	2300      	movs	r3, #0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3718      	adds	r7, #24
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2222      	movs	r2, #34	; 0x22
 80055b4:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 80055b6:	4b03      	ldr	r3, [pc, #12]	; (80055c4 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	370c      	adds	r7, #12
 80055bc:	46bd      	mov	sp, r7
 80055be:	bc80      	pop	{r7}
 80055c0:	4770      	bx	lr
 80055c2:	bf00      	nop
 80055c4:	20000044 	.word	0x20000044

080055c8 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b083      	sub	sp, #12
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2222      	movs	r2, #34	; 0x22
 80055d4:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 80055d6:	4b03      	ldr	r3, [pc, #12]	; (80055e4 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 80055d8:	4618      	mov	r0, r3
 80055da:	370c      	adds	r7, #12
 80055dc:	46bd      	mov	sp, r7
 80055de:	bc80      	pop	{r7}
 80055e0:	4770      	bx	lr
 80055e2:	bf00      	nop
 80055e4:	20000068 	.word	0x20000068

080055e8 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b083      	sub	sp, #12
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2222      	movs	r2, #34	; 0x22
 80055f4:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 80055f6:	4b03      	ldr	r3, [pc, #12]	; (8005604 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	370c      	adds	r7, #12
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bc80      	pop	{r7}
 8005600:	4770      	bx	lr
 8005602:	bf00      	nop
 8005604:	2000008c 	.word	0x2000008c

08005608 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8005608:	b480      	push	{r7}
 800560a:	b083      	sub	sp, #12
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	460b      	mov	r3, r1
 8005612:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800561a:	2200      	movs	r2, #0
 800561c:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 800561e:	2300      	movs	r3, #0
}
 8005620:	4618      	mov	r0, r3
 8005622:	370c      	adds	r7, #12
 8005624:	46bd      	mov	sp, r7
 8005626:	bc80      	pop	{r7}
 8005628:	4770      	bx	lr
	...

0800562c <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800562c:	b480      	push	{r7}
 800562e:	b083      	sub	sp, #12
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	220a      	movs	r2, #10
 8005638:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 800563a:	4b03      	ldr	r3, [pc, #12]	; (8005648 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800563c:	4618      	mov	r0, r3
 800563e:	370c      	adds	r7, #12
 8005640:	46bd      	mov	sp, r7
 8005642:	bc80      	pop	{r7}
 8005644:	4770      	bx	lr
 8005646:	bf00      	nop
 8005648:	200000bc 	.word	0x200000bc

0800564c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b084      	sub	sp, #16
 8005650:	af00      	add	r7, sp, #0
 8005652:	60f8      	str	r0, [r7, #12]
 8005654:	60b9      	str	r1, [r7, #8]
 8005656:	4613      	mov	r3, r2
 8005658:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d101      	bne.n	8005664 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005660:	2302      	movs	r3, #2
 8005662:	e01a      	b.n	800569a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800566a:	2b00      	cmp	r3, #0
 800566c:	d003      	beq.n	8005676 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2200      	movs	r2, #0
 8005672:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d003      	beq.n	8005684 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	68ba      	ldr	r2, [r7, #8]
 8005680:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	79fa      	ldrb	r2, [r7, #7]
 8005690:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005692:	68f8      	ldr	r0, [r7, #12]
 8005694:	f001 fa4c 	bl	8006b30 <USBD_LL_Init>

  return USBD_OK;
 8005698:	2300      	movs	r3, #0
}
 800569a:	4618      	mov	r0, r3
 800569c:	3710      	adds	r7, #16
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}

080056a2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80056a2:	b480      	push	{r7}
 80056a4:	b085      	sub	sp, #20
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
 80056aa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80056ac:	2300      	movs	r3, #0
 80056ae:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d006      	beq.n	80056c4 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	683a      	ldr	r2, [r7, #0]
 80056ba:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80056be:	2300      	movs	r3, #0
 80056c0:	73fb      	strb	r3, [r7, #15]
 80056c2:	e001      	b.n	80056c8 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80056c4:	2302      	movs	r3, #2
 80056c6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80056c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3714      	adds	r7, #20
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bc80      	pop	{r7}
 80056d2:	4770      	bx	lr

080056d4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b082      	sub	sp, #8
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f001 fa6f 	bl	8006bc0 <USBD_LL_Start>

  return USBD_OK;
 80056e2:	2300      	movs	r3, #0
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3708      	adds	r7, #8
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}

080056ec <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80056f4:	2300      	movs	r3, #0
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	370c      	adds	r7, #12
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bc80      	pop	{r7}
 80056fe:	4770      	bx	lr

08005700 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b084      	sub	sp, #16
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	460b      	mov	r3, r1
 800570a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800570c:	2302      	movs	r3, #2
 800570e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005716:	2b00      	cmp	r3, #0
 8005718:	d00c      	beq.n	8005734 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	78fa      	ldrb	r2, [r7, #3]
 8005724:	4611      	mov	r1, r2
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	4798      	blx	r3
 800572a:	4603      	mov	r3, r0
 800572c:	2b00      	cmp	r3, #0
 800572e:	d101      	bne.n	8005734 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8005730:	2300      	movs	r3, #0
 8005732:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8005734:	7bfb      	ldrb	r3, [r7, #15]
}
 8005736:	4618      	mov	r0, r3
 8005738:	3710      	adds	r7, #16
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}

0800573e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800573e:	b580      	push	{r7, lr}
 8005740:	b082      	sub	sp, #8
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
 8005746:	460b      	mov	r3, r1
 8005748:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	78fa      	ldrb	r2, [r7, #3]
 8005754:	4611      	mov	r1, r2
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	4798      	blx	r3

  return USBD_OK;
 800575a:	2300      	movs	r3, #0
}
 800575c:	4618      	mov	r0, r3
 800575e:	3708      	adds	r7, #8
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b082      	sub	sp, #8
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005774:	6839      	ldr	r1, [r7, #0]
 8005776:	4618      	mov	r0, r3
 8005778:	f000 fed7 	bl	800652a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800578a:	461a      	mov	r2, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005798:	f003 031f 	and.w	r3, r3, #31
 800579c:	2b02      	cmp	r3, #2
 800579e:	d016      	beq.n	80057ce <USBD_LL_SetupStage+0x6a>
 80057a0:	2b02      	cmp	r3, #2
 80057a2:	d81c      	bhi.n	80057de <USBD_LL_SetupStage+0x7a>
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d002      	beq.n	80057ae <USBD_LL_SetupStage+0x4a>
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d008      	beq.n	80057be <USBD_LL_SetupStage+0x5a>
 80057ac:	e017      	b.n	80057de <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80057b4:	4619      	mov	r1, r3
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 f9ca 	bl	8005b50 <USBD_StdDevReq>
      break;
 80057bc:	e01a      	b.n	80057f4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80057c4:	4619      	mov	r1, r3
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f000 fa2c 	bl	8005c24 <USBD_StdItfReq>
      break;
 80057cc:	e012      	b.n	80057f4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80057d4:	4619      	mov	r1, r3
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 fa6c 	bl	8005cb4 <USBD_StdEPReq>
      break;
 80057dc:	e00a      	b.n	80057f4 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80057e4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	4619      	mov	r1, r3
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f001 fa47 	bl	8006c80 <USBD_LL_StallEP>
      break;
 80057f2:	bf00      	nop
  }

  return USBD_OK;
 80057f4:	2300      	movs	r3, #0
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3708      	adds	r7, #8
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}

080057fe <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80057fe:	b580      	push	{r7, lr}
 8005800:	b086      	sub	sp, #24
 8005802:	af00      	add	r7, sp, #0
 8005804:	60f8      	str	r0, [r7, #12]
 8005806:	460b      	mov	r3, r1
 8005808:	607a      	str	r2, [r7, #4]
 800580a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800580c:	7afb      	ldrb	r3, [r7, #11]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d14b      	bne.n	80058aa <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005818:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005820:	2b03      	cmp	r3, #3
 8005822:	d134      	bne.n	800588e <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	68da      	ldr	r2, [r3, #12]
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	691b      	ldr	r3, [r3, #16]
 800582c:	429a      	cmp	r2, r3
 800582e:	d919      	bls.n	8005864 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	68da      	ldr	r2, [r3, #12]
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	691b      	ldr	r3, [r3, #16]
 8005838:	1ad2      	subs	r2, r2, r3
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	68da      	ldr	r2, [r3, #12]
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005846:	429a      	cmp	r2, r3
 8005848:	d203      	bcs.n	8005852 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800584e:	b29b      	uxth	r3, r3
 8005850:	e002      	b.n	8005858 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005856:	b29b      	uxth	r3, r3
 8005858:	461a      	mov	r2, r3
 800585a:	6879      	ldr	r1, [r7, #4]
 800585c:	68f8      	ldr	r0, [r7, #12]
 800585e:	f000 ff38 	bl	80066d2 <USBD_CtlContinueRx>
 8005862:	e038      	b.n	80058d6 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800586a:	691b      	ldr	r3, [r3, #16]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d00a      	beq.n	8005886 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005876:	2b03      	cmp	r3, #3
 8005878:	d105      	bne.n	8005886 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	68f8      	ldr	r0, [r7, #12]
 8005884:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005886:	68f8      	ldr	r0, [r7, #12]
 8005888:	f000 ff35 	bl	80066f6 <USBD_CtlSendStatus>
 800588c:	e023      	b.n	80058d6 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005894:	2b05      	cmp	r3, #5
 8005896:	d11e      	bne.n	80058d6 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2200      	movs	r2, #0
 800589c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80058a0:	2100      	movs	r1, #0
 80058a2:	68f8      	ldr	r0, [r7, #12]
 80058a4:	f001 f9ec 	bl	8006c80 <USBD_LL_StallEP>
 80058a8:	e015      	b.n	80058d6 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80058b0:	699b      	ldr	r3, [r3, #24]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d00d      	beq.n	80058d2 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80058bc:	2b03      	cmp	r3, #3
 80058be:	d108      	bne.n	80058d2 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80058c6:	699b      	ldr	r3, [r3, #24]
 80058c8:	7afa      	ldrb	r2, [r7, #11]
 80058ca:	4611      	mov	r1, r2
 80058cc:	68f8      	ldr	r0, [r7, #12]
 80058ce:	4798      	blx	r3
 80058d0:	e001      	b.n	80058d6 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80058d2:	2302      	movs	r3, #2
 80058d4:	e000      	b.n	80058d8 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80058d6:	2300      	movs	r3, #0
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3718      	adds	r7, #24
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}

080058e0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b086      	sub	sp, #24
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	460b      	mov	r3, r1
 80058ea:	607a      	str	r2, [r7, #4]
 80058ec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80058ee:	7afb      	ldrb	r3, [r7, #11]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d17f      	bne.n	80059f4 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	3314      	adds	r3, #20
 80058f8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005900:	2b02      	cmp	r3, #2
 8005902:	d15c      	bne.n	80059be <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	68da      	ldr	r2, [r3, #12]
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	691b      	ldr	r3, [r3, #16]
 800590c:	429a      	cmp	r2, r3
 800590e:	d915      	bls.n	800593c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	68da      	ldr	r2, [r3, #12]
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	691b      	ldr	r3, [r3, #16]
 8005918:	1ad2      	subs	r2, r2, r3
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	b29b      	uxth	r3, r3
 8005924:	461a      	mov	r2, r3
 8005926:	6879      	ldr	r1, [r7, #4]
 8005928:	68f8      	ldr	r0, [r7, #12]
 800592a:	f000 fec0 	bl	80066ae <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800592e:	2300      	movs	r3, #0
 8005930:	2200      	movs	r2, #0
 8005932:	2100      	movs	r1, #0
 8005934:	68f8      	ldr	r0, [r7, #12]
 8005936:	f001 fa4f 	bl	8006dd8 <USBD_LL_PrepareReceive>
 800593a:	e04e      	b.n	80059da <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	697a      	ldr	r2, [r7, #20]
 8005942:	6912      	ldr	r2, [r2, #16]
 8005944:	fbb3 f1f2 	udiv	r1, r3, r2
 8005948:	fb02 f201 	mul.w	r2, r2, r1
 800594c:	1a9b      	subs	r3, r3, r2
 800594e:	2b00      	cmp	r3, #0
 8005950:	d11c      	bne.n	800598c <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	689a      	ldr	r2, [r3, #8]
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800595a:	429a      	cmp	r2, r3
 800595c:	d316      	bcc.n	800598c <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	689a      	ldr	r2, [r3, #8]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005968:	429a      	cmp	r2, r3
 800596a:	d20f      	bcs.n	800598c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800596c:	2200      	movs	r2, #0
 800596e:	2100      	movs	r1, #0
 8005970:	68f8      	ldr	r0, [r7, #12]
 8005972:	f000 fe9c 	bl	80066ae <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2200      	movs	r2, #0
 800597a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800597e:	2300      	movs	r3, #0
 8005980:	2200      	movs	r2, #0
 8005982:	2100      	movs	r1, #0
 8005984:	68f8      	ldr	r0, [r7, #12]
 8005986:	f001 fa27 	bl	8006dd8 <USBD_LL_PrepareReceive>
 800598a:	e026      	b.n	80059da <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d00a      	beq.n	80059ae <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800599e:	2b03      	cmp	r3, #3
 80059a0:	d105      	bne.n	80059ae <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059a8:	68db      	ldr	r3, [r3, #12]
 80059aa:	68f8      	ldr	r0, [r7, #12]
 80059ac:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80059ae:	2180      	movs	r1, #128	; 0x80
 80059b0:	68f8      	ldr	r0, [r7, #12]
 80059b2:	f001 f965 	bl	8006c80 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80059b6:	68f8      	ldr	r0, [r7, #12]
 80059b8:	f000 feb0 	bl	800671c <USBD_CtlReceiveStatus>
 80059bc:	e00d      	b.n	80059da <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80059c4:	2b04      	cmp	r3, #4
 80059c6:	d004      	beq.n	80059d2 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d103      	bne.n	80059da <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80059d2:	2180      	movs	r1, #128	; 0x80
 80059d4:	68f8      	ldr	r0, [r7, #12]
 80059d6:	f001 f953 	bl	8006c80 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d11d      	bne.n	8005a20 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80059e4:	68f8      	ldr	r0, [r7, #12]
 80059e6:	f7ff fe81 	bl	80056ec <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80059f2:	e015      	b.n	8005a20 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059fa:	695b      	ldr	r3, [r3, #20]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d00d      	beq.n	8005a1c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005a06:	2b03      	cmp	r3, #3
 8005a08:	d108      	bne.n	8005a1c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a10:	695b      	ldr	r3, [r3, #20]
 8005a12:	7afa      	ldrb	r2, [r7, #11]
 8005a14:	4611      	mov	r1, r2
 8005a16:	68f8      	ldr	r0, [r7, #12]
 8005a18:	4798      	blx	r3
 8005a1a:	e001      	b.n	8005a20 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005a1c:	2302      	movs	r3, #2
 8005a1e:	e000      	b.n	8005a22 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8005a20:	2300      	movs	r3, #0
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3718      	adds	r7, #24
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}

08005a2a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005a2a:	b580      	push	{r7, lr}
 8005a2c:	b082      	sub	sp, #8
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005a32:	2340      	movs	r3, #64	; 0x40
 8005a34:	2200      	movs	r2, #0
 8005a36:	2100      	movs	r1, #0
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f001 f8dc 	bl	8006bf6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2201      	movs	r2, #1
 8005a42:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2240      	movs	r2, #64	; 0x40
 8005a4a:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005a4e:	2340      	movs	r3, #64	; 0x40
 8005a50:	2200      	movs	r2, #0
 8005a52:	2180      	movs	r1, #128	; 0x80
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f001 f8ce 	bl	8006bf6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2240      	movs	r2, #64	; 0x40
 8005a64:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2201      	movs	r2, #1
 8005a6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d009      	beq.n	8005aa2 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	6852      	ldr	r2, [r2, #4]
 8005a9a:	b2d2      	uxtb	r2, r2
 8005a9c:	4611      	mov	r1, r2
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	4798      	blx	r3
  }

  return USBD_OK;
 8005aa2:	2300      	movs	r3, #0
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3708      	adds	r7, #8
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}

08005aac <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b083      	sub	sp, #12
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	460b      	mov	r3, r1
 8005ab6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	78fa      	ldrb	r2, [r7, #3]
 8005abc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005abe:	2300      	movs	r3, #0
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	370c      	adds	r7, #12
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bc80      	pop	{r7}
 8005ac8:	4770      	bx	lr

08005aca <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005aca:	b480      	push	{r7}
 8005acc:	b083      	sub	sp, #12
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2204      	movs	r2, #4
 8005ae2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005ae6:	2300      	movs	r3, #0
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bc80      	pop	{r7}
 8005af0:	4770      	bx	lr

08005af2 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005af2:	b480      	push	{r7}
 8005af4:	b083      	sub	sp, #12
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b00:	2b04      	cmp	r3, #4
 8005b02:	d105      	bne.n	8005b10 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005b10:	2300      	movs	r3, #0
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	370c      	adds	r7, #12
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bc80      	pop	{r7}
 8005b1a:	4770      	bx	lr

08005b1c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b082      	sub	sp, #8
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b2a:	2b03      	cmp	r3, #3
 8005b2c:	d10b      	bne.n	8005b46 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b34:	69db      	ldr	r3, [r3, #28]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d005      	beq.n	8005b46 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b40:	69db      	ldr	r3, [r3, #28]
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005b46:	2300      	movs	r3, #0
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3708      	adds	r7, #8
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}

08005b50 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b084      	sub	sp, #16
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	781b      	ldrb	r3, [r3, #0]
 8005b62:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005b66:	2b40      	cmp	r3, #64	; 0x40
 8005b68:	d005      	beq.n	8005b76 <USBD_StdDevReq+0x26>
 8005b6a:	2b40      	cmp	r3, #64	; 0x40
 8005b6c:	d84f      	bhi.n	8005c0e <USBD_StdDevReq+0xbe>
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d009      	beq.n	8005b86 <USBD_StdDevReq+0x36>
 8005b72:	2b20      	cmp	r3, #32
 8005b74:	d14b      	bne.n	8005c0e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	6839      	ldr	r1, [r7, #0]
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	4798      	blx	r3
      break;
 8005b84:	e048      	b.n	8005c18 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	785b      	ldrb	r3, [r3, #1]
 8005b8a:	2b09      	cmp	r3, #9
 8005b8c:	d839      	bhi.n	8005c02 <USBD_StdDevReq+0xb2>
 8005b8e:	a201      	add	r2, pc, #4	; (adr r2, 8005b94 <USBD_StdDevReq+0x44>)
 8005b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b94:	08005be5 	.word	0x08005be5
 8005b98:	08005bf9 	.word	0x08005bf9
 8005b9c:	08005c03 	.word	0x08005c03
 8005ba0:	08005bef 	.word	0x08005bef
 8005ba4:	08005c03 	.word	0x08005c03
 8005ba8:	08005bc7 	.word	0x08005bc7
 8005bac:	08005bbd 	.word	0x08005bbd
 8005bb0:	08005c03 	.word	0x08005c03
 8005bb4:	08005bdb 	.word	0x08005bdb
 8005bb8:	08005bd1 	.word	0x08005bd1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005bbc:	6839      	ldr	r1, [r7, #0]
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 f9dc 	bl	8005f7c <USBD_GetDescriptor>
          break;
 8005bc4:	e022      	b.n	8005c0c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005bc6:	6839      	ldr	r1, [r7, #0]
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f000 fb3f 	bl	800624c <USBD_SetAddress>
          break;
 8005bce:	e01d      	b.n	8005c0c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8005bd0:	6839      	ldr	r1, [r7, #0]
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f000 fb7e 	bl	80062d4 <USBD_SetConfig>
          break;
 8005bd8:	e018      	b.n	8005c0c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005bda:	6839      	ldr	r1, [r7, #0]
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f000 fc07 	bl	80063f0 <USBD_GetConfig>
          break;
 8005be2:	e013      	b.n	8005c0c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005be4:	6839      	ldr	r1, [r7, #0]
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f000 fc37 	bl	800645a <USBD_GetStatus>
          break;
 8005bec:	e00e      	b.n	8005c0c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005bee:	6839      	ldr	r1, [r7, #0]
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f000 fc65 	bl	80064c0 <USBD_SetFeature>
          break;
 8005bf6:	e009      	b.n	8005c0c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005bf8:	6839      	ldr	r1, [r7, #0]
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 fc74 	bl	80064e8 <USBD_ClrFeature>
          break;
 8005c00:	e004      	b.n	8005c0c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8005c02:	6839      	ldr	r1, [r7, #0]
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f000 fccc 	bl	80065a2 <USBD_CtlError>
          break;
 8005c0a:	bf00      	nop
      }
      break;
 8005c0c:	e004      	b.n	8005c18 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8005c0e:	6839      	ldr	r1, [r7, #0]
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f000 fcc6 	bl	80065a2 <USBD_CtlError>
      break;
 8005c16:	bf00      	nop
  }

  return ret;
 8005c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3710      	adds	r7, #16
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}
 8005c22:	bf00      	nop

08005c24 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b084      	sub	sp, #16
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005c3a:	2b40      	cmp	r3, #64	; 0x40
 8005c3c:	d005      	beq.n	8005c4a <USBD_StdItfReq+0x26>
 8005c3e:	2b40      	cmp	r3, #64	; 0x40
 8005c40:	d82e      	bhi.n	8005ca0 <USBD_StdItfReq+0x7c>
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d001      	beq.n	8005c4a <USBD_StdItfReq+0x26>
 8005c46:	2b20      	cmp	r3, #32
 8005c48:	d12a      	bne.n	8005ca0 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c50:	3b01      	subs	r3, #1
 8005c52:	2b02      	cmp	r3, #2
 8005c54:	d81d      	bhi.n	8005c92 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	889b      	ldrh	r3, [r3, #4]
 8005c5a:	b2db      	uxtb	r3, r3
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d813      	bhi.n	8005c88 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	6839      	ldr	r1, [r7, #0]
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	4798      	blx	r3
 8005c6e:	4603      	mov	r3, r0
 8005c70:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	88db      	ldrh	r3, [r3, #6]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d110      	bne.n	8005c9c <USBD_StdItfReq+0x78>
 8005c7a:	7bfb      	ldrb	r3, [r7, #15]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d10d      	bne.n	8005c9c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f000 fd38 	bl	80066f6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005c86:	e009      	b.n	8005c9c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8005c88:	6839      	ldr	r1, [r7, #0]
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f000 fc89 	bl	80065a2 <USBD_CtlError>
          break;
 8005c90:	e004      	b.n	8005c9c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8005c92:	6839      	ldr	r1, [r7, #0]
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f000 fc84 	bl	80065a2 <USBD_CtlError>
          break;
 8005c9a:	e000      	b.n	8005c9e <USBD_StdItfReq+0x7a>
          break;
 8005c9c:	bf00      	nop
      }
      break;
 8005c9e:	e004      	b.n	8005caa <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8005ca0:	6839      	ldr	r1, [r7, #0]
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f000 fc7d 	bl	80065a2 <USBD_CtlError>
      break;
 8005ca8:	bf00      	nop
  }

  return USBD_OK;
 8005caa:	2300      	movs	r3, #0
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3710      	adds	r7, #16
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}

08005cb4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b084      	sub	sp, #16
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	889b      	ldrh	r3, [r3, #4]
 8005cc6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005cd0:	2b40      	cmp	r3, #64	; 0x40
 8005cd2:	d007      	beq.n	8005ce4 <USBD_StdEPReq+0x30>
 8005cd4:	2b40      	cmp	r3, #64	; 0x40
 8005cd6:	f200 8146 	bhi.w	8005f66 <USBD_StdEPReq+0x2b2>
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d00a      	beq.n	8005cf4 <USBD_StdEPReq+0x40>
 8005cde:	2b20      	cmp	r3, #32
 8005ce0:	f040 8141 	bne.w	8005f66 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	6839      	ldr	r1, [r7, #0]
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	4798      	blx	r3
      break;
 8005cf2:	e13d      	b.n	8005f70 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005cfc:	2b20      	cmp	r3, #32
 8005cfe:	d10a      	bne.n	8005d16 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	6839      	ldr	r1, [r7, #0]
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	4798      	blx	r3
 8005d0e:	4603      	mov	r3, r0
 8005d10:	73fb      	strb	r3, [r7, #15]

        return ret;
 8005d12:	7bfb      	ldrb	r3, [r7, #15]
 8005d14:	e12d      	b.n	8005f72 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	785b      	ldrb	r3, [r3, #1]
 8005d1a:	2b03      	cmp	r3, #3
 8005d1c:	d007      	beq.n	8005d2e <USBD_StdEPReq+0x7a>
 8005d1e:	2b03      	cmp	r3, #3
 8005d20:	f300 811b 	bgt.w	8005f5a <USBD_StdEPReq+0x2a6>
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d072      	beq.n	8005e0e <USBD_StdEPReq+0x15a>
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d03a      	beq.n	8005da2 <USBD_StdEPReq+0xee>
 8005d2c:	e115      	b.n	8005f5a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d34:	2b02      	cmp	r3, #2
 8005d36:	d002      	beq.n	8005d3e <USBD_StdEPReq+0x8a>
 8005d38:	2b03      	cmp	r3, #3
 8005d3a:	d015      	beq.n	8005d68 <USBD_StdEPReq+0xb4>
 8005d3c:	e02b      	b.n	8005d96 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005d3e:	7bbb      	ldrb	r3, [r7, #14]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d00c      	beq.n	8005d5e <USBD_StdEPReq+0xaa>
 8005d44:	7bbb      	ldrb	r3, [r7, #14]
 8005d46:	2b80      	cmp	r3, #128	; 0x80
 8005d48:	d009      	beq.n	8005d5e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005d4a:	7bbb      	ldrb	r3, [r7, #14]
 8005d4c:	4619      	mov	r1, r3
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f000 ff96 	bl	8006c80 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005d54:	2180      	movs	r1, #128	; 0x80
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f000 ff92 	bl	8006c80 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005d5c:	e020      	b.n	8005da0 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8005d5e:	6839      	ldr	r1, [r7, #0]
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f000 fc1e 	bl	80065a2 <USBD_CtlError>
              break;
 8005d66:	e01b      	b.n	8005da0 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	885b      	ldrh	r3, [r3, #2]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d10e      	bne.n	8005d8e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8005d70:	7bbb      	ldrb	r3, [r7, #14]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d00b      	beq.n	8005d8e <USBD_StdEPReq+0xda>
 8005d76:	7bbb      	ldrb	r3, [r7, #14]
 8005d78:	2b80      	cmp	r3, #128	; 0x80
 8005d7a:	d008      	beq.n	8005d8e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	88db      	ldrh	r3, [r3, #6]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d104      	bne.n	8005d8e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8005d84:	7bbb      	ldrb	r3, [r7, #14]
 8005d86:	4619      	mov	r1, r3
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f000 ff79 	bl	8006c80 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 fcb1 	bl	80066f6 <USBD_CtlSendStatus>

              break;
 8005d94:	e004      	b.n	8005da0 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8005d96:	6839      	ldr	r1, [r7, #0]
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f000 fc02 	bl	80065a2 <USBD_CtlError>
              break;
 8005d9e:	bf00      	nop
          }
          break;
 8005da0:	e0e0      	b.n	8005f64 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005da8:	2b02      	cmp	r3, #2
 8005daa:	d002      	beq.n	8005db2 <USBD_StdEPReq+0xfe>
 8005dac:	2b03      	cmp	r3, #3
 8005dae:	d015      	beq.n	8005ddc <USBD_StdEPReq+0x128>
 8005db0:	e026      	b.n	8005e00 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005db2:	7bbb      	ldrb	r3, [r7, #14]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d00c      	beq.n	8005dd2 <USBD_StdEPReq+0x11e>
 8005db8:	7bbb      	ldrb	r3, [r7, #14]
 8005dba:	2b80      	cmp	r3, #128	; 0x80
 8005dbc:	d009      	beq.n	8005dd2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005dbe:	7bbb      	ldrb	r3, [r7, #14]
 8005dc0:	4619      	mov	r1, r3
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f000 ff5c 	bl	8006c80 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005dc8:	2180      	movs	r1, #128	; 0x80
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f000 ff58 	bl	8006c80 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005dd0:	e01c      	b.n	8005e0c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8005dd2:	6839      	ldr	r1, [r7, #0]
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f000 fbe4 	bl	80065a2 <USBD_CtlError>
              break;
 8005dda:	e017      	b.n	8005e0c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	885b      	ldrh	r3, [r3, #2]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d112      	bne.n	8005e0a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005de4:	7bbb      	ldrb	r3, [r7, #14]
 8005de6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d004      	beq.n	8005df8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005dee:	7bbb      	ldrb	r3, [r7, #14]
 8005df0:	4619      	mov	r1, r3
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f000 ff63 	bl	8006cbe <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f000 fc7c 	bl	80066f6 <USBD_CtlSendStatus>
              }
              break;
 8005dfe:	e004      	b.n	8005e0a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8005e00:	6839      	ldr	r1, [r7, #0]
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 fbcd 	bl	80065a2 <USBD_CtlError>
              break;
 8005e08:	e000      	b.n	8005e0c <USBD_StdEPReq+0x158>
              break;
 8005e0a:	bf00      	nop
          }
          break;
 8005e0c:	e0aa      	b.n	8005f64 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e14:	2b02      	cmp	r3, #2
 8005e16:	d002      	beq.n	8005e1e <USBD_StdEPReq+0x16a>
 8005e18:	2b03      	cmp	r3, #3
 8005e1a:	d032      	beq.n	8005e82 <USBD_StdEPReq+0x1ce>
 8005e1c:	e097      	b.n	8005f4e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005e1e:	7bbb      	ldrb	r3, [r7, #14]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d007      	beq.n	8005e34 <USBD_StdEPReq+0x180>
 8005e24:	7bbb      	ldrb	r3, [r7, #14]
 8005e26:	2b80      	cmp	r3, #128	; 0x80
 8005e28:	d004      	beq.n	8005e34 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8005e2a:	6839      	ldr	r1, [r7, #0]
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f000 fbb8 	bl	80065a2 <USBD_CtlError>
                break;
 8005e32:	e091      	b.n	8005f58 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005e34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	da0b      	bge.n	8005e54 <USBD_StdEPReq+0x1a0>
 8005e3c:	7bbb      	ldrb	r3, [r7, #14]
 8005e3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005e42:	4613      	mov	r3, r2
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	4413      	add	r3, r2
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	3310      	adds	r3, #16
 8005e4c:	687a      	ldr	r2, [r7, #4]
 8005e4e:	4413      	add	r3, r2
 8005e50:	3304      	adds	r3, #4
 8005e52:	e00b      	b.n	8005e6c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005e54:	7bbb      	ldrb	r3, [r7, #14]
 8005e56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005e5a:	4613      	mov	r3, r2
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	4413      	add	r3, r2
 8005e60:	009b      	lsls	r3, r3, #2
 8005e62:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	4413      	add	r3, r2
 8005e6a:	3304      	adds	r3, #4
 8005e6c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	2200      	movs	r2, #0
 8005e72:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	2202      	movs	r2, #2
 8005e78:	4619      	mov	r1, r3
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f000 fbfb 	bl	8006676 <USBD_CtlSendData>
              break;
 8005e80:	e06a      	b.n	8005f58 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005e82:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	da11      	bge.n	8005eae <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005e8a:	7bbb      	ldrb	r3, [r7, #14]
 8005e8c:	f003 020f 	and.w	r2, r3, #15
 8005e90:	6879      	ldr	r1, [r7, #4]
 8005e92:	4613      	mov	r3, r2
 8005e94:	009b      	lsls	r3, r3, #2
 8005e96:	4413      	add	r3, r2
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	440b      	add	r3, r1
 8005e9c:	3318      	adds	r3, #24
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d117      	bne.n	8005ed4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8005ea4:	6839      	ldr	r1, [r7, #0]
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 fb7b 	bl	80065a2 <USBD_CtlError>
                  break;
 8005eac:	e054      	b.n	8005f58 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005eae:	7bbb      	ldrb	r3, [r7, #14]
 8005eb0:	f003 020f 	and.w	r2, r3, #15
 8005eb4:	6879      	ldr	r1, [r7, #4]
 8005eb6:	4613      	mov	r3, r2
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	4413      	add	r3, r2
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	440b      	add	r3, r1
 8005ec0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d104      	bne.n	8005ed4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8005eca:	6839      	ldr	r1, [r7, #0]
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f000 fb68 	bl	80065a2 <USBD_CtlError>
                  break;
 8005ed2:	e041      	b.n	8005f58 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005ed4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	da0b      	bge.n	8005ef4 <USBD_StdEPReq+0x240>
 8005edc:	7bbb      	ldrb	r3, [r7, #14]
 8005ede:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005ee2:	4613      	mov	r3, r2
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	4413      	add	r3, r2
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	3310      	adds	r3, #16
 8005eec:	687a      	ldr	r2, [r7, #4]
 8005eee:	4413      	add	r3, r2
 8005ef0:	3304      	adds	r3, #4
 8005ef2:	e00b      	b.n	8005f0c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005ef4:	7bbb      	ldrb	r3, [r7, #14]
 8005ef6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005efa:	4613      	mov	r3, r2
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	4413      	add	r3, r2
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005f06:	687a      	ldr	r2, [r7, #4]
 8005f08:	4413      	add	r3, r2
 8005f0a:	3304      	adds	r3, #4
 8005f0c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005f0e:	7bbb      	ldrb	r3, [r7, #14]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d002      	beq.n	8005f1a <USBD_StdEPReq+0x266>
 8005f14:	7bbb      	ldrb	r3, [r7, #14]
 8005f16:	2b80      	cmp	r3, #128	; 0x80
 8005f18:	d103      	bne.n	8005f22 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	601a      	str	r2, [r3, #0]
 8005f20:	e00e      	b.n	8005f40 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8005f22:	7bbb      	ldrb	r3, [r7, #14]
 8005f24:	4619      	mov	r1, r3
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f000 fee8 	bl	8006cfc <USBD_LL_IsStallEP>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d003      	beq.n	8005f3a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	2201      	movs	r2, #1
 8005f36:	601a      	str	r2, [r3, #0]
 8005f38:	e002      	b.n	8005f40 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	2202      	movs	r2, #2
 8005f44:	4619      	mov	r1, r3
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 fb95 	bl	8006676 <USBD_CtlSendData>
              break;
 8005f4c:	e004      	b.n	8005f58 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8005f4e:	6839      	ldr	r1, [r7, #0]
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f000 fb26 	bl	80065a2 <USBD_CtlError>
              break;
 8005f56:	bf00      	nop
          }
          break;
 8005f58:	e004      	b.n	8005f64 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8005f5a:	6839      	ldr	r1, [r7, #0]
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f000 fb20 	bl	80065a2 <USBD_CtlError>
          break;
 8005f62:	bf00      	nop
      }
      break;
 8005f64:	e004      	b.n	8005f70 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8005f66:	6839      	ldr	r1, [r7, #0]
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f000 fb1a 	bl	80065a2 <USBD_CtlError>
      break;
 8005f6e:	bf00      	nop
  }

  return ret;
 8005f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3710      	adds	r7, #16
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
	...

08005f7c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b084      	sub	sp, #16
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005f86:	2300      	movs	r3, #0
 8005f88:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	885b      	ldrh	r3, [r3, #2]
 8005f96:	0a1b      	lsrs	r3, r3, #8
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	3b01      	subs	r3, #1
 8005f9c:	2b06      	cmp	r3, #6
 8005f9e:	f200 8128 	bhi.w	80061f2 <USBD_GetDescriptor+0x276>
 8005fa2:	a201      	add	r2, pc, #4	; (adr r2, 8005fa8 <USBD_GetDescriptor+0x2c>)
 8005fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fa8:	08005fc5 	.word	0x08005fc5
 8005fac:	08005fdd 	.word	0x08005fdd
 8005fb0:	0800601d 	.word	0x0800601d
 8005fb4:	080061f3 	.word	0x080061f3
 8005fb8:	080061f3 	.word	0x080061f3
 8005fbc:	08006193 	.word	0x08006193
 8005fc0:	080061bf 	.word	0x080061bf
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	687a      	ldr	r2, [r7, #4]
 8005fce:	7c12      	ldrb	r2, [r2, #16]
 8005fd0:	f107 0108 	add.w	r1, r7, #8
 8005fd4:	4610      	mov	r0, r2
 8005fd6:	4798      	blx	r3
 8005fd8:	60f8      	str	r0, [r7, #12]
      break;
 8005fda:	e112      	b.n	8006202 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	7c1b      	ldrb	r3, [r3, #16]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d10d      	bne.n	8006000 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fec:	f107 0208 	add.w	r2, r7, #8
 8005ff0:	4610      	mov	r0, r2
 8005ff2:	4798      	blx	r3
 8005ff4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	3301      	adds	r3, #1
 8005ffa:	2202      	movs	r2, #2
 8005ffc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005ffe:	e100      	b.n	8006202 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006008:	f107 0208 	add.w	r2, r7, #8
 800600c:	4610      	mov	r0, r2
 800600e:	4798      	blx	r3
 8006010:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	3301      	adds	r3, #1
 8006016:	2202      	movs	r2, #2
 8006018:	701a      	strb	r2, [r3, #0]
      break;
 800601a:	e0f2      	b.n	8006202 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	885b      	ldrh	r3, [r3, #2]
 8006020:	b2db      	uxtb	r3, r3
 8006022:	2b05      	cmp	r3, #5
 8006024:	f200 80ac 	bhi.w	8006180 <USBD_GetDescriptor+0x204>
 8006028:	a201      	add	r2, pc, #4	; (adr r2, 8006030 <USBD_GetDescriptor+0xb4>)
 800602a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800602e:	bf00      	nop
 8006030:	08006049 	.word	0x08006049
 8006034:	0800607d 	.word	0x0800607d
 8006038:	080060b1 	.word	0x080060b1
 800603c:	080060e5 	.word	0x080060e5
 8006040:	08006119 	.word	0x08006119
 8006044:	0800614d 	.word	0x0800614d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d00b      	beq.n	800606c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	687a      	ldr	r2, [r7, #4]
 800605e:	7c12      	ldrb	r2, [r2, #16]
 8006060:	f107 0108 	add.w	r1, r7, #8
 8006064:	4610      	mov	r0, r2
 8006066:	4798      	blx	r3
 8006068:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800606a:	e091      	b.n	8006190 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800606c:	6839      	ldr	r1, [r7, #0]
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f000 fa97 	bl	80065a2 <USBD_CtlError>
            err++;
 8006074:	7afb      	ldrb	r3, [r7, #11]
 8006076:	3301      	adds	r3, #1
 8006078:	72fb      	strb	r3, [r7, #11]
          break;
 800607a:	e089      	b.n	8006190 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d00b      	beq.n	80060a0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	687a      	ldr	r2, [r7, #4]
 8006092:	7c12      	ldrb	r2, [r2, #16]
 8006094:	f107 0108 	add.w	r1, r7, #8
 8006098:	4610      	mov	r0, r2
 800609a:	4798      	blx	r3
 800609c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800609e:	e077      	b.n	8006190 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80060a0:	6839      	ldr	r1, [r7, #0]
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 fa7d 	bl	80065a2 <USBD_CtlError>
            err++;
 80060a8:	7afb      	ldrb	r3, [r7, #11]
 80060aa:	3301      	adds	r3, #1
 80060ac:	72fb      	strb	r3, [r7, #11]
          break;
 80060ae:	e06f      	b.n	8006190 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80060b6:	68db      	ldr	r3, [r3, #12]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d00b      	beq.n	80060d4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80060c2:	68db      	ldr	r3, [r3, #12]
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	7c12      	ldrb	r2, [r2, #16]
 80060c8:	f107 0108 	add.w	r1, r7, #8
 80060cc:	4610      	mov	r0, r2
 80060ce:	4798      	blx	r3
 80060d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80060d2:	e05d      	b.n	8006190 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80060d4:	6839      	ldr	r1, [r7, #0]
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f000 fa63 	bl	80065a2 <USBD_CtlError>
            err++;
 80060dc:	7afb      	ldrb	r3, [r7, #11]
 80060de:	3301      	adds	r3, #1
 80060e0:	72fb      	strb	r3, [r7, #11]
          break;
 80060e2:	e055      	b.n	8006190 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80060ea:	691b      	ldr	r3, [r3, #16]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d00b      	beq.n	8006108 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80060f6:	691b      	ldr	r3, [r3, #16]
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	7c12      	ldrb	r2, [r2, #16]
 80060fc:	f107 0108 	add.w	r1, r7, #8
 8006100:	4610      	mov	r0, r2
 8006102:	4798      	blx	r3
 8006104:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006106:	e043      	b.n	8006190 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006108:	6839      	ldr	r1, [r7, #0]
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 fa49 	bl	80065a2 <USBD_CtlError>
            err++;
 8006110:	7afb      	ldrb	r3, [r7, #11]
 8006112:	3301      	adds	r3, #1
 8006114:	72fb      	strb	r3, [r7, #11]
          break;
 8006116:	e03b      	b.n	8006190 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800611e:	695b      	ldr	r3, [r3, #20]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d00b      	beq.n	800613c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800612a:	695b      	ldr	r3, [r3, #20]
 800612c:	687a      	ldr	r2, [r7, #4]
 800612e:	7c12      	ldrb	r2, [r2, #16]
 8006130:	f107 0108 	add.w	r1, r7, #8
 8006134:	4610      	mov	r0, r2
 8006136:	4798      	blx	r3
 8006138:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800613a:	e029      	b.n	8006190 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800613c:	6839      	ldr	r1, [r7, #0]
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 fa2f 	bl	80065a2 <USBD_CtlError>
            err++;
 8006144:	7afb      	ldrb	r3, [r7, #11]
 8006146:	3301      	adds	r3, #1
 8006148:	72fb      	strb	r3, [r7, #11]
          break;
 800614a:	e021      	b.n	8006190 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006152:	699b      	ldr	r3, [r3, #24]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d00b      	beq.n	8006170 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800615e:	699b      	ldr	r3, [r3, #24]
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	7c12      	ldrb	r2, [r2, #16]
 8006164:	f107 0108 	add.w	r1, r7, #8
 8006168:	4610      	mov	r0, r2
 800616a:	4798      	blx	r3
 800616c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800616e:	e00f      	b.n	8006190 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006170:	6839      	ldr	r1, [r7, #0]
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f000 fa15 	bl	80065a2 <USBD_CtlError>
            err++;
 8006178:	7afb      	ldrb	r3, [r7, #11]
 800617a:	3301      	adds	r3, #1
 800617c:	72fb      	strb	r3, [r7, #11]
          break;
 800617e:	e007      	b.n	8006190 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006180:	6839      	ldr	r1, [r7, #0]
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 fa0d 	bl	80065a2 <USBD_CtlError>
          err++;
 8006188:	7afb      	ldrb	r3, [r7, #11]
 800618a:	3301      	adds	r3, #1
 800618c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800618e:	e038      	b.n	8006202 <USBD_GetDescriptor+0x286>
 8006190:	e037      	b.n	8006202 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	7c1b      	ldrb	r3, [r3, #16]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d109      	bne.n	80061ae <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061a2:	f107 0208 	add.w	r2, r7, #8
 80061a6:	4610      	mov	r0, r2
 80061a8:	4798      	blx	r3
 80061aa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80061ac:	e029      	b.n	8006202 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80061ae:	6839      	ldr	r1, [r7, #0]
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f000 f9f6 	bl	80065a2 <USBD_CtlError>
        err++;
 80061b6:	7afb      	ldrb	r3, [r7, #11]
 80061b8:	3301      	adds	r3, #1
 80061ba:	72fb      	strb	r3, [r7, #11]
      break;
 80061bc:	e021      	b.n	8006202 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	7c1b      	ldrb	r3, [r3, #16]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d10d      	bne.n	80061e2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ce:	f107 0208 	add.w	r2, r7, #8
 80061d2:	4610      	mov	r0, r2
 80061d4:	4798      	blx	r3
 80061d6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	3301      	adds	r3, #1
 80061dc:	2207      	movs	r2, #7
 80061de:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80061e0:	e00f      	b.n	8006202 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80061e2:	6839      	ldr	r1, [r7, #0]
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f000 f9dc 	bl	80065a2 <USBD_CtlError>
        err++;
 80061ea:	7afb      	ldrb	r3, [r7, #11]
 80061ec:	3301      	adds	r3, #1
 80061ee:	72fb      	strb	r3, [r7, #11]
      break;
 80061f0:	e007      	b.n	8006202 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80061f2:	6839      	ldr	r1, [r7, #0]
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 f9d4 	bl	80065a2 <USBD_CtlError>
      err++;
 80061fa:	7afb      	ldrb	r3, [r7, #11]
 80061fc:	3301      	adds	r3, #1
 80061fe:	72fb      	strb	r3, [r7, #11]
      break;
 8006200:	bf00      	nop
  }

  if (err != 0U)
 8006202:	7afb      	ldrb	r3, [r7, #11]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d11c      	bne.n	8006242 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006208:	893b      	ldrh	r3, [r7, #8]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d011      	beq.n	8006232 <USBD_GetDescriptor+0x2b6>
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	88db      	ldrh	r3, [r3, #6]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d00d      	beq.n	8006232 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	88da      	ldrh	r2, [r3, #6]
 800621a:	893b      	ldrh	r3, [r7, #8]
 800621c:	4293      	cmp	r3, r2
 800621e:	bf28      	it	cs
 8006220:	4613      	movcs	r3, r2
 8006222:	b29b      	uxth	r3, r3
 8006224:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006226:	893b      	ldrh	r3, [r7, #8]
 8006228:	461a      	mov	r2, r3
 800622a:	68f9      	ldr	r1, [r7, #12]
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f000 fa22 	bl	8006676 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	88db      	ldrh	r3, [r3, #6]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d104      	bne.n	8006244 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f000 fa5b 	bl	80066f6 <USBD_CtlSendStatus>
 8006240:	e000      	b.n	8006244 <USBD_GetDescriptor+0x2c8>
    return;
 8006242:	bf00      	nop
    }
  }
}
 8006244:	3710      	adds	r7, #16
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
 800624a:	bf00      	nop

0800624c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b084      	sub	sp, #16
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	889b      	ldrh	r3, [r3, #4]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d130      	bne.n	80062c0 <USBD_SetAddress+0x74>
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	88db      	ldrh	r3, [r3, #6]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d12c      	bne.n	80062c0 <USBD_SetAddress+0x74>
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	885b      	ldrh	r3, [r3, #2]
 800626a:	2b7f      	cmp	r3, #127	; 0x7f
 800626c:	d828      	bhi.n	80062c0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	885b      	ldrh	r3, [r3, #2]
 8006272:	b2db      	uxtb	r3, r3
 8006274:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006278:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006280:	2b03      	cmp	r3, #3
 8006282:	d104      	bne.n	800628e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006284:	6839      	ldr	r1, [r7, #0]
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f000 f98b 	bl	80065a2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800628c:	e01d      	b.n	80062ca <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	7bfa      	ldrb	r2, [r7, #15]
 8006292:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006296:	7bfb      	ldrb	r3, [r7, #15]
 8006298:	4619      	mov	r1, r3
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f000 fd5a 	bl	8006d54 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f000 fa28 	bl	80066f6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80062a6:	7bfb      	ldrb	r3, [r7, #15]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d004      	beq.n	80062b6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2202      	movs	r2, #2
 80062b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062b4:	e009      	b.n	80062ca <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2201      	movs	r2, #1
 80062ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062be:	e004      	b.n	80062ca <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80062c0:	6839      	ldr	r1, [r7, #0]
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 f96d 	bl	80065a2 <USBD_CtlError>
  }
}
 80062c8:	bf00      	nop
 80062ca:	bf00      	nop
 80062cc:	3710      	adds	r7, #16
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}
	...

080062d4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b082      	sub	sp, #8
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	885b      	ldrh	r3, [r3, #2]
 80062e2:	b2da      	uxtb	r2, r3
 80062e4:	4b41      	ldr	r3, [pc, #260]	; (80063ec <USBD_SetConfig+0x118>)
 80062e6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80062e8:	4b40      	ldr	r3, [pc, #256]	; (80063ec <USBD_SetConfig+0x118>)
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d904      	bls.n	80062fa <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80062f0:	6839      	ldr	r1, [r7, #0]
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f000 f955 	bl	80065a2 <USBD_CtlError>
 80062f8:	e075      	b.n	80063e6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006300:	2b02      	cmp	r3, #2
 8006302:	d002      	beq.n	800630a <USBD_SetConfig+0x36>
 8006304:	2b03      	cmp	r3, #3
 8006306:	d023      	beq.n	8006350 <USBD_SetConfig+0x7c>
 8006308:	e062      	b.n	80063d0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800630a:	4b38      	ldr	r3, [pc, #224]	; (80063ec <USBD_SetConfig+0x118>)
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d01a      	beq.n	8006348 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8006312:	4b36      	ldr	r3, [pc, #216]	; (80063ec <USBD_SetConfig+0x118>)
 8006314:	781b      	ldrb	r3, [r3, #0]
 8006316:	461a      	mov	r2, r3
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2203      	movs	r2, #3
 8006320:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006324:	4b31      	ldr	r3, [pc, #196]	; (80063ec <USBD_SetConfig+0x118>)
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	4619      	mov	r1, r3
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f7ff f9e8 	bl	8005700 <USBD_SetClassConfig>
 8006330:	4603      	mov	r3, r0
 8006332:	2b02      	cmp	r3, #2
 8006334:	d104      	bne.n	8006340 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8006336:	6839      	ldr	r1, [r7, #0]
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f000 f932 	bl	80065a2 <USBD_CtlError>
            return;
 800633e:	e052      	b.n	80063e6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f000 f9d8 	bl	80066f6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006346:	e04e      	b.n	80063e6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f000 f9d4 	bl	80066f6 <USBD_CtlSendStatus>
        break;
 800634e:	e04a      	b.n	80063e6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006350:	4b26      	ldr	r3, [pc, #152]	; (80063ec <USBD_SetConfig+0x118>)
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d112      	bne.n	800637e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2202      	movs	r2, #2
 800635c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8006360:	4b22      	ldr	r3, [pc, #136]	; (80063ec <USBD_SetConfig+0x118>)
 8006362:	781b      	ldrb	r3, [r3, #0]
 8006364:	461a      	mov	r2, r3
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800636a:	4b20      	ldr	r3, [pc, #128]	; (80063ec <USBD_SetConfig+0x118>)
 800636c:	781b      	ldrb	r3, [r3, #0]
 800636e:	4619      	mov	r1, r3
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f7ff f9e4 	bl	800573e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f000 f9bd 	bl	80066f6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800637c:	e033      	b.n	80063e6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800637e:	4b1b      	ldr	r3, [pc, #108]	; (80063ec <USBD_SetConfig+0x118>)
 8006380:	781b      	ldrb	r3, [r3, #0]
 8006382:	461a      	mov	r2, r3
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	429a      	cmp	r2, r3
 800638a:	d01d      	beq.n	80063c8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	b2db      	uxtb	r3, r3
 8006392:	4619      	mov	r1, r3
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f7ff f9d2 	bl	800573e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800639a:	4b14      	ldr	r3, [pc, #80]	; (80063ec <USBD_SetConfig+0x118>)
 800639c:	781b      	ldrb	r3, [r3, #0]
 800639e:	461a      	mov	r2, r3
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80063a4:	4b11      	ldr	r3, [pc, #68]	; (80063ec <USBD_SetConfig+0x118>)
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	4619      	mov	r1, r3
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f7ff f9a8 	bl	8005700 <USBD_SetClassConfig>
 80063b0:	4603      	mov	r3, r0
 80063b2:	2b02      	cmp	r3, #2
 80063b4:	d104      	bne.n	80063c0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80063b6:	6839      	ldr	r1, [r7, #0]
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f000 f8f2 	bl	80065a2 <USBD_CtlError>
            return;
 80063be:	e012      	b.n	80063e6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f000 f998 	bl	80066f6 <USBD_CtlSendStatus>
        break;
 80063c6:	e00e      	b.n	80063e6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f000 f994 	bl	80066f6 <USBD_CtlSendStatus>
        break;
 80063ce:	e00a      	b.n	80063e6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80063d0:	6839      	ldr	r1, [r7, #0]
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 f8e5 	bl	80065a2 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80063d8:	4b04      	ldr	r3, [pc, #16]	; (80063ec <USBD_SetConfig+0x118>)
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	4619      	mov	r1, r3
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f7ff f9ad 	bl	800573e <USBD_ClrClassConfig>
        break;
 80063e4:	bf00      	nop
    }
  }
}
 80063e6:	3708      	adds	r7, #8
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}
 80063ec:	20000180 	.word	0x20000180

080063f0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b082      	sub	sp, #8
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	88db      	ldrh	r3, [r3, #6]
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d004      	beq.n	800640c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006402:	6839      	ldr	r1, [r7, #0]
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f000 f8cc 	bl	80065a2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800640a:	e022      	b.n	8006452 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006412:	2b02      	cmp	r3, #2
 8006414:	dc02      	bgt.n	800641c <USBD_GetConfig+0x2c>
 8006416:	2b00      	cmp	r3, #0
 8006418:	dc03      	bgt.n	8006422 <USBD_GetConfig+0x32>
 800641a:	e015      	b.n	8006448 <USBD_GetConfig+0x58>
 800641c:	2b03      	cmp	r3, #3
 800641e:	d00b      	beq.n	8006438 <USBD_GetConfig+0x48>
 8006420:	e012      	b.n	8006448 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2200      	movs	r2, #0
 8006426:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	3308      	adds	r3, #8
 800642c:	2201      	movs	r2, #1
 800642e:	4619      	mov	r1, r3
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f000 f920 	bl	8006676 <USBD_CtlSendData>
        break;
 8006436:	e00c      	b.n	8006452 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	3304      	adds	r3, #4
 800643c:	2201      	movs	r2, #1
 800643e:	4619      	mov	r1, r3
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f000 f918 	bl	8006676 <USBD_CtlSendData>
        break;
 8006446:	e004      	b.n	8006452 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8006448:	6839      	ldr	r1, [r7, #0]
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f000 f8a9 	bl	80065a2 <USBD_CtlError>
        break;
 8006450:	bf00      	nop
}
 8006452:	bf00      	nop
 8006454:	3708      	adds	r7, #8
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}

0800645a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800645a:	b580      	push	{r7, lr}
 800645c:	b082      	sub	sp, #8
 800645e:	af00      	add	r7, sp, #0
 8006460:	6078      	str	r0, [r7, #4]
 8006462:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800646a:	3b01      	subs	r3, #1
 800646c:	2b02      	cmp	r3, #2
 800646e:	d81e      	bhi.n	80064ae <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	88db      	ldrh	r3, [r3, #6]
 8006474:	2b02      	cmp	r3, #2
 8006476:	d004      	beq.n	8006482 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8006478:	6839      	ldr	r1, [r7, #0]
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f000 f891 	bl	80065a2 <USBD_CtlError>
        break;
 8006480:	e01a      	b.n	80064b8 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2201      	movs	r2, #1
 8006486:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800648e:	2b00      	cmp	r3, #0
 8006490:	d005      	beq.n	800649e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	68db      	ldr	r3, [r3, #12]
 8006496:	f043 0202 	orr.w	r2, r3, #2
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	330c      	adds	r3, #12
 80064a2:	2202      	movs	r2, #2
 80064a4:	4619      	mov	r1, r3
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 f8e5 	bl	8006676 <USBD_CtlSendData>
      break;
 80064ac:	e004      	b.n	80064b8 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80064ae:	6839      	ldr	r1, [r7, #0]
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f000 f876 	bl	80065a2 <USBD_CtlError>
      break;
 80064b6:	bf00      	nop
  }
}
 80064b8:	bf00      	nop
 80064ba:	3708      	adds	r7, #8
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}

080064c0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b082      	sub	sp, #8
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	885b      	ldrh	r3, [r3, #2]
 80064ce:	2b01      	cmp	r3, #1
 80064d0:	d106      	bne.n	80064e0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2201      	movs	r2, #1
 80064d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f000 f90b 	bl	80066f6 <USBD_CtlSendStatus>
  }
}
 80064e0:	bf00      	nop
 80064e2:	3708      	adds	r7, #8
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}

080064e8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b082      	sub	sp, #8
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064f8:	3b01      	subs	r3, #1
 80064fa:	2b02      	cmp	r3, #2
 80064fc:	d80b      	bhi.n	8006516 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	885b      	ldrh	r3, [r3, #2]
 8006502:	2b01      	cmp	r3, #1
 8006504:	d10c      	bne.n	8006520 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2200      	movs	r2, #0
 800650a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 f8f1 	bl	80066f6 <USBD_CtlSendStatus>
      }
      break;
 8006514:	e004      	b.n	8006520 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006516:	6839      	ldr	r1, [r7, #0]
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f000 f842 	bl	80065a2 <USBD_CtlError>
      break;
 800651e:	e000      	b.n	8006522 <USBD_ClrFeature+0x3a>
      break;
 8006520:	bf00      	nop
  }
}
 8006522:	bf00      	nop
 8006524:	3708      	adds	r7, #8
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}

0800652a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800652a:	b480      	push	{r7}
 800652c:	b083      	sub	sp, #12
 800652e:	af00      	add	r7, sp, #0
 8006530:	6078      	str	r0, [r7, #4]
 8006532:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	781a      	ldrb	r2, [r3, #0]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	785a      	ldrb	r2, [r3, #1]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	3302      	adds	r3, #2
 8006548:	781b      	ldrb	r3, [r3, #0]
 800654a:	b29a      	uxth	r2, r3
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	3303      	adds	r3, #3
 8006550:	781b      	ldrb	r3, [r3, #0]
 8006552:	b29b      	uxth	r3, r3
 8006554:	021b      	lsls	r3, r3, #8
 8006556:	b29b      	uxth	r3, r3
 8006558:	4413      	add	r3, r2
 800655a:	b29a      	uxth	r2, r3
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	3304      	adds	r3, #4
 8006564:	781b      	ldrb	r3, [r3, #0]
 8006566:	b29a      	uxth	r2, r3
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	3305      	adds	r3, #5
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	b29b      	uxth	r3, r3
 8006570:	021b      	lsls	r3, r3, #8
 8006572:	b29b      	uxth	r3, r3
 8006574:	4413      	add	r3, r2
 8006576:	b29a      	uxth	r2, r3
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	3306      	adds	r3, #6
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	b29a      	uxth	r2, r3
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	3307      	adds	r3, #7
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	b29b      	uxth	r3, r3
 800658c:	021b      	lsls	r3, r3, #8
 800658e:	b29b      	uxth	r3, r3
 8006590:	4413      	add	r3, r2
 8006592:	b29a      	uxth	r2, r3
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	80da      	strh	r2, [r3, #6]

}
 8006598:	bf00      	nop
 800659a:	370c      	adds	r7, #12
 800659c:	46bd      	mov	sp, r7
 800659e:	bc80      	pop	{r7}
 80065a0:	4770      	bx	lr

080065a2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80065a2:	b580      	push	{r7, lr}
 80065a4:	b082      	sub	sp, #8
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	6078      	str	r0, [r7, #4]
 80065aa:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80065ac:	2180      	movs	r1, #128	; 0x80
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f000 fb66 	bl	8006c80 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80065b4:	2100      	movs	r1, #0
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 fb62 	bl	8006c80 <USBD_LL_StallEP>
}
 80065bc:	bf00      	nop
 80065be:	3708      	adds	r7, #8
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}

080065c4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b086      	sub	sp, #24
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	60f8      	str	r0, [r7, #12]
 80065cc:	60b9      	str	r1, [r7, #8]
 80065ce:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80065d0:	2300      	movs	r3, #0
 80065d2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d032      	beq.n	8006640 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80065da:	68f8      	ldr	r0, [r7, #12]
 80065dc:	f000 f834 	bl	8006648 <USBD_GetLen>
 80065e0:	4603      	mov	r3, r0
 80065e2:	3301      	adds	r3, #1
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	005b      	lsls	r3, r3, #1
 80065e8:	b29a      	uxth	r2, r3
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80065ee:	7dfb      	ldrb	r3, [r7, #23]
 80065f0:	1c5a      	adds	r2, r3, #1
 80065f2:	75fa      	strb	r2, [r7, #23]
 80065f4:	461a      	mov	r2, r3
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	4413      	add	r3, r2
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	7812      	ldrb	r2, [r2, #0]
 80065fe:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006600:	7dfb      	ldrb	r3, [r7, #23]
 8006602:	1c5a      	adds	r2, r3, #1
 8006604:	75fa      	strb	r2, [r7, #23]
 8006606:	461a      	mov	r2, r3
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	4413      	add	r3, r2
 800660c:	2203      	movs	r2, #3
 800660e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006610:	e012      	b.n	8006638 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	1c5a      	adds	r2, r3, #1
 8006616:	60fa      	str	r2, [r7, #12]
 8006618:	7dfa      	ldrb	r2, [r7, #23]
 800661a:	1c51      	adds	r1, r2, #1
 800661c:	75f9      	strb	r1, [r7, #23]
 800661e:	4611      	mov	r1, r2
 8006620:	68ba      	ldr	r2, [r7, #8]
 8006622:	440a      	add	r2, r1
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006628:	7dfb      	ldrb	r3, [r7, #23]
 800662a:	1c5a      	adds	r2, r3, #1
 800662c:	75fa      	strb	r2, [r7, #23]
 800662e:	461a      	mov	r2, r3
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	4413      	add	r3, r2
 8006634:	2200      	movs	r2, #0
 8006636:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d1e8      	bne.n	8006612 <USBD_GetString+0x4e>
    }
  }
}
 8006640:	bf00      	nop
 8006642:	3718      	adds	r7, #24
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}

08006648 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006648:	b480      	push	{r7}
 800664a:	b085      	sub	sp, #20
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006650:	2300      	movs	r3, #0
 8006652:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8006654:	e005      	b.n	8006662 <USBD_GetLen+0x1a>
  {
    len++;
 8006656:	7bfb      	ldrb	r3, [r7, #15]
 8006658:	3301      	adds	r3, #1
 800665a:	73fb      	strb	r3, [r7, #15]
    buf++;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	3301      	adds	r3, #1
 8006660:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d1f5      	bne.n	8006656 <USBD_GetLen+0xe>
  }

  return len;
 800666a:	7bfb      	ldrb	r3, [r7, #15]
}
 800666c:	4618      	mov	r0, r3
 800666e:	3714      	adds	r7, #20
 8006670:	46bd      	mov	sp, r7
 8006672:	bc80      	pop	{r7}
 8006674:	4770      	bx	lr

08006676 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006676:	b580      	push	{r7, lr}
 8006678:	b084      	sub	sp, #16
 800667a:	af00      	add	r7, sp, #0
 800667c:	60f8      	str	r0, [r7, #12]
 800667e:	60b9      	str	r1, [r7, #8]
 8006680:	4613      	mov	r3, r2
 8006682:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2202      	movs	r2, #2
 8006688:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800668c:	88fa      	ldrh	r2, [r7, #6]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006692:	88fa      	ldrh	r2, [r7, #6]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006698:	88fb      	ldrh	r3, [r7, #6]
 800669a:	68ba      	ldr	r2, [r7, #8]
 800669c:	2100      	movs	r1, #0
 800669e:	68f8      	ldr	r0, [r7, #12]
 80066a0:	f000 fb77 	bl	8006d92 <USBD_LL_Transmit>

  return USBD_OK;
 80066a4:	2300      	movs	r3, #0
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3710      	adds	r7, #16
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}

080066ae <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80066ae:	b580      	push	{r7, lr}
 80066b0:	b084      	sub	sp, #16
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	60f8      	str	r0, [r7, #12]
 80066b6:	60b9      	str	r1, [r7, #8]
 80066b8:	4613      	mov	r3, r2
 80066ba:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80066bc:	88fb      	ldrh	r3, [r7, #6]
 80066be:	68ba      	ldr	r2, [r7, #8]
 80066c0:	2100      	movs	r1, #0
 80066c2:	68f8      	ldr	r0, [r7, #12]
 80066c4:	f000 fb65 	bl	8006d92 <USBD_LL_Transmit>

  return USBD_OK;
 80066c8:	2300      	movs	r3, #0
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3710      	adds	r7, #16
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}

080066d2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80066d2:	b580      	push	{r7, lr}
 80066d4:	b084      	sub	sp, #16
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	60f8      	str	r0, [r7, #12]
 80066da:	60b9      	str	r1, [r7, #8]
 80066dc:	4613      	mov	r3, r2
 80066de:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80066e0:	88fb      	ldrh	r3, [r7, #6]
 80066e2:	68ba      	ldr	r2, [r7, #8]
 80066e4:	2100      	movs	r1, #0
 80066e6:	68f8      	ldr	r0, [r7, #12]
 80066e8:	f000 fb76 	bl	8006dd8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80066ec:	2300      	movs	r3, #0
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3710      	adds	r7, #16
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}

080066f6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80066f6:	b580      	push	{r7, lr}
 80066f8:	b082      	sub	sp, #8
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2204      	movs	r2, #4
 8006702:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006706:	2300      	movs	r3, #0
 8006708:	2200      	movs	r2, #0
 800670a:	2100      	movs	r1, #0
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f000 fb40 	bl	8006d92 <USBD_LL_Transmit>

  return USBD_OK;
 8006712:	2300      	movs	r3, #0
}
 8006714:	4618      	mov	r0, r3
 8006716:	3708      	adds	r7, #8
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}

0800671c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b082      	sub	sp, #8
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2205      	movs	r2, #5
 8006728:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800672c:	2300      	movs	r3, #0
 800672e:	2200      	movs	r2, #0
 8006730:	2100      	movs	r1, #0
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f000 fb50 	bl	8006dd8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006738:	2300      	movs	r3, #0
}
 800673a:	4618      	mov	r0, r3
 800673c:	3708      	adds	r7, #8
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
	...

08006744 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006748:	2200      	movs	r2, #0
 800674a:	490e      	ldr	r1, [pc, #56]	; (8006784 <MX_USB_DEVICE_Init+0x40>)
 800674c:	480e      	ldr	r0, [pc, #56]	; (8006788 <MX_USB_DEVICE_Init+0x44>)
 800674e:	f7fe ff7d 	bl	800564c <USBD_Init>
 8006752:	4603      	mov	r3, r0
 8006754:	2b00      	cmp	r3, #0
 8006756:	d001      	beq.n	800675c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006758:	f7f9 fe08 	bl	800036c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800675c:	490b      	ldr	r1, [pc, #44]	; (800678c <MX_USB_DEVICE_Init+0x48>)
 800675e:	480a      	ldr	r0, [pc, #40]	; (8006788 <MX_USB_DEVICE_Init+0x44>)
 8006760:	f7fe ff9f 	bl	80056a2 <USBD_RegisterClass>
 8006764:	4603      	mov	r3, r0
 8006766:	2b00      	cmp	r3, #0
 8006768:	d001      	beq.n	800676e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800676a:	f7f9 fdff 	bl	800036c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800676e:	4806      	ldr	r0, [pc, #24]	; (8006788 <MX_USB_DEVICE_Init+0x44>)
 8006770:	f7fe ffb0 	bl	80056d4 <USBD_Start>
 8006774:	4603      	mov	r3, r0
 8006776:	2b00      	cmp	r3, #0
 8006778:	d001      	beq.n	800677e <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800677a:	f7f9 fdf7 	bl	800036c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800677e:	bf00      	nop
 8006780:	bd80      	pop	{r7, pc}
 8006782:	bf00      	nop
 8006784:	20000108 	.word	0x20000108
 8006788:	2000019c 	.word	0x2000019c
 800678c:	2000000c 	.word	0x2000000c

08006790 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006790:	b480      	push	{r7}
 8006792:	b083      	sub	sp, #12
 8006794:	af00      	add	r7, sp, #0
 8006796:	4603      	mov	r3, r0
 8006798:	6039      	str	r1, [r7, #0]
 800679a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	2212      	movs	r2, #18
 80067a0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80067a2:	4b03      	ldr	r3, [pc, #12]	; (80067b0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	370c      	adds	r7, #12
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bc80      	pop	{r7}
 80067ac:	4770      	bx	lr
 80067ae:	bf00      	nop
 80067b0:	20000124 	.word	0x20000124

080067b4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b083      	sub	sp, #12
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	4603      	mov	r3, r0
 80067bc:	6039      	str	r1, [r7, #0]
 80067be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	2204      	movs	r2, #4
 80067c4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80067c6:	4b03      	ldr	r3, [pc, #12]	; (80067d4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	370c      	adds	r7, #12
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bc80      	pop	{r7}
 80067d0:	4770      	bx	lr
 80067d2:	bf00      	nop
 80067d4:	20000138 	.word	0x20000138

080067d8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b082      	sub	sp, #8
 80067dc:	af00      	add	r7, sp, #0
 80067de:	4603      	mov	r3, r0
 80067e0:	6039      	str	r1, [r7, #0]
 80067e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80067e4:	79fb      	ldrb	r3, [r7, #7]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d105      	bne.n	80067f6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80067ea:	683a      	ldr	r2, [r7, #0]
 80067ec:	4907      	ldr	r1, [pc, #28]	; (800680c <USBD_FS_ProductStrDescriptor+0x34>)
 80067ee:	4808      	ldr	r0, [pc, #32]	; (8006810 <USBD_FS_ProductStrDescriptor+0x38>)
 80067f0:	f7ff fee8 	bl	80065c4 <USBD_GetString>
 80067f4:	e004      	b.n	8006800 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80067f6:	683a      	ldr	r2, [r7, #0]
 80067f8:	4904      	ldr	r1, [pc, #16]	; (800680c <USBD_FS_ProductStrDescriptor+0x34>)
 80067fa:	4805      	ldr	r0, [pc, #20]	; (8006810 <USBD_FS_ProductStrDescriptor+0x38>)
 80067fc:	f7ff fee2 	bl	80065c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006800:	4b02      	ldr	r3, [pc, #8]	; (800680c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006802:	4618      	mov	r0, r3
 8006804:	3708      	adds	r7, #8
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}
 800680a:	bf00      	nop
 800680c:	20000460 	.word	0x20000460
 8006810:	08006f38 	.word	0x08006f38

08006814 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b082      	sub	sp, #8
 8006818:	af00      	add	r7, sp, #0
 800681a:	4603      	mov	r3, r0
 800681c:	6039      	str	r1, [r7, #0]
 800681e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006820:	683a      	ldr	r2, [r7, #0]
 8006822:	4904      	ldr	r1, [pc, #16]	; (8006834 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006824:	4804      	ldr	r0, [pc, #16]	; (8006838 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006826:	f7ff fecd 	bl	80065c4 <USBD_GetString>
  return USBD_StrDesc;
 800682a:	4b02      	ldr	r3, [pc, #8]	; (8006834 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800682c:	4618      	mov	r0, r3
 800682e:	3708      	adds	r7, #8
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}
 8006834:	20000460 	.word	0x20000460
 8006838:	08006f4c 	.word	0x08006f4c

0800683c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b082      	sub	sp, #8
 8006840:	af00      	add	r7, sp, #0
 8006842:	4603      	mov	r3, r0
 8006844:	6039      	str	r1, [r7, #0]
 8006846:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	221a      	movs	r2, #26
 800684c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800684e:	f000 f843 	bl	80068d8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006852:	4b02      	ldr	r3, [pc, #8]	; (800685c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006854:	4618      	mov	r0, r3
 8006856:	3708      	adds	r7, #8
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}
 800685c:	2000013c 	.word	0x2000013c

08006860 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b082      	sub	sp, #8
 8006864:	af00      	add	r7, sp, #0
 8006866:	4603      	mov	r3, r0
 8006868:	6039      	str	r1, [r7, #0]
 800686a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800686c:	79fb      	ldrb	r3, [r7, #7]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d105      	bne.n	800687e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006872:	683a      	ldr	r2, [r7, #0]
 8006874:	4907      	ldr	r1, [pc, #28]	; (8006894 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006876:	4808      	ldr	r0, [pc, #32]	; (8006898 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006878:	f7ff fea4 	bl	80065c4 <USBD_GetString>
 800687c:	e004      	b.n	8006888 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800687e:	683a      	ldr	r2, [r7, #0]
 8006880:	4904      	ldr	r1, [pc, #16]	; (8006894 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006882:	4805      	ldr	r0, [pc, #20]	; (8006898 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006884:	f7ff fe9e 	bl	80065c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006888:	4b02      	ldr	r3, [pc, #8]	; (8006894 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800688a:	4618      	mov	r0, r3
 800688c:	3708      	adds	r7, #8
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}
 8006892:	bf00      	nop
 8006894:	20000460 	.word	0x20000460
 8006898:	08006f60 	.word	0x08006f60

0800689c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b082      	sub	sp, #8
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	4603      	mov	r3, r0
 80068a4:	6039      	str	r1, [r7, #0]
 80068a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80068a8:	79fb      	ldrb	r3, [r7, #7]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d105      	bne.n	80068ba <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80068ae:	683a      	ldr	r2, [r7, #0]
 80068b0:	4907      	ldr	r1, [pc, #28]	; (80068d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80068b2:	4808      	ldr	r0, [pc, #32]	; (80068d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80068b4:	f7ff fe86 	bl	80065c4 <USBD_GetString>
 80068b8:	e004      	b.n	80068c4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80068ba:	683a      	ldr	r2, [r7, #0]
 80068bc:	4904      	ldr	r1, [pc, #16]	; (80068d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80068be:	4805      	ldr	r0, [pc, #20]	; (80068d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80068c0:	f7ff fe80 	bl	80065c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80068c4:	4b02      	ldr	r3, [pc, #8]	; (80068d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3708      	adds	r7, #8
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}
 80068ce:	bf00      	nop
 80068d0:	20000460 	.word	0x20000460
 80068d4:	08006f6c 	.word	0x08006f6c

080068d8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b084      	sub	sp, #16
 80068dc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80068de:	4b0f      	ldr	r3, [pc, #60]	; (800691c <Get_SerialNum+0x44>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80068e4:	4b0e      	ldr	r3, [pc, #56]	; (8006920 <Get_SerialNum+0x48>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80068ea:	4b0e      	ldr	r3, [pc, #56]	; (8006924 <Get_SerialNum+0x4c>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80068f0:	68fa      	ldr	r2, [r7, #12]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	4413      	add	r3, r2
 80068f6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d009      	beq.n	8006912 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80068fe:	2208      	movs	r2, #8
 8006900:	4909      	ldr	r1, [pc, #36]	; (8006928 <Get_SerialNum+0x50>)
 8006902:	68f8      	ldr	r0, [r7, #12]
 8006904:	f000 f814 	bl	8006930 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006908:	2204      	movs	r2, #4
 800690a:	4908      	ldr	r1, [pc, #32]	; (800692c <Get_SerialNum+0x54>)
 800690c:	68b8      	ldr	r0, [r7, #8]
 800690e:	f000 f80f 	bl	8006930 <IntToUnicode>
  }
}
 8006912:	bf00      	nop
 8006914:	3710      	adds	r7, #16
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}
 800691a:	bf00      	nop
 800691c:	1ffff7e8 	.word	0x1ffff7e8
 8006920:	1ffff7ec 	.word	0x1ffff7ec
 8006924:	1ffff7f0 	.word	0x1ffff7f0
 8006928:	2000013e 	.word	0x2000013e
 800692c:	2000014e 	.word	0x2000014e

08006930 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006930:	b480      	push	{r7}
 8006932:	b087      	sub	sp, #28
 8006934:	af00      	add	r7, sp, #0
 8006936:	60f8      	str	r0, [r7, #12]
 8006938:	60b9      	str	r1, [r7, #8]
 800693a:	4613      	mov	r3, r2
 800693c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800693e:	2300      	movs	r3, #0
 8006940:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006942:	2300      	movs	r3, #0
 8006944:	75fb      	strb	r3, [r7, #23]
 8006946:	e027      	b.n	8006998 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	0f1b      	lsrs	r3, r3, #28
 800694c:	2b09      	cmp	r3, #9
 800694e:	d80b      	bhi.n	8006968 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	0f1b      	lsrs	r3, r3, #28
 8006954:	b2da      	uxtb	r2, r3
 8006956:	7dfb      	ldrb	r3, [r7, #23]
 8006958:	005b      	lsls	r3, r3, #1
 800695a:	4619      	mov	r1, r3
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	440b      	add	r3, r1
 8006960:	3230      	adds	r2, #48	; 0x30
 8006962:	b2d2      	uxtb	r2, r2
 8006964:	701a      	strb	r2, [r3, #0]
 8006966:	e00a      	b.n	800697e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	0f1b      	lsrs	r3, r3, #28
 800696c:	b2da      	uxtb	r2, r3
 800696e:	7dfb      	ldrb	r3, [r7, #23]
 8006970:	005b      	lsls	r3, r3, #1
 8006972:	4619      	mov	r1, r3
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	440b      	add	r3, r1
 8006978:	3237      	adds	r2, #55	; 0x37
 800697a:	b2d2      	uxtb	r2, r2
 800697c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	011b      	lsls	r3, r3, #4
 8006982:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006984:	7dfb      	ldrb	r3, [r7, #23]
 8006986:	005b      	lsls	r3, r3, #1
 8006988:	3301      	adds	r3, #1
 800698a:	68ba      	ldr	r2, [r7, #8]
 800698c:	4413      	add	r3, r2
 800698e:	2200      	movs	r2, #0
 8006990:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006992:	7dfb      	ldrb	r3, [r7, #23]
 8006994:	3301      	adds	r3, #1
 8006996:	75fb      	strb	r3, [r7, #23]
 8006998:	7dfa      	ldrb	r2, [r7, #23]
 800699a:	79fb      	ldrb	r3, [r7, #7]
 800699c:	429a      	cmp	r2, r3
 800699e:	d3d3      	bcc.n	8006948 <IntToUnicode+0x18>
  }
}
 80069a0:	bf00      	nop
 80069a2:	bf00      	nop
 80069a4:	371c      	adds	r7, #28
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bc80      	pop	{r7}
 80069aa:	4770      	bx	lr

080069ac <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b084      	sub	sp, #16
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a0d      	ldr	r2, [pc, #52]	; (80069f0 <HAL_PCD_MspInit+0x44>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d113      	bne.n	80069e6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80069be:	4b0d      	ldr	r3, [pc, #52]	; (80069f4 <HAL_PCD_MspInit+0x48>)
 80069c0:	69db      	ldr	r3, [r3, #28]
 80069c2:	4a0c      	ldr	r2, [pc, #48]	; (80069f4 <HAL_PCD_MspInit+0x48>)
 80069c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80069c8:	61d3      	str	r3, [r2, #28]
 80069ca:	4b0a      	ldr	r3, [pc, #40]	; (80069f4 <HAL_PCD_MspInit+0x48>)
 80069cc:	69db      	ldr	r3, [r3, #28]
 80069ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80069d2:	60fb      	str	r3, [r7, #12]
 80069d4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80069d6:	2200      	movs	r2, #0
 80069d8:	2100      	movs	r1, #0
 80069da:	2014      	movs	r0, #20
 80069dc:	f7f9 feb9 	bl	8000752 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80069e0:	2014      	movs	r0, #20
 80069e2:	f7f9 fed2 	bl	800078a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80069e6:	bf00      	nop
 80069e8:	3710      	adds	r7, #16
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}
 80069ee:	bf00      	nop
 80069f0:	40005c00 	.word	0x40005c00
 80069f4:	40021000 	.word	0x40021000

080069f8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b082      	sub	sp, #8
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	4610      	mov	r0, r2
 8006a10:	f7fe fea8 	bl	8005764 <USBD_LL_SetupStage>
}
 8006a14:	bf00      	nop
 8006a16:	3708      	adds	r7, #8
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b082      	sub	sp, #8
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	460b      	mov	r3, r1
 8006a26:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8006a2e:	78fa      	ldrb	r2, [r7, #3]
 8006a30:	6879      	ldr	r1, [r7, #4]
 8006a32:	4613      	mov	r3, r2
 8006a34:	009b      	lsls	r3, r3, #2
 8006a36:	4413      	add	r3, r2
 8006a38:	00db      	lsls	r3, r3, #3
 8006a3a:	440b      	add	r3, r1
 8006a3c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	78fb      	ldrb	r3, [r7, #3]
 8006a44:	4619      	mov	r1, r3
 8006a46:	f7fe feda 	bl	80057fe <USBD_LL_DataOutStage>
}
 8006a4a:	bf00      	nop
 8006a4c:	3708      	adds	r7, #8
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}

08006a52 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a52:	b580      	push	{r7, lr}
 8006a54:	b082      	sub	sp, #8
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	6078      	str	r0, [r7, #4]
 8006a5a:	460b      	mov	r3, r1
 8006a5c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8006a64:	78fa      	ldrb	r2, [r7, #3]
 8006a66:	6879      	ldr	r1, [r7, #4]
 8006a68:	4613      	mov	r3, r2
 8006a6a:	009b      	lsls	r3, r3, #2
 8006a6c:	4413      	add	r3, r2
 8006a6e:	00db      	lsls	r3, r3, #3
 8006a70:	440b      	add	r3, r1
 8006a72:	333c      	adds	r3, #60	; 0x3c
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	78fb      	ldrb	r3, [r7, #3]
 8006a78:	4619      	mov	r1, r3
 8006a7a:	f7fe ff31 	bl	80058e0 <USBD_LL_DataInStage>
}
 8006a7e:	bf00      	nop
 8006a80:	3708      	adds	r7, #8
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}

08006a86 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a86:	b580      	push	{r7, lr}
 8006a88:	b082      	sub	sp, #8
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8006a94:	4618      	mov	r0, r3
 8006a96:	f7ff f841 	bl	8005b1c <USBD_LL_SOF>
}
 8006a9a:	bf00      	nop
 8006a9c:	3708      	adds	r7, #8
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}

08006aa2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006aa2:	b580      	push	{r7, lr}
 8006aa4:	b084      	sub	sp, #16
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	2b02      	cmp	r3, #2
 8006ab4:	d001      	beq.n	8006aba <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006ab6:	f7f9 fc59 	bl	800036c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8006ac0:	7bfa      	ldrb	r2, [r7, #15]
 8006ac2:	4611      	mov	r1, r2
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f7fe fff1 	bl	8005aac <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f7fe ffaa 	bl	8005a2a <USBD_LL_Reset>
}
 8006ad6:	bf00      	nop
 8006ad8:	3710      	adds	r7, #16
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}
	...

08006ae0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b082      	sub	sp, #8
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8006aee:	4618      	mov	r0, r3
 8006af0:	f7fe ffeb 	bl	8005aca <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	699b      	ldr	r3, [r3, #24]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d005      	beq.n	8006b08 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006afc:	4b04      	ldr	r3, [pc, #16]	; (8006b10 <HAL_PCD_SuspendCallback+0x30>)
 8006afe:	691b      	ldr	r3, [r3, #16]
 8006b00:	4a03      	ldr	r2, [pc, #12]	; (8006b10 <HAL_PCD_SuspendCallback+0x30>)
 8006b02:	f043 0306 	orr.w	r3, r3, #6
 8006b06:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006b08:	bf00      	nop
 8006b0a:	3708      	adds	r7, #8
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}
 8006b10:	e000ed00 	.word	0xe000ed00

08006b14 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b082      	sub	sp, #8
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8006b22:	4618      	mov	r0, r3
 8006b24:	f7fe ffe5 	bl	8005af2 <USBD_LL_Resume>
}
 8006b28:	bf00      	nop
 8006b2a:	3708      	adds	r7, #8
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}

08006b30 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b082      	sub	sp, #8
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8006b38:	4a1f      	ldr	r2, [pc, #124]	; (8006bb8 <USBD_LL_Init+0x88>)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	4a1d      	ldr	r2, [pc, #116]	; (8006bb8 <USBD_LL_Init+0x88>)
 8006b44:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8006b48:	4b1b      	ldr	r3, [pc, #108]	; (8006bb8 <USBD_LL_Init+0x88>)
 8006b4a:	4a1c      	ldr	r2, [pc, #112]	; (8006bbc <USBD_LL_Init+0x8c>)
 8006b4c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006b4e:	4b1a      	ldr	r3, [pc, #104]	; (8006bb8 <USBD_LL_Init+0x88>)
 8006b50:	2208      	movs	r2, #8
 8006b52:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006b54:	4b18      	ldr	r3, [pc, #96]	; (8006bb8 <USBD_LL_Init+0x88>)
 8006b56:	2202      	movs	r2, #2
 8006b58:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8006b5a:	4b17      	ldr	r3, [pc, #92]	; (8006bb8 <USBD_LL_Init+0x88>)
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8006b60:	4b15      	ldr	r3, [pc, #84]	; (8006bb8 <USBD_LL_Init+0x88>)
 8006b62:	2200      	movs	r2, #0
 8006b64:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8006b66:	4b14      	ldr	r3, [pc, #80]	; (8006bb8 <USBD_LL_Init+0x88>)
 8006b68:	2200      	movs	r2, #0
 8006b6a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006b6c:	4812      	ldr	r0, [pc, #72]	; (8006bb8 <USBD_LL_Init+0x88>)
 8006b6e:	f7f9 ffda 	bl	8000b26 <HAL_PCD_Init>
 8006b72:	4603      	mov	r3, r0
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d001      	beq.n	8006b7c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8006b78:	f7f9 fbf8 	bl	800036c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006b82:	2318      	movs	r3, #24
 8006b84:	2200      	movs	r2, #0
 8006b86:	2100      	movs	r1, #0
 8006b88:	f7fb fc39 	bl	80023fe <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006b92:	2358      	movs	r3, #88	; 0x58
 8006b94:	2200      	movs	r2, #0
 8006b96:	2180      	movs	r1, #128	; 0x80
 8006b98:	f7fb fc31 	bl	80023fe <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006ba2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	2181      	movs	r1, #129	; 0x81
 8006baa:	f7fb fc28 	bl	80023fe <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 8006bae:	2300      	movs	r3, #0
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3708      	adds	r7, #8
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}
 8006bb8:	20000660 	.word	0x20000660
 8006bbc:	40005c00 	.word	0x40005c00

08006bc0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b084      	sub	sp, #16
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f7fa f8b0 	bl	8000d3c <HAL_PCD_Start>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006be0:	7bfb      	ldrb	r3, [r7, #15]
 8006be2:	4618      	mov	r0, r3
 8006be4:	f000 f93c 	bl	8006e60 <USBD_Get_USB_Status>
 8006be8:	4603      	mov	r3, r0
 8006bea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006bec:	7bbb      	ldrb	r3, [r7, #14]
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3710      	adds	r7, #16
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}

08006bf6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006bf6:	b580      	push	{r7, lr}
 8006bf8:	b084      	sub	sp, #16
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	6078      	str	r0, [r7, #4]
 8006bfe:	4608      	mov	r0, r1
 8006c00:	4611      	mov	r1, r2
 8006c02:	461a      	mov	r2, r3
 8006c04:	4603      	mov	r3, r0
 8006c06:	70fb      	strb	r3, [r7, #3]
 8006c08:	460b      	mov	r3, r1
 8006c0a:	70bb      	strb	r3, [r7, #2]
 8006c0c:	4613      	mov	r3, r2
 8006c0e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c10:	2300      	movs	r3, #0
 8006c12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c14:	2300      	movs	r3, #0
 8006c16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006c1e:	78bb      	ldrb	r3, [r7, #2]
 8006c20:	883a      	ldrh	r2, [r7, #0]
 8006c22:	78f9      	ldrb	r1, [r7, #3]
 8006c24:	f7fa fa2a 	bl	800107c <HAL_PCD_EP_Open>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c2c:	7bfb      	ldrb	r3, [r7, #15]
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f000 f916 	bl	8006e60 <USBD_Get_USB_Status>
 8006c34:	4603      	mov	r3, r0
 8006c36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006c38:	7bbb      	ldrb	r3, [r7, #14]
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3710      	adds	r7, #16
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}

08006c42 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006c42:	b580      	push	{r7, lr}
 8006c44:	b084      	sub	sp, #16
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	6078      	str	r0, [r7, #4]
 8006c4a:	460b      	mov	r3, r1
 8006c4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c52:	2300      	movs	r3, #0
 8006c54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c5c:	78fa      	ldrb	r2, [r7, #3]
 8006c5e:	4611      	mov	r1, r2
 8006c60:	4618      	mov	r0, r3
 8006c62:	f7fa fa71 	bl	8001148 <HAL_PCD_EP_Close>
 8006c66:	4603      	mov	r3, r0
 8006c68:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c6a:	7bfb      	ldrb	r3, [r7, #15]
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f000 f8f7 	bl	8006e60 <USBD_Get_USB_Status>
 8006c72:	4603      	mov	r3, r0
 8006c74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006c76:	7bbb      	ldrb	r3, [r7, #14]
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3710      	adds	r7, #16
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b084      	sub	sp, #16
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	460b      	mov	r3, r1
 8006c8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c90:	2300      	movs	r3, #0
 8006c92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c9a:	78fa      	ldrb	r2, [r7, #3]
 8006c9c:	4611      	mov	r1, r2
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f7fa fb1a 	bl	80012d8 <HAL_PCD_EP_SetStall>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006ca8:	7bfb      	ldrb	r3, [r7, #15]
 8006caa:	4618      	mov	r0, r3
 8006cac:	f000 f8d8 	bl	8006e60 <USBD_Get_USB_Status>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006cb4:	7bbb      	ldrb	r3, [r7, #14]
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3710      	adds	r7, #16
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}

08006cbe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006cbe:	b580      	push	{r7, lr}
 8006cc0:	b084      	sub	sp, #16
 8006cc2:	af00      	add	r7, sp, #0
 8006cc4:	6078      	str	r0, [r7, #4]
 8006cc6:	460b      	mov	r3, r1
 8006cc8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006cd8:	78fa      	ldrb	r2, [r7, #3]
 8006cda:	4611      	mov	r1, r2
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f7fa fb5b 	bl	8001398 <HAL_PCD_EP_ClrStall>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006ce6:	7bfb      	ldrb	r3, [r7, #15]
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f000 f8b9 	bl	8006e60 <USBD_Get_USB_Status>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006cf2:	7bbb      	ldrb	r3, [r7, #14]
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3710      	adds	r7, #16
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}

08006cfc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b085      	sub	sp, #20
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	460b      	mov	r3, r1
 8006d06:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006d0e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006d10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	da0c      	bge.n	8006d32 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006d18:	78fb      	ldrb	r3, [r7, #3]
 8006d1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d1e:	68f9      	ldr	r1, [r7, #12]
 8006d20:	1c5a      	adds	r2, r3, #1
 8006d22:	4613      	mov	r3, r2
 8006d24:	009b      	lsls	r3, r3, #2
 8006d26:	4413      	add	r3, r2
 8006d28:	00db      	lsls	r3, r3, #3
 8006d2a:	440b      	add	r3, r1
 8006d2c:	3302      	adds	r3, #2
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	e00b      	b.n	8006d4a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006d32:	78fb      	ldrb	r3, [r7, #3]
 8006d34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d38:	68f9      	ldr	r1, [r7, #12]
 8006d3a:	4613      	mov	r3, r2
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	4413      	add	r3, r2
 8006d40:	00db      	lsls	r3, r3, #3
 8006d42:	440b      	add	r3, r1
 8006d44:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8006d48:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3714      	adds	r7, #20
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bc80      	pop	{r7}
 8006d52:	4770      	bx	lr

08006d54 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b084      	sub	sp, #16
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	460b      	mov	r3, r1
 8006d5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d60:	2300      	movs	r3, #0
 8006d62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d64:	2300      	movs	r3, #0
 8006d66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006d6e:	78fa      	ldrb	r2, [r7, #3]
 8006d70:	4611      	mov	r1, r2
 8006d72:	4618      	mov	r0, r3
 8006d74:	f7fa f95d 	bl	8001032 <HAL_PCD_SetAddress>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006d7c:	7bfb      	ldrb	r3, [r7, #15]
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f000 f86e 	bl	8006e60 <USBD_Get_USB_Status>
 8006d84:	4603      	mov	r3, r0
 8006d86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006d88:	7bbb      	ldrb	r3, [r7, #14]
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3710      	adds	r7, #16
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}

08006d92 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006d92:	b580      	push	{r7, lr}
 8006d94:	b086      	sub	sp, #24
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	60f8      	str	r0, [r7, #12]
 8006d9a:	607a      	str	r2, [r7, #4]
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	460b      	mov	r3, r1
 8006da0:	72fb      	strb	r3, [r7, #11]
 8006da2:	4613      	mov	r3, r2
 8006da4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006da6:	2300      	movs	r3, #0
 8006da8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006daa:	2300      	movs	r3, #0
 8006dac:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006db4:	893b      	ldrh	r3, [r7, #8]
 8006db6:	7af9      	ldrb	r1, [r7, #11]
 8006db8:	687a      	ldr	r2, [r7, #4]
 8006dba:	f7fa fa4a 	bl	8001252 <HAL_PCD_EP_Transmit>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006dc2:	7dfb      	ldrb	r3, [r7, #23]
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f000 f84b 	bl	8006e60 <USBD_Get_USB_Status>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006dce:	7dbb      	ldrb	r3, [r7, #22]
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3718      	adds	r7, #24
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}

08006dd8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b086      	sub	sp, #24
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	60f8      	str	r0, [r7, #12]
 8006de0:	607a      	str	r2, [r7, #4]
 8006de2:	461a      	mov	r2, r3
 8006de4:	460b      	mov	r3, r1
 8006de6:	72fb      	strb	r3, [r7, #11]
 8006de8:	4613      	mov	r3, r2
 8006dea:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006dec:	2300      	movs	r3, #0
 8006dee:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006df0:	2300      	movs	r3, #0
 8006df2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006dfa:	893b      	ldrh	r3, [r7, #8]
 8006dfc:	7af9      	ldrb	r1, [r7, #11]
 8006dfe:	687a      	ldr	r2, [r7, #4]
 8006e00:	f7fa f9ea 	bl	80011d8 <HAL_PCD_EP_Receive>
 8006e04:	4603      	mov	r3, r0
 8006e06:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e08:	7dfb      	ldrb	r3, [r7, #23]
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f000 f828 	bl	8006e60 <USBD_Get_USB_Status>
 8006e10:	4603      	mov	r3, r0
 8006e12:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006e14:	7dbb      	ldrb	r3, [r7, #22]
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3718      	adds	r7, #24
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}
	...

08006e20 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b083      	sub	sp, #12
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006e28:	4b02      	ldr	r3, [pc, #8]	; (8006e34 <USBD_static_malloc+0x14>)
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	370c      	adds	r7, #12
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bc80      	pop	{r7}
 8006e32:	4770      	bx	lr
 8006e34:	20000184 	.word	0x20000184

08006e38 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b083      	sub	sp, #12
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]

}
 8006e40:	bf00      	nop
 8006e42:	370c      	adds	r7, #12
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bc80      	pop	{r7}
 8006e48:	4770      	bx	lr

08006e4a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e4a:	b480      	push	{r7}
 8006e4c:	b083      	sub	sp, #12
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	6078      	str	r0, [r7, #4]
 8006e52:	460b      	mov	r3, r1
 8006e54:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8006e56:	bf00      	nop
 8006e58:	370c      	adds	r7, #12
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bc80      	pop	{r7}
 8006e5e:	4770      	bx	lr

08006e60 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b085      	sub	sp, #20
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	4603      	mov	r3, r0
 8006e68:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006e6e:	79fb      	ldrb	r3, [r7, #7]
 8006e70:	2b03      	cmp	r3, #3
 8006e72:	d817      	bhi.n	8006ea4 <USBD_Get_USB_Status+0x44>
 8006e74:	a201      	add	r2, pc, #4	; (adr r2, 8006e7c <USBD_Get_USB_Status+0x1c>)
 8006e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e7a:	bf00      	nop
 8006e7c:	08006e8d 	.word	0x08006e8d
 8006e80:	08006e93 	.word	0x08006e93
 8006e84:	08006e99 	.word	0x08006e99
 8006e88:	08006e9f 	.word	0x08006e9f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	73fb      	strb	r3, [r7, #15]
    break;
 8006e90:	e00b      	b.n	8006eaa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006e92:	2302      	movs	r3, #2
 8006e94:	73fb      	strb	r3, [r7, #15]
    break;
 8006e96:	e008      	b.n	8006eaa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006e98:	2301      	movs	r3, #1
 8006e9a:	73fb      	strb	r3, [r7, #15]
    break;
 8006e9c:	e005      	b.n	8006eaa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006e9e:	2302      	movs	r3, #2
 8006ea0:	73fb      	strb	r3, [r7, #15]
    break;
 8006ea2:	e002      	b.n	8006eaa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006ea4:	2302      	movs	r3, #2
 8006ea6:	73fb      	strb	r3, [r7, #15]
    break;
 8006ea8:	bf00      	nop
  }
  return usb_status;
 8006eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	3714      	adds	r7, #20
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bc80      	pop	{r7}
 8006eb4:	4770      	bx	lr
 8006eb6:	bf00      	nop

08006eb8 <__libc_init_array>:
 8006eb8:	b570      	push	{r4, r5, r6, lr}
 8006eba:	2600      	movs	r6, #0
 8006ebc:	4d0c      	ldr	r5, [pc, #48]	; (8006ef0 <__libc_init_array+0x38>)
 8006ebe:	4c0d      	ldr	r4, [pc, #52]	; (8006ef4 <__libc_init_array+0x3c>)
 8006ec0:	1b64      	subs	r4, r4, r5
 8006ec2:	10a4      	asrs	r4, r4, #2
 8006ec4:	42a6      	cmp	r6, r4
 8006ec6:	d109      	bne.n	8006edc <__libc_init_array+0x24>
 8006ec8:	f000 f822 	bl	8006f10 <_init>
 8006ecc:	2600      	movs	r6, #0
 8006ece:	4d0a      	ldr	r5, [pc, #40]	; (8006ef8 <__libc_init_array+0x40>)
 8006ed0:	4c0a      	ldr	r4, [pc, #40]	; (8006efc <__libc_init_array+0x44>)
 8006ed2:	1b64      	subs	r4, r4, r5
 8006ed4:	10a4      	asrs	r4, r4, #2
 8006ed6:	42a6      	cmp	r6, r4
 8006ed8:	d105      	bne.n	8006ee6 <__libc_init_array+0x2e>
 8006eda:	bd70      	pop	{r4, r5, r6, pc}
 8006edc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ee0:	4798      	blx	r3
 8006ee2:	3601      	adds	r6, #1
 8006ee4:	e7ee      	b.n	8006ec4 <__libc_init_array+0xc>
 8006ee6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006eea:	4798      	blx	r3
 8006eec:	3601      	adds	r6, #1
 8006eee:	e7f2      	b.n	8006ed6 <__libc_init_array+0x1e>
 8006ef0:	08006f8c 	.word	0x08006f8c
 8006ef4:	08006f8c 	.word	0x08006f8c
 8006ef8:	08006f8c 	.word	0x08006f8c
 8006efc:	08006f90 	.word	0x08006f90

08006f00 <memset>:
 8006f00:	4603      	mov	r3, r0
 8006f02:	4402      	add	r2, r0
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d100      	bne.n	8006f0a <memset+0xa>
 8006f08:	4770      	bx	lr
 8006f0a:	f803 1b01 	strb.w	r1, [r3], #1
 8006f0e:	e7f9      	b.n	8006f04 <memset+0x4>

08006f10 <_init>:
 8006f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f12:	bf00      	nop
 8006f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f16:	bc08      	pop	{r3}
 8006f18:	469e      	mov	lr, r3
 8006f1a:	4770      	bx	lr

08006f1c <_fini>:
 8006f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f1e:	bf00      	nop
 8006f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f22:	bc08      	pop	{r3}
 8006f24:	469e      	mov	lr, r3
 8006f26:	4770      	bx	lr
