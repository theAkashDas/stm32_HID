
stm32hid.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092c0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  080093cc  080093cc  000193cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009494  08009494  000201c8  2**0
                  CONTENTS
  4 .ARM          00000000  08009494  08009494  000201c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009494  08009494  000201c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009494  08009494  00019494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009498  08009498  00019498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c8  20000000  0800949c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008d8  200001c8  08009664  000201c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000aa0  08009664  00020aa0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015b17  00000000  00000000  000201f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000359b  00000000  00000000  00035d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e80  00000000  00000000  000392a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d28  00000000  00000000  0003a128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a8bc  00000000  00000000  0003ae50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001214d  00000000  00000000  0005570c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c9db  00000000  00000000  00067859  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f4234  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d98  00000000  00000000  000f4288  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001c8 	.word	0x200001c8
 8000128:	00000000 	.word	0x00000000
 800012c:	080093b4 	.word	0x080093b4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001cc 	.word	0x200001cc
 8000148:	080093b4 	.word	0x080093b4

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000160:	f000 fbfe 	bl	8000960 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000164:	f000 f856 	bl	8000214 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000168:	f000 f958 	bl	800041c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800016c:	f008 f8fc 	bl	8008368 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8000170:	f000 f8ae 	bl	80002d0 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000174:	f000 f8ea 	bl	800034c <MX_ADC2_Init>
  MX_USART1_UART_Init();
 8000178:	f000 f926 	bl	80003c8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, &UART1_recv, 1);
 800017c:	2201      	movs	r2, #1
 800017e:	491d      	ldr	r1, [pc, #116]	; (80001f4 <main+0x98>)
 8000180:	481d      	ldr	r0, [pc, #116]	; (80001f8 <main+0x9c>)
 8000182:	f003 fff8 	bl	8004176 <HAL_UART_Receive_IT>
  HAL_ADCEx_Calibration_Start(&hadc1);
 8000186:	481d      	ldr	r0, [pc, #116]	; (80001fc <main+0xa0>)
 8000188:	f001 f89c 	bl	80012c4 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2);
 800018c:	481c      	ldr	r0, [pc, #112]	; (8000200 <main+0xa4>)
 800018e:	f001 f899 	bl	80012c4 <HAL_ADCEx_Calibration_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

      HAL_ADC_Start(&hadc1);
 8000192:	481a      	ldr	r0, [pc, #104]	; (80001fc <main+0xa0>)
 8000194:	f000 fd42 	bl	8000c1c <HAL_ADC_Start>
      HAL_ADC_Start(&hadc2);
 8000198:	4819      	ldr	r0, [pc, #100]	; (8000200 <main+0xa4>)
 800019a:	f000 fd3f 	bl	8000c1c <HAL_ADC_Start>
     // Poll ADC1 Peripheral & TimeOut = 1mSec
      HAL_ADC_PollForConversion(&hadc1, 1);
 800019e:	2101      	movs	r1, #1
 80001a0:	4816      	ldr	r0, [pc, #88]	; (80001fc <main+0xa0>)
 80001a2:	f000 fde9 	bl	8000d78 <HAL_ADC_PollForConversion>
      HAL_ADC_PollForConversion(&hadc2, 1);
 80001a6:	2101      	movs	r1, #1
 80001a8:	4815      	ldr	r0, [pc, #84]	; (8000200 <main+0xa4>)
 80001aa:	f000 fde5 	bl	8000d78 <HAL_ADC_PollForConversion>
     // Read The ADC Conversion Result & Map It To PWM DutyCycle
      AD_RES1 = HAL_ADC_GetValue(&hadc1);
 80001ae:	4813      	ldr	r0, [pc, #76]	; (80001fc <main+0xa0>)
 80001b0:	f000 fee8 	bl	8000f84 <HAL_ADC_GetValue>
 80001b4:	4603      	mov	r3, r0
 80001b6:	b29a      	uxth	r2, r3
 80001b8:	4b12      	ldr	r3, [pc, #72]	; (8000204 <main+0xa8>)
 80001ba:	801a      	strh	r2, [r3, #0]
      AD_RES2 = HAL_ADC_GetValue(&hadc2);
 80001bc:	4810      	ldr	r0, [pc, #64]	; (8000200 <main+0xa4>)
 80001be:	f000 fee1 	bl	8000f84 <HAL_ADC_GetValue>
 80001c2:	4603      	mov	r3, r0
 80001c4:	b29a      	uxth	r2, r3
 80001c6:	4b10      	ldr	r3, [pc, #64]	; (8000208 <main+0xac>)
 80001c8:	801a      	strh	r2, [r3, #0]


      if(interrupt_happened)
 80001ca:	4b10      	ldr	r3, [pc, #64]	; (800020c <main+0xb0>)
 80001cc:	781b      	ldrb	r3, [r3, #0]
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d007      	beq.n	80001e2 <main+0x86>
      {
    	  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_12);
 80001d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001d6:	480e      	ldr	r0, [pc, #56]	; (8000210 <main+0xb4>)
 80001d8:	f001 fc7a 	bl	8001ad0 <HAL_GPIO_TogglePin>
    	  interrupt_happened = 0;
 80001dc:	4b0b      	ldr	r3, [pc, #44]	; (800020c <main+0xb0>)
 80001de:	2200      	movs	r2, #0
 80001e0:	701a      	strb	r2, [r3, #0]
      }
      printData(AD_RES1);
 80001e2:	4b08      	ldr	r3, [pc, #32]	; (8000204 <main+0xa8>)
 80001e4:	881b      	ldrh	r3, [r3, #0]
 80001e6:	4618      	mov	r0, r3
 80001e8:	f000 f9ee 	bl	80005c8 <printData>
//			  USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof(keyboardhid));
//
//			  pressed = HAL_GetTick();
//		  }
//	  }
	  HAL_Delay(5);
 80001ec:	2005      	movs	r0, #5
 80001ee:	f000 fc19 	bl	8000a24 <HAL_Delay>
      HAL_ADC_Start(&hadc1);
 80001f2:	e7ce      	b.n	8000192 <main+0x36>
 80001f4:	20000264 	.word	0x20000264
 80001f8:	20000298 	.word	0x20000298
 80001fc:	20000268 	.word	0x20000268
 8000200:	20000234 	.word	0x20000234
 8000204:	200001e6 	.word	0x200001e6
 8000208:	200001e8 	.word	0x200001e8
 800020c:	200001e4 	.word	0x200001e4
 8000210:	40010c00 	.word	0x40010c00

08000214 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b094      	sub	sp, #80	; 0x50
 8000218:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800021a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800021e:	2228      	movs	r2, #40	; 0x28
 8000220:	2100      	movs	r1, #0
 8000222:	4618      	mov	r0, r3
 8000224:	f008 fc84 	bl	8008b30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000228:	f107 0314 	add.w	r3, r7, #20
 800022c:	2200      	movs	r2, #0
 800022e:	601a      	str	r2, [r3, #0]
 8000230:	605a      	str	r2, [r3, #4]
 8000232:	609a      	str	r2, [r3, #8]
 8000234:	60da      	str	r2, [r3, #12]
 8000236:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000238:	1d3b      	adds	r3, r7, #4
 800023a:	2200      	movs	r2, #0
 800023c:	601a      	str	r2, [r3, #0]
 800023e:	605a      	str	r2, [r3, #4]
 8000240:	609a      	str	r2, [r3, #8]
 8000242:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000244:	2301      	movs	r3, #1
 8000246:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000248:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800024c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800024e:	2300      	movs	r3, #0
 8000250:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000252:	2301      	movs	r3, #1
 8000254:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000256:	2302      	movs	r3, #2
 8000258:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800025a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800025e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000260:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000264:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000266:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800026a:	4618      	mov	r0, r3
 800026c:	f003 f910 	bl	8003490 <HAL_RCC_OscConfig>
 8000270:	4603      	mov	r3, r0
 8000272:	2b00      	cmp	r3, #0
 8000274:	d001      	beq.n	800027a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000276:	f000 f9c5 	bl	8000604 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800027a:	230f      	movs	r3, #15
 800027c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800027e:	2302      	movs	r3, #2
 8000280:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000282:	2300      	movs	r3, #0
 8000284:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000286:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800028a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800028c:	2300      	movs	r3, #0
 800028e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000290:	f107 0314 	add.w	r3, r7, #20
 8000294:	2101      	movs	r1, #1
 8000296:	4618      	mov	r0, r3
 8000298:	f003 fb7a 	bl	8003990 <HAL_RCC_ClockConfig>
 800029c:	4603      	mov	r3, r0
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d001      	beq.n	80002a6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002a2:	f000 f9af 	bl	8000604 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 80002a6:	2312      	movs	r3, #18
 80002a8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 80002aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80002ae:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80002b0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80002b4:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002b6:	1d3b      	adds	r3, r7, #4
 80002b8:	4618      	mov	r0, r3
 80002ba:	f003 fd03 	bl	8003cc4 <HAL_RCCEx_PeriphCLKConfig>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d001      	beq.n	80002c8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80002c4:	f000 f99e 	bl	8000604 <Error_Handler>
  }
}
 80002c8:	bf00      	nop
 80002ca:	3750      	adds	r7, #80	; 0x50
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bd80      	pop	{r7, pc}

080002d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b084      	sub	sp, #16
 80002d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002d6:	1d3b      	adds	r3, r7, #4
 80002d8:	2200      	movs	r2, #0
 80002da:	601a      	str	r2, [r3, #0]
 80002dc:	605a      	str	r2, [r3, #4]
 80002de:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80002e0:	4b18      	ldr	r3, [pc, #96]	; (8000344 <MX_ADC1_Init+0x74>)
 80002e2:	4a19      	ldr	r2, [pc, #100]	; (8000348 <MX_ADC1_Init+0x78>)
 80002e4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002e6:	4b17      	ldr	r3, [pc, #92]	; (8000344 <MX_ADC1_Init+0x74>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80002ec:	4b15      	ldr	r3, [pc, #84]	; (8000344 <MX_ADC1_Init+0x74>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002f2:	4b14      	ldr	r3, [pc, #80]	; (8000344 <MX_ADC1_Init+0x74>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002f8:	4b12      	ldr	r3, [pc, #72]	; (8000344 <MX_ADC1_Init+0x74>)
 80002fa:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80002fe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000300:	4b10      	ldr	r3, [pc, #64]	; (8000344 <MX_ADC1_Init+0x74>)
 8000302:	2200      	movs	r2, #0
 8000304:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000306:	4b0f      	ldr	r3, [pc, #60]	; (8000344 <MX_ADC1_Init+0x74>)
 8000308:	2201      	movs	r2, #1
 800030a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800030c:	480d      	ldr	r0, [pc, #52]	; (8000344 <MX_ADC1_Init+0x74>)
 800030e:	f000 fbad 	bl	8000a6c <HAL_ADC_Init>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	d001      	beq.n	800031c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000318:	f000 f974 	bl	8000604 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800031c:	2307      	movs	r3, #7
 800031e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000320:	2301      	movs	r3, #1
 8000322:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000324:	2300      	movs	r3, #0
 8000326:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000328:	1d3b      	adds	r3, r7, #4
 800032a:	4619      	mov	r1, r3
 800032c:	4805      	ldr	r0, [pc, #20]	; (8000344 <MX_ADC1_Init+0x74>)
 800032e:	f000 fe35 	bl	8000f9c <HAL_ADC_ConfigChannel>
 8000332:	4603      	mov	r3, r0
 8000334:	2b00      	cmp	r3, #0
 8000336:	d001      	beq.n	800033c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000338:	f000 f964 	bl	8000604 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800033c:	bf00      	nop
 800033e:	3710      	adds	r7, #16
 8000340:	46bd      	mov	sp, r7
 8000342:	bd80      	pop	{r7, pc}
 8000344:	20000268 	.word	0x20000268
 8000348:	40012400 	.word	0x40012400

0800034c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b084      	sub	sp, #16
 8000350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000352:	1d3b      	adds	r3, r7, #4
 8000354:	2200      	movs	r2, #0
 8000356:	601a      	str	r2, [r3, #0]
 8000358:	605a      	str	r2, [r3, #4]
 800035a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 800035c:	4b18      	ldr	r3, [pc, #96]	; (80003c0 <MX_ADC2_Init+0x74>)
 800035e:	4a19      	ldr	r2, [pc, #100]	; (80003c4 <MX_ADC2_Init+0x78>)
 8000360:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000362:	4b17      	ldr	r3, [pc, #92]	; (80003c0 <MX_ADC2_Init+0x74>)
 8000364:	2200      	movs	r2, #0
 8000366:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000368:	4b15      	ldr	r3, [pc, #84]	; (80003c0 <MX_ADC2_Init+0x74>)
 800036a:	2200      	movs	r2, #0
 800036c:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800036e:	4b14      	ldr	r3, [pc, #80]	; (80003c0 <MX_ADC2_Init+0x74>)
 8000370:	2200      	movs	r2, #0
 8000372:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000374:	4b12      	ldr	r3, [pc, #72]	; (80003c0 <MX_ADC2_Init+0x74>)
 8000376:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800037a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800037c:	4b10      	ldr	r3, [pc, #64]	; (80003c0 <MX_ADC2_Init+0x74>)
 800037e:	2200      	movs	r2, #0
 8000380:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000382:	4b0f      	ldr	r3, [pc, #60]	; (80003c0 <MX_ADC2_Init+0x74>)
 8000384:	2201      	movs	r2, #1
 8000386:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000388:	480d      	ldr	r0, [pc, #52]	; (80003c0 <MX_ADC2_Init+0x74>)
 800038a:	f000 fb6f 	bl	8000a6c <HAL_ADC_Init>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d001      	beq.n	8000398 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000394:	f000 f936 	bl	8000604 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000398:	2306      	movs	r3, #6
 800039a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800039c:	2301      	movs	r3, #1
 800039e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003a0:	2300      	movs	r3, #0
 80003a2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80003a4:	1d3b      	adds	r3, r7, #4
 80003a6:	4619      	mov	r1, r3
 80003a8:	4805      	ldr	r0, [pc, #20]	; (80003c0 <MX_ADC2_Init+0x74>)
 80003aa:	f000 fdf7 	bl	8000f9c <HAL_ADC_ConfigChannel>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d001      	beq.n	80003b8 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 80003b4:	f000 f926 	bl	8000604 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80003b8:	bf00      	nop
 80003ba:	3710      	adds	r7, #16
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	20000234 	.word	0x20000234
 80003c4:	40012800 	.word	0x40012800

080003c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003cc:	4b11      	ldr	r3, [pc, #68]	; (8000414 <MX_USART1_UART_Init+0x4c>)
 80003ce:	4a12      	ldr	r2, [pc, #72]	; (8000418 <MX_USART1_UART_Init+0x50>)
 80003d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80003d2:	4b10      	ldr	r3, [pc, #64]	; (8000414 <MX_USART1_UART_Init+0x4c>)
 80003d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003da:	4b0e      	ldr	r3, [pc, #56]	; (8000414 <MX_USART1_UART_Init+0x4c>)
 80003dc:	2200      	movs	r2, #0
 80003de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003e0:	4b0c      	ldr	r3, [pc, #48]	; (8000414 <MX_USART1_UART_Init+0x4c>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003e6:	4b0b      	ldr	r3, [pc, #44]	; (8000414 <MX_USART1_UART_Init+0x4c>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003ec:	4b09      	ldr	r3, [pc, #36]	; (8000414 <MX_USART1_UART_Init+0x4c>)
 80003ee:	220c      	movs	r2, #12
 80003f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003f2:	4b08      	ldr	r3, [pc, #32]	; (8000414 <MX_USART1_UART_Init+0x4c>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003f8:	4b06      	ldr	r3, [pc, #24]	; (8000414 <MX_USART1_UART_Init+0x4c>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003fe:	4805      	ldr	r0, [pc, #20]	; (8000414 <MX_USART1_UART_Init+0x4c>)
 8000400:	f003 fdda 	bl	8003fb8 <HAL_UART_Init>
 8000404:	4603      	mov	r3, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d001      	beq.n	800040e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800040a:	f000 f8fb 	bl	8000604 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800040e:	bf00      	nop
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	20000298 	.word	0x20000298
 8000418:	40013800 	.word	0x40013800

0800041c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b088      	sub	sp, #32
 8000420:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000422:	f107 0310 	add.w	r3, r7, #16
 8000426:	2200      	movs	r2, #0
 8000428:	601a      	str	r2, [r3, #0]
 800042a:	605a      	str	r2, [r3, #4]
 800042c:	609a      	str	r2, [r3, #8]
 800042e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000430:	4b3a      	ldr	r3, [pc, #232]	; (800051c <MX_GPIO_Init+0x100>)
 8000432:	699b      	ldr	r3, [r3, #24]
 8000434:	4a39      	ldr	r2, [pc, #228]	; (800051c <MX_GPIO_Init+0x100>)
 8000436:	f043 0320 	orr.w	r3, r3, #32
 800043a:	6193      	str	r3, [r2, #24]
 800043c:	4b37      	ldr	r3, [pc, #220]	; (800051c <MX_GPIO_Init+0x100>)
 800043e:	699b      	ldr	r3, [r3, #24]
 8000440:	f003 0320 	and.w	r3, r3, #32
 8000444:	60fb      	str	r3, [r7, #12]
 8000446:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000448:	4b34      	ldr	r3, [pc, #208]	; (800051c <MX_GPIO_Init+0x100>)
 800044a:	699b      	ldr	r3, [r3, #24]
 800044c:	4a33      	ldr	r2, [pc, #204]	; (800051c <MX_GPIO_Init+0x100>)
 800044e:	f043 0304 	orr.w	r3, r3, #4
 8000452:	6193      	str	r3, [r2, #24]
 8000454:	4b31      	ldr	r3, [pc, #196]	; (800051c <MX_GPIO_Init+0x100>)
 8000456:	699b      	ldr	r3, [r3, #24]
 8000458:	f003 0304 	and.w	r3, r3, #4
 800045c:	60bb      	str	r3, [r7, #8]
 800045e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000460:	4b2e      	ldr	r3, [pc, #184]	; (800051c <MX_GPIO_Init+0x100>)
 8000462:	699b      	ldr	r3, [r3, #24]
 8000464:	4a2d      	ldr	r2, [pc, #180]	; (800051c <MX_GPIO_Init+0x100>)
 8000466:	f043 0308 	orr.w	r3, r3, #8
 800046a:	6193      	str	r3, [r2, #24]
 800046c:	4b2b      	ldr	r3, [pc, #172]	; (800051c <MX_GPIO_Init+0x100>)
 800046e:	699b      	ldr	r3, [r3, #24]
 8000470:	f003 0308 	and.w	r3, r3, #8
 8000474:	607b      	str	r3, [r7, #4]
 8000476:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000478:	2200      	movs	r2, #0
 800047a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800047e:	4828      	ldr	r0, [pc, #160]	; (8000520 <MX_GPIO_Init+0x104>)
 8000480:	f001 fb0e 	bl	8001aa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SW_Pin */
  GPIO_InitStruct.Pin = SW_Pin;
 8000484:	2302      	movs	r3, #2
 8000486:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000488:	4b26      	ldr	r3, [pc, #152]	; (8000524 <MX_GPIO_Init+0x108>)
 800048a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048c:	2300      	movs	r3, #0
 800048e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SW_GPIO_Port, &GPIO_InitStruct);
 8000490:	f107 0310 	add.w	r3, r7, #16
 8000494:	4619      	mov	r1, r3
 8000496:	4824      	ldr	r0, [pc, #144]	; (8000528 <MX_GPIO_Init+0x10c>)
 8000498:	f001 f97e 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800049c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004a2:	2301      	movs	r3, #1
 80004a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a6:	2300      	movs	r3, #0
 80004a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004aa:	2302      	movs	r3, #2
 80004ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80004ae:	f107 0310 	add.w	r3, r7, #16
 80004b2:	4619      	mov	r1, r3
 80004b4:	481a      	ldr	r0, [pc, #104]	; (8000520 <MX_GPIO_Init+0x104>)
 80004b6:	f001 f96f 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin B2_Pin B3_Pin B4_Pin */
  GPIO_InitStruct.Pin = B1_Pin|B2_Pin|B3_Pin|B4_Pin;
 80004ba:	23b8      	movs	r3, #184	; 0xb8
 80004bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80004be:	4b19      	ldr	r3, [pc, #100]	; (8000524 <MX_GPIO_Init+0x108>)
 80004c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004c2:	2301      	movs	r3, #1
 80004c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004c6:	f107 0310 	add.w	r3, r7, #16
 80004ca:	4619      	mov	r1, r3
 80004cc:	4814      	ldr	r0, [pc, #80]	; (8000520 <MX_GPIO_Init+0x104>)
 80004ce:	f001 f963 	bl	8001798 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80004d2:	2200      	movs	r2, #0
 80004d4:	2100      	movs	r1, #0
 80004d6:	2007      	movs	r0, #7
 80004d8:	f001 f877 	bl	80015ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80004dc:	2007      	movs	r0, #7
 80004de:	f001 f890 	bl	8001602 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80004e2:	2200      	movs	r2, #0
 80004e4:	2100      	movs	r1, #0
 80004e6:	2009      	movs	r0, #9
 80004e8:	f001 f86f 	bl	80015ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80004ec:	2009      	movs	r0, #9
 80004ee:	f001 f888 	bl	8001602 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80004f2:	2200      	movs	r2, #0
 80004f4:	2100      	movs	r1, #0
 80004f6:	200a      	movs	r0, #10
 80004f8:	f001 f867 	bl	80015ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80004fc:	200a      	movs	r0, #10
 80004fe:	f001 f880 	bl	8001602 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000502:	2200      	movs	r2, #0
 8000504:	2100      	movs	r1, #0
 8000506:	2017      	movs	r0, #23
 8000508:	f001 f85f 	bl	80015ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800050c:	2017      	movs	r0, #23
 800050e:	f001 f878 	bl	8001602 <HAL_NVIC_EnableIRQ>

}
 8000512:	bf00      	nop
 8000514:	3720      	adds	r7, #32
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	40021000 	.word	0x40021000
 8000520:	40010c00 	.word	0x40010c00
 8000524:	10110000 	.word	0x10110000
 8000528:	40010800 	.word	0x40010800

0800052c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800052c:	b480      	push	{r7}
 800052e:	b083      	sub	sp, #12
 8000530:	af00      	add	r7, sp, #0
 8000532:	4603      	mov	r3, r0
 8000534:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_1) // If The INT Source Is EXTI Line9 (A9 Pin)
 8000536:	88fb      	ldrh	r3, [r7, #6]
 8000538:	2b02      	cmp	r3, #2
 800053a:	d102      	bne.n	8000542 <HAL_GPIO_EXTI_Callback+0x16>
    {
    	interrupt_happened = 1;
 800053c:	4b0f      	ldr	r3, [pc, #60]	; (800057c <HAL_GPIO_EXTI_Callback+0x50>)
 800053e:	2201      	movs	r2, #1
 8000540:	701a      	strb	r2, [r3, #0]
    }
    if(GPIO_Pin == GPIO_PIN_3) // If The INT Source Is EXTI Line9 (A9 Pin)
 8000542:	88fb      	ldrh	r3, [r7, #6]
 8000544:	2b08      	cmp	r3, #8
 8000546:	d102      	bne.n	800054e <HAL_GPIO_EXTI_Callback+0x22>
    {
    	interrupt_happened = 1;
 8000548:	4b0c      	ldr	r3, [pc, #48]	; (800057c <HAL_GPIO_EXTI_Callback+0x50>)
 800054a:	2201      	movs	r2, #1
 800054c:	701a      	strb	r2, [r3, #0]
    }
    if(GPIO_Pin == GPIO_PIN_4) // If The INT Source Is EXTI Line9 (A9 Pin)
 800054e:	88fb      	ldrh	r3, [r7, #6]
 8000550:	2b10      	cmp	r3, #16
 8000552:	d102      	bne.n	800055a <HAL_GPIO_EXTI_Callback+0x2e>
    {
    	interrupt_happened = 1;
 8000554:	4b09      	ldr	r3, [pc, #36]	; (800057c <HAL_GPIO_EXTI_Callback+0x50>)
 8000556:	2201      	movs	r2, #1
 8000558:	701a      	strb	r2, [r3, #0]
    }
    if(GPIO_Pin == GPIO_PIN_5) // If The INT Source Is EXTI Line9 (A9 Pin)
 800055a:	88fb      	ldrh	r3, [r7, #6]
 800055c:	2b20      	cmp	r3, #32
 800055e:	d102      	bne.n	8000566 <HAL_GPIO_EXTI_Callback+0x3a>
    {
    	interrupt_happened = 1;
 8000560:	4b06      	ldr	r3, [pc, #24]	; (800057c <HAL_GPIO_EXTI_Callback+0x50>)
 8000562:	2201      	movs	r2, #1
 8000564:	701a      	strb	r2, [r3, #0]
    }
    if(GPIO_Pin == GPIO_PIN_7) // If The INT Source Is EXTI Line9 (A9 Pin)
 8000566:	88fb      	ldrh	r3, [r7, #6]
 8000568:	2b80      	cmp	r3, #128	; 0x80
 800056a:	d102      	bne.n	8000572 <HAL_GPIO_EXTI_Callback+0x46>
    {
    	interrupt_happened = 1;
 800056c:	4b03      	ldr	r3, [pc, #12]	; (800057c <HAL_GPIO_EXTI_Callback+0x50>)
 800056e:	2201      	movs	r2, #1
 8000570:	701a      	strb	r2, [r3, #0]
    }

}
 8000572:	bf00      	nop
 8000574:	370c      	adds	r7, #12
 8000576:	46bd      	mov	sp, r7
 8000578:	bc80      	pop	{r7}
 800057a:	4770      	bx	lr
 800057c:	200001e4 	.word	0x200001e4

08000580 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a0b      	ldr	r2, [pc, #44]	; (80005bc <HAL_UART_RxCpltCallback+0x3c>)
 800058e:	4293      	cmp	r3, r2
 8000590:	d10a      	bne.n	80005a8 <HAL_UART_RxCpltCallback+0x28>
	{
		UART1_recv -= 48;
 8000592:	4b0b      	ldr	r3, [pc, #44]	; (80005c0 <HAL_UART_RxCpltCallback+0x40>)
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	3b30      	subs	r3, #48	; 0x30
 8000598:	b2da      	uxtb	r2, r3
 800059a:	4b09      	ldr	r3, [pc, #36]	; (80005c0 <HAL_UART_RxCpltCallback+0x40>)
 800059c:	701a      	strb	r2, [r3, #0]
		printData(UART1_recv);
 800059e:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <HAL_UART_RxCpltCallback+0x40>)
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	4618      	mov	r0, r3
 80005a4:	f000 f810 	bl	80005c8 <printData>
	}
	HAL_UART_Receive_IT(&huart1, &UART1_recv, 1);
 80005a8:	2201      	movs	r2, #1
 80005aa:	4905      	ldr	r1, [pc, #20]	; (80005c0 <HAL_UART_RxCpltCallback+0x40>)
 80005ac:	4805      	ldr	r0, [pc, #20]	; (80005c4 <HAL_UART_RxCpltCallback+0x44>)
 80005ae:	f003 fde2 	bl	8004176 <HAL_UART_Receive_IT>
}
 80005b2:	bf00      	nop
 80005b4:	3708      	adds	r7, #8
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	40013800 	.word	0x40013800
 80005c0:	20000264 	.word	0x20000264
 80005c4:	20000298 	.word	0x20000298

080005c8 <printData>:
void printData(int data)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
	sprintf((char*)buf,"Data received:  %d \r\n",data);
 80005d0:	687a      	ldr	r2, [r7, #4]
 80005d2:	4909      	ldr	r1, [pc, #36]	; (80005f8 <printData+0x30>)
 80005d4:	4809      	ldr	r0, [pc, #36]	; (80005fc <printData+0x34>)
 80005d6:	f008 fab3 	bl	8008b40 <siprintf>
	HAL_UART_Transmit(&huart1,buf,strlen((char*)buf),HAL_MAX_DELAY);
 80005da:	4808      	ldr	r0, [pc, #32]	; (80005fc <printData+0x34>)
 80005dc:	f7ff fdb6 	bl	800014c <strlen>
 80005e0:	4603      	mov	r3, r0
 80005e2:	b29a      	uxth	r2, r3
 80005e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005e8:	4904      	ldr	r1, [pc, #16]	; (80005fc <printData+0x34>)
 80005ea:	4805      	ldr	r0, [pc, #20]	; (8000600 <printData+0x38>)
 80005ec:	f003 fd31 	bl	8004052 <HAL_UART_Transmit>
}
 80005f0:	bf00      	nop
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	080093cc 	.word	0x080093cc
 80005fc:	200001ec 	.word	0x200001ec
 8000600:	20000298 	.word	0x20000298

08000604 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000608:	b672      	cpsid	i
}
 800060a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800060c:	e7fe      	b.n	800060c <Error_Handler+0x8>
	...

08000610 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000610:	b480      	push	{r7}
 8000612:	b085      	sub	sp, #20
 8000614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000616:	4b15      	ldr	r3, [pc, #84]	; (800066c <HAL_MspInit+0x5c>)
 8000618:	699b      	ldr	r3, [r3, #24]
 800061a:	4a14      	ldr	r2, [pc, #80]	; (800066c <HAL_MspInit+0x5c>)
 800061c:	f043 0301 	orr.w	r3, r3, #1
 8000620:	6193      	str	r3, [r2, #24]
 8000622:	4b12      	ldr	r3, [pc, #72]	; (800066c <HAL_MspInit+0x5c>)
 8000624:	699b      	ldr	r3, [r3, #24]
 8000626:	f003 0301 	and.w	r3, r3, #1
 800062a:	60bb      	str	r3, [r7, #8]
 800062c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800062e:	4b0f      	ldr	r3, [pc, #60]	; (800066c <HAL_MspInit+0x5c>)
 8000630:	69db      	ldr	r3, [r3, #28]
 8000632:	4a0e      	ldr	r2, [pc, #56]	; (800066c <HAL_MspInit+0x5c>)
 8000634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000638:	61d3      	str	r3, [r2, #28]
 800063a:	4b0c      	ldr	r3, [pc, #48]	; (800066c <HAL_MspInit+0x5c>)
 800063c:	69db      	ldr	r3, [r3, #28]
 800063e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000646:	4b0a      	ldr	r3, [pc, #40]	; (8000670 <HAL_MspInit+0x60>)
 8000648:	685b      	ldr	r3, [r3, #4]
 800064a:	60fb      	str	r3, [r7, #12]
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000652:	60fb      	str	r3, [r7, #12]
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800065a:	60fb      	str	r3, [r7, #12]
 800065c:	4a04      	ldr	r2, [pc, #16]	; (8000670 <HAL_MspInit+0x60>)
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000662:	bf00      	nop
 8000664:	3714      	adds	r7, #20
 8000666:	46bd      	mov	sp, r7
 8000668:	bc80      	pop	{r7}
 800066a:	4770      	bx	lr
 800066c:	40021000 	.word	0x40021000
 8000670:	40010000 	.word	0x40010000

08000674 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b08a      	sub	sp, #40	; 0x28
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067c:	f107 0318 	add.w	r3, r7, #24
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a28      	ldr	r2, [pc, #160]	; (8000730 <HAL_ADC_MspInit+0xbc>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d122      	bne.n	80006da <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000694:	4b27      	ldr	r3, [pc, #156]	; (8000734 <HAL_ADC_MspInit+0xc0>)
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	4a26      	ldr	r2, [pc, #152]	; (8000734 <HAL_ADC_MspInit+0xc0>)
 800069a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800069e:	6193      	str	r3, [r2, #24]
 80006a0:	4b24      	ldr	r3, [pc, #144]	; (8000734 <HAL_ADC_MspInit+0xc0>)
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80006a8:	617b      	str	r3, [r7, #20]
 80006aa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ac:	4b21      	ldr	r3, [pc, #132]	; (8000734 <HAL_ADC_MspInit+0xc0>)
 80006ae:	699b      	ldr	r3, [r3, #24]
 80006b0:	4a20      	ldr	r2, [pc, #128]	; (8000734 <HAL_ADC_MspInit+0xc0>)
 80006b2:	f043 0304 	orr.w	r3, r3, #4
 80006b6:	6193      	str	r3, [r2, #24]
 80006b8:	4b1e      	ldr	r3, [pc, #120]	; (8000734 <HAL_ADC_MspInit+0xc0>)
 80006ba:	699b      	ldr	r3, [r3, #24]
 80006bc:	f003 0304 	and.w	r3, r3, #4
 80006c0:	613b      	str	r3, [r7, #16]
 80006c2:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80006c4:	2380      	movs	r3, #128	; 0x80
 80006c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006c8:	2303      	movs	r3, #3
 80006ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006cc:	f107 0318 	add.w	r3, r7, #24
 80006d0:	4619      	mov	r1, r3
 80006d2:	4819      	ldr	r0, [pc, #100]	; (8000738 <HAL_ADC_MspInit+0xc4>)
 80006d4:	f001 f860 	bl	8001798 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80006d8:	e026      	b.n	8000728 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4a17      	ldr	r2, [pc, #92]	; (800073c <HAL_ADC_MspInit+0xc8>)
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d121      	bne.n	8000728 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80006e4:	4b13      	ldr	r3, [pc, #76]	; (8000734 <HAL_ADC_MspInit+0xc0>)
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	4a12      	ldr	r2, [pc, #72]	; (8000734 <HAL_ADC_MspInit+0xc0>)
 80006ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80006ee:	6193      	str	r3, [r2, #24]
 80006f0:	4b10      	ldr	r3, [pc, #64]	; (8000734 <HAL_ADC_MspInit+0xc0>)
 80006f2:	699b      	ldr	r3, [r3, #24]
 80006f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80006f8:	60fb      	str	r3, [r7, #12]
 80006fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fc:	4b0d      	ldr	r3, [pc, #52]	; (8000734 <HAL_ADC_MspInit+0xc0>)
 80006fe:	699b      	ldr	r3, [r3, #24]
 8000700:	4a0c      	ldr	r2, [pc, #48]	; (8000734 <HAL_ADC_MspInit+0xc0>)
 8000702:	f043 0304 	orr.w	r3, r3, #4
 8000706:	6193      	str	r3, [r2, #24]
 8000708:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <HAL_ADC_MspInit+0xc0>)
 800070a:	699b      	ldr	r3, [r3, #24]
 800070c:	f003 0304 	and.w	r3, r3, #4
 8000710:	60bb      	str	r3, [r7, #8]
 8000712:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000714:	2340      	movs	r3, #64	; 0x40
 8000716:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000718:	2303      	movs	r3, #3
 800071a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800071c:	f107 0318 	add.w	r3, r7, #24
 8000720:	4619      	mov	r1, r3
 8000722:	4805      	ldr	r0, [pc, #20]	; (8000738 <HAL_ADC_MspInit+0xc4>)
 8000724:	f001 f838 	bl	8001798 <HAL_GPIO_Init>
}
 8000728:	bf00      	nop
 800072a:	3728      	adds	r7, #40	; 0x28
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	40012400 	.word	0x40012400
 8000734:	40021000 	.word	0x40021000
 8000738:	40010800 	.word	0x40010800
 800073c:	40012800 	.word	0x40012800

08000740 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b088      	sub	sp, #32
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000748:	f107 0310 	add.w	r3, r7, #16
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
 8000752:	609a      	str	r2, [r3, #8]
 8000754:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4a20      	ldr	r2, [pc, #128]	; (80007dc <HAL_UART_MspInit+0x9c>)
 800075c:	4293      	cmp	r3, r2
 800075e:	d139      	bne.n	80007d4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000760:	4b1f      	ldr	r3, [pc, #124]	; (80007e0 <HAL_UART_MspInit+0xa0>)
 8000762:	699b      	ldr	r3, [r3, #24]
 8000764:	4a1e      	ldr	r2, [pc, #120]	; (80007e0 <HAL_UART_MspInit+0xa0>)
 8000766:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800076a:	6193      	str	r3, [r2, #24]
 800076c:	4b1c      	ldr	r3, [pc, #112]	; (80007e0 <HAL_UART_MspInit+0xa0>)
 800076e:	699b      	ldr	r3, [r3, #24]
 8000770:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000774:	60fb      	str	r3, [r7, #12]
 8000776:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000778:	4b19      	ldr	r3, [pc, #100]	; (80007e0 <HAL_UART_MspInit+0xa0>)
 800077a:	699b      	ldr	r3, [r3, #24]
 800077c:	4a18      	ldr	r2, [pc, #96]	; (80007e0 <HAL_UART_MspInit+0xa0>)
 800077e:	f043 0304 	orr.w	r3, r3, #4
 8000782:	6193      	str	r3, [r2, #24]
 8000784:	4b16      	ldr	r3, [pc, #88]	; (80007e0 <HAL_UART_MspInit+0xa0>)
 8000786:	699b      	ldr	r3, [r3, #24]
 8000788:	f003 0304 	and.w	r3, r3, #4
 800078c:	60bb      	str	r3, [r7, #8]
 800078e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000790:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000794:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000796:	2302      	movs	r3, #2
 8000798:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800079a:	2303      	movs	r3, #3
 800079c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800079e:	f107 0310 	add.w	r3, r7, #16
 80007a2:	4619      	mov	r1, r3
 80007a4:	480f      	ldr	r0, [pc, #60]	; (80007e4 <HAL_UART_MspInit+0xa4>)
 80007a6:	f000 fff7 	bl	8001798 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007b0:	2300      	movs	r3, #0
 80007b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b8:	f107 0310 	add.w	r3, r7, #16
 80007bc:	4619      	mov	r1, r3
 80007be:	4809      	ldr	r0, [pc, #36]	; (80007e4 <HAL_UART_MspInit+0xa4>)
 80007c0:	f000 ffea 	bl	8001798 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80007c4:	2200      	movs	r2, #0
 80007c6:	2100      	movs	r1, #0
 80007c8:	2025      	movs	r0, #37	; 0x25
 80007ca:	f000 fefe 	bl	80015ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80007ce:	2025      	movs	r0, #37	; 0x25
 80007d0:	f000 ff17 	bl	8001602 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80007d4:	bf00      	nop
 80007d6:	3720      	adds	r7, #32
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	40013800 	.word	0x40013800
 80007e0:	40021000 	.word	0x40021000
 80007e4:	40010800 	.word	0x40010800

080007e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007ec:	e7fe      	b.n	80007ec <NMI_Handler+0x4>

080007ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ee:	b480      	push	{r7}
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007f2:	e7fe      	b.n	80007f2 <HardFault_Handler+0x4>

080007f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007f8:	e7fe      	b.n	80007f8 <MemManage_Handler+0x4>

080007fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007fa:	b480      	push	{r7}
 80007fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007fe:	e7fe      	b.n	80007fe <BusFault_Handler+0x4>

08000800 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000804:	e7fe      	b.n	8000804 <UsageFault_Handler+0x4>

08000806 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000806:	b480      	push	{r7}
 8000808:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800080a:	bf00      	nop
 800080c:	46bd      	mov	sp, r7
 800080e:	bc80      	pop	{r7}
 8000810:	4770      	bx	lr

08000812 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000812:	b480      	push	{r7}
 8000814:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000816:	bf00      	nop
 8000818:	46bd      	mov	sp, r7
 800081a:	bc80      	pop	{r7}
 800081c:	4770      	bx	lr

0800081e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800081e:	b480      	push	{r7}
 8000820:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000822:	bf00      	nop
 8000824:	46bd      	mov	sp, r7
 8000826:	bc80      	pop	{r7}
 8000828:	4770      	bx	lr

0800082a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800082a:	b580      	push	{r7, lr}
 800082c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800082e:	f000 f8dd 	bl	80009ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}

08000836 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000836:	b580      	push	{r7, lr}
 8000838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800083a:	2002      	movs	r0, #2
 800083c:	f001 f962 	bl	8001b04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}

08000844 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000848:	2008      	movs	r0, #8
 800084a:	f001 f95b 	bl	8001b04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}

08000852 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000852:	b580      	push	{r7, lr}
 8000854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000856:	2010      	movs	r0, #16
 8000858:	f001 f954 	bl	8001b04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800085c:	bf00      	nop
 800085e:	bd80      	pop	{r7, pc}

08000860 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000864:	4802      	ldr	r0, [pc, #8]	; (8000870 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000866:	f001 fa96 	bl	8001d96 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	200007a4 	.word	0x200007a4

08000874 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000878:	2020      	movs	r0, #32
 800087a:	f001 f943 	bl	8001b04 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800087e:	2080      	movs	r0, #128	; 0x80
 8000880:	f001 f940 	bl	8001b04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}

08000888 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800088c:	4802      	ldr	r0, [pc, #8]	; (8000898 <USART1_IRQHandler+0x10>)
 800088e:	f003 fca3 	bl	80041d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	20000298 	.word	0x20000298

0800089c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b086      	sub	sp, #24
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008a4:	4a14      	ldr	r2, [pc, #80]	; (80008f8 <_sbrk+0x5c>)
 80008a6:	4b15      	ldr	r3, [pc, #84]	; (80008fc <_sbrk+0x60>)
 80008a8:	1ad3      	subs	r3, r2, r3
 80008aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008b0:	4b13      	ldr	r3, [pc, #76]	; (8000900 <_sbrk+0x64>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d102      	bne.n	80008be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008b8:	4b11      	ldr	r3, [pc, #68]	; (8000900 <_sbrk+0x64>)
 80008ba:	4a12      	ldr	r2, [pc, #72]	; (8000904 <_sbrk+0x68>)
 80008bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008be:	4b10      	ldr	r3, [pc, #64]	; (8000900 <_sbrk+0x64>)
 80008c0:	681a      	ldr	r2, [r3, #0]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	4413      	add	r3, r2
 80008c6:	693a      	ldr	r2, [r7, #16]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	d207      	bcs.n	80008dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008cc:	f008 f906 	bl	8008adc <__errno>
 80008d0:	4603      	mov	r3, r0
 80008d2:	220c      	movs	r2, #12
 80008d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008da:	e009      	b.n	80008f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008dc:	4b08      	ldr	r3, [pc, #32]	; (8000900 <_sbrk+0x64>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008e2:	4b07      	ldr	r3, [pc, #28]	; (8000900 <_sbrk+0x64>)
 80008e4:	681a      	ldr	r2, [r3, #0]
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	4413      	add	r3, r2
 80008ea:	4a05      	ldr	r2, [pc, #20]	; (8000900 <_sbrk+0x64>)
 80008ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008ee:	68fb      	ldr	r3, [r7, #12]
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	3718      	adds	r7, #24
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	20005000 	.word	0x20005000
 80008fc:	00000400 	.word	0x00000400
 8000900:	20000210 	.word	0x20000210
 8000904:	20000aa0 	.word	0x20000aa0

08000908 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800090c:	bf00      	nop
 800090e:	46bd      	mov	sp, r7
 8000910:	bc80      	pop	{r7}
 8000912:	4770      	bx	lr

08000914 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000914:	480c      	ldr	r0, [pc, #48]	; (8000948 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000916:	490d      	ldr	r1, [pc, #52]	; (800094c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000918:	4a0d      	ldr	r2, [pc, #52]	; (8000950 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800091a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800091c:	e002      	b.n	8000924 <LoopCopyDataInit>

0800091e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800091e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000920:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000922:	3304      	adds	r3, #4

08000924 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000924:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000926:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000928:	d3f9      	bcc.n	800091e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800092a:	4a0a      	ldr	r2, [pc, #40]	; (8000954 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800092c:	4c0a      	ldr	r4, [pc, #40]	; (8000958 <LoopFillZerobss+0x22>)
  movs r3, #0
 800092e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000930:	e001      	b.n	8000936 <LoopFillZerobss>

08000932 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000932:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000934:	3204      	adds	r2, #4

08000936 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000936:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000938:	d3fb      	bcc.n	8000932 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800093a:	f7ff ffe5 	bl	8000908 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800093e:	f008 f8d3 	bl	8008ae8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000942:	f7ff fc0b 	bl	800015c <main>
  bx lr
 8000946:	4770      	bx	lr
  ldr r0, =_sdata
 8000948:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800094c:	200001c8 	.word	0x200001c8
  ldr r2, =_sidata
 8000950:	0800949c 	.word	0x0800949c
  ldr r2, =_sbss
 8000954:	200001c8 	.word	0x200001c8
  ldr r4, =_ebss
 8000958:	20000aa0 	.word	0x20000aa0

0800095c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800095c:	e7fe      	b.n	800095c <ADC1_2_IRQHandler>
	...

08000960 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000964:	4b08      	ldr	r3, [pc, #32]	; (8000988 <HAL_Init+0x28>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a07      	ldr	r2, [pc, #28]	; (8000988 <HAL_Init+0x28>)
 800096a:	f043 0310 	orr.w	r3, r3, #16
 800096e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000970:	2003      	movs	r0, #3
 8000972:	f000 fe1f 	bl	80015b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000976:	2000      	movs	r0, #0
 8000978:	f000 f808 	bl	800098c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800097c:	f7ff fe48 	bl	8000610 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000980:	2300      	movs	r3, #0
}
 8000982:	4618      	mov	r0, r3
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40022000 	.word	0x40022000

0800098c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000994:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <HAL_InitTick+0x54>)
 8000996:	681a      	ldr	r2, [r3, #0]
 8000998:	4b12      	ldr	r3, [pc, #72]	; (80009e4 <HAL_InitTick+0x58>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	4619      	mov	r1, r3
 800099e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80009a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009aa:	4618      	mov	r0, r3
 80009ac:	f000 fe37 	bl	800161e <HAL_SYSTICK_Config>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009b6:	2301      	movs	r3, #1
 80009b8:	e00e      	b.n	80009d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	2b0f      	cmp	r3, #15
 80009be:	d80a      	bhi.n	80009d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009c0:	2200      	movs	r2, #0
 80009c2:	6879      	ldr	r1, [r7, #4]
 80009c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009c8:	f000 fdff 	bl	80015ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009cc:	4a06      	ldr	r2, [pc, #24]	; (80009e8 <HAL_InitTick+0x5c>)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009d2:	2300      	movs	r3, #0
 80009d4:	e000      	b.n	80009d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009d6:	2301      	movs	r3, #1
}
 80009d8:	4618      	mov	r0, r3
 80009da:	3708      	adds	r7, #8
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20000000 	.word	0x20000000
 80009e4:	20000008 	.word	0x20000008
 80009e8:	20000004 	.word	0x20000004

080009ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009f0:	4b05      	ldr	r3, [pc, #20]	; (8000a08 <HAL_IncTick+0x1c>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	461a      	mov	r2, r3
 80009f6:	4b05      	ldr	r3, [pc, #20]	; (8000a0c <HAL_IncTick+0x20>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	4413      	add	r3, r2
 80009fc:	4a03      	ldr	r2, [pc, #12]	; (8000a0c <HAL_IncTick+0x20>)
 80009fe:	6013      	str	r3, [r2, #0]
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bc80      	pop	{r7}
 8000a06:	4770      	bx	lr
 8000a08:	20000008 	.word	0x20000008
 8000a0c:	200002dc 	.word	0x200002dc

08000a10 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  return uwTick;
 8000a14:	4b02      	ldr	r3, [pc, #8]	; (8000a20 <HAL_GetTick+0x10>)
 8000a16:	681b      	ldr	r3, [r3, #0]
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bc80      	pop	{r7}
 8000a1e:	4770      	bx	lr
 8000a20:	200002dc 	.word	0x200002dc

08000a24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a2c:	f7ff fff0 	bl	8000a10 <HAL_GetTick>
 8000a30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a3c:	d005      	beq.n	8000a4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a3e:	4b0a      	ldr	r3, [pc, #40]	; (8000a68 <HAL_Delay+0x44>)
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	461a      	mov	r2, r3
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	4413      	add	r3, r2
 8000a48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a4a:	bf00      	nop
 8000a4c:	f7ff ffe0 	bl	8000a10 <HAL_GetTick>
 8000a50:	4602      	mov	r2, r0
 8000a52:	68bb      	ldr	r3, [r7, #8]
 8000a54:	1ad3      	subs	r3, r2, r3
 8000a56:	68fa      	ldr	r2, [r7, #12]
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	d8f7      	bhi.n	8000a4c <HAL_Delay+0x28>
  {
  }
}
 8000a5c:	bf00      	nop
 8000a5e:	bf00      	nop
 8000a60:	3710      	adds	r7, #16
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	20000008 	.word	0x20000008

08000a6c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b086      	sub	sp, #24
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a74:	2300      	movs	r3, #0
 8000a76:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000a80:	2300      	movs	r3, #0
 8000a82:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d101      	bne.n	8000a8e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	e0be      	b.n	8000c0c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	689b      	ldr	r3, [r3, #8]
 8000a92:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d109      	bne.n	8000ab0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000aaa:	6878      	ldr	r0, [r7, #4]
 8000aac:	f7ff fde2 	bl	8000674 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000ab0:	6878      	ldr	r0, [r7, #4]
 8000ab2:	f000 fbc5 	bl	8001240 <ADC_ConversionStop_Disable>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000abe:	f003 0310 	and.w	r3, r3, #16
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	f040 8099 	bne.w	8000bfa <HAL_ADC_Init+0x18e>
 8000ac8:	7dfb      	ldrb	r3, [r7, #23]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	f040 8095 	bne.w	8000bfa <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ad4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ad8:	f023 0302 	bic.w	r3, r3, #2
 8000adc:	f043 0202 	orr.w	r2, r3, #2
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000aec:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	7b1b      	ldrb	r3, [r3, #12]
 8000af2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000af4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000af6:	68ba      	ldr	r2, [r7, #8]
 8000af8:	4313      	orrs	r3, r2
 8000afa:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	689b      	ldr	r3, [r3, #8]
 8000b00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b04:	d003      	beq.n	8000b0e <HAL_ADC_Init+0xa2>
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	689b      	ldr	r3, [r3, #8]
 8000b0a:	2b01      	cmp	r3, #1
 8000b0c:	d102      	bne.n	8000b14 <HAL_ADC_Init+0xa8>
 8000b0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b12:	e000      	b.n	8000b16 <HAL_ADC_Init+0xaa>
 8000b14:	2300      	movs	r3, #0
 8000b16:	693a      	ldr	r2, [r7, #16]
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	7d1b      	ldrb	r3, [r3, #20]
 8000b20:	2b01      	cmp	r3, #1
 8000b22:	d119      	bne.n	8000b58 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	7b1b      	ldrb	r3, [r3, #12]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d109      	bne.n	8000b40 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	699b      	ldr	r3, [r3, #24]
 8000b30:	3b01      	subs	r3, #1
 8000b32:	035a      	lsls	r2, r3, #13
 8000b34:	693b      	ldr	r3, [r7, #16]
 8000b36:	4313      	orrs	r3, r2
 8000b38:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b3c:	613b      	str	r3, [r7, #16]
 8000b3e:	e00b      	b.n	8000b58 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b44:	f043 0220 	orr.w	r2, r3, #32
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b50:	f043 0201 	orr.w	r2, r3, #1
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	430a      	orrs	r2, r1
 8000b6a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	689a      	ldr	r2, [r3, #8]
 8000b72:	4b28      	ldr	r3, [pc, #160]	; (8000c14 <HAL_ADC_Init+0x1a8>)
 8000b74:	4013      	ands	r3, r2
 8000b76:	687a      	ldr	r2, [r7, #4]
 8000b78:	6812      	ldr	r2, [r2, #0]
 8000b7a:	68b9      	ldr	r1, [r7, #8]
 8000b7c:	430b      	orrs	r3, r1
 8000b7e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	689b      	ldr	r3, [r3, #8]
 8000b84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b88:	d003      	beq.n	8000b92 <HAL_ADC_Init+0x126>
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	689b      	ldr	r3, [r3, #8]
 8000b8e:	2b01      	cmp	r3, #1
 8000b90:	d104      	bne.n	8000b9c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	691b      	ldr	r3, [r3, #16]
 8000b96:	3b01      	subs	r3, #1
 8000b98:	051b      	lsls	r3, r3, #20
 8000b9a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ba2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	68fa      	ldr	r2, [r7, #12]
 8000bac:	430a      	orrs	r2, r1
 8000bae:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	689a      	ldr	r2, [r3, #8]
 8000bb6:	4b18      	ldr	r3, [pc, #96]	; (8000c18 <HAL_ADC_Init+0x1ac>)
 8000bb8:	4013      	ands	r3, r2
 8000bba:	68ba      	ldr	r2, [r7, #8]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d10b      	bne.n	8000bd8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bca:	f023 0303 	bic.w	r3, r3, #3
 8000bce:	f043 0201 	orr.w	r2, r3, #1
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000bd6:	e018      	b.n	8000c0a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bdc:	f023 0312 	bic.w	r3, r3, #18
 8000be0:	f043 0210 	orr.w	r2, r3, #16
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bec:	f043 0201 	orr.w	r2, r3, #1
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000bf8:	e007      	b.n	8000c0a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bfe:	f043 0210 	orr.w	r2, r3, #16
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000c06:	2301      	movs	r3, #1
 8000c08:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000c0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	3718      	adds	r7, #24
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	ffe1f7fd 	.word	0xffe1f7fd
 8000c18:	ff1f0efe 	.word	0xff1f0efe

08000c1c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c24:	2300      	movs	r3, #0
 8000c26:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000c2e:	2b01      	cmp	r3, #1
 8000c30:	d101      	bne.n	8000c36 <HAL_ADC_Start+0x1a>
 8000c32:	2302      	movs	r3, #2
 8000c34:	e098      	b.n	8000d68 <HAL_ADC_Start+0x14c>
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	2201      	movs	r2, #1
 8000c3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000c3e:	6878      	ldr	r0, [r7, #4]
 8000c40:	f000 faa4 	bl	800118c <ADC_Enable>
 8000c44:	4603      	mov	r3, r0
 8000c46:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000c48:	7bfb      	ldrb	r3, [r7, #15]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	f040 8087 	bne.w	8000d5e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000c58:	f023 0301 	bic.w	r3, r3, #1
 8000c5c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a41      	ldr	r2, [pc, #260]	; (8000d70 <HAL_ADC_Start+0x154>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d105      	bne.n	8000c7a <HAL_ADC_Start+0x5e>
 8000c6e:	4b41      	ldr	r3, [pc, #260]	; (8000d74 <HAL_ADC_Start+0x158>)
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d115      	bne.n	8000ca6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c7e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d026      	beq.n	8000ce2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c98:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000c9c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000ca4:	e01d      	b.n	8000ce2 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000caa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a2f      	ldr	r2, [pc, #188]	; (8000d74 <HAL_ADC_Start+0x158>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d004      	beq.n	8000cc6 <HAL_ADC_Start+0xaa>
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a2b      	ldr	r2, [pc, #172]	; (8000d70 <HAL_ADC_Start+0x154>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d10d      	bne.n	8000ce2 <HAL_ADC_Start+0xc6>
 8000cc6:	4b2b      	ldr	r3, [pc, #172]	; (8000d74 <HAL_ADC_Start+0x158>)
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d007      	beq.n	8000ce2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cd6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000cda:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ce6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d006      	beq.n	8000cfc <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cf2:	f023 0206 	bic.w	r2, r3, #6
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	62da      	str	r2, [r3, #44]	; 0x2c
 8000cfa:	e002      	b.n	8000d02 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2200      	movs	r2, #0
 8000d00:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2200      	movs	r2, #0
 8000d06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f06f 0202 	mvn.w	r2, #2
 8000d12:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	689b      	ldr	r3, [r3, #8]
 8000d1a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000d1e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000d22:	d113      	bne.n	8000d4c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000d28:	4a11      	ldr	r2, [pc, #68]	; (8000d70 <HAL_ADC_Start+0x154>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d105      	bne.n	8000d3a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000d2e:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <HAL_ADC_Start+0x158>)
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d108      	bne.n	8000d4c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	689a      	ldr	r2, [r3, #8]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000d48:	609a      	str	r2, [r3, #8]
 8000d4a:	e00c      	b.n	8000d66 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	689a      	ldr	r2, [r3, #8]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	e003      	b.n	8000d66 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2200      	movs	r2, #0
 8000d62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3710      	adds	r7, #16
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	40012800 	.word	0x40012800
 8000d74:	40012400 	.word	0x40012400

08000d78 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000d78:	b590      	push	{r4, r7, lr}
 8000d7a:	b087      	sub	sp, #28
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000d82:	2300      	movs	r3, #0
 8000d84:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000d86:	2300      	movs	r3, #0
 8000d88:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000d8e:	f7ff fe3f 	bl	8000a10 <HAL_GetTick>
 8000d92:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	689b      	ldr	r3, [r3, #8]
 8000d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d00b      	beq.n	8000dba <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000da6:	f043 0220 	orr.w	r2, r3, #32
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2200      	movs	r2, #0
 8000db2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	e0d3      	b.n	8000f62 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d131      	bne.n	8000e2c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dce:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d12a      	bne.n	8000e2c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000dd6:	e021      	b.n	8000e1c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000dde:	d01d      	beq.n	8000e1c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d007      	beq.n	8000df6 <HAL_ADC_PollForConversion+0x7e>
 8000de6:	f7ff fe13 	bl	8000a10 <HAL_GetTick>
 8000dea:	4602      	mov	r2, r0
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	1ad3      	subs	r3, r2, r3
 8000df0:	683a      	ldr	r2, [r7, #0]
 8000df2:	429a      	cmp	r2, r3
 8000df4:	d212      	bcs.n	8000e1c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f003 0302 	and.w	r3, r3, #2
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d10b      	bne.n	8000e1c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e08:	f043 0204 	orr.w	r2, r3, #4
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2200      	movs	r2, #0
 8000e14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8000e18:	2303      	movs	r3, #3
 8000e1a:	e0a2      	b.n	8000f62 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f003 0302 	and.w	r3, r3, #2
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d0d6      	beq.n	8000dd8 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000e2a:	e070      	b.n	8000f0e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000e2c:	4b4f      	ldr	r3, [pc, #316]	; (8000f6c <HAL_ADC_PollForConversion+0x1f4>)
 8000e2e:	681c      	ldr	r4, [r3, #0]
 8000e30:	2002      	movs	r0, #2
 8000e32:	f002 fffd 	bl	8003e30 <HAL_RCCEx_GetPeriphCLKFreq>
 8000e36:	4603      	mov	r3, r0
 8000e38:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	6919      	ldr	r1, [r3, #16]
 8000e42:	4b4b      	ldr	r3, [pc, #300]	; (8000f70 <HAL_ADC_PollForConversion+0x1f8>)
 8000e44:	400b      	ands	r3, r1
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d118      	bne.n	8000e7c <HAL_ADC_PollForConversion+0x104>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	68d9      	ldr	r1, [r3, #12]
 8000e50:	4b48      	ldr	r3, [pc, #288]	; (8000f74 <HAL_ADC_PollForConversion+0x1fc>)
 8000e52:	400b      	ands	r3, r1
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d111      	bne.n	8000e7c <HAL_ADC_PollForConversion+0x104>
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	6919      	ldr	r1, [r3, #16]
 8000e5e:	4b46      	ldr	r3, [pc, #280]	; (8000f78 <HAL_ADC_PollForConversion+0x200>)
 8000e60:	400b      	ands	r3, r1
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d108      	bne.n	8000e78 <HAL_ADC_PollForConversion+0x100>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	68d9      	ldr	r1, [r3, #12]
 8000e6c:	4b43      	ldr	r3, [pc, #268]	; (8000f7c <HAL_ADC_PollForConversion+0x204>)
 8000e6e:	400b      	ands	r3, r1
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d101      	bne.n	8000e78 <HAL_ADC_PollForConversion+0x100>
 8000e74:	2314      	movs	r3, #20
 8000e76:	e020      	b.n	8000eba <HAL_ADC_PollForConversion+0x142>
 8000e78:	2329      	movs	r3, #41	; 0x29
 8000e7a:	e01e      	b.n	8000eba <HAL_ADC_PollForConversion+0x142>
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	6919      	ldr	r1, [r3, #16]
 8000e82:	4b3d      	ldr	r3, [pc, #244]	; (8000f78 <HAL_ADC_PollForConversion+0x200>)
 8000e84:	400b      	ands	r3, r1
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d106      	bne.n	8000e98 <HAL_ADC_PollForConversion+0x120>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	68d9      	ldr	r1, [r3, #12]
 8000e90:	4b3a      	ldr	r3, [pc, #232]	; (8000f7c <HAL_ADC_PollForConversion+0x204>)
 8000e92:	400b      	ands	r3, r1
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d00d      	beq.n	8000eb4 <HAL_ADC_PollForConversion+0x13c>
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	6919      	ldr	r1, [r3, #16]
 8000e9e:	4b38      	ldr	r3, [pc, #224]	; (8000f80 <HAL_ADC_PollForConversion+0x208>)
 8000ea0:	400b      	ands	r3, r1
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d108      	bne.n	8000eb8 <HAL_ADC_PollForConversion+0x140>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	68d9      	ldr	r1, [r3, #12]
 8000eac:	4b34      	ldr	r3, [pc, #208]	; (8000f80 <HAL_ADC_PollForConversion+0x208>)
 8000eae:	400b      	ands	r3, r1
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d101      	bne.n	8000eb8 <HAL_ADC_PollForConversion+0x140>
 8000eb4:	2354      	movs	r3, #84	; 0x54
 8000eb6:	e000      	b.n	8000eba <HAL_ADC_PollForConversion+0x142>
 8000eb8:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000eba:	fb02 f303 	mul.w	r3, r2, r3
 8000ebe:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000ec0:	e021      	b.n	8000f06 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ec8:	d01a      	beq.n	8000f00 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d007      	beq.n	8000ee0 <HAL_ADC_PollForConversion+0x168>
 8000ed0:	f7ff fd9e 	bl	8000a10 <HAL_GetTick>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	683a      	ldr	r2, [r7, #0]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d20f      	bcs.n	8000f00 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d90b      	bls.n	8000f00 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eec:	f043 0204 	orr.w	r2, r3, #4
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8000efc:	2303      	movs	r3, #3
 8000efe:	e030      	b.n	8000f62 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	3301      	adds	r3, #1
 8000f04:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	d8d9      	bhi.n	8000ec2 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f06f 0212 	mvn.w	r2, #18
 8000f16:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f1c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000f2e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000f32:	d115      	bne.n	8000f60 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d111      	bne.n	8000f60 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f40:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d105      	bne.n	8000f60 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f58:	f043 0201 	orr.w	r2, r3, #1
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	371c      	adds	r7, #28
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd90      	pop	{r4, r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000000 	.word	0x20000000
 8000f70:	24924924 	.word	0x24924924
 8000f74:	00924924 	.word	0x00924924
 8000f78:	12492492 	.word	0x12492492
 8000f7c:	00492492 	.word	0x00492492
 8000f80:	00249249 	.word	0x00249249

08000f84 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bc80      	pop	{r7}
 8000f9a:	4770      	bx	lr

08000f9c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000f9c:	b480      	push	{r7}
 8000f9e:	b085      	sub	sp, #20
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000faa:	2300      	movs	r3, #0
 8000fac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d101      	bne.n	8000fbc <HAL_ADC_ConfigChannel+0x20>
 8000fb8:	2302      	movs	r3, #2
 8000fba:	e0dc      	b.n	8001176 <HAL_ADC_ConfigChannel+0x1da>
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	2b06      	cmp	r3, #6
 8000fca:	d81c      	bhi.n	8001006 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685a      	ldr	r2, [r3, #4]
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	4413      	add	r3, r2
 8000fdc:	3b05      	subs	r3, #5
 8000fde:	221f      	movs	r2, #31
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	4019      	ands	r1, r3
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	6818      	ldr	r0, [r3, #0]
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685a      	ldr	r2, [r3, #4]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	4413      	add	r3, r2
 8000ff6:	3b05      	subs	r3, #5
 8000ff8:	fa00 f203 	lsl.w	r2, r0, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	430a      	orrs	r2, r1
 8001002:	635a      	str	r2, [r3, #52]	; 0x34
 8001004:	e03c      	b.n	8001080 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	2b0c      	cmp	r3, #12
 800100c:	d81c      	bhi.n	8001048 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685a      	ldr	r2, [r3, #4]
 8001018:	4613      	mov	r3, r2
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	4413      	add	r3, r2
 800101e:	3b23      	subs	r3, #35	; 0x23
 8001020:	221f      	movs	r2, #31
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	43db      	mvns	r3, r3
 8001028:	4019      	ands	r1, r3
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	6818      	ldr	r0, [r3, #0]
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685a      	ldr	r2, [r3, #4]
 8001032:	4613      	mov	r3, r2
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	4413      	add	r3, r2
 8001038:	3b23      	subs	r3, #35	; 0x23
 800103a:	fa00 f203 	lsl.w	r2, r0, r3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	430a      	orrs	r2, r1
 8001044:	631a      	str	r2, [r3, #48]	; 0x30
 8001046:	e01b      	b.n	8001080 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685a      	ldr	r2, [r3, #4]
 8001052:	4613      	mov	r3, r2
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	4413      	add	r3, r2
 8001058:	3b41      	subs	r3, #65	; 0x41
 800105a:	221f      	movs	r2, #31
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	43db      	mvns	r3, r3
 8001062:	4019      	ands	r1, r3
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	6818      	ldr	r0, [r3, #0]
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685a      	ldr	r2, [r3, #4]
 800106c:	4613      	mov	r3, r2
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	4413      	add	r3, r2
 8001072:	3b41      	subs	r3, #65	; 0x41
 8001074:	fa00 f203 	lsl.w	r2, r0, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	430a      	orrs	r2, r1
 800107e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2b09      	cmp	r3, #9
 8001086:	d91c      	bls.n	80010c2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	68d9      	ldr	r1, [r3, #12]
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	4613      	mov	r3, r2
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	4413      	add	r3, r2
 8001098:	3b1e      	subs	r3, #30
 800109a:	2207      	movs	r2, #7
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	43db      	mvns	r3, r3
 80010a2:	4019      	ands	r1, r3
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	6898      	ldr	r0, [r3, #8]
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	4613      	mov	r3, r2
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	4413      	add	r3, r2
 80010b2:	3b1e      	subs	r3, #30
 80010b4:	fa00 f203 	lsl.w	r2, r0, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	430a      	orrs	r2, r1
 80010be:	60da      	str	r2, [r3, #12]
 80010c0:	e019      	b.n	80010f6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	6919      	ldr	r1, [r3, #16]
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	4613      	mov	r3, r2
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	4413      	add	r3, r2
 80010d2:	2207      	movs	r2, #7
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	43db      	mvns	r3, r3
 80010da:	4019      	ands	r1, r3
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	6898      	ldr	r0, [r3, #8]
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	4613      	mov	r3, r2
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	4413      	add	r3, r2
 80010ea:	fa00 f203 	lsl.w	r2, r0, r3
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	430a      	orrs	r2, r1
 80010f4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	2b10      	cmp	r3, #16
 80010fc:	d003      	beq.n	8001106 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001102:	2b11      	cmp	r3, #17
 8001104:	d132      	bne.n	800116c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a1d      	ldr	r2, [pc, #116]	; (8001180 <HAL_ADC_ConfigChannel+0x1e4>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d125      	bne.n	800115c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800111a:	2b00      	cmp	r3, #0
 800111c:	d126      	bne.n	800116c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	689a      	ldr	r2, [r3, #8]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800112c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	2b10      	cmp	r3, #16
 8001134:	d11a      	bne.n	800116c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001136:	4b13      	ldr	r3, [pc, #76]	; (8001184 <HAL_ADC_ConfigChannel+0x1e8>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a13      	ldr	r2, [pc, #76]	; (8001188 <HAL_ADC_ConfigChannel+0x1ec>)
 800113c:	fba2 2303 	umull	r2, r3, r2, r3
 8001140:	0c9a      	lsrs	r2, r3, #18
 8001142:	4613      	mov	r3, r2
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	4413      	add	r3, r2
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800114c:	e002      	b.n	8001154 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	3b01      	subs	r3, #1
 8001152:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d1f9      	bne.n	800114e <HAL_ADC_ConfigChannel+0x1b2>
 800115a:	e007      	b.n	800116c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001160:	f043 0220 	orr.w	r2, r3, #32
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001168:	2301      	movs	r3, #1
 800116a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2200      	movs	r2, #0
 8001170:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001174:	7bfb      	ldrb	r3, [r7, #15]
}
 8001176:	4618      	mov	r0, r3
 8001178:	3714      	adds	r7, #20
 800117a:	46bd      	mov	sp, r7
 800117c:	bc80      	pop	{r7}
 800117e:	4770      	bx	lr
 8001180:	40012400 	.word	0x40012400
 8001184:	20000000 	.word	0x20000000
 8001188:	431bde83 	.word	0x431bde83

0800118c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001194:	2300      	movs	r3, #0
 8001196:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001198:	2300      	movs	r3, #0
 800119a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d040      	beq.n	800122c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	689a      	ldr	r2, [r3, #8]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f042 0201 	orr.w	r2, r2, #1
 80011b8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80011ba:	4b1f      	ldr	r3, [pc, #124]	; (8001238 <ADC_Enable+0xac>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a1f      	ldr	r2, [pc, #124]	; (800123c <ADC_Enable+0xb0>)
 80011c0:	fba2 2303 	umull	r2, r3, r2, r3
 80011c4:	0c9b      	lsrs	r3, r3, #18
 80011c6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80011c8:	e002      	b.n	80011d0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	3b01      	subs	r3, #1
 80011ce:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d1f9      	bne.n	80011ca <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80011d6:	f7ff fc1b 	bl	8000a10 <HAL_GetTick>
 80011da:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80011dc:	e01f      	b.n	800121e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80011de:	f7ff fc17 	bl	8000a10 <HAL_GetTick>
 80011e2:	4602      	mov	r2, r0
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	d918      	bls.n	800121e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d011      	beq.n	800121e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011fe:	f043 0210 	orr.w	r2, r3, #16
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800120a:	f043 0201 	orr.w	r2, r3, #1
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2200      	movs	r2, #0
 8001216:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e007      	b.n	800122e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	f003 0301 	and.w	r3, r3, #1
 8001228:	2b01      	cmp	r3, #1
 800122a:	d1d8      	bne.n	80011de <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	3710      	adds	r7, #16
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	20000000 	.word	0x20000000
 800123c:	431bde83 	.word	0x431bde83

08001240 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001248:	2300      	movs	r3, #0
 800124a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	2b01      	cmp	r3, #1
 8001258:	d12e      	bne.n	80012b8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	689a      	ldr	r2, [r3, #8]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f022 0201 	bic.w	r2, r2, #1
 8001268:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800126a:	f7ff fbd1 	bl	8000a10 <HAL_GetTick>
 800126e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001270:	e01b      	b.n	80012aa <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001272:	f7ff fbcd 	bl	8000a10 <HAL_GetTick>
 8001276:	4602      	mov	r2, r0
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	2b02      	cmp	r3, #2
 800127e:	d914      	bls.n	80012aa <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	2b01      	cmp	r3, #1
 800128c:	d10d      	bne.n	80012aa <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001292:	f043 0210 	orr.w	r2, r3, #16
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800129e:	f043 0201 	orr.w	r2, r3, #1
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e007      	b.n	80012ba <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	f003 0301 	and.w	r3, r3, #1
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d0dc      	beq.n	8001272 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80012b8:	2300      	movs	r3, #0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3710      	adds	r7, #16
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
	...

080012c4 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80012c4:	b590      	push	{r4, r7, lr}
 80012c6:	b087      	sub	sp, #28
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012cc:	2300      	movs	r3, #0
 80012ce:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80012d0:	2300      	movs	r3, #0
 80012d2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d101      	bne.n	80012e2 <HAL_ADCEx_Calibration_Start+0x1e>
 80012de:	2302      	movs	r3, #2
 80012e0:	e095      	b.n	800140e <HAL_ADCEx_Calibration_Start+0x14a>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2201      	movs	r2, #1
 80012e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f7ff ffa8 	bl	8001240 <ADC_ConversionStop_Disable>
 80012f0:	4603      	mov	r3, r0
 80012f2:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80012f4:	7dfb      	ldrb	r3, [r7, #23]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	f040 8084 	bne.w	8001404 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001300:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001304:	f023 0302 	bic.w	r3, r3, #2
 8001308:	f043 0202 	orr.w	r2, r3, #2
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001310:	4b41      	ldr	r3, [pc, #260]	; (8001418 <HAL_ADCEx_Calibration_Start+0x154>)
 8001312:	681c      	ldr	r4, [r3, #0]
 8001314:	2002      	movs	r0, #2
 8001316:	f002 fd8b 	bl	8003e30 <HAL_RCCEx_GetPeriphCLKFreq>
 800131a:	4603      	mov	r3, r0
 800131c:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001320:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001322:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001324:	e002      	b.n	800132c <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	3b01      	subs	r3, #1
 800132a:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d1f9      	bne.n	8001326 <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f7ff ff2a 	bl	800118c <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	689a      	ldr	r2, [r3, #8]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f042 0208 	orr.w	r2, r2, #8
 8001346:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001348:	f7ff fb62 	bl	8000a10 <HAL_GetTick>
 800134c:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800134e:	e01b      	b.n	8001388 <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001350:	f7ff fb5e 	bl	8000a10 <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	2b0a      	cmp	r3, #10
 800135c:	d914      	bls.n	8001388 <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	f003 0308 	and.w	r3, r3, #8
 8001368:	2b00      	cmp	r3, #0
 800136a:	d00d      	beq.n	8001388 <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001370:	f023 0312 	bic.w	r3, r3, #18
 8001374:	f043 0210 	orr.w	r2, r3, #16
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2200      	movs	r2, #0
 8001380:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e042      	b.n	800140e <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	f003 0308 	and.w	r3, r3, #8
 8001392:	2b00      	cmp	r3, #0
 8001394:	d1dc      	bne.n	8001350 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	689a      	ldr	r2, [r3, #8]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f042 0204 	orr.w	r2, r2, #4
 80013a4:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80013a6:	f7ff fb33 	bl	8000a10 <HAL_GetTick>
 80013aa:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80013ac:	e01b      	b.n	80013e6 <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80013ae:	f7ff fb2f 	bl	8000a10 <HAL_GetTick>
 80013b2:	4602      	mov	r2, r0
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	2b0a      	cmp	r3, #10
 80013ba:	d914      	bls.n	80013e6 <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	f003 0304 	and.w	r3, r3, #4
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d00d      	beq.n	80013e6 <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ce:	f023 0312 	bic.w	r3, r3, #18
 80013d2:	f043 0210 	orr.w	r2, r3, #16
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2200      	movs	r2, #0
 80013de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e013      	b.n	800140e <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	f003 0304 	and.w	r3, r3, #4
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d1dc      	bne.n	80013ae <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f8:	f023 0303 	bic.w	r3, r3, #3
 80013fc:	f043 0201 	orr.w	r2, r3, #1
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2200      	movs	r2, #0
 8001408:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800140c:	7dfb      	ldrb	r3, [r7, #23]
}
 800140e:	4618      	mov	r0, r3
 8001410:	371c      	adds	r7, #28
 8001412:	46bd      	mov	sp, r7
 8001414:	bd90      	pop	{r4, r7, pc}
 8001416:	bf00      	nop
 8001418:	20000000 	.word	0x20000000

0800141c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f003 0307 	and.w	r3, r3, #7
 800142a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800142c:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <__NVIC_SetPriorityGrouping+0x44>)
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001432:	68ba      	ldr	r2, [r7, #8]
 8001434:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001438:	4013      	ands	r3, r2
 800143a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001444:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001448:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800144c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800144e:	4a04      	ldr	r2, [pc, #16]	; (8001460 <__NVIC_SetPriorityGrouping+0x44>)
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	60d3      	str	r3, [r2, #12]
}
 8001454:	bf00      	nop
 8001456:	3714      	adds	r7, #20
 8001458:	46bd      	mov	sp, r7
 800145a:	bc80      	pop	{r7}
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	e000ed00 	.word	0xe000ed00

08001464 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001468:	4b04      	ldr	r3, [pc, #16]	; (800147c <__NVIC_GetPriorityGrouping+0x18>)
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	0a1b      	lsrs	r3, r3, #8
 800146e:	f003 0307 	and.w	r3, r3, #7
}
 8001472:	4618      	mov	r0, r3
 8001474:	46bd      	mov	sp, r7
 8001476:	bc80      	pop	{r7}
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	e000ed00 	.word	0xe000ed00

08001480 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800148a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148e:	2b00      	cmp	r3, #0
 8001490:	db0b      	blt.n	80014aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	f003 021f 	and.w	r2, r3, #31
 8001498:	4906      	ldr	r1, [pc, #24]	; (80014b4 <__NVIC_EnableIRQ+0x34>)
 800149a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149e:	095b      	lsrs	r3, r3, #5
 80014a0:	2001      	movs	r0, #1
 80014a2:	fa00 f202 	lsl.w	r2, r0, r2
 80014a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014aa:	bf00      	nop
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bc80      	pop	{r7}
 80014b2:	4770      	bx	lr
 80014b4:	e000e100 	.word	0xe000e100

080014b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	6039      	str	r1, [r7, #0]
 80014c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	db0a      	blt.n	80014e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	b2da      	uxtb	r2, r3
 80014d0:	490c      	ldr	r1, [pc, #48]	; (8001504 <__NVIC_SetPriority+0x4c>)
 80014d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d6:	0112      	lsls	r2, r2, #4
 80014d8:	b2d2      	uxtb	r2, r2
 80014da:	440b      	add	r3, r1
 80014dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014e0:	e00a      	b.n	80014f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	b2da      	uxtb	r2, r3
 80014e6:	4908      	ldr	r1, [pc, #32]	; (8001508 <__NVIC_SetPriority+0x50>)
 80014e8:	79fb      	ldrb	r3, [r7, #7]
 80014ea:	f003 030f 	and.w	r3, r3, #15
 80014ee:	3b04      	subs	r3, #4
 80014f0:	0112      	lsls	r2, r2, #4
 80014f2:	b2d2      	uxtb	r2, r2
 80014f4:	440b      	add	r3, r1
 80014f6:	761a      	strb	r2, [r3, #24]
}
 80014f8:	bf00      	nop
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bc80      	pop	{r7}
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	e000e100 	.word	0xe000e100
 8001508:	e000ed00 	.word	0xe000ed00

0800150c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800150c:	b480      	push	{r7}
 800150e:	b089      	sub	sp, #36	; 0x24
 8001510:	af00      	add	r7, sp, #0
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f003 0307 	and.w	r3, r3, #7
 800151e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	f1c3 0307 	rsb	r3, r3, #7
 8001526:	2b04      	cmp	r3, #4
 8001528:	bf28      	it	cs
 800152a:	2304      	movcs	r3, #4
 800152c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	3304      	adds	r3, #4
 8001532:	2b06      	cmp	r3, #6
 8001534:	d902      	bls.n	800153c <NVIC_EncodePriority+0x30>
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	3b03      	subs	r3, #3
 800153a:	e000      	b.n	800153e <NVIC_EncodePriority+0x32>
 800153c:	2300      	movs	r3, #0
 800153e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001540:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	43da      	mvns	r2, r3
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	401a      	ands	r2, r3
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001554:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	fa01 f303 	lsl.w	r3, r1, r3
 800155e:	43d9      	mvns	r1, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001564:	4313      	orrs	r3, r2
         );
}
 8001566:	4618      	mov	r0, r3
 8001568:	3724      	adds	r7, #36	; 0x24
 800156a:	46bd      	mov	sp, r7
 800156c:	bc80      	pop	{r7}
 800156e:	4770      	bx	lr

08001570 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	3b01      	subs	r3, #1
 800157c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001580:	d301      	bcc.n	8001586 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001582:	2301      	movs	r3, #1
 8001584:	e00f      	b.n	80015a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001586:	4a0a      	ldr	r2, [pc, #40]	; (80015b0 <SysTick_Config+0x40>)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	3b01      	subs	r3, #1
 800158c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800158e:	210f      	movs	r1, #15
 8001590:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001594:	f7ff ff90 	bl	80014b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001598:	4b05      	ldr	r3, [pc, #20]	; (80015b0 <SysTick_Config+0x40>)
 800159a:	2200      	movs	r2, #0
 800159c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800159e:	4b04      	ldr	r3, [pc, #16]	; (80015b0 <SysTick_Config+0x40>)
 80015a0:	2207      	movs	r2, #7
 80015a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	e000e010 	.word	0xe000e010

080015b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f7ff ff2d 	bl	800141c <__NVIC_SetPriorityGrouping>
}
 80015c2:	bf00      	nop
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b086      	sub	sp, #24
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	4603      	mov	r3, r0
 80015d2:	60b9      	str	r1, [r7, #8]
 80015d4:	607a      	str	r2, [r7, #4]
 80015d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015d8:	2300      	movs	r3, #0
 80015da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015dc:	f7ff ff42 	bl	8001464 <__NVIC_GetPriorityGrouping>
 80015e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	68b9      	ldr	r1, [r7, #8]
 80015e6:	6978      	ldr	r0, [r7, #20]
 80015e8:	f7ff ff90 	bl	800150c <NVIC_EncodePriority>
 80015ec:	4602      	mov	r2, r0
 80015ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015f2:	4611      	mov	r1, r2
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff ff5f 	bl	80014b8 <__NVIC_SetPriority>
}
 80015fa:	bf00      	nop
 80015fc:	3718      	adds	r7, #24
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001602:	b580      	push	{r7, lr}
 8001604:	b082      	sub	sp, #8
 8001606:	af00      	add	r7, sp, #0
 8001608:	4603      	mov	r3, r0
 800160a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800160c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff ff35 	bl	8001480 <__NVIC_EnableIRQ>
}
 8001616:	bf00      	nop
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b082      	sub	sp, #8
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f7ff ffa2 	bl	8001570 <SysTick_Config>
 800162c:	4603      	mov	r3, r0
}
 800162e:	4618      	mov	r0, r3
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001636:	b480      	push	{r7}
 8001638:	b085      	sub	sp, #20
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800163e:	2300      	movs	r3, #0
 8001640:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001648:	2b02      	cmp	r3, #2
 800164a:	d008      	beq.n	800165e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2204      	movs	r2, #4
 8001650:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e020      	b.n	80016a0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f022 020e 	bic.w	r2, r2, #14
 800166c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f022 0201 	bic.w	r2, r2, #1
 800167c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001686:	2101      	movs	r1, #1
 8001688:	fa01 f202 	lsl.w	r2, r1, r2
 800168c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2201      	movs	r2, #1
 8001692:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2200      	movs	r2, #0
 800169a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800169e:	7bfb      	ldrb	r3, [r7, #15]
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3714      	adds	r7, #20
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bc80      	pop	{r7}
 80016a8:	4770      	bx	lr
	...

080016ac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016b4:	2300      	movs	r3, #0
 80016b6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d005      	beq.n	80016ce <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2204      	movs	r2, #4
 80016c6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	73fb      	strb	r3, [r7, #15]
 80016cc:	e051      	b.n	8001772 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f022 020e 	bic.w	r2, r2, #14
 80016dc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f022 0201 	bic.w	r2, r2, #1
 80016ec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a22      	ldr	r2, [pc, #136]	; (800177c <HAL_DMA_Abort_IT+0xd0>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d029      	beq.n	800174c <HAL_DMA_Abort_IT+0xa0>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a20      	ldr	r2, [pc, #128]	; (8001780 <HAL_DMA_Abort_IT+0xd4>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d022      	beq.n	8001748 <HAL_DMA_Abort_IT+0x9c>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a1f      	ldr	r2, [pc, #124]	; (8001784 <HAL_DMA_Abort_IT+0xd8>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d01a      	beq.n	8001742 <HAL_DMA_Abort_IT+0x96>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a1d      	ldr	r2, [pc, #116]	; (8001788 <HAL_DMA_Abort_IT+0xdc>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d012      	beq.n	800173c <HAL_DMA_Abort_IT+0x90>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a1c      	ldr	r2, [pc, #112]	; (800178c <HAL_DMA_Abort_IT+0xe0>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d00a      	beq.n	8001736 <HAL_DMA_Abort_IT+0x8a>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a1a      	ldr	r2, [pc, #104]	; (8001790 <HAL_DMA_Abort_IT+0xe4>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d102      	bne.n	8001730 <HAL_DMA_Abort_IT+0x84>
 800172a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800172e:	e00e      	b.n	800174e <HAL_DMA_Abort_IT+0xa2>
 8001730:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001734:	e00b      	b.n	800174e <HAL_DMA_Abort_IT+0xa2>
 8001736:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800173a:	e008      	b.n	800174e <HAL_DMA_Abort_IT+0xa2>
 800173c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001740:	e005      	b.n	800174e <HAL_DMA_Abort_IT+0xa2>
 8001742:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001746:	e002      	b.n	800174e <HAL_DMA_Abort_IT+0xa2>
 8001748:	2310      	movs	r3, #16
 800174a:	e000      	b.n	800174e <HAL_DMA_Abort_IT+0xa2>
 800174c:	2301      	movs	r3, #1
 800174e:	4a11      	ldr	r2, [pc, #68]	; (8001794 <HAL_DMA_Abort_IT+0xe8>)
 8001750:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2201      	movs	r2, #1
 8001756:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2200      	movs	r2, #0
 800175e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001766:	2b00      	cmp	r3, #0
 8001768:	d003      	beq.n	8001772 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	4798      	blx	r3
    } 
  }
  return status;
 8001772:	7bfb      	ldrb	r3, [r7, #15]
}
 8001774:	4618      	mov	r0, r3
 8001776:	3710      	adds	r7, #16
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	40020008 	.word	0x40020008
 8001780:	4002001c 	.word	0x4002001c
 8001784:	40020030 	.word	0x40020030
 8001788:	40020044 	.word	0x40020044
 800178c:	40020058 	.word	0x40020058
 8001790:	4002006c 	.word	0x4002006c
 8001794:	40020000 	.word	0x40020000

08001798 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001798:	b480      	push	{r7}
 800179a:	b08b      	sub	sp, #44	; 0x2c
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017a2:	2300      	movs	r3, #0
 80017a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017a6:	2300      	movs	r3, #0
 80017a8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017aa:	e169      	b.n	8001a80 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017ac:	2201      	movs	r2, #1
 80017ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	69fa      	ldr	r2, [r7, #28]
 80017bc:	4013      	ands	r3, r2
 80017be:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	f040 8158 	bne.w	8001a7a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	4a9a      	ldr	r2, [pc, #616]	; (8001a38 <HAL_GPIO_Init+0x2a0>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d05e      	beq.n	8001892 <HAL_GPIO_Init+0xfa>
 80017d4:	4a98      	ldr	r2, [pc, #608]	; (8001a38 <HAL_GPIO_Init+0x2a0>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d875      	bhi.n	80018c6 <HAL_GPIO_Init+0x12e>
 80017da:	4a98      	ldr	r2, [pc, #608]	; (8001a3c <HAL_GPIO_Init+0x2a4>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d058      	beq.n	8001892 <HAL_GPIO_Init+0xfa>
 80017e0:	4a96      	ldr	r2, [pc, #600]	; (8001a3c <HAL_GPIO_Init+0x2a4>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d86f      	bhi.n	80018c6 <HAL_GPIO_Init+0x12e>
 80017e6:	4a96      	ldr	r2, [pc, #600]	; (8001a40 <HAL_GPIO_Init+0x2a8>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d052      	beq.n	8001892 <HAL_GPIO_Init+0xfa>
 80017ec:	4a94      	ldr	r2, [pc, #592]	; (8001a40 <HAL_GPIO_Init+0x2a8>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d869      	bhi.n	80018c6 <HAL_GPIO_Init+0x12e>
 80017f2:	4a94      	ldr	r2, [pc, #592]	; (8001a44 <HAL_GPIO_Init+0x2ac>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d04c      	beq.n	8001892 <HAL_GPIO_Init+0xfa>
 80017f8:	4a92      	ldr	r2, [pc, #584]	; (8001a44 <HAL_GPIO_Init+0x2ac>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d863      	bhi.n	80018c6 <HAL_GPIO_Init+0x12e>
 80017fe:	4a92      	ldr	r2, [pc, #584]	; (8001a48 <HAL_GPIO_Init+0x2b0>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d046      	beq.n	8001892 <HAL_GPIO_Init+0xfa>
 8001804:	4a90      	ldr	r2, [pc, #576]	; (8001a48 <HAL_GPIO_Init+0x2b0>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d85d      	bhi.n	80018c6 <HAL_GPIO_Init+0x12e>
 800180a:	2b12      	cmp	r3, #18
 800180c:	d82a      	bhi.n	8001864 <HAL_GPIO_Init+0xcc>
 800180e:	2b12      	cmp	r3, #18
 8001810:	d859      	bhi.n	80018c6 <HAL_GPIO_Init+0x12e>
 8001812:	a201      	add	r2, pc, #4	; (adr r2, 8001818 <HAL_GPIO_Init+0x80>)
 8001814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001818:	08001893 	.word	0x08001893
 800181c:	0800186d 	.word	0x0800186d
 8001820:	0800187f 	.word	0x0800187f
 8001824:	080018c1 	.word	0x080018c1
 8001828:	080018c7 	.word	0x080018c7
 800182c:	080018c7 	.word	0x080018c7
 8001830:	080018c7 	.word	0x080018c7
 8001834:	080018c7 	.word	0x080018c7
 8001838:	080018c7 	.word	0x080018c7
 800183c:	080018c7 	.word	0x080018c7
 8001840:	080018c7 	.word	0x080018c7
 8001844:	080018c7 	.word	0x080018c7
 8001848:	080018c7 	.word	0x080018c7
 800184c:	080018c7 	.word	0x080018c7
 8001850:	080018c7 	.word	0x080018c7
 8001854:	080018c7 	.word	0x080018c7
 8001858:	080018c7 	.word	0x080018c7
 800185c:	08001875 	.word	0x08001875
 8001860:	08001889 	.word	0x08001889
 8001864:	4a79      	ldr	r2, [pc, #484]	; (8001a4c <HAL_GPIO_Init+0x2b4>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d013      	beq.n	8001892 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800186a:	e02c      	b.n	80018c6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	623b      	str	r3, [r7, #32]
          break;
 8001872:	e029      	b.n	80018c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	3304      	adds	r3, #4
 800187a:	623b      	str	r3, [r7, #32]
          break;
 800187c:	e024      	b.n	80018c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	3308      	adds	r3, #8
 8001884:	623b      	str	r3, [r7, #32]
          break;
 8001886:	e01f      	b.n	80018c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	330c      	adds	r3, #12
 800188e:	623b      	str	r3, [r7, #32]
          break;
 8001890:	e01a      	b.n	80018c8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d102      	bne.n	80018a0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800189a:	2304      	movs	r3, #4
 800189c:	623b      	str	r3, [r7, #32]
          break;
 800189e:	e013      	b.n	80018c8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d105      	bne.n	80018b4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018a8:	2308      	movs	r3, #8
 80018aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	69fa      	ldr	r2, [r7, #28]
 80018b0:	611a      	str	r2, [r3, #16]
          break;
 80018b2:	e009      	b.n	80018c8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018b4:	2308      	movs	r3, #8
 80018b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	69fa      	ldr	r2, [r7, #28]
 80018bc:	615a      	str	r2, [r3, #20]
          break;
 80018be:	e003      	b.n	80018c8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018c0:	2300      	movs	r3, #0
 80018c2:	623b      	str	r3, [r7, #32]
          break;
 80018c4:	e000      	b.n	80018c8 <HAL_GPIO_Init+0x130>
          break;
 80018c6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	2bff      	cmp	r3, #255	; 0xff
 80018cc:	d801      	bhi.n	80018d2 <HAL_GPIO_Init+0x13a>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	e001      	b.n	80018d6 <HAL_GPIO_Init+0x13e>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	3304      	adds	r3, #4
 80018d6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	2bff      	cmp	r3, #255	; 0xff
 80018dc:	d802      	bhi.n	80018e4 <HAL_GPIO_Init+0x14c>
 80018de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	e002      	b.n	80018ea <HAL_GPIO_Init+0x152>
 80018e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e6:	3b08      	subs	r3, #8
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	210f      	movs	r1, #15
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	fa01 f303 	lsl.w	r3, r1, r3
 80018f8:	43db      	mvns	r3, r3
 80018fa:	401a      	ands	r2, r3
 80018fc:	6a39      	ldr	r1, [r7, #32]
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	fa01 f303 	lsl.w	r3, r1, r3
 8001904:	431a      	orrs	r2, r3
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001912:	2b00      	cmp	r3, #0
 8001914:	f000 80b1 	beq.w	8001a7a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001918:	4b4d      	ldr	r3, [pc, #308]	; (8001a50 <HAL_GPIO_Init+0x2b8>)
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	4a4c      	ldr	r2, [pc, #304]	; (8001a50 <HAL_GPIO_Init+0x2b8>)
 800191e:	f043 0301 	orr.w	r3, r3, #1
 8001922:	6193      	str	r3, [r2, #24]
 8001924:	4b4a      	ldr	r3, [pc, #296]	; (8001a50 <HAL_GPIO_Init+0x2b8>)
 8001926:	699b      	ldr	r3, [r3, #24]
 8001928:	f003 0301 	and.w	r3, r3, #1
 800192c:	60bb      	str	r3, [r7, #8]
 800192e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001930:	4a48      	ldr	r2, [pc, #288]	; (8001a54 <HAL_GPIO_Init+0x2bc>)
 8001932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001934:	089b      	lsrs	r3, r3, #2
 8001936:	3302      	adds	r3, #2
 8001938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800193c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800193e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001940:	f003 0303 	and.w	r3, r3, #3
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	220f      	movs	r2, #15
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	43db      	mvns	r3, r3
 800194e:	68fa      	ldr	r2, [r7, #12]
 8001950:	4013      	ands	r3, r2
 8001952:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	4a40      	ldr	r2, [pc, #256]	; (8001a58 <HAL_GPIO_Init+0x2c0>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d013      	beq.n	8001984 <HAL_GPIO_Init+0x1ec>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	4a3f      	ldr	r2, [pc, #252]	; (8001a5c <HAL_GPIO_Init+0x2c4>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d00d      	beq.n	8001980 <HAL_GPIO_Init+0x1e8>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	4a3e      	ldr	r2, [pc, #248]	; (8001a60 <HAL_GPIO_Init+0x2c8>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d007      	beq.n	800197c <HAL_GPIO_Init+0x1e4>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	4a3d      	ldr	r2, [pc, #244]	; (8001a64 <HAL_GPIO_Init+0x2cc>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d101      	bne.n	8001978 <HAL_GPIO_Init+0x1e0>
 8001974:	2303      	movs	r3, #3
 8001976:	e006      	b.n	8001986 <HAL_GPIO_Init+0x1ee>
 8001978:	2304      	movs	r3, #4
 800197a:	e004      	b.n	8001986 <HAL_GPIO_Init+0x1ee>
 800197c:	2302      	movs	r3, #2
 800197e:	e002      	b.n	8001986 <HAL_GPIO_Init+0x1ee>
 8001980:	2301      	movs	r3, #1
 8001982:	e000      	b.n	8001986 <HAL_GPIO_Init+0x1ee>
 8001984:	2300      	movs	r3, #0
 8001986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001988:	f002 0203 	and.w	r2, r2, #3
 800198c:	0092      	lsls	r2, r2, #2
 800198e:	4093      	lsls	r3, r2
 8001990:	68fa      	ldr	r2, [r7, #12]
 8001992:	4313      	orrs	r3, r2
 8001994:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001996:	492f      	ldr	r1, [pc, #188]	; (8001a54 <HAL_GPIO_Init+0x2bc>)
 8001998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199a:	089b      	lsrs	r3, r3, #2
 800199c:	3302      	adds	r3, #2
 800199e:	68fa      	ldr	r2, [r7, #12]
 80019a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d006      	beq.n	80019be <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019b0:	4b2d      	ldr	r3, [pc, #180]	; (8001a68 <HAL_GPIO_Init+0x2d0>)
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	492c      	ldr	r1, [pc, #176]	; (8001a68 <HAL_GPIO_Init+0x2d0>)
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	600b      	str	r3, [r1, #0]
 80019bc:	e006      	b.n	80019cc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019be:	4b2a      	ldr	r3, [pc, #168]	; (8001a68 <HAL_GPIO_Init+0x2d0>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	43db      	mvns	r3, r3
 80019c6:	4928      	ldr	r1, [pc, #160]	; (8001a68 <HAL_GPIO_Init+0x2d0>)
 80019c8:	4013      	ands	r3, r2
 80019ca:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d006      	beq.n	80019e6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019d8:	4b23      	ldr	r3, [pc, #140]	; (8001a68 <HAL_GPIO_Init+0x2d0>)
 80019da:	685a      	ldr	r2, [r3, #4]
 80019dc:	4922      	ldr	r1, [pc, #136]	; (8001a68 <HAL_GPIO_Init+0x2d0>)
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	604b      	str	r3, [r1, #4]
 80019e4:	e006      	b.n	80019f4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019e6:	4b20      	ldr	r3, [pc, #128]	; (8001a68 <HAL_GPIO_Init+0x2d0>)
 80019e8:	685a      	ldr	r2, [r3, #4]
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	43db      	mvns	r3, r3
 80019ee:	491e      	ldr	r1, [pc, #120]	; (8001a68 <HAL_GPIO_Init+0x2d0>)
 80019f0:	4013      	ands	r3, r2
 80019f2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d006      	beq.n	8001a0e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a00:	4b19      	ldr	r3, [pc, #100]	; (8001a68 <HAL_GPIO_Init+0x2d0>)
 8001a02:	689a      	ldr	r2, [r3, #8]
 8001a04:	4918      	ldr	r1, [pc, #96]	; (8001a68 <HAL_GPIO_Init+0x2d0>)
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	608b      	str	r3, [r1, #8]
 8001a0c:	e006      	b.n	8001a1c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a0e:	4b16      	ldr	r3, [pc, #88]	; (8001a68 <HAL_GPIO_Init+0x2d0>)
 8001a10:	689a      	ldr	r2, [r3, #8]
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	43db      	mvns	r3, r3
 8001a16:	4914      	ldr	r1, [pc, #80]	; (8001a68 <HAL_GPIO_Init+0x2d0>)
 8001a18:	4013      	ands	r3, r2
 8001a1a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d021      	beq.n	8001a6c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a28:	4b0f      	ldr	r3, [pc, #60]	; (8001a68 <HAL_GPIO_Init+0x2d0>)
 8001a2a:	68da      	ldr	r2, [r3, #12]
 8001a2c:	490e      	ldr	r1, [pc, #56]	; (8001a68 <HAL_GPIO_Init+0x2d0>)
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	60cb      	str	r3, [r1, #12]
 8001a34:	e021      	b.n	8001a7a <HAL_GPIO_Init+0x2e2>
 8001a36:	bf00      	nop
 8001a38:	10320000 	.word	0x10320000
 8001a3c:	10310000 	.word	0x10310000
 8001a40:	10220000 	.word	0x10220000
 8001a44:	10210000 	.word	0x10210000
 8001a48:	10120000 	.word	0x10120000
 8001a4c:	10110000 	.word	0x10110000
 8001a50:	40021000 	.word	0x40021000
 8001a54:	40010000 	.word	0x40010000
 8001a58:	40010800 	.word	0x40010800
 8001a5c:	40010c00 	.word	0x40010c00
 8001a60:	40011000 	.word	0x40011000
 8001a64:	40011400 	.word	0x40011400
 8001a68:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a6c:	4b0b      	ldr	r3, [pc, #44]	; (8001a9c <HAL_GPIO_Init+0x304>)
 8001a6e:	68da      	ldr	r2, [r3, #12]
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	43db      	mvns	r3, r3
 8001a74:	4909      	ldr	r1, [pc, #36]	; (8001a9c <HAL_GPIO_Init+0x304>)
 8001a76:	4013      	ands	r3, r2
 8001a78:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a86:	fa22 f303 	lsr.w	r3, r2, r3
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	f47f ae8e 	bne.w	80017ac <HAL_GPIO_Init+0x14>
  }
}
 8001a90:	bf00      	nop
 8001a92:	bf00      	nop
 8001a94:	372c      	adds	r7, #44	; 0x2c
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bc80      	pop	{r7}
 8001a9a:	4770      	bx	lr
 8001a9c:	40010400 	.word	0x40010400

08001aa0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	807b      	strh	r3, [r7, #2]
 8001aac:	4613      	mov	r3, r2
 8001aae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ab0:	787b      	ldrb	r3, [r7, #1]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d003      	beq.n	8001abe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ab6:	887a      	ldrh	r2, [r7, #2]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001abc:	e003      	b.n	8001ac6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001abe:	887b      	ldrh	r3, [r7, #2]
 8001ac0:	041a      	lsls	r2, r3, #16
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	611a      	str	r2, [r3, #16]
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bc80      	pop	{r7}
 8001ace:	4770      	bx	lr

08001ad0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	460b      	mov	r3, r1
 8001ada:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ae2:	887a      	ldrh	r2, [r7, #2]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	041a      	lsls	r2, r3, #16
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	43d9      	mvns	r1, r3
 8001aee:	887b      	ldrh	r3, [r7, #2]
 8001af0:	400b      	ands	r3, r1
 8001af2:	431a      	orrs	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	611a      	str	r2, [r3, #16]
}
 8001af8:	bf00      	nop
 8001afa:	3714      	adds	r7, #20
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bc80      	pop	{r7}
 8001b00:	4770      	bx	lr
	...

08001b04 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b0e:	4b08      	ldr	r3, [pc, #32]	; (8001b30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b10:	695a      	ldr	r2, [r3, #20]
 8001b12:	88fb      	ldrh	r3, [r7, #6]
 8001b14:	4013      	ands	r3, r2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d006      	beq.n	8001b28 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b1a:	4a05      	ldr	r2, [pc, #20]	; (8001b30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b1c:	88fb      	ldrh	r3, [r7, #6]
 8001b1e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b20:	88fb      	ldrh	r3, [r7, #6]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7fe fd02 	bl	800052c <HAL_GPIO_EXTI_Callback>
  }
}
 8001b28:	bf00      	nop
 8001b2a:	3708      	adds	r7, #8
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40010400 	.word	0x40010400

08001b34 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b36:	b08b      	sub	sp, #44	; 0x2c
 8001b38:	af06      	add	r7, sp, #24
 8001b3a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d101      	bne.n	8001b46 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e0fd      	b.n	8001d42 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d106      	bne.n	8001b60 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f006 fd38 	bl	80085d0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2203      	movs	r2, #3
 8001b64:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f002 ff81 	bl	8004a74 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	603b      	str	r3, [r7, #0]
 8001b78:	687e      	ldr	r6, [r7, #4]
 8001b7a:	466d      	mov	r5, sp
 8001b7c:	f106 0410 	add.w	r4, r6, #16
 8001b80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b84:	6823      	ldr	r3, [r4, #0]
 8001b86:	602b      	str	r3, [r5, #0]
 8001b88:	1d33      	adds	r3, r6, #4
 8001b8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b8c:	6838      	ldr	r0, [r7, #0]
 8001b8e:	f002 ff4b 	bl	8004a28 <USB_CoreInit>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d005      	beq.n	8001ba4 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2202      	movs	r2, #2
 8001b9c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e0ce      	b.n	8001d42 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2100      	movs	r1, #0
 8001baa:	4618      	mov	r0, r3
 8001bac:	f002 ff7c 	bl	8004aa8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	73fb      	strb	r3, [r7, #15]
 8001bb4:	e04c      	b.n	8001c50 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001bb6:	7bfb      	ldrb	r3, [r7, #15]
 8001bb8:	6879      	ldr	r1, [r7, #4]
 8001bba:	1c5a      	adds	r2, r3, #1
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	4413      	add	r3, r2
 8001bc2:	00db      	lsls	r3, r3, #3
 8001bc4:	440b      	add	r3, r1
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	2201      	movs	r2, #1
 8001bca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001bcc:	7bfb      	ldrb	r3, [r7, #15]
 8001bce:	6879      	ldr	r1, [r7, #4]
 8001bd0:	1c5a      	adds	r2, r3, #1
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	4413      	add	r3, r2
 8001bd8:	00db      	lsls	r3, r3, #3
 8001bda:	440b      	add	r3, r1
 8001bdc:	7bfa      	ldrb	r2, [r7, #15]
 8001bde:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001be0:	7bfa      	ldrb	r2, [r7, #15]
 8001be2:	7bfb      	ldrb	r3, [r7, #15]
 8001be4:	b298      	uxth	r0, r3
 8001be6:	6879      	ldr	r1, [r7, #4]
 8001be8:	4613      	mov	r3, r2
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	4413      	add	r3, r2
 8001bee:	00db      	lsls	r3, r3, #3
 8001bf0:	440b      	add	r3, r1
 8001bf2:	3336      	adds	r3, #54	; 0x36
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001bf8:	7bfb      	ldrb	r3, [r7, #15]
 8001bfa:	6879      	ldr	r1, [r7, #4]
 8001bfc:	1c5a      	adds	r2, r3, #1
 8001bfe:	4613      	mov	r3, r2
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	4413      	add	r3, r2
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	440b      	add	r3, r1
 8001c08:	3303      	adds	r3, #3
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001c0e:	7bfa      	ldrb	r2, [r7, #15]
 8001c10:	6879      	ldr	r1, [r7, #4]
 8001c12:	4613      	mov	r3, r2
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	4413      	add	r3, r2
 8001c18:	00db      	lsls	r3, r3, #3
 8001c1a:	440b      	add	r3, r1
 8001c1c:	3338      	adds	r3, #56	; 0x38
 8001c1e:	2200      	movs	r2, #0
 8001c20:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c22:	7bfa      	ldrb	r2, [r7, #15]
 8001c24:	6879      	ldr	r1, [r7, #4]
 8001c26:	4613      	mov	r3, r2
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	4413      	add	r3, r2
 8001c2c:	00db      	lsls	r3, r3, #3
 8001c2e:	440b      	add	r3, r1
 8001c30:	333c      	adds	r3, #60	; 0x3c
 8001c32:	2200      	movs	r2, #0
 8001c34:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c36:	7bfa      	ldrb	r2, [r7, #15]
 8001c38:	6879      	ldr	r1, [r7, #4]
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	4413      	add	r3, r2
 8001c40:	00db      	lsls	r3, r3, #3
 8001c42:	440b      	add	r3, r1
 8001c44:	3340      	adds	r3, #64	; 0x40
 8001c46:	2200      	movs	r2, #0
 8001c48:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c4a:	7bfb      	ldrb	r3, [r7, #15]
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	73fb      	strb	r3, [r7, #15]
 8001c50:	7bfa      	ldrb	r2, [r7, #15]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d3ad      	bcc.n	8001bb6 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	73fb      	strb	r3, [r7, #15]
 8001c5e:	e044      	b.n	8001cea <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c60:	7bfa      	ldrb	r2, [r7, #15]
 8001c62:	6879      	ldr	r1, [r7, #4]
 8001c64:	4613      	mov	r3, r2
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	4413      	add	r3, r2
 8001c6a:	00db      	lsls	r3, r3, #3
 8001c6c:	440b      	add	r3, r1
 8001c6e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001c72:	2200      	movs	r2, #0
 8001c74:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c76:	7bfa      	ldrb	r2, [r7, #15]
 8001c78:	6879      	ldr	r1, [r7, #4]
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	4413      	add	r3, r2
 8001c80:	00db      	lsls	r3, r3, #3
 8001c82:	440b      	add	r3, r1
 8001c84:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c88:	7bfa      	ldrb	r2, [r7, #15]
 8001c8a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c8c:	7bfa      	ldrb	r2, [r7, #15]
 8001c8e:	6879      	ldr	r1, [r7, #4]
 8001c90:	4613      	mov	r3, r2
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	4413      	add	r3, r2
 8001c96:	00db      	lsls	r3, r3, #3
 8001c98:	440b      	add	r3, r1
 8001c9a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001ca2:	7bfa      	ldrb	r2, [r7, #15]
 8001ca4:	6879      	ldr	r1, [r7, #4]
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	4413      	add	r3, r2
 8001cac:	00db      	lsls	r3, r3, #3
 8001cae:	440b      	add	r3, r1
 8001cb0:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001cb8:	7bfa      	ldrb	r2, [r7, #15]
 8001cba:	6879      	ldr	r1, [r7, #4]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	4413      	add	r3, r2
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	440b      	add	r3, r1
 8001cc6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001cca:	2200      	movs	r2, #0
 8001ccc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001cce:	7bfa      	ldrb	r2, [r7, #15]
 8001cd0:	6879      	ldr	r1, [r7, #4]
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	4413      	add	r3, r2
 8001cd8:	00db      	lsls	r3, r3, #3
 8001cda:	440b      	add	r3, r1
 8001cdc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ce4:	7bfb      	ldrb	r3, [r7, #15]
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	73fb      	strb	r3, [r7, #15]
 8001cea:	7bfa      	ldrb	r2, [r7, #15]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d3b5      	bcc.n	8001c60 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	603b      	str	r3, [r7, #0]
 8001cfa:	687e      	ldr	r6, [r7, #4]
 8001cfc:	466d      	mov	r5, sp
 8001cfe:	f106 0410 	add.w	r4, r6, #16
 8001d02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d06:	6823      	ldr	r3, [r4, #0]
 8001d08:	602b      	str	r3, [r5, #0]
 8001d0a:	1d33      	adds	r3, r6, #4
 8001d0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d0e:	6838      	ldr	r0, [r7, #0]
 8001d10:	f002 fed6 	bl	8004ac0 <USB_DevInit>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d005      	beq.n	8001d26 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2202      	movs	r2, #2
 8001d1e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e00d      	b.n	8001d42 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2201      	movs	r2, #1
 8001d32:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f005 f847 	bl	8006dce <USB_DevDisconnect>

  return HAL_OK;
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3714      	adds	r7, #20
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d4a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b082      	sub	sp, #8
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d101      	bne.n	8001d60 <HAL_PCD_Start+0x16>
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	e016      	b.n	8001d8e <HAL_PCD_Start+0x44>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f002 fe6b 	bl	8004a48 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001d72:	2101      	movs	r1, #1
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f006 fe7a 	bl	8008a6e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f005 f81b 	bl	8006dba <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b088      	sub	sp, #32
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f005 f81d 	bl	8006de2 <USB_ReadInterrupts>
 8001da8:	4603      	mov	r3, r0
 8001daa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001dae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001db2:	d102      	bne.n	8001dba <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f000 fb4a 	bl	800244e <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f005 f80f 	bl	8006de2 <USB_ReadInterrupts>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dce:	d112      	bne.n	8001df6 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dd8:	b29a      	uxth	r2, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001de2:	b292      	uxth	r2, r2
 8001de4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f006 fc6c 	bl	80086c6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001dee:	2100      	movs	r1, #0
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f000 f925 	bl	8002040 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f004 fff1 	bl	8006de2 <USB_ReadInterrupts>
 8001e00:	4603      	mov	r3, r0
 8001e02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e0a:	d10b      	bne.n	8001e24 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e14:	b29a      	uxth	r2, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001e1e:	b292      	uxth	r2, r2
 8001e20:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f004 ffda 	bl	8006de2 <USB_ReadInterrupts>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e38:	d10b      	bne.n	8001e52 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e42:	b29a      	uxth	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e4c:	b292      	uxth	r2, r2
 8001e4e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f004 ffc3 	bl	8006de2 <USB_ReadInterrupts>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e66:	d126      	bne.n	8001eb6 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e70:	b29a      	uxth	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f022 0204 	bic.w	r2, r2, #4
 8001e7a:	b292      	uxth	r2, r2
 8001e7c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e88:	b29a      	uxth	r2, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f022 0208 	bic.w	r2, r2, #8
 8001e92:	b292      	uxth	r2, r2
 8001e94:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f006 fc4d 	bl	8008738 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ea6:	b29a      	uxth	r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001eb0:	b292      	uxth	r2, r2
 8001eb2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f004 ff91 	bl	8006de2 <USB_ReadInterrupts>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ec6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001eca:	f040 8084 	bne.w	8001fd6 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001ece:	2300      	movs	r3, #0
 8001ed0:	77fb      	strb	r3, [r7, #31]
 8001ed2:	e011      	b.n	8001ef8 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	461a      	mov	r2, r3
 8001eda:	7ffb      	ldrb	r3, [r7, #31]
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	441a      	add	r2, r3
 8001ee0:	7ffb      	ldrb	r3, [r7, #31]
 8001ee2:	8812      	ldrh	r2, [r2, #0]
 8001ee4:	b292      	uxth	r2, r2
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	f107 0120 	add.w	r1, r7, #32
 8001eec:	440b      	add	r3, r1
 8001eee:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001ef2:	7ffb      	ldrb	r3, [r7, #31]
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	77fb      	strb	r3, [r7, #31]
 8001ef8:	7ffb      	ldrb	r3, [r7, #31]
 8001efa:	2b07      	cmp	r3, #7
 8001efc:	d9ea      	bls.n	8001ed4 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f042 0201 	orr.w	r2, r2, #1
 8001f10:	b292      	uxth	r2, r2
 8001f12:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f022 0201 	bic.w	r2, r2, #1
 8001f28:	b292      	uxth	r2, r2
 8001f2a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001f2e:	bf00      	nop
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d0f6      	beq.n	8001f30 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f4a:	b29a      	uxth	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f54:	b292      	uxth	r2, r2
 8001f56:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	77fb      	strb	r3, [r7, #31]
 8001f5e:	e010      	b.n	8001f82 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001f60:	7ffb      	ldrb	r3, [r7, #31]
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	6812      	ldr	r2, [r2, #0]
 8001f66:	4611      	mov	r1, r2
 8001f68:	7ffa      	ldrb	r2, [r7, #31]
 8001f6a:	0092      	lsls	r2, r2, #2
 8001f6c:	440a      	add	r2, r1
 8001f6e:	005b      	lsls	r3, r3, #1
 8001f70:	f107 0120 	add.w	r1, r7, #32
 8001f74:	440b      	add	r3, r1
 8001f76:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001f7a:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001f7c:	7ffb      	ldrb	r3, [r7, #31]
 8001f7e:	3301      	adds	r3, #1
 8001f80:	77fb      	strb	r3, [r7, #31]
 8001f82:	7ffb      	ldrb	r3, [r7, #31]
 8001f84:	2b07      	cmp	r3, #7
 8001f86:	d9eb      	bls.n	8001f60 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f90:	b29a      	uxth	r2, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f042 0208 	orr.w	r2, r2, #8
 8001f9a:	b292      	uxth	r2, r2
 8001f9c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fa8:	b29a      	uxth	r2, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fb2:	b292      	uxth	r2, r2
 8001fb4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001fc0:	b29a      	uxth	r2, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f042 0204 	orr.w	r2, r2, #4
 8001fca:	b292      	uxth	r2, r2
 8001fcc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f006 fb97 	bl	8008704 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f004 ff01 	bl	8006de2 <USB_ReadInterrupts>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fe6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fea:	d10e      	bne.n	800200a <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ff4:	b29a      	uxth	r2, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ffe:	b292      	uxth	r2, r2
 8002000:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f006 fb50 	bl	80086aa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4618      	mov	r0, r3
 8002010:	f004 fee7 	bl	8006de2 <USB_ReadInterrupts>
 8002014:	4603      	mov	r3, r0
 8002016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800201a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800201e:	d10b      	bne.n	8002038 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002028:	b29a      	uxth	r2, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002032:	b292      	uxth	r2, r2
 8002034:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002038:	bf00      	nop
 800203a:	3720      	adds	r7, #32
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	460b      	mov	r3, r1
 800204a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002052:	2b01      	cmp	r3, #1
 8002054:	d101      	bne.n	800205a <HAL_PCD_SetAddress+0x1a>
 8002056:	2302      	movs	r3, #2
 8002058:	e013      	b.n	8002082 <HAL_PCD_SetAddress+0x42>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2201      	movs	r2, #1
 800205e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	78fa      	ldrb	r2, [r7, #3]
 8002066:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	78fa      	ldrb	r2, [r7, #3]
 8002070:	4611      	mov	r1, r2
 8002072:	4618      	mov	r0, r3
 8002074:	f004 fe8e 	bl	8006d94 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	b084      	sub	sp, #16
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
 8002092:	4608      	mov	r0, r1
 8002094:	4611      	mov	r1, r2
 8002096:	461a      	mov	r2, r3
 8002098:	4603      	mov	r3, r0
 800209a:	70fb      	strb	r3, [r7, #3]
 800209c:	460b      	mov	r3, r1
 800209e:	803b      	strh	r3, [r7, #0]
 80020a0:	4613      	mov	r3, r2
 80020a2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80020a4:	2300      	movs	r3, #0
 80020a6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80020a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	da0e      	bge.n	80020ce <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020b0:	78fb      	ldrb	r3, [r7, #3]
 80020b2:	f003 0307 	and.w	r3, r3, #7
 80020b6:	1c5a      	adds	r2, r3, #1
 80020b8:	4613      	mov	r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	4413      	add	r3, r2
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	4413      	add	r3, r2
 80020c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2201      	movs	r2, #1
 80020ca:	705a      	strb	r2, [r3, #1]
 80020cc:	e00e      	b.n	80020ec <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020ce:	78fb      	ldrb	r3, [r7, #3]
 80020d0:	f003 0207 	and.w	r2, r3, #7
 80020d4:	4613      	mov	r3, r2
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	4413      	add	r3, r2
 80020da:	00db      	lsls	r3, r3, #3
 80020dc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	4413      	add	r3, r2
 80020e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2200      	movs	r2, #0
 80020ea:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80020ec:	78fb      	ldrb	r3, [r7, #3]
 80020ee:	f003 0307 	and.w	r3, r3, #7
 80020f2:	b2da      	uxtb	r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80020f8:	883a      	ldrh	r2, [r7, #0]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	78ba      	ldrb	r2, [r7, #2]
 8002102:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	785b      	ldrb	r3, [r3, #1]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d004      	beq.n	8002116 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	b29a      	uxth	r2, r3
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002116:	78bb      	ldrb	r3, [r7, #2]
 8002118:	2b02      	cmp	r3, #2
 800211a:	d102      	bne.n	8002122 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2200      	movs	r2, #0
 8002120:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002128:	2b01      	cmp	r3, #1
 800212a:	d101      	bne.n	8002130 <HAL_PCD_EP_Open+0xa6>
 800212c:	2302      	movs	r3, #2
 800212e:	e00e      	b.n	800214e <HAL_PCD_EP_Open+0xc4>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	68f9      	ldr	r1, [r7, #12]
 800213e:	4618      	mov	r0, r3
 8002140:	f002 fcde 	bl	8004b00 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800214c:	7afb      	ldrb	r3, [r7, #11]
}
 800214e:	4618      	mov	r0, r3
 8002150:	3710      	adds	r7, #16
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b084      	sub	sp, #16
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
 800215e:	460b      	mov	r3, r1
 8002160:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002162:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002166:	2b00      	cmp	r3, #0
 8002168:	da0e      	bge.n	8002188 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800216a:	78fb      	ldrb	r3, [r7, #3]
 800216c:	f003 0307 	and.w	r3, r3, #7
 8002170:	1c5a      	adds	r2, r3, #1
 8002172:	4613      	mov	r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	4413      	add	r3, r2
 8002178:	00db      	lsls	r3, r3, #3
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	4413      	add	r3, r2
 800217e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2201      	movs	r2, #1
 8002184:	705a      	strb	r2, [r3, #1]
 8002186:	e00e      	b.n	80021a6 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002188:	78fb      	ldrb	r3, [r7, #3]
 800218a:	f003 0207 	and.w	r2, r3, #7
 800218e:	4613      	mov	r3, r2
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	4413      	add	r3, r2
 8002194:	00db      	lsls	r3, r3, #3
 8002196:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	4413      	add	r3, r2
 800219e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2200      	movs	r2, #0
 80021a4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80021a6:	78fb      	ldrb	r3, [r7, #3]
 80021a8:	f003 0307 	and.w	r3, r3, #7
 80021ac:	b2da      	uxtb	r2, r3
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d101      	bne.n	80021c0 <HAL_PCD_EP_Close+0x6a>
 80021bc:	2302      	movs	r3, #2
 80021be:	e00e      	b.n	80021de <HAL_PCD_EP_Close+0x88>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	68f9      	ldr	r1, [r7, #12]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f003 f800 	bl	80051d4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3710      	adds	r7, #16
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b086      	sub	sp, #24
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	60f8      	str	r0, [r7, #12]
 80021ee:	607a      	str	r2, [r7, #4]
 80021f0:	603b      	str	r3, [r7, #0]
 80021f2:	460b      	mov	r3, r1
 80021f4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021f6:	7afb      	ldrb	r3, [r7, #11]
 80021f8:	f003 0207 	and.w	r2, r3, #7
 80021fc:	4613      	mov	r3, r2
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	4413      	add	r3, r2
 8002202:	00db      	lsls	r3, r3, #3
 8002204:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002208:	68fa      	ldr	r2, [r7, #12]
 800220a:	4413      	add	r3, r2
 800220c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	683a      	ldr	r2, [r7, #0]
 8002218:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	2200      	movs	r2, #0
 800221e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	2200      	movs	r2, #0
 8002224:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002226:	7afb      	ldrb	r3, [r7, #11]
 8002228:	f003 0307 	and.w	r3, r3, #7
 800222c:	b2da      	uxtb	r2, r3
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002232:	7afb      	ldrb	r3, [r7, #11]
 8002234:	f003 0307 	and.w	r3, r3, #7
 8002238:	2b00      	cmp	r3, #0
 800223a:	d106      	bne.n	800224a <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	6979      	ldr	r1, [r7, #20]
 8002242:	4618      	mov	r0, r3
 8002244:	f003 f9b2 	bl	80055ac <USB_EPStartXfer>
 8002248:	e005      	b.n	8002256 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	6979      	ldr	r1, [r7, #20]
 8002250:	4618      	mov	r0, r3
 8002252:	f003 f9ab 	bl	80055ac <USB_EPStartXfer>
  }

  return HAL_OK;
 8002256:	2300      	movs	r3, #0
}
 8002258:	4618      	mov	r0, r3
 800225a:	3718      	adds	r7, #24
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}

08002260 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b086      	sub	sp, #24
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	607a      	str	r2, [r7, #4]
 800226a:	603b      	str	r3, [r7, #0]
 800226c:	460b      	mov	r3, r1
 800226e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002270:	7afb      	ldrb	r3, [r7, #11]
 8002272:	f003 0307 	and.w	r3, r3, #7
 8002276:	1c5a      	adds	r2, r3, #1
 8002278:	4613      	mov	r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	4413      	add	r3, r2
 800227e:	00db      	lsls	r3, r3, #3
 8002280:	68fa      	ldr	r2, [r7, #12]
 8002282:	4413      	add	r3, r2
 8002284:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	683a      	ldr	r2, [r7, #0]
 8002290:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	2201      	movs	r2, #1
 8002296:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	2200      	movs	r2, #0
 80022a4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	2201      	movs	r2, #1
 80022aa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022ac:	7afb      	ldrb	r3, [r7, #11]
 80022ae:	f003 0307 	and.w	r3, r3, #7
 80022b2:	b2da      	uxtb	r2, r3
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80022b8:	7afb      	ldrb	r3, [r7, #11]
 80022ba:	f003 0307 	and.w	r3, r3, #7
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d106      	bne.n	80022d0 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	6979      	ldr	r1, [r7, #20]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f003 f96f 	bl	80055ac <USB_EPStartXfer>
 80022ce:	e005      	b.n	80022dc <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	6979      	ldr	r1, [r7, #20]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f003 f968 	bl	80055ac <USB_EPStartXfer>
  }

  return HAL_OK;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3718      	adds	r7, #24
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b084      	sub	sp, #16
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
 80022ee:	460b      	mov	r3, r1
 80022f0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80022f2:	78fb      	ldrb	r3, [r7, #3]
 80022f4:	f003 0207 	and.w	r2, r3, #7
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d901      	bls.n	8002304 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e04c      	b.n	800239e <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002304:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002308:	2b00      	cmp	r3, #0
 800230a:	da0e      	bge.n	800232a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800230c:	78fb      	ldrb	r3, [r7, #3]
 800230e:	f003 0307 	and.w	r3, r3, #7
 8002312:	1c5a      	adds	r2, r3, #1
 8002314:	4613      	mov	r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	4413      	add	r3, r2
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	4413      	add	r3, r2
 8002320:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2201      	movs	r2, #1
 8002326:	705a      	strb	r2, [r3, #1]
 8002328:	e00c      	b.n	8002344 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800232a:	78fa      	ldrb	r2, [r7, #3]
 800232c:	4613      	mov	r3, r2
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	4413      	add	r3, r2
 8002332:	00db      	lsls	r3, r3, #3
 8002334:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	4413      	add	r3, r2
 800233c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2200      	movs	r2, #0
 8002342:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2201      	movs	r2, #1
 8002348:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800234a:	78fb      	ldrb	r3, [r7, #3]
 800234c:	f003 0307 	and.w	r3, r3, #7
 8002350:	b2da      	uxtb	r2, r3
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800235c:	2b01      	cmp	r3, #1
 800235e:	d101      	bne.n	8002364 <HAL_PCD_EP_SetStall+0x7e>
 8002360:	2302      	movs	r3, #2
 8002362:	e01c      	b.n	800239e <HAL_PCD_EP_SetStall+0xb8>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	68f9      	ldr	r1, [r7, #12]
 8002372:	4618      	mov	r0, r3
 8002374:	f004 fc11 	bl	8006b9a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002378:	78fb      	ldrb	r3, [r7, #3]
 800237a:	f003 0307 	and.w	r3, r3, #7
 800237e:	2b00      	cmp	r3, #0
 8002380:	d108      	bne.n	8002394 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800238c:	4619      	mov	r1, r3
 800238e:	4610      	mov	r0, r2
 8002390:	f004 fd36 	bl	8006e00 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3710      	adds	r7, #16
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b084      	sub	sp, #16
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
 80023ae:	460b      	mov	r3, r1
 80023b0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80023b2:	78fb      	ldrb	r3, [r7, #3]
 80023b4:	f003 020f 	and.w	r2, r3, #15
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d901      	bls.n	80023c4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e040      	b.n	8002446 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80023c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	da0e      	bge.n	80023ea <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023cc:	78fb      	ldrb	r3, [r7, #3]
 80023ce:	f003 0307 	and.w	r3, r3, #7
 80023d2:	1c5a      	adds	r2, r3, #1
 80023d4:	4613      	mov	r3, r2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	4413      	add	r3, r2
 80023da:	00db      	lsls	r3, r3, #3
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	4413      	add	r3, r2
 80023e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2201      	movs	r2, #1
 80023e6:	705a      	strb	r2, [r3, #1]
 80023e8:	e00e      	b.n	8002408 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023ea:	78fb      	ldrb	r3, [r7, #3]
 80023ec:	f003 0207 	and.w	r2, r3, #7
 80023f0:	4613      	mov	r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	4413      	add	r3, r2
 80023f6:	00db      	lsls	r3, r3, #3
 80023f8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	4413      	add	r3, r2
 8002400:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2200      	movs	r2, #0
 8002406:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2200      	movs	r2, #0
 800240c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800240e:	78fb      	ldrb	r3, [r7, #3]
 8002410:	f003 0307 	and.w	r3, r3, #7
 8002414:	b2da      	uxtb	r2, r3
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002420:	2b01      	cmp	r3, #1
 8002422:	d101      	bne.n	8002428 <HAL_PCD_EP_ClrStall+0x82>
 8002424:	2302      	movs	r3, #2
 8002426:	e00e      	b.n	8002446 <HAL_PCD_EP_ClrStall+0xa0>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	68f9      	ldr	r1, [r7, #12]
 8002436:	4618      	mov	r0, r3
 8002438:	f004 fbff 	bl	8006c3a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3710      	adds	r7, #16
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}

0800244e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800244e:	b580      	push	{r7, lr}
 8002450:	b08e      	sub	sp, #56	; 0x38
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002456:	e2ec      	b.n	8002a32 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002460:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002462:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002464:	b2db      	uxtb	r3, r3
 8002466:	f003 030f 	and.w	r3, r3, #15
 800246a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800246e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002472:	2b00      	cmp	r3, #0
 8002474:	f040 8161 	bne.w	800273a <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002478:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800247a:	f003 0310 	and.w	r3, r3, #16
 800247e:	2b00      	cmp	r3, #0
 8002480:	d152      	bne.n	8002528 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	881b      	ldrh	r3, [r3, #0]
 8002488:	b29b      	uxth	r3, r3
 800248a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800248e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002492:	81fb      	strh	r3, [r7, #14]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	89fb      	ldrh	r3, [r7, #14]
 800249a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800249e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	3328      	adds	r3, #40	; 0x28
 80024aa:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	461a      	mov	r2, r3
 80024b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	00db      	lsls	r3, r3, #3
 80024be:	4413      	add	r3, r2
 80024c0:	3302      	adds	r3, #2
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	6812      	ldr	r2, [r2, #0]
 80024c8:	4413      	add	r3, r2
 80024ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024ce:	881b      	ldrh	r3, [r3, #0]
 80024d0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80024d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80024d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024da:	695a      	ldr	r2, [r3, #20]
 80024dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024de:	69db      	ldr	r3, [r3, #28]
 80024e0:	441a      	add	r2, r3
 80024e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80024e6:	2100      	movs	r1, #0
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f006 f8c4 	bl	8008676 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f000 829b 	beq.w	8002a32 <PCD_EP_ISR_Handler+0x5e4>
 80024fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fe:	699b      	ldr	r3, [r3, #24]
 8002500:	2b00      	cmp	r3, #0
 8002502:	f040 8296 	bne.w	8002a32 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800250c:	b2db      	uxtb	r3, r3
 800250e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002512:	b2da      	uxtb	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	b292      	uxth	r2, r2
 800251a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002526:	e284      	b.n	8002a32 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800252e:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	881b      	ldrh	r3, [r3, #0]
 8002536:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002538:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800253a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800253e:	2b00      	cmp	r3, #0
 8002540:	d034      	beq.n	80025ac <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800254a:	b29b      	uxth	r3, r3
 800254c:	461a      	mov	r2, r3
 800254e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	00db      	lsls	r3, r3, #3
 8002554:	4413      	add	r3, r2
 8002556:	3306      	adds	r3, #6
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	6812      	ldr	r2, [r2, #0]
 800255e:	4413      	add	r3, r2
 8002560:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002564:	881b      	ldrh	r3, [r3, #0]
 8002566:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800256a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6818      	ldr	r0, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800257c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002580:	b29b      	uxth	r3, r3
 8002582:	f004 fc8d 	bl	8006ea0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	881b      	ldrh	r3, [r3, #0]
 800258c:	b29a      	uxth	r2, r3
 800258e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002592:	4013      	ands	r3, r2
 8002594:	823b      	strh	r3, [r7, #16]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	8a3a      	ldrh	r2, [r7, #16]
 800259c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025a0:	b292      	uxth	r2, r2
 80025a2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f006 f839 	bl	800861c <HAL_PCD_SetupStageCallback>
 80025aa:	e242      	b.n	8002a32 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80025ac:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	f280 823e 	bge.w	8002a32 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	881b      	ldrh	r3, [r3, #0]
 80025bc:	b29a      	uxth	r2, r3
 80025be:	f640 738f 	movw	r3, #3983	; 0xf8f
 80025c2:	4013      	ands	r3, r2
 80025c4:	83bb      	strh	r3, [r7, #28]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	8bba      	ldrh	r2, [r7, #28]
 80025cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025d0:	b292      	uxth	r2, r2
 80025d2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025dc:	b29b      	uxth	r3, r3
 80025de:	461a      	mov	r2, r3
 80025e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	00db      	lsls	r3, r3, #3
 80025e6:	4413      	add	r3, r2
 80025e8:	3306      	adds	r3, #6
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	6812      	ldr	r2, [r2, #0]
 80025f0:	4413      	add	r3, r2
 80025f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025f6:	881b      	ldrh	r3, [r3, #0]
 80025f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80025fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fe:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002602:	69db      	ldr	r3, [r3, #28]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d019      	beq.n	800263c <PCD_EP_ISR_Handler+0x1ee>
 8002608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260a:	695b      	ldr	r3, [r3, #20]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d015      	beq.n	800263c <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6818      	ldr	r0, [r3, #0]
 8002614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002616:	6959      	ldr	r1, [r3, #20]
 8002618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800261c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002620:	b29b      	uxth	r3, r3
 8002622:	f004 fc3d 	bl	8006ea0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002628:	695a      	ldr	r2, [r3, #20]
 800262a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262c:	69db      	ldr	r3, [r3, #28]
 800262e:	441a      	add	r2, r3
 8002630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002632:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002634:	2100      	movs	r1, #0
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f006 f802 	bl	8008640 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	881b      	ldrh	r3, [r3, #0]
 8002642:	b29b      	uxth	r3, r3
 8002644:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002648:	2b00      	cmp	r3, #0
 800264a:	f040 81f2 	bne.w	8002a32 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	61bb      	str	r3, [r7, #24]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800265c:	b29b      	uxth	r3, r3
 800265e:	461a      	mov	r2, r3
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	4413      	add	r3, r2
 8002664:	61bb      	str	r3, [r7, #24]
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800266c:	617b      	str	r3, [r7, #20]
 800266e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d112      	bne.n	800269c <PCD_EP_ISR_Handler+0x24e>
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	881b      	ldrh	r3, [r3, #0]
 800267a:	b29b      	uxth	r3, r3
 800267c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002680:	b29a      	uxth	r2, r3
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	801a      	strh	r2, [r3, #0]
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	881b      	ldrh	r3, [r3, #0]
 800268a:	b29b      	uxth	r3, r3
 800268c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002690:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002694:	b29a      	uxth	r2, r3
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	801a      	strh	r2, [r3, #0]
 800269a:	e02f      	b.n	80026fc <PCD_EP_ISR_Handler+0x2ae>
 800269c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	2b3e      	cmp	r3, #62	; 0x3e
 80026a2:	d813      	bhi.n	80026cc <PCD_EP_ISR_Handler+0x27e>
 80026a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	085b      	lsrs	r3, r3, #1
 80026aa:	633b      	str	r3, [r7, #48]	; 0x30
 80026ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ae:	691b      	ldr	r3, [r3, #16]
 80026b0:	f003 0301 	and.w	r3, r3, #1
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d002      	beq.n	80026be <PCD_EP_ISR_Handler+0x270>
 80026b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ba:	3301      	adds	r3, #1
 80026bc:	633b      	str	r3, [r7, #48]	; 0x30
 80026be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	029b      	lsls	r3, r3, #10
 80026c4:	b29a      	uxth	r2, r3
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	801a      	strh	r2, [r3, #0]
 80026ca:	e017      	b.n	80026fc <PCD_EP_ISR_Handler+0x2ae>
 80026cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ce:	691b      	ldr	r3, [r3, #16]
 80026d0:	095b      	lsrs	r3, r3, #5
 80026d2:	633b      	str	r3, [r7, #48]	; 0x30
 80026d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d6:	691b      	ldr	r3, [r3, #16]
 80026d8:	f003 031f 	and.w	r3, r3, #31
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d102      	bne.n	80026e6 <PCD_EP_ISR_Handler+0x298>
 80026e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e2:	3b01      	subs	r3, #1
 80026e4:	633b      	str	r3, [r7, #48]	; 0x30
 80026e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	029b      	lsls	r3, r3, #10
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026f6:	b29a      	uxth	r2, r3
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	881b      	ldrh	r3, [r3, #0]
 8002702:	b29b      	uxth	r3, r3
 8002704:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002708:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800270c:	827b      	strh	r3, [r7, #18]
 800270e:	8a7b      	ldrh	r3, [r7, #18]
 8002710:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002714:	827b      	strh	r3, [r7, #18]
 8002716:	8a7b      	ldrh	r3, [r7, #18]
 8002718:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800271c:	827b      	strh	r3, [r7, #18]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	8a7b      	ldrh	r3, [r7, #18]
 8002724:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002728:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800272c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002734:	b29b      	uxth	r3, r3
 8002736:	8013      	strh	r3, [r2, #0]
 8002738:	e17b      	b.n	8002a32 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	461a      	mov	r2, r3
 8002740:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	4413      	add	r3, r2
 8002748:	881b      	ldrh	r3, [r3, #0]
 800274a:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800274c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002750:	2b00      	cmp	r3, #0
 8002752:	f280 80ea 	bge.w	800292a <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	461a      	mov	r2, r3
 800275c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	4413      	add	r3, r2
 8002764:	881b      	ldrh	r3, [r3, #0]
 8002766:	b29a      	uxth	r2, r3
 8002768:	f640 738f 	movw	r3, #3983	; 0xf8f
 800276c:	4013      	ands	r3, r2
 800276e:	853b      	strh	r3, [r7, #40]	; 0x28
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	461a      	mov	r2, r3
 8002776:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	4413      	add	r3, r2
 800277e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002780:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002784:	b292      	uxth	r2, r2
 8002786:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002788:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800278c:	4613      	mov	r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	4413      	add	r3, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	4413      	add	r3, r2
 800279c:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800279e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a0:	7b1b      	ldrb	r3, [r3, #12]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d122      	bne.n	80027ec <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	461a      	mov	r2, r3
 80027b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	00db      	lsls	r3, r3, #3
 80027b8:	4413      	add	r3, r2
 80027ba:	3306      	adds	r3, #6
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	6812      	ldr	r2, [r2, #0]
 80027c2:	4413      	add	r3, r2
 80027c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027c8:	881b      	ldrh	r3, [r3, #0]
 80027ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027ce:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80027d0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	f000 8087 	beq.w	80028e6 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6818      	ldr	r0, [r3, #0]
 80027dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027de:	6959      	ldr	r1, [r3, #20]
 80027e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e2:	88da      	ldrh	r2, [r3, #6]
 80027e4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80027e6:	f004 fb5b 	bl	8006ea0 <USB_ReadPMA>
 80027ea:	e07c      	b.n	80028e6 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80027ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ee:	78db      	ldrb	r3, [r3, #3]
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d108      	bne.n	8002806 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80027f4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80027f6:	461a      	mov	r2, r3
 80027f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 f927 	bl	8002a4e <HAL_PCD_EP_DB_Receive>
 8002800:	4603      	mov	r3, r0
 8002802:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002804:	e06f      	b.n	80028e6 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	461a      	mov	r2, r3
 800280c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	4413      	add	r3, r2
 8002814:	881b      	ldrh	r3, [r3, #0]
 8002816:	b29b      	uxth	r3, r3
 8002818:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800281c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002820:	847b      	strh	r3, [r7, #34]	; 0x22
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	461a      	mov	r2, r3
 8002828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	441a      	add	r2, r3
 8002830:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002832:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002836:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800283a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800283e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002842:	b29b      	uxth	r3, r3
 8002844:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	461a      	mov	r2, r3
 800284c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	4413      	add	r3, r2
 8002854:	881b      	ldrh	r3, [r3, #0]
 8002856:	b29b      	uxth	r3, r3
 8002858:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d021      	beq.n	80028a4 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002868:	b29b      	uxth	r3, r3
 800286a:	461a      	mov	r2, r3
 800286c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	00db      	lsls	r3, r3, #3
 8002872:	4413      	add	r3, r2
 8002874:	3302      	adds	r3, #2
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	6812      	ldr	r2, [r2, #0]
 800287c:	4413      	add	r3, r2
 800287e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002882:	881b      	ldrh	r3, [r3, #0]
 8002884:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002888:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800288a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800288c:	2b00      	cmp	r3, #0
 800288e:	d02a      	beq.n	80028e6 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6818      	ldr	r0, [r3, #0]
 8002894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002896:	6959      	ldr	r1, [r3, #20]
 8002898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289a:	891a      	ldrh	r2, [r3, #8]
 800289c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800289e:	f004 faff 	bl	8006ea0 <USB_ReadPMA>
 80028a2:	e020      	b.n	80028e6 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	461a      	mov	r2, r3
 80028b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	00db      	lsls	r3, r3, #3
 80028b6:	4413      	add	r3, r2
 80028b8:	3306      	adds	r3, #6
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	6812      	ldr	r2, [r2, #0]
 80028c0:	4413      	add	r3, r2
 80028c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028c6:	881b      	ldrh	r3, [r3, #0]
 80028c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028cc:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80028ce:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d008      	beq.n	80028e6 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6818      	ldr	r0, [r3, #0]
 80028d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028da:	6959      	ldr	r1, [r3, #20]
 80028dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028de:	895a      	ldrh	r2, [r3, #10]
 80028e0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028e2:	f004 fadd 	bl	8006ea0 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80028e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e8:	69da      	ldr	r2, [r3, #28]
 80028ea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028ec:	441a      	add	r2, r3
 80028ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80028f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f4:	695a      	ldr	r2, [r3, #20]
 80028f6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028f8:	441a      	add	r2, r3
 80028fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fc:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80028fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002900:	699b      	ldr	r3, [r3, #24]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d004      	beq.n	8002910 <PCD_EP_ISR_Handler+0x4c2>
 8002906:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290a:	691b      	ldr	r3, [r3, #16]
 800290c:	429a      	cmp	r2, r3
 800290e:	d206      	bcs.n	800291e <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	4619      	mov	r1, r3
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f005 fe92 	bl	8008640 <HAL_PCD_DataOutStageCallback>
 800291c:	e005      	b.n	800292a <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002924:	4618      	mov	r0, r3
 8002926:	f002 fe41 	bl	80055ac <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800292a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800292c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002930:	2b00      	cmp	r3, #0
 8002932:	d07e      	beq.n	8002a32 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8002934:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002938:	1c5a      	adds	r2, r3, #1
 800293a:	4613      	mov	r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	4413      	add	r3, r2
 8002940:	00db      	lsls	r3, r3, #3
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	4413      	add	r3, r2
 8002946:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	461a      	mov	r2, r3
 800294e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	4413      	add	r3, r2
 8002956:	881b      	ldrh	r3, [r3, #0]
 8002958:	b29b      	uxth	r3, r3
 800295a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800295e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002962:	843b      	strh	r3, [r7, #32]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	461a      	mov	r2, r3
 800296a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	441a      	add	r2, r3
 8002972:	8c3b      	ldrh	r3, [r7, #32]
 8002974:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002978:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800297c:	b29b      	uxth	r3, r3
 800297e:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002982:	78db      	ldrb	r3, [r3, #3]
 8002984:	2b03      	cmp	r3, #3
 8002986:	d00c      	beq.n	80029a2 <PCD_EP_ISR_Handler+0x554>
 8002988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298a:	78db      	ldrb	r3, [r3, #3]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d008      	beq.n	80029a2 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002992:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002994:	2b02      	cmp	r3, #2
 8002996:	d146      	bne.n	8002a26 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002998:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800299a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d141      	bne.n	8002a26 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	461a      	mov	r2, r3
 80029ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	00db      	lsls	r3, r3, #3
 80029b4:	4413      	add	r3, r2
 80029b6:	3302      	adds	r3, #2
 80029b8:	005b      	lsls	r3, r3, #1
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	6812      	ldr	r2, [r2, #0]
 80029be:	4413      	add	r3, r2
 80029c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029c4:	881b      	ldrh	r3, [r3, #0]
 80029c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029ca:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80029cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ce:	699a      	ldr	r2, [r3, #24]
 80029d0:	8bfb      	ldrh	r3, [r7, #30]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d906      	bls.n	80029e4 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80029d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d8:	699a      	ldr	r2, [r3, #24]
 80029da:	8bfb      	ldrh	r3, [r7, #30]
 80029dc:	1ad2      	subs	r2, r2, r3
 80029de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e0:	619a      	str	r2, [r3, #24]
 80029e2:	e002      	b.n	80029ea <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80029e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e6:	2200      	movs	r2, #0
 80029e8:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80029ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d106      	bne.n	8002a00 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80029f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	4619      	mov	r1, r3
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f005 fe3c 	bl	8008676 <HAL_PCD_DataInStageCallback>
 80029fe:	e018      	b.n	8002a32 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a02:	695a      	ldr	r2, [r3, #20]
 8002a04:	8bfb      	ldrh	r3, [r7, #30]
 8002a06:	441a      	add	r2, r3
 8002a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0a:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0e:	69da      	ldr	r2, [r3, #28]
 8002a10:	8bfb      	ldrh	r3, [r7, #30]
 8002a12:	441a      	add	r2, r3
 8002a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a16:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f002 fdc4 	bl	80055ac <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002a24:	e005      	b.n	8002a32 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002a26:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002a28:	461a      	mov	r2, r3
 8002a2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f000 f91b 	bl	8002c68 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	b21b      	sxth	r3, r3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	f6ff ad0a 	blt.w	8002458 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3738      	adds	r7, #56	; 0x38
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b088      	sub	sp, #32
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	60f8      	str	r0, [r7, #12]
 8002a56:	60b9      	str	r1, [r7, #8]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002a5c:	88fb      	ldrh	r3, [r7, #6]
 8002a5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d07e      	beq.n	8002b64 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	461a      	mov	r2, r3
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	00db      	lsls	r3, r3, #3
 8002a78:	4413      	add	r3, r2
 8002a7a:	3302      	adds	r3, #2
 8002a7c:	005b      	lsls	r3, r3, #1
 8002a7e:	68fa      	ldr	r2, [r7, #12]
 8002a80:	6812      	ldr	r2, [r2, #0]
 8002a82:	4413      	add	r3, r2
 8002a84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a88:	881b      	ldrh	r3, [r3, #0]
 8002a8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a8e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	699a      	ldr	r2, [r3, #24]
 8002a94:	8b7b      	ldrh	r3, [r7, #26]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d306      	bcc.n	8002aa8 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	699a      	ldr	r2, [r3, #24]
 8002a9e:	8b7b      	ldrh	r3, [r7, #26]
 8002aa0:	1ad2      	subs	r2, r2, r3
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	619a      	str	r2, [r3, #24]
 8002aa6:	e002      	b.n	8002aae <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	699b      	ldr	r3, [r3, #24]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d123      	bne.n	8002afe <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	461a      	mov	r2, r3
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	4413      	add	r3, r2
 8002ac4:	881b      	ldrh	r3, [r3, #0]
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002acc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ad0:	833b      	strh	r3, [r7, #24]
 8002ad2:	8b3b      	ldrh	r3, [r7, #24]
 8002ad4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002ad8:	833b      	strh	r3, [r7, #24]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	461a      	mov	r2, r3
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	441a      	add	r2, r3
 8002ae8:	8b3b      	ldrh	r3, [r7, #24]
 8002aea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002aee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002af2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002af6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002afe:	88fb      	ldrh	r3, [r7, #6]
 8002b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d01f      	beq.n	8002b48 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	4413      	add	r3, r2
 8002b16:	881b      	ldrh	r3, [r3, #0]
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b22:	82fb      	strh	r3, [r7, #22]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	461a      	mov	r2, r3
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	441a      	add	r2, r3
 8002b32:	8afb      	ldrh	r3, [r7, #22]
 8002b34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b40:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002b48:	8b7b      	ldrh	r3, [r7, #26]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	f000 8087 	beq.w	8002c5e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6818      	ldr	r0, [r3, #0]
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	6959      	ldr	r1, [r3, #20]
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	891a      	ldrh	r2, [r3, #8]
 8002b5c:	8b7b      	ldrh	r3, [r7, #26]
 8002b5e:	f004 f99f 	bl	8006ea0 <USB_ReadPMA>
 8002b62:	e07c      	b.n	8002c5e <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	461a      	mov	r2, r3
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	00db      	lsls	r3, r3, #3
 8002b76:	4413      	add	r3, r2
 8002b78:	3306      	adds	r3, #6
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	68fa      	ldr	r2, [r7, #12]
 8002b7e:	6812      	ldr	r2, [r2, #0]
 8002b80:	4413      	add	r3, r2
 8002b82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b86:	881b      	ldrh	r3, [r3, #0]
 8002b88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b8c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	699a      	ldr	r2, [r3, #24]
 8002b92:	8b7b      	ldrh	r3, [r7, #26]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d306      	bcc.n	8002ba6 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	699a      	ldr	r2, [r3, #24]
 8002b9c:	8b7b      	ldrh	r3, [r7, #26]
 8002b9e:	1ad2      	subs	r2, r2, r3
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	619a      	str	r2, [r3, #24]
 8002ba4:	e002      	b.n	8002bac <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	699b      	ldr	r3, [r3, #24]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d123      	bne.n	8002bfc <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	461a      	mov	r2, r3
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	4413      	add	r3, r2
 8002bc2:	881b      	ldrh	r3, [r3, #0]
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bce:	83fb      	strh	r3, [r7, #30]
 8002bd0:	8bfb      	ldrh	r3, [r7, #30]
 8002bd2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002bd6:	83fb      	strh	r3, [r7, #30]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	461a      	mov	r2, r3
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	441a      	add	r2, r3
 8002be6:	8bfb      	ldrh	r3, [r7, #30]
 8002be8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bf0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002bfc:	88fb      	ldrh	r3, [r7, #6]
 8002bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d11f      	bne.n	8002c46 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	4413      	add	r3, r2
 8002c14:	881b      	ldrh	r3, [r3, #0]
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c20:	83bb      	strh	r3, [r7, #28]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	461a      	mov	r2, r3
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	441a      	add	r2, r3
 8002c30:	8bbb      	ldrh	r3, [r7, #28]
 8002c32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c3e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002c46:	8b7b      	ldrh	r3, [r7, #26]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d008      	beq.n	8002c5e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6818      	ldr	r0, [r3, #0]
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	6959      	ldr	r1, [r3, #20]
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	895a      	ldrh	r2, [r3, #10]
 8002c58:	8b7b      	ldrh	r3, [r7, #26]
 8002c5a:	f004 f921 	bl	8006ea0 <USB_ReadPMA>
    }
  }

  return count;
 8002c5e:	8b7b      	ldrh	r3, [r7, #26]
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3720      	adds	r7, #32
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b0a2      	sub	sp, #136	; 0x88
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	4613      	mov	r3, r2
 8002c74:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002c76:	88fb      	ldrh	r3, [r7, #6]
 8002c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	f000 81c7 	beq.w	8003010 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	4413      	add	r3, r2
 8002c96:	3302      	adds	r3, #2
 8002c98:	005b      	lsls	r3, r3, #1
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	6812      	ldr	r2, [r2, #0]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ca4:	881b      	ldrh	r3, [r3, #0]
 8002ca6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002caa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	699a      	ldr	r2, [r3, #24]
 8002cb2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d907      	bls.n	8002cca <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	699a      	ldr	r2, [r3, #24]
 8002cbe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002cc2:	1ad2      	subs	r2, r2, r3
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	619a      	str	r2, [r3, #24]
 8002cc8:	e002      	b.n	8002cd0 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	f040 80b9 	bne.w	8002e4c <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	785b      	ldrb	r3, [r3, #1]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d126      	bne.n	8002d30 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf6:	4413      	add	r3, r2
 8002cf8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	011a      	lsls	r2, r3, #4
 8002d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d02:	4413      	add	r3, r2
 8002d04:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002d08:	627b      	str	r3, [r7, #36]	; 0x24
 8002d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0c:	881b      	ldrh	r3, [r3, #0]
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d14:	b29a      	uxth	r2, r3
 8002d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d18:	801a      	strh	r2, [r3, #0]
 8002d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1c:	881b      	ldrh	r3, [r3, #0]
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d28:	b29a      	uxth	r2, r3
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2c:	801a      	strh	r2, [r3, #0]
 8002d2e:	e01a      	b.n	8002d66 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	785b      	ldrb	r3, [r3, #1]
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d116      	bne.n	8002d66 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	633b      	str	r3, [r7, #48]	; 0x30
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	461a      	mov	r2, r3
 8002d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d4c:	4413      	add	r3, r2
 8002d4e:	633b      	str	r3, [r7, #48]	; 0x30
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	011a      	lsls	r2, r3, #4
 8002d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d58:	4413      	add	r3, r2
 8002d5a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d62:	2200      	movs	r2, #0
 8002d64:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	623b      	str	r3, [r7, #32]
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	785b      	ldrb	r3, [r3, #1]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d126      	bne.n	8002dc2 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	61bb      	str	r3, [r7, #24]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	461a      	mov	r2, r3
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	4413      	add	r3, r2
 8002d8a:	61bb      	str	r3, [r7, #24]
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	011a      	lsls	r2, r3, #4
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	4413      	add	r3, r2
 8002d96:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002d9a:	617b      	str	r3, [r7, #20]
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	881b      	ldrh	r3, [r3, #0]
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002da6:	b29a      	uxth	r2, r3
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	801a      	strh	r2, [r3, #0]
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	881b      	ldrh	r3, [r3, #0]
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002db6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	801a      	strh	r2, [r3, #0]
 8002dc0:	e017      	b.n	8002df2 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	785b      	ldrb	r3, [r3, #1]
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d113      	bne.n	8002df2 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	6a3b      	ldr	r3, [r7, #32]
 8002dd8:	4413      	add	r3, r2
 8002dda:	623b      	str	r3, [r7, #32]
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	011a      	lsls	r2, r3, #4
 8002de2:	6a3b      	ldr	r3, [r7, #32]
 8002de4:	4413      	add	r3, r2
 8002de6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002dea:	61fb      	str	r3, [r7, #28]
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	2200      	movs	r2, #0
 8002df0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	4619      	mov	r1, r3
 8002df8:	68f8      	ldr	r0, [r7, #12]
 8002dfa:	f005 fc3c 	bl	8008676 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002dfe:	88fb      	ldrh	r3, [r7, #6]
 8002e00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	f000 82d4 	beq.w	80033b2 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	461a      	mov	r2, r3
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	4413      	add	r3, r2
 8002e18:	881b      	ldrh	r3, [r3, #0]
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e24:	827b      	strh	r3, [r7, #18]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	441a      	add	r2, r3
 8002e34:	8a7b      	ldrh	r3, [r7, #18]
 8002e36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e3e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	8013      	strh	r3, [r2, #0]
 8002e4a:	e2b2      	b.n	80033b2 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002e4c:	88fb      	ldrh	r3, [r7, #6]
 8002e4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d021      	beq.n	8002e9a <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	4413      	add	r3, r2
 8002e64:	881b      	ldrh	r3, [r3, #0]
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e70:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	461a      	mov	r2, r3
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	441a      	add	r2, r3
 8002e82:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002e86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e8e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	f040 8286 	bne.w	80033b2 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	695a      	ldr	r2, [r3, #20]
 8002eaa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002eae:	441a      	add	r2, r3
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	69da      	ldr	r2, [r3, #28]
 8002eb8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ebc:	441a      	add	r2, r3
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	6a1a      	ldr	r2, [r3, #32]
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d309      	bcc.n	8002ee2 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	6a1a      	ldr	r2, [r3, #32]
 8002ed8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002eda:	1ad2      	subs	r2, r2, r3
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	621a      	str	r2, [r3, #32]
 8002ee0:	e015      	b.n	8002f0e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	6a1b      	ldr	r3, [r3, #32]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d107      	bne.n	8002efa <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8002eea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002eee:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002ef8:	e009      	b.n	8002f0e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	6a1b      	ldr	r3, [r3, #32]
 8002f06:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	785b      	ldrb	r3, [r3, #1]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d155      	bne.n	8002fc2 <HAL_PCD_EP_DB_Transmit+0x35a>
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	461a      	mov	r2, r3
 8002f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f2a:	4413      	add	r3, r2
 8002f2c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	011a      	lsls	r2, r3, #4
 8002f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f36:	4413      	add	r3, r2
 8002f38:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002f3c:	637b      	str	r3, [r7, #52]	; 0x34
 8002f3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d112      	bne.n	8002f6a <HAL_PCD_EP_DB_Transmit+0x302>
 8002f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f46:	881b      	ldrh	r3, [r3, #0]
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002f4e:	b29a      	uxth	r2, r3
 8002f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f52:	801a      	strh	r2, [r3, #0]
 8002f54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f56:	881b      	ldrh	r3, [r3, #0]
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f62:	b29a      	uxth	r2, r3
 8002f64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f66:	801a      	strh	r2, [r3, #0]
 8002f68:	e047      	b.n	8002ffa <HAL_PCD_EP_DB_Transmit+0x392>
 8002f6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f6c:	2b3e      	cmp	r3, #62	; 0x3e
 8002f6e:	d811      	bhi.n	8002f94 <HAL_PCD_EP_DB_Transmit+0x32c>
 8002f70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f72:	085b      	lsrs	r3, r3, #1
 8002f74:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f78:	f003 0301 	and.w	r3, r3, #1
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d002      	beq.n	8002f86 <HAL_PCD_EP_DB_Transmit+0x31e>
 8002f80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f82:	3301      	adds	r3, #1
 8002f84:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	029b      	lsls	r3, r3, #10
 8002f8c:	b29a      	uxth	r2, r3
 8002f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f90:	801a      	strh	r2, [r3, #0]
 8002f92:	e032      	b.n	8002ffa <HAL_PCD_EP_DB_Transmit+0x392>
 8002f94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f96:	095b      	lsrs	r3, r3, #5
 8002f98:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f9c:	f003 031f 	and.w	r3, r3, #31
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d102      	bne.n	8002faa <HAL_PCD_EP_DB_Transmit+0x342>
 8002fa4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	64bb      	str	r3, [r7, #72]	; 0x48
 8002faa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	029b      	lsls	r3, r3, #10
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fba:	b29a      	uxth	r2, r3
 8002fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fbe:	801a      	strh	r2, [r3, #0]
 8002fc0:	e01b      	b.n	8002ffa <HAL_PCD_EP_DB_Transmit+0x392>
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	785b      	ldrb	r3, [r3, #1]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d117      	bne.n	8002ffa <HAL_PCD_EP_DB_Transmit+0x392>
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	643b      	str	r3, [r7, #64]	; 0x40
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	461a      	mov	r2, r3
 8002fdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fde:	4413      	add	r3, r2
 8002fe0:	643b      	str	r3, [r7, #64]	; 0x40
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	011a      	lsls	r2, r3, #4
 8002fe8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fea:	4413      	add	r3, r2
 8002fec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ff2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ff4:	b29a      	uxth	r2, r3
 8002ff6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ff8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6818      	ldr	r0, [r3, #0]
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	6959      	ldr	r1, [r3, #20]
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	891a      	ldrh	r2, [r3, #8]
 8003006:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003008:	b29b      	uxth	r3, r3
 800300a:	f003 ff04 	bl	8006e16 <USB_WritePMA>
 800300e:	e1d0      	b.n	80033b2 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003018:	b29b      	uxth	r3, r3
 800301a:	461a      	mov	r2, r3
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	00db      	lsls	r3, r3, #3
 8003022:	4413      	add	r3, r2
 8003024:	3306      	adds	r3, #6
 8003026:	005b      	lsls	r3, r3, #1
 8003028:	68fa      	ldr	r2, [r7, #12]
 800302a:	6812      	ldr	r2, [r2, #0]
 800302c:	4413      	add	r3, r2
 800302e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003032:	881b      	ldrh	r3, [r3, #0]
 8003034:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003038:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	699a      	ldr	r2, [r3, #24]
 8003040:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003044:	429a      	cmp	r2, r3
 8003046:	d307      	bcc.n	8003058 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	699a      	ldr	r2, [r3, #24]
 800304c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003050:	1ad2      	subs	r2, r2, r3
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	619a      	str	r2, [r3, #24]
 8003056:	e002      	b.n	800305e <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	2200      	movs	r2, #0
 800305c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	2b00      	cmp	r3, #0
 8003064:	f040 80c4 	bne.w	80031f0 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	785b      	ldrb	r3, [r3, #1]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d126      	bne.n	80030be <HAL_PCD_EP_DB_Transmit+0x456>
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800307e:	b29b      	uxth	r3, r3
 8003080:	461a      	mov	r2, r3
 8003082:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003084:	4413      	add	r3, r2
 8003086:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	011a      	lsls	r2, r3, #4
 800308e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003090:	4413      	add	r3, r2
 8003092:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003096:	66bb      	str	r3, [r7, #104]	; 0x68
 8003098:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800309a:	881b      	ldrh	r3, [r3, #0]
 800309c:	b29b      	uxth	r3, r3
 800309e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80030a2:	b29a      	uxth	r2, r3
 80030a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030a6:	801a      	strh	r2, [r3, #0]
 80030a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030aa:	881b      	ldrh	r3, [r3, #0]
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030b6:	b29a      	uxth	r2, r3
 80030b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030ba:	801a      	strh	r2, [r3, #0]
 80030bc:	e01a      	b.n	80030f4 <HAL_PCD_EP_DB_Transmit+0x48c>
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	785b      	ldrb	r3, [r3, #1]
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d116      	bne.n	80030f4 <HAL_PCD_EP_DB_Transmit+0x48c>
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	677b      	str	r3, [r7, #116]	; 0x74
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	461a      	mov	r2, r3
 80030d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030da:	4413      	add	r3, r2
 80030dc:	677b      	str	r3, [r7, #116]	; 0x74
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	011a      	lsls	r2, r3, #4
 80030e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030e6:	4413      	add	r3, r2
 80030e8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80030ec:	673b      	str	r3, [r7, #112]	; 0x70
 80030ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030f0:	2200      	movs	r2, #0
 80030f2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	785b      	ldrb	r3, [r3, #1]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d12f      	bne.n	8003162 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003112:	b29b      	uxth	r3, r3
 8003114:	461a      	mov	r2, r3
 8003116:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800311a:	4413      	add	r3, r2
 800311c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	011a      	lsls	r2, r3, #4
 8003126:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800312a:	4413      	add	r3, r2
 800312c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003130:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003134:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003138:	881b      	ldrh	r3, [r3, #0]
 800313a:	b29b      	uxth	r3, r3
 800313c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003140:	b29a      	uxth	r2, r3
 8003142:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003146:	801a      	strh	r2, [r3, #0]
 8003148:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800314c:	881b      	ldrh	r3, [r3, #0]
 800314e:	b29b      	uxth	r3, r3
 8003150:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003154:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003158:	b29a      	uxth	r2, r3
 800315a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800315e:	801a      	strh	r2, [r3, #0]
 8003160:	e017      	b.n	8003192 <HAL_PCD_EP_DB_Transmit+0x52a>
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	785b      	ldrb	r3, [r3, #1]
 8003166:	2b01      	cmp	r3, #1
 8003168:	d113      	bne.n	8003192 <HAL_PCD_EP_DB_Transmit+0x52a>
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003172:	b29b      	uxth	r3, r3
 8003174:	461a      	mov	r2, r3
 8003176:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003178:	4413      	add	r3, r2
 800317a:	67bb      	str	r3, [r7, #120]	; 0x78
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	011a      	lsls	r2, r3, #4
 8003182:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003184:	4413      	add	r3, r2
 8003186:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800318a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800318c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800318e:	2200      	movs	r2, #0
 8003190:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	4619      	mov	r1, r3
 8003198:	68f8      	ldr	r0, [r7, #12]
 800319a:	f005 fa6c 	bl	8008676 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800319e:	88fb      	ldrh	r3, [r7, #6]
 80031a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f040 8104 	bne.w	80033b2 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	461a      	mov	r2, r3
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	4413      	add	r3, r2
 80031b8:	881b      	ldrh	r3, [r3, #0]
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031c4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	461a      	mov	r2, r3
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	441a      	add	r2, r3
 80031d6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80031da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	8013      	strh	r3, [r2, #0]
 80031ee:	e0e0      	b.n	80033b2 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80031f0:	88fb      	ldrh	r3, [r7, #6]
 80031f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d121      	bne.n	800323e <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	461a      	mov	r2, r3
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	4413      	add	r3, r2
 8003208:	881b      	ldrh	r3, [r3, #0]
 800320a:	b29b      	uxth	r3, r3
 800320c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003210:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003214:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	461a      	mov	r2, r3
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	441a      	add	r2, r3
 8003226:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800322a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800322e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003232:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003236:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800323a:	b29b      	uxth	r3, r3
 800323c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003244:	2b01      	cmp	r3, #1
 8003246:	f040 80b4 	bne.w	80033b2 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	695a      	ldr	r2, [r3, #20]
 800324e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003252:	441a      	add	r2, r3
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	69da      	ldr	r2, [r3, #28]
 800325c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003260:	441a      	add	r2, r3
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	6a1a      	ldr	r2, [r3, #32]
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	429a      	cmp	r2, r3
 8003270:	d309      	bcc.n	8003286 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	6a1a      	ldr	r2, [r3, #32]
 800327c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800327e:	1ad2      	subs	r2, r2, r3
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	621a      	str	r2, [r3, #32]
 8003284:	e015      	b.n	80032b2 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	6a1b      	ldr	r3, [r3, #32]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d107      	bne.n	800329e <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 800328e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003292:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	2200      	movs	r2, #0
 8003298:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800329c:	e009      	b.n	80032b2 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	6a1b      	ldr	r3, [r3, #32]
 80032a2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	2200      	movs	r2, #0
 80032a8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	667b      	str	r3, [r7, #100]	; 0x64
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	785b      	ldrb	r3, [r3, #1]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d155      	bne.n	800336c <HAL_PCD_EP_DB_Transmit+0x704>
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	461a      	mov	r2, r3
 80032d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032d4:	4413      	add	r3, r2
 80032d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	011a      	lsls	r2, r3, #4
 80032de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032e0:	4413      	add	r3, r2
 80032e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80032e6:	65bb      	str	r3, [r7, #88]	; 0x58
 80032e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d112      	bne.n	8003314 <HAL_PCD_EP_DB_Transmit+0x6ac>
 80032ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032f0:	881b      	ldrh	r3, [r3, #0]
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80032f8:	b29a      	uxth	r2, r3
 80032fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032fc:	801a      	strh	r2, [r3, #0]
 80032fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003300:	881b      	ldrh	r3, [r3, #0]
 8003302:	b29b      	uxth	r3, r3
 8003304:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003308:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800330c:	b29a      	uxth	r2, r3
 800330e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003310:	801a      	strh	r2, [r3, #0]
 8003312:	e044      	b.n	800339e <HAL_PCD_EP_DB_Transmit+0x736>
 8003314:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003316:	2b3e      	cmp	r3, #62	; 0x3e
 8003318:	d811      	bhi.n	800333e <HAL_PCD_EP_DB_Transmit+0x6d6>
 800331a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800331c:	085b      	lsrs	r3, r3, #1
 800331e:	657b      	str	r3, [r7, #84]	; 0x54
 8003320:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	2b00      	cmp	r3, #0
 8003328:	d002      	beq.n	8003330 <HAL_PCD_EP_DB_Transmit+0x6c8>
 800332a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800332c:	3301      	adds	r3, #1
 800332e:	657b      	str	r3, [r7, #84]	; 0x54
 8003330:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003332:	b29b      	uxth	r3, r3
 8003334:	029b      	lsls	r3, r3, #10
 8003336:	b29a      	uxth	r2, r3
 8003338:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800333a:	801a      	strh	r2, [r3, #0]
 800333c:	e02f      	b.n	800339e <HAL_PCD_EP_DB_Transmit+0x736>
 800333e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003340:	095b      	lsrs	r3, r3, #5
 8003342:	657b      	str	r3, [r7, #84]	; 0x54
 8003344:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003346:	f003 031f 	and.w	r3, r3, #31
 800334a:	2b00      	cmp	r3, #0
 800334c:	d102      	bne.n	8003354 <HAL_PCD_EP_DB_Transmit+0x6ec>
 800334e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003350:	3b01      	subs	r3, #1
 8003352:	657b      	str	r3, [r7, #84]	; 0x54
 8003354:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003356:	b29b      	uxth	r3, r3
 8003358:	029b      	lsls	r3, r3, #10
 800335a:	b29b      	uxth	r3, r3
 800335c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003360:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003364:	b29a      	uxth	r2, r3
 8003366:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003368:	801a      	strh	r2, [r3, #0]
 800336a:	e018      	b.n	800339e <HAL_PCD_EP_DB_Transmit+0x736>
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	785b      	ldrb	r3, [r3, #1]
 8003370:	2b01      	cmp	r3, #1
 8003372:	d114      	bne.n	800339e <HAL_PCD_EP_DB_Transmit+0x736>
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800337c:	b29b      	uxth	r3, r3
 800337e:	461a      	mov	r2, r3
 8003380:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003382:	4413      	add	r3, r2
 8003384:	667b      	str	r3, [r7, #100]	; 0x64
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	011a      	lsls	r2, r3, #4
 800338c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800338e:	4413      	add	r3, r2
 8003390:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003394:	663b      	str	r3, [r7, #96]	; 0x60
 8003396:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003398:	b29a      	uxth	r2, r3
 800339a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800339c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6818      	ldr	r0, [r3, #0]
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	6959      	ldr	r1, [r3, #20]
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	895a      	ldrh	r2, [r3, #10]
 80033aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	f003 fd32 	bl	8006e16 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	461a      	mov	r2, r3
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	4413      	add	r3, r2
 80033c0:	881b      	ldrh	r3, [r3, #0]
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033cc:	823b      	strh	r3, [r7, #16]
 80033ce:	8a3b      	ldrh	r3, [r7, #16]
 80033d0:	f083 0310 	eor.w	r3, r3, #16
 80033d4:	823b      	strh	r3, [r7, #16]
 80033d6:	8a3b      	ldrh	r3, [r7, #16]
 80033d8:	f083 0320 	eor.w	r3, r3, #32
 80033dc:	823b      	strh	r3, [r7, #16]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	461a      	mov	r2, r3
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	441a      	add	r2, r3
 80033ec:	8a3b      	ldrh	r3, [r7, #16]
 80033ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033fe:	b29b      	uxth	r3, r3
 8003400:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003402:	2300      	movs	r3, #0
}
 8003404:	4618      	mov	r0, r3
 8003406:	3788      	adds	r7, #136	; 0x88
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800340c:	b480      	push	{r7}
 800340e:	b087      	sub	sp, #28
 8003410:	af00      	add	r7, sp, #0
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	607b      	str	r3, [r7, #4]
 8003416:	460b      	mov	r3, r1
 8003418:	817b      	strh	r3, [r7, #10]
 800341a:	4613      	mov	r3, r2
 800341c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800341e:	897b      	ldrh	r3, [r7, #10]
 8003420:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003424:	b29b      	uxth	r3, r3
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00b      	beq.n	8003442 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800342a:	897b      	ldrh	r3, [r7, #10]
 800342c:	f003 0307 	and.w	r3, r3, #7
 8003430:	1c5a      	adds	r2, r3, #1
 8003432:	4613      	mov	r3, r2
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	4413      	add	r3, r2
 8003438:	00db      	lsls	r3, r3, #3
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	4413      	add	r3, r2
 800343e:	617b      	str	r3, [r7, #20]
 8003440:	e009      	b.n	8003456 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003442:	897a      	ldrh	r2, [r7, #10]
 8003444:	4613      	mov	r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	4413      	add	r3, r2
 800344a:	00db      	lsls	r3, r3, #3
 800344c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003450:	68fa      	ldr	r2, [r7, #12]
 8003452:	4413      	add	r3, r2
 8003454:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003456:	893b      	ldrh	r3, [r7, #8]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d107      	bne.n	800346c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	2200      	movs	r2, #0
 8003460:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	b29a      	uxth	r2, r3
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	80da      	strh	r2, [r3, #6]
 800346a:	e00b      	b.n	8003484 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	2201      	movs	r2, #1
 8003470:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	b29a      	uxth	r2, r3
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	0c1b      	lsrs	r3, r3, #16
 800347e:	b29a      	uxth	r2, r3
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	371c      	adds	r7, #28
 800348a:	46bd      	mov	sp, r7
 800348c:	bc80      	pop	{r7}
 800348e:	4770      	bx	lr

08003490 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b086      	sub	sp, #24
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d101      	bne.n	80034a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e26c      	b.n	800397c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0301 	and.w	r3, r3, #1
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	f000 8087 	beq.w	80035be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80034b0:	4b92      	ldr	r3, [pc, #584]	; (80036fc <HAL_RCC_OscConfig+0x26c>)
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f003 030c 	and.w	r3, r3, #12
 80034b8:	2b04      	cmp	r3, #4
 80034ba:	d00c      	beq.n	80034d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80034bc:	4b8f      	ldr	r3, [pc, #572]	; (80036fc <HAL_RCC_OscConfig+0x26c>)
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f003 030c 	and.w	r3, r3, #12
 80034c4:	2b08      	cmp	r3, #8
 80034c6:	d112      	bne.n	80034ee <HAL_RCC_OscConfig+0x5e>
 80034c8:	4b8c      	ldr	r3, [pc, #560]	; (80036fc <HAL_RCC_OscConfig+0x26c>)
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034d4:	d10b      	bne.n	80034ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034d6:	4b89      	ldr	r3, [pc, #548]	; (80036fc <HAL_RCC_OscConfig+0x26c>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d06c      	beq.n	80035bc <HAL_RCC_OscConfig+0x12c>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d168      	bne.n	80035bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e246      	b.n	800397c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034f6:	d106      	bne.n	8003506 <HAL_RCC_OscConfig+0x76>
 80034f8:	4b80      	ldr	r3, [pc, #512]	; (80036fc <HAL_RCC_OscConfig+0x26c>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a7f      	ldr	r2, [pc, #508]	; (80036fc <HAL_RCC_OscConfig+0x26c>)
 80034fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003502:	6013      	str	r3, [r2, #0]
 8003504:	e02e      	b.n	8003564 <HAL_RCC_OscConfig+0xd4>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d10c      	bne.n	8003528 <HAL_RCC_OscConfig+0x98>
 800350e:	4b7b      	ldr	r3, [pc, #492]	; (80036fc <HAL_RCC_OscConfig+0x26c>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a7a      	ldr	r2, [pc, #488]	; (80036fc <HAL_RCC_OscConfig+0x26c>)
 8003514:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003518:	6013      	str	r3, [r2, #0]
 800351a:	4b78      	ldr	r3, [pc, #480]	; (80036fc <HAL_RCC_OscConfig+0x26c>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a77      	ldr	r2, [pc, #476]	; (80036fc <HAL_RCC_OscConfig+0x26c>)
 8003520:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003524:	6013      	str	r3, [r2, #0]
 8003526:	e01d      	b.n	8003564 <HAL_RCC_OscConfig+0xd4>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003530:	d10c      	bne.n	800354c <HAL_RCC_OscConfig+0xbc>
 8003532:	4b72      	ldr	r3, [pc, #456]	; (80036fc <HAL_RCC_OscConfig+0x26c>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a71      	ldr	r2, [pc, #452]	; (80036fc <HAL_RCC_OscConfig+0x26c>)
 8003538:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800353c:	6013      	str	r3, [r2, #0]
 800353e:	4b6f      	ldr	r3, [pc, #444]	; (80036fc <HAL_RCC_OscConfig+0x26c>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a6e      	ldr	r2, [pc, #440]	; (80036fc <HAL_RCC_OscConfig+0x26c>)
 8003544:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003548:	6013      	str	r3, [r2, #0]
 800354a:	e00b      	b.n	8003564 <HAL_RCC_OscConfig+0xd4>
 800354c:	4b6b      	ldr	r3, [pc, #428]	; (80036fc <HAL_RCC_OscConfig+0x26c>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a6a      	ldr	r2, [pc, #424]	; (80036fc <HAL_RCC_OscConfig+0x26c>)
 8003552:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003556:	6013      	str	r3, [r2, #0]
 8003558:	4b68      	ldr	r3, [pc, #416]	; (80036fc <HAL_RCC_OscConfig+0x26c>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a67      	ldr	r2, [pc, #412]	; (80036fc <HAL_RCC_OscConfig+0x26c>)
 800355e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003562:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d013      	beq.n	8003594 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800356c:	f7fd fa50 	bl	8000a10 <HAL_GetTick>
 8003570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003572:	e008      	b.n	8003586 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003574:	f7fd fa4c 	bl	8000a10 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b64      	cmp	r3, #100	; 0x64
 8003580:	d901      	bls.n	8003586 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e1fa      	b.n	800397c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003586:	4b5d      	ldr	r3, [pc, #372]	; (80036fc <HAL_RCC_OscConfig+0x26c>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d0f0      	beq.n	8003574 <HAL_RCC_OscConfig+0xe4>
 8003592:	e014      	b.n	80035be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003594:	f7fd fa3c 	bl	8000a10 <HAL_GetTick>
 8003598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800359a:	e008      	b.n	80035ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800359c:	f7fd fa38 	bl	8000a10 <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	2b64      	cmp	r3, #100	; 0x64
 80035a8:	d901      	bls.n	80035ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e1e6      	b.n	800397c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ae:	4b53      	ldr	r3, [pc, #332]	; (80036fc <HAL_RCC_OscConfig+0x26c>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1f0      	bne.n	800359c <HAL_RCC_OscConfig+0x10c>
 80035ba:	e000      	b.n	80035be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0302 	and.w	r3, r3, #2
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d063      	beq.n	8003692 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035ca:	4b4c      	ldr	r3, [pc, #304]	; (80036fc <HAL_RCC_OscConfig+0x26c>)
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f003 030c 	and.w	r3, r3, #12
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00b      	beq.n	80035ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80035d6:	4b49      	ldr	r3, [pc, #292]	; (80036fc <HAL_RCC_OscConfig+0x26c>)
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f003 030c 	and.w	r3, r3, #12
 80035de:	2b08      	cmp	r3, #8
 80035e0:	d11c      	bne.n	800361c <HAL_RCC_OscConfig+0x18c>
 80035e2:	4b46      	ldr	r3, [pc, #280]	; (80036fc <HAL_RCC_OscConfig+0x26c>)
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d116      	bne.n	800361c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035ee:	4b43      	ldr	r3, [pc, #268]	; (80036fc <HAL_RCC_OscConfig+0x26c>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d005      	beq.n	8003606 <HAL_RCC_OscConfig+0x176>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d001      	beq.n	8003606 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e1ba      	b.n	800397c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003606:	4b3d      	ldr	r3, [pc, #244]	; (80036fc <HAL_RCC_OscConfig+0x26c>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	695b      	ldr	r3, [r3, #20]
 8003612:	00db      	lsls	r3, r3, #3
 8003614:	4939      	ldr	r1, [pc, #228]	; (80036fc <HAL_RCC_OscConfig+0x26c>)
 8003616:	4313      	orrs	r3, r2
 8003618:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800361a:	e03a      	b.n	8003692 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	691b      	ldr	r3, [r3, #16]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d020      	beq.n	8003666 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003624:	4b36      	ldr	r3, [pc, #216]	; (8003700 <HAL_RCC_OscConfig+0x270>)
 8003626:	2201      	movs	r2, #1
 8003628:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800362a:	f7fd f9f1 	bl	8000a10 <HAL_GetTick>
 800362e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003630:	e008      	b.n	8003644 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003632:	f7fd f9ed 	bl	8000a10 <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	2b02      	cmp	r3, #2
 800363e:	d901      	bls.n	8003644 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e19b      	b.n	800397c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003644:	4b2d      	ldr	r3, [pc, #180]	; (80036fc <HAL_RCC_OscConfig+0x26c>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0302 	and.w	r3, r3, #2
 800364c:	2b00      	cmp	r3, #0
 800364e:	d0f0      	beq.n	8003632 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003650:	4b2a      	ldr	r3, [pc, #168]	; (80036fc <HAL_RCC_OscConfig+0x26c>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	695b      	ldr	r3, [r3, #20]
 800365c:	00db      	lsls	r3, r3, #3
 800365e:	4927      	ldr	r1, [pc, #156]	; (80036fc <HAL_RCC_OscConfig+0x26c>)
 8003660:	4313      	orrs	r3, r2
 8003662:	600b      	str	r3, [r1, #0]
 8003664:	e015      	b.n	8003692 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003666:	4b26      	ldr	r3, [pc, #152]	; (8003700 <HAL_RCC_OscConfig+0x270>)
 8003668:	2200      	movs	r2, #0
 800366a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800366c:	f7fd f9d0 	bl	8000a10 <HAL_GetTick>
 8003670:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003672:	e008      	b.n	8003686 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003674:	f7fd f9cc 	bl	8000a10 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b02      	cmp	r3, #2
 8003680:	d901      	bls.n	8003686 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e17a      	b.n	800397c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003686:	4b1d      	ldr	r3, [pc, #116]	; (80036fc <HAL_RCC_OscConfig+0x26c>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1f0      	bne.n	8003674 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0308 	and.w	r3, r3, #8
 800369a:	2b00      	cmp	r3, #0
 800369c:	d03a      	beq.n	8003714 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	699b      	ldr	r3, [r3, #24]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d019      	beq.n	80036da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036a6:	4b17      	ldr	r3, [pc, #92]	; (8003704 <HAL_RCC_OscConfig+0x274>)
 80036a8:	2201      	movs	r2, #1
 80036aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036ac:	f7fd f9b0 	bl	8000a10 <HAL_GetTick>
 80036b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036b2:	e008      	b.n	80036c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036b4:	f7fd f9ac 	bl	8000a10 <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d901      	bls.n	80036c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e15a      	b.n	800397c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036c6:	4b0d      	ldr	r3, [pc, #52]	; (80036fc <HAL_RCC_OscConfig+0x26c>)
 80036c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ca:	f003 0302 	and.w	r3, r3, #2
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d0f0      	beq.n	80036b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80036d2:	2001      	movs	r0, #1
 80036d4:	f000 fad8 	bl	8003c88 <RCC_Delay>
 80036d8:	e01c      	b.n	8003714 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036da:	4b0a      	ldr	r3, [pc, #40]	; (8003704 <HAL_RCC_OscConfig+0x274>)
 80036dc:	2200      	movs	r2, #0
 80036de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036e0:	f7fd f996 	bl	8000a10 <HAL_GetTick>
 80036e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036e6:	e00f      	b.n	8003708 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036e8:	f7fd f992 	bl	8000a10 <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d908      	bls.n	8003708 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e140      	b.n	800397c <HAL_RCC_OscConfig+0x4ec>
 80036fa:	bf00      	nop
 80036fc:	40021000 	.word	0x40021000
 8003700:	42420000 	.word	0x42420000
 8003704:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003708:	4b9e      	ldr	r3, [pc, #632]	; (8003984 <HAL_RCC_OscConfig+0x4f4>)
 800370a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370c:	f003 0302 	and.w	r3, r3, #2
 8003710:	2b00      	cmp	r3, #0
 8003712:	d1e9      	bne.n	80036e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0304 	and.w	r3, r3, #4
 800371c:	2b00      	cmp	r3, #0
 800371e:	f000 80a6 	beq.w	800386e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003722:	2300      	movs	r3, #0
 8003724:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003726:	4b97      	ldr	r3, [pc, #604]	; (8003984 <HAL_RCC_OscConfig+0x4f4>)
 8003728:	69db      	ldr	r3, [r3, #28]
 800372a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d10d      	bne.n	800374e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003732:	4b94      	ldr	r3, [pc, #592]	; (8003984 <HAL_RCC_OscConfig+0x4f4>)
 8003734:	69db      	ldr	r3, [r3, #28]
 8003736:	4a93      	ldr	r2, [pc, #588]	; (8003984 <HAL_RCC_OscConfig+0x4f4>)
 8003738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800373c:	61d3      	str	r3, [r2, #28]
 800373e:	4b91      	ldr	r3, [pc, #580]	; (8003984 <HAL_RCC_OscConfig+0x4f4>)
 8003740:	69db      	ldr	r3, [r3, #28]
 8003742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003746:	60bb      	str	r3, [r7, #8]
 8003748:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800374a:	2301      	movs	r3, #1
 800374c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800374e:	4b8e      	ldr	r3, [pc, #568]	; (8003988 <HAL_RCC_OscConfig+0x4f8>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003756:	2b00      	cmp	r3, #0
 8003758:	d118      	bne.n	800378c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800375a:	4b8b      	ldr	r3, [pc, #556]	; (8003988 <HAL_RCC_OscConfig+0x4f8>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a8a      	ldr	r2, [pc, #552]	; (8003988 <HAL_RCC_OscConfig+0x4f8>)
 8003760:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003764:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003766:	f7fd f953 	bl	8000a10 <HAL_GetTick>
 800376a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800376c:	e008      	b.n	8003780 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800376e:	f7fd f94f 	bl	8000a10 <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	2b64      	cmp	r3, #100	; 0x64
 800377a:	d901      	bls.n	8003780 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	e0fd      	b.n	800397c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003780:	4b81      	ldr	r3, [pc, #516]	; (8003988 <HAL_RCC_OscConfig+0x4f8>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003788:	2b00      	cmp	r3, #0
 800378a:	d0f0      	beq.n	800376e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	2b01      	cmp	r3, #1
 8003792:	d106      	bne.n	80037a2 <HAL_RCC_OscConfig+0x312>
 8003794:	4b7b      	ldr	r3, [pc, #492]	; (8003984 <HAL_RCC_OscConfig+0x4f4>)
 8003796:	6a1b      	ldr	r3, [r3, #32]
 8003798:	4a7a      	ldr	r2, [pc, #488]	; (8003984 <HAL_RCC_OscConfig+0x4f4>)
 800379a:	f043 0301 	orr.w	r3, r3, #1
 800379e:	6213      	str	r3, [r2, #32]
 80037a0:	e02d      	b.n	80037fe <HAL_RCC_OscConfig+0x36e>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d10c      	bne.n	80037c4 <HAL_RCC_OscConfig+0x334>
 80037aa:	4b76      	ldr	r3, [pc, #472]	; (8003984 <HAL_RCC_OscConfig+0x4f4>)
 80037ac:	6a1b      	ldr	r3, [r3, #32]
 80037ae:	4a75      	ldr	r2, [pc, #468]	; (8003984 <HAL_RCC_OscConfig+0x4f4>)
 80037b0:	f023 0301 	bic.w	r3, r3, #1
 80037b4:	6213      	str	r3, [r2, #32]
 80037b6:	4b73      	ldr	r3, [pc, #460]	; (8003984 <HAL_RCC_OscConfig+0x4f4>)
 80037b8:	6a1b      	ldr	r3, [r3, #32]
 80037ba:	4a72      	ldr	r2, [pc, #456]	; (8003984 <HAL_RCC_OscConfig+0x4f4>)
 80037bc:	f023 0304 	bic.w	r3, r3, #4
 80037c0:	6213      	str	r3, [r2, #32]
 80037c2:	e01c      	b.n	80037fe <HAL_RCC_OscConfig+0x36e>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	2b05      	cmp	r3, #5
 80037ca:	d10c      	bne.n	80037e6 <HAL_RCC_OscConfig+0x356>
 80037cc:	4b6d      	ldr	r3, [pc, #436]	; (8003984 <HAL_RCC_OscConfig+0x4f4>)
 80037ce:	6a1b      	ldr	r3, [r3, #32]
 80037d0:	4a6c      	ldr	r2, [pc, #432]	; (8003984 <HAL_RCC_OscConfig+0x4f4>)
 80037d2:	f043 0304 	orr.w	r3, r3, #4
 80037d6:	6213      	str	r3, [r2, #32]
 80037d8:	4b6a      	ldr	r3, [pc, #424]	; (8003984 <HAL_RCC_OscConfig+0x4f4>)
 80037da:	6a1b      	ldr	r3, [r3, #32]
 80037dc:	4a69      	ldr	r2, [pc, #420]	; (8003984 <HAL_RCC_OscConfig+0x4f4>)
 80037de:	f043 0301 	orr.w	r3, r3, #1
 80037e2:	6213      	str	r3, [r2, #32]
 80037e4:	e00b      	b.n	80037fe <HAL_RCC_OscConfig+0x36e>
 80037e6:	4b67      	ldr	r3, [pc, #412]	; (8003984 <HAL_RCC_OscConfig+0x4f4>)
 80037e8:	6a1b      	ldr	r3, [r3, #32]
 80037ea:	4a66      	ldr	r2, [pc, #408]	; (8003984 <HAL_RCC_OscConfig+0x4f4>)
 80037ec:	f023 0301 	bic.w	r3, r3, #1
 80037f0:	6213      	str	r3, [r2, #32]
 80037f2:	4b64      	ldr	r3, [pc, #400]	; (8003984 <HAL_RCC_OscConfig+0x4f4>)
 80037f4:	6a1b      	ldr	r3, [r3, #32]
 80037f6:	4a63      	ldr	r2, [pc, #396]	; (8003984 <HAL_RCC_OscConfig+0x4f4>)
 80037f8:	f023 0304 	bic.w	r3, r3, #4
 80037fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d015      	beq.n	8003832 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003806:	f7fd f903 	bl	8000a10 <HAL_GetTick>
 800380a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800380c:	e00a      	b.n	8003824 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800380e:	f7fd f8ff 	bl	8000a10 <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	f241 3288 	movw	r2, #5000	; 0x1388
 800381c:	4293      	cmp	r3, r2
 800381e:	d901      	bls.n	8003824 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	e0ab      	b.n	800397c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003824:	4b57      	ldr	r3, [pc, #348]	; (8003984 <HAL_RCC_OscConfig+0x4f4>)
 8003826:	6a1b      	ldr	r3, [r3, #32]
 8003828:	f003 0302 	and.w	r3, r3, #2
 800382c:	2b00      	cmp	r3, #0
 800382e:	d0ee      	beq.n	800380e <HAL_RCC_OscConfig+0x37e>
 8003830:	e014      	b.n	800385c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003832:	f7fd f8ed 	bl	8000a10 <HAL_GetTick>
 8003836:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003838:	e00a      	b.n	8003850 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800383a:	f7fd f8e9 	bl	8000a10 <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	f241 3288 	movw	r2, #5000	; 0x1388
 8003848:	4293      	cmp	r3, r2
 800384a:	d901      	bls.n	8003850 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	e095      	b.n	800397c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003850:	4b4c      	ldr	r3, [pc, #304]	; (8003984 <HAL_RCC_OscConfig+0x4f4>)
 8003852:	6a1b      	ldr	r3, [r3, #32]
 8003854:	f003 0302 	and.w	r3, r3, #2
 8003858:	2b00      	cmp	r3, #0
 800385a:	d1ee      	bne.n	800383a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800385c:	7dfb      	ldrb	r3, [r7, #23]
 800385e:	2b01      	cmp	r3, #1
 8003860:	d105      	bne.n	800386e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003862:	4b48      	ldr	r3, [pc, #288]	; (8003984 <HAL_RCC_OscConfig+0x4f4>)
 8003864:	69db      	ldr	r3, [r3, #28]
 8003866:	4a47      	ldr	r2, [pc, #284]	; (8003984 <HAL_RCC_OscConfig+0x4f4>)
 8003868:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800386c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	69db      	ldr	r3, [r3, #28]
 8003872:	2b00      	cmp	r3, #0
 8003874:	f000 8081 	beq.w	800397a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003878:	4b42      	ldr	r3, [pc, #264]	; (8003984 <HAL_RCC_OscConfig+0x4f4>)
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f003 030c 	and.w	r3, r3, #12
 8003880:	2b08      	cmp	r3, #8
 8003882:	d061      	beq.n	8003948 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	69db      	ldr	r3, [r3, #28]
 8003888:	2b02      	cmp	r3, #2
 800388a:	d146      	bne.n	800391a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800388c:	4b3f      	ldr	r3, [pc, #252]	; (800398c <HAL_RCC_OscConfig+0x4fc>)
 800388e:	2200      	movs	r2, #0
 8003890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003892:	f7fd f8bd 	bl	8000a10 <HAL_GetTick>
 8003896:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003898:	e008      	b.n	80038ac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800389a:	f7fd f8b9 	bl	8000a10 <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d901      	bls.n	80038ac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80038a8:	2303      	movs	r3, #3
 80038aa:	e067      	b.n	800397c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038ac:	4b35      	ldr	r3, [pc, #212]	; (8003984 <HAL_RCC_OscConfig+0x4f4>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d1f0      	bne.n	800389a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6a1b      	ldr	r3, [r3, #32]
 80038bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038c0:	d108      	bne.n	80038d4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80038c2:	4b30      	ldr	r3, [pc, #192]	; (8003984 <HAL_RCC_OscConfig+0x4f4>)
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	492d      	ldr	r1, [pc, #180]	; (8003984 <HAL_RCC_OscConfig+0x4f4>)
 80038d0:	4313      	orrs	r3, r2
 80038d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038d4:	4b2b      	ldr	r3, [pc, #172]	; (8003984 <HAL_RCC_OscConfig+0x4f4>)
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a19      	ldr	r1, [r3, #32]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e4:	430b      	orrs	r3, r1
 80038e6:	4927      	ldr	r1, [pc, #156]	; (8003984 <HAL_RCC_OscConfig+0x4f4>)
 80038e8:	4313      	orrs	r3, r2
 80038ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038ec:	4b27      	ldr	r3, [pc, #156]	; (800398c <HAL_RCC_OscConfig+0x4fc>)
 80038ee:	2201      	movs	r2, #1
 80038f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f2:	f7fd f88d 	bl	8000a10 <HAL_GetTick>
 80038f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038f8:	e008      	b.n	800390c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038fa:	f7fd f889 	bl	8000a10 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	2b02      	cmp	r3, #2
 8003906:	d901      	bls.n	800390c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e037      	b.n	800397c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800390c:	4b1d      	ldr	r3, [pc, #116]	; (8003984 <HAL_RCC_OscConfig+0x4f4>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d0f0      	beq.n	80038fa <HAL_RCC_OscConfig+0x46a>
 8003918:	e02f      	b.n	800397a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800391a:	4b1c      	ldr	r3, [pc, #112]	; (800398c <HAL_RCC_OscConfig+0x4fc>)
 800391c:	2200      	movs	r2, #0
 800391e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003920:	f7fd f876 	bl	8000a10 <HAL_GetTick>
 8003924:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003926:	e008      	b.n	800393a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003928:	f7fd f872 	bl	8000a10 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b02      	cmp	r3, #2
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e020      	b.n	800397c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800393a:	4b12      	ldr	r3, [pc, #72]	; (8003984 <HAL_RCC_OscConfig+0x4f4>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1f0      	bne.n	8003928 <HAL_RCC_OscConfig+0x498>
 8003946:	e018      	b.n	800397a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	69db      	ldr	r3, [r3, #28]
 800394c:	2b01      	cmp	r3, #1
 800394e:	d101      	bne.n	8003954 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e013      	b.n	800397c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003954:	4b0b      	ldr	r3, [pc, #44]	; (8003984 <HAL_RCC_OscConfig+0x4f4>)
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a1b      	ldr	r3, [r3, #32]
 8003964:	429a      	cmp	r2, r3
 8003966:	d106      	bne.n	8003976 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003972:	429a      	cmp	r2, r3
 8003974:	d001      	beq.n	800397a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e000      	b.n	800397c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800397a:	2300      	movs	r3, #0
}
 800397c:	4618      	mov	r0, r3
 800397e:	3718      	adds	r7, #24
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	40021000 	.word	0x40021000
 8003988:	40007000 	.word	0x40007000
 800398c:	42420060 	.word	0x42420060

08003990 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d101      	bne.n	80039a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e0d0      	b.n	8003b46 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039a4:	4b6a      	ldr	r3, [pc, #424]	; (8003b50 <HAL_RCC_ClockConfig+0x1c0>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0307 	and.w	r3, r3, #7
 80039ac:	683a      	ldr	r2, [r7, #0]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d910      	bls.n	80039d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039b2:	4b67      	ldr	r3, [pc, #412]	; (8003b50 <HAL_RCC_ClockConfig+0x1c0>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f023 0207 	bic.w	r2, r3, #7
 80039ba:	4965      	ldr	r1, [pc, #404]	; (8003b50 <HAL_RCC_ClockConfig+0x1c0>)
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	4313      	orrs	r3, r2
 80039c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039c2:	4b63      	ldr	r3, [pc, #396]	; (8003b50 <HAL_RCC_ClockConfig+0x1c0>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0307 	and.w	r3, r3, #7
 80039ca:	683a      	ldr	r2, [r7, #0]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d001      	beq.n	80039d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e0b8      	b.n	8003b46 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0302 	and.w	r3, r3, #2
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d020      	beq.n	8003a22 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0304 	and.w	r3, r3, #4
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d005      	beq.n	80039f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039ec:	4b59      	ldr	r3, [pc, #356]	; (8003b54 <HAL_RCC_ClockConfig+0x1c4>)
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	4a58      	ldr	r2, [pc, #352]	; (8003b54 <HAL_RCC_ClockConfig+0x1c4>)
 80039f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80039f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0308 	and.w	r3, r3, #8
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d005      	beq.n	8003a10 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a04:	4b53      	ldr	r3, [pc, #332]	; (8003b54 <HAL_RCC_ClockConfig+0x1c4>)
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	4a52      	ldr	r2, [pc, #328]	; (8003b54 <HAL_RCC_ClockConfig+0x1c4>)
 8003a0a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003a0e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a10:	4b50      	ldr	r3, [pc, #320]	; (8003b54 <HAL_RCC_ClockConfig+0x1c4>)
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	494d      	ldr	r1, [pc, #308]	; (8003b54 <HAL_RCC_ClockConfig+0x1c4>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d040      	beq.n	8003ab0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d107      	bne.n	8003a46 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a36:	4b47      	ldr	r3, [pc, #284]	; (8003b54 <HAL_RCC_ClockConfig+0x1c4>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d115      	bne.n	8003a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e07f      	b.n	8003b46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d107      	bne.n	8003a5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a4e:	4b41      	ldr	r3, [pc, #260]	; (8003b54 <HAL_RCC_ClockConfig+0x1c4>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d109      	bne.n	8003a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e073      	b.n	8003b46 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a5e:	4b3d      	ldr	r3, [pc, #244]	; (8003b54 <HAL_RCC_ClockConfig+0x1c4>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0302 	and.w	r3, r3, #2
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d101      	bne.n	8003a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e06b      	b.n	8003b46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a6e:	4b39      	ldr	r3, [pc, #228]	; (8003b54 <HAL_RCC_ClockConfig+0x1c4>)
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f023 0203 	bic.w	r2, r3, #3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	4936      	ldr	r1, [pc, #216]	; (8003b54 <HAL_RCC_ClockConfig+0x1c4>)
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a80:	f7fc ffc6 	bl	8000a10 <HAL_GetTick>
 8003a84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a86:	e00a      	b.n	8003a9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a88:	f7fc ffc2 	bl	8000a10 <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d901      	bls.n	8003a9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e053      	b.n	8003b46 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a9e:	4b2d      	ldr	r3, [pc, #180]	; (8003b54 <HAL_RCC_ClockConfig+0x1c4>)
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f003 020c 	and.w	r2, r3, #12
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d1eb      	bne.n	8003a88 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ab0:	4b27      	ldr	r3, [pc, #156]	; (8003b50 <HAL_RCC_ClockConfig+0x1c0>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0307 	and.w	r3, r3, #7
 8003ab8:	683a      	ldr	r2, [r7, #0]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d210      	bcs.n	8003ae0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003abe:	4b24      	ldr	r3, [pc, #144]	; (8003b50 <HAL_RCC_ClockConfig+0x1c0>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f023 0207 	bic.w	r2, r3, #7
 8003ac6:	4922      	ldr	r1, [pc, #136]	; (8003b50 <HAL_RCC_ClockConfig+0x1c0>)
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ace:	4b20      	ldr	r3, [pc, #128]	; (8003b50 <HAL_RCC_ClockConfig+0x1c0>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0307 	and.w	r3, r3, #7
 8003ad6:	683a      	ldr	r2, [r7, #0]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d001      	beq.n	8003ae0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e032      	b.n	8003b46 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0304 	and.w	r3, r3, #4
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d008      	beq.n	8003afe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003aec:	4b19      	ldr	r3, [pc, #100]	; (8003b54 <HAL_RCC_ClockConfig+0x1c4>)
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	4916      	ldr	r1, [pc, #88]	; (8003b54 <HAL_RCC_ClockConfig+0x1c4>)
 8003afa:	4313      	orrs	r3, r2
 8003afc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0308 	and.w	r3, r3, #8
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d009      	beq.n	8003b1e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b0a:	4b12      	ldr	r3, [pc, #72]	; (8003b54 <HAL_RCC_ClockConfig+0x1c4>)
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	00db      	lsls	r3, r3, #3
 8003b18:	490e      	ldr	r1, [pc, #56]	; (8003b54 <HAL_RCC_ClockConfig+0x1c4>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b1e:	f000 f821 	bl	8003b64 <HAL_RCC_GetSysClockFreq>
 8003b22:	4602      	mov	r2, r0
 8003b24:	4b0b      	ldr	r3, [pc, #44]	; (8003b54 <HAL_RCC_ClockConfig+0x1c4>)
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	091b      	lsrs	r3, r3, #4
 8003b2a:	f003 030f 	and.w	r3, r3, #15
 8003b2e:	490a      	ldr	r1, [pc, #40]	; (8003b58 <HAL_RCC_ClockConfig+0x1c8>)
 8003b30:	5ccb      	ldrb	r3, [r1, r3]
 8003b32:	fa22 f303 	lsr.w	r3, r2, r3
 8003b36:	4a09      	ldr	r2, [pc, #36]	; (8003b5c <HAL_RCC_ClockConfig+0x1cc>)
 8003b38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b3a:	4b09      	ldr	r3, [pc, #36]	; (8003b60 <HAL_RCC_ClockConfig+0x1d0>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f7fc ff24 	bl	800098c <HAL_InitTick>

  return HAL_OK;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3710      	adds	r7, #16
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	40022000 	.word	0x40022000
 8003b54:	40021000 	.word	0x40021000
 8003b58:	08009448 	.word	0x08009448
 8003b5c:	20000000 	.word	0x20000000
 8003b60:	20000004 	.word	0x20000004

08003b64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b64:	b490      	push	{r4, r7}
 8003b66:	b08a      	sub	sp, #40	; 0x28
 8003b68:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003b6a:	4b2a      	ldr	r3, [pc, #168]	; (8003c14 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003b6c:	1d3c      	adds	r4, r7, #4
 8003b6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003b74:	f240 2301 	movw	r3, #513	; 0x201
 8003b78:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	61fb      	str	r3, [r7, #28]
 8003b7e:	2300      	movs	r3, #0
 8003b80:	61bb      	str	r3, [r7, #24]
 8003b82:	2300      	movs	r3, #0
 8003b84:	627b      	str	r3, [r7, #36]	; 0x24
 8003b86:	2300      	movs	r3, #0
 8003b88:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003b8e:	4b22      	ldr	r3, [pc, #136]	; (8003c18 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	f003 030c 	and.w	r3, r3, #12
 8003b9a:	2b04      	cmp	r3, #4
 8003b9c:	d002      	beq.n	8003ba4 <HAL_RCC_GetSysClockFreq+0x40>
 8003b9e:	2b08      	cmp	r3, #8
 8003ba0:	d003      	beq.n	8003baa <HAL_RCC_GetSysClockFreq+0x46>
 8003ba2:	e02d      	b.n	8003c00 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ba4:	4b1d      	ldr	r3, [pc, #116]	; (8003c1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ba6:	623b      	str	r3, [r7, #32]
      break;
 8003ba8:	e02d      	b.n	8003c06 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	0c9b      	lsrs	r3, r3, #18
 8003bae:	f003 030f 	and.w	r3, r3, #15
 8003bb2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003bb6:	4413      	add	r3, r2
 8003bb8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003bbc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d013      	beq.n	8003bf0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003bc8:	4b13      	ldr	r3, [pc, #76]	; (8003c18 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	0c5b      	lsrs	r3, r3, #17
 8003bce:	f003 0301 	and.w	r3, r3, #1
 8003bd2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003bd6:	4413      	add	r3, r2
 8003bd8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003bdc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	4a0e      	ldr	r2, [pc, #56]	; (8003c1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003be2:	fb02 f203 	mul.w	r2, r2, r3
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bec:	627b      	str	r3, [r7, #36]	; 0x24
 8003bee:	e004      	b.n	8003bfa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	4a0b      	ldr	r2, [pc, #44]	; (8003c20 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003bf4:	fb02 f303 	mul.w	r3, r2, r3
 8003bf8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfc:	623b      	str	r3, [r7, #32]
      break;
 8003bfe:	e002      	b.n	8003c06 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c00:	4b06      	ldr	r3, [pc, #24]	; (8003c1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c02:	623b      	str	r3, [r7, #32]
      break;
 8003c04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c06:	6a3b      	ldr	r3, [r7, #32]
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3728      	adds	r7, #40	; 0x28
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bc90      	pop	{r4, r7}
 8003c10:	4770      	bx	lr
 8003c12:	bf00      	nop
 8003c14:	080093e4 	.word	0x080093e4
 8003c18:	40021000 	.word	0x40021000
 8003c1c:	007a1200 	.word	0x007a1200
 8003c20:	003d0900 	.word	0x003d0900

08003c24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c24:	b480      	push	{r7}
 8003c26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c28:	4b02      	ldr	r3, [pc, #8]	; (8003c34 <HAL_RCC_GetHCLKFreq+0x10>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bc80      	pop	{r7}
 8003c32:	4770      	bx	lr
 8003c34:	20000000 	.word	0x20000000

08003c38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c3c:	f7ff fff2 	bl	8003c24 <HAL_RCC_GetHCLKFreq>
 8003c40:	4602      	mov	r2, r0
 8003c42:	4b05      	ldr	r3, [pc, #20]	; (8003c58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	0a1b      	lsrs	r3, r3, #8
 8003c48:	f003 0307 	and.w	r3, r3, #7
 8003c4c:	4903      	ldr	r1, [pc, #12]	; (8003c5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c4e:	5ccb      	ldrb	r3, [r1, r3]
 8003c50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	40021000 	.word	0x40021000
 8003c5c:	08009458 	.word	0x08009458

08003c60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c64:	f7ff ffde 	bl	8003c24 <HAL_RCC_GetHCLKFreq>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	4b05      	ldr	r3, [pc, #20]	; (8003c80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	0adb      	lsrs	r3, r3, #11
 8003c70:	f003 0307 	and.w	r3, r3, #7
 8003c74:	4903      	ldr	r1, [pc, #12]	; (8003c84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c76:	5ccb      	ldrb	r3, [r1, r3]
 8003c78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	40021000 	.word	0x40021000
 8003c84:	08009458 	.word	0x08009458

08003c88 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b085      	sub	sp, #20
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003c90:	4b0a      	ldr	r3, [pc, #40]	; (8003cbc <RCC_Delay+0x34>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a0a      	ldr	r2, [pc, #40]	; (8003cc0 <RCC_Delay+0x38>)
 8003c96:	fba2 2303 	umull	r2, r3, r2, r3
 8003c9a:	0a5b      	lsrs	r3, r3, #9
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	fb02 f303 	mul.w	r3, r2, r3
 8003ca2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003ca4:	bf00      	nop
  }
  while (Delay --);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	1e5a      	subs	r2, r3, #1
 8003caa:	60fa      	str	r2, [r7, #12]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d1f9      	bne.n	8003ca4 <RCC_Delay+0x1c>
}
 8003cb0:	bf00      	nop
 8003cb2:	bf00      	nop
 8003cb4:	3714      	adds	r7, #20
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bc80      	pop	{r7}
 8003cba:	4770      	bx	lr
 8003cbc:	20000000 	.word	0x20000000
 8003cc0:	10624dd3 	.word	0x10624dd3

08003cc4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b086      	sub	sp, #24
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	613b      	str	r3, [r7, #16]
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0301 	and.w	r3, r3, #1
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d07d      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ce4:	4b4f      	ldr	r3, [pc, #316]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ce6:	69db      	ldr	r3, [r3, #28]
 8003ce8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d10d      	bne.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cf0:	4b4c      	ldr	r3, [pc, #304]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cf2:	69db      	ldr	r3, [r3, #28]
 8003cf4:	4a4b      	ldr	r2, [pc, #300]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cfa:	61d3      	str	r3, [r2, #28]
 8003cfc:	4b49      	ldr	r3, [pc, #292]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cfe:	69db      	ldr	r3, [r3, #28]
 8003d00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d04:	60bb      	str	r3, [r7, #8]
 8003d06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d0c:	4b46      	ldr	r3, [pc, #280]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d118      	bne.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d18:	4b43      	ldr	r3, [pc, #268]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a42      	ldr	r2, [pc, #264]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d22:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d24:	f7fc fe74 	bl	8000a10 <HAL_GetTick>
 8003d28:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d2a:	e008      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d2c:	f7fc fe70 	bl	8000a10 <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	2b64      	cmp	r3, #100	; 0x64
 8003d38:	d901      	bls.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e06d      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d3e:	4b3a      	ldr	r3, [pc, #232]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d0f0      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d4a:	4b36      	ldr	r3, [pc, #216]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d4c:	6a1b      	ldr	r3, [r3, #32]
 8003d4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d52:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d02e      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d62:	68fa      	ldr	r2, [r7, #12]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d027      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d68:	4b2e      	ldr	r3, [pc, #184]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d6a:	6a1b      	ldr	r3, [r3, #32]
 8003d6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d70:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d72:	4b2e      	ldr	r3, [pc, #184]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003d74:	2201      	movs	r2, #1
 8003d76:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d78:	4b2c      	ldr	r3, [pc, #176]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003d7e:	4a29      	ldr	r2, [pc, #164]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f003 0301 	and.w	r3, r3, #1
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d014      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d8e:	f7fc fe3f 	bl	8000a10 <HAL_GetTick>
 8003d92:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d94:	e00a      	b.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d96:	f7fc fe3b 	bl	8000a10 <HAL_GetTick>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d901      	bls.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	e036      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dac:	4b1d      	ldr	r3, [pc, #116]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dae:	6a1b      	ldr	r3, [r3, #32]
 8003db0:	f003 0302 	and.w	r3, r3, #2
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d0ee      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003db8:	4b1a      	ldr	r3, [pc, #104]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dba:	6a1b      	ldr	r3, [r3, #32]
 8003dbc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	4917      	ldr	r1, [pc, #92]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003dca:	7dfb      	ldrb	r3, [r7, #23]
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d105      	bne.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dd0:	4b14      	ldr	r3, [pc, #80]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dd2:	69db      	ldr	r3, [r3, #28]
 8003dd4:	4a13      	ldr	r2, [pc, #76]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dda:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0302 	and.w	r3, r3, #2
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d008      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003de8:	4b0e      	ldr	r3, [pc, #56]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	490b      	ldr	r1, [pc, #44]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0310 	and.w	r3, r3, #16
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d008      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e06:	4b07      	ldr	r3, [pc, #28]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	4904      	ldr	r1, [pc, #16]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3718      	adds	r7, #24
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	40021000 	.word	0x40021000
 8003e28:	40007000 	.word	0x40007000
 8003e2c:	42420440 	.word	0x42420440

08003e30 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003e30:	b590      	push	{r4, r7, lr}
 8003e32:	b08d      	sub	sp, #52	; 0x34
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003e38:	4b5a      	ldr	r3, [pc, #360]	; (8003fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003e3a:	f107 040c 	add.w	r4, r7, #12
 8003e3e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003e44:	f240 2301 	movw	r3, #513	; 0x201
 8003e48:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e4e:	2300      	movs	r3, #0
 8003e50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e52:	2300      	movs	r3, #0
 8003e54:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003e56:	2300      	movs	r3, #0
 8003e58:	61fb      	str	r3, [r7, #28]
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2b10      	cmp	r3, #16
 8003e62:	d00a      	beq.n	8003e7a <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2b10      	cmp	r3, #16
 8003e68:	f200 8091 	bhi.w	8003f8e <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d04c      	beq.n	8003f0c <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d07c      	beq.n	8003f72 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003e78:	e089      	b.n	8003f8e <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 8003e7a:	4b4b      	ldr	r3, [pc, #300]	; (8003fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003e80:	4b49      	ldr	r3, [pc, #292]	; (8003fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	f000 8082 	beq.w	8003f92 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	0c9b      	lsrs	r3, r3, #18
 8003e92:	f003 030f 	and.w	r3, r3, #15
 8003e96:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003e9a:	4413      	add	r3, r2
 8003e9c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003ea0:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d018      	beq.n	8003ede <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003eac:	4b3e      	ldr	r3, [pc, #248]	; (8003fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	0c5b      	lsrs	r3, r3, #17
 8003eb2:	f003 0301 	and.w	r3, r3, #1
 8003eb6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003eba:	4413      	add	r3, r2
 8003ebc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003ec0:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d00d      	beq.n	8003ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003ecc:	4a37      	ldr	r2, [pc, #220]	; (8003fac <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8003ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ed4:	6a3b      	ldr	r3, [r7, #32]
 8003ed6:	fb02 f303 	mul.w	r3, r2, r3
 8003eda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003edc:	e004      	b.n	8003ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003ede:	6a3b      	ldr	r3, [r7, #32]
 8003ee0:	4a33      	ldr	r2, [pc, #204]	; (8003fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8003ee2:	fb02 f303 	mul.w	r3, r2, r3
 8003ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003ee8:	4b2f      	ldr	r3, [pc, #188]	; (8003fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ef0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ef4:	d102      	bne.n	8003efc <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8003ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003efa:	e04a      	b.n	8003f92 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8003efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003efe:	005b      	lsls	r3, r3, #1
 8003f00:	4a2c      	ldr	r2, [pc, #176]	; (8003fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8003f02:	fba2 2303 	umull	r2, r3, r2, r3
 8003f06:	085b      	lsrs	r3, r3, #1
 8003f08:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003f0a:	e042      	b.n	8003f92 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8003f0c:	4b26      	ldr	r3, [pc, #152]	; (8003fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003f0e:	6a1b      	ldr	r3, [r3, #32]
 8003f10:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f1c:	d108      	bne.n	8003f30 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	f003 0302 	and.w	r3, r3, #2
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d003      	beq.n	8003f30 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8003f28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f2e:	e01f      	b.n	8003f70 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f3a:	d109      	bne.n	8003f50 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8003f3c:	4b1a      	ldr	r3, [pc, #104]	; (8003fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f40:	f003 0302 	and.w	r3, r3, #2
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d003      	beq.n	8003f50 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8003f48:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003f4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f4e:	e00f      	b.n	8003f70 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f5a:	d11c      	bne.n	8003f96 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8003f5c:	4b12      	ldr	r3, [pc, #72]	; (8003fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d016      	beq.n	8003f96 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8003f68:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003f6c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003f6e:	e012      	b.n	8003f96 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8003f70:	e011      	b.n	8003f96 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003f72:	f7ff fe75 	bl	8003c60 <HAL_RCC_GetPCLK2Freq>
 8003f76:	4602      	mov	r2, r0
 8003f78:	4b0b      	ldr	r3, [pc, #44]	; (8003fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	0b9b      	lsrs	r3, r3, #14
 8003f7e:	f003 0303 	and.w	r3, r3, #3
 8003f82:	3301      	adds	r3, #1
 8003f84:	005b      	lsls	r3, r3, #1
 8003f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f8a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003f8c:	e004      	b.n	8003f98 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8003f8e:	bf00      	nop
 8003f90:	e002      	b.n	8003f98 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8003f92:	bf00      	nop
 8003f94:	e000      	b.n	8003f98 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8003f96:	bf00      	nop
    }
  }
  return (frequency);
 8003f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3734      	adds	r7, #52	; 0x34
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd90      	pop	{r4, r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	080093f4 	.word	0x080093f4
 8003fa8:	40021000 	.word	0x40021000
 8003fac:	007a1200 	.word	0x007a1200
 8003fb0:	003d0900 	.word	0x003d0900
 8003fb4:	aaaaaaab 	.word	0xaaaaaaab

08003fb8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d101      	bne.n	8003fca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e03f      	b.n	800404a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d106      	bne.n	8003fe4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f7fc fbae 	bl	8000740 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2224      	movs	r2, #36	; 0x24
 8003fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68da      	ldr	r2, [r3, #12]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ffa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f000 fc85 	bl	800490c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	691a      	ldr	r2, [r3, #16]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004010:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	695a      	ldr	r2, [r3, #20]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004020:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68da      	ldr	r2, [r3, #12]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004030:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2220      	movs	r2, #32
 800403c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2220      	movs	r2, #32
 8004044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	3708      	adds	r7, #8
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}

08004052 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004052:	b580      	push	{r7, lr}
 8004054:	b08a      	sub	sp, #40	; 0x28
 8004056:	af02      	add	r7, sp, #8
 8004058:	60f8      	str	r0, [r7, #12]
 800405a:	60b9      	str	r1, [r7, #8]
 800405c:	603b      	str	r3, [r7, #0]
 800405e:	4613      	mov	r3, r2
 8004060:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004062:	2300      	movs	r3, #0
 8004064:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2b20      	cmp	r3, #32
 8004070:	d17c      	bne.n	800416c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d002      	beq.n	800407e <HAL_UART_Transmit+0x2c>
 8004078:	88fb      	ldrh	r3, [r7, #6]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d101      	bne.n	8004082 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e075      	b.n	800416e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004088:	2b01      	cmp	r3, #1
 800408a:	d101      	bne.n	8004090 <HAL_UART_Transmit+0x3e>
 800408c:	2302      	movs	r3, #2
 800408e:	e06e      	b.n	800416e <HAL_UART_Transmit+0x11c>
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2200      	movs	r2, #0
 800409c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2221      	movs	r2, #33	; 0x21
 80040a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040a6:	f7fc fcb3 	bl	8000a10 <HAL_GetTick>
 80040aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	88fa      	ldrh	r2, [r7, #6]
 80040b0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	88fa      	ldrh	r2, [r7, #6]
 80040b6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040c0:	d108      	bne.n	80040d4 <HAL_UART_Transmit+0x82>
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d104      	bne.n	80040d4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80040ca:	2300      	movs	r3, #0
 80040cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	61bb      	str	r3, [r7, #24]
 80040d2:	e003      	b.n	80040dc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040d8:	2300      	movs	r3, #0
 80040da:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80040e4:	e02a      	b.n	800413c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	9300      	str	r3, [sp, #0]
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	2200      	movs	r2, #0
 80040ee:	2180      	movs	r1, #128	; 0x80
 80040f0:	68f8      	ldr	r0, [r7, #12]
 80040f2:	f000 fa38 	bl	8004566 <UART_WaitOnFlagUntilTimeout>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d001      	beq.n	8004100 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80040fc:	2303      	movs	r3, #3
 80040fe:	e036      	b.n	800416e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d10b      	bne.n	800411e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	881b      	ldrh	r3, [r3, #0]
 800410a:	461a      	mov	r2, r3
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004114:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	3302      	adds	r3, #2
 800411a:	61bb      	str	r3, [r7, #24]
 800411c:	e007      	b.n	800412e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	781a      	ldrb	r2, [r3, #0]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	3301      	adds	r3, #1
 800412c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004132:	b29b      	uxth	r3, r3
 8004134:	3b01      	subs	r3, #1
 8004136:	b29a      	uxth	r2, r3
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004140:	b29b      	uxth	r3, r3
 8004142:	2b00      	cmp	r3, #0
 8004144:	d1cf      	bne.n	80040e6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	9300      	str	r3, [sp, #0]
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	2200      	movs	r2, #0
 800414e:	2140      	movs	r1, #64	; 0x40
 8004150:	68f8      	ldr	r0, [r7, #12]
 8004152:	f000 fa08 	bl	8004566 <UART_WaitOnFlagUntilTimeout>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d001      	beq.n	8004160 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	e006      	b.n	800416e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2220      	movs	r2, #32
 8004164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004168:	2300      	movs	r3, #0
 800416a:	e000      	b.n	800416e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800416c:	2302      	movs	r3, #2
  }
}
 800416e:	4618      	mov	r0, r3
 8004170:	3720      	adds	r7, #32
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}

08004176 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004176:	b580      	push	{r7, lr}
 8004178:	b084      	sub	sp, #16
 800417a:	af00      	add	r7, sp, #0
 800417c:	60f8      	str	r0, [r7, #12]
 800417e:	60b9      	str	r1, [r7, #8]
 8004180:	4613      	mov	r3, r2
 8004182:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800418a:	b2db      	uxtb	r3, r3
 800418c:	2b20      	cmp	r3, #32
 800418e:	d11d      	bne.n	80041cc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d002      	beq.n	800419c <HAL_UART_Receive_IT+0x26>
 8004196:	88fb      	ldrh	r3, [r7, #6]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d101      	bne.n	80041a0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e016      	b.n	80041ce <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d101      	bne.n	80041ae <HAL_UART_Receive_IT+0x38>
 80041aa:	2302      	movs	r3, #2
 80041ac:	e00f      	b.n	80041ce <HAL_UART_Receive_IT+0x58>
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2201      	movs	r2, #1
 80041b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2200      	movs	r2, #0
 80041ba:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80041bc:	88fb      	ldrh	r3, [r7, #6]
 80041be:	461a      	mov	r2, r3
 80041c0:	68b9      	ldr	r1, [r7, #8]
 80041c2:	68f8      	ldr	r0, [r7, #12]
 80041c4:	f000 fa19 	bl	80045fa <UART_Start_Receive_IT>
 80041c8:	4603      	mov	r3, r0
 80041ca:	e000      	b.n	80041ce <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80041cc:	2302      	movs	r3, #2
  }
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3710      	adds	r7, #16
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
	...

080041d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b08a      	sub	sp, #40	; 0x28
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	695b      	ldr	r3, [r3, #20]
 80041f6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80041f8:	2300      	movs	r3, #0
 80041fa:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80041fc:	2300      	movs	r3, #0
 80041fe:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004202:	f003 030f 	and.w	r3, r3, #15
 8004206:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d10d      	bne.n	800422a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800420e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004210:	f003 0320 	and.w	r3, r3, #32
 8004214:	2b00      	cmp	r3, #0
 8004216:	d008      	beq.n	800422a <HAL_UART_IRQHandler+0x52>
 8004218:	6a3b      	ldr	r3, [r7, #32]
 800421a:	f003 0320 	and.w	r3, r3, #32
 800421e:	2b00      	cmp	r3, #0
 8004220:	d003      	beq.n	800422a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 fac9 	bl	80047ba <UART_Receive_IT>
      return;
 8004228:	e17b      	b.n	8004522 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800422a:	69bb      	ldr	r3, [r7, #24]
 800422c:	2b00      	cmp	r3, #0
 800422e:	f000 80b1 	beq.w	8004394 <HAL_UART_IRQHandler+0x1bc>
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	f003 0301 	and.w	r3, r3, #1
 8004238:	2b00      	cmp	r3, #0
 800423a:	d105      	bne.n	8004248 <HAL_UART_IRQHandler+0x70>
 800423c:	6a3b      	ldr	r3, [r7, #32]
 800423e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004242:	2b00      	cmp	r3, #0
 8004244:	f000 80a6 	beq.w	8004394 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424a:	f003 0301 	and.w	r3, r3, #1
 800424e:	2b00      	cmp	r3, #0
 8004250:	d00a      	beq.n	8004268 <HAL_UART_IRQHandler+0x90>
 8004252:	6a3b      	ldr	r3, [r7, #32]
 8004254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004258:	2b00      	cmp	r3, #0
 800425a:	d005      	beq.n	8004268 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004260:	f043 0201 	orr.w	r2, r3, #1
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426a:	f003 0304 	and.w	r3, r3, #4
 800426e:	2b00      	cmp	r3, #0
 8004270:	d00a      	beq.n	8004288 <HAL_UART_IRQHandler+0xb0>
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	f003 0301 	and.w	r3, r3, #1
 8004278:	2b00      	cmp	r3, #0
 800427a:	d005      	beq.n	8004288 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004280:	f043 0202 	orr.w	r2, r3, #2
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428a:	f003 0302 	and.w	r3, r3, #2
 800428e:	2b00      	cmp	r3, #0
 8004290:	d00a      	beq.n	80042a8 <HAL_UART_IRQHandler+0xd0>
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	f003 0301 	and.w	r3, r3, #1
 8004298:	2b00      	cmp	r3, #0
 800429a:	d005      	beq.n	80042a8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a0:	f043 0204 	orr.w	r2, r3, #4
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80042a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042aa:	f003 0308 	and.w	r3, r3, #8
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d00f      	beq.n	80042d2 <HAL_UART_IRQHandler+0xfa>
 80042b2:	6a3b      	ldr	r3, [r7, #32]
 80042b4:	f003 0320 	and.w	r3, r3, #32
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d104      	bne.n	80042c6 <HAL_UART_IRQHandler+0xee>
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	f003 0301 	and.w	r3, r3, #1
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d005      	beq.n	80042d2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ca:	f043 0208 	orr.w	r2, r3, #8
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	f000 811e 	beq.w	8004518 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042de:	f003 0320 	and.w	r3, r3, #32
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d007      	beq.n	80042f6 <HAL_UART_IRQHandler+0x11e>
 80042e6:	6a3b      	ldr	r3, [r7, #32]
 80042e8:	f003 0320 	and.w	r3, r3, #32
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d002      	beq.n	80042f6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f000 fa62 	bl	80047ba <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	695b      	ldr	r3, [r3, #20]
 80042fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004300:	2b00      	cmp	r3, #0
 8004302:	bf14      	ite	ne
 8004304:	2301      	movne	r3, #1
 8004306:	2300      	moveq	r3, #0
 8004308:	b2db      	uxtb	r3, r3
 800430a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004310:	f003 0308 	and.w	r3, r3, #8
 8004314:	2b00      	cmp	r3, #0
 8004316:	d102      	bne.n	800431e <HAL_UART_IRQHandler+0x146>
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d031      	beq.n	8004382 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 f9a4 	bl	800466c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	695b      	ldr	r3, [r3, #20]
 800432a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800432e:	2b00      	cmp	r3, #0
 8004330:	d023      	beq.n	800437a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	695a      	ldr	r2, [r3, #20]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004340:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004346:	2b00      	cmp	r3, #0
 8004348:	d013      	beq.n	8004372 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800434e:	4a76      	ldr	r2, [pc, #472]	; (8004528 <HAL_UART_IRQHandler+0x350>)
 8004350:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004356:	4618      	mov	r0, r3
 8004358:	f7fd f9a8 	bl	80016ac <HAL_DMA_Abort_IT>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d016      	beq.n	8004390 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800436c:	4610      	mov	r0, r2
 800436e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004370:	e00e      	b.n	8004390 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 f8e3 	bl	800453e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004378:	e00a      	b.n	8004390 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f000 f8df 	bl	800453e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004380:	e006      	b.n	8004390 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 f8db 	bl	800453e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800438e:	e0c3      	b.n	8004518 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004390:	bf00      	nop
    return;
 8004392:	e0c1      	b.n	8004518 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004398:	2b01      	cmp	r3, #1
 800439a:	f040 80a1 	bne.w	80044e0 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800439e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a0:	f003 0310 	and.w	r3, r3, #16
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	f000 809b 	beq.w	80044e0 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80043aa:	6a3b      	ldr	r3, [r7, #32]
 80043ac:	f003 0310 	and.w	r3, r3, #16
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	f000 8095 	beq.w	80044e0 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80043b6:	2300      	movs	r3, #0
 80043b8:	60fb      	str	r3, [r7, #12]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	60fb      	str	r3, [r7, #12]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	60fb      	str	r3, [r7, #12]
 80043ca:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	695b      	ldr	r3, [r3, #20]
 80043d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d04e      	beq.n	8004478 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80043e4:	8a3b      	ldrh	r3, [r7, #16]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	f000 8098 	beq.w	800451c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80043f0:	8a3a      	ldrh	r2, [r7, #16]
 80043f2:	429a      	cmp	r2, r3
 80043f4:	f080 8092 	bcs.w	800451c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	8a3a      	ldrh	r2, [r7, #16]
 80043fc:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004402:	699b      	ldr	r3, [r3, #24]
 8004404:	2b20      	cmp	r3, #32
 8004406:	d02b      	beq.n	8004460 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	68da      	ldr	r2, [r3, #12]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004416:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	695a      	ldr	r2, [r3, #20]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f022 0201 	bic.w	r2, r2, #1
 8004426:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	695a      	ldr	r2, [r3, #20]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004436:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2220      	movs	r2, #32
 800443c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	68da      	ldr	r2, [r3, #12]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f022 0210 	bic.w	r2, r2, #16
 8004454:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800445a:	4618      	mov	r0, r3
 800445c:	f7fd f8eb 	bl	8001636 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004468:	b29b      	uxth	r3, r3
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	b29b      	uxth	r3, r3
 800446e:	4619      	mov	r1, r3
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f000 f86d 	bl	8004550 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004476:	e051      	b.n	800451c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004480:	b29b      	uxth	r3, r3
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800448a:	b29b      	uxth	r3, r3
 800448c:	2b00      	cmp	r3, #0
 800448e:	d047      	beq.n	8004520 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004490:	8a7b      	ldrh	r3, [r7, #18]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d044      	beq.n	8004520 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68da      	ldr	r2, [r3, #12]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80044a4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	695a      	ldr	r2, [r3, #20]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f022 0201 	bic.w	r2, r2, #1
 80044b4:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2220      	movs	r2, #32
 80044ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68da      	ldr	r2, [r3, #12]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f022 0210 	bic.w	r2, r2, #16
 80044d2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80044d4:	8a7b      	ldrh	r3, [r7, #18]
 80044d6:	4619      	mov	r1, r3
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f000 f839 	bl	8004550 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80044de:	e01f      	b.n	8004520 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80044e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d008      	beq.n	80044fc <HAL_UART_IRQHandler+0x324>
 80044ea:	6a3b      	ldr	r3, [r7, #32]
 80044ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d003      	beq.n	80044fc <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f000 f8f9 	bl	80046ec <UART_Transmit_IT>
    return;
 80044fa:	e012      	b.n	8004522 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80044fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004502:	2b00      	cmp	r3, #0
 8004504:	d00d      	beq.n	8004522 <HAL_UART_IRQHandler+0x34a>
 8004506:	6a3b      	ldr	r3, [r7, #32]
 8004508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800450c:	2b00      	cmp	r3, #0
 800450e:	d008      	beq.n	8004522 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f000 f93a 	bl	800478a <UART_EndTransmit_IT>
    return;
 8004516:	e004      	b.n	8004522 <HAL_UART_IRQHandler+0x34a>
    return;
 8004518:	bf00      	nop
 800451a:	e002      	b.n	8004522 <HAL_UART_IRQHandler+0x34a>
      return;
 800451c:	bf00      	nop
 800451e:	e000      	b.n	8004522 <HAL_UART_IRQHandler+0x34a>
      return;
 8004520:	bf00      	nop
  }
}
 8004522:	3728      	adds	r7, #40	; 0x28
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	080046c5 	.word	0x080046c5

0800452c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004534:	bf00      	nop
 8004536:	370c      	adds	r7, #12
 8004538:	46bd      	mov	sp, r7
 800453a:	bc80      	pop	{r7}
 800453c:	4770      	bx	lr

0800453e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800453e:	b480      	push	{r7}
 8004540:	b083      	sub	sp, #12
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004546:	bf00      	nop
 8004548:	370c      	adds	r7, #12
 800454a:	46bd      	mov	sp, r7
 800454c:	bc80      	pop	{r7}
 800454e:	4770      	bx	lr

08004550 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	460b      	mov	r3, r1
 800455a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800455c:	bf00      	nop
 800455e:	370c      	adds	r7, #12
 8004560:	46bd      	mov	sp, r7
 8004562:	bc80      	pop	{r7}
 8004564:	4770      	bx	lr

08004566 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004566:	b580      	push	{r7, lr}
 8004568:	b084      	sub	sp, #16
 800456a:	af00      	add	r7, sp, #0
 800456c:	60f8      	str	r0, [r7, #12]
 800456e:	60b9      	str	r1, [r7, #8]
 8004570:	603b      	str	r3, [r7, #0]
 8004572:	4613      	mov	r3, r2
 8004574:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004576:	e02c      	b.n	80045d2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004578:	69bb      	ldr	r3, [r7, #24]
 800457a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800457e:	d028      	beq.n	80045d2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d007      	beq.n	8004596 <UART_WaitOnFlagUntilTimeout+0x30>
 8004586:	f7fc fa43 	bl	8000a10 <HAL_GetTick>
 800458a:	4602      	mov	r2, r0
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	69ba      	ldr	r2, [r7, #24]
 8004592:	429a      	cmp	r2, r3
 8004594:	d21d      	bcs.n	80045d2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	68da      	ldr	r2, [r3, #12]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80045a4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	695a      	ldr	r2, [r3, #20]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f022 0201 	bic.w	r2, r2, #1
 80045b4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2220      	movs	r2, #32
 80045ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2220      	movs	r2, #32
 80045c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e00f      	b.n	80045f2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	4013      	ands	r3, r2
 80045dc:	68ba      	ldr	r2, [r7, #8]
 80045de:	429a      	cmp	r2, r3
 80045e0:	bf0c      	ite	eq
 80045e2:	2301      	moveq	r3, #1
 80045e4:	2300      	movne	r3, #0
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	461a      	mov	r2, r3
 80045ea:	79fb      	ldrb	r3, [r7, #7]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d0c3      	beq.n	8004578 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3710      	adds	r7, #16
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}

080045fa <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045fa:	b480      	push	{r7}
 80045fc:	b085      	sub	sp, #20
 80045fe:	af00      	add	r7, sp, #0
 8004600:	60f8      	str	r0, [r7, #12]
 8004602:	60b9      	str	r1, [r7, #8]
 8004604:	4613      	mov	r3, r2
 8004606:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	68ba      	ldr	r2, [r7, #8]
 800460c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	88fa      	ldrh	r2, [r7, #6]
 8004612:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	88fa      	ldrh	r2, [r7, #6]
 8004618:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2200      	movs	r2, #0
 800461e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2222      	movs	r2, #34	; 0x22
 8004624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2200      	movs	r2, #0
 800462c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	68da      	ldr	r2, [r3, #12]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800463e:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	695a      	ldr	r2, [r3, #20]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f042 0201 	orr.w	r2, r2, #1
 800464e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68da      	ldr	r2, [r3, #12]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f042 0220 	orr.w	r2, r2, #32
 800465e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3714      	adds	r7, #20
 8004666:	46bd      	mov	sp, r7
 8004668:	bc80      	pop	{r7}
 800466a:	4770      	bx	lr

0800466c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	68da      	ldr	r2, [r3, #12]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004682:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	695a      	ldr	r2, [r3, #20]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f022 0201 	bic.w	r2, r2, #1
 8004692:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004698:	2b01      	cmp	r3, #1
 800469a:	d107      	bne.n	80046ac <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68da      	ldr	r2, [r3, #12]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f022 0210 	bic.w	r2, r2, #16
 80046aa:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2220      	movs	r2, #32
 80046b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80046ba:	bf00      	nop
 80046bc:	370c      	adds	r7, #12
 80046be:	46bd      	mov	sp, r7
 80046c0:	bc80      	pop	{r7}
 80046c2:	4770      	bx	lr

080046c4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b084      	sub	sp, #16
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2200      	movs	r2, #0
 80046d6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2200      	movs	r2, #0
 80046dc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80046de:	68f8      	ldr	r0, [r7, #12]
 80046e0:	f7ff ff2d 	bl	800453e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046e4:	bf00      	nop
 80046e6:	3710      	adds	r7, #16
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}

080046ec <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b085      	sub	sp, #20
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	2b21      	cmp	r3, #33	; 0x21
 80046fe:	d13e      	bne.n	800477e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004708:	d114      	bne.n	8004734 <UART_Transmit_IT+0x48>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	691b      	ldr	r3, [r3, #16]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d110      	bne.n	8004734 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a1b      	ldr	r3, [r3, #32]
 8004716:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	881b      	ldrh	r3, [r3, #0]
 800471c:	461a      	mov	r2, r3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004726:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6a1b      	ldr	r3, [r3, #32]
 800472c:	1c9a      	adds	r2, r3, #2
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	621a      	str	r2, [r3, #32]
 8004732:	e008      	b.n	8004746 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6a1b      	ldr	r3, [r3, #32]
 8004738:	1c59      	adds	r1, r3, #1
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	6211      	str	r1, [r2, #32]
 800473e:	781a      	ldrb	r2, [r3, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800474a:	b29b      	uxth	r3, r3
 800474c:	3b01      	subs	r3, #1
 800474e:	b29b      	uxth	r3, r3
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	4619      	mov	r1, r3
 8004754:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004756:	2b00      	cmp	r3, #0
 8004758:	d10f      	bne.n	800477a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	68da      	ldr	r2, [r3, #12]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004768:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	68da      	ldr	r2, [r3, #12]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004778:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800477a:	2300      	movs	r3, #0
 800477c:	e000      	b.n	8004780 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800477e:	2302      	movs	r3, #2
  }
}
 8004780:	4618      	mov	r0, r3
 8004782:	3714      	adds	r7, #20
 8004784:	46bd      	mov	sp, r7
 8004786:	bc80      	pop	{r7}
 8004788:	4770      	bx	lr

0800478a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800478a:	b580      	push	{r7, lr}
 800478c:	b082      	sub	sp, #8
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	68da      	ldr	r2, [r3, #12]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047a0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2220      	movs	r2, #32
 80047a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f7ff febe 	bl	800452c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3708      	adds	r7, #8
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}

080047ba <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80047ba:	b580      	push	{r7, lr}
 80047bc:	b086      	sub	sp, #24
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	2b22      	cmp	r3, #34	; 0x22
 80047cc:	f040 8099 	bne.w	8004902 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047d8:	d117      	bne.n	800480a <UART_Receive_IT+0x50>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d113      	bne.n	800480a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80047e2:	2300      	movs	r3, #0
 80047e4:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ea:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047f8:	b29a      	uxth	r2, r3
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004802:	1c9a      	adds	r2, r3, #2
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	629a      	str	r2, [r3, #40]	; 0x28
 8004808:	e026      	b.n	8004858 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800480e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004810:	2300      	movs	r3, #0
 8004812:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800481c:	d007      	beq.n	800482e <UART_Receive_IT+0x74>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d10a      	bne.n	800483c <UART_Receive_IT+0x82>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	691b      	ldr	r3, [r3, #16]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d106      	bne.n	800483c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	b2da      	uxtb	r2, r3
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	701a      	strb	r2, [r3, #0]
 800483a:	e008      	b.n	800484e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	b2db      	uxtb	r3, r3
 8004844:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004848:	b2da      	uxtb	r2, r3
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004852:	1c5a      	adds	r2, r3, #1
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800485c:	b29b      	uxth	r3, r3
 800485e:	3b01      	subs	r3, #1
 8004860:	b29b      	uxth	r3, r3
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	4619      	mov	r1, r3
 8004866:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004868:	2b00      	cmp	r3, #0
 800486a:	d148      	bne.n	80048fe <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68da      	ldr	r2, [r3, #12]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f022 0220 	bic.w	r2, r2, #32
 800487a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	68da      	ldr	r2, [r3, #12]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800488a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	695a      	ldr	r2, [r3, #20]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f022 0201 	bic.w	r2, r2, #1
 800489a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2220      	movs	r2, #32
 80048a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d123      	bne.n	80048f4 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	68da      	ldr	r2, [r3, #12]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f022 0210 	bic.w	r2, r2, #16
 80048c0:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0310 	and.w	r3, r3, #16
 80048cc:	2b10      	cmp	r3, #16
 80048ce:	d10a      	bne.n	80048e6 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80048d0:	2300      	movs	r3, #0
 80048d2:	60fb      	str	r3, [r7, #12]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	60fb      	str	r3, [r7, #12]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	60fb      	str	r3, [r7, #12]
 80048e4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80048ea:	4619      	mov	r1, r3
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f7ff fe2f 	bl	8004550 <HAL_UARTEx_RxEventCallback>
 80048f2:	e002      	b.n	80048fa <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f7fb fe43 	bl	8000580 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80048fa:	2300      	movs	r3, #0
 80048fc:	e002      	b.n	8004904 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80048fe:	2300      	movs	r3, #0
 8004900:	e000      	b.n	8004904 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004902:	2302      	movs	r3, #2
  }
}
 8004904:	4618      	mov	r0, r3
 8004906:	3718      	adds	r7, #24
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}

0800490c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	68da      	ldr	r2, [r3, #12]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	430a      	orrs	r2, r1
 8004928:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	689a      	ldr	r2, [r3, #8]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	431a      	orrs	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	695b      	ldr	r3, [r3, #20]
 8004938:	4313      	orrs	r3, r2
 800493a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004946:	f023 030c 	bic.w	r3, r3, #12
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	6812      	ldr	r2, [r2, #0]
 800494e:	68b9      	ldr	r1, [r7, #8]
 8004950:	430b      	orrs	r3, r1
 8004952:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	695b      	ldr	r3, [r3, #20]
 800495a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	699a      	ldr	r2, [r3, #24]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	430a      	orrs	r2, r1
 8004968:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a2c      	ldr	r2, [pc, #176]	; (8004a20 <UART_SetConfig+0x114>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d103      	bne.n	800497c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004974:	f7ff f974 	bl	8003c60 <HAL_RCC_GetPCLK2Freq>
 8004978:	60f8      	str	r0, [r7, #12]
 800497a:	e002      	b.n	8004982 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800497c:	f7ff f95c 	bl	8003c38 <HAL_RCC_GetPCLK1Freq>
 8004980:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004982:	68fa      	ldr	r2, [r7, #12]
 8004984:	4613      	mov	r3, r2
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	4413      	add	r3, r2
 800498a:	009a      	lsls	r2, r3, #2
 800498c:	441a      	add	r2, r3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	fbb2 f3f3 	udiv	r3, r2, r3
 8004998:	4a22      	ldr	r2, [pc, #136]	; (8004a24 <UART_SetConfig+0x118>)
 800499a:	fba2 2303 	umull	r2, r3, r2, r3
 800499e:	095b      	lsrs	r3, r3, #5
 80049a0:	0119      	lsls	r1, r3, #4
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	4613      	mov	r3, r2
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	4413      	add	r3, r2
 80049aa:	009a      	lsls	r2, r3, #2
 80049ac:	441a      	add	r2, r3
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80049b8:	4b1a      	ldr	r3, [pc, #104]	; (8004a24 <UART_SetConfig+0x118>)
 80049ba:	fba3 0302 	umull	r0, r3, r3, r2
 80049be:	095b      	lsrs	r3, r3, #5
 80049c0:	2064      	movs	r0, #100	; 0x64
 80049c2:	fb00 f303 	mul.w	r3, r0, r3
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	011b      	lsls	r3, r3, #4
 80049ca:	3332      	adds	r3, #50	; 0x32
 80049cc:	4a15      	ldr	r2, [pc, #84]	; (8004a24 <UART_SetConfig+0x118>)
 80049ce:	fba2 2303 	umull	r2, r3, r2, r3
 80049d2:	095b      	lsrs	r3, r3, #5
 80049d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049d8:	4419      	add	r1, r3
 80049da:	68fa      	ldr	r2, [r7, #12]
 80049dc:	4613      	mov	r3, r2
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	4413      	add	r3, r2
 80049e2:	009a      	lsls	r2, r3, #2
 80049e4:	441a      	add	r2, r3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80049f0:	4b0c      	ldr	r3, [pc, #48]	; (8004a24 <UART_SetConfig+0x118>)
 80049f2:	fba3 0302 	umull	r0, r3, r3, r2
 80049f6:	095b      	lsrs	r3, r3, #5
 80049f8:	2064      	movs	r0, #100	; 0x64
 80049fa:	fb00 f303 	mul.w	r3, r0, r3
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	011b      	lsls	r3, r3, #4
 8004a02:	3332      	adds	r3, #50	; 0x32
 8004a04:	4a07      	ldr	r2, [pc, #28]	; (8004a24 <UART_SetConfig+0x118>)
 8004a06:	fba2 2303 	umull	r2, r3, r2, r3
 8004a0a:	095b      	lsrs	r3, r3, #5
 8004a0c:	f003 020f 	and.w	r2, r3, #15
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	440a      	add	r2, r1
 8004a16:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004a18:	bf00      	nop
 8004a1a:	3710      	adds	r7, #16
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	40013800 	.word	0x40013800
 8004a24:	51eb851f 	.word	0x51eb851f

08004a28 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004a28:	b084      	sub	sp, #16
 8004a2a:	b480      	push	{r7}
 8004a2c:	b083      	sub	sp, #12
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]
 8004a32:	f107 0014 	add.w	r0, r7, #20
 8004a36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004a3a:	2300      	movs	r3, #0
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	370c      	adds	r7, #12
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bc80      	pop	{r7}
 8004a44:	b004      	add	sp, #16
 8004a46:	4770      	bx	lr

08004a48 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b085      	sub	sp, #20
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004a58:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004a5c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	b29a      	uxth	r2, r3
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3714      	adds	r7, #20
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bc80      	pop	{r7}
 8004a72:	4770      	bx	lr

08004a74 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b085      	sub	sp, #20
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004a7c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004a80:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004a88:	b29a      	uxth	r2, r3
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	43db      	mvns	r3, r3
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	4013      	ands	r3, r2
 8004a94:	b29a      	uxth	r2, r3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3714      	adds	r7, #20
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bc80      	pop	{r7}
 8004aa6:	4770      	bx	lr

08004aa8 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b083      	sub	sp, #12
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	460b      	mov	r3, r1
 8004ab2:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	370c      	adds	r7, #12
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bc80      	pop	{r7}
 8004abe:	4770      	bx	lr

08004ac0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004ac0:	b084      	sub	sp, #16
 8004ac2:	b480      	push	{r7}
 8004ac4:	b083      	sub	sp, #12
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
 8004aca:	f107 0014 	add.w	r0, r7, #20
 8004ace:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004af2:	2300      	movs	r3, #0
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	370c      	adds	r7, #12
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bc80      	pop	{r7}
 8004afc:	b004      	add	sp, #16
 8004afe:	4770      	bx	lr

08004b00 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b09b      	sub	sp, #108	; 0x6c
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	4413      	add	r3, r2
 8004b1a:	881b      	ldrh	r3, [r3, #0]
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b26:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	78db      	ldrb	r3, [r3, #3]
 8004b2e:	2b03      	cmp	r3, #3
 8004b30:	d81f      	bhi.n	8004b72 <USB_ActivateEndpoint+0x72>
 8004b32:	a201      	add	r2, pc, #4	; (adr r2, 8004b38 <USB_ActivateEndpoint+0x38>)
 8004b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b38:	08004b49 	.word	0x08004b49
 8004b3c:	08004b65 	.word	0x08004b65
 8004b40:	08004b7b 	.word	0x08004b7b
 8004b44:	08004b57 	.word	0x08004b57
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004b48:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004b4c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b50:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004b54:	e012      	b.n	8004b7c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004b56:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004b5a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004b5e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004b62:	e00b      	b.n	8004b7c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004b64:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004b68:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b6c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004b70:	e004      	b.n	8004b7c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004b78:	e000      	b.n	8004b7c <USB_ActivateEndpoint+0x7c>
      break;
 8004b7a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	781b      	ldrb	r3, [r3, #0]
 8004b82:	009b      	lsls	r3, r3, #2
 8004b84:	441a      	add	r2, r3
 8004b86:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004b8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	4413      	add	r3, r2
 8004ba8:	881b      	ldrh	r3, [r3, #0]
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bb4:	b29a      	uxth	r2, r3
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	781b      	ldrb	r3, [r3, #0]
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	441a      	add	r2, r3
 8004bcc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004bd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	7b1b      	ldrb	r3, [r3, #12]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	f040 8149 	bne.w	8004e80 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	785b      	ldrb	r3, [r3, #1]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	f000 8084 	beq.w	8004d00 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	617b      	str	r3, [r7, #20]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	461a      	mov	r2, r3
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	4413      	add	r3, r2
 8004c0a:	617b      	str	r3, [r7, #20]
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	011a      	lsls	r2, r3, #4
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	4413      	add	r3, r2
 8004c16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c1a:	613b      	str	r3, [r7, #16]
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	88db      	ldrh	r3, [r3, #6]
 8004c20:	085b      	lsrs	r3, r3, #1
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	005b      	lsls	r3, r3, #1
 8004c26:	b29a      	uxth	r2, r3
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	781b      	ldrb	r3, [r3, #0]
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	4413      	add	r3, r2
 8004c36:	881b      	ldrh	r3, [r3, #0]
 8004c38:	81fb      	strh	r3, [r7, #14]
 8004c3a:	89fb      	ldrh	r3, [r7, #14]
 8004c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d01b      	beq.n	8004c7c <USB_ActivateEndpoint+0x17c>
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	4413      	add	r3, r2
 8004c4e:	881b      	ldrh	r3, [r3, #0]
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c5a:	81bb      	strh	r3, [r7, #12]
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	441a      	add	r2, r3
 8004c66:	89bb      	ldrh	r3, [r7, #12]
 8004c68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c74:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	78db      	ldrb	r3, [r3, #3]
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d020      	beq.n	8004cc6 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	4413      	add	r3, r2
 8004c8e:	881b      	ldrh	r3, [r3, #0]
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c9a:	813b      	strh	r3, [r7, #8]
 8004c9c:	893b      	ldrh	r3, [r7, #8]
 8004c9e:	f083 0320 	eor.w	r3, r3, #32
 8004ca2:	813b      	strh	r3, [r7, #8]
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	441a      	add	r2, r3
 8004cae:	893b      	ldrh	r3, [r7, #8]
 8004cb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	8013      	strh	r3, [r2, #0]
 8004cc4:	e27f      	b.n	80051c6 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	4413      	add	r3, r2
 8004cd0:	881b      	ldrh	r3, [r3, #0]
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cdc:	817b      	strh	r3, [r7, #10]
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	441a      	add	r2, r3
 8004ce8:	897b      	ldrh	r3, [r7, #10]
 8004cea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	8013      	strh	r3, [r2, #0]
 8004cfe:	e262      	b.n	80051c6 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d10:	4413      	add	r3, r2
 8004d12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	011a      	lsls	r2, r3, #4
 8004d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d1c:	4413      	add	r3, r2
 8004d1e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004d22:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	88db      	ldrh	r3, [r3, #6]
 8004d28:	085b      	lsrs	r3, r3, #1
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	005b      	lsls	r3, r3, #1
 8004d2e:	b29a      	uxth	r2, r3
 8004d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d32:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	627b      	str	r3, [r7, #36]	; 0x24
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	461a      	mov	r2, r3
 8004d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d44:	4413      	add	r3, r2
 8004d46:	627b      	str	r3, [r7, #36]	; 0x24
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	011a      	lsls	r2, r3, #4
 8004d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d50:	4413      	add	r3, r2
 8004d52:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004d56:	623b      	str	r3, [r7, #32]
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	691b      	ldr	r3, [r3, #16]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d112      	bne.n	8004d86 <USB_ActivateEndpoint+0x286>
 8004d60:	6a3b      	ldr	r3, [r7, #32]
 8004d62:	881b      	ldrh	r3, [r3, #0]
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004d6a:	b29a      	uxth	r2, r3
 8004d6c:	6a3b      	ldr	r3, [r7, #32]
 8004d6e:	801a      	strh	r2, [r3, #0]
 8004d70:	6a3b      	ldr	r3, [r7, #32]
 8004d72:	881b      	ldrh	r3, [r3, #0]
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d7e:	b29a      	uxth	r2, r3
 8004d80:	6a3b      	ldr	r3, [r7, #32]
 8004d82:	801a      	strh	r2, [r3, #0]
 8004d84:	e02f      	b.n	8004de6 <USB_ActivateEndpoint+0x2e6>
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	2b3e      	cmp	r3, #62	; 0x3e
 8004d8c:	d813      	bhi.n	8004db6 <USB_ActivateEndpoint+0x2b6>
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	691b      	ldr	r3, [r3, #16]
 8004d92:	085b      	lsrs	r3, r3, #1
 8004d94:	663b      	str	r3, [r7, #96]	; 0x60
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	f003 0301 	and.w	r3, r3, #1
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d002      	beq.n	8004da8 <USB_ActivateEndpoint+0x2a8>
 8004da2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004da4:	3301      	adds	r3, #1
 8004da6:	663b      	str	r3, [r7, #96]	; 0x60
 8004da8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	029b      	lsls	r3, r3, #10
 8004dae:	b29a      	uxth	r2, r3
 8004db0:	6a3b      	ldr	r3, [r7, #32]
 8004db2:	801a      	strh	r2, [r3, #0]
 8004db4:	e017      	b.n	8004de6 <USB_ActivateEndpoint+0x2e6>
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	095b      	lsrs	r3, r3, #5
 8004dbc:	663b      	str	r3, [r7, #96]	; 0x60
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	f003 031f 	and.w	r3, r3, #31
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d102      	bne.n	8004dd0 <USB_ActivateEndpoint+0x2d0>
 8004dca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004dcc:	3b01      	subs	r3, #1
 8004dce:	663b      	str	r3, [r7, #96]	; 0x60
 8004dd0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	029b      	lsls	r3, r3, #10
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ddc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004de0:	b29a      	uxth	r2, r3
 8004de2:	6a3b      	ldr	r3, [r7, #32]
 8004de4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	4413      	add	r3, r2
 8004df0:	881b      	ldrh	r3, [r3, #0]
 8004df2:	83fb      	strh	r3, [r7, #30]
 8004df4:	8bfb      	ldrh	r3, [r7, #30]
 8004df6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d01b      	beq.n	8004e36 <USB_ActivateEndpoint+0x336>
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	4413      	add	r3, r2
 8004e08:	881b      	ldrh	r3, [r3, #0]
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e14:	83bb      	strh	r3, [r7, #28]
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	441a      	add	r2, r3
 8004e20:	8bbb      	ldrh	r3, [r7, #28]
 8004e22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	4413      	add	r3, r2
 8004e40:	881b      	ldrh	r3, [r3, #0]
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e4c:	837b      	strh	r3, [r7, #26]
 8004e4e:	8b7b      	ldrh	r3, [r7, #26]
 8004e50:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004e54:	837b      	strh	r3, [r7, #26]
 8004e56:	8b7b      	ldrh	r3, [r7, #26]
 8004e58:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004e5c:	837b      	strh	r3, [r7, #26]
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	441a      	add	r2, r3
 8004e68:	8b7b      	ldrh	r3, [r7, #26]
 8004e6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	8013      	strh	r3, [r2, #0]
 8004e7e:	e1a2      	b.n	80051c6 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	4413      	add	r3, r2
 8004e8a:	881b      	ldrh	r3, [r3, #0]
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e96:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	441a      	add	r2, r3
 8004ea4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004ea8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004eac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004eb0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004eb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	461a      	mov	r2, r3
 8004eca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ecc:	4413      	add	r3, r2
 8004ece:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	011a      	lsls	r2, r3, #4
 8004ed6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ed8:	4413      	add	r3, r2
 8004eda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ede:	657b      	str	r3, [r7, #84]	; 0x54
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	891b      	ldrh	r3, [r3, #8]
 8004ee4:	085b      	lsrs	r3, r3, #1
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	005b      	lsls	r3, r3, #1
 8004eea:	b29a      	uxth	r2, r3
 8004eec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004eee:	801a      	strh	r2, [r3, #0]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	653b      	str	r3, [r7, #80]	; 0x50
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	461a      	mov	r2, r3
 8004efe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f00:	4413      	add	r3, r2
 8004f02:	653b      	str	r3, [r7, #80]	; 0x50
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	011a      	lsls	r2, r3, #4
 8004f0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f0c:	4413      	add	r3, r2
 8004f0e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004f12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	895b      	ldrh	r3, [r3, #10]
 8004f18:	085b      	lsrs	r3, r3, #1
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	005b      	lsls	r3, r3, #1
 8004f1e:	b29a      	uxth	r2, r3
 8004f20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f22:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	785b      	ldrb	r3, [r3, #1]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	f040 8091 	bne.w	8005050 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	4413      	add	r3, r2
 8004f38:	881b      	ldrh	r3, [r3, #0]
 8004f3a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004f3c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004f3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d01b      	beq.n	8004f7e <USB_ActivateEndpoint+0x47e>
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	4413      	add	r3, r2
 8004f50:	881b      	ldrh	r3, [r3, #0]
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f5c:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	441a      	add	r2, r3
 8004f68:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004f6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	4413      	add	r3, r2
 8004f88:	881b      	ldrh	r3, [r3, #0]
 8004f8a:	873b      	strh	r3, [r7, #56]	; 0x38
 8004f8c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d01b      	beq.n	8004fce <USB_ActivateEndpoint+0x4ce>
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	4413      	add	r3, r2
 8004fa0:	881b      	ldrh	r3, [r3, #0]
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fac:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	781b      	ldrb	r3, [r3, #0]
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	441a      	add	r2, r3
 8004fb8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004fba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fc6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	4413      	add	r3, r2
 8004fd8:	881b      	ldrh	r3, [r3, #0]
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fe0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fe4:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004fe6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004fe8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004fec:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004fee:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004ff0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004ff4:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	441a      	add	r2, r3
 8005000:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005002:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005006:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800500a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800500e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005012:	b29b      	uxth	r3, r3
 8005014:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	009b      	lsls	r3, r3, #2
 800501e:	4413      	add	r3, r2
 8005020:	881b      	ldrh	r3, [r3, #0]
 8005022:	b29b      	uxth	r3, r3
 8005024:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005028:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800502c:	867b      	strh	r3, [r7, #50]	; 0x32
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	441a      	add	r2, r3
 8005038:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800503a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800503e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005042:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005046:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800504a:	b29b      	uxth	r3, r3
 800504c:	8013      	strh	r3, [r2, #0]
 800504e:	e0ba      	b.n	80051c6 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	4413      	add	r3, r2
 800505a:	881b      	ldrh	r3, [r3, #0]
 800505c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005060:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005064:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005068:	2b00      	cmp	r3, #0
 800506a:	d01d      	beq.n	80050a8 <USB_ActivateEndpoint+0x5a8>
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	4413      	add	r3, r2
 8005076:	881b      	ldrh	r3, [r3, #0]
 8005078:	b29b      	uxth	r3, r3
 800507a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800507e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005082:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	009b      	lsls	r3, r3, #2
 800508e:	441a      	add	r2, r3
 8005090:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005094:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005098:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800509c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80050a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	4413      	add	r3, r2
 80050b2:	881b      	ldrh	r3, [r3, #0]
 80050b4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80050b8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80050bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d01d      	beq.n	8005100 <USB_ActivateEndpoint+0x600>
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	781b      	ldrb	r3, [r3, #0]
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	4413      	add	r3, r2
 80050ce:	881b      	ldrh	r3, [r3, #0]
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050da:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	441a      	add	r2, r3
 80050e8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80050ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050f8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	78db      	ldrb	r3, [r3, #3]
 8005104:	2b01      	cmp	r3, #1
 8005106:	d024      	beq.n	8005152 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	781b      	ldrb	r3, [r3, #0]
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	4413      	add	r3, r2
 8005112:	881b      	ldrh	r3, [r3, #0]
 8005114:	b29b      	uxth	r3, r3
 8005116:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800511a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800511e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005122:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005126:	f083 0320 	eor.w	r3, r3, #32
 800512a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	781b      	ldrb	r3, [r3, #0]
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	441a      	add	r2, r3
 8005138:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800513c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005140:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005144:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005148:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800514c:	b29b      	uxth	r3, r3
 800514e:	8013      	strh	r3, [r2, #0]
 8005150:	e01d      	b.n	800518e <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	4413      	add	r3, r2
 800515c:	881b      	ldrh	r3, [r3, #0]
 800515e:	b29b      	uxth	r3, r3
 8005160:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005164:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005168:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	781b      	ldrb	r3, [r3, #0]
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	441a      	add	r2, r3
 8005176:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800517a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800517e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005182:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005186:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800518a:	b29b      	uxth	r3, r3
 800518c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	4413      	add	r3, r2
 8005198:	881b      	ldrh	r3, [r3, #0]
 800519a:	b29b      	uxth	r3, r3
 800519c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051a4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	781b      	ldrb	r3, [r3, #0]
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	441a      	add	r2, r3
 80051b0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80051b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80051c6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	376c      	adds	r7, #108	; 0x6c
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bc80      	pop	{r7}
 80051d2:	4770      	bx	lr

080051d4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b08d      	sub	sp, #52	; 0x34
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	7b1b      	ldrb	r3, [r3, #12]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	f040 808e 	bne.w	8005304 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	785b      	ldrb	r3, [r3, #1]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d044      	beq.n	800527a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	4413      	add	r3, r2
 80051fa:	881b      	ldrh	r3, [r3, #0]
 80051fc:	81bb      	strh	r3, [r7, #12]
 80051fe:	89bb      	ldrh	r3, [r7, #12]
 8005200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005204:	2b00      	cmp	r3, #0
 8005206:	d01b      	beq.n	8005240 <USB_DeactivateEndpoint+0x6c>
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	4413      	add	r3, r2
 8005212:	881b      	ldrh	r3, [r3, #0]
 8005214:	b29b      	uxth	r3, r3
 8005216:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800521a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800521e:	817b      	strh	r3, [r7, #10]
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	441a      	add	r2, r3
 800522a:	897b      	ldrh	r3, [r7, #10]
 800522c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005230:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005234:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005238:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800523c:	b29b      	uxth	r3, r3
 800523e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	4413      	add	r3, r2
 800524a:	881b      	ldrh	r3, [r3, #0]
 800524c:	b29b      	uxth	r3, r3
 800524e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005252:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005256:	813b      	strh	r3, [r7, #8]
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	781b      	ldrb	r3, [r3, #0]
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	441a      	add	r2, r3
 8005262:	893b      	ldrh	r3, [r7, #8]
 8005264:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005268:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800526c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005270:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005274:	b29b      	uxth	r3, r3
 8005276:	8013      	strh	r3, [r2, #0]
 8005278:	e192      	b.n	80055a0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	009b      	lsls	r3, r3, #2
 8005282:	4413      	add	r3, r2
 8005284:	881b      	ldrh	r3, [r3, #0]
 8005286:	827b      	strh	r3, [r7, #18]
 8005288:	8a7b      	ldrh	r3, [r7, #18]
 800528a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800528e:	2b00      	cmp	r3, #0
 8005290:	d01b      	beq.n	80052ca <USB_DeactivateEndpoint+0xf6>
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	4413      	add	r3, r2
 800529c:	881b      	ldrh	r3, [r3, #0]
 800529e:	b29b      	uxth	r3, r3
 80052a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052a8:	823b      	strh	r3, [r7, #16]
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	441a      	add	r2, r3
 80052b4:	8a3b      	ldrh	r3, [r7, #16]
 80052b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80052c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	4413      	add	r3, r2
 80052d4:	881b      	ldrh	r3, [r3, #0]
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052e0:	81fb      	strh	r3, [r7, #14]
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	441a      	add	r2, r3
 80052ec:	89fb      	ldrh	r3, [r7, #14]
 80052ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052fe:	b29b      	uxth	r3, r3
 8005300:	8013      	strh	r3, [r2, #0]
 8005302:	e14d      	b.n	80055a0 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	785b      	ldrb	r3, [r3, #1]
 8005308:	2b00      	cmp	r3, #0
 800530a:	f040 80a5 	bne.w	8005458 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	009b      	lsls	r3, r3, #2
 8005316:	4413      	add	r3, r2
 8005318:	881b      	ldrh	r3, [r3, #0]
 800531a:	843b      	strh	r3, [r7, #32]
 800531c:	8c3b      	ldrh	r3, [r7, #32]
 800531e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005322:	2b00      	cmp	r3, #0
 8005324:	d01b      	beq.n	800535e <USB_DeactivateEndpoint+0x18a>
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	4413      	add	r3, r2
 8005330:	881b      	ldrh	r3, [r3, #0]
 8005332:	b29b      	uxth	r3, r3
 8005334:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005338:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800533c:	83fb      	strh	r3, [r7, #30]
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	441a      	add	r2, r3
 8005348:	8bfb      	ldrh	r3, [r7, #30]
 800534a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800534e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005352:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005356:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800535a:	b29b      	uxth	r3, r3
 800535c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	4413      	add	r3, r2
 8005368:	881b      	ldrh	r3, [r3, #0]
 800536a:	83bb      	strh	r3, [r7, #28]
 800536c:	8bbb      	ldrh	r3, [r7, #28]
 800536e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005372:	2b00      	cmp	r3, #0
 8005374:	d01b      	beq.n	80053ae <USB_DeactivateEndpoint+0x1da>
 8005376:	687a      	ldr	r2, [r7, #4]
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	4413      	add	r3, r2
 8005380:	881b      	ldrh	r3, [r3, #0]
 8005382:	b29b      	uxth	r3, r3
 8005384:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005388:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800538c:	837b      	strh	r3, [r7, #26]
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	009b      	lsls	r3, r3, #2
 8005396:	441a      	add	r2, r3
 8005398:	8b7b      	ldrh	r3, [r7, #26]
 800539a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800539e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053a6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	4413      	add	r3, r2
 80053b8:	881b      	ldrh	r3, [r3, #0]
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053c4:	833b      	strh	r3, [r7, #24]
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	441a      	add	r2, r3
 80053d0:	8b3b      	ldrh	r3, [r7, #24]
 80053d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	009b      	lsls	r3, r3, #2
 80053ee:	4413      	add	r3, r2
 80053f0:	881b      	ldrh	r3, [r3, #0]
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053fc:	82fb      	strh	r3, [r7, #22]
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	009b      	lsls	r3, r3, #2
 8005406:	441a      	add	r2, r3
 8005408:	8afb      	ldrh	r3, [r7, #22]
 800540a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800540e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005412:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005416:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800541a:	b29b      	uxth	r3, r3
 800541c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	4413      	add	r3, r2
 8005428:	881b      	ldrh	r3, [r3, #0]
 800542a:	b29b      	uxth	r3, r3
 800542c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005430:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005434:	82bb      	strh	r3, [r7, #20]
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	441a      	add	r2, r3
 8005440:	8abb      	ldrh	r3, [r7, #20]
 8005442:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005446:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800544a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800544e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005452:	b29b      	uxth	r3, r3
 8005454:	8013      	strh	r3, [r2, #0]
 8005456:	e0a3      	b.n	80055a0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	4413      	add	r3, r2
 8005462:	881b      	ldrh	r3, [r3, #0]
 8005464:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005466:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005468:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800546c:	2b00      	cmp	r3, #0
 800546e:	d01b      	beq.n	80054a8 <USB_DeactivateEndpoint+0x2d4>
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	4413      	add	r3, r2
 800547a:	881b      	ldrh	r3, [r3, #0]
 800547c:	b29b      	uxth	r3, r3
 800547e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005486:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	441a      	add	r2, r3
 8005492:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005494:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005498:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800549c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80054a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	4413      	add	r3, r2
 80054b2:	881b      	ldrh	r3, [r3, #0]
 80054b4:	857b      	strh	r3, [r7, #42]	; 0x2a
 80054b6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80054b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d01b      	beq.n	80054f8 <USB_DeactivateEndpoint+0x324>
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	4413      	add	r3, r2
 80054ca:	881b      	ldrh	r3, [r3, #0]
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054d6:	853b      	strh	r3, [r7, #40]	; 0x28
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	441a      	add	r2, r3
 80054e2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80054e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	4413      	add	r3, r2
 8005502:	881b      	ldrh	r3, [r3, #0]
 8005504:	b29b      	uxth	r3, r3
 8005506:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800550a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800550e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	781b      	ldrb	r3, [r3, #0]
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	441a      	add	r2, r3
 800551a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800551c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005520:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005524:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800552c:	b29b      	uxth	r3, r3
 800552e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	4413      	add	r3, r2
 800553a:	881b      	ldrh	r3, [r3, #0]
 800553c:	b29b      	uxth	r3, r3
 800553e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005542:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005546:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	441a      	add	r2, r3
 8005552:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005554:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005558:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800555c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005564:	b29b      	uxth	r3, r3
 8005566:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	4413      	add	r3, r2
 8005572:	881b      	ldrh	r3, [r3, #0]
 8005574:	b29b      	uxth	r3, r3
 8005576:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800557a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800557e:	847b      	strh	r3, [r7, #34]	; 0x22
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	441a      	add	r2, r3
 800558a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800558c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005590:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005594:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800559c:	b29b      	uxth	r3, r3
 800559e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80055a0:	2300      	movs	r3, #0
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3734      	adds	r7, #52	; 0x34
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bc80      	pop	{r7}
 80055aa:	4770      	bx	lr

080055ac <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b0cc      	sub	sp, #304	; 0x130
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	1d3b      	adds	r3, r7, #4
 80055b4:	6018      	str	r0, [r3, #0]
 80055b6:	463b      	mov	r3, r7
 80055b8:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80055ba:	463b      	mov	r3, r7
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	785b      	ldrb	r3, [r3, #1]
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	f040 872e 	bne.w	8006422 <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80055c6:	463b      	mov	r3, r7
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	699a      	ldr	r2, [r3, #24]
 80055cc:	463b      	mov	r3, r7
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d905      	bls.n	80055e2 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80055d6:	463b      	mov	r3, r7
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	691b      	ldr	r3, [r3, #16]
 80055dc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80055e0:	e004      	b.n	80055ec <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80055e2:	463b      	mov	r3, r7
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	699b      	ldr	r3, [r3, #24]
 80055e8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80055ec:	463b      	mov	r3, r7
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	7b1b      	ldrb	r3, [r3, #12]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d134      	bne.n	8005660 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80055f6:	463b      	mov	r3, r7
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	6959      	ldr	r1, [r3, #20]
 80055fc:	463b      	mov	r3, r7
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	88da      	ldrh	r2, [r3, #6]
 8005602:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005606:	b29b      	uxth	r3, r3
 8005608:	1d38      	adds	r0, r7, #4
 800560a:	6800      	ldr	r0, [r0, #0]
 800560c:	f001 fc03 	bl	8006e16 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005610:	f107 0310 	add.w	r3, r7, #16
 8005614:	1d3a      	adds	r2, r7, #4
 8005616:	6812      	ldr	r2, [r2, #0]
 8005618:	601a      	str	r2, [r3, #0]
 800561a:	1d3b      	adds	r3, r7, #4
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005622:	b29b      	uxth	r3, r3
 8005624:	4619      	mov	r1, r3
 8005626:	f107 0310 	add.w	r3, r7, #16
 800562a:	f107 0210 	add.w	r2, r7, #16
 800562e:	6812      	ldr	r2, [r2, #0]
 8005630:	440a      	add	r2, r1
 8005632:	601a      	str	r2, [r3, #0]
 8005634:	463b      	mov	r3, r7
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	011a      	lsls	r2, r3, #4
 800563c:	f107 0310 	add.w	r3, r7, #16
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4413      	add	r3, r2
 8005644:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005648:	f107 030c 	add.w	r3, r7, #12
 800564c:	601a      	str	r2, [r3, #0]
 800564e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005652:	b29a      	uxth	r2, r3
 8005654:	f107 030c 	add.w	r3, r7, #12
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	801a      	strh	r2, [r3, #0]
 800565c:	f000 beac 	b.w	80063b8 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005660:	463b      	mov	r3, r7
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	78db      	ldrb	r3, [r3, #3]
 8005666:	2b02      	cmp	r3, #2
 8005668:	f040 838c 	bne.w	8005d84 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800566c:	463b      	mov	r3, r7
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	6a1a      	ldr	r2, [r3, #32]
 8005672:	463b      	mov	r3, r7
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	691b      	ldr	r3, [r3, #16]
 8005678:	429a      	cmp	r2, r3
 800567a:	f240 8330 	bls.w	8005cde <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800567e:	1d3b      	adds	r3, r7, #4
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	463b      	mov	r3, r7
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	781b      	ldrb	r3, [r3, #0]
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	4413      	add	r3, r2
 800568c:	881b      	ldrh	r3, [r3, #0]
 800568e:	b29b      	uxth	r3, r3
 8005690:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005694:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005698:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800569c:	1d3b      	adds	r3, r7, #4
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	463b      	mov	r3, r7
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	441a      	add	r2, r3
 80056aa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80056ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056b6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80056ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056be:	b29b      	uxth	r3, r3
 80056c0:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80056c2:	463b      	mov	r3, r7
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	6a1a      	ldr	r2, [r3, #32]
 80056c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056cc:	1ad2      	subs	r2, r2, r3
 80056ce:	463b      	mov	r3, r7
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80056d4:	1d3b      	adds	r3, r7, #4
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	463b      	mov	r3, r7
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	4413      	add	r3, r2
 80056e2:	881b      	ldrh	r3, [r3, #0]
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	f000 819e 	beq.w	8005a2c <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80056f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80056f4:	1d3a      	adds	r2, r7, #4
 80056f6:	6812      	ldr	r2, [r2, #0]
 80056f8:	601a      	str	r2, [r3, #0]
 80056fa:	463b      	mov	r3, r7
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	785b      	ldrb	r3, [r3, #1]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d17a      	bne.n	80057fa <USB_EPStartXfer+0x24e>
 8005704:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005708:	1d3a      	adds	r2, r7, #4
 800570a:	6812      	ldr	r2, [r2, #0]
 800570c:	601a      	str	r2, [r3, #0]
 800570e:	1d3b      	adds	r3, r7, #4
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005716:	b29b      	uxth	r3, r3
 8005718:	4619      	mov	r1, r3
 800571a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800571e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005722:	6812      	ldr	r2, [r2, #0]
 8005724:	440a      	add	r2, r1
 8005726:	601a      	str	r2, [r3, #0]
 8005728:	463b      	mov	r3, r7
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	011a      	lsls	r2, r3, #4
 8005730:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4413      	add	r3, r2
 8005738:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800573c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005740:	601a      	str	r2, [r3, #0]
 8005742:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005746:	2b00      	cmp	r3, #0
 8005748:	d11a      	bne.n	8005780 <USB_EPStartXfer+0x1d4>
 800574a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	881b      	ldrh	r3, [r3, #0]
 8005752:	b29b      	uxth	r3, r3
 8005754:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005758:	b29a      	uxth	r2, r3
 800575a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	801a      	strh	r2, [r3, #0]
 8005762:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	881b      	ldrh	r3, [r3, #0]
 800576a:	b29b      	uxth	r3, r3
 800576c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005770:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005774:	b29a      	uxth	r2, r3
 8005776:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	801a      	strh	r2, [r3, #0]
 800577e:	e062      	b.n	8005846 <USB_EPStartXfer+0x29a>
 8005780:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005784:	2b3e      	cmp	r3, #62	; 0x3e
 8005786:	d819      	bhi.n	80057bc <USB_EPStartXfer+0x210>
 8005788:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800578c:	085b      	lsrs	r3, r3, #1
 800578e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005792:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005796:	f003 0301 	and.w	r3, r3, #1
 800579a:	2b00      	cmp	r3, #0
 800579c:	d004      	beq.n	80057a8 <USB_EPStartXfer+0x1fc>
 800579e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80057a2:	3301      	adds	r3, #1
 80057a4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80057a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	029b      	lsls	r3, r3, #10
 80057b0:	b29a      	uxth	r2, r3
 80057b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	801a      	strh	r2, [r3, #0]
 80057ba:	e044      	b.n	8005846 <USB_EPStartXfer+0x29a>
 80057bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057c0:	095b      	lsrs	r3, r3, #5
 80057c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80057c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057ca:	f003 031f 	and.w	r3, r3, #31
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d104      	bne.n	80057dc <USB_EPStartXfer+0x230>
 80057d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80057d6:	3b01      	subs	r3, #1
 80057d8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80057dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	029b      	lsls	r3, r3, #10
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057ee:	b29a      	uxth	r2, r3
 80057f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	801a      	strh	r2, [r3, #0]
 80057f8:	e025      	b.n	8005846 <USB_EPStartXfer+0x29a>
 80057fa:	463b      	mov	r3, r7
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	785b      	ldrb	r3, [r3, #1]
 8005800:	2b01      	cmp	r3, #1
 8005802:	d120      	bne.n	8005846 <USB_EPStartXfer+0x29a>
 8005804:	1d3b      	adds	r3, r7, #4
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800580c:	b29b      	uxth	r3, r3
 800580e:	4619      	mov	r1, r3
 8005810:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005814:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005818:	6812      	ldr	r2, [r2, #0]
 800581a:	440a      	add	r2, r1
 800581c:	601a      	str	r2, [r3, #0]
 800581e:	463b      	mov	r3, r7
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	011a      	lsls	r2, r3, #4
 8005826:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4413      	add	r3, r2
 800582e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8005832:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005836:	601a      	str	r2, [r3, #0]
 8005838:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800583c:	b29a      	uxth	r2, r3
 800583e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005846:	463b      	mov	r3, r7
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	895b      	ldrh	r3, [r3, #10]
 800584c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005850:	463b      	mov	r3, r7
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	6959      	ldr	r1, [r3, #20]
 8005856:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800585a:	b29b      	uxth	r3, r3
 800585c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005860:	1d38      	adds	r0, r7, #4
 8005862:	6800      	ldr	r0, [r0, #0]
 8005864:	f001 fad7 	bl	8006e16 <USB_WritePMA>
            ep->xfer_buff += len;
 8005868:	463b      	mov	r3, r7
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	695a      	ldr	r2, [r3, #20]
 800586e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005872:	441a      	add	r2, r3
 8005874:	463b      	mov	r3, r7
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800587a:	463b      	mov	r3, r7
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	6a1a      	ldr	r2, [r3, #32]
 8005880:	463b      	mov	r3, r7
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	691b      	ldr	r3, [r3, #16]
 8005886:	429a      	cmp	r2, r3
 8005888:	d909      	bls.n	800589e <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 800588a:	463b      	mov	r3, r7
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	6a1a      	ldr	r2, [r3, #32]
 8005890:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005894:	1ad2      	subs	r2, r2, r3
 8005896:	463b      	mov	r3, r7
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	621a      	str	r2, [r3, #32]
 800589c:	e008      	b.n	80058b0 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 800589e:	463b      	mov	r3, r7
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	6a1b      	ldr	r3, [r3, #32]
 80058a4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80058a8:	463b      	mov	r3, r7
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	2200      	movs	r2, #0
 80058ae:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80058b0:	463b      	mov	r3, r7
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	785b      	ldrb	r3, [r3, #1]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d17a      	bne.n	80059b0 <USB_EPStartXfer+0x404>
 80058ba:	f107 0318 	add.w	r3, r7, #24
 80058be:	1d3a      	adds	r2, r7, #4
 80058c0:	6812      	ldr	r2, [r2, #0]
 80058c2:	601a      	str	r2, [r3, #0]
 80058c4:	1d3b      	adds	r3, r7, #4
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	4619      	mov	r1, r3
 80058d0:	f107 0318 	add.w	r3, r7, #24
 80058d4:	f107 0218 	add.w	r2, r7, #24
 80058d8:	6812      	ldr	r2, [r2, #0]
 80058da:	440a      	add	r2, r1
 80058dc:	601a      	str	r2, [r3, #0]
 80058de:	463b      	mov	r3, r7
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	011a      	lsls	r2, r3, #4
 80058e6:	f107 0318 	add.w	r3, r7, #24
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4413      	add	r3, r2
 80058ee:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80058f2:	f107 0314 	add.w	r3, r7, #20
 80058f6:	601a      	str	r2, [r3, #0]
 80058f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d11a      	bne.n	8005936 <USB_EPStartXfer+0x38a>
 8005900:	f107 0314 	add.w	r3, r7, #20
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	881b      	ldrh	r3, [r3, #0]
 8005908:	b29b      	uxth	r3, r3
 800590a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800590e:	b29a      	uxth	r2, r3
 8005910:	f107 0314 	add.w	r3, r7, #20
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	801a      	strh	r2, [r3, #0]
 8005918:	f107 0314 	add.w	r3, r7, #20
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	881b      	ldrh	r3, [r3, #0]
 8005920:	b29b      	uxth	r3, r3
 8005922:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005926:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800592a:	b29a      	uxth	r2, r3
 800592c:	f107 0314 	add.w	r3, r7, #20
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	801a      	strh	r2, [r3, #0]
 8005934:	e067      	b.n	8005a06 <USB_EPStartXfer+0x45a>
 8005936:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800593a:	2b3e      	cmp	r3, #62	; 0x3e
 800593c:	d819      	bhi.n	8005972 <USB_EPStartXfer+0x3c6>
 800593e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005942:	085b      	lsrs	r3, r3, #1
 8005944:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005948:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800594c:	f003 0301 	and.w	r3, r3, #1
 8005950:	2b00      	cmp	r3, #0
 8005952:	d004      	beq.n	800595e <USB_EPStartXfer+0x3b2>
 8005954:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005958:	3301      	adds	r3, #1
 800595a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800595e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005962:	b29b      	uxth	r3, r3
 8005964:	029b      	lsls	r3, r3, #10
 8005966:	b29a      	uxth	r2, r3
 8005968:	f107 0314 	add.w	r3, r7, #20
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	801a      	strh	r2, [r3, #0]
 8005970:	e049      	b.n	8005a06 <USB_EPStartXfer+0x45a>
 8005972:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005976:	095b      	lsrs	r3, r3, #5
 8005978:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800597c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005980:	f003 031f 	and.w	r3, r3, #31
 8005984:	2b00      	cmp	r3, #0
 8005986:	d104      	bne.n	8005992 <USB_EPStartXfer+0x3e6>
 8005988:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800598c:	3b01      	subs	r3, #1
 800598e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005992:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005996:	b29b      	uxth	r3, r3
 8005998:	029b      	lsls	r3, r3, #10
 800599a:	b29b      	uxth	r3, r3
 800599c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059a4:	b29a      	uxth	r2, r3
 80059a6:	f107 0314 	add.w	r3, r7, #20
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	801a      	strh	r2, [r3, #0]
 80059ae:	e02a      	b.n	8005a06 <USB_EPStartXfer+0x45a>
 80059b0:	463b      	mov	r3, r7
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	785b      	ldrb	r3, [r3, #1]
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d125      	bne.n	8005a06 <USB_EPStartXfer+0x45a>
 80059ba:	f107 0320 	add.w	r3, r7, #32
 80059be:	1d3a      	adds	r2, r7, #4
 80059c0:	6812      	ldr	r2, [r2, #0]
 80059c2:	601a      	str	r2, [r3, #0]
 80059c4:	1d3b      	adds	r3, r7, #4
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	4619      	mov	r1, r3
 80059d0:	f107 0320 	add.w	r3, r7, #32
 80059d4:	f107 0220 	add.w	r2, r7, #32
 80059d8:	6812      	ldr	r2, [r2, #0]
 80059da:	440a      	add	r2, r1
 80059dc:	601a      	str	r2, [r3, #0]
 80059de:	463b      	mov	r3, r7
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	011a      	lsls	r2, r3, #4
 80059e6:	f107 0320 	add.w	r3, r7, #32
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4413      	add	r3, r2
 80059ee:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80059f2:	f107 031c 	add.w	r3, r7, #28
 80059f6:	601a      	str	r2, [r3, #0]
 80059f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059fc:	b29a      	uxth	r2, r3
 80059fe:	f107 031c 	add.w	r3, r7, #28
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005a06:	463b      	mov	r3, r7
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	891b      	ldrh	r3, [r3, #8]
 8005a0c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a10:	463b      	mov	r3, r7
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	6959      	ldr	r1, [r3, #20]
 8005a16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005a20:	1d38      	adds	r0, r7, #4
 8005a22:	6800      	ldr	r0, [r0, #0]
 8005a24:	f001 f9f7 	bl	8006e16 <USB_WritePMA>
 8005a28:	f000 bcc6 	b.w	80063b8 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005a2c:	463b      	mov	r3, r7
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	785b      	ldrb	r3, [r3, #1]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d164      	bne.n	8005b00 <USB_EPStartXfer+0x554>
 8005a36:	1d3b      	adds	r3, r7, #4
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a3c:	1d3b      	adds	r3, r7, #4
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	461a      	mov	r2, r3
 8005a48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a4a:	4413      	add	r3, r2
 8005a4c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a4e:	463b      	mov	r3, r7
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	011a      	lsls	r2, r3, #4
 8005a56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a58:	4413      	add	r3, r2
 8005a5a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a5e:	647b      	str	r3, [r7, #68]	; 0x44
 8005a60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d112      	bne.n	8005a8e <USB_EPStartXfer+0x4e2>
 8005a68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a6a:	881b      	ldrh	r3, [r3, #0]
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a72:	b29a      	uxth	r2, r3
 8005a74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a76:	801a      	strh	r2, [r3, #0]
 8005a78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a7a:	881b      	ldrh	r3, [r3, #0]
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a86:	b29a      	uxth	r2, r3
 8005a88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a8a:	801a      	strh	r2, [r3, #0]
 8005a8c:	e057      	b.n	8005b3e <USB_EPStartXfer+0x592>
 8005a8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a92:	2b3e      	cmp	r3, #62	; 0x3e
 8005a94:	d817      	bhi.n	8005ac6 <USB_EPStartXfer+0x51a>
 8005a96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a9a:	085b      	lsrs	r3, r3, #1
 8005a9c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005aa0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005aa4:	f003 0301 	and.w	r3, r3, #1
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d004      	beq.n	8005ab6 <USB_EPStartXfer+0x50a>
 8005aac:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005ab0:	3301      	adds	r3, #1
 8005ab2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005ab6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	029b      	lsls	r3, r3, #10
 8005abe:	b29a      	uxth	r2, r3
 8005ac0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ac2:	801a      	strh	r2, [r3, #0]
 8005ac4:	e03b      	b.n	8005b3e <USB_EPStartXfer+0x592>
 8005ac6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005aca:	095b      	lsrs	r3, r3, #5
 8005acc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005ad0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ad4:	f003 031f 	and.w	r3, r3, #31
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d104      	bne.n	8005ae6 <USB_EPStartXfer+0x53a>
 8005adc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005ae0:	3b01      	subs	r3, #1
 8005ae2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005ae6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	029b      	lsls	r3, r3, #10
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005af4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005af8:	b29a      	uxth	r2, r3
 8005afa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005afc:	801a      	strh	r2, [r3, #0]
 8005afe:	e01e      	b.n	8005b3e <USB_EPStartXfer+0x592>
 8005b00:	463b      	mov	r3, r7
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	785b      	ldrb	r3, [r3, #1]
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d119      	bne.n	8005b3e <USB_EPStartXfer+0x592>
 8005b0a:	1d3b      	adds	r3, r7, #4
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	653b      	str	r3, [r7, #80]	; 0x50
 8005b10:	1d3b      	adds	r3, r7, #4
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b1e:	4413      	add	r3, r2
 8005b20:	653b      	str	r3, [r7, #80]	; 0x50
 8005b22:	463b      	mov	r3, r7
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	781b      	ldrb	r3, [r3, #0]
 8005b28:	011a      	lsls	r2, r3, #4
 8005b2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b2c:	4413      	add	r3, r2
 8005b2e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b38:	b29a      	uxth	r2, r3
 8005b3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b3c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005b3e:	463b      	mov	r3, r7
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	891b      	ldrh	r3, [r3, #8]
 8005b44:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b48:	463b      	mov	r3, r7
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	6959      	ldr	r1, [r3, #20]
 8005b4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005b58:	1d38      	adds	r0, r7, #4
 8005b5a:	6800      	ldr	r0, [r0, #0]
 8005b5c:	f001 f95b 	bl	8006e16 <USB_WritePMA>
            ep->xfer_buff += len;
 8005b60:	463b      	mov	r3, r7
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	695a      	ldr	r2, [r3, #20]
 8005b66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b6a:	441a      	add	r2, r3
 8005b6c:	463b      	mov	r3, r7
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005b72:	463b      	mov	r3, r7
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	6a1a      	ldr	r2, [r3, #32]
 8005b78:	463b      	mov	r3, r7
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	691b      	ldr	r3, [r3, #16]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d909      	bls.n	8005b96 <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 8005b82:	463b      	mov	r3, r7
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	6a1a      	ldr	r2, [r3, #32]
 8005b88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b8c:	1ad2      	subs	r2, r2, r3
 8005b8e:	463b      	mov	r3, r7
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	621a      	str	r2, [r3, #32]
 8005b94:	e008      	b.n	8005ba8 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8005b96:	463b      	mov	r3, r7
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	6a1b      	ldr	r3, [r3, #32]
 8005b9c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005ba0:	463b      	mov	r3, r7
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005ba8:	1d3b      	adds	r3, r7, #4
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	643b      	str	r3, [r7, #64]	; 0x40
 8005bae:	463b      	mov	r3, r7
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	785b      	ldrb	r3, [r3, #1]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d164      	bne.n	8005c82 <USB_EPStartXfer+0x6d6>
 8005bb8:	1d3b      	adds	r3, r7, #4
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	63bb      	str	r3, [r7, #56]	; 0x38
 8005bbe:	1d3b      	adds	r3, r7, #4
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	461a      	mov	r2, r3
 8005bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bcc:	4413      	add	r3, r2
 8005bce:	63bb      	str	r3, [r7, #56]	; 0x38
 8005bd0:	463b      	mov	r3, r7
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	781b      	ldrb	r3, [r3, #0]
 8005bd6:	011a      	lsls	r2, r3, #4
 8005bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bda:	4413      	add	r3, r2
 8005bdc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005be0:	637b      	str	r3, [r7, #52]	; 0x34
 8005be2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d112      	bne.n	8005c10 <USB_EPStartXfer+0x664>
 8005bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bec:	881b      	ldrh	r3, [r3, #0]
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005bf4:	b29a      	uxth	r2, r3
 8005bf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bf8:	801a      	strh	r2, [r3, #0]
 8005bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bfc:	881b      	ldrh	r3, [r3, #0]
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c08:	b29a      	uxth	r2, r3
 8005c0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c0c:	801a      	strh	r2, [r3, #0]
 8005c0e:	e054      	b.n	8005cba <USB_EPStartXfer+0x70e>
 8005c10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c14:	2b3e      	cmp	r3, #62	; 0x3e
 8005c16:	d817      	bhi.n	8005c48 <USB_EPStartXfer+0x69c>
 8005c18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c1c:	085b      	lsrs	r3, r3, #1
 8005c1e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005c22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c26:	f003 0301 	and.w	r3, r3, #1
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d004      	beq.n	8005c38 <USB_EPStartXfer+0x68c>
 8005c2e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005c32:	3301      	adds	r3, #1
 8005c34:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005c38:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	029b      	lsls	r3, r3, #10
 8005c40:	b29a      	uxth	r2, r3
 8005c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c44:	801a      	strh	r2, [r3, #0]
 8005c46:	e038      	b.n	8005cba <USB_EPStartXfer+0x70e>
 8005c48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c4c:	095b      	lsrs	r3, r3, #5
 8005c4e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005c52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c56:	f003 031f 	and.w	r3, r3, #31
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d104      	bne.n	8005c68 <USB_EPStartXfer+0x6bc>
 8005c5e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005c62:	3b01      	subs	r3, #1
 8005c64:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005c68:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	029b      	lsls	r3, r3, #10
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c7a:	b29a      	uxth	r2, r3
 8005c7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c7e:	801a      	strh	r2, [r3, #0]
 8005c80:	e01b      	b.n	8005cba <USB_EPStartXfer+0x70e>
 8005c82:	463b      	mov	r3, r7
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	785b      	ldrb	r3, [r3, #1]
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d116      	bne.n	8005cba <USB_EPStartXfer+0x70e>
 8005c8c:	1d3b      	adds	r3, r7, #4
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	461a      	mov	r2, r3
 8005c98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c9a:	4413      	add	r3, r2
 8005c9c:	643b      	str	r3, [r7, #64]	; 0x40
 8005c9e:	463b      	mov	r3, r7
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	011a      	lsls	r2, r3, #4
 8005ca6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ca8:	4413      	add	r3, r2
 8005caa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005cae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cb4:	b29a      	uxth	r2, r3
 8005cb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cb8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005cba:	463b      	mov	r3, r7
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	895b      	ldrh	r3, [r3, #10]
 8005cc0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005cc4:	463b      	mov	r3, r7
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	6959      	ldr	r1, [r3, #20]
 8005cca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005cd4:	1d38      	adds	r0, r7, #4
 8005cd6:	6800      	ldr	r0, [r0, #0]
 8005cd8:	f001 f89d 	bl	8006e16 <USB_WritePMA>
 8005cdc:	e36c      	b.n	80063b8 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005cde:	463b      	mov	r3, r7
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	6a1b      	ldr	r3, [r3, #32]
 8005ce4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005ce8:	1d3b      	adds	r3, r7, #4
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	463b      	mov	r3, r7
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	4413      	add	r3, r2
 8005cf6:	881b      	ldrh	r3, [r3, #0]
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d02:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005d06:	1d3b      	adds	r3, r7, #4
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	463b      	mov	r3, r7
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	441a      	add	r2, r3
 8005d14:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005d18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005d2c:	1d3b      	adds	r3, r7, #4
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d32:	1d3b      	adds	r3, r7, #4
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d40:	4413      	add	r3, r2
 8005d42:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d44:	463b      	mov	r3, r7
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	011a      	lsls	r2, r3, #4
 8005d4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d4e:	4413      	add	r3, r2
 8005d50:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d54:	65bb      	str	r3, [r7, #88]	; 0x58
 8005d56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d5a:	b29a      	uxth	r2, r3
 8005d5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d5e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005d60:	463b      	mov	r3, r7
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	891b      	ldrh	r3, [r3, #8]
 8005d66:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d6a:	463b      	mov	r3, r7
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	6959      	ldr	r1, [r3, #20]
 8005d70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005d7a:	1d38      	adds	r0, r7, #4
 8005d7c:	6800      	ldr	r0, [r0, #0]
 8005d7e:	f001 f84a 	bl	8006e16 <USB_WritePMA>
 8005d82:	e319      	b.n	80063b8 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8005d84:	1d3b      	adds	r3, r7, #4
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	463b      	mov	r3, r7
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	009b      	lsls	r3, r3, #2
 8005d90:	4413      	add	r3, r2
 8005d92:	881b      	ldrh	r3, [r3, #0]
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d9e:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8005da2:	1d3b      	adds	r3, r7, #4
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	463b      	mov	r3, r7
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	441a      	add	r2, r3
 8005db0:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8005db4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005db8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dbc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005dc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005dc8:	463b      	mov	r3, r7
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	6a1a      	ldr	r2, [r3, #32]
 8005dce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dd2:	1ad2      	subs	r2, r2, r3
 8005dd4:	463b      	mov	r3, r7
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005dda:	1d3b      	adds	r3, r7, #4
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	463b      	mov	r3, r7
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	4413      	add	r3, r2
 8005de8:	881b      	ldrh	r3, [r3, #0]
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	f000 8162 	beq.w	80060ba <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005df6:	1d3b      	adds	r3, r7, #4
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005dfe:	463b      	mov	r3, r7
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	785b      	ldrb	r3, [r3, #1]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d164      	bne.n	8005ed2 <USB_EPStartXfer+0x926>
 8005e08:	1d3b      	adds	r3, r7, #4
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	67bb      	str	r3, [r7, #120]	; 0x78
 8005e0e:	1d3b      	adds	r3, r7, #4
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	461a      	mov	r2, r3
 8005e1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e1c:	4413      	add	r3, r2
 8005e1e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005e20:	463b      	mov	r3, r7
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	011a      	lsls	r2, r3, #4
 8005e28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e2a:	4413      	add	r3, r2
 8005e2c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e30:	677b      	str	r3, [r7, #116]	; 0x74
 8005e32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d112      	bne.n	8005e60 <USB_EPStartXfer+0x8b4>
 8005e3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e3c:	881b      	ldrh	r3, [r3, #0]
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e44:	b29a      	uxth	r2, r3
 8005e46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e48:	801a      	strh	r2, [r3, #0]
 8005e4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e4c:	881b      	ldrh	r3, [r3, #0]
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e58:	b29a      	uxth	r2, r3
 8005e5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e5c:	801a      	strh	r2, [r3, #0]
 8005e5e:	e057      	b.n	8005f10 <USB_EPStartXfer+0x964>
 8005e60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e64:	2b3e      	cmp	r3, #62	; 0x3e
 8005e66:	d817      	bhi.n	8005e98 <USB_EPStartXfer+0x8ec>
 8005e68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e6c:	085b      	lsrs	r3, r3, #1
 8005e6e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005e72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e76:	f003 0301 	and.w	r3, r3, #1
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d004      	beq.n	8005e88 <USB_EPStartXfer+0x8dc>
 8005e7e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005e82:	3301      	adds	r3, #1
 8005e84:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005e88:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	029b      	lsls	r3, r3, #10
 8005e90:	b29a      	uxth	r2, r3
 8005e92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e94:	801a      	strh	r2, [r3, #0]
 8005e96:	e03b      	b.n	8005f10 <USB_EPStartXfer+0x964>
 8005e98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e9c:	095b      	lsrs	r3, r3, #5
 8005e9e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005ea2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ea6:	f003 031f 	and.w	r3, r3, #31
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d104      	bne.n	8005eb8 <USB_EPStartXfer+0x90c>
 8005eae:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005eb2:	3b01      	subs	r3, #1
 8005eb4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005eb8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	029b      	lsls	r3, r3, #10
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ec6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005eca:	b29a      	uxth	r2, r3
 8005ecc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ece:	801a      	strh	r2, [r3, #0]
 8005ed0:	e01e      	b.n	8005f10 <USB_EPStartXfer+0x964>
 8005ed2:	463b      	mov	r3, r7
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	785b      	ldrb	r3, [r3, #1]
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d119      	bne.n	8005f10 <USB_EPStartXfer+0x964>
 8005edc:	1d3b      	adds	r3, r7, #4
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005eec:	4413      	add	r3, r2
 8005eee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005ef2:	463b      	mov	r3, r7
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	781b      	ldrb	r3, [r3, #0]
 8005ef8:	011a      	lsls	r2, r3, #4
 8005efa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005efe:	4413      	add	r3, r2
 8005f00:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f04:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005f06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f0a:	b29a      	uxth	r2, r3
 8005f0c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005f0e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005f10:	463b      	mov	r3, r7
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	895b      	ldrh	r3, [r3, #10]
 8005f16:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f1a:	463b      	mov	r3, r7
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	6959      	ldr	r1, [r3, #20]
 8005f20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005f2a:	1d38      	adds	r0, r7, #4
 8005f2c:	6800      	ldr	r0, [r0, #0]
 8005f2e:	f000 ff72 	bl	8006e16 <USB_WritePMA>
          ep->xfer_buff += len;
 8005f32:	463b      	mov	r3, r7
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	695a      	ldr	r2, [r3, #20]
 8005f38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f3c:	441a      	add	r2, r3
 8005f3e:	463b      	mov	r3, r7
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005f44:	463b      	mov	r3, r7
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	6a1a      	ldr	r2, [r3, #32]
 8005f4a:	463b      	mov	r3, r7
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	691b      	ldr	r3, [r3, #16]
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d909      	bls.n	8005f68 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8005f54:	463b      	mov	r3, r7
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	6a1a      	ldr	r2, [r3, #32]
 8005f5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f5e:	1ad2      	subs	r2, r2, r3
 8005f60:	463b      	mov	r3, r7
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	621a      	str	r2, [r3, #32]
 8005f66:	e008      	b.n	8005f7a <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8005f68:	463b      	mov	r3, r7
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	6a1b      	ldr	r3, [r3, #32]
 8005f6e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005f72:	463b      	mov	r3, r7
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	2200      	movs	r2, #0
 8005f78:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005f7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	f000 821a 	beq.w	80063b8 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005f84:	463b      	mov	r3, r7
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	785b      	ldrb	r3, [r3, #1]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d164      	bne.n	8006058 <USB_EPStartXfer+0xaac>
 8005f8e:	1d3b      	adds	r3, r7, #4
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f94:	1d3b      	adds	r3, r7, #4
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005fa2:	4413      	add	r3, r2
 8005fa4:	66bb      	str	r3, [r7, #104]	; 0x68
 8005fa6:	463b      	mov	r3, r7
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	011a      	lsls	r2, r3, #4
 8005fae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005fb0:	4413      	add	r3, r2
 8005fb2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005fb6:	667b      	str	r3, [r7, #100]	; 0x64
 8005fb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d112      	bne.n	8005fe6 <USB_EPStartXfer+0xa3a>
 8005fc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005fc2:	881b      	ldrh	r3, [r3, #0]
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005fca:	b29a      	uxth	r2, r3
 8005fcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005fce:	801a      	strh	r2, [r3, #0]
 8005fd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005fd2:	881b      	ldrh	r3, [r3, #0]
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fde:	b29a      	uxth	r2, r3
 8005fe0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005fe2:	801a      	strh	r2, [r3, #0]
 8005fe4:	e057      	b.n	8006096 <USB_EPStartXfer+0xaea>
 8005fe6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fea:	2b3e      	cmp	r3, #62	; 0x3e
 8005fec:	d817      	bhi.n	800601e <USB_EPStartXfer+0xa72>
 8005fee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ff2:	085b      	lsrs	r3, r3, #1
 8005ff4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005ff8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ffc:	f003 0301 	and.w	r3, r3, #1
 8006000:	2b00      	cmp	r3, #0
 8006002:	d004      	beq.n	800600e <USB_EPStartXfer+0xa62>
 8006004:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006008:	3301      	adds	r3, #1
 800600a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800600e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006012:	b29b      	uxth	r3, r3
 8006014:	029b      	lsls	r3, r3, #10
 8006016:	b29a      	uxth	r2, r3
 8006018:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800601a:	801a      	strh	r2, [r3, #0]
 800601c:	e03b      	b.n	8006096 <USB_EPStartXfer+0xaea>
 800601e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006022:	095b      	lsrs	r3, r3, #5
 8006024:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006028:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800602c:	f003 031f 	and.w	r3, r3, #31
 8006030:	2b00      	cmp	r3, #0
 8006032:	d104      	bne.n	800603e <USB_EPStartXfer+0xa92>
 8006034:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006038:	3b01      	subs	r3, #1
 800603a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800603e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006042:	b29b      	uxth	r3, r3
 8006044:	029b      	lsls	r3, r3, #10
 8006046:	b29b      	uxth	r3, r3
 8006048:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800604c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006050:	b29a      	uxth	r2, r3
 8006052:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006054:	801a      	strh	r2, [r3, #0]
 8006056:	e01e      	b.n	8006096 <USB_EPStartXfer+0xaea>
 8006058:	463b      	mov	r3, r7
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	785b      	ldrb	r3, [r3, #1]
 800605e:	2b01      	cmp	r3, #1
 8006060:	d119      	bne.n	8006096 <USB_EPStartXfer+0xaea>
 8006062:	1d3b      	adds	r3, r7, #4
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	673b      	str	r3, [r7, #112]	; 0x70
 8006068:	1d3b      	adds	r3, r7, #4
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006070:	b29b      	uxth	r3, r3
 8006072:	461a      	mov	r2, r3
 8006074:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006076:	4413      	add	r3, r2
 8006078:	673b      	str	r3, [r7, #112]	; 0x70
 800607a:	463b      	mov	r3, r7
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	011a      	lsls	r2, r3, #4
 8006082:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006084:	4413      	add	r3, r2
 8006086:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800608a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800608c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006090:	b29a      	uxth	r2, r3
 8006092:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006094:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006096:	463b      	mov	r3, r7
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	891b      	ldrh	r3, [r3, #8]
 800609c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80060a0:	463b      	mov	r3, r7
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	6959      	ldr	r1, [r3, #20]
 80060a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80060b0:	1d38      	adds	r0, r7, #4
 80060b2:	6800      	ldr	r0, [r0, #0]
 80060b4:	f000 feaf 	bl	8006e16 <USB_WritePMA>
 80060b8:	e17e      	b.n	80063b8 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80060ba:	463b      	mov	r3, r7
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	785b      	ldrb	r3, [r3, #1]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d16f      	bne.n	80061a4 <USB_EPStartXfer+0xbf8>
 80060c4:	1d3b      	adds	r3, r7, #4
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80060cc:	1d3b      	adds	r3, r7, #4
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	461a      	mov	r2, r3
 80060d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80060dc:	4413      	add	r3, r2
 80060de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80060e2:	463b      	mov	r3, r7
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	781b      	ldrb	r3, [r3, #0]
 80060e8:	011a      	lsls	r2, r3, #4
 80060ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80060ee:	4413      	add	r3, r2
 80060f0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80060f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80060f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d116      	bne.n	800612e <USB_EPStartXfer+0xb82>
 8006100:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006104:	881b      	ldrh	r3, [r3, #0]
 8006106:	b29b      	uxth	r3, r3
 8006108:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800610c:	b29a      	uxth	r2, r3
 800610e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006112:	801a      	strh	r2, [r3, #0]
 8006114:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006118:	881b      	ldrh	r3, [r3, #0]
 800611a:	b29b      	uxth	r3, r3
 800611c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006120:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006124:	b29a      	uxth	r2, r3
 8006126:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800612a:	801a      	strh	r2, [r3, #0]
 800612c:	e05f      	b.n	80061ee <USB_EPStartXfer+0xc42>
 800612e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006132:	2b3e      	cmp	r3, #62	; 0x3e
 8006134:	d818      	bhi.n	8006168 <USB_EPStartXfer+0xbbc>
 8006136:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800613a:	085b      	lsrs	r3, r3, #1
 800613c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006140:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006144:	f003 0301 	and.w	r3, r3, #1
 8006148:	2b00      	cmp	r3, #0
 800614a:	d004      	beq.n	8006156 <USB_EPStartXfer+0xbaa>
 800614c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006150:	3301      	adds	r3, #1
 8006152:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006156:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800615a:	b29b      	uxth	r3, r3
 800615c:	029b      	lsls	r3, r3, #10
 800615e:	b29a      	uxth	r2, r3
 8006160:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006164:	801a      	strh	r2, [r3, #0]
 8006166:	e042      	b.n	80061ee <USB_EPStartXfer+0xc42>
 8006168:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800616c:	095b      	lsrs	r3, r3, #5
 800616e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006172:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006176:	f003 031f 	and.w	r3, r3, #31
 800617a:	2b00      	cmp	r3, #0
 800617c:	d104      	bne.n	8006188 <USB_EPStartXfer+0xbdc>
 800617e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006182:	3b01      	subs	r3, #1
 8006184:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006188:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800618c:	b29b      	uxth	r3, r3
 800618e:	029b      	lsls	r3, r3, #10
 8006190:	b29b      	uxth	r3, r3
 8006192:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006196:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800619a:	b29a      	uxth	r2, r3
 800619c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80061a0:	801a      	strh	r2, [r3, #0]
 80061a2:	e024      	b.n	80061ee <USB_EPStartXfer+0xc42>
 80061a4:	463b      	mov	r3, r7
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	785b      	ldrb	r3, [r3, #1]
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d11f      	bne.n	80061ee <USB_EPStartXfer+0xc42>
 80061ae:	1d3b      	adds	r3, r7, #4
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80061b6:	1d3b      	adds	r3, r7, #4
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061be:	b29b      	uxth	r3, r3
 80061c0:	461a      	mov	r2, r3
 80061c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80061c6:	4413      	add	r3, r2
 80061c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80061cc:	463b      	mov	r3, r7
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	781b      	ldrb	r3, [r3, #0]
 80061d2:	011a      	lsls	r2, r3, #4
 80061d4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80061d8:	4413      	add	r3, r2
 80061da:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80061de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80061e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061e6:	b29a      	uxth	r2, r3
 80061e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80061ec:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80061ee:	463b      	mov	r3, r7
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	891b      	ldrh	r3, [r3, #8]
 80061f4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80061f8:	463b      	mov	r3, r7
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	6959      	ldr	r1, [r3, #20]
 80061fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006202:	b29b      	uxth	r3, r3
 8006204:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006208:	1d38      	adds	r0, r7, #4
 800620a:	6800      	ldr	r0, [r0, #0]
 800620c:	f000 fe03 	bl	8006e16 <USB_WritePMA>
          ep->xfer_buff += len;
 8006210:	463b      	mov	r3, r7
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	695a      	ldr	r2, [r3, #20]
 8006216:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800621a:	441a      	add	r2, r3
 800621c:	463b      	mov	r3, r7
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8006222:	463b      	mov	r3, r7
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	6a1a      	ldr	r2, [r3, #32]
 8006228:	463b      	mov	r3, r7
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	691b      	ldr	r3, [r3, #16]
 800622e:	429a      	cmp	r2, r3
 8006230:	d909      	bls.n	8006246 <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 8006232:	463b      	mov	r3, r7
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	6a1a      	ldr	r2, [r3, #32]
 8006238:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800623c:	1ad2      	subs	r2, r2, r3
 800623e:	463b      	mov	r3, r7
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	621a      	str	r2, [r3, #32]
 8006244:	e008      	b.n	8006258 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 8006246:	463b      	mov	r3, r7
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	6a1b      	ldr	r3, [r3, #32]
 800624c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8006250:	463b      	mov	r3, r7
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	2200      	movs	r2, #0
 8006256:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8006258:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800625c:	2b00      	cmp	r3, #0
 800625e:	f000 80ab 	beq.w	80063b8 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006262:	1d3b      	adds	r3, r7, #4
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800626a:	463b      	mov	r3, r7
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	785b      	ldrb	r3, [r3, #1]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d16f      	bne.n	8006354 <USB_EPStartXfer+0xda8>
 8006274:	1d3b      	adds	r3, r7, #4
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800627c:	1d3b      	adds	r3, r7, #4
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006284:	b29b      	uxth	r3, r3
 8006286:	461a      	mov	r2, r3
 8006288:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800628c:	4413      	add	r3, r2
 800628e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006292:	463b      	mov	r3, r7
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	011a      	lsls	r2, r3, #4
 800629a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800629e:	4413      	add	r3, r2
 80062a0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80062a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80062a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d116      	bne.n	80062de <USB_EPStartXfer+0xd32>
 80062b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80062b4:	881b      	ldrh	r3, [r3, #0]
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80062bc:	b29a      	uxth	r2, r3
 80062be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80062c2:	801a      	strh	r2, [r3, #0]
 80062c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80062c8:	881b      	ldrh	r3, [r3, #0]
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062d4:	b29a      	uxth	r2, r3
 80062d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80062da:	801a      	strh	r2, [r3, #0]
 80062dc:	e05b      	b.n	8006396 <USB_EPStartXfer+0xdea>
 80062de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062e2:	2b3e      	cmp	r3, #62	; 0x3e
 80062e4:	d818      	bhi.n	8006318 <USB_EPStartXfer+0xd6c>
 80062e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062ea:	085b      	lsrs	r3, r3, #1
 80062ec:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80062f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062f4:	f003 0301 	and.w	r3, r3, #1
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d004      	beq.n	8006306 <USB_EPStartXfer+0xd5a>
 80062fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006300:	3301      	adds	r3, #1
 8006302:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006306:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800630a:	b29b      	uxth	r3, r3
 800630c:	029b      	lsls	r3, r3, #10
 800630e:	b29a      	uxth	r2, r3
 8006310:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006314:	801a      	strh	r2, [r3, #0]
 8006316:	e03e      	b.n	8006396 <USB_EPStartXfer+0xdea>
 8006318:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800631c:	095b      	lsrs	r3, r3, #5
 800631e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006322:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006326:	f003 031f 	and.w	r3, r3, #31
 800632a:	2b00      	cmp	r3, #0
 800632c:	d104      	bne.n	8006338 <USB_EPStartXfer+0xd8c>
 800632e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006332:	3b01      	subs	r3, #1
 8006334:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006338:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800633c:	b29b      	uxth	r3, r3
 800633e:	029b      	lsls	r3, r3, #10
 8006340:	b29b      	uxth	r3, r3
 8006342:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006346:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800634a:	b29a      	uxth	r2, r3
 800634c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006350:	801a      	strh	r2, [r3, #0]
 8006352:	e020      	b.n	8006396 <USB_EPStartXfer+0xdea>
 8006354:	463b      	mov	r3, r7
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	785b      	ldrb	r3, [r3, #1]
 800635a:	2b01      	cmp	r3, #1
 800635c:	d11b      	bne.n	8006396 <USB_EPStartXfer+0xdea>
 800635e:	1d3b      	adds	r3, r7, #4
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006366:	b29b      	uxth	r3, r3
 8006368:	461a      	mov	r2, r3
 800636a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800636e:	4413      	add	r3, r2
 8006370:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006374:	463b      	mov	r3, r7
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	011a      	lsls	r2, r3, #4
 800637c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006380:	4413      	add	r3, r2
 8006382:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006386:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800638a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800638e:	b29a      	uxth	r2, r3
 8006390:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006394:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006396:	463b      	mov	r3, r7
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	895b      	ldrh	r3, [r3, #10]
 800639c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80063a0:	463b      	mov	r3, r7
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	6959      	ldr	r1, [r3, #20]
 80063a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80063b0:	1d38      	adds	r0, r7, #4
 80063b2:	6800      	ldr	r0, [r0, #0]
 80063b4:	f000 fd2f 	bl	8006e16 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80063b8:	1d3b      	adds	r3, r7, #4
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	463b      	mov	r3, r7
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	009b      	lsls	r3, r3, #2
 80063c4:	4413      	add	r3, r2
 80063c6:	881b      	ldrh	r3, [r3, #0]
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	f107 020a 	add.w	r2, r7, #10
 80063ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063d6:	8013      	strh	r3, [r2, #0]
 80063d8:	f107 030a 	add.w	r3, r7, #10
 80063dc:	f107 020a 	add.w	r2, r7, #10
 80063e0:	8812      	ldrh	r2, [r2, #0]
 80063e2:	f082 0210 	eor.w	r2, r2, #16
 80063e6:	801a      	strh	r2, [r3, #0]
 80063e8:	f107 030a 	add.w	r3, r7, #10
 80063ec:	f107 020a 	add.w	r2, r7, #10
 80063f0:	8812      	ldrh	r2, [r2, #0]
 80063f2:	f082 0220 	eor.w	r2, r2, #32
 80063f6:	801a      	strh	r2, [r3, #0]
 80063f8:	1d3b      	adds	r3, r7, #4
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	463b      	mov	r3, r7
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	009b      	lsls	r3, r3, #2
 8006404:	441a      	add	r2, r3
 8006406:	f107 030a 	add.w	r3, r7, #10
 800640a:	881b      	ldrh	r3, [r3, #0]
 800640c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006410:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006414:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006418:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800641c:	b29b      	uxth	r3, r3
 800641e:	8013      	strh	r3, [r2, #0]
 8006420:	e3b5      	b.n	8006b8e <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006422:	463b      	mov	r3, r7
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	7b1b      	ldrb	r3, [r3, #12]
 8006428:	2b00      	cmp	r3, #0
 800642a:	f040 8090 	bne.w	800654e <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800642e:	463b      	mov	r3, r7
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	699a      	ldr	r2, [r3, #24]
 8006434:	463b      	mov	r3, r7
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	691b      	ldr	r3, [r3, #16]
 800643a:	429a      	cmp	r2, r3
 800643c:	d90e      	bls.n	800645c <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 800643e:	463b      	mov	r3, r7
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	691b      	ldr	r3, [r3, #16]
 8006444:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8006448:	463b      	mov	r3, r7
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	699a      	ldr	r2, [r3, #24]
 800644e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006452:	1ad2      	subs	r2, r2, r3
 8006454:	463b      	mov	r3, r7
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	619a      	str	r2, [r3, #24]
 800645a:	e008      	b.n	800646e <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 800645c:	463b      	mov	r3, r7
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	699b      	ldr	r3, [r3, #24]
 8006462:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8006466:	463b      	mov	r3, r7
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	2200      	movs	r2, #0
 800646c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800646e:	1d3b      	adds	r3, r7, #4
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006476:	1d3b      	adds	r3, r7, #4
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800647e:	b29b      	uxth	r3, r3
 8006480:	461a      	mov	r2, r3
 8006482:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006486:	4413      	add	r3, r2
 8006488:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800648c:	463b      	mov	r3, r7
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	781b      	ldrb	r3, [r3, #0]
 8006492:	011a      	lsls	r2, r3, #4
 8006494:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006498:	4413      	add	r3, r2
 800649a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800649e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80064a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d116      	bne.n	80064d8 <USB_EPStartXfer+0xf2c>
 80064aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80064ae:	881b      	ldrh	r3, [r3, #0]
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80064b6:	b29a      	uxth	r2, r3
 80064b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80064bc:	801a      	strh	r2, [r3, #0]
 80064be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80064c2:	881b      	ldrh	r3, [r3, #0]
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064ce:	b29a      	uxth	r2, r3
 80064d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80064d4:	801a      	strh	r2, [r3, #0]
 80064d6:	e32c      	b.n	8006b32 <USB_EPStartXfer+0x1586>
 80064d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064dc:	2b3e      	cmp	r3, #62	; 0x3e
 80064de:	d818      	bhi.n	8006512 <USB_EPStartXfer+0xf66>
 80064e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064e4:	085b      	lsrs	r3, r3, #1
 80064e6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80064ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064ee:	f003 0301 	and.w	r3, r3, #1
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d004      	beq.n	8006500 <USB_EPStartXfer+0xf54>
 80064f6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80064fa:	3301      	adds	r3, #1
 80064fc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006500:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006504:	b29b      	uxth	r3, r3
 8006506:	029b      	lsls	r3, r3, #10
 8006508:	b29a      	uxth	r2, r3
 800650a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800650e:	801a      	strh	r2, [r3, #0]
 8006510:	e30f      	b.n	8006b32 <USB_EPStartXfer+0x1586>
 8006512:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006516:	095b      	lsrs	r3, r3, #5
 8006518:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800651c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006520:	f003 031f 	and.w	r3, r3, #31
 8006524:	2b00      	cmp	r3, #0
 8006526:	d104      	bne.n	8006532 <USB_EPStartXfer+0xf86>
 8006528:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800652c:	3b01      	subs	r3, #1
 800652e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006532:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006536:	b29b      	uxth	r3, r3
 8006538:	029b      	lsls	r3, r3, #10
 800653a:	b29b      	uxth	r3, r3
 800653c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006540:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006544:	b29a      	uxth	r2, r3
 8006546:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800654a:	801a      	strh	r2, [r3, #0]
 800654c:	e2f1      	b.n	8006b32 <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800654e:	463b      	mov	r3, r7
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	78db      	ldrb	r3, [r3, #3]
 8006554:	2b02      	cmp	r3, #2
 8006556:	f040 818f 	bne.w	8006878 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800655a:	463b      	mov	r3, r7
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	785b      	ldrb	r3, [r3, #1]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d175      	bne.n	8006650 <USB_EPStartXfer+0x10a4>
 8006564:	1d3b      	adds	r3, r7, #4
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800656c:	1d3b      	adds	r3, r7, #4
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006574:	b29b      	uxth	r3, r3
 8006576:	461a      	mov	r2, r3
 8006578:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800657c:	4413      	add	r3, r2
 800657e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006582:	463b      	mov	r3, r7
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	781b      	ldrb	r3, [r3, #0]
 8006588:	011a      	lsls	r2, r3, #4
 800658a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800658e:	4413      	add	r3, r2
 8006590:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006594:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006598:	463b      	mov	r3, r7
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	691b      	ldr	r3, [r3, #16]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d116      	bne.n	80065d0 <USB_EPStartXfer+0x1024>
 80065a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80065a6:	881b      	ldrh	r3, [r3, #0]
 80065a8:	b29b      	uxth	r3, r3
 80065aa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80065ae:	b29a      	uxth	r2, r3
 80065b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80065b4:	801a      	strh	r2, [r3, #0]
 80065b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80065ba:	881b      	ldrh	r3, [r3, #0]
 80065bc:	b29b      	uxth	r3, r3
 80065be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065c6:	b29a      	uxth	r2, r3
 80065c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80065cc:	801a      	strh	r2, [r3, #0]
 80065ce:	e065      	b.n	800669c <USB_EPStartXfer+0x10f0>
 80065d0:	463b      	mov	r3, r7
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	691b      	ldr	r3, [r3, #16]
 80065d6:	2b3e      	cmp	r3, #62	; 0x3e
 80065d8:	d81a      	bhi.n	8006610 <USB_EPStartXfer+0x1064>
 80065da:	463b      	mov	r3, r7
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	691b      	ldr	r3, [r3, #16]
 80065e0:	085b      	lsrs	r3, r3, #1
 80065e2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80065e6:	463b      	mov	r3, r7
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	691b      	ldr	r3, [r3, #16]
 80065ec:	f003 0301 	and.w	r3, r3, #1
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d004      	beq.n	80065fe <USB_EPStartXfer+0x1052>
 80065f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065f8:	3301      	adds	r3, #1
 80065fa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80065fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006602:	b29b      	uxth	r3, r3
 8006604:	029b      	lsls	r3, r3, #10
 8006606:	b29a      	uxth	r2, r3
 8006608:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800660c:	801a      	strh	r2, [r3, #0]
 800660e:	e045      	b.n	800669c <USB_EPStartXfer+0x10f0>
 8006610:	463b      	mov	r3, r7
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	691b      	ldr	r3, [r3, #16]
 8006616:	095b      	lsrs	r3, r3, #5
 8006618:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800661c:	463b      	mov	r3, r7
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	691b      	ldr	r3, [r3, #16]
 8006622:	f003 031f 	and.w	r3, r3, #31
 8006626:	2b00      	cmp	r3, #0
 8006628:	d104      	bne.n	8006634 <USB_EPStartXfer+0x1088>
 800662a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800662e:	3b01      	subs	r3, #1
 8006630:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006634:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006638:	b29b      	uxth	r3, r3
 800663a:	029b      	lsls	r3, r3, #10
 800663c:	b29b      	uxth	r3, r3
 800663e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006642:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006646:	b29a      	uxth	r2, r3
 8006648:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800664c:	801a      	strh	r2, [r3, #0]
 800664e:	e025      	b.n	800669c <USB_EPStartXfer+0x10f0>
 8006650:	463b      	mov	r3, r7
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	785b      	ldrb	r3, [r3, #1]
 8006656:	2b01      	cmp	r3, #1
 8006658:	d120      	bne.n	800669c <USB_EPStartXfer+0x10f0>
 800665a:	1d3b      	adds	r3, r7, #4
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006662:	1d3b      	adds	r3, r7, #4
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800666a:	b29b      	uxth	r3, r3
 800666c:	461a      	mov	r2, r3
 800666e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006672:	4413      	add	r3, r2
 8006674:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006678:	463b      	mov	r3, r7
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	011a      	lsls	r2, r3, #4
 8006680:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006684:	4413      	add	r3, r2
 8006686:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800668a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800668e:	463b      	mov	r3, r7
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	691b      	ldr	r3, [r3, #16]
 8006694:	b29a      	uxth	r2, r3
 8006696:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800669a:	801a      	strh	r2, [r3, #0]
 800669c:	1d3b      	adds	r3, r7, #4
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80066a4:	463b      	mov	r3, r7
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	785b      	ldrb	r3, [r3, #1]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d175      	bne.n	800679a <USB_EPStartXfer+0x11ee>
 80066ae:	1d3b      	adds	r3, r7, #4
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80066b6:	1d3b      	adds	r3, r7, #4
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066be:	b29b      	uxth	r3, r3
 80066c0:	461a      	mov	r2, r3
 80066c2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80066c6:	4413      	add	r3, r2
 80066c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80066cc:	463b      	mov	r3, r7
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	011a      	lsls	r2, r3, #4
 80066d4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80066d8:	4413      	add	r3, r2
 80066da:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80066de:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80066e2:	463b      	mov	r3, r7
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	691b      	ldr	r3, [r3, #16]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d116      	bne.n	800671a <USB_EPStartXfer+0x116e>
 80066ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80066f0:	881b      	ldrh	r3, [r3, #0]
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80066f8:	b29a      	uxth	r2, r3
 80066fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80066fe:	801a      	strh	r2, [r3, #0]
 8006700:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006704:	881b      	ldrh	r3, [r3, #0]
 8006706:	b29b      	uxth	r3, r3
 8006708:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800670c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006710:	b29a      	uxth	r2, r3
 8006712:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006716:	801a      	strh	r2, [r3, #0]
 8006718:	e061      	b.n	80067de <USB_EPStartXfer+0x1232>
 800671a:	463b      	mov	r3, r7
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	691b      	ldr	r3, [r3, #16]
 8006720:	2b3e      	cmp	r3, #62	; 0x3e
 8006722:	d81a      	bhi.n	800675a <USB_EPStartXfer+0x11ae>
 8006724:	463b      	mov	r3, r7
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	691b      	ldr	r3, [r3, #16]
 800672a:	085b      	lsrs	r3, r3, #1
 800672c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006730:	463b      	mov	r3, r7
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	691b      	ldr	r3, [r3, #16]
 8006736:	f003 0301 	and.w	r3, r3, #1
 800673a:	2b00      	cmp	r3, #0
 800673c:	d004      	beq.n	8006748 <USB_EPStartXfer+0x119c>
 800673e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006742:	3301      	adds	r3, #1
 8006744:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006748:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800674c:	b29b      	uxth	r3, r3
 800674e:	029b      	lsls	r3, r3, #10
 8006750:	b29a      	uxth	r2, r3
 8006752:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006756:	801a      	strh	r2, [r3, #0]
 8006758:	e041      	b.n	80067de <USB_EPStartXfer+0x1232>
 800675a:	463b      	mov	r3, r7
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	691b      	ldr	r3, [r3, #16]
 8006760:	095b      	lsrs	r3, r3, #5
 8006762:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006766:	463b      	mov	r3, r7
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	691b      	ldr	r3, [r3, #16]
 800676c:	f003 031f 	and.w	r3, r3, #31
 8006770:	2b00      	cmp	r3, #0
 8006772:	d104      	bne.n	800677e <USB_EPStartXfer+0x11d2>
 8006774:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006778:	3b01      	subs	r3, #1
 800677a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800677e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006782:	b29b      	uxth	r3, r3
 8006784:	029b      	lsls	r3, r3, #10
 8006786:	b29b      	uxth	r3, r3
 8006788:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800678c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006790:	b29a      	uxth	r2, r3
 8006792:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006796:	801a      	strh	r2, [r3, #0]
 8006798:	e021      	b.n	80067de <USB_EPStartXfer+0x1232>
 800679a:	463b      	mov	r3, r7
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	785b      	ldrb	r3, [r3, #1]
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d11c      	bne.n	80067de <USB_EPStartXfer+0x1232>
 80067a4:	1d3b      	adds	r3, r7, #4
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	461a      	mov	r2, r3
 80067b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80067b4:	4413      	add	r3, r2
 80067b6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80067ba:	463b      	mov	r3, r7
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	781b      	ldrb	r3, [r3, #0]
 80067c0:	011a      	lsls	r2, r3, #4
 80067c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80067c6:	4413      	add	r3, r2
 80067c8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80067cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80067d0:	463b      	mov	r3, r7
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	691b      	ldr	r3, [r3, #16]
 80067d6:	b29a      	uxth	r2, r3
 80067d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80067dc:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80067de:	463b      	mov	r3, r7
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	69db      	ldr	r3, [r3, #28]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	f000 81a4 	beq.w	8006b32 <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80067ea:	1d3b      	adds	r3, r7, #4
 80067ec:	681a      	ldr	r2, [r3, #0]
 80067ee:	463b      	mov	r3, r7
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	009b      	lsls	r3, r3, #2
 80067f6:	4413      	add	r3, r2
 80067f8:	881b      	ldrh	r3, [r3, #0]
 80067fa:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80067fe:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006802:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006806:	2b00      	cmp	r3, #0
 8006808:	d005      	beq.n	8006816 <USB_EPStartXfer+0x126a>
 800680a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800680e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006812:	2b00      	cmp	r3, #0
 8006814:	d10d      	bne.n	8006832 <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006816:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800681a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800681e:	2b00      	cmp	r3, #0
 8006820:	f040 8187 	bne.w	8006b32 <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006824:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800682c:	2b00      	cmp	r3, #0
 800682e:	f040 8180 	bne.w	8006b32 <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006832:	1d3b      	adds	r3, r7, #4
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	463b      	mov	r3, r7
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	781b      	ldrb	r3, [r3, #0]
 800683c:	009b      	lsls	r3, r3, #2
 800683e:	4413      	add	r3, r2
 8006840:	881b      	ldrh	r3, [r3, #0]
 8006842:	b29b      	uxth	r3, r3
 8006844:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006848:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800684c:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8006850:	1d3b      	adds	r3, r7, #4
 8006852:	681a      	ldr	r2, [r3, #0]
 8006854:	463b      	mov	r3, r7
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	441a      	add	r2, r3
 800685e:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006862:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006866:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800686a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800686e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006872:	b29b      	uxth	r3, r3
 8006874:	8013      	strh	r3, [r2, #0]
 8006876:	e15c      	b.n	8006b32 <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006878:	463b      	mov	r3, r7
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	78db      	ldrb	r3, [r3, #3]
 800687e:	2b01      	cmp	r3, #1
 8006880:	f040 8155 	bne.w	8006b2e <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006884:	463b      	mov	r3, r7
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	699a      	ldr	r2, [r3, #24]
 800688a:	463b      	mov	r3, r7
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	691b      	ldr	r3, [r3, #16]
 8006890:	429a      	cmp	r2, r3
 8006892:	d90e      	bls.n	80068b2 <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8006894:	463b      	mov	r3, r7
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	691b      	ldr	r3, [r3, #16]
 800689a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800689e:	463b      	mov	r3, r7
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	699a      	ldr	r2, [r3, #24]
 80068a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068a8:	1ad2      	subs	r2, r2, r3
 80068aa:	463b      	mov	r3, r7
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	619a      	str	r2, [r3, #24]
 80068b0:	e008      	b.n	80068c4 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 80068b2:	463b      	mov	r3, r7
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	699b      	ldr	r3, [r3, #24]
 80068b8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80068bc:	463b      	mov	r3, r7
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	2200      	movs	r2, #0
 80068c2:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80068c4:	463b      	mov	r3, r7
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	785b      	ldrb	r3, [r3, #1]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d16f      	bne.n	80069ae <USB_EPStartXfer+0x1402>
 80068ce:	1d3b      	adds	r3, r7, #4
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80068d6:	1d3b      	adds	r3, r7, #4
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068de:	b29b      	uxth	r3, r3
 80068e0:	461a      	mov	r2, r3
 80068e2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80068e6:	4413      	add	r3, r2
 80068e8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80068ec:	463b      	mov	r3, r7
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	781b      	ldrb	r3, [r3, #0]
 80068f2:	011a      	lsls	r2, r3, #4
 80068f4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80068f8:	4413      	add	r3, r2
 80068fa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80068fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006902:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006906:	2b00      	cmp	r3, #0
 8006908:	d116      	bne.n	8006938 <USB_EPStartXfer+0x138c>
 800690a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800690e:	881b      	ldrh	r3, [r3, #0]
 8006910:	b29b      	uxth	r3, r3
 8006912:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006916:	b29a      	uxth	r2, r3
 8006918:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800691c:	801a      	strh	r2, [r3, #0]
 800691e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006922:	881b      	ldrh	r3, [r3, #0]
 8006924:	b29b      	uxth	r3, r3
 8006926:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800692a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800692e:	b29a      	uxth	r2, r3
 8006930:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006934:	801a      	strh	r2, [r3, #0]
 8006936:	e05f      	b.n	80069f8 <USB_EPStartXfer+0x144c>
 8006938:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800693c:	2b3e      	cmp	r3, #62	; 0x3e
 800693e:	d818      	bhi.n	8006972 <USB_EPStartXfer+0x13c6>
 8006940:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006944:	085b      	lsrs	r3, r3, #1
 8006946:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800694a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800694e:	f003 0301 	and.w	r3, r3, #1
 8006952:	2b00      	cmp	r3, #0
 8006954:	d004      	beq.n	8006960 <USB_EPStartXfer+0x13b4>
 8006956:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800695a:	3301      	adds	r3, #1
 800695c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006960:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006964:	b29b      	uxth	r3, r3
 8006966:	029b      	lsls	r3, r3, #10
 8006968:	b29a      	uxth	r2, r3
 800696a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800696e:	801a      	strh	r2, [r3, #0]
 8006970:	e042      	b.n	80069f8 <USB_EPStartXfer+0x144c>
 8006972:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006976:	095b      	lsrs	r3, r3, #5
 8006978:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800697c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006980:	f003 031f 	and.w	r3, r3, #31
 8006984:	2b00      	cmp	r3, #0
 8006986:	d104      	bne.n	8006992 <USB_EPStartXfer+0x13e6>
 8006988:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800698c:	3b01      	subs	r3, #1
 800698e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006992:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006996:	b29b      	uxth	r3, r3
 8006998:	029b      	lsls	r3, r3, #10
 800699a:	b29b      	uxth	r3, r3
 800699c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069a4:	b29a      	uxth	r2, r3
 80069a6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80069aa:	801a      	strh	r2, [r3, #0]
 80069ac:	e024      	b.n	80069f8 <USB_EPStartXfer+0x144c>
 80069ae:	463b      	mov	r3, r7
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	785b      	ldrb	r3, [r3, #1]
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	d11f      	bne.n	80069f8 <USB_EPStartXfer+0x144c>
 80069b8:	1d3b      	adds	r3, r7, #4
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80069c0:	1d3b      	adds	r3, r7, #4
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	461a      	mov	r2, r3
 80069cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069d0:	4413      	add	r3, r2
 80069d2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80069d6:	463b      	mov	r3, r7
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	011a      	lsls	r2, r3, #4
 80069de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069e2:	4413      	add	r3, r2
 80069e4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80069e8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80069ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069f0:	b29a      	uxth	r2, r3
 80069f2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80069f6:	801a      	strh	r2, [r3, #0]
 80069f8:	1d3b      	adds	r3, r7, #4
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006a00:	463b      	mov	r3, r7
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	785b      	ldrb	r3, [r3, #1]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d16f      	bne.n	8006aea <USB_EPStartXfer+0x153e>
 8006a0a:	1d3b      	adds	r3, r7, #4
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006a12:	1d3b      	adds	r3, r7, #4
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a22:	4413      	add	r3, r2
 8006a24:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006a28:	463b      	mov	r3, r7
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	011a      	lsls	r2, r3, #4
 8006a30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a34:	4413      	add	r3, r2
 8006a36:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006a3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006a3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d116      	bne.n	8006a74 <USB_EPStartXfer+0x14c8>
 8006a46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a4a:	881b      	ldrh	r3, [r3, #0]
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a52:	b29a      	uxth	r2, r3
 8006a54:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a58:	801a      	strh	r2, [r3, #0]
 8006a5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a5e:	881b      	ldrh	r3, [r3, #0]
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a6a:	b29a      	uxth	r2, r3
 8006a6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a70:	801a      	strh	r2, [r3, #0]
 8006a72:	e05e      	b.n	8006b32 <USB_EPStartXfer+0x1586>
 8006a74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a78:	2b3e      	cmp	r3, #62	; 0x3e
 8006a7a:	d818      	bhi.n	8006aae <USB_EPStartXfer+0x1502>
 8006a7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a80:	085b      	lsrs	r3, r3, #1
 8006a82:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006a86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a8a:	f003 0301 	and.w	r3, r3, #1
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d004      	beq.n	8006a9c <USB_EPStartXfer+0x14f0>
 8006a92:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006a96:	3301      	adds	r3, #1
 8006a98:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006a9c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	029b      	lsls	r3, r3, #10
 8006aa4:	b29a      	uxth	r2, r3
 8006aa6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006aaa:	801a      	strh	r2, [r3, #0]
 8006aac:	e041      	b.n	8006b32 <USB_EPStartXfer+0x1586>
 8006aae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ab2:	095b      	lsrs	r3, r3, #5
 8006ab4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006ab8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006abc:	f003 031f 	and.w	r3, r3, #31
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d104      	bne.n	8006ace <USB_EPStartXfer+0x1522>
 8006ac4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006ac8:	3b01      	subs	r3, #1
 8006aca:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006ace:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006ad2:	b29b      	uxth	r3, r3
 8006ad4:	029b      	lsls	r3, r3, #10
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006adc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ae0:	b29a      	uxth	r2, r3
 8006ae2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ae6:	801a      	strh	r2, [r3, #0]
 8006ae8:	e023      	b.n	8006b32 <USB_EPStartXfer+0x1586>
 8006aea:	463b      	mov	r3, r7
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	785b      	ldrb	r3, [r3, #1]
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d11e      	bne.n	8006b32 <USB_EPStartXfer+0x1586>
 8006af4:	1d3b      	adds	r3, r7, #4
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	461a      	mov	r2, r3
 8006b00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b04:	4413      	add	r3, r2
 8006b06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006b0a:	463b      	mov	r3, r7
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	781b      	ldrb	r3, [r3, #0]
 8006b10:	011a      	lsls	r2, r3, #4
 8006b12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b16:	4413      	add	r3, r2
 8006b18:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006b1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006b20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b24:	b29a      	uxth	r2, r3
 8006b26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b2a:	801a      	strh	r2, [r3, #0]
 8006b2c:	e001      	b.n	8006b32 <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	e02e      	b.n	8006b90 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006b32:	1d3b      	adds	r3, r7, #4
 8006b34:	681a      	ldr	r2, [r3, #0]
 8006b36:	463b      	mov	r3, r7
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	009b      	lsls	r3, r3, #2
 8006b3e:	4413      	add	r3, r2
 8006b40:	881b      	ldrh	r3, [r3, #0]
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b4c:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006b50:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006b54:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006b58:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006b5c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006b60:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006b64:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006b68:	1d3b      	adds	r3, r7, #4
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	463b      	mov	r3, r7
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	441a      	add	r2, r3
 8006b76:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006b7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006b8e:	2300      	movs	r3, #0
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}

08006b9a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006b9a:	b480      	push	{r7}
 8006b9c:	b085      	sub	sp, #20
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	6078      	str	r0, [r7, #4]
 8006ba2:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	785b      	ldrb	r3, [r3, #1]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d020      	beq.n	8006bee <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006bac:	687a      	ldr	r2, [r7, #4]
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	009b      	lsls	r3, r3, #2
 8006bb4:	4413      	add	r3, r2
 8006bb6:	881b      	ldrh	r3, [r3, #0]
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bc2:	81bb      	strh	r3, [r7, #12]
 8006bc4:	89bb      	ldrh	r3, [r7, #12]
 8006bc6:	f083 0310 	eor.w	r3, r3, #16
 8006bca:	81bb      	strh	r3, [r7, #12]
 8006bcc:	687a      	ldr	r2, [r7, #4]
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	441a      	add	r2, r3
 8006bd6:	89bb      	ldrh	r3, [r7, #12]
 8006bd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006be0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006be4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006be8:	b29b      	uxth	r3, r3
 8006bea:	8013      	strh	r3, [r2, #0]
 8006bec:	e01f      	b.n	8006c2e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	781b      	ldrb	r3, [r3, #0]
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	4413      	add	r3, r2
 8006bf8:	881b      	ldrh	r3, [r3, #0]
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c04:	81fb      	strh	r3, [r7, #14]
 8006c06:	89fb      	ldrh	r3, [r7, #14]
 8006c08:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006c0c:	81fb      	strh	r3, [r7, #14]
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	441a      	add	r2, r3
 8006c18:	89fb      	ldrh	r3, [r7, #14]
 8006c1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006c2e:	2300      	movs	r3, #0
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3714      	adds	r7, #20
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bc80      	pop	{r7}
 8006c38:	4770      	bx	lr

08006c3a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006c3a:	b480      	push	{r7}
 8006c3c:	b087      	sub	sp, #28
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	6078      	str	r0, [r7, #4]
 8006c42:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	7b1b      	ldrb	r3, [r3, #12]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	f040 809d 	bne.w	8006d88 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	785b      	ldrb	r3, [r3, #1]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d04c      	beq.n	8006cf0 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006c56:	687a      	ldr	r2, [r7, #4]
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	009b      	lsls	r3, r3, #2
 8006c5e:	4413      	add	r3, r2
 8006c60:	881b      	ldrh	r3, [r3, #0]
 8006c62:	823b      	strh	r3, [r7, #16]
 8006c64:	8a3b      	ldrh	r3, [r7, #16]
 8006c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d01b      	beq.n	8006ca6 <USB_EPClearStall+0x6c>
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	781b      	ldrb	r3, [r3, #0]
 8006c74:	009b      	lsls	r3, r3, #2
 8006c76:	4413      	add	r3, r2
 8006c78:	881b      	ldrh	r3, [r3, #0]
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c84:	81fb      	strh	r3, [r7, #14]
 8006c86:	687a      	ldr	r2, [r7, #4]
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	781b      	ldrb	r3, [r3, #0]
 8006c8c:	009b      	lsls	r3, r3, #2
 8006c8e:	441a      	add	r2, r3
 8006c90:	89fb      	ldrh	r3, [r7, #14]
 8006c92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c9e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	78db      	ldrb	r3, [r3, #3]
 8006caa:	2b01      	cmp	r3, #1
 8006cac:	d06c      	beq.n	8006d88 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006cae:	687a      	ldr	r2, [r7, #4]
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	4413      	add	r3, r2
 8006cb8:	881b      	ldrh	r3, [r3, #0]
 8006cba:	b29b      	uxth	r3, r3
 8006cbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cc4:	81bb      	strh	r3, [r7, #12]
 8006cc6:	89bb      	ldrh	r3, [r7, #12]
 8006cc8:	f083 0320 	eor.w	r3, r3, #32
 8006ccc:	81bb      	strh	r3, [r7, #12]
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	441a      	add	r2, r3
 8006cd8:	89bb      	ldrh	r3, [r7, #12]
 8006cda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ce2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ce6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	8013      	strh	r3, [r2, #0]
 8006cee:	e04b      	b.n	8006d88 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006cf0:	687a      	ldr	r2, [r7, #4]
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	781b      	ldrb	r3, [r3, #0]
 8006cf6:	009b      	lsls	r3, r3, #2
 8006cf8:	4413      	add	r3, r2
 8006cfa:	881b      	ldrh	r3, [r3, #0]
 8006cfc:	82fb      	strh	r3, [r7, #22]
 8006cfe:	8afb      	ldrh	r3, [r7, #22]
 8006d00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d01b      	beq.n	8006d40 <USB_EPClearStall+0x106>
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	781b      	ldrb	r3, [r3, #0]
 8006d0e:	009b      	lsls	r3, r3, #2
 8006d10:	4413      	add	r3, r2
 8006d12:	881b      	ldrh	r3, [r3, #0]
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d1e:	82bb      	strh	r3, [r7, #20]
 8006d20:	687a      	ldr	r2, [r7, #4]
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	441a      	add	r2, r3
 8006d2a:	8abb      	ldrh	r3, [r7, #20]
 8006d2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d3c:	b29b      	uxth	r3, r3
 8006d3e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006d40:	687a      	ldr	r2, [r7, #4]
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	781b      	ldrb	r3, [r3, #0]
 8006d46:	009b      	lsls	r3, r3, #2
 8006d48:	4413      	add	r3, r2
 8006d4a:	881b      	ldrh	r3, [r3, #0]
 8006d4c:	b29b      	uxth	r3, r3
 8006d4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d56:	827b      	strh	r3, [r7, #18]
 8006d58:	8a7b      	ldrh	r3, [r7, #18]
 8006d5a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006d5e:	827b      	strh	r3, [r7, #18]
 8006d60:	8a7b      	ldrh	r3, [r7, #18]
 8006d62:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006d66:	827b      	strh	r3, [r7, #18]
 8006d68:	687a      	ldr	r2, [r7, #4]
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	009b      	lsls	r3, r3, #2
 8006d70:	441a      	add	r2, r3
 8006d72:	8a7b      	ldrh	r3, [r7, #18]
 8006d74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006d88:	2300      	movs	r3, #0
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	371c      	adds	r7, #28
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bc80      	pop	{r7}
 8006d92:	4770      	bx	lr

08006d94 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b083      	sub	sp, #12
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
 8006d9c:	460b      	mov	r3, r1
 8006d9e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006da0:	78fb      	ldrb	r3, [r7, #3]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d103      	bne.n	8006dae <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2280      	movs	r2, #128	; 0x80
 8006daa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006dae:	2300      	movs	r3, #0
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	370c      	adds	r7, #12
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bc80      	pop	{r7}
 8006db8:	4770      	bx	lr

08006dba <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006dba:	b480      	push	{r7}
 8006dbc:	b083      	sub	sp, #12
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006dc2:	2300      	movs	r3, #0
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	370c      	adds	r7, #12
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bc80      	pop	{r7}
 8006dcc:	4770      	bx	lr

08006dce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006dce:	b480      	push	{r7}
 8006dd0:	b083      	sub	sp, #12
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006dd6:	2300      	movs	r3, #0
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	370c      	adds	r7, #12
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bc80      	pop	{r7}
 8006de0:	4770      	bx	lr

08006de2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006de2:	b480      	push	{r7}
 8006de4:	b085      	sub	sp, #20
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006df4:	68fb      	ldr	r3, [r7, #12]
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3714      	adds	r7, #20
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bc80      	pop	{r7}
 8006dfe:	4770      	bx	lr

08006e00 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b083      	sub	sp, #12
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006e0a:	2300      	movs	r3, #0
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	370c      	adds	r7, #12
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bc80      	pop	{r7}
 8006e14:	4770      	bx	lr

08006e16 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006e16:	b480      	push	{r7}
 8006e18:	b08d      	sub	sp, #52	; 0x34
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	60f8      	str	r0, [r7, #12]
 8006e1e:	60b9      	str	r1, [r7, #8]
 8006e20:	4611      	mov	r1, r2
 8006e22:	461a      	mov	r2, r3
 8006e24:	460b      	mov	r3, r1
 8006e26:	80fb      	strh	r3, [r7, #6]
 8006e28:	4613      	mov	r3, r2
 8006e2a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006e2c:	88bb      	ldrh	r3, [r7, #4]
 8006e2e:	3301      	adds	r3, #1
 8006e30:	085b      	lsrs	r3, r3, #1
 8006e32:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006e3c:	88fb      	ldrh	r3, [r7, #6]
 8006e3e:	005a      	lsls	r2, r3, #1
 8006e40:	69fb      	ldr	r3, [r7, #28]
 8006e42:	4413      	add	r3, r2
 8006e44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e48:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006e4a:	6a3b      	ldr	r3, [r7, #32]
 8006e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e4e:	e01e      	b.n	8006e8e <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e52:	781b      	ldrb	r3, [r3, #0]
 8006e54:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e58:	3301      	adds	r3, #1
 8006e5a:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5e:	781b      	ldrb	r3, [r3, #0]
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	021b      	lsls	r3, r3, #8
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	461a      	mov	r2, r3
 8006e68:	69bb      	ldr	r3, [r7, #24]
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	b29a      	uxth	r2, r3
 8006e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e74:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e78:	3302      	adds	r3, #2
 8006e7a:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e7e:	3302      	adds	r3, #2
 8006e80:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e84:	3301      	adds	r3, #1
 8006e86:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e8a:	3b01      	subs	r3, #1
 8006e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d1dd      	bne.n	8006e50 <USB_WritePMA+0x3a>
  }
}
 8006e94:	bf00      	nop
 8006e96:	bf00      	nop
 8006e98:	3734      	adds	r7, #52	; 0x34
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bc80      	pop	{r7}
 8006e9e:	4770      	bx	lr

08006ea0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b08b      	sub	sp, #44	; 0x2c
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	60f8      	str	r0, [r7, #12]
 8006ea8:	60b9      	str	r1, [r7, #8]
 8006eaa:	4611      	mov	r1, r2
 8006eac:	461a      	mov	r2, r3
 8006eae:	460b      	mov	r3, r1
 8006eb0:	80fb      	strh	r3, [r7, #6]
 8006eb2:	4613      	mov	r3, r2
 8006eb4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006eb6:	88bb      	ldrh	r3, [r7, #4]
 8006eb8:	085b      	lsrs	r3, r3, #1
 8006eba:	b29b      	uxth	r3, r3
 8006ebc:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006ec6:	88fb      	ldrh	r3, [r7, #6]
 8006ec8:	005a      	lsls	r2, r3, #1
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	4413      	add	r3, r2
 8006ece:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ed2:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006ed4:	69bb      	ldr	r3, [r7, #24]
 8006ed6:	627b      	str	r3, [r7, #36]	; 0x24
 8006ed8:	e01b      	b.n	8006f12 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006eda:	6a3b      	ldr	r3, [r7, #32]
 8006edc:	881b      	ldrh	r3, [r3, #0]
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006ee2:	6a3b      	ldr	r3, [r7, #32]
 8006ee4:	3302      	adds	r3, #2
 8006ee6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	b2da      	uxtb	r2, r3
 8006eec:	69fb      	ldr	r3, [r7, #28]
 8006eee:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006ef0:	69fb      	ldr	r3, [r7, #28]
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	0a1b      	lsrs	r3, r3, #8
 8006efa:	b2da      	uxtb	r2, r3
 8006efc:	69fb      	ldr	r3, [r7, #28]
 8006efe:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006f00:	69fb      	ldr	r3, [r7, #28]
 8006f02:	3301      	adds	r3, #1
 8006f04:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006f06:	6a3b      	ldr	r3, [r7, #32]
 8006f08:	3302      	adds	r3, #2
 8006f0a:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f0e:	3b01      	subs	r3, #1
 8006f10:	627b      	str	r3, [r7, #36]	; 0x24
 8006f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d1e0      	bne.n	8006eda <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006f18:	88bb      	ldrh	r3, [r7, #4]
 8006f1a:	f003 0301 	and.w	r3, r3, #1
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d007      	beq.n	8006f34 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006f24:	6a3b      	ldr	r3, [r7, #32]
 8006f26:	881b      	ldrh	r3, [r3, #0]
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	b2da      	uxtb	r2, r3
 8006f30:	69fb      	ldr	r3, [r7, #28]
 8006f32:	701a      	strb	r2, [r3, #0]
  }
}
 8006f34:	bf00      	nop
 8006f36:	372c      	adds	r7, #44	; 0x2c
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bc80      	pop	{r7}
 8006f3c:	4770      	bx	lr

08006f3e <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f3e:	b580      	push	{r7, lr}
 8006f40:	b082      	sub	sp, #8
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	6078      	str	r0, [r7, #4]
 8006f46:	460b      	mov	r3, r1
 8006f48:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8006f4a:	2304      	movs	r3, #4
 8006f4c:	2203      	movs	r2, #3
 8006f4e:	2181      	movs	r1, #129	; 0x81
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f001 fc62 	bl	800881a <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2201      	movs	r2, #1
 8006f5a:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8006f5c:	2010      	movs	r0, #16
 8006f5e:	f001 fd71 	bl	8008a44 <USBD_static_malloc>
 8006f62:	4602      	mov	r2, r0
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d101      	bne.n	8006f78 <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 8006f74:	2302      	movs	r3, #2
 8006f76:	e005      	b.n	8006f84 <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f7e:	2200      	movs	r2, #0
 8006f80:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 8006f82:	2300      	movs	r3, #0
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3708      	adds	r7, #8
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}

08006f8c <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b082      	sub	sp, #8
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
 8006f94:	460b      	mov	r3, r1
 8006f96:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8006f98:	2181      	movs	r1, #129	; 0x81
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f001 fc63 	bl	8008866 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d009      	beq.n	8006fc4 <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f001 fd50 	bl	8008a5c <USBD_static_free>
    pdev->pClassData = NULL;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 8006fc4:	2300      	movs	r3, #0
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3708      	adds	r7, #8
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}
	...

08006fd0 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b088      	sub	sp, #32
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fe0:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8006fea:	2300      	movs	r3, #0
 8006fec:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	781b      	ldrb	r3, [r3, #0]
 8006ff6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d045      	beq.n	800708a <USBD_HID_Setup+0xba>
 8006ffe:	2b20      	cmp	r3, #32
 8007000:	f040 80d3 	bne.w	80071aa <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	785b      	ldrb	r3, [r3, #1]
 8007008:	3b02      	subs	r3, #2
 800700a:	2b09      	cmp	r3, #9
 800700c:	d835      	bhi.n	800707a <USBD_HID_Setup+0xaa>
 800700e:	a201      	add	r2, pc, #4	; (adr r2, 8007014 <USBD_HID_Setup+0x44>)
 8007010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007014:	0800706b 	.word	0x0800706b
 8007018:	0800704b 	.word	0x0800704b
 800701c:	0800707b 	.word	0x0800707b
 8007020:	0800707b 	.word	0x0800707b
 8007024:	0800707b 	.word	0x0800707b
 8007028:	0800707b 	.word	0x0800707b
 800702c:	0800707b 	.word	0x0800707b
 8007030:	0800707b 	.word	0x0800707b
 8007034:	08007059 	.word	0x08007059
 8007038:	0800703d 	.word	0x0800703d
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	885b      	ldrh	r3, [r3, #2]
 8007040:	b2db      	uxtb	r3, r3
 8007042:	461a      	mov	r2, r3
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	601a      	str	r2, [r3, #0]
          break;
 8007048:	e01e      	b.n	8007088 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	2201      	movs	r2, #1
 800704e:	4619      	mov	r1, r3
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f001 f922 	bl	800829a <USBD_CtlSendData>
          break;
 8007056:	e017      	b.n	8007088 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	885b      	ldrh	r3, [r3, #2]
 800705c:	0a1b      	lsrs	r3, r3, #8
 800705e:	b29b      	uxth	r3, r3
 8007060:	b2db      	uxtb	r3, r3
 8007062:	461a      	mov	r2, r3
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	605a      	str	r2, [r3, #4]
          break;
 8007068:	e00e      	b.n	8007088 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	3304      	adds	r3, #4
 800706e:	2201      	movs	r2, #1
 8007070:	4619      	mov	r1, r3
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f001 f911 	bl	800829a <USBD_CtlSendData>
          break;
 8007078:	e006      	b.n	8007088 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 800707a:	6839      	ldr	r1, [r7, #0]
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f001 f8a2 	bl	80081c6 <USBD_CtlError>
          ret = USBD_FAIL;
 8007082:	2302      	movs	r3, #2
 8007084:	75fb      	strb	r3, [r7, #23]
          break;
 8007086:	bf00      	nop
      }
      break;
 8007088:	e096      	b.n	80071b8 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	785b      	ldrb	r3, [r3, #1]
 800708e:	2b0b      	cmp	r3, #11
 8007090:	f200 8083 	bhi.w	800719a <USBD_HID_Setup+0x1ca>
 8007094:	a201      	add	r2, pc, #4	; (adr r2, 800709c <USBD_HID_Setup+0xcc>)
 8007096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800709a:	bf00      	nop
 800709c:	080070cd 	.word	0x080070cd
 80070a0:	0800719b 	.word	0x0800719b
 80070a4:	0800719b 	.word	0x0800719b
 80070a8:	0800719b 	.word	0x0800719b
 80070ac:	0800719b 	.word	0x0800719b
 80070b0:	0800719b 	.word	0x0800719b
 80070b4:	080070f5 	.word	0x080070f5
 80070b8:	0800719b 	.word	0x0800719b
 80070bc:	0800719b 	.word	0x0800719b
 80070c0:	0800719b 	.word	0x0800719b
 80070c4:	0800714d 	.word	0x0800714d
 80070c8:	08007175 	.word	0x08007175
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070d2:	2b03      	cmp	r3, #3
 80070d4:	d107      	bne.n	80070e6 <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80070d6:	f107 030e 	add.w	r3, r7, #14
 80070da:	2202      	movs	r2, #2
 80070dc:	4619      	mov	r1, r3
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f001 f8db 	bl	800829a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80070e4:	e060      	b.n	80071a8 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 80070e6:	6839      	ldr	r1, [r7, #0]
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f001 f86c 	bl	80081c6 <USBD_CtlError>
            ret = USBD_FAIL;
 80070ee:	2302      	movs	r3, #2
 80070f0:	75fb      	strb	r3, [r7, #23]
          break;
 80070f2:	e059      	b.n	80071a8 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	885b      	ldrh	r3, [r3, #2]
 80070f8:	0a1b      	lsrs	r3, r3, #8
 80070fa:	b29b      	uxth	r3, r3
 80070fc:	2b22      	cmp	r3, #34	; 0x22
 80070fe:	d108      	bne.n	8007112 <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	88db      	ldrh	r3, [r3, #6]
 8007104:	2b4a      	cmp	r3, #74	; 0x4a
 8007106:	bf28      	it	cs
 8007108:	234a      	movcs	r3, #74	; 0x4a
 800710a:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 800710c:	4b2d      	ldr	r3, [pc, #180]	; (80071c4 <USBD_HID_Setup+0x1f4>)
 800710e:	61bb      	str	r3, [r7, #24]
 8007110:	e015      	b.n	800713e <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	885b      	ldrh	r3, [r3, #2]
 8007116:	0a1b      	lsrs	r3, r3, #8
 8007118:	b29b      	uxth	r3, r3
 800711a:	2b21      	cmp	r3, #33	; 0x21
 800711c:	d108      	bne.n	8007130 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 800711e:	4b2a      	ldr	r3, [pc, #168]	; (80071c8 <USBD_HID_Setup+0x1f8>)
 8007120:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	88db      	ldrh	r3, [r3, #6]
 8007126:	2b09      	cmp	r3, #9
 8007128:	bf28      	it	cs
 800712a:	2309      	movcs	r3, #9
 800712c:	83fb      	strh	r3, [r7, #30]
 800712e:	e006      	b.n	800713e <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8007130:	6839      	ldr	r1, [r7, #0]
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f001 f847 	bl	80081c6 <USBD_CtlError>
            ret = USBD_FAIL;
 8007138:	2302      	movs	r3, #2
 800713a:	75fb      	strb	r3, [r7, #23]
            break;
 800713c:	e034      	b.n	80071a8 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 800713e:	8bfb      	ldrh	r3, [r7, #30]
 8007140:	461a      	mov	r2, r3
 8007142:	69b9      	ldr	r1, [r7, #24]
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f001 f8a8 	bl	800829a <USBD_CtlSendData>
          break;
 800714a:	e02d      	b.n	80071a8 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007152:	2b03      	cmp	r3, #3
 8007154:	d107      	bne.n	8007166 <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	3308      	adds	r3, #8
 800715a:	2201      	movs	r2, #1
 800715c:	4619      	mov	r1, r3
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f001 f89b 	bl	800829a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007164:	e020      	b.n	80071a8 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8007166:	6839      	ldr	r1, [r7, #0]
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f001 f82c 	bl	80081c6 <USBD_CtlError>
            ret = USBD_FAIL;
 800716e:	2302      	movs	r3, #2
 8007170:	75fb      	strb	r3, [r7, #23]
          break;
 8007172:	e019      	b.n	80071a8 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800717a:	2b03      	cmp	r3, #3
 800717c:	d106      	bne.n	800718c <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	885b      	ldrh	r3, [r3, #2]
 8007182:	b2db      	uxtb	r3, r3
 8007184:	461a      	mov	r2, r3
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800718a:	e00d      	b.n	80071a8 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800718c:	6839      	ldr	r1, [r7, #0]
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f001 f819 	bl	80081c6 <USBD_CtlError>
            ret = USBD_FAIL;
 8007194:	2302      	movs	r3, #2
 8007196:	75fb      	strb	r3, [r7, #23]
          break;
 8007198:	e006      	b.n	80071a8 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 800719a:	6839      	ldr	r1, [r7, #0]
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f001 f812 	bl	80081c6 <USBD_CtlError>
          ret = USBD_FAIL;
 80071a2:	2302      	movs	r3, #2
 80071a4:	75fb      	strb	r3, [r7, #23]
          break;
 80071a6:	bf00      	nop
      }
      break;
 80071a8:	e006      	b.n	80071b8 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 80071aa:	6839      	ldr	r1, [r7, #0]
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f001 f80a 	bl	80081c6 <USBD_CtlError>
      ret = USBD_FAIL;
 80071b2:	2302      	movs	r3, #2
 80071b4:	75fb      	strb	r3, [r7, #23]
      break;
 80071b6:	bf00      	nop
  }

  return ret;
 80071b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3720      	adds	r7, #32
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}
 80071c2:	bf00      	nop
 80071c4:	200000c8 	.word	0x200000c8
 80071c8:	200000b0 	.word	0x200000b0

080071cc <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b083      	sub	sp, #12
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2222      	movs	r2, #34	; 0x22
 80071d8:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 80071da:	4b03      	ldr	r3, [pc, #12]	; (80071e8 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 80071dc:	4618      	mov	r0, r3
 80071de:	370c      	adds	r7, #12
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bc80      	pop	{r7}
 80071e4:	4770      	bx	lr
 80071e6:	bf00      	nop
 80071e8:	20000044 	.word	0x20000044

080071ec <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b083      	sub	sp, #12
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2222      	movs	r2, #34	; 0x22
 80071f8:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 80071fa:	4b03      	ldr	r3, [pc, #12]	; (8007208 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	370c      	adds	r7, #12
 8007200:	46bd      	mov	sp, r7
 8007202:	bc80      	pop	{r7}
 8007204:	4770      	bx	lr
 8007206:	bf00      	nop
 8007208:	20000068 	.word	0x20000068

0800720c <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800720c:	b480      	push	{r7}
 800720e:	b083      	sub	sp, #12
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2222      	movs	r2, #34	; 0x22
 8007218:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 800721a:	4b03      	ldr	r3, [pc, #12]	; (8007228 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 800721c:	4618      	mov	r0, r3
 800721e:	370c      	adds	r7, #12
 8007220:	46bd      	mov	sp, r7
 8007222:	bc80      	pop	{r7}
 8007224:	4770      	bx	lr
 8007226:	bf00      	nop
 8007228:	2000008c 	.word	0x2000008c

0800722c <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 800722c:	b480      	push	{r7}
 800722e:	b083      	sub	sp, #12
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	460b      	mov	r3, r1
 8007236:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800723e:	2200      	movs	r2, #0
 8007240:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 8007242:	2300      	movs	r3, #0
}
 8007244:	4618      	mov	r0, r3
 8007246:	370c      	adds	r7, #12
 8007248:	46bd      	mov	sp, r7
 800724a:	bc80      	pop	{r7}
 800724c:	4770      	bx	lr
	...

08007250 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8007250:	b480      	push	{r7}
 8007252:	b083      	sub	sp, #12
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	220a      	movs	r2, #10
 800725c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 800725e:	4b03      	ldr	r3, [pc, #12]	; (800726c <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8007260:	4618      	mov	r0, r3
 8007262:	370c      	adds	r7, #12
 8007264:	46bd      	mov	sp, r7
 8007266:	bc80      	pop	{r7}
 8007268:	4770      	bx	lr
 800726a:	bf00      	nop
 800726c:	200000bc 	.word	0x200000bc

08007270 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b084      	sub	sp, #16
 8007274:	af00      	add	r7, sp, #0
 8007276:	60f8      	str	r0, [r7, #12]
 8007278:	60b9      	str	r1, [r7, #8]
 800727a:	4613      	mov	r3, r2
 800727c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d101      	bne.n	8007288 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007284:	2302      	movs	r3, #2
 8007286:	e01a      	b.n	80072be <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800728e:	2b00      	cmp	r3, #0
 8007290:	d003      	beq.n	800729a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2200      	movs	r2, #0
 8007296:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d003      	beq.n	80072a8 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	68ba      	ldr	r2, [r7, #8]
 80072a4:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2201      	movs	r2, #1
 80072ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	79fa      	ldrb	r2, [r7, #7]
 80072b4:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80072b6:	68f8      	ldr	r0, [r7, #12]
 80072b8:	f001 fa4c 	bl	8008754 <USBD_LL_Init>

  return USBD_OK;
 80072bc:	2300      	movs	r3, #0
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3710      	adds	r7, #16
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}

080072c6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80072c6:	b480      	push	{r7}
 80072c8:	b085      	sub	sp, #20
 80072ca:	af00      	add	r7, sp, #0
 80072cc:	6078      	str	r0, [r7, #4]
 80072ce:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80072d0:	2300      	movs	r3, #0
 80072d2:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d006      	beq.n	80072e8 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	683a      	ldr	r2, [r7, #0]
 80072de:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80072e2:	2300      	movs	r3, #0
 80072e4:	73fb      	strb	r3, [r7, #15]
 80072e6:	e001      	b.n	80072ec <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80072e8:	2302      	movs	r3, #2
 80072ea:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80072ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3714      	adds	r7, #20
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bc80      	pop	{r7}
 80072f6:	4770      	bx	lr

080072f8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b082      	sub	sp, #8
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f001 fa6f 	bl	80087e4 <USBD_LL_Start>

  return USBD_OK;
 8007306:	2300      	movs	r3, #0
}
 8007308:	4618      	mov	r0, r3
 800730a:	3708      	adds	r7, #8
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007310:	b480      	push	{r7}
 8007312:	b083      	sub	sp, #12
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007318:	2300      	movs	r3, #0
}
 800731a:	4618      	mov	r0, r3
 800731c:	370c      	adds	r7, #12
 800731e:	46bd      	mov	sp, r7
 8007320:	bc80      	pop	{r7}
 8007322:	4770      	bx	lr

08007324 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b084      	sub	sp, #16
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	460b      	mov	r3, r1
 800732e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007330:	2302      	movs	r3, #2
 8007332:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800733a:	2b00      	cmp	r3, #0
 800733c:	d00c      	beq.n	8007358 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	78fa      	ldrb	r2, [r7, #3]
 8007348:	4611      	mov	r1, r2
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	4798      	blx	r3
 800734e:	4603      	mov	r3, r0
 8007350:	2b00      	cmp	r3, #0
 8007352:	d101      	bne.n	8007358 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007354:	2300      	movs	r3, #0
 8007356:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007358:	7bfb      	ldrb	r3, [r7, #15]
}
 800735a:	4618      	mov	r0, r3
 800735c:	3710      	adds	r7, #16
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}

08007362 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007362:	b580      	push	{r7, lr}
 8007364:	b082      	sub	sp, #8
 8007366:	af00      	add	r7, sp, #0
 8007368:	6078      	str	r0, [r7, #4]
 800736a:	460b      	mov	r3, r1
 800736c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	78fa      	ldrb	r2, [r7, #3]
 8007378:	4611      	mov	r1, r2
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	4798      	blx	r3

  return USBD_OK;
 800737e:	2300      	movs	r3, #0
}
 8007380:	4618      	mov	r0, r3
 8007382:	3708      	adds	r7, #8
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}

08007388 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b082      	sub	sp, #8
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007398:	6839      	ldr	r1, [r7, #0]
 800739a:	4618      	mov	r0, r3
 800739c:	f000 fed7 	bl	800814e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2201      	movs	r2, #1
 80073a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80073ae:	461a      	mov	r2, r3
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80073bc:	f003 031f 	and.w	r3, r3, #31
 80073c0:	2b02      	cmp	r3, #2
 80073c2:	d016      	beq.n	80073f2 <USBD_LL_SetupStage+0x6a>
 80073c4:	2b02      	cmp	r3, #2
 80073c6:	d81c      	bhi.n	8007402 <USBD_LL_SetupStage+0x7a>
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d002      	beq.n	80073d2 <USBD_LL_SetupStage+0x4a>
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d008      	beq.n	80073e2 <USBD_LL_SetupStage+0x5a>
 80073d0:	e017      	b.n	8007402 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80073d8:	4619      	mov	r1, r3
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f000 f9ca 	bl	8007774 <USBD_StdDevReq>
      break;
 80073e0:	e01a      	b.n	8007418 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80073e8:	4619      	mov	r1, r3
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 fa2c 	bl	8007848 <USBD_StdItfReq>
      break;
 80073f0:	e012      	b.n	8007418 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80073f8:	4619      	mov	r1, r3
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 fa6c 	bl	80078d8 <USBD_StdEPReq>
      break;
 8007400:	e00a      	b.n	8007418 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007408:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800740c:	b2db      	uxtb	r3, r3
 800740e:	4619      	mov	r1, r3
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f001 fa47 	bl	80088a4 <USBD_LL_StallEP>
      break;
 8007416:	bf00      	nop
  }

  return USBD_OK;
 8007418:	2300      	movs	r3, #0
}
 800741a:	4618      	mov	r0, r3
 800741c:	3708      	adds	r7, #8
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}

08007422 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007422:	b580      	push	{r7, lr}
 8007424:	b086      	sub	sp, #24
 8007426:	af00      	add	r7, sp, #0
 8007428:	60f8      	str	r0, [r7, #12]
 800742a:	460b      	mov	r3, r1
 800742c:	607a      	str	r2, [r7, #4]
 800742e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007430:	7afb      	ldrb	r3, [r7, #11]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d14b      	bne.n	80074ce <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800743c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007444:	2b03      	cmp	r3, #3
 8007446:	d134      	bne.n	80074b2 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	68da      	ldr	r2, [r3, #12]
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	691b      	ldr	r3, [r3, #16]
 8007450:	429a      	cmp	r2, r3
 8007452:	d919      	bls.n	8007488 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	68da      	ldr	r2, [r3, #12]
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	691b      	ldr	r3, [r3, #16]
 800745c:	1ad2      	subs	r2, r2, r3
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	68da      	ldr	r2, [r3, #12]
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800746a:	429a      	cmp	r2, r3
 800746c:	d203      	bcs.n	8007476 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007472:	b29b      	uxth	r3, r3
 8007474:	e002      	b.n	800747c <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800747a:	b29b      	uxth	r3, r3
 800747c:	461a      	mov	r2, r3
 800747e:	6879      	ldr	r1, [r7, #4]
 8007480:	68f8      	ldr	r0, [r7, #12]
 8007482:	f000 ff38 	bl	80082f6 <USBD_CtlContinueRx>
 8007486:	e038      	b.n	80074fa <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800748e:	691b      	ldr	r3, [r3, #16]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d00a      	beq.n	80074aa <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800749a:	2b03      	cmp	r3, #3
 800749c:	d105      	bne.n	80074aa <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074a4:	691b      	ldr	r3, [r3, #16]
 80074a6:	68f8      	ldr	r0, [r7, #12]
 80074a8:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80074aa:	68f8      	ldr	r0, [r7, #12]
 80074ac:	f000 ff35 	bl	800831a <USBD_CtlSendStatus>
 80074b0:	e023      	b.n	80074fa <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80074b8:	2b05      	cmp	r3, #5
 80074ba:	d11e      	bne.n	80074fa <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2200      	movs	r2, #0
 80074c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80074c4:	2100      	movs	r1, #0
 80074c6:	68f8      	ldr	r0, [r7, #12]
 80074c8:	f001 f9ec 	bl	80088a4 <USBD_LL_StallEP>
 80074cc:	e015      	b.n	80074fa <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074d4:	699b      	ldr	r3, [r3, #24]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d00d      	beq.n	80074f6 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80074e0:	2b03      	cmp	r3, #3
 80074e2:	d108      	bne.n	80074f6 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074ea:	699b      	ldr	r3, [r3, #24]
 80074ec:	7afa      	ldrb	r2, [r7, #11]
 80074ee:	4611      	mov	r1, r2
 80074f0:	68f8      	ldr	r0, [r7, #12]
 80074f2:	4798      	blx	r3
 80074f4:	e001      	b.n	80074fa <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80074f6:	2302      	movs	r3, #2
 80074f8:	e000      	b.n	80074fc <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80074fa:	2300      	movs	r3, #0
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3718      	adds	r7, #24
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}

08007504 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b086      	sub	sp, #24
 8007508:	af00      	add	r7, sp, #0
 800750a:	60f8      	str	r0, [r7, #12]
 800750c:	460b      	mov	r3, r1
 800750e:	607a      	str	r2, [r7, #4]
 8007510:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007512:	7afb      	ldrb	r3, [r7, #11]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d17f      	bne.n	8007618 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	3314      	adds	r3, #20
 800751c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007524:	2b02      	cmp	r3, #2
 8007526:	d15c      	bne.n	80075e2 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	68da      	ldr	r2, [r3, #12]
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	691b      	ldr	r3, [r3, #16]
 8007530:	429a      	cmp	r2, r3
 8007532:	d915      	bls.n	8007560 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	68da      	ldr	r2, [r3, #12]
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	691b      	ldr	r3, [r3, #16]
 800753c:	1ad2      	subs	r2, r2, r3
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	68db      	ldr	r3, [r3, #12]
 8007546:	b29b      	uxth	r3, r3
 8007548:	461a      	mov	r2, r3
 800754a:	6879      	ldr	r1, [r7, #4]
 800754c:	68f8      	ldr	r0, [r7, #12]
 800754e:	f000 fec0 	bl	80082d2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007552:	2300      	movs	r3, #0
 8007554:	2200      	movs	r2, #0
 8007556:	2100      	movs	r1, #0
 8007558:	68f8      	ldr	r0, [r7, #12]
 800755a:	f001 fa4f 	bl	80089fc <USBD_LL_PrepareReceive>
 800755e:	e04e      	b.n	80075fe <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	689b      	ldr	r3, [r3, #8]
 8007564:	697a      	ldr	r2, [r7, #20]
 8007566:	6912      	ldr	r2, [r2, #16]
 8007568:	fbb3 f1f2 	udiv	r1, r3, r2
 800756c:	fb02 f201 	mul.w	r2, r2, r1
 8007570:	1a9b      	subs	r3, r3, r2
 8007572:	2b00      	cmp	r3, #0
 8007574:	d11c      	bne.n	80075b0 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	689a      	ldr	r2, [r3, #8]
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800757e:	429a      	cmp	r2, r3
 8007580:	d316      	bcc.n	80075b0 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	689a      	ldr	r2, [r3, #8]
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800758c:	429a      	cmp	r2, r3
 800758e:	d20f      	bcs.n	80075b0 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007590:	2200      	movs	r2, #0
 8007592:	2100      	movs	r1, #0
 8007594:	68f8      	ldr	r0, [r7, #12]
 8007596:	f000 fe9c 	bl	80082d2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2200      	movs	r2, #0
 800759e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80075a2:	2300      	movs	r3, #0
 80075a4:	2200      	movs	r2, #0
 80075a6:	2100      	movs	r1, #0
 80075a8:	68f8      	ldr	r0, [r7, #12]
 80075aa:	f001 fa27 	bl	80089fc <USBD_LL_PrepareReceive>
 80075ae:	e026      	b.n	80075fe <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075b6:	68db      	ldr	r3, [r3, #12]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d00a      	beq.n	80075d2 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80075c2:	2b03      	cmp	r3, #3
 80075c4:	d105      	bne.n	80075d2 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075cc:	68db      	ldr	r3, [r3, #12]
 80075ce:	68f8      	ldr	r0, [r7, #12]
 80075d0:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80075d2:	2180      	movs	r1, #128	; 0x80
 80075d4:	68f8      	ldr	r0, [r7, #12]
 80075d6:	f001 f965 	bl	80088a4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80075da:	68f8      	ldr	r0, [r7, #12]
 80075dc:	f000 feb0 	bl	8008340 <USBD_CtlReceiveStatus>
 80075e0:	e00d      	b.n	80075fe <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80075e8:	2b04      	cmp	r3, #4
 80075ea:	d004      	beq.n	80075f6 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d103      	bne.n	80075fe <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80075f6:	2180      	movs	r1, #128	; 0x80
 80075f8:	68f8      	ldr	r0, [r7, #12]
 80075fa:	f001 f953 	bl	80088a4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007604:	2b01      	cmp	r3, #1
 8007606:	d11d      	bne.n	8007644 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007608:	68f8      	ldr	r0, [r7, #12]
 800760a:	f7ff fe81 	bl	8007310 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2200      	movs	r2, #0
 8007612:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007616:	e015      	b.n	8007644 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800761e:	695b      	ldr	r3, [r3, #20]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d00d      	beq.n	8007640 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800762a:	2b03      	cmp	r3, #3
 800762c:	d108      	bne.n	8007640 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007634:	695b      	ldr	r3, [r3, #20]
 8007636:	7afa      	ldrb	r2, [r7, #11]
 8007638:	4611      	mov	r1, r2
 800763a:	68f8      	ldr	r0, [r7, #12]
 800763c:	4798      	blx	r3
 800763e:	e001      	b.n	8007644 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007640:	2302      	movs	r3, #2
 8007642:	e000      	b.n	8007646 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007644:	2300      	movs	r3, #0
}
 8007646:	4618      	mov	r0, r3
 8007648:	3718      	adds	r7, #24
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}

0800764e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800764e:	b580      	push	{r7, lr}
 8007650:	b082      	sub	sp, #8
 8007652:	af00      	add	r7, sp, #0
 8007654:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007656:	2340      	movs	r3, #64	; 0x40
 8007658:	2200      	movs	r2, #0
 800765a:	2100      	movs	r1, #0
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f001 f8dc 	bl	800881a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2201      	movs	r2, #1
 8007666:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2240      	movs	r2, #64	; 0x40
 800766e:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007672:	2340      	movs	r3, #64	; 0x40
 8007674:	2200      	movs	r2, #0
 8007676:	2180      	movs	r1, #128	; 0x80
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f001 f8ce 	bl	800881a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2201      	movs	r2, #1
 8007682:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2240      	movs	r2, #64	; 0x40
 8007688:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2201      	movs	r2, #1
 800768e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2200      	movs	r2, #0
 8007696:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2200      	movs	r2, #0
 800769e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2200      	movs	r2, #0
 80076a4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d009      	beq.n	80076c6 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	687a      	ldr	r2, [r7, #4]
 80076bc:	6852      	ldr	r2, [r2, #4]
 80076be:	b2d2      	uxtb	r2, r2
 80076c0:	4611      	mov	r1, r2
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	4798      	blx	r3
  }

  return USBD_OK;
 80076c6:	2300      	movs	r3, #0
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3708      	adds	r7, #8
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}

080076d0 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b083      	sub	sp, #12
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
 80076d8:	460b      	mov	r3, r1
 80076da:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	78fa      	ldrb	r2, [r7, #3]
 80076e0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80076e2:	2300      	movs	r3, #0
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	370c      	adds	r7, #12
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bc80      	pop	{r7}
 80076ec:	4770      	bx	lr

080076ee <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80076ee:	b480      	push	{r7}
 80076f0:	b083      	sub	sp, #12
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2204      	movs	r2, #4
 8007706:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800770a:	2300      	movs	r3, #0
}
 800770c:	4618      	mov	r0, r3
 800770e:	370c      	adds	r7, #12
 8007710:	46bd      	mov	sp, r7
 8007712:	bc80      	pop	{r7}
 8007714:	4770      	bx	lr

08007716 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007716:	b480      	push	{r7}
 8007718:	b083      	sub	sp, #12
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007724:	2b04      	cmp	r3, #4
 8007726:	d105      	bne.n	8007734 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007734:	2300      	movs	r3, #0
}
 8007736:	4618      	mov	r0, r3
 8007738:	370c      	adds	r7, #12
 800773a:	46bd      	mov	sp, r7
 800773c:	bc80      	pop	{r7}
 800773e:	4770      	bx	lr

08007740 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b082      	sub	sp, #8
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800774e:	2b03      	cmp	r3, #3
 8007750:	d10b      	bne.n	800776a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007758:	69db      	ldr	r3, [r3, #28]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d005      	beq.n	800776a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007764:	69db      	ldr	r3, [r3, #28]
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800776a:	2300      	movs	r3, #0
}
 800776c:	4618      	mov	r0, r3
 800776e:	3708      	adds	r7, #8
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}

08007774 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b084      	sub	sp, #16
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800777e:	2300      	movs	r3, #0
 8007780:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	781b      	ldrb	r3, [r3, #0]
 8007786:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800778a:	2b40      	cmp	r3, #64	; 0x40
 800778c:	d005      	beq.n	800779a <USBD_StdDevReq+0x26>
 800778e:	2b40      	cmp	r3, #64	; 0x40
 8007790:	d84f      	bhi.n	8007832 <USBD_StdDevReq+0xbe>
 8007792:	2b00      	cmp	r3, #0
 8007794:	d009      	beq.n	80077aa <USBD_StdDevReq+0x36>
 8007796:	2b20      	cmp	r3, #32
 8007798:	d14b      	bne.n	8007832 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077a0:	689b      	ldr	r3, [r3, #8]
 80077a2:	6839      	ldr	r1, [r7, #0]
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	4798      	blx	r3
      break;
 80077a8:	e048      	b.n	800783c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	785b      	ldrb	r3, [r3, #1]
 80077ae:	2b09      	cmp	r3, #9
 80077b0:	d839      	bhi.n	8007826 <USBD_StdDevReq+0xb2>
 80077b2:	a201      	add	r2, pc, #4	; (adr r2, 80077b8 <USBD_StdDevReq+0x44>)
 80077b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077b8:	08007809 	.word	0x08007809
 80077bc:	0800781d 	.word	0x0800781d
 80077c0:	08007827 	.word	0x08007827
 80077c4:	08007813 	.word	0x08007813
 80077c8:	08007827 	.word	0x08007827
 80077cc:	080077eb 	.word	0x080077eb
 80077d0:	080077e1 	.word	0x080077e1
 80077d4:	08007827 	.word	0x08007827
 80077d8:	080077ff 	.word	0x080077ff
 80077dc:	080077f5 	.word	0x080077f5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80077e0:	6839      	ldr	r1, [r7, #0]
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f000 f9dc 	bl	8007ba0 <USBD_GetDescriptor>
          break;
 80077e8:	e022      	b.n	8007830 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80077ea:	6839      	ldr	r1, [r7, #0]
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f000 fb3f 	bl	8007e70 <USBD_SetAddress>
          break;
 80077f2:	e01d      	b.n	8007830 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80077f4:	6839      	ldr	r1, [r7, #0]
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f000 fb7e 	bl	8007ef8 <USBD_SetConfig>
          break;
 80077fc:	e018      	b.n	8007830 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80077fe:	6839      	ldr	r1, [r7, #0]
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f000 fc07 	bl	8008014 <USBD_GetConfig>
          break;
 8007806:	e013      	b.n	8007830 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007808:	6839      	ldr	r1, [r7, #0]
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 fc37 	bl	800807e <USBD_GetStatus>
          break;
 8007810:	e00e      	b.n	8007830 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007812:	6839      	ldr	r1, [r7, #0]
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f000 fc65 	bl	80080e4 <USBD_SetFeature>
          break;
 800781a:	e009      	b.n	8007830 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800781c:	6839      	ldr	r1, [r7, #0]
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f000 fc74 	bl	800810c <USBD_ClrFeature>
          break;
 8007824:	e004      	b.n	8007830 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007826:	6839      	ldr	r1, [r7, #0]
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 fccc 	bl	80081c6 <USBD_CtlError>
          break;
 800782e:	bf00      	nop
      }
      break;
 8007830:	e004      	b.n	800783c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007832:	6839      	ldr	r1, [r7, #0]
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f000 fcc6 	bl	80081c6 <USBD_CtlError>
      break;
 800783a:	bf00      	nop
  }

  return ret;
 800783c:	7bfb      	ldrb	r3, [r7, #15]
}
 800783e:	4618      	mov	r0, r3
 8007840:	3710      	adds	r7, #16
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}
 8007846:	bf00      	nop

08007848 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b084      	sub	sp, #16
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007852:	2300      	movs	r3, #0
 8007854:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	781b      	ldrb	r3, [r3, #0]
 800785a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800785e:	2b40      	cmp	r3, #64	; 0x40
 8007860:	d005      	beq.n	800786e <USBD_StdItfReq+0x26>
 8007862:	2b40      	cmp	r3, #64	; 0x40
 8007864:	d82e      	bhi.n	80078c4 <USBD_StdItfReq+0x7c>
 8007866:	2b00      	cmp	r3, #0
 8007868:	d001      	beq.n	800786e <USBD_StdItfReq+0x26>
 800786a:	2b20      	cmp	r3, #32
 800786c:	d12a      	bne.n	80078c4 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007874:	3b01      	subs	r3, #1
 8007876:	2b02      	cmp	r3, #2
 8007878:	d81d      	bhi.n	80078b6 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	889b      	ldrh	r3, [r3, #4]
 800787e:	b2db      	uxtb	r3, r3
 8007880:	2b01      	cmp	r3, #1
 8007882:	d813      	bhi.n	80078ac <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800788a:	689b      	ldr	r3, [r3, #8]
 800788c:	6839      	ldr	r1, [r7, #0]
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	4798      	blx	r3
 8007892:	4603      	mov	r3, r0
 8007894:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	88db      	ldrh	r3, [r3, #6]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d110      	bne.n	80078c0 <USBD_StdItfReq+0x78>
 800789e:	7bfb      	ldrb	r3, [r7, #15]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d10d      	bne.n	80078c0 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f000 fd38 	bl	800831a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80078aa:	e009      	b.n	80078c0 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80078ac:	6839      	ldr	r1, [r7, #0]
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 fc89 	bl	80081c6 <USBD_CtlError>
          break;
 80078b4:	e004      	b.n	80078c0 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80078b6:	6839      	ldr	r1, [r7, #0]
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f000 fc84 	bl	80081c6 <USBD_CtlError>
          break;
 80078be:	e000      	b.n	80078c2 <USBD_StdItfReq+0x7a>
          break;
 80078c0:	bf00      	nop
      }
      break;
 80078c2:	e004      	b.n	80078ce <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80078c4:	6839      	ldr	r1, [r7, #0]
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f000 fc7d 	bl	80081c6 <USBD_CtlError>
      break;
 80078cc:	bf00      	nop
  }

  return USBD_OK;
 80078ce:	2300      	movs	r3, #0
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	3710      	adds	r7, #16
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}

080078d8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b084      	sub	sp, #16
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
 80078e0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80078e2:	2300      	movs	r3, #0
 80078e4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	889b      	ldrh	r3, [r3, #4]
 80078ea:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	781b      	ldrb	r3, [r3, #0]
 80078f0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80078f4:	2b40      	cmp	r3, #64	; 0x40
 80078f6:	d007      	beq.n	8007908 <USBD_StdEPReq+0x30>
 80078f8:	2b40      	cmp	r3, #64	; 0x40
 80078fa:	f200 8146 	bhi.w	8007b8a <USBD_StdEPReq+0x2b2>
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d00a      	beq.n	8007918 <USBD_StdEPReq+0x40>
 8007902:	2b20      	cmp	r3, #32
 8007904:	f040 8141 	bne.w	8007b8a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800790e:	689b      	ldr	r3, [r3, #8]
 8007910:	6839      	ldr	r1, [r7, #0]
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	4798      	blx	r3
      break;
 8007916:	e13d      	b.n	8007b94 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	781b      	ldrb	r3, [r3, #0]
 800791c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007920:	2b20      	cmp	r3, #32
 8007922:	d10a      	bne.n	800793a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800792a:	689b      	ldr	r3, [r3, #8]
 800792c:	6839      	ldr	r1, [r7, #0]
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	4798      	blx	r3
 8007932:	4603      	mov	r3, r0
 8007934:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007936:	7bfb      	ldrb	r3, [r7, #15]
 8007938:	e12d      	b.n	8007b96 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	785b      	ldrb	r3, [r3, #1]
 800793e:	2b03      	cmp	r3, #3
 8007940:	d007      	beq.n	8007952 <USBD_StdEPReq+0x7a>
 8007942:	2b03      	cmp	r3, #3
 8007944:	f300 811b 	bgt.w	8007b7e <USBD_StdEPReq+0x2a6>
 8007948:	2b00      	cmp	r3, #0
 800794a:	d072      	beq.n	8007a32 <USBD_StdEPReq+0x15a>
 800794c:	2b01      	cmp	r3, #1
 800794e:	d03a      	beq.n	80079c6 <USBD_StdEPReq+0xee>
 8007950:	e115      	b.n	8007b7e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007958:	2b02      	cmp	r3, #2
 800795a:	d002      	beq.n	8007962 <USBD_StdEPReq+0x8a>
 800795c:	2b03      	cmp	r3, #3
 800795e:	d015      	beq.n	800798c <USBD_StdEPReq+0xb4>
 8007960:	e02b      	b.n	80079ba <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007962:	7bbb      	ldrb	r3, [r7, #14]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d00c      	beq.n	8007982 <USBD_StdEPReq+0xaa>
 8007968:	7bbb      	ldrb	r3, [r7, #14]
 800796a:	2b80      	cmp	r3, #128	; 0x80
 800796c:	d009      	beq.n	8007982 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800796e:	7bbb      	ldrb	r3, [r7, #14]
 8007970:	4619      	mov	r1, r3
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f000 ff96 	bl	80088a4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007978:	2180      	movs	r1, #128	; 0x80
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f000 ff92 	bl	80088a4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007980:	e020      	b.n	80079c4 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007982:	6839      	ldr	r1, [r7, #0]
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f000 fc1e 	bl	80081c6 <USBD_CtlError>
              break;
 800798a:	e01b      	b.n	80079c4 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	885b      	ldrh	r3, [r3, #2]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d10e      	bne.n	80079b2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007994:	7bbb      	ldrb	r3, [r7, #14]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d00b      	beq.n	80079b2 <USBD_StdEPReq+0xda>
 800799a:	7bbb      	ldrb	r3, [r7, #14]
 800799c:	2b80      	cmp	r3, #128	; 0x80
 800799e:	d008      	beq.n	80079b2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	88db      	ldrh	r3, [r3, #6]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d104      	bne.n	80079b2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80079a8:	7bbb      	ldrb	r3, [r7, #14]
 80079aa:	4619      	mov	r1, r3
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f000 ff79 	bl	80088a4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f000 fcb1 	bl	800831a <USBD_CtlSendStatus>

              break;
 80079b8:	e004      	b.n	80079c4 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80079ba:	6839      	ldr	r1, [r7, #0]
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f000 fc02 	bl	80081c6 <USBD_CtlError>
              break;
 80079c2:	bf00      	nop
          }
          break;
 80079c4:	e0e0      	b.n	8007b88 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079cc:	2b02      	cmp	r3, #2
 80079ce:	d002      	beq.n	80079d6 <USBD_StdEPReq+0xfe>
 80079d0:	2b03      	cmp	r3, #3
 80079d2:	d015      	beq.n	8007a00 <USBD_StdEPReq+0x128>
 80079d4:	e026      	b.n	8007a24 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80079d6:	7bbb      	ldrb	r3, [r7, #14]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d00c      	beq.n	80079f6 <USBD_StdEPReq+0x11e>
 80079dc:	7bbb      	ldrb	r3, [r7, #14]
 80079de:	2b80      	cmp	r3, #128	; 0x80
 80079e0:	d009      	beq.n	80079f6 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80079e2:	7bbb      	ldrb	r3, [r7, #14]
 80079e4:	4619      	mov	r1, r3
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f000 ff5c 	bl	80088a4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80079ec:	2180      	movs	r1, #128	; 0x80
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f000 ff58 	bl	80088a4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80079f4:	e01c      	b.n	8007a30 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80079f6:	6839      	ldr	r1, [r7, #0]
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f000 fbe4 	bl	80081c6 <USBD_CtlError>
              break;
 80079fe:	e017      	b.n	8007a30 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	885b      	ldrh	r3, [r3, #2]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d112      	bne.n	8007a2e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007a08:	7bbb      	ldrb	r3, [r7, #14]
 8007a0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d004      	beq.n	8007a1c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007a12:	7bbb      	ldrb	r3, [r7, #14]
 8007a14:	4619      	mov	r1, r3
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f000 ff63 	bl	80088e2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f000 fc7c 	bl	800831a <USBD_CtlSendStatus>
              }
              break;
 8007a22:	e004      	b.n	8007a2e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007a24:	6839      	ldr	r1, [r7, #0]
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 fbcd 	bl	80081c6 <USBD_CtlError>
              break;
 8007a2c:	e000      	b.n	8007a30 <USBD_StdEPReq+0x158>
              break;
 8007a2e:	bf00      	nop
          }
          break;
 8007a30:	e0aa      	b.n	8007b88 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a38:	2b02      	cmp	r3, #2
 8007a3a:	d002      	beq.n	8007a42 <USBD_StdEPReq+0x16a>
 8007a3c:	2b03      	cmp	r3, #3
 8007a3e:	d032      	beq.n	8007aa6 <USBD_StdEPReq+0x1ce>
 8007a40:	e097      	b.n	8007b72 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a42:	7bbb      	ldrb	r3, [r7, #14]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d007      	beq.n	8007a58 <USBD_StdEPReq+0x180>
 8007a48:	7bbb      	ldrb	r3, [r7, #14]
 8007a4a:	2b80      	cmp	r3, #128	; 0x80
 8007a4c:	d004      	beq.n	8007a58 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007a4e:	6839      	ldr	r1, [r7, #0]
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f000 fbb8 	bl	80081c6 <USBD_CtlError>
                break;
 8007a56:	e091      	b.n	8007b7c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	da0b      	bge.n	8007a78 <USBD_StdEPReq+0x1a0>
 8007a60:	7bbb      	ldrb	r3, [r7, #14]
 8007a62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a66:	4613      	mov	r3, r2
 8007a68:	009b      	lsls	r3, r3, #2
 8007a6a:	4413      	add	r3, r2
 8007a6c:	009b      	lsls	r3, r3, #2
 8007a6e:	3310      	adds	r3, #16
 8007a70:	687a      	ldr	r2, [r7, #4]
 8007a72:	4413      	add	r3, r2
 8007a74:	3304      	adds	r3, #4
 8007a76:	e00b      	b.n	8007a90 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007a78:	7bbb      	ldrb	r3, [r7, #14]
 8007a7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a7e:	4613      	mov	r3, r2
 8007a80:	009b      	lsls	r3, r3, #2
 8007a82:	4413      	add	r3, r2
 8007a84:	009b      	lsls	r3, r3, #2
 8007a86:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007a8a:	687a      	ldr	r2, [r7, #4]
 8007a8c:	4413      	add	r3, r2
 8007a8e:	3304      	adds	r3, #4
 8007a90:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	2200      	movs	r2, #0
 8007a96:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	2202      	movs	r2, #2
 8007a9c:	4619      	mov	r1, r3
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f000 fbfb 	bl	800829a <USBD_CtlSendData>
              break;
 8007aa4:	e06a      	b.n	8007b7c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007aa6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	da11      	bge.n	8007ad2 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007aae:	7bbb      	ldrb	r3, [r7, #14]
 8007ab0:	f003 020f 	and.w	r2, r3, #15
 8007ab4:	6879      	ldr	r1, [r7, #4]
 8007ab6:	4613      	mov	r3, r2
 8007ab8:	009b      	lsls	r3, r3, #2
 8007aba:	4413      	add	r3, r2
 8007abc:	009b      	lsls	r3, r3, #2
 8007abe:	440b      	add	r3, r1
 8007ac0:	3318      	adds	r3, #24
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d117      	bne.n	8007af8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007ac8:	6839      	ldr	r1, [r7, #0]
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f000 fb7b 	bl	80081c6 <USBD_CtlError>
                  break;
 8007ad0:	e054      	b.n	8007b7c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007ad2:	7bbb      	ldrb	r3, [r7, #14]
 8007ad4:	f003 020f 	and.w	r2, r3, #15
 8007ad8:	6879      	ldr	r1, [r7, #4]
 8007ada:	4613      	mov	r3, r2
 8007adc:	009b      	lsls	r3, r3, #2
 8007ade:	4413      	add	r3, r2
 8007ae0:	009b      	lsls	r3, r3, #2
 8007ae2:	440b      	add	r3, r1
 8007ae4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d104      	bne.n	8007af8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007aee:	6839      	ldr	r1, [r7, #0]
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f000 fb68 	bl	80081c6 <USBD_CtlError>
                  break;
 8007af6:	e041      	b.n	8007b7c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007af8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	da0b      	bge.n	8007b18 <USBD_StdEPReq+0x240>
 8007b00:	7bbb      	ldrb	r3, [r7, #14]
 8007b02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007b06:	4613      	mov	r3, r2
 8007b08:	009b      	lsls	r3, r3, #2
 8007b0a:	4413      	add	r3, r2
 8007b0c:	009b      	lsls	r3, r3, #2
 8007b0e:	3310      	adds	r3, #16
 8007b10:	687a      	ldr	r2, [r7, #4]
 8007b12:	4413      	add	r3, r2
 8007b14:	3304      	adds	r3, #4
 8007b16:	e00b      	b.n	8007b30 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007b18:	7bbb      	ldrb	r3, [r7, #14]
 8007b1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b1e:	4613      	mov	r3, r2
 8007b20:	009b      	lsls	r3, r3, #2
 8007b22:	4413      	add	r3, r2
 8007b24:	009b      	lsls	r3, r3, #2
 8007b26:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007b2a:	687a      	ldr	r2, [r7, #4]
 8007b2c:	4413      	add	r3, r2
 8007b2e:	3304      	adds	r3, #4
 8007b30:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007b32:	7bbb      	ldrb	r3, [r7, #14]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d002      	beq.n	8007b3e <USBD_StdEPReq+0x266>
 8007b38:	7bbb      	ldrb	r3, [r7, #14]
 8007b3a:	2b80      	cmp	r3, #128	; 0x80
 8007b3c:	d103      	bne.n	8007b46 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	2200      	movs	r2, #0
 8007b42:	601a      	str	r2, [r3, #0]
 8007b44:	e00e      	b.n	8007b64 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007b46:	7bbb      	ldrb	r3, [r7, #14]
 8007b48:	4619      	mov	r1, r3
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f000 fee8 	bl	8008920 <USBD_LL_IsStallEP>
 8007b50:	4603      	mov	r3, r0
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d003      	beq.n	8007b5e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	2201      	movs	r2, #1
 8007b5a:	601a      	str	r2, [r3, #0]
 8007b5c:	e002      	b.n	8007b64 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	2200      	movs	r2, #0
 8007b62:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	2202      	movs	r2, #2
 8007b68:	4619      	mov	r1, r3
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f000 fb95 	bl	800829a <USBD_CtlSendData>
              break;
 8007b70:	e004      	b.n	8007b7c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007b72:	6839      	ldr	r1, [r7, #0]
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f000 fb26 	bl	80081c6 <USBD_CtlError>
              break;
 8007b7a:	bf00      	nop
          }
          break;
 8007b7c:	e004      	b.n	8007b88 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007b7e:	6839      	ldr	r1, [r7, #0]
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f000 fb20 	bl	80081c6 <USBD_CtlError>
          break;
 8007b86:	bf00      	nop
      }
      break;
 8007b88:	e004      	b.n	8007b94 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007b8a:	6839      	ldr	r1, [r7, #0]
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f000 fb1a 	bl	80081c6 <USBD_CtlError>
      break;
 8007b92:	bf00      	nop
  }

  return ret;
 8007b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3710      	adds	r7, #16
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}
	...

08007ba0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b084      	sub	sp, #16
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
 8007ba8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007baa:	2300      	movs	r3, #0
 8007bac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	885b      	ldrh	r3, [r3, #2]
 8007bba:	0a1b      	lsrs	r3, r3, #8
 8007bbc:	b29b      	uxth	r3, r3
 8007bbe:	3b01      	subs	r3, #1
 8007bc0:	2b06      	cmp	r3, #6
 8007bc2:	f200 8128 	bhi.w	8007e16 <USBD_GetDescriptor+0x276>
 8007bc6:	a201      	add	r2, pc, #4	; (adr r2, 8007bcc <USBD_GetDescriptor+0x2c>)
 8007bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bcc:	08007be9 	.word	0x08007be9
 8007bd0:	08007c01 	.word	0x08007c01
 8007bd4:	08007c41 	.word	0x08007c41
 8007bd8:	08007e17 	.word	0x08007e17
 8007bdc:	08007e17 	.word	0x08007e17
 8007be0:	08007db7 	.word	0x08007db7
 8007be4:	08007de3 	.word	0x08007de3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	687a      	ldr	r2, [r7, #4]
 8007bf2:	7c12      	ldrb	r2, [r2, #16]
 8007bf4:	f107 0108 	add.w	r1, r7, #8
 8007bf8:	4610      	mov	r0, r2
 8007bfa:	4798      	blx	r3
 8007bfc:	60f8      	str	r0, [r7, #12]
      break;
 8007bfe:	e112      	b.n	8007e26 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	7c1b      	ldrb	r3, [r3, #16]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d10d      	bne.n	8007c24 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c10:	f107 0208 	add.w	r2, r7, #8
 8007c14:	4610      	mov	r0, r2
 8007c16:	4798      	blx	r3
 8007c18:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	3301      	adds	r3, #1
 8007c1e:	2202      	movs	r2, #2
 8007c20:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007c22:	e100      	b.n	8007e26 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c2c:	f107 0208 	add.w	r2, r7, #8
 8007c30:	4610      	mov	r0, r2
 8007c32:	4798      	blx	r3
 8007c34:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	3301      	adds	r3, #1
 8007c3a:	2202      	movs	r2, #2
 8007c3c:	701a      	strb	r2, [r3, #0]
      break;
 8007c3e:	e0f2      	b.n	8007e26 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	885b      	ldrh	r3, [r3, #2]
 8007c44:	b2db      	uxtb	r3, r3
 8007c46:	2b05      	cmp	r3, #5
 8007c48:	f200 80ac 	bhi.w	8007da4 <USBD_GetDescriptor+0x204>
 8007c4c:	a201      	add	r2, pc, #4	; (adr r2, 8007c54 <USBD_GetDescriptor+0xb4>)
 8007c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c52:	bf00      	nop
 8007c54:	08007c6d 	.word	0x08007c6d
 8007c58:	08007ca1 	.word	0x08007ca1
 8007c5c:	08007cd5 	.word	0x08007cd5
 8007c60:	08007d09 	.word	0x08007d09
 8007c64:	08007d3d 	.word	0x08007d3d
 8007c68:	08007d71 	.word	0x08007d71
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d00b      	beq.n	8007c90 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	687a      	ldr	r2, [r7, #4]
 8007c82:	7c12      	ldrb	r2, [r2, #16]
 8007c84:	f107 0108 	add.w	r1, r7, #8
 8007c88:	4610      	mov	r0, r2
 8007c8a:	4798      	blx	r3
 8007c8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c8e:	e091      	b.n	8007db4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c90:	6839      	ldr	r1, [r7, #0]
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f000 fa97 	bl	80081c6 <USBD_CtlError>
            err++;
 8007c98:	7afb      	ldrb	r3, [r7, #11]
 8007c9a:	3301      	adds	r3, #1
 8007c9c:	72fb      	strb	r3, [r7, #11]
          break;
 8007c9e:	e089      	b.n	8007db4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007ca6:	689b      	ldr	r3, [r3, #8]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d00b      	beq.n	8007cc4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007cb2:	689b      	ldr	r3, [r3, #8]
 8007cb4:	687a      	ldr	r2, [r7, #4]
 8007cb6:	7c12      	ldrb	r2, [r2, #16]
 8007cb8:	f107 0108 	add.w	r1, r7, #8
 8007cbc:	4610      	mov	r0, r2
 8007cbe:	4798      	blx	r3
 8007cc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cc2:	e077      	b.n	8007db4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007cc4:	6839      	ldr	r1, [r7, #0]
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f000 fa7d 	bl	80081c6 <USBD_CtlError>
            err++;
 8007ccc:	7afb      	ldrb	r3, [r7, #11]
 8007cce:	3301      	adds	r3, #1
 8007cd0:	72fb      	strb	r3, [r7, #11]
          break;
 8007cd2:	e06f      	b.n	8007db4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007cda:	68db      	ldr	r3, [r3, #12]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d00b      	beq.n	8007cf8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007ce6:	68db      	ldr	r3, [r3, #12]
 8007ce8:	687a      	ldr	r2, [r7, #4]
 8007cea:	7c12      	ldrb	r2, [r2, #16]
 8007cec:	f107 0108 	add.w	r1, r7, #8
 8007cf0:	4610      	mov	r0, r2
 8007cf2:	4798      	blx	r3
 8007cf4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cf6:	e05d      	b.n	8007db4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007cf8:	6839      	ldr	r1, [r7, #0]
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f000 fa63 	bl	80081c6 <USBD_CtlError>
            err++;
 8007d00:	7afb      	ldrb	r3, [r7, #11]
 8007d02:	3301      	adds	r3, #1
 8007d04:	72fb      	strb	r3, [r7, #11]
          break;
 8007d06:	e055      	b.n	8007db4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007d0e:	691b      	ldr	r3, [r3, #16]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d00b      	beq.n	8007d2c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007d1a:	691b      	ldr	r3, [r3, #16]
 8007d1c:	687a      	ldr	r2, [r7, #4]
 8007d1e:	7c12      	ldrb	r2, [r2, #16]
 8007d20:	f107 0108 	add.w	r1, r7, #8
 8007d24:	4610      	mov	r0, r2
 8007d26:	4798      	blx	r3
 8007d28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d2a:	e043      	b.n	8007db4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d2c:	6839      	ldr	r1, [r7, #0]
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f000 fa49 	bl	80081c6 <USBD_CtlError>
            err++;
 8007d34:	7afb      	ldrb	r3, [r7, #11]
 8007d36:	3301      	adds	r3, #1
 8007d38:	72fb      	strb	r3, [r7, #11]
          break;
 8007d3a:	e03b      	b.n	8007db4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007d42:	695b      	ldr	r3, [r3, #20]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d00b      	beq.n	8007d60 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007d4e:	695b      	ldr	r3, [r3, #20]
 8007d50:	687a      	ldr	r2, [r7, #4]
 8007d52:	7c12      	ldrb	r2, [r2, #16]
 8007d54:	f107 0108 	add.w	r1, r7, #8
 8007d58:	4610      	mov	r0, r2
 8007d5a:	4798      	blx	r3
 8007d5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d5e:	e029      	b.n	8007db4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d60:	6839      	ldr	r1, [r7, #0]
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f000 fa2f 	bl	80081c6 <USBD_CtlError>
            err++;
 8007d68:	7afb      	ldrb	r3, [r7, #11]
 8007d6a:	3301      	adds	r3, #1
 8007d6c:	72fb      	strb	r3, [r7, #11]
          break;
 8007d6e:	e021      	b.n	8007db4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007d76:	699b      	ldr	r3, [r3, #24]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d00b      	beq.n	8007d94 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007d82:	699b      	ldr	r3, [r3, #24]
 8007d84:	687a      	ldr	r2, [r7, #4]
 8007d86:	7c12      	ldrb	r2, [r2, #16]
 8007d88:	f107 0108 	add.w	r1, r7, #8
 8007d8c:	4610      	mov	r0, r2
 8007d8e:	4798      	blx	r3
 8007d90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d92:	e00f      	b.n	8007db4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d94:	6839      	ldr	r1, [r7, #0]
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f000 fa15 	bl	80081c6 <USBD_CtlError>
            err++;
 8007d9c:	7afb      	ldrb	r3, [r7, #11]
 8007d9e:	3301      	adds	r3, #1
 8007da0:	72fb      	strb	r3, [r7, #11]
          break;
 8007da2:	e007      	b.n	8007db4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007da4:	6839      	ldr	r1, [r7, #0]
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f000 fa0d 	bl	80081c6 <USBD_CtlError>
          err++;
 8007dac:	7afb      	ldrb	r3, [r7, #11]
 8007dae:	3301      	adds	r3, #1
 8007db0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007db2:	e038      	b.n	8007e26 <USBD_GetDescriptor+0x286>
 8007db4:	e037      	b.n	8007e26 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	7c1b      	ldrb	r3, [r3, #16]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d109      	bne.n	8007dd2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dc6:	f107 0208 	add.w	r2, r7, #8
 8007dca:	4610      	mov	r0, r2
 8007dcc:	4798      	blx	r3
 8007dce:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007dd0:	e029      	b.n	8007e26 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007dd2:	6839      	ldr	r1, [r7, #0]
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f000 f9f6 	bl	80081c6 <USBD_CtlError>
        err++;
 8007dda:	7afb      	ldrb	r3, [r7, #11]
 8007ddc:	3301      	adds	r3, #1
 8007dde:	72fb      	strb	r3, [r7, #11]
      break;
 8007de0:	e021      	b.n	8007e26 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	7c1b      	ldrb	r3, [r3, #16]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d10d      	bne.n	8007e06 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007df2:	f107 0208 	add.w	r2, r7, #8
 8007df6:	4610      	mov	r0, r2
 8007df8:	4798      	blx	r3
 8007dfa:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	3301      	adds	r3, #1
 8007e00:	2207      	movs	r2, #7
 8007e02:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007e04:	e00f      	b.n	8007e26 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007e06:	6839      	ldr	r1, [r7, #0]
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f000 f9dc 	bl	80081c6 <USBD_CtlError>
        err++;
 8007e0e:	7afb      	ldrb	r3, [r7, #11]
 8007e10:	3301      	adds	r3, #1
 8007e12:	72fb      	strb	r3, [r7, #11]
      break;
 8007e14:	e007      	b.n	8007e26 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007e16:	6839      	ldr	r1, [r7, #0]
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f000 f9d4 	bl	80081c6 <USBD_CtlError>
      err++;
 8007e1e:	7afb      	ldrb	r3, [r7, #11]
 8007e20:	3301      	adds	r3, #1
 8007e22:	72fb      	strb	r3, [r7, #11]
      break;
 8007e24:	bf00      	nop
  }

  if (err != 0U)
 8007e26:	7afb      	ldrb	r3, [r7, #11]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d11c      	bne.n	8007e66 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007e2c:	893b      	ldrh	r3, [r7, #8]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d011      	beq.n	8007e56 <USBD_GetDescriptor+0x2b6>
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	88db      	ldrh	r3, [r3, #6]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d00d      	beq.n	8007e56 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	88da      	ldrh	r2, [r3, #6]
 8007e3e:	893b      	ldrh	r3, [r7, #8]
 8007e40:	4293      	cmp	r3, r2
 8007e42:	bf28      	it	cs
 8007e44:	4613      	movcs	r3, r2
 8007e46:	b29b      	uxth	r3, r3
 8007e48:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007e4a:	893b      	ldrh	r3, [r7, #8]
 8007e4c:	461a      	mov	r2, r3
 8007e4e:	68f9      	ldr	r1, [r7, #12]
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f000 fa22 	bl	800829a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	88db      	ldrh	r3, [r3, #6]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d104      	bne.n	8007e68 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f000 fa5b 	bl	800831a <USBD_CtlSendStatus>
 8007e64:	e000      	b.n	8007e68 <USBD_GetDescriptor+0x2c8>
    return;
 8007e66:	bf00      	nop
    }
  }
}
 8007e68:	3710      	adds	r7, #16
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}
 8007e6e:	bf00      	nop

08007e70 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b084      	sub	sp, #16
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
 8007e78:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	889b      	ldrh	r3, [r3, #4]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d130      	bne.n	8007ee4 <USBD_SetAddress+0x74>
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	88db      	ldrh	r3, [r3, #6]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d12c      	bne.n	8007ee4 <USBD_SetAddress+0x74>
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	885b      	ldrh	r3, [r3, #2]
 8007e8e:	2b7f      	cmp	r3, #127	; 0x7f
 8007e90:	d828      	bhi.n	8007ee4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	885b      	ldrh	r3, [r3, #2]
 8007e96:	b2db      	uxtb	r3, r3
 8007e98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e9c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ea4:	2b03      	cmp	r3, #3
 8007ea6:	d104      	bne.n	8007eb2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007ea8:	6839      	ldr	r1, [r7, #0]
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 f98b 	bl	80081c6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007eb0:	e01d      	b.n	8007eee <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	7bfa      	ldrb	r2, [r7, #15]
 8007eb6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007eba:	7bfb      	ldrb	r3, [r7, #15]
 8007ebc:	4619      	mov	r1, r3
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f000 fd5a 	bl	8008978 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f000 fa28 	bl	800831a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007eca:	7bfb      	ldrb	r3, [r7, #15]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d004      	beq.n	8007eda <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2202      	movs	r2, #2
 8007ed4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ed8:	e009      	b.n	8007eee <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2201      	movs	r2, #1
 8007ede:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ee2:	e004      	b.n	8007eee <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007ee4:	6839      	ldr	r1, [r7, #0]
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f000 f96d 	bl	80081c6 <USBD_CtlError>
  }
}
 8007eec:	bf00      	nop
 8007eee:	bf00      	nop
 8007ef0:	3710      	adds	r7, #16
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}
	...

08007ef8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b082      	sub	sp, #8
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	885b      	ldrh	r3, [r3, #2]
 8007f06:	b2da      	uxtb	r2, r3
 8007f08:	4b41      	ldr	r3, [pc, #260]	; (8008010 <USBD_SetConfig+0x118>)
 8007f0a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007f0c:	4b40      	ldr	r3, [pc, #256]	; (8008010 <USBD_SetConfig+0x118>)
 8007f0e:	781b      	ldrb	r3, [r3, #0]
 8007f10:	2b01      	cmp	r3, #1
 8007f12:	d904      	bls.n	8007f1e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007f14:	6839      	ldr	r1, [r7, #0]
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f000 f955 	bl	80081c6 <USBD_CtlError>
 8007f1c:	e075      	b.n	800800a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f24:	2b02      	cmp	r3, #2
 8007f26:	d002      	beq.n	8007f2e <USBD_SetConfig+0x36>
 8007f28:	2b03      	cmp	r3, #3
 8007f2a:	d023      	beq.n	8007f74 <USBD_SetConfig+0x7c>
 8007f2c:	e062      	b.n	8007ff4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007f2e:	4b38      	ldr	r3, [pc, #224]	; (8008010 <USBD_SetConfig+0x118>)
 8007f30:	781b      	ldrb	r3, [r3, #0]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d01a      	beq.n	8007f6c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007f36:	4b36      	ldr	r3, [pc, #216]	; (8008010 <USBD_SetConfig+0x118>)
 8007f38:	781b      	ldrb	r3, [r3, #0]
 8007f3a:	461a      	mov	r2, r3
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2203      	movs	r2, #3
 8007f44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007f48:	4b31      	ldr	r3, [pc, #196]	; (8008010 <USBD_SetConfig+0x118>)
 8007f4a:	781b      	ldrb	r3, [r3, #0]
 8007f4c:	4619      	mov	r1, r3
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f7ff f9e8 	bl	8007324 <USBD_SetClassConfig>
 8007f54:	4603      	mov	r3, r0
 8007f56:	2b02      	cmp	r3, #2
 8007f58:	d104      	bne.n	8007f64 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007f5a:	6839      	ldr	r1, [r7, #0]
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f000 f932 	bl	80081c6 <USBD_CtlError>
            return;
 8007f62:	e052      	b.n	800800a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f000 f9d8 	bl	800831a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007f6a:	e04e      	b.n	800800a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f000 f9d4 	bl	800831a <USBD_CtlSendStatus>
        break;
 8007f72:	e04a      	b.n	800800a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007f74:	4b26      	ldr	r3, [pc, #152]	; (8008010 <USBD_SetConfig+0x118>)
 8007f76:	781b      	ldrb	r3, [r3, #0]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d112      	bne.n	8007fa2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2202      	movs	r2, #2
 8007f80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007f84:	4b22      	ldr	r3, [pc, #136]	; (8008010 <USBD_SetConfig+0x118>)
 8007f86:	781b      	ldrb	r3, [r3, #0]
 8007f88:	461a      	mov	r2, r3
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007f8e:	4b20      	ldr	r3, [pc, #128]	; (8008010 <USBD_SetConfig+0x118>)
 8007f90:	781b      	ldrb	r3, [r3, #0]
 8007f92:	4619      	mov	r1, r3
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f7ff f9e4 	bl	8007362 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f000 f9bd 	bl	800831a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007fa0:	e033      	b.n	800800a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007fa2:	4b1b      	ldr	r3, [pc, #108]	; (8008010 <USBD_SetConfig+0x118>)
 8007fa4:	781b      	ldrb	r3, [r3, #0]
 8007fa6:	461a      	mov	r2, r3
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	685b      	ldr	r3, [r3, #4]
 8007fac:	429a      	cmp	r2, r3
 8007fae:	d01d      	beq.n	8007fec <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	685b      	ldr	r3, [r3, #4]
 8007fb4:	b2db      	uxtb	r3, r3
 8007fb6:	4619      	mov	r1, r3
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f7ff f9d2 	bl	8007362 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007fbe:	4b14      	ldr	r3, [pc, #80]	; (8008010 <USBD_SetConfig+0x118>)
 8007fc0:	781b      	ldrb	r3, [r3, #0]
 8007fc2:	461a      	mov	r2, r3
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007fc8:	4b11      	ldr	r3, [pc, #68]	; (8008010 <USBD_SetConfig+0x118>)
 8007fca:	781b      	ldrb	r3, [r3, #0]
 8007fcc:	4619      	mov	r1, r3
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f7ff f9a8 	bl	8007324 <USBD_SetClassConfig>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	2b02      	cmp	r3, #2
 8007fd8:	d104      	bne.n	8007fe4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007fda:	6839      	ldr	r1, [r7, #0]
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f000 f8f2 	bl	80081c6 <USBD_CtlError>
            return;
 8007fe2:	e012      	b.n	800800a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f000 f998 	bl	800831a <USBD_CtlSendStatus>
        break;
 8007fea:	e00e      	b.n	800800a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f000 f994 	bl	800831a <USBD_CtlSendStatus>
        break;
 8007ff2:	e00a      	b.n	800800a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007ff4:	6839      	ldr	r1, [r7, #0]
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f000 f8e5 	bl	80081c6 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007ffc:	4b04      	ldr	r3, [pc, #16]	; (8008010 <USBD_SetConfig+0x118>)
 8007ffe:	781b      	ldrb	r3, [r3, #0]
 8008000:	4619      	mov	r1, r3
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f7ff f9ad 	bl	8007362 <USBD_ClrClassConfig>
        break;
 8008008:	bf00      	nop
    }
  }
}
 800800a:	3708      	adds	r7, #8
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}
 8008010:	20000214 	.word	0x20000214

08008014 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b082      	sub	sp, #8
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	88db      	ldrh	r3, [r3, #6]
 8008022:	2b01      	cmp	r3, #1
 8008024:	d004      	beq.n	8008030 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008026:	6839      	ldr	r1, [r7, #0]
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f000 f8cc 	bl	80081c6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800802e:	e022      	b.n	8008076 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008036:	2b02      	cmp	r3, #2
 8008038:	dc02      	bgt.n	8008040 <USBD_GetConfig+0x2c>
 800803a:	2b00      	cmp	r3, #0
 800803c:	dc03      	bgt.n	8008046 <USBD_GetConfig+0x32>
 800803e:	e015      	b.n	800806c <USBD_GetConfig+0x58>
 8008040:	2b03      	cmp	r3, #3
 8008042:	d00b      	beq.n	800805c <USBD_GetConfig+0x48>
 8008044:	e012      	b.n	800806c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2200      	movs	r2, #0
 800804a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	3308      	adds	r3, #8
 8008050:	2201      	movs	r2, #1
 8008052:	4619      	mov	r1, r3
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f000 f920 	bl	800829a <USBD_CtlSendData>
        break;
 800805a:	e00c      	b.n	8008076 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	3304      	adds	r3, #4
 8008060:	2201      	movs	r2, #1
 8008062:	4619      	mov	r1, r3
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f000 f918 	bl	800829a <USBD_CtlSendData>
        break;
 800806a:	e004      	b.n	8008076 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800806c:	6839      	ldr	r1, [r7, #0]
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f000 f8a9 	bl	80081c6 <USBD_CtlError>
        break;
 8008074:	bf00      	nop
}
 8008076:	bf00      	nop
 8008078:	3708      	adds	r7, #8
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}

0800807e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800807e:	b580      	push	{r7, lr}
 8008080:	b082      	sub	sp, #8
 8008082:	af00      	add	r7, sp, #0
 8008084:	6078      	str	r0, [r7, #4]
 8008086:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800808e:	3b01      	subs	r3, #1
 8008090:	2b02      	cmp	r3, #2
 8008092:	d81e      	bhi.n	80080d2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	88db      	ldrh	r3, [r3, #6]
 8008098:	2b02      	cmp	r3, #2
 800809a:	d004      	beq.n	80080a6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800809c:	6839      	ldr	r1, [r7, #0]
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f000 f891 	bl	80081c6 <USBD_CtlError>
        break;
 80080a4:	e01a      	b.n	80080dc <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2201      	movs	r2, #1
 80080aa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d005      	beq.n	80080c2 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	68db      	ldr	r3, [r3, #12]
 80080ba:	f043 0202 	orr.w	r2, r3, #2
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	330c      	adds	r3, #12
 80080c6:	2202      	movs	r2, #2
 80080c8:	4619      	mov	r1, r3
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f000 f8e5 	bl	800829a <USBD_CtlSendData>
      break;
 80080d0:	e004      	b.n	80080dc <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80080d2:	6839      	ldr	r1, [r7, #0]
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f000 f876 	bl	80081c6 <USBD_CtlError>
      break;
 80080da:	bf00      	nop
  }
}
 80080dc:	bf00      	nop
 80080de:	3708      	adds	r7, #8
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}

080080e4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b082      	sub	sp, #8
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
 80080ec:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	885b      	ldrh	r3, [r3, #2]
 80080f2:	2b01      	cmp	r3, #1
 80080f4:	d106      	bne.n	8008104 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2201      	movs	r2, #1
 80080fa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f000 f90b 	bl	800831a <USBD_CtlSendStatus>
  }
}
 8008104:	bf00      	nop
 8008106:	3708      	adds	r7, #8
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}

0800810c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b082      	sub	sp, #8
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800811c:	3b01      	subs	r3, #1
 800811e:	2b02      	cmp	r3, #2
 8008120:	d80b      	bhi.n	800813a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	885b      	ldrh	r3, [r3, #2]
 8008126:	2b01      	cmp	r3, #1
 8008128:	d10c      	bne.n	8008144 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2200      	movs	r2, #0
 800812e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f000 f8f1 	bl	800831a <USBD_CtlSendStatus>
      }
      break;
 8008138:	e004      	b.n	8008144 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800813a:	6839      	ldr	r1, [r7, #0]
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f000 f842 	bl	80081c6 <USBD_CtlError>
      break;
 8008142:	e000      	b.n	8008146 <USBD_ClrFeature+0x3a>
      break;
 8008144:	bf00      	nop
  }
}
 8008146:	bf00      	nop
 8008148:	3708      	adds	r7, #8
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}

0800814e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800814e:	b480      	push	{r7}
 8008150:	b083      	sub	sp, #12
 8008152:	af00      	add	r7, sp, #0
 8008154:	6078      	str	r0, [r7, #4]
 8008156:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	781a      	ldrb	r2, [r3, #0]
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	785a      	ldrb	r2, [r3, #1]
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	3302      	adds	r3, #2
 800816c:	781b      	ldrb	r3, [r3, #0]
 800816e:	b29a      	uxth	r2, r3
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	3303      	adds	r3, #3
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	b29b      	uxth	r3, r3
 8008178:	021b      	lsls	r3, r3, #8
 800817a:	b29b      	uxth	r3, r3
 800817c:	4413      	add	r3, r2
 800817e:	b29a      	uxth	r2, r3
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	3304      	adds	r3, #4
 8008188:	781b      	ldrb	r3, [r3, #0]
 800818a:	b29a      	uxth	r2, r3
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	3305      	adds	r3, #5
 8008190:	781b      	ldrb	r3, [r3, #0]
 8008192:	b29b      	uxth	r3, r3
 8008194:	021b      	lsls	r3, r3, #8
 8008196:	b29b      	uxth	r3, r3
 8008198:	4413      	add	r3, r2
 800819a:	b29a      	uxth	r2, r3
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	3306      	adds	r3, #6
 80081a4:	781b      	ldrb	r3, [r3, #0]
 80081a6:	b29a      	uxth	r2, r3
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	3307      	adds	r3, #7
 80081ac:	781b      	ldrb	r3, [r3, #0]
 80081ae:	b29b      	uxth	r3, r3
 80081b0:	021b      	lsls	r3, r3, #8
 80081b2:	b29b      	uxth	r3, r3
 80081b4:	4413      	add	r3, r2
 80081b6:	b29a      	uxth	r2, r3
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	80da      	strh	r2, [r3, #6]

}
 80081bc:	bf00      	nop
 80081be:	370c      	adds	r7, #12
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bc80      	pop	{r7}
 80081c4:	4770      	bx	lr

080081c6 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80081c6:	b580      	push	{r7, lr}
 80081c8:	b082      	sub	sp, #8
 80081ca:	af00      	add	r7, sp, #0
 80081cc:	6078      	str	r0, [r7, #4]
 80081ce:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80081d0:	2180      	movs	r1, #128	; 0x80
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f000 fb66 	bl	80088a4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80081d8:	2100      	movs	r1, #0
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f000 fb62 	bl	80088a4 <USBD_LL_StallEP>
}
 80081e0:	bf00      	nop
 80081e2:	3708      	adds	r7, #8
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}

080081e8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b086      	sub	sp, #24
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	60f8      	str	r0, [r7, #12]
 80081f0:	60b9      	str	r1, [r7, #8]
 80081f2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80081f4:	2300      	movs	r3, #0
 80081f6:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d032      	beq.n	8008264 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80081fe:	68f8      	ldr	r0, [r7, #12]
 8008200:	f000 f834 	bl	800826c <USBD_GetLen>
 8008204:	4603      	mov	r3, r0
 8008206:	3301      	adds	r3, #1
 8008208:	b29b      	uxth	r3, r3
 800820a:	005b      	lsls	r3, r3, #1
 800820c:	b29a      	uxth	r2, r3
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008212:	7dfb      	ldrb	r3, [r7, #23]
 8008214:	1c5a      	adds	r2, r3, #1
 8008216:	75fa      	strb	r2, [r7, #23]
 8008218:	461a      	mov	r2, r3
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	4413      	add	r3, r2
 800821e:	687a      	ldr	r2, [r7, #4]
 8008220:	7812      	ldrb	r2, [r2, #0]
 8008222:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008224:	7dfb      	ldrb	r3, [r7, #23]
 8008226:	1c5a      	adds	r2, r3, #1
 8008228:	75fa      	strb	r2, [r7, #23]
 800822a:	461a      	mov	r2, r3
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	4413      	add	r3, r2
 8008230:	2203      	movs	r2, #3
 8008232:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008234:	e012      	b.n	800825c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	1c5a      	adds	r2, r3, #1
 800823a:	60fa      	str	r2, [r7, #12]
 800823c:	7dfa      	ldrb	r2, [r7, #23]
 800823e:	1c51      	adds	r1, r2, #1
 8008240:	75f9      	strb	r1, [r7, #23]
 8008242:	4611      	mov	r1, r2
 8008244:	68ba      	ldr	r2, [r7, #8]
 8008246:	440a      	add	r2, r1
 8008248:	781b      	ldrb	r3, [r3, #0]
 800824a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800824c:	7dfb      	ldrb	r3, [r7, #23]
 800824e:	1c5a      	adds	r2, r3, #1
 8008250:	75fa      	strb	r2, [r7, #23]
 8008252:	461a      	mov	r2, r3
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	4413      	add	r3, r2
 8008258:	2200      	movs	r2, #0
 800825a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	781b      	ldrb	r3, [r3, #0]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d1e8      	bne.n	8008236 <USBD_GetString+0x4e>
    }
  }
}
 8008264:	bf00      	nop
 8008266:	3718      	adds	r7, #24
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}

0800826c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800826c:	b480      	push	{r7}
 800826e:	b085      	sub	sp, #20
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008274:	2300      	movs	r3, #0
 8008276:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008278:	e005      	b.n	8008286 <USBD_GetLen+0x1a>
  {
    len++;
 800827a:	7bfb      	ldrb	r3, [r7, #15]
 800827c:	3301      	adds	r3, #1
 800827e:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	3301      	adds	r3, #1
 8008284:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	781b      	ldrb	r3, [r3, #0]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d1f5      	bne.n	800827a <USBD_GetLen+0xe>
  }

  return len;
 800828e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008290:	4618      	mov	r0, r3
 8008292:	3714      	adds	r7, #20
 8008294:	46bd      	mov	sp, r7
 8008296:	bc80      	pop	{r7}
 8008298:	4770      	bx	lr

0800829a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800829a:	b580      	push	{r7, lr}
 800829c:	b084      	sub	sp, #16
 800829e:	af00      	add	r7, sp, #0
 80082a0:	60f8      	str	r0, [r7, #12]
 80082a2:	60b9      	str	r1, [r7, #8]
 80082a4:	4613      	mov	r3, r2
 80082a6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	2202      	movs	r2, #2
 80082ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80082b0:	88fa      	ldrh	r2, [r7, #6]
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80082b6:	88fa      	ldrh	r2, [r7, #6]
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80082bc:	88fb      	ldrh	r3, [r7, #6]
 80082be:	68ba      	ldr	r2, [r7, #8]
 80082c0:	2100      	movs	r1, #0
 80082c2:	68f8      	ldr	r0, [r7, #12]
 80082c4:	f000 fb77 	bl	80089b6 <USBD_LL_Transmit>

  return USBD_OK;
 80082c8:	2300      	movs	r3, #0
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3710      	adds	r7, #16
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}

080082d2 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80082d2:	b580      	push	{r7, lr}
 80082d4:	b084      	sub	sp, #16
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	60f8      	str	r0, [r7, #12]
 80082da:	60b9      	str	r1, [r7, #8]
 80082dc:	4613      	mov	r3, r2
 80082de:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80082e0:	88fb      	ldrh	r3, [r7, #6]
 80082e2:	68ba      	ldr	r2, [r7, #8]
 80082e4:	2100      	movs	r1, #0
 80082e6:	68f8      	ldr	r0, [r7, #12]
 80082e8:	f000 fb65 	bl	80089b6 <USBD_LL_Transmit>

  return USBD_OK;
 80082ec:	2300      	movs	r3, #0
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	3710      	adds	r7, #16
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}

080082f6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80082f6:	b580      	push	{r7, lr}
 80082f8:	b084      	sub	sp, #16
 80082fa:	af00      	add	r7, sp, #0
 80082fc:	60f8      	str	r0, [r7, #12]
 80082fe:	60b9      	str	r1, [r7, #8]
 8008300:	4613      	mov	r3, r2
 8008302:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008304:	88fb      	ldrh	r3, [r7, #6]
 8008306:	68ba      	ldr	r2, [r7, #8]
 8008308:	2100      	movs	r1, #0
 800830a:	68f8      	ldr	r0, [r7, #12]
 800830c:	f000 fb76 	bl	80089fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008310:	2300      	movs	r3, #0
}
 8008312:	4618      	mov	r0, r3
 8008314:	3710      	adds	r7, #16
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}

0800831a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800831a:	b580      	push	{r7, lr}
 800831c:	b082      	sub	sp, #8
 800831e:	af00      	add	r7, sp, #0
 8008320:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2204      	movs	r2, #4
 8008326:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800832a:	2300      	movs	r3, #0
 800832c:	2200      	movs	r2, #0
 800832e:	2100      	movs	r1, #0
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f000 fb40 	bl	80089b6 <USBD_LL_Transmit>

  return USBD_OK;
 8008336:	2300      	movs	r3, #0
}
 8008338:	4618      	mov	r0, r3
 800833a:	3708      	adds	r7, #8
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}

08008340 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b082      	sub	sp, #8
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2205      	movs	r2, #5
 800834c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008350:	2300      	movs	r3, #0
 8008352:	2200      	movs	r2, #0
 8008354:	2100      	movs	r1, #0
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f000 fb50 	bl	80089fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800835c:	2300      	movs	r3, #0
}
 800835e:	4618      	mov	r0, r3
 8008360:	3708      	adds	r7, #8
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}
	...

08008368 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800836c:	2200      	movs	r2, #0
 800836e:	490e      	ldr	r1, [pc, #56]	; (80083a8 <MX_USB_DEVICE_Init+0x40>)
 8008370:	480e      	ldr	r0, [pc, #56]	; (80083ac <MX_USB_DEVICE_Init+0x44>)
 8008372:	f7fe ff7d 	bl	8007270 <USBD_Init>
 8008376:	4603      	mov	r3, r0
 8008378:	2b00      	cmp	r3, #0
 800837a:	d001      	beq.n	8008380 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800837c:	f7f8 f942 	bl	8000604 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8008380:	490b      	ldr	r1, [pc, #44]	; (80083b0 <MX_USB_DEVICE_Init+0x48>)
 8008382:	480a      	ldr	r0, [pc, #40]	; (80083ac <MX_USB_DEVICE_Init+0x44>)
 8008384:	f7fe ff9f 	bl	80072c6 <USBD_RegisterClass>
 8008388:	4603      	mov	r3, r0
 800838a:	2b00      	cmp	r3, #0
 800838c:	d001      	beq.n	8008392 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800838e:	f7f8 f939 	bl	8000604 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008392:	4806      	ldr	r0, [pc, #24]	; (80083ac <MX_USB_DEVICE_Init+0x44>)
 8008394:	f7fe ffb0 	bl	80072f8 <USBD_Start>
 8008398:	4603      	mov	r3, r0
 800839a:	2b00      	cmp	r3, #0
 800839c:	d001      	beq.n	80083a2 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800839e:	f7f8 f931 	bl	8000604 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80083a2:	bf00      	nop
 80083a4:	bd80      	pop	{r7, pc}
 80083a6:	bf00      	nop
 80083a8:	20000114 	.word	0x20000114
 80083ac:	200002e0 	.word	0x200002e0
 80083b0:	2000000c 	.word	0x2000000c

080083b4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b083      	sub	sp, #12
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	4603      	mov	r3, r0
 80083bc:	6039      	str	r1, [r7, #0]
 80083be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	2212      	movs	r2, #18
 80083c4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80083c6:	4b03      	ldr	r3, [pc, #12]	; (80083d4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	370c      	adds	r7, #12
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bc80      	pop	{r7}
 80083d0:	4770      	bx	lr
 80083d2:	bf00      	nop
 80083d4:	20000130 	.word	0x20000130

080083d8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083d8:	b480      	push	{r7}
 80083da:	b083      	sub	sp, #12
 80083dc:	af00      	add	r7, sp, #0
 80083de:	4603      	mov	r3, r0
 80083e0:	6039      	str	r1, [r7, #0]
 80083e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	2204      	movs	r2, #4
 80083e8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80083ea:	4b03      	ldr	r3, [pc, #12]	; (80083f8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	370c      	adds	r7, #12
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bc80      	pop	{r7}
 80083f4:	4770      	bx	lr
 80083f6:	bf00      	nop
 80083f8:	20000144 	.word	0x20000144

080083fc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b082      	sub	sp, #8
 8008400:	af00      	add	r7, sp, #0
 8008402:	4603      	mov	r3, r0
 8008404:	6039      	str	r1, [r7, #0]
 8008406:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008408:	79fb      	ldrb	r3, [r7, #7]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d105      	bne.n	800841a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800840e:	683a      	ldr	r2, [r7, #0]
 8008410:	4907      	ldr	r1, [pc, #28]	; (8008430 <USBD_FS_ProductStrDescriptor+0x34>)
 8008412:	4808      	ldr	r0, [pc, #32]	; (8008434 <USBD_FS_ProductStrDescriptor+0x38>)
 8008414:	f7ff fee8 	bl	80081e8 <USBD_GetString>
 8008418:	e004      	b.n	8008424 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800841a:	683a      	ldr	r2, [r7, #0]
 800841c:	4904      	ldr	r1, [pc, #16]	; (8008430 <USBD_FS_ProductStrDescriptor+0x34>)
 800841e:	4805      	ldr	r0, [pc, #20]	; (8008434 <USBD_FS_ProductStrDescriptor+0x38>)
 8008420:	f7ff fee2 	bl	80081e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008424:	4b02      	ldr	r3, [pc, #8]	; (8008430 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008426:	4618      	mov	r0, r3
 8008428:	3708      	adds	r7, #8
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}
 800842e:	bf00      	nop
 8008430:	200005a4 	.word	0x200005a4
 8008434:	08009404 	.word	0x08009404

08008438 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b082      	sub	sp, #8
 800843c:	af00      	add	r7, sp, #0
 800843e:	4603      	mov	r3, r0
 8008440:	6039      	str	r1, [r7, #0]
 8008442:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008444:	683a      	ldr	r2, [r7, #0]
 8008446:	4904      	ldr	r1, [pc, #16]	; (8008458 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008448:	4804      	ldr	r0, [pc, #16]	; (800845c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800844a:	f7ff fecd 	bl	80081e8 <USBD_GetString>
  return USBD_StrDesc;
 800844e:	4b02      	ldr	r3, [pc, #8]	; (8008458 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008450:	4618      	mov	r0, r3
 8008452:	3708      	adds	r7, #8
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}
 8008458:	200005a4 	.word	0x200005a4
 800845c:	08009418 	.word	0x08009418

08008460 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b082      	sub	sp, #8
 8008464:	af00      	add	r7, sp, #0
 8008466:	4603      	mov	r3, r0
 8008468:	6039      	str	r1, [r7, #0]
 800846a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	221a      	movs	r2, #26
 8008470:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008472:	f000 f843 	bl	80084fc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008476:	4b02      	ldr	r3, [pc, #8]	; (8008480 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008478:	4618      	mov	r0, r3
 800847a:	3708      	adds	r7, #8
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}
 8008480:	20000148 	.word	0x20000148

08008484 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b082      	sub	sp, #8
 8008488:	af00      	add	r7, sp, #0
 800848a:	4603      	mov	r3, r0
 800848c:	6039      	str	r1, [r7, #0]
 800848e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008490:	79fb      	ldrb	r3, [r7, #7]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d105      	bne.n	80084a2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008496:	683a      	ldr	r2, [r7, #0]
 8008498:	4907      	ldr	r1, [pc, #28]	; (80084b8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800849a:	4808      	ldr	r0, [pc, #32]	; (80084bc <USBD_FS_ConfigStrDescriptor+0x38>)
 800849c:	f7ff fea4 	bl	80081e8 <USBD_GetString>
 80084a0:	e004      	b.n	80084ac <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80084a2:	683a      	ldr	r2, [r7, #0]
 80084a4:	4904      	ldr	r1, [pc, #16]	; (80084b8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80084a6:	4805      	ldr	r0, [pc, #20]	; (80084bc <USBD_FS_ConfigStrDescriptor+0x38>)
 80084a8:	f7ff fe9e 	bl	80081e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80084ac:	4b02      	ldr	r3, [pc, #8]	; (80084b8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3708      	adds	r7, #8
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}
 80084b6:	bf00      	nop
 80084b8:	200005a4 	.word	0x200005a4
 80084bc:	0800942c 	.word	0x0800942c

080084c0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b082      	sub	sp, #8
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	4603      	mov	r3, r0
 80084c8:	6039      	str	r1, [r7, #0]
 80084ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80084cc:	79fb      	ldrb	r3, [r7, #7]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d105      	bne.n	80084de <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80084d2:	683a      	ldr	r2, [r7, #0]
 80084d4:	4907      	ldr	r1, [pc, #28]	; (80084f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80084d6:	4808      	ldr	r0, [pc, #32]	; (80084f8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80084d8:	f7ff fe86 	bl	80081e8 <USBD_GetString>
 80084dc:	e004      	b.n	80084e8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80084de:	683a      	ldr	r2, [r7, #0]
 80084e0:	4904      	ldr	r1, [pc, #16]	; (80084f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80084e2:	4805      	ldr	r0, [pc, #20]	; (80084f8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80084e4:	f7ff fe80 	bl	80081e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80084e8:	4b02      	ldr	r3, [pc, #8]	; (80084f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3708      	adds	r7, #8
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}
 80084f2:	bf00      	nop
 80084f4:	200005a4 	.word	0x200005a4
 80084f8:	08009438 	.word	0x08009438

080084fc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b084      	sub	sp, #16
 8008500:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008502:	4b0f      	ldr	r3, [pc, #60]	; (8008540 <Get_SerialNum+0x44>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008508:	4b0e      	ldr	r3, [pc, #56]	; (8008544 <Get_SerialNum+0x48>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800850e:	4b0e      	ldr	r3, [pc, #56]	; (8008548 <Get_SerialNum+0x4c>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008514:	68fa      	ldr	r2, [r7, #12]
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	4413      	add	r3, r2
 800851a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d009      	beq.n	8008536 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008522:	2208      	movs	r2, #8
 8008524:	4909      	ldr	r1, [pc, #36]	; (800854c <Get_SerialNum+0x50>)
 8008526:	68f8      	ldr	r0, [r7, #12]
 8008528:	f000 f814 	bl	8008554 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800852c:	2204      	movs	r2, #4
 800852e:	4908      	ldr	r1, [pc, #32]	; (8008550 <Get_SerialNum+0x54>)
 8008530:	68b8      	ldr	r0, [r7, #8]
 8008532:	f000 f80f 	bl	8008554 <IntToUnicode>
  }
}
 8008536:	bf00      	nop
 8008538:	3710      	adds	r7, #16
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}
 800853e:	bf00      	nop
 8008540:	1ffff7e8 	.word	0x1ffff7e8
 8008544:	1ffff7ec 	.word	0x1ffff7ec
 8008548:	1ffff7f0 	.word	0x1ffff7f0
 800854c:	2000014a 	.word	0x2000014a
 8008550:	2000015a 	.word	0x2000015a

08008554 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008554:	b480      	push	{r7}
 8008556:	b087      	sub	sp, #28
 8008558:	af00      	add	r7, sp, #0
 800855a:	60f8      	str	r0, [r7, #12]
 800855c:	60b9      	str	r1, [r7, #8]
 800855e:	4613      	mov	r3, r2
 8008560:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008562:	2300      	movs	r3, #0
 8008564:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008566:	2300      	movs	r3, #0
 8008568:	75fb      	strb	r3, [r7, #23]
 800856a:	e027      	b.n	80085bc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	0f1b      	lsrs	r3, r3, #28
 8008570:	2b09      	cmp	r3, #9
 8008572:	d80b      	bhi.n	800858c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	0f1b      	lsrs	r3, r3, #28
 8008578:	b2da      	uxtb	r2, r3
 800857a:	7dfb      	ldrb	r3, [r7, #23]
 800857c:	005b      	lsls	r3, r3, #1
 800857e:	4619      	mov	r1, r3
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	440b      	add	r3, r1
 8008584:	3230      	adds	r2, #48	; 0x30
 8008586:	b2d2      	uxtb	r2, r2
 8008588:	701a      	strb	r2, [r3, #0]
 800858a:	e00a      	b.n	80085a2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	0f1b      	lsrs	r3, r3, #28
 8008590:	b2da      	uxtb	r2, r3
 8008592:	7dfb      	ldrb	r3, [r7, #23]
 8008594:	005b      	lsls	r3, r3, #1
 8008596:	4619      	mov	r1, r3
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	440b      	add	r3, r1
 800859c:	3237      	adds	r2, #55	; 0x37
 800859e:	b2d2      	uxtb	r2, r2
 80085a0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	011b      	lsls	r3, r3, #4
 80085a6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80085a8:	7dfb      	ldrb	r3, [r7, #23]
 80085aa:	005b      	lsls	r3, r3, #1
 80085ac:	3301      	adds	r3, #1
 80085ae:	68ba      	ldr	r2, [r7, #8]
 80085b0:	4413      	add	r3, r2
 80085b2:	2200      	movs	r2, #0
 80085b4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80085b6:	7dfb      	ldrb	r3, [r7, #23]
 80085b8:	3301      	adds	r3, #1
 80085ba:	75fb      	strb	r3, [r7, #23]
 80085bc:	7dfa      	ldrb	r2, [r7, #23]
 80085be:	79fb      	ldrb	r3, [r7, #7]
 80085c0:	429a      	cmp	r2, r3
 80085c2:	d3d3      	bcc.n	800856c <IntToUnicode+0x18>
  }
}
 80085c4:	bf00      	nop
 80085c6:	bf00      	nop
 80085c8:	371c      	adds	r7, #28
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bc80      	pop	{r7}
 80085ce:	4770      	bx	lr

080085d0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b084      	sub	sp, #16
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4a0d      	ldr	r2, [pc, #52]	; (8008614 <HAL_PCD_MspInit+0x44>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d113      	bne.n	800860a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80085e2:	4b0d      	ldr	r3, [pc, #52]	; (8008618 <HAL_PCD_MspInit+0x48>)
 80085e4:	69db      	ldr	r3, [r3, #28]
 80085e6:	4a0c      	ldr	r2, [pc, #48]	; (8008618 <HAL_PCD_MspInit+0x48>)
 80085e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80085ec:	61d3      	str	r3, [r2, #28]
 80085ee:	4b0a      	ldr	r3, [pc, #40]	; (8008618 <HAL_PCD_MspInit+0x48>)
 80085f0:	69db      	ldr	r3, [r3, #28]
 80085f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80085f6:	60fb      	str	r3, [r7, #12]
 80085f8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80085fa:	2200      	movs	r2, #0
 80085fc:	2100      	movs	r1, #0
 80085fe:	2014      	movs	r0, #20
 8008600:	f7f8 ffe3 	bl	80015ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008604:	2014      	movs	r0, #20
 8008606:	f7f8 fffc 	bl	8001602 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800860a:	bf00      	nop
 800860c:	3710      	adds	r7, #16
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}
 8008612:	bf00      	nop
 8008614:	40005c00 	.word	0x40005c00
 8008618:	40021000 	.word	0x40021000

0800861c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b082      	sub	sp, #8
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008630:	4619      	mov	r1, r3
 8008632:	4610      	mov	r0, r2
 8008634:	f7fe fea8 	bl	8007388 <USBD_LL_SetupStage>
}
 8008638:	bf00      	nop
 800863a:	3708      	adds	r7, #8
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}

08008640 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b082      	sub	sp, #8
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
 8008648:	460b      	mov	r3, r1
 800864a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008652:	78fa      	ldrb	r2, [r7, #3]
 8008654:	6879      	ldr	r1, [r7, #4]
 8008656:	4613      	mov	r3, r2
 8008658:	009b      	lsls	r3, r3, #2
 800865a:	4413      	add	r3, r2
 800865c:	00db      	lsls	r3, r3, #3
 800865e:	440b      	add	r3, r1
 8008660:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008664:	681a      	ldr	r2, [r3, #0]
 8008666:	78fb      	ldrb	r3, [r7, #3]
 8008668:	4619      	mov	r1, r3
 800866a:	f7fe feda 	bl	8007422 <USBD_LL_DataOutStage>
}
 800866e:	bf00      	nop
 8008670:	3708      	adds	r7, #8
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}

08008676 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008676:	b580      	push	{r7, lr}
 8008678:	b082      	sub	sp, #8
 800867a:	af00      	add	r7, sp, #0
 800867c:	6078      	str	r0, [r7, #4]
 800867e:	460b      	mov	r3, r1
 8008680:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008688:	78fa      	ldrb	r2, [r7, #3]
 800868a:	6879      	ldr	r1, [r7, #4]
 800868c:	4613      	mov	r3, r2
 800868e:	009b      	lsls	r3, r3, #2
 8008690:	4413      	add	r3, r2
 8008692:	00db      	lsls	r3, r3, #3
 8008694:	440b      	add	r3, r1
 8008696:	333c      	adds	r3, #60	; 0x3c
 8008698:	681a      	ldr	r2, [r3, #0]
 800869a:	78fb      	ldrb	r3, [r7, #3]
 800869c:	4619      	mov	r1, r3
 800869e:	f7fe ff31 	bl	8007504 <USBD_LL_DataInStage>
}
 80086a2:	bf00      	nop
 80086a4:	3708      	adds	r7, #8
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}

080086aa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086aa:	b580      	push	{r7, lr}
 80086ac:	b082      	sub	sp, #8
 80086ae:	af00      	add	r7, sp, #0
 80086b0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80086b8:	4618      	mov	r0, r3
 80086ba:	f7ff f841 	bl	8007740 <USBD_LL_SOF>
}
 80086be:	bf00      	nop
 80086c0:	3708      	adds	r7, #8
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}

080086c6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086c6:	b580      	push	{r7, lr}
 80086c8:	b084      	sub	sp, #16
 80086ca:	af00      	add	r7, sp, #0
 80086cc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80086ce:	2301      	movs	r3, #1
 80086d0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	689b      	ldr	r3, [r3, #8]
 80086d6:	2b02      	cmp	r3, #2
 80086d8:	d001      	beq.n	80086de <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80086da:	f7f7 ff93 	bl	8000604 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80086e4:	7bfa      	ldrb	r2, [r7, #15]
 80086e6:	4611      	mov	r1, r2
 80086e8:	4618      	mov	r0, r3
 80086ea:	f7fe fff1 	bl	80076d0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80086f4:	4618      	mov	r0, r3
 80086f6:	f7fe ffaa 	bl	800764e <USBD_LL_Reset>
}
 80086fa:	bf00      	nop
 80086fc:	3710      	adds	r7, #16
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}
	...

08008704 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b082      	sub	sp, #8
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008712:	4618      	mov	r0, r3
 8008714:	f7fe ffeb 	bl	80076ee <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	699b      	ldr	r3, [r3, #24]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d005      	beq.n	800872c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008720:	4b04      	ldr	r3, [pc, #16]	; (8008734 <HAL_PCD_SuspendCallback+0x30>)
 8008722:	691b      	ldr	r3, [r3, #16]
 8008724:	4a03      	ldr	r2, [pc, #12]	; (8008734 <HAL_PCD_SuspendCallback+0x30>)
 8008726:	f043 0306 	orr.w	r3, r3, #6
 800872a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800872c:	bf00      	nop
 800872e:	3708      	adds	r7, #8
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}
 8008734:	e000ed00 	.word	0xe000ed00

08008738 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b082      	sub	sp, #8
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008746:	4618      	mov	r0, r3
 8008748:	f7fe ffe5 	bl	8007716 <USBD_LL_Resume>
}
 800874c:	bf00      	nop
 800874e:	3708      	adds	r7, #8
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}

08008754 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b082      	sub	sp, #8
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800875c:	4a1f      	ldr	r2, [pc, #124]	; (80087dc <USBD_LL_Init+0x88>)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	4a1d      	ldr	r2, [pc, #116]	; (80087dc <USBD_LL_Init+0x88>)
 8008768:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800876c:	4b1b      	ldr	r3, [pc, #108]	; (80087dc <USBD_LL_Init+0x88>)
 800876e:	4a1c      	ldr	r2, [pc, #112]	; (80087e0 <USBD_LL_Init+0x8c>)
 8008770:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008772:	4b1a      	ldr	r3, [pc, #104]	; (80087dc <USBD_LL_Init+0x88>)
 8008774:	2208      	movs	r2, #8
 8008776:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008778:	4b18      	ldr	r3, [pc, #96]	; (80087dc <USBD_LL_Init+0x88>)
 800877a:	2202      	movs	r2, #2
 800877c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800877e:	4b17      	ldr	r3, [pc, #92]	; (80087dc <USBD_LL_Init+0x88>)
 8008780:	2200      	movs	r2, #0
 8008782:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008784:	4b15      	ldr	r3, [pc, #84]	; (80087dc <USBD_LL_Init+0x88>)
 8008786:	2200      	movs	r2, #0
 8008788:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800878a:	4b14      	ldr	r3, [pc, #80]	; (80087dc <USBD_LL_Init+0x88>)
 800878c:	2200      	movs	r2, #0
 800878e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008790:	4812      	ldr	r0, [pc, #72]	; (80087dc <USBD_LL_Init+0x88>)
 8008792:	f7f9 f9cf 	bl	8001b34 <HAL_PCD_Init>
 8008796:	4603      	mov	r3, r0
 8008798:	2b00      	cmp	r3, #0
 800879a:	d001      	beq.n	80087a0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800879c:	f7f7 ff32 	bl	8000604 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80087a6:	2318      	movs	r3, #24
 80087a8:	2200      	movs	r2, #0
 80087aa:	2100      	movs	r1, #0
 80087ac:	f7fa fe2e 	bl	800340c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80087b6:	2358      	movs	r3, #88	; 0x58
 80087b8:	2200      	movs	r2, #0
 80087ba:	2180      	movs	r1, #128	; 0x80
 80087bc:	f7fa fe26 	bl	800340c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80087c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80087ca:	2200      	movs	r2, #0
 80087cc:	2181      	movs	r1, #129	; 0x81
 80087ce:	f7fa fe1d 	bl	800340c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 80087d2:	2300      	movs	r3, #0
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	3708      	adds	r7, #8
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}
 80087dc:	200007a4 	.word	0x200007a4
 80087e0:	40005c00 	.word	0x40005c00

080087e4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b084      	sub	sp, #16
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087ec:	2300      	movs	r3, #0
 80087ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087f0:	2300      	movs	r3, #0
 80087f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80087fa:	4618      	mov	r0, r3
 80087fc:	f7f9 faa5 	bl	8001d4a <HAL_PCD_Start>
 8008800:	4603      	mov	r3, r0
 8008802:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008804:	7bfb      	ldrb	r3, [r7, #15]
 8008806:	4618      	mov	r0, r3
 8008808:	f000 f93c 	bl	8008a84 <USBD_Get_USB_Status>
 800880c:	4603      	mov	r3, r0
 800880e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008810:	7bbb      	ldrb	r3, [r7, #14]
}
 8008812:	4618      	mov	r0, r3
 8008814:	3710      	adds	r7, #16
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}

0800881a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800881a:	b580      	push	{r7, lr}
 800881c:	b084      	sub	sp, #16
 800881e:	af00      	add	r7, sp, #0
 8008820:	6078      	str	r0, [r7, #4]
 8008822:	4608      	mov	r0, r1
 8008824:	4611      	mov	r1, r2
 8008826:	461a      	mov	r2, r3
 8008828:	4603      	mov	r3, r0
 800882a:	70fb      	strb	r3, [r7, #3]
 800882c:	460b      	mov	r3, r1
 800882e:	70bb      	strb	r3, [r7, #2]
 8008830:	4613      	mov	r3, r2
 8008832:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008834:	2300      	movs	r3, #0
 8008836:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008838:	2300      	movs	r3, #0
 800883a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008842:	78bb      	ldrb	r3, [r7, #2]
 8008844:	883a      	ldrh	r2, [r7, #0]
 8008846:	78f9      	ldrb	r1, [r7, #3]
 8008848:	f7f9 fc1f 	bl	800208a <HAL_PCD_EP_Open>
 800884c:	4603      	mov	r3, r0
 800884e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008850:	7bfb      	ldrb	r3, [r7, #15]
 8008852:	4618      	mov	r0, r3
 8008854:	f000 f916 	bl	8008a84 <USBD_Get_USB_Status>
 8008858:	4603      	mov	r3, r0
 800885a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800885c:	7bbb      	ldrb	r3, [r7, #14]
}
 800885e:	4618      	mov	r0, r3
 8008860:	3710      	adds	r7, #16
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}

08008866 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008866:	b580      	push	{r7, lr}
 8008868:	b084      	sub	sp, #16
 800886a:	af00      	add	r7, sp, #0
 800886c:	6078      	str	r0, [r7, #4]
 800886e:	460b      	mov	r3, r1
 8008870:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008872:	2300      	movs	r3, #0
 8008874:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008876:	2300      	movs	r3, #0
 8008878:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008880:	78fa      	ldrb	r2, [r7, #3]
 8008882:	4611      	mov	r1, r2
 8008884:	4618      	mov	r0, r3
 8008886:	f7f9 fc66 	bl	8002156 <HAL_PCD_EP_Close>
 800888a:	4603      	mov	r3, r0
 800888c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800888e:	7bfb      	ldrb	r3, [r7, #15]
 8008890:	4618      	mov	r0, r3
 8008892:	f000 f8f7 	bl	8008a84 <USBD_Get_USB_Status>
 8008896:	4603      	mov	r3, r0
 8008898:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800889a:	7bbb      	ldrb	r3, [r7, #14]
}
 800889c:	4618      	mov	r0, r3
 800889e:	3710      	adds	r7, #16
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}

080088a4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b084      	sub	sp, #16
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	460b      	mov	r3, r1
 80088ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088b0:	2300      	movs	r3, #0
 80088b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088b4:	2300      	movs	r3, #0
 80088b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80088be:	78fa      	ldrb	r2, [r7, #3]
 80088c0:	4611      	mov	r1, r2
 80088c2:	4618      	mov	r0, r3
 80088c4:	f7f9 fd0f 	bl	80022e6 <HAL_PCD_EP_SetStall>
 80088c8:	4603      	mov	r3, r0
 80088ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088cc:	7bfb      	ldrb	r3, [r7, #15]
 80088ce:	4618      	mov	r0, r3
 80088d0:	f000 f8d8 	bl	8008a84 <USBD_Get_USB_Status>
 80088d4:	4603      	mov	r3, r0
 80088d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80088da:	4618      	mov	r0, r3
 80088dc:	3710      	adds	r7, #16
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}

080088e2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088e2:	b580      	push	{r7, lr}
 80088e4:	b084      	sub	sp, #16
 80088e6:	af00      	add	r7, sp, #0
 80088e8:	6078      	str	r0, [r7, #4]
 80088ea:	460b      	mov	r3, r1
 80088ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088ee:	2300      	movs	r3, #0
 80088f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088f2:	2300      	movs	r3, #0
 80088f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80088fc:	78fa      	ldrb	r2, [r7, #3]
 80088fe:	4611      	mov	r1, r2
 8008900:	4618      	mov	r0, r3
 8008902:	f7f9 fd50 	bl	80023a6 <HAL_PCD_EP_ClrStall>
 8008906:	4603      	mov	r3, r0
 8008908:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800890a:	7bfb      	ldrb	r3, [r7, #15]
 800890c:	4618      	mov	r0, r3
 800890e:	f000 f8b9 	bl	8008a84 <USBD_Get_USB_Status>
 8008912:	4603      	mov	r3, r0
 8008914:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008916:	7bbb      	ldrb	r3, [r7, #14]
}
 8008918:	4618      	mov	r0, r3
 800891a:	3710      	adds	r7, #16
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}

08008920 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008920:	b480      	push	{r7}
 8008922:	b085      	sub	sp, #20
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
 8008928:	460b      	mov	r3, r1
 800892a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008932:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008934:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008938:	2b00      	cmp	r3, #0
 800893a:	da0c      	bge.n	8008956 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800893c:	78fb      	ldrb	r3, [r7, #3]
 800893e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008942:	68f9      	ldr	r1, [r7, #12]
 8008944:	1c5a      	adds	r2, r3, #1
 8008946:	4613      	mov	r3, r2
 8008948:	009b      	lsls	r3, r3, #2
 800894a:	4413      	add	r3, r2
 800894c:	00db      	lsls	r3, r3, #3
 800894e:	440b      	add	r3, r1
 8008950:	3302      	adds	r3, #2
 8008952:	781b      	ldrb	r3, [r3, #0]
 8008954:	e00b      	b.n	800896e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008956:	78fb      	ldrb	r3, [r7, #3]
 8008958:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800895c:	68f9      	ldr	r1, [r7, #12]
 800895e:	4613      	mov	r3, r2
 8008960:	009b      	lsls	r3, r3, #2
 8008962:	4413      	add	r3, r2
 8008964:	00db      	lsls	r3, r3, #3
 8008966:	440b      	add	r3, r1
 8008968:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800896c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800896e:	4618      	mov	r0, r3
 8008970:	3714      	adds	r7, #20
 8008972:	46bd      	mov	sp, r7
 8008974:	bc80      	pop	{r7}
 8008976:	4770      	bx	lr

08008978 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b084      	sub	sp, #16
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
 8008980:	460b      	mov	r3, r1
 8008982:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008984:	2300      	movs	r3, #0
 8008986:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008988:	2300      	movs	r3, #0
 800898a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008992:	78fa      	ldrb	r2, [r7, #3]
 8008994:	4611      	mov	r1, r2
 8008996:	4618      	mov	r0, r3
 8008998:	f7f9 fb52 	bl	8002040 <HAL_PCD_SetAddress>
 800899c:	4603      	mov	r3, r0
 800899e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089a0:	7bfb      	ldrb	r3, [r7, #15]
 80089a2:	4618      	mov	r0, r3
 80089a4:	f000 f86e 	bl	8008a84 <USBD_Get_USB_Status>
 80089a8:	4603      	mov	r3, r0
 80089aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3710      	adds	r7, #16
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}

080089b6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80089b6:	b580      	push	{r7, lr}
 80089b8:	b086      	sub	sp, #24
 80089ba:	af00      	add	r7, sp, #0
 80089bc:	60f8      	str	r0, [r7, #12]
 80089be:	607a      	str	r2, [r7, #4]
 80089c0:	461a      	mov	r2, r3
 80089c2:	460b      	mov	r3, r1
 80089c4:	72fb      	strb	r3, [r7, #11]
 80089c6:	4613      	mov	r3, r2
 80089c8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089ca:	2300      	movs	r3, #0
 80089cc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089ce:	2300      	movs	r3, #0
 80089d0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80089d8:	893b      	ldrh	r3, [r7, #8]
 80089da:	7af9      	ldrb	r1, [r7, #11]
 80089dc:	687a      	ldr	r2, [r7, #4]
 80089de:	f7f9 fc3f 	bl	8002260 <HAL_PCD_EP_Transmit>
 80089e2:	4603      	mov	r3, r0
 80089e4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089e6:	7dfb      	ldrb	r3, [r7, #23]
 80089e8:	4618      	mov	r0, r3
 80089ea:	f000 f84b 	bl	8008a84 <USBD_Get_USB_Status>
 80089ee:	4603      	mov	r3, r0
 80089f0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80089f2:	7dbb      	ldrb	r3, [r7, #22]
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	3718      	adds	r7, #24
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}

080089fc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b086      	sub	sp, #24
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	60f8      	str	r0, [r7, #12]
 8008a04:	607a      	str	r2, [r7, #4]
 8008a06:	461a      	mov	r2, r3
 8008a08:	460b      	mov	r3, r1
 8008a0a:	72fb      	strb	r3, [r7, #11]
 8008a0c:	4613      	mov	r3, r2
 8008a0e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a10:	2300      	movs	r3, #0
 8008a12:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a14:	2300      	movs	r3, #0
 8008a16:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008a1e:	893b      	ldrh	r3, [r7, #8]
 8008a20:	7af9      	ldrb	r1, [r7, #11]
 8008a22:	687a      	ldr	r2, [r7, #4]
 8008a24:	f7f9 fbdf 	bl	80021e6 <HAL_PCD_EP_Receive>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a2c:	7dfb      	ldrb	r3, [r7, #23]
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f000 f828 	bl	8008a84 <USBD_Get_USB_Status>
 8008a34:	4603      	mov	r3, r0
 8008a36:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008a38:	7dbb      	ldrb	r3, [r7, #22]
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3718      	adds	r7, #24
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}
	...

08008a44 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008a44:	b480      	push	{r7}
 8008a46:	b083      	sub	sp, #12
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008a4c:	4b02      	ldr	r3, [pc, #8]	; (8008a58 <USBD_static_malloc+0x14>)
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	370c      	adds	r7, #12
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bc80      	pop	{r7}
 8008a56:	4770      	bx	lr
 8008a58:	20000218 	.word	0x20000218

08008a5c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	b083      	sub	sp, #12
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]

}
 8008a64:	bf00      	nop
 8008a66:	370c      	adds	r7, #12
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bc80      	pop	{r7}
 8008a6c:	4770      	bx	lr

08008a6e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a6e:	b480      	push	{r7}
 8008a70:	b083      	sub	sp, #12
 8008a72:	af00      	add	r7, sp, #0
 8008a74:	6078      	str	r0, [r7, #4]
 8008a76:	460b      	mov	r3, r1
 8008a78:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008a7a:	bf00      	nop
 8008a7c:	370c      	adds	r7, #12
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bc80      	pop	{r7}
 8008a82:	4770      	bx	lr

08008a84 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008a84:	b480      	push	{r7}
 8008a86:	b085      	sub	sp, #20
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008a92:	79fb      	ldrb	r3, [r7, #7]
 8008a94:	2b03      	cmp	r3, #3
 8008a96:	d817      	bhi.n	8008ac8 <USBD_Get_USB_Status+0x44>
 8008a98:	a201      	add	r2, pc, #4	; (adr r2, 8008aa0 <USBD_Get_USB_Status+0x1c>)
 8008a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a9e:	bf00      	nop
 8008aa0:	08008ab1 	.word	0x08008ab1
 8008aa4:	08008ab7 	.word	0x08008ab7
 8008aa8:	08008abd 	.word	0x08008abd
 8008aac:	08008ac3 	.word	0x08008ac3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	73fb      	strb	r3, [r7, #15]
    break;
 8008ab4:	e00b      	b.n	8008ace <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008ab6:	2302      	movs	r3, #2
 8008ab8:	73fb      	strb	r3, [r7, #15]
    break;
 8008aba:	e008      	b.n	8008ace <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008abc:	2301      	movs	r3, #1
 8008abe:	73fb      	strb	r3, [r7, #15]
    break;
 8008ac0:	e005      	b.n	8008ace <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008ac2:	2302      	movs	r3, #2
 8008ac4:	73fb      	strb	r3, [r7, #15]
    break;
 8008ac6:	e002      	b.n	8008ace <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008ac8:	2302      	movs	r3, #2
 8008aca:	73fb      	strb	r3, [r7, #15]
    break;
 8008acc:	bf00      	nop
  }
  return usb_status;
 8008ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	3714      	adds	r7, #20
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bc80      	pop	{r7}
 8008ad8:	4770      	bx	lr
 8008ada:	bf00      	nop

08008adc <__errno>:
 8008adc:	4b01      	ldr	r3, [pc, #4]	; (8008ae4 <__errno+0x8>)
 8008ade:	6818      	ldr	r0, [r3, #0]
 8008ae0:	4770      	bx	lr
 8008ae2:	bf00      	nop
 8008ae4:	20000164 	.word	0x20000164

08008ae8 <__libc_init_array>:
 8008ae8:	b570      	push	{r4, r5, r6, lr}
 8008aea:	2600      	movs	r6, #0
 8008aec:	4d0c      	ldr	r5, [pc, #48]	; (8008b20 <__libc_init_array+0x38>)
 8008aee:	4c0d      	ldr	r4, [pc, #52]	; (8008b24 <__libc_init_array+0x3c>)
 8008af0:	1b64      	subs	r4, r4, r5
 8008af2:	10a4      	asrs	r4, r4, #2
 8008af4:	42a6      	cmp	r6, r4
 8008af6:	d109      	bne.n	8008b0c <__libc_init_array+0x24>
 8008af8:	f000 fc5c 	bl	80093b4 <_init>
 8008afc:	2600      	movs	r6, #0
 8008afe:	4d0a      	ldr	r5, [pc, #40]	; (8008b28 <__libc_init_array+0x40>)
 8008b00:	4c0a      	ldr	r4, [pc, #40]	; (8008b2c <__libc_init_array+0x44>)
 8008b02:	1b64      	subs	r4, r4, r5
 8008b04:	10a4      	asrs	r4, r4, #2
 8008b06:	42a6      	cmp	r6, r4
 8008b08:	d105      	bne.n	8008b16 <__libc_init_array+0x2e>
 8008b0a:	bd70      	pop	{r4, r5, r6, pc}
 8008b0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b10:	4798      	blx	r3
 8008b12:	3601      	adds	r6, #1
 8008b14:	e7ee      	b.n	8008af4 <__libc_init_array+0xc>
 8008b16:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b1a:	4798      	blx	r3
 8008b1c:	3601      	adds	r6, #1
 8008b1e:	e7f2      	b.n	8008b06 <__libc_init_array+0x1e>
 8008b20:	08009494 	.word	0x08009494
 8008b24:	08009494 	.word	0x08009494
 8008b28:	08009494 	.word	0x08009494
 8008b2c:	08009498 	.word	0x08009498

08008b30 <memset>:
 8008b30:	4603      	mov	r3, r0
 8008b32:	4402      	add	r2, r0
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d100      	bne.n	8008b3a <memset+0xa>
 8008b38:	4770      	bx	lr
 8008b3a:	f803 1b01 	strb.w	r1, [r3], #1
 8008b3e:	e7f9      	b.n	8008b34 <memset+0x4>

08008b40 <siprintf>:
 8008b40:	b40e      	push	{r1, r2, r3}
 8008b42:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008b46:	b500      	push	{lr}
 8008b48:	b09c      	sub	sp, #112	; 0x70
 8008b4a:	ab1d      	add	r3, sp, #116	; 0x74
 8008b4c:	9002      	str	r0, [sp, #8]
 8008b4e:	9006      	str	r0, [sp, #24]
 8008b50:	9107      	str	r1, [sp, #28]
 8008b52:	9104      	str	r1, [sp, #16]
 8008b54:	4808      	ldr	r0, [pc, #32]	; (8008b78 <siprintf+0x38>)
 8008b56:	4909      	ldr	r1, [pc, #36]	; (8008b7c <siprintf+0x3c>)
 8008b58:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b5c:	9105      	str	r1, [sp, #20]
 8008b5e:	6800      	ldr	r0, [r0, #0]
 8008b60:	a902      	add	r1, sp, #8
 8008b62:	9301      	str	r3, [sp, #4]
 8008b64:	f000 f868 	bl	8008c38 <_svfiprintf_r>
 8008b68:	2200      	movs	r2, #0
 8008b6a:	9b02      	ldr	r3, [sp, #8]
 8008b6c:	701a      	strb	r2, [r3, #0]
 8008b6e:	b01c      	add	sp, #112	; 0x70
 8008b70:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b74:	b003      	add	sp, #12
 8008b76:	4770      	bx	lr
 8008b78:	20000164 	.word	0x20000164
 8008b7c:	ffff0208 	.word	0xffff0208

08008b80 <__ssputs_r>:
 8008b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b84:	688e      	ldr	r6, [r1, #8]
 8008b86:	4682      	mov	sl, r0
 8008b88:	429e      	cmp	r6, r3
 8008b8a:	460c      	mov	r4, r1
 8008b8c:	4690      	mov	r8, r2
 8008b8e:	461f      	mov	r7, r3
 8008b90:	d838      	bhi.n	8008c04 <__ssputs_r+0x84>
 8008b92:	898a      	ldrh	r2, [r1, #12]
 8008b94:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008b98:	d032      	beq.n	8008c00 <__ssputs_r+0x80>
 8008b9a:	6825      	ldr	r5, [r4, #0]
 8008b9c:	6909      	ldr	r1, [r1, #16]
 8008b9e:	3301      	adds	r3, #1
 8008ba0:	eba5 0901 	sub.w	r9, r5, r1
 8008ba4:	6965      	ldr	r5, [r4, #20]
 8008ba6:	444b      	add	r3, r9
 8008ba8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008bac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008bb0:	106d      	asrs	r5, r5, #1
 8008bb2:	429d      	cmp	r5, r3
 8008bb4:	bf38      	it	cc
 8008bb6:	461d      	movcc	r5, r3
 8008bb8:	0553      	lsls	r3, r2, #21
 8008bba:	d531      	bpl.n	8008c20 <__ssputs_r+0xa0>
 8008bbc:	4629      	mov	r1, r5
 8008bbe:	f000 fb53 	bl	8009268 <_malloc_r>
 8008bc2:	4606      	mov	r6, r0
 8008bc4:	b950      	cbnz	r0, 8008bdc <__ssputs_r+0x5c>
 8008bc6:	230c      	movs	r3, #12
 8008bc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008bcc:	f8ca 3000 	str.w	r3, [sl]
 8008bd0:	89a3      	ldrh	r3, [r4, #12]
 8008bd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bd6:	81a3      	strh	r3, [r4, #12]
 8008bd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bdc:	464a      	mov	r2, r9
 8008bde:	6921      	ldr	r1, [r4, #16]
 8008be0:	f000 face 	bl	8009180 <memcpy>
 8008be4:	89a3      	ldrh	r3, [r4, #12]
 8008be6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008bea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bee:	81a3      	strh	r3, [r4, #12]
 8008bf0:	6126      	str	r6, [r4, #16]
 8008bf2:	444e      	add	r6, r9
 8008bf4:	6026      	str	r6, [r4, #0]
 8008bf6:	463e      	mov	r6, r7
 8008bf8:	6165      	str	r5, [r4, #20]
 8008bfa:	eba5 0509 	sub.w	r5, r5, r9
 8008bfe:	60a5      	str	r5, [r4, #8]
 8008c00:	42be      	cmp	r6, r7
 8008c02:	d900      	bls.n	8008c06 <__ssputs_r+0x86>
 8008c04:	463e      	mov	r6, r7
 8008c06:	4632      	mov	r2, r6
 8008c08:	4641      	mov	r1, r8
 8008c0a:	6820      	ldr	r0, [r4, #0]
 8008c0c:	f000 fac6 	bl	800919c <memmove>
 8008c10:	68a3      	ldr	r3, [r4, #8]
 8008c12:	6822      	ldr	r2, [r4, #0]
 8008c14:	1b9b      	subs	r3, r3, r6
 8008c16:	4432      	add	r2, r6
 8008c18:	2000      	movs	r0, #0
 8008c1a:	60a3      	str	r3, [r4, #8]
 8008c1c:	6022      	str	r2, [r4, #0]
 8008c1e:	e7db      	b.n	8008bd8 <__ssputs_r+0x58>
 8008c20:	462a      	mov	r2, r5
 8008c22:	f000 fb7b 	bl	800931c <_realloc_r>
 8008c26:	4606      	mov	r6, r0
 8008c28:	2800      	cmp	r0, #0
 8008c2a:	d1e1      	bne.n	8008bf0 <__ssputs_r+0x70>
 8008c2c:	4650      	mov	r0, sl
 8008c2e:	6921      	ldr	r1, [r4, #16]
 8008c30:	f000 face 	bl	80091d0 <_free_r>
 8008c34:	e7c7      	b.n	8008bc6 <__ssputs_r+0x46>
	...

08008c38 <_svfiprintf_r>:
 8008c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c3c:	4698      	mov	r8, r3
 8008c3e:	898b      	ldrh	r3, [r1, #12]
 8008c40:	4607      	mov	r7, r0
 8008c42:	061b      	lsls	r3, r3, #24
 8008c44:	460d      	mov	r5, r1
 8008c46:	4614      	mov	r4, r2
 8008c48:	b09d      	sub	sp, #116	; 0x74
 8008c4a:	d50e      	bpl.n	8008c6a <_svfiprintf_r+0x32>
 8008c4c:	690b      	ldr	r3, [r1, #16]
 8008c4e:	b963      	cbnz	r3, 8008c6a <_svfiprintf_r+0x32>
 8008c50:	2140      	movs	r1, #64	; 0x40
 8008c52:	f000 fb09 	bl	8009268 <_malloc_r>
 8008c56:	6028      	str	r0, [r5, #0]
 8008c58:	6128      	str	r0, [r5, #16]
 8008c5a:	b920      	cbnz	r0, 8008c66 <_svfiprintf_r+0x2e>
 8008c5c:	230c      	movs	r3, #12
 8008c5e:	603b      	str	r3, [r7, #0]
 8008c60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c64:	e0d1      	b.n	8008e0a <_svfiprintf_r+0x1d2>
 8008c66:	2340      	movs	r3, #64	; 0x40
 8008c68:	616b      	str	r3, [r5, #20]
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	9309      	str	r3, [sp, #36]	; 0x24
 8008c6e:	2320      	movs	r3, #32
 8008c70:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c74:	2330      	movs	r3, #48	; 0x30
 8008c76:	f04f 0901 	mov.w	r9, #1
 8008c7a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c7e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008e24 <_svfiprintf_r+0x1ec>
 8008c82:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c86:	4623      	mov	r3, r4
 8008c88:	469a      	mov	sl, r3
 8008c8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c8e:	b10a      	cbz	r2, 8008c94 <_svfiprintf_r+0x5c>
 8008c90:	2a25      	cmp	r2, #37	; 0x25
 8008c92:	d1f9      	bne.n	8008c88 <_svfiprintf_r+0x50>
 8008c94:	ebba 0b04 	subs.w	fp, sl, r4
 8008c98:	d00b      	beq.n	8008cb2 <_svfiprintf_r+0x7a>
 8008c9a:	465b      	mov	r3, fp
 8008c9c:	4622      	mov	r2, r4
 8008c9e:	4629      	mov	r1, r5
 8008ca0:	4638      	mov	r0, r7
 8008ca2:	f7ff ff6d 	bl	8008b80 <__ssputs_r>
 8008ca6:	3001      	adds	r0, #1
 8008ca8:	f000 80aa 	beq.w	8008e00 <_svfiprintf_r+0x1c8>
 8008cac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008cae:	445a      	add	r2, fp
 8008cb0:	9209      	str	r2, [sp, #36]	; 0x24
 8008cb2:	f89a 3000 	ldrb.w	r3, [sl]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	f000 80a2 	beq.w	8008e00 <_svfiprintf_r+0x1c8>
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008cc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008cc6:	f10a 0a01 	add.w	sl, sl, #1
 8008cca:	9304      	str	r3, [sp, #16]
 8008ccc:	9307      	str	r3, [sp, #28]
 8008cce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008cd2:	931a      	str	r3, [sp, #104]	; 0x68
 8008cd4:	4654      	mov	r4, sl
 8008cd6:	2205      	movs	r2, #5
 8008cd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cdc:	4851      	ldr	r0, [pc, #324]	; (8008e24 <_svfiprintf_r+0x1ec>)
 8008cde:	f000 fa41 	bl	8009164 <memchr>
 8008ce2:	9a04      	ldr	r2, [sp, #16]
 8008ce4:	b9d8      	cbnz	r0, 8008d1e <_svfiprintf_r+0xe6>
 8008ce6:	06d0      	lsls	r0, r2, #27
 8008ce8:	bf44      	itt	mi
 8008cea:	2320      	movmi	r3, #32
 8008cec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008cf0:	0711      	lsls	r1, r2, #28
 8008cf2:	bf44      	itt	mi
 8008cf4:	232b      	movmi	r3, #43	; 0x2b
 8008cf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008cfa:	f89a 3000 	ldrb.w	r3, [sl]
 8008cfe:	2b2a      	cmp	r3, #42	; 0x2a
 8008d00:	d015      	beq.n	8008d2e <_svfiprintf_r+0xf6>
 8008d02:	4654      	mov	r4, sl
 8008d04:	2000      	movs	r0, #0
 8008d06:	f04f 0c0a 	mov.w	ip, #10
 8008d0a:	9a07      	ldr	r2, [sp, #28]
 8008d0c:	4621      	mov	r1, r4
 8008d0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d12:	3b30      	subs	r3, #48	; 0x30
 8008d14:	2b09      	cmp	r3, #9
 8008d16:	d94e      	bls.n	8008db6 <_svfiprintf_r+0x17e>
 8008d18:	b1b0      	cbz	r0, 8008d48 <_svfiprintf_r+0x110>
 8008d1a:	9207      	str	r2, [sp, #28]
 8008d1c:	e014      	b.n	8008d48 <_svfiprintf_r+0x110>
 8008d1e:	eba0 0308 	sub.w	r3, r0, r8
 8008d22:	fa09 f303 	lsl.w	r3, r9, r3
 8008d26:	4313      	orrs	r3, r2
 8008d28:	46a2      	mov	sl, r4
 8008d2a:	9304      	str	r3, [sp, #16]
 8008d2c:	e7d2      	b.n	8008cd4 <_svfiprintf_r+0x9c>
 8008d2e:	9b03      	ldr	r3, [sp, #12]
 8008d30:	1d19      	adds	r1, r3, #4
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	9103      	str	r1, [sp, #12]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	bfbb      	ittet	lt
 8008d3a:	425b      	neglt	r3, r3
 8008d3c:	f042 0202 	orrlt.w	r2, r2, #2
 8008d40:	9307      	strge	r3, [sp, #28]
 8008d42:	9307      	strlt	r3, [sp, #28]
 8008d44:	bfb8      	it	lt
 8008d46:	9204      	strlt	r2, [sp, #16]
 8008d48:	7823      	ldrb	r3, [r4, #0]
 8008d4a:	2b2e      	cmp	r3, #46	; 0x2e
 8008d4c:	d10c      	bne.n	8008d68 <_svfiprintf_r+0x130>
 8008d4e:	7863      	ldrb	r3, [r4, #1]
 8008d50:	2b2a      	cmp	r3, #42	; 0x2a
 8008d52:	d135      	bne.n	8008dc0 <_svfiprintf_r+0x188>
 8008d54:	9b03      	ldr	r3, [sp, #12]
 8008d56:	3402      	adds	r4, #2
 8008d58:	1d1a      	adds	r2, r3, #4
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	9203      	str	r2, [sp, #12]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	bfb8      	it	lt
 8008d62:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008d66:	9305      	str	r3, [sp, #20]
 8008d68:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008e34 <_svfiprintf_r+0x1fc>
 8008d6c:	2203      	movs	r2, #3
 8008d6e:	4650      	mov	r0, sl
 8008d70:	7821      	ldrb	r1, [r4, #0]
 8008d72:	f000 f9f7 	bl	8009164 <memchr>
 8008d76:	b140      	cbz	r0, 8008d8a <_svfiprintf_r+0x152>
 8008d78:	2340      	movs	r3, #64	; 0x40
 8008d7a:	eba0 000a 	sub.w	r0, r0, sl
 8008d7e:	fa03 f000 	lsl.w	r0, r3, r0
 8008d82:	9b04      	ldr	r3, [sp, #16]
 8008d84:	3401      	adds	r4, #1
 8008d86:	4303      	orrs	r3, r0
 8008d88:	9304      	str	r3, [sp, #16]
 8008d8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d8e:	2206      	movs	r2, #6
 8008d90:	4825      	ldr	r0, [pc, #148]	; (8008e28 <_svfiprintf_r+0x1f0>)
 8008d92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d96:	f000 f9e5 	bl	8009164 <memchr>
 8008d9a:	2800      	cmp	r0, #0
 8008d9c:	d038      	beq.n	8008e10 <_svfiprintf_r+0x1d8>
 8008d9e:	4b23      	ldr	r3, [pc, #140]	; (8008e2c <_svfiprintf_r+0x1f4>)
 8008da0:	bb1b      	cbnz	r3, 8008dea <_svfiprintf_r+0x1b2>
 8008da2:	9b03      	ldr	r3, [sp, #12]
 8008da4:	3307      	adds	r3, #7
 8008da6:	f023 0307 	bic.w	r3, r3, #7
 8008daa:	3308      	adds	r3, #8
 8008dac:	9303      	str	r3, [sp, #12]
 8008dae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008db0:	4433      	add	r3, r6
 8008db2:	9309      	str	r3, [sp, #36]	; 0x24
 8008db4:	e767      	b.n	8008c86 <_svfiprintf_r+0x4e>
 8008db6:	460c      	mov	r4, r1
 8008db8:	2001      	movs	r0, #1
 8008dba:	fb0c 3202 	mla	r2, ip, r2, r3
 8008dbe:	e7a5      	b.n	8008d0c <_svfiprintf_r+0xd4>
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	f04f 0c0a 	mov.w	ip, #10
 8008dc6:	4619      	mov	r1, r3
 8008dc8:	3401      	adds	r4, #1
 8008dca:	9305      	str	r3, [sp, #20]
 8008dcc:	4620      	mov	r0, r4
 8008dce:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008dd2:	3a30      	subs	r2, #48	; 0x30
 8008dd4:	2a09      	cmp	r2, #9
 8008dd6:	d903      	bls.n	8008de0 <_svfiprintf_r+0x1a8>
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d0c5      	beq.n	8008d68 <_svfiprintf_r+0x130>
 8008ddc:	9105      	str	r1, [sp, #20]
 8008dde:	e7c3      	b.n	8008d68 <_svfiprintf_r+0x130>
 8008de0:	4604      	mov	r4, r0
 8008de2:	2301      	movs	r3, #1
 8008de4:	fb0c 2101 	mla	r1, ip, r1, r2
 8008de8:	e7f0      	b.n	8008dcc <_svfiprintf_r+0x194>
 8008dea:	ab03      	add	r3, sp, #12
 8008dec:	9300      	str	r3, [sp, #0]
 8008dee:	462a      	mov	r2, r5
 8008df0:	4638      	mov	r0, r7
 8008df2:	4b0f      	ldr	r3, [pc, #60]	; (8008e30 <_svfiprintf_r+0x1f8>)
 8008df4:	a904      	add	r1, sp, #16
 8008df6:	f3af 8000 	nop.w
 8008dfa:	1c42      	adds	r2, r0, #1
 8008dfc:	4606      	mov	r6, r0
 8008dfe:	d1d6      	bne.n	8008dae <_svfiprintf_r+0x176>
 8008e00:	89ab      	ldrh	r3, [r5, #12]
 8008e02:	065b      	lsls	r3, r3, #25
 8008e04:	f53f af2c 	bmi.w	8008c60 <_svfiprintf_r+0x28>
 8008e08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e0a:	b01d      	add	sp, #116	; 0x74
 8008e0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e10:	ab03      	add	r3, sp, #12
 8008e12:	9300      	str	r3, [sp, #0]
 8008e14:	462a      	mov	r2, r5
 8008e16:	4638      	mov	r0, r7
 8008e18:	4b05      	ldr	r3, [pc, #20]	; (8008e30 <_svfiprintf_r+0x1f8>)
 8008e1a:	a904      	add	r1, sp, #16
 8008e1c:	f000 f87c 	bl	8008f18 <_printf_i>
 8008e20:	e7eb      	b.n	8008dfa <_svfiprintf_r+0x1c2>
 8008e22:	bf00      	nop
 8008e24:	08009460 	.word	0x08009460
 8008e28:	0800946a 	.word	0x0800946a
 8008e2c:	00000000 	.word	0x00000000
 8008e30:	08008b81 	.word	0x08008b81
 8008e34:	08009466 	.word	0x08009466

08008e38 <_printf_common>:
 8008e38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e3c:	4616      	mov	r6, r2
 8008e3e:	4699      	mov	r9, r3
 8008e40:	688a      	ldr	r2, [r1, #8]
 8008e42:	690b      	ldr	r3, [r1, #16]
 8008e44:	4607      	mov	r7, r0
 8008e46:	4293      	cmp	r3, r2
 8008e48:	bfb8      	it	lt
 8008e4a:	4613      	movlt	r3, r2
 8008e4c:	6033      	str	r3, [r6, #0]
 8008e4e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008e52:	460c      	mov	r4, r1
 8008e54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008e58:	b10a      	cbz	r2, 8008e5e <_printf_common+0x26>
 8008e5a:	3301      	adds	r3, #1
 8008e5c:	6033      	str	r3, [r6, #0]
 8008e5e:	6823      	ldr	r3, [r4, #0]
 8008e60:	0699      	lsls	r1, r3, #26
 8008e62:	bf42      	ittt	mi
 8008e64:	6833      	ldrmi	r3, [r6, #0]
 8008e66:	3302      	addmi	r3, #2
 8008e68:	6033      	strmi	r3, [r6, #0]
 8008e6a:	6825      	ldr	r5, [r4, #0]
 8008e6c:	f015 0506 	ands.w	r5, r5, #6
 8008e70:	d106      	bne.n	8008e80 <_printf_common+0x48>
 8008e72:	f104 0a19 	add.w	sl, r4, #25
 8008e76:	68e3      	ldr	r3, [r4, #12]
 8008e78:	6832      	ldr	r2, [r6, #0]
 8008e7a:	1a9b      	subs	r3, r3, r2
 8008e7c:	42ab      	cmp	r3, r5
 8008e7e:	dc28      	bgt.n	8008ed2 <_printf_common+0x9a>
 8008e80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008e84:	1e13      	subs	r3, r2, #0
 8008e86:	6822      	ldr	r2, [r4, #0]
 8008e88:	bf18      	it	ne
 8008e8a:	2301      	movne	r3, #1
 8008e8c:	0692      	lsls	r2, r2, #26
 8008e8e:	d42d      	bmi.n	8008eec <_printf_common+0xb4>
 8008e90:	4649      	mov	r1, r9
 8008e92:	4638      	mov	r0, r7
 8008e94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008e98:	47c0      	blx	r8
 8008e9a:	3001      	adds	r0, #1
 8008e9c:	d020      	beq.n	8008ee0 <_printf_common+0xa8>
 8008e9e:	6823      	ldr	r3, [r4, #0]
 8008ea0:	68e5      	ldr	r5, [r4, #12]
 8008ea2:	f003 0306 	and.w	r3, r3, #6
 8008ea6:	2b04      	cmp	r3, #4
 8008ea8:	bf18      	it	ne
 8008eaa:	2500      	movne	r5, #0
 8008eac:	6832      	ldr	r2, [r6, #0]
 8008eae:	f04f 0600 	mov.w	r6, #0
 8008eb2:	68a3      	ldr	r3, [r4, #8]
 8008eb4:	bf08      	it	eq
 8008eb6:	1aad      	subeq	r5, r5, r2
 8008eb8:	6922      	ldr	r2, [r4, #16]
 8008eba:	bf08      	it	eq
 8008ebc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	bfc4      	itt	gt
 8008ec4:	1a9b      	subgt	r3, r3, r2
 8008ec6:	18ed      	addgt	r5, r5, r3
 8008ec8:	341a      	adds	r4, #26
 8008eca:	42b5      	cmp	r5, r6
 8008ecc:	d11a      	bne.n	8008f04 <_printf_common+0xcc>
 8008ece:	2000      	movs	r0, #0
 8008ed0:	e008      	b.n	8008ee4 <_printf_common+0xac>
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	4652      	mov	r2, sl
 8008ed6:	4649      	mov	r1, r9
 8008ed8:	4638      	mov	r0, r7
 8008eda:	47c0      	blx	r8
 8008edc:	3001      	adds	r0, #1
 8008ede:	d103      	bne.n	8008ee8 <_printf_common+0xb0>
 8008ee0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ee8:	3501      	adds	r5, #1
 8008eea:	e7c4      	b.n	8008e76 <_printf_common+0x3e>
 8008eec:	2030      	movs	r0, #48	; 0x30
 8008eee:	18e1      	adds	r1, r4, r3
 8008ef0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008ef4:	1c5a      	adds	r2, r3, #1
 8008ef6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008efa:	4422      	add	r2, r4
 8008efc:	3302      	adds	r3, #2
 8008efe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008f02:	e7c5      	b.n	8008e90 <_printf_common+0x58>
 8008f04:	2301      	movs	r3, #1
 8008f06:	4622      	mov	r2, r4
 8008f08:	4649      	mov	r1, r9
 8008f0a:	4638      	mov	r0, r7
 8008f0c:	47c0      	blx	r8
 8008f0e:	3001      	adds	r0, #1
 8008f10:	d0e6      	beq.n	8008ee0 <_printf_common+0xa8>
 8008f12:	3601      	adds	r6, #1
 8008f14:	e7d9      	b.n	8008eca <_printf_common+0x92>
	...

08008f18 <_printf_i>:
 8008f18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f1c:	460c      	mov	r4, r1
 8008f1e:	7e27      	ldrb	r7, [r4, #24]
 8008f20:	4691      	mov	r9, r2
 8008f22:	2f78      	cmp	r7, #120	; 0x78
 8008f24:	4680      	mov	r8, r0
 8008f26:	469a      	mov	sl, r3
 8008f28:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008f2a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008f2e:	d807      	bhi.n	8008f40 <_printf_i+0x28>
 8008f30:	2f62      	cmp	r7, #98	; 0x62
 8008f32:	d80a      	bhi.n	8008f4a <_printf_i+0x32>
 8008f34:	2f00      	cmp	r7, #0
 8008f36:	f000 80d9 	beq.w	80090ec <_printf_i+0x1d4>
 8008f3a:	2f58      	cmp	r7, #88	; 0x58
 8008f3c:	f000 80a4 	beq.w	8009088 <_printf_i+0x170>
 8008f40:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008f44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008f48:	e03a      	b.n	8008fc0 <_printf_i+0xa8>
 8008f4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008f4e:	2b15      	cmp	r3, #21
 8008f50:	d8f6      	bhi.n	8008f40 <_printf_i+0x28>
 8008f52:	a001      	add	r0, pc, #4	; (adr r0, 8008f58 <_printf_i+0x40>)
 8008f54:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008f58:	08008fb1 	.word	0x08008fb1
 8008f5c:	08008fc5 	.word	0x08008fc5
 8008f60:	08008f41 	.word	0x08008f41
 8008f64:	08008f41 	.word	0x08008f41
 8008f68:	08008f41 	.word	0x08008f41
 8008f6c:	08008f41 	.word	0x08008f41
 8008f70:	08008fc5 	.word	0x08008fc5
 8008f74:	08008f41 	.word	0x08008f41
 8008f78:	08008f41 	.word	0x08008f41
 8008f7c:	08008f41 	.word	0x08008f41
 8008f80:	08008f41 	.word	0x08008f41
 8008f84:	080090d3 	.word	0x080090d3
 8008f88:	08008ff5 	.word	0x08008ff5
 8008f8c:	080090b5 	.word	0x080090b5
 8008f90:	08008f41 	.word	0x08008f41
 8008f94:	08008f41 	.word	0x08008f41
 8008f98:	080090f5 	.word	0x080090f5
 8008f9c:	08008f41 	.word	0x08008f41
 8008fa0:	08008ff5 	.word	0x08008ff5
 8008fa4:	08008f41 	.word	0x08008f41
 8008fa8:	08008f41 	.word	0x08008f41
 8008fac:	080090bd 	.word	0x080090bd
 8008fb0:	680b      	ldr	r3, [r1, #0]
 8008fb2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008fb6:	1d1a      	adds	r2, r3, #4
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	600a      	str	r2, [r1, #0]
 8008fbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	e0a4      	b.n	800910e <_printf_i+0x1f6>
 8008fc4:	6825      	ldr	r5, [r4, #0]
 8008fc6:	6808      	ldr	r0, [r1, #0]
 8008fc8:	062e      	lsls	r6, r5, #24
 8008fca:	f100 0304 	add.w	r3, r0, #4
 8008fce:	d50a      	bpl.n	8008fe6 <_printf_i+0xce>
 8008fd0:	6805      	ldr	r5, [r0, #0]
 8008fd2:	600b      	str	r3, [r1, #0]
 8008fd4:	2d00      	cmp	r5, #0
 8008fd6:	da03      	bge.n	8008fe0 <_printf_i+0xc8>
 8008fd8:	232d      	movs	r3, #45	; 0x2d
 8008fda:	426d      	negs	r5, r5
 8008fdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fe0:	230a      	movs	r3, #10
 8008fe2:	485e      	ldr	r0, [pc, #376]	; (800915c <_printf_i+0x244>)
 8008fe4:	e019      	b.n	800901a <_printf_i+0x102>
 8008fe6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008fea:	6805      	ldr	r5, [r0, #0]
 8008fec:	600b      	str	r3, [r1, #0]
 8008fee:	bf18      	it	ne
 8008ff0:	b22d      	sxthne	r5, r5
 8008ff2:	e7ef      	b.n	8008fd4 <_printf_i+0xbc>
 8008ff4:	680b      	ldr	r3, [r1, #0]
 8008ff6:	6825      	ldr	r5, [r4, #0]
 8008ff8:	1d18      	adds	r0, r3, #4
 8008ffa:	6008      	str	r0, [r1, #0]
 8008ffc:	0628      	lsls	r0, r5, #24
 8008ffe:	d501      	bpl.n	8009004 <_printf_i+0xec>
 8009000:	681d      	ldr	r5, [r3, #0]
 8009002:	e002      	b.n	800900a <_printf_i+0xf2>
 8009004:	0669      	lsls	r1, r5, #25
 8009006:	d5fb      	bpl.n	8009000 <_printf_i+0xe8>
 8009008:	881d      	ldrh	r5, [r3, #0]
 800900a:	2f6f      	cmp	r7, #111	; 0x6f
 800900c:	bf0c      	ite	eq
 800900e:	2308      	moveq	r3, #8
 8009010:	230a      	movne	r3, #10
 8009012:	4852      	ldr	r0, [pc, #328]	; (800915c <_printf_i+0x244>)
 8009014:	2100      	movs	r1, #0
 8009016:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800901a:	6866      	ldr	r6, [r4, #4]
 800901c:	2e00      	cmp	r6, #0
 800901e:	bfa8      	it	ge
 8009020:	6821      	ldrge	r1, [r4, #0]
 8009022:	60a6      	str	r6, [r4, #8]
 8009024:	bfa4      	itt	ge
 8009026:	f021 0104 	bicge.w	r1, r1, #4
 800902a:	6021      	strge	r1, [r4, #0]
 800902c:	b90d      	cbnz	r5, 8009032 <_printf_i+0x11a>
 800902e:	2e00      	cmp	r6, #0
 8009030:	d04d      	beq.n	80090ce <_printf_i+0x1b6>
 8009032:	4616      	mov	r6, r2
 8009034:	fbb5 f1f3 	udiv	r1, r5, r3
 8009038:	fb03 5711 	mls	r7, r3, r1, r5
 800903c:	5dc7      	ldrb	r7, [r0, r7]
 800903e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009042:	462f      	mov	r7, r5
 8009044:	42bb      	cmp	r3, r7
 8009046:	460d      	mov	r5, r1
 8009048:	d9f4      	bls.n	8009034 <_printf_i+0x11c>
 800904a:	2b08      	cmp	r3, #8
 800904c:	d10b      	bne.n	8009066 <_printf_i+0x14e>
 800904e:	6823      	ldr	r3, [r4, #0]
 8009050:	07df      	lsls	r7, r3, #31
 8009052:	d508      	bpl.n	8009066 <_printf_i+0x14e>
 8009054:	6923      	ldr	r3, [r4, #16]
 8009056:	6861      	ldr	r1, [r4, #4]
 8009058:	4299      	cmp	r1, r3
 800905a:	bfde      	ittt	le
 800905c:	2330      	movle	r3, #48	; 0x30
 800905e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009062:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8009066:	1b92      	subs	r2, r2, r6
 8009068:	6122      	str	r2, [r4, #16]
 800906a:	464b      	mov	r3, r9
 800906c:	4621      	mov	r1, r4
 800906e:	4640      	mov	r0, r8
 8009070:	f8cd a000 	str.w	sl, [sp]
 8009074:	aa03      	add	r2, sp, #12
 8009076:	f7ff fedf 	bl	8008e38 <_printf_common>
 800907a:	3001      	adds	r0, #1
 800907c:	d14c      	bne.n	8009118 <_printf_i+0x200>
 800907e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009082:	b004      	add	sp, #16
 8009084:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009088:	4834      	ldr	r0, [pc, #208]	; (800915c <_printf_i+0x244>)
 800908a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800908e:	680e      	ldr	r6, [r1, #0]
 8009090:	6823      	ldr	r3, [r4, #0]
 8009092:	f856 5b04 	ldr.w	r5, [r6], #4
 8009096:	061f      	lsls	r7, r3, #24
 8009098:	600e      	str	r6, [r1, #0]
 800909a:	d514      	bpl.n	80090c6 <_printf_i+0x1ae>
 800909c:	07d9      	lsls	r1, r3, #31
 800909e:	bf44      	itt	mi
 80090a0:	f043 0320 	orrmi.w	r3, r3, #32
 80090a4:	6023      	strmi	r3, [r4, #0]
 80090a6:	b91d      	cbnz	r5, 80090b0 <_printf_i+0x198>
 80090a8:	6823      	ldr	r3, [r4, #0]
 80090aa:	f023 0320 	bic.w	r3, r3, #32
 80090ae:	6023      	str	r3, [r4, #0]
 80090b0:	2310      	movs	r3, #16
 80090b2:	e7af      	b.n	8009014 <_printf_i+0xfc>
 80090b4:	6823      	ldr	r3, [r4, #0]
 80090b6:	f043 0320 	orr.w	r3, r3, #32
 80090ba:	6023      	str	r3, [r4, #0]
 80090bc:	2378      	movs	r3, #120	; 0x78
 80090be:	4828      	ldr	r0, [pc, #160]	; (8009160 <_printf_i+0x248>)
 80090c0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80090c4:	e7e3      	b.n	800908e <_printf_i+0x176>
 80090c6:	065e      	lsls	r6, r3, #25
 80090c8:	bf48      	it	mi
 80090ca:	b2ad      	uxthmi	r5, r5
 80090cc:	e7e6      	b.n	800909c <_printf_i+0x184>
 80090ce:	4616      	mov	r6, r2
 80090d0:	e7bb      	b.n	800904a <_printf_i+0x132>
 80090d2:	680b      	ldr	r3, [r1, #0]
 80090d4:	6826      	ldr	r6, [r4, #0]
 80090d6:	1d1d      	adds	r5, r3, #4
 80090d8:	6960      	ldr	r0, [r4, #20]
 80090da:	600d      	str	r5, [r1, #0]
 80090dc:	0635      	lsls	r5, r6, #24
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	d501      	bpl.n	80090e6 <_printf_i+0x1ce>
 80090e2:	6018      	str	r0, [r3, #0]
 80090e4:	e002      	b.n	80090ec <_printf_i+0x1d4>
 80090e6:	0671      	lsls	r1, r6, #25
 80090e8:	d5fb      	bpl.n	80090e2 <_printf_i+0x1ca>
 80090ea:	8018      	strh	r0, [r3, #0]
 80090ec:	2300      	movs	r3, #0
 80090ee:	4616      	mov	r6, r2
 80090f0:	6123      	str	r3, [r4, #16]
 80090f2:	e7ba      	b.n	800906a <_printf_i+0x152>
 80090f4:	680b      	ldr	r3, [r1, #0]
 80090f6:	1d1a      	adds	r2, r3, #4
 80090f8:	600a      	str	r2, [r1, #0]
 80090fa:	681e      	ldr	r6, [r3, #0]
 80090fc:	2100      	movs	r1, #0
 80090fe:	4630      	mov	r0, r6
 8009100:	6862      	ldr	r2, [r4, #4]
 8009102:	f000 f82f 	bl	8009164 <memchr>
 8009106:	b108      	cbz	r0, 800910c <_printf_i+0x1f4>
 8009108:	1b80      	subs	r0, r0, r6
 800910a:	6060      	str	r0, [r4, #4]
 800910c:	6863      	ldr	r3, [r4, #4]
 800910e:	6123      	str	r3, [r4, #16]
 8009110:	2300      	movs	r3, #0
 8009112:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009116:	e7a8      	b.n	800906a <_printf_i+0x152>
 8009118:	4632      	mov	r2, r6
 800911a:	4649      	mov	r1, r9
 800911c:	4640      	mov	r0, r8
 800911e:	6923      	ldr	r3, [r4, #16]
 8009120:	47d0      	blx	sl
 8009122:	3001      	adds	r0, #1
 8009124:	d0ab      	beq.n	800907e <_printf_i+0x166>
 8009126:	6823      	ldr	r3, [r4, #0]
 8009128:	079b      	lsls	r3, r3, #30
 800912a:	d413      	bmi.n	8009154 <_printf_i+0x23c>
 800912c:	68e0      	ldr	r0, [r4, #12]
 800912e:	9b03      	ldr	r3, [sp, #12]
 8009130:	4298      	cmp	r0, r3
 8009132:	bfb8      	it	lt
 8009134:	4618      	movlt	r0, r3
 8009136:	e7a4      	b.n	8009082 <_printf_i+0x16a>
 8009138:	2301      	movs	r3, #1
 800913a:	4632      	mov	r2, r6
 800913c:	4649      	mov	r1, r9
 800913e:	4640      	mov	r0, r8
 8009140:	47d0      	blx	sl
 8009142:	3001      	adds	r0, #1
 8009144:	d09b      	beq.n	800907e <_printf_i+0x166>
 8009146:	3501      	adds	r5, #1
 8009148:	68e3      	ldr	r3, [r4, #12]
 800914a:	9903      	ldr	r1, [sp, #12]
 800914c:	1a5b      	subs	r3, r3, r1
 800914e:	42ab      	cmp	r3, r5
 8009150:	dcf2      	bgt.n	8009138 <_printf_i+0x220>
 8009152:	e7eb      	b.n	800912c <_printf_i+0x214>
 8009154:	2500      	movs	r5, #0
 8009156:	f104 0619 	add.w	r6, r4, #25
 800915a:	e7f5      	b.n	8009148 <_printf_i+0x230>
 800915c:	08009471 	.word	0x08009471
 8009160:	08009482 	.word	0x08009482

08009164 <memchr>:
 8009164:	4603      	mov	r3, r0
 8009166:	b510      	push	{r4, lr}
 8009168:	b2c9      	uxtb	r1, r1
 800916a:	4402      	add	r2, r0
 800916c:	4293      	cmp	r3, r2
 800916e:	4618      	mov	r0, r3
 8009170:	d101      	bne.n	8009176 <memchr+0x12>
 8009172:	2000      	movs	r0, #0
 8009174:	e003      	b.n	800917e <memchr+0x1a>
 8009176:	7804      	ldrb	r4, [r0, #0]
 8009178:	3301      	adds	r3, #1
 800917a:	428c      	cmp	r4, r1
 800917c:	d1f6      	bne.n	800916c <memchr+0x8>
 800917e:	bd10      	pop	{r4, pc}

08009180 <memcpy>:
 8009180:	440a      	add	r2, r1
 8009182:	4291      	cmp	r1, r2
 8009184:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009188:	d100      	bne.n	800918c <memcpy+0xc>
 800918a:	4770      	bx	lr
 800918c:	b510      	push	{r4, lr}
 800918e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009192:	4291      	cmp	r1, r2
 8009194:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009198:	d1f9      	bne.n	800918e <memcpy+0xe>
 800919a:	bd10      	pop	{r4, pc}

0800919c <memmove>:
 800919c:	4288      	cmp	r0, r1
 800919e:	b510      	push	{r4, lr}
 80091a0:	eb01 0402 	add.w	r4, r1, r2
 80091a4:	d902      	bls.n	80091ac <memmove+0x10>
 80091a6:	4284      	cmp	r4, r0
 80091a8:	4623      	mov	r3, r4
 80091aa:	d807      	bhi.n	80091bc <memmove+0x20>
 80091ac:	1e43      	subs	r3, r0, #1
 80091ae:	42a1      	cmp	r1, r4
 80091b0:	d008      	beq.n	80091c4 <memmove+0x28>
 80091b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80091b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80091ba:	e7f8      	b.n	80091ae <memmove+0x12>
 80091bc:	4601      	mov	r1, r0
 80091be:	4402      	add	r2, r0
 80091c0:	428a      	cmp	r2, r1
 80091c2:	d100      	bne.n	80091c6 <memmove+0x2a>
 80091c4:	bd10      	pop	{r4, pc}
 80091c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80091ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80091ce:	e7f7      	b.n	80091c0 <memmove+0x24>

080091d0 <_free_r>:
 80091d0:	b538      	push	{r3, r4, r5, lr}
 80091d2:	4605      	mov	r5, r0
 80091d4:	2900      	cmp	r1, #0
 80091d6:	d043      	beq.n	8009260 <_free_r+0x90>
 80091d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091dc:	1f0c      	subs	r4, r1, #4
 80091de:	2b00      	cmp	r3, #0
 80091e0:	bfb8      	it	lt
 80091e2:	18e4      	addlt	r4, r4, r3
 80091e4:	f000 f8d0 	bl	8009388 <__malloc_lock>
 80091e8:	4a1e      	ldr	r2, [pc, #120]	; (8009264 <_free_r+0x94>)
 80091ea:	6813      	ldr	r3, [r2, #0]
 80091ec:	4610      	mov	r0, r2
 80091ee:	b933      	cbnz	r3, 80091fe <_free_r+0x2e>
 80091f0:	6063      	str	r3, [r4, #4]
 80091f2:	6014      	str	r4, [r2, #0]
 80091f4:	4628      	mov	r0, r5
 80091f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80091fa:	f000 b8cb 	b.w	8009394 <__malloc_unlock>
 80091fe:	42a3      	cmp	r3, r4
 8009200:	d90a      	bls.n	8009218 <_free_r+0x48>
 8009202:	6821      	ldr	r1, [r4, #0]
 8009204:	1862      	adds	r2, r4, r1
 8009206:	4293      	cmp	r3, r2
 8009208:	bf01      	itttt	eq
 800920a:	681a      	ldreq	r2, [r3, #0]
 800920c:	685b      	ldreq	r3, [r3, #4]
 800920e:	1852      	addeq	r2, r2, r1
 8009210:	6022      	streq	r2, [r4, #0]
 8009212:	6063      	str	r3, [r4, #4]
 8009214:	6004      	str	r4, [r0, #0]
 8009216:	e7ed      	b.n	80091f4 <_free_r+0x24>
 8009218:	461a      	mov	r2, r3
 800921a:	685b      	ldr	r3, [r3, #4]
 800921c:	b10b      	cbz	r3, 8009222 <_free_r+0x52>
 800921e:	42a3      	cmp	r3, r4
 8009220:	d9fa      	bls.n	8009218 <_free_r+0x48>
 8009222:	6811      	ldr	r1, [r2, #0]
 8009224:	1850      	adds	r0, r2, r1
 8009226:	42a0      	cmp	r0, r4
 8009228:	d10b      	bne.n	8009242 <_free_r+0x72>
 800922a:	6820      	ldr	r0, [r4, #0]
 800922c:	4401      	add	r1, r0
 800922e:	1850      	adds	r0, r2, r1
 8009230:	4283      	cmp	r3, r0
 8009232:	6011      	str	r1, [r2, #0]
 8009234:	d1de      	bne.n	80091f4 <_free_r+0x24>
 8009236:	6818      	ldr	r0, [r3, #0]
 8009238:	685b      	ldr	r3, [r3, #4]
 800923a:	4401      	add	r1, r0
 800923c:	6011      	str	r1, [r2, #0]
 800923e:	6053      	str	r3, [r2, #4]
 8009240:	e7d8      	b.n	80091f4 <_free_r+0x24>
 8009242:	d902      	bls.n	800924a <_free_r+0x7a>
 8009244:	230c      	movs	r3, #12
 8009246:	602b      	str	r3, [r5, #0]
 8009248:	e7d4      	b.n	80091f4 <_free_r+0x24>
 800924a:	6820      	ldr	r0, [r4, #0]
 800924c:	1821      	adds	r1, r4, r0
 800924e:	428b      	cmp	r3, r1
 8009250:	bf01      	itttt	eq
 8009252:	6819      	ldreq	r1, [r3, #0]
 8009254:	685b      	ldreq	r3, [r3, #4]
 8009256:	1809      	addeq	r1, r1, r0
 8009258:	6021      	streq	r1, [r4, #0]
 800925a:	6063      	str	r3, [r4, #4]
 800925c:	6054      	str	r4, [r2, #4]
 800925e:	e7c9      	b.n	80091f4 <_free_r+0x24>
 8009260:	bd38      	pop	{r3, r4, r5, pc}
 8009262:	bf00      	nop
 8009264:	2000022c 	.word	0x2000022c

08009268 <_malloc_r>:
 8009268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800926a:	1ccd      	adds	r5, r1, #3
 800926c:	f025 0503 	bic.w	r5, r5, #3
 8009270:	3508      	adds	r5, #8
 8009272:	2d0c      	cmp	r5, #12
 8009274:	bf38      	it	cc
 8009276:	250c      	movcc	r5, #12
 8009278:	2d00      	cmp	r5, #0
 800927a:	4606      	mov	r6, r0
 800927c:	db01      	blt.n	8009282 <_malloc_r+0x1a>
 800927e:	42a9      	cmp	r1, r5
 8009280:	d903      	bls.n	800928a <_malloc_r+0x22>
 8009282:	230c      	movs	r3, #12
 8009284:	6033      	str	r3, [r6, #0]
 8009286:	2000      	movs	r0, #0
 8009288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800928a:	f000 f87d 	bl	8009388 <__malloc_lock>
 800928e:	4921      	ldr	r1, [pc, #132]	; (8009314 <_malloc_r+0xac>)
 8009290:	680a      	ldr	r2, [r1, #0]
 8009292:	4614      	mov	r4, r2
 8009294:	b99c      	cbnz	r4, 80092be <_malloc_r+0x56>
 8009296:	4f20      	ldr	r7, [pc, #128]	; (8009318 <_malloc_r+0xb0>)
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	b923      	cbnz	r3, 80092a6 <_malloc_r+0x3e>
 800929c:	4621      	mov	r1, r4
 800929e:	4630      	mov	r0, r6
 80092a0:	f000 f862 	bl	8009368 <_sbrk_r>
 80092a4:	6038      	str	r0, [r7, #0]
 80092a6:	4629      	mov	r1, r5
 80092a8:	4630      	mov	r0, r6
 80092aa:	f000 f85d 	bl	8009368 <_sbrk_r>
 80092ae:	1c43      	adds	r3, r0, #1
 80092b0:	d123      	bne.n	80092fa <_malloc_r+0x92>
 80092b2:	230c      	movs	r3, #12
 80092b4:	4630      	mov	r0, r6
 80092b6:	6033      	str	r3, [r6, #0]
 80092b8:	f000 f86c 	bl	8009394 <__malloc_unlock>
 80092bc:	e7e3      	b.n	8009286 <_malloc_r+0x1e>
 80092be:	6823      	ldr	r3, [r4, #0]
 80092c0:	1b5b      	subs	r3, r3, r5
 80092c2:	d417      	bmi.n	80092f4 <_malloc_r+0x8c>
 80092c4:	2b0b      	cmp	r3, #11
 80092c6:	d903      	bls.n	80092d0 <_malloc_r+0x68>
 80092c8:	6023      	str	r3, [r4, #0]
 80092ca:	441c      	add	r4, r3
 80092cc:	6025      	str	r5, [r4, #0]
 80092ce:	e004      	b.n	80092da <_malloc_r+0x72>
 80092d0:	6863      	ldr	r3, [r4, #4]
 80092d2:	42a2      	cmp	r2, r4
 80092d4:	bf0c      	ite	eq
 80092d6:	600b      	streq	r3, [r1, #0]
 80092d8:	6053      	strne	r3, [r2, #4]
 80092da:	4630      	mov	r0, r6
 80092dc:	f000 f85a 	bl	8009394 <__malloc_unlock>
 80092e0:	f104 000b 	add.w	r0, r4, #11
 80092e4:	1d23      	adds	r3, r4, #4
 80092e6:	f020 0007 	bic.w	r0, r0, #7
 80092ea:	1ac2      	subs	r2, r0, r3
 80092ec:	d0cc      	beq.n	8009288 <_malloc_r+0x20>
 80092ee:	1a1b      	subs	r3, r3, r0
 80092f0:	50a3      	str	r3, [r4, r2]
 80092f2:	e7c9      	b.n	8009288 <_malloc_r+0x20>
 80092f4:	4622      	mov	r2, r4
 80092f6:	6864      	ldr	r4, [r4, #4]
 80092f8:	e7cc      	b.n	8009294 <_malloc_r+0x2c>
 80092fa:	1cc4      	adds	r4, r0, #3
 80092fc:	f024 0403 	bic.w	r4, r4, #3
 8009300:	42a0      	cmp	r0, r4
 8009302:	d0e3      	beq.n	80092cc <_malloc_r+0x64>
 8009304:	1a21      	subs	r1, r4, r0
 8009306:	4630      	mov	r0, r6
 8009308:	f000 f82e 	bl	8009368 <_sbrk_r>
 800930c:	3001      	adds	r0, #1
 800930e:	d1dd      	bne.n	80092cc <_malloc_r+0x64>
 8009310:	e7cf      	b.n	80092b2 <_malloc_r+0x4a>
 8009312:	bf00      	nop
 8009314:	2000022c 	.word	0x2000022c
 8009318:	20000230 	.word	0x20000230

0800931c <_realloc_r>:
 800931c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800931e:	4607      	mov	r7, r0
 8009320:	4614      	mov	r4, r2
 8009322:	460e      	mov	r6, r1
 8009324:	b921      	cbnz	r1, 8009330 <_realloc_r+0x14>
 8009326:	4611      	mov	r1, r2
 8009328:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800932c:	f7ff bf9c 	b.w	8009268 <_malloc_r>
 8009330:	b922      	cbnz	r2, 800933c <_realloc_r+0x20>
 8009332:	f7ff ff4d 	bl	80091d0 <_free_r>
 8009336:	4625      	mov	r5, r4
 8009338:	4628      	mov	r0, r5
 800933a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800933c:	f000 f830 	bl	80093a0 <_malloc_usable_size_r>
 8009340:	42a0      	cmp	r0, r4
 8009342:	d20f      	bcs.n	8009364 <_realloc_r+0x48>
 8009344:	4621      	mov	r1, r4
 8009346:	4638      	mov	r0, r7
 8009348:	f7ff ff8e 	bl	8009268 <_malloc_r>
 800934c:	4605      	mov	r5, r0
 800934e:	2800      	cmp	r0, #0
 8009350:	d0f2      	beq.n	8009338 <_realloc_r+0x1c>
 8009352:	4631      	mov	r1, r6
 8009354:	4622      	mov	r2, r4
 8009356:	f7ff ff13 	bl	8009180 <memcpy>
 800935a:	4631      	mov	r1, r6
 800935c:	4638      	mov	r0, r7
 800935e:	f7ff ff37 	bl	80091d0 <_free_r>
 8009362:	e7e9      	b.n	8009338 <_realloc_r+0x1c>
 8009364:	4635      	mov	r5, r6
 8009366:	e7e7      	b.n	8009338 <_realloc_r+0x1c>

08009368 <_sbrk_r>:
 8009368:	b538      	push	{r3, r4, r5, lr}
 800936a:	2300      	movs	r3, #0
 800936c:	4d05      	ldr	r5, [pc, #20]	; (8009384 <_sbrk_r+0x1c>)
 800936e:	4604      	mov	r4, r0
 8009370:	4608      	mov	r0, r1
 8009372:	602b      	str	r3, [r5, #0]
 8009374:	f7f7 fa92 	bl	800089c <_sbrk>
 8009378:	1c43      	adds	r3, r0, #1
 800937a:	d102      	bne.n	8009382 <_sbrk_r+0x1a>
 800937c:	682b      	ldr	r3, [r5, #0]
 800937e:	b103      	cbz	r3, 8009382 <_sbrk_r+0x1a>
 8009380:	6023      	str	r3, [r4, #0]
 8009382:	bd38      	pop	{r3, r4, r5, pc}
 8009384:	20000a90 	.word	0x20000a90

08009388 <__malloc_lock>:
 8009388:	4801      	ldr	r0, [pc, #4]	; (8009390 <__malloc_lock+0x8>)
 800938a:	f000 b811 	b.w	80093b0 <__retarget_lock_acquire_recursive>
 800938e:	bf00      	nop
 8009390:	20000a98 	.word	0x20000a98

08009394 <__malloc_unlock>:
 8009394:	4801      	ldr	r0, [pc, #4]	; (800939c <__malloc_unlock+0x8>)
 8009396:	f000 b80c 	b.w	80093b2 <__retarget_lock_release_recursive>
 800939a:	bf00      	nop
 800939c:	20000a98 	.word	0x20000a98

080093a0 <_malloc_usable_size_r>:
 80093a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093a4:	1f18      	subs	r0, r3, #4
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	bfbc      	itt	lt
 80093aa:	580b      	ldrlt	r3, [r1, r0]
 80093ac:	18c0      	addlt	r0, r0, r3
 80093ae:	4770      	bx	lr

080093b0 <__retarget_lock_acquire_recursive>:
 80093b0:	4770      	bx	lr

080093b2 <__retarget_lock_release_recursive>:
 80093b2:	4770      	bx	lr

080093b4 <_init>:
 80093b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093b6:	bf00      	nop
 80093b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093ba:	bc08      	pop	{r3}
 80093bc:	469e      	mov	lr, r3
 80093be:	4770      	bx	lr

080093c0 <_fini>:
 80093c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093c2:	bf00      	nop
 80093c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093c6:	bc08      	pop	{r3}
 80093c8:	469e      	mov	lr, r3
 80093ca:	4770      	bx	lr
