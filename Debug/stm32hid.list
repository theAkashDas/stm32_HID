
stm32hid.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000efe4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f0  0800f0f8  0800f0f8  0001f0f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f5e8  0800f5e8  000203cc  2**0
                  CONTENTS
  4 .ARM          00000000  0800f5e8  0800f5e8  000203cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f5e8  0800f5e8  000203cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f5e8  0800f5e8  0001f5e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f5ec  0800f5ec  0001f5ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003cc  20000000  0800f5f0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bd8  200003d0  0800f9bc  000203d0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000fa8  0800f9bc  00020fa8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000203cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f8ba  00000000  00000000  000203f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000421d  00000000  00000000  0003fcaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017a0  00000000  00000000  00043ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001620  00000000  00000000  00045670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006bc6  00000000  00000000  00046c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c452  00000000  00000000  0004d856  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099190  00000000  00000000  00069ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00102e38  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007634  00000000  00000000  00102e8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200003d0 	.word	0x200003d0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800f0dc 	.word	0x0800f0dc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200003d4 	.word	0x200003d4
 800014c:	0800f0dc 	.word	0x0800f0dc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b088      	sub	sp, #32
 8000f48:	af04      	add	r7, sp, #16
 8000f4a:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8000f4c:	2364      	movs	r3, #100	; 0x64
 8000f4e:	9302      	str	r3, [sp, #8]
 8000f50:	2301      	movs	r3, #1
 8000f52:	9301      	str	r3, [sp, #4]
 8000f54:	f107 030f 	add.w	r3, r7, #15
 8000f58:	9300      	str	r3, [sp, #0]
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	2275      	movs	r2, #117	; 0x75
 8000f5e:	21d0      	movs	r1, #208	; 0xd0
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f002 fcd5 	bl	8003910 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8000f66:	7bfb      	ldrb	r3, [r7, #15]
 8000f68:	2b68      	cmp	r3, #104	; 0x68
 8000f6a:	d13d      	bne.n	8000fe8 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8000f70:	2364      	movs	r3, #100	; 0x64
 8000f72:	9302      	str	r3, [sp, #8]
 8000f74:	2301      	movs	r3, #1
 8000f76:	9301      	str	r3, [sp, #4]
 8000f78:	f107 030e 	add.w	r3, r7, #14
 8000f7c:	9300      	str	r3, [sp, #0]
 8000f7e:	2301      	movs	r3, #1
 8000f80:	226b      	movs	r2, #107	; 0x6b
 8000f82:	21d0      	movs	r1, #208	; 0xd0
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f002 fbc9 	bl	800371c <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8000f8a:	2307      	movs	r3, #7
 8000f8c:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8000f8e:	2364      	movs	r3, #100	; 0x64
 8000f90:	9302      	str	r3, [sp, #8]
 8000f92:	2301      	movs	r3, #1
 8000f94:	9301      	str	r3, [sp, #4]
 8000f96:	f107 030e 	add.w	r3, r7, #14
 8000f9a:	9300      	str	r3, [sp, #0]
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	2219      	movs	r2, #25
 8000fa0:	21d0      	movs	r1, #208	; 0xd0
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f002 fbba 	bl	800371c <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8000fac:	2364      	movs	r3, #100	; 0x64
 8000fae:	9302      	str	r3, [sp, #8]
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	9301      	str	r3, [sp, #4]
 8000fb4:	f107 030e 	add.w	r3, r7, #14
 8000fb8:	9300      	str	r3, [sp, #0]
 8000fba:	2301      	movs	r3, #1
 8000fbc:	221c      	movs	r2, #28
 8000fbe:	21d0      	movs	r1, #208	; 0xd0
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f002 fbab 	bl	800371c <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8000fca:	2364      	movs	r3, #100	; 0x64
 8000fcc:	9302      	str	r3, [sp, #8]
 8000fce:	2301      	movs	r3, #1
 8000fd0:	9301      	str	r3, [sp, #4]
 8000fd2:	f107 030e 	add.w	r3, r7, #14
 8000fd6:	9300      	str	r3, [sp, #0]
 8000fd8:	2301      	movs	r3, #1
 8000fda:	221b      	movs	r2, #27
 8000fdc:	21d0      	movs	r1, #208	; 0xd0
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f002 fb9c 	bl	800371c <HAL_I2C_Mem_Write>
        return 0;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	e000      	b.n	8000fea <MPU6050_Init+0xa6>
    }
    return 1;
 8000fe8:	2301      	movs	r3, #1
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3710      	adds	r7, #16
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	0000      	movs	r0, r0
 8000ff4:	0000      	movs	r0, r0
	...

08000ff8 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8000ff8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000ffc:	b094      	sub	sp, #80	; 0x50
 8000ffe:	af04      	add	r7, sp, #16
 8001000:	6078      	str	r0, [r7, #4]
 8001002:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8001004:	2364      	movs	r3, #100	; 0x64
 8001006:	9302      	str	r3, [sp, #8]
 8001008:	230e      	movs	r3, #14
 800100a:	9301      	str	r3, [sp, #4]
 800100c:	f107 0308 	add.w	r3, r7, #8
 8001010:	9300      	str	r3, [sp, #0]
 8001012:	2301      	movs	r3, #1
 8001014:	223b      	movs	r2, #59	; 0x3b
 8001016:	21d0      	movs	r1, #208	; 0xd0
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f002 fc79 	bl	8003910 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 800101e:	7a3b      	ldrb	r3, [r7, #8]
 8001020:	021b      	lsls	r3, r3, #8
 8001022:	b21a      	sxth	r2, r3
 8001024:	7a7b      	ldrb	r3, [r7, #9]
 8001026:	b21b      	sxth	r3, r3
 8001028:	4313      	orrs	r3, r2
 800102a:	b21a      	sxth	r2, r3
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8001030:	7abb      	ldrb	r3, [r7, #10]
 8001032:	021b      	lsls	r3, r3, #8
 8001034:	b21a      	sxth	r2, r3
 8001036:	7afb      	ldrb	r3, [r7, #11]
 8001038:	b21b      	sxth	r3, r3
 800103a:	4313      	orrs	r3, r2
 800103c:	b21a      	sxth	r2, r3
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8001042:	7b3b      	ldrb	r3, [r7, #12]
 8001044:	021b      	lsls	r3, r3, #8
 8001046:	b21a      	sxth	r2, r3
 8001048:	7b7b      	ldrb	r3, [r7, #13]
 800104a:	b21b      	sxth	r3, r3
 800104c:	4313      	orrs	r3, r2
 800104e:	b21a      	sxth	r2, r3
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8001054:	7bbb      	ldrb	r3, [r7, #14]
 8001056:	021b      	lsls	r3, r3, #8
 8001058:	b21a      	sxth	r2, r3
 800105a:	7bfb      	ldrb	r3, [r7, #15]
 800105c:	b21b      	sxth	r3, r3
 800105e:	4313      	orrs	r3, r2
 8001060:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8001062:	7c3b      	ldrb	r3, [r7, #16]
 8001064:	021b      	lsls	r3, r3, #8
 8001066:	b21a      	sxth	r2, r3
 8001068:	7c7b      	ldrb	r3, [r7, #17]
 800106a:	b21b      	sxth	r3, r3
 800106c:	4313      	orrs	r3, r2
 800106e:	b21a      	sxth	r2, r3
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8001074:	7cbb      	ldrb	r3, [r7, #18]
 8001076:	021b      	lsls	r3, r3, #8
 8001078:	b21a      	sxth	r2, r3
 800107a:	7cfb      	ldrb	r3, [r7, #19]
 800107c:	b21b      	sxth	r3, r3
 800107e:	4313      	orrs	r3, r2
 8001080:	b21a      	sxth	r2, r3
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8001086:	7d3b      	ldrb	r3, [r7, #20]
 8001088:	021b      	lsls	r3, r3, #8
 800108a:	b21a      	sxth	r2, r3
 800108c:	7d7b      	ldrb	r3, [r7, #21]
 800108e:	b21b      	sxth	r3, r3
 8001090:	4313      	orrs	r3, r2
 8001092:	b21a      	sxth	r2, r3
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff f9b0 	bl	8000404 <__aeabi_i2d>
 80010a4:	f04f 0200 	mov.w	r2, #0
 80010a8:	4bb7      	ldr	r3, [pc, #732]	; (8001388 <MPU6050_Read_All+0x390>)
 80010aa:	f7ff fb3f 	bl	800072c <__aeabi_ddiv>
 80010ae:	4602      	mov	r2, r0
 80010b0:	460b      	mov	r3, r1
 80010b2:	6839      	ldr	r1, [r7, #0]
 80010b4:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff f9a0 	bl	8000404 <__aeabi_i2d>
 80010c4:	f04f 0200 	mov.w	r2, #0
 80010c8:	4baf      	ldr	r3, [pc, #700]	; (8001388 <MPU6050_Read_All+0x390>)
 80010ca:	f7ff fb2f 	bl	800072c <__aeabi_ddiv>
 80010ce:	4602      	mov	r2, r0
 80010d0:	460b      	mov	r3, r1
 80010d2:	6839      	ldr	r1, [r7, #0]
 80010d4:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff f990 	bl	8000404 <__aeabi_i2d>
 80010e4:	a3a2      	add	r3, pc, #648	; (adr r3, 8001370 <MPU6050_Read_All+0x378>)
 80010e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ea:	f7ff fb1f 	bl	800072c <__aeabi_ddiv>
 80010ee:	4602      	mov	r2, r0
 80010f0:	460b      	mov	r3, r1
 80010f2:	6839      	ldr	r1, [r7, #0]
 80010f4:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 80010f8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff fd7d 	bl	8000bfc <__aeabi_i2f>
 8001102:	4603      	mov	r3, r0
 8001104:	49a1      	ldr	r1, [pc, #644]	; (800138c <MPU6050_Read_All+0x394>)
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff fe80 	bl	8000e0c <__aeabi_fdiv>
 800110c:	4603      	mov	r3, r0
 800110e:	49a0      	ldr	r1, [pc, #640]	; (8001390 <MPU6050_Read_All+0x398>)
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff fcbf 	bl	8000a94 <__addsf3>
 8001116:	4603      	mov	r3, r0
 8001118:	461a      	mov	r2, r3
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	641a      	str	r2, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff f96d 	bl	8000404 <__aeabi_i2d>
 800112a:	a393      	add	r3, pc, #588	; (adr r3, 8001378 <MPU6050_Read_All+0x380>)
 800112c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001130:	f7ff fafc 	bl	800072c <__aeabi_ddiv>
 8001134:	4602      	mov	r2, r0
 8001136:	460b      	mov	r3, r1
 8001138:	6839      	ldr	r1, [r7, #0]
 800113a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff f95d 	bl	8000404 <__aeabi_i2d>
 800114a:	a38b      	add	r3, pc, #556	; (adr r3, 8001378 <MPU6050_Read_All+0x380>)
 800114c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001150:	f7ff faec 	bl	800072c <__aeabi_ddiv>
 8001154:	4602      	mov	r2, r0
 8001156:	460b      	mov	r3, r1
 8001158:	6839      	ldr	r1, [r7, #0]
 800115a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff f94d 	bl	8000404 <__aeabi_i2d>
 800116a:	a383      	add	r3, pc, #524	; (adr r3, 8001378 <MPU6050_Read_All+0x380>)
 800116c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001170:	f7ff fadc 	bl	800072c <__aeabi_ddiv>
 8001174:	4602      	mov	r2, r0
 8001176:	460b      	mov	r3, r1
 8001178:	6839      	ldr	r1, [r7, #0]
 800117a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 800117e:	f001 f8e1 	bl	8002344 <HAL_GetTick>
 8001182:	4602      	mov	r2, r0
 8001184:	4b83      	ldr	r3, [pc, #524]	; (8001394 <MPU6050_Read_All+0x39c>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff f92a 	bl	80003e4 <__aeabi_ui2d>
 8001190:	f04f 0200 	mov.w	r2, #0
 8001194:	4b80      	ldr	r3, [pc, #512]	; (8001398 <MPU6050_Read_All+0x3a0>)
 8001196:	f7ff fac9 	bl	800072c <__aeabi_ddiv>
 800119a:	4602      	mov	r2, r0
 800119c:	460b      	mov	r3, r1
 800119e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 80011a2:	f001 f8cf 	bl	8002344 <HAL_GetTick>
 80011a6:	4603      	mov	r3, r0
 80011a8:	4a7a      	ldr	r2, [pc, #488]	; (8001394 <MPU6050_Read_All+0x39c>)
 80011aa:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011b2:	461a      	mov	r2, r3
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011ba:	fb03 f202 	mul.w	r2, r3, r2
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80011c4:	4619      	mov	r1, r3
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80011cc:	fb03 f301 	mul.w	r3, r3, r1
 80011d0:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff f916 	bl	8000404 <__aeabi_i2d>
 80011d8:	4602      	mov	r2, r0
 80011da:	460b      	mov	r3, r1
 80011dc:	4610      	mov	r0, r2
 80011de:	4619      	mov	r1, r3
 80011e0:	f00d fdd2 	bl	800ed88 <sqrt>
 80011e4:	e9c7 0108 	strd	r0, r1, [r7, #32]
    if (roll_sqrt != 0.0)
 80011e8:	f04f 0200 	mov.w	r2, #0
 80011ec:	f04f 0300 	mov.w	r3, #0
 80011f0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80011f4:	f7ff fbd8 	bl	80009a8 <__aeabi_dcmpeq>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d119      	bne.n	8001232 <MPU6050_Read_All+0x23a>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff f8fd 	bl	8000404 <__aeabi_i2d>
 800120a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800120e:	f7ff fa8d 	bl	800072c <__aeabi_ddiv>
 8001212:	4602      	mov	r2, r0
 8001214:	460b      	mov	r3, r1
 8001216:	4610      	mov	r0, r2
 8001218:	4619      	mov	r1, r3
 800121a:	f00d fc25 	bl	800ea68 <atan>
 800121e:	a358      	add	r3, pc, #352	; (adr r3, 8001380 <MPU6050_Read_All+0x388>)
 8001220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001224:	f7ff f958 	bl	80004d8 <__aeabi_dmul>
 8001228:	4602      	mov	r2, r0
 800122a:	460b      	mov	r3, r1
 800122c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001230:	e005      	b.n	800123e <MPU6050_Read_All+0x246>
    }
    else
    {
        roll = 0.0;
 8001232:	f04f 0200 	mov.w	r2, #0
 8001236:	f04f 0300 	mov.w	r3, #0
 800123a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001244:	425b      	negs	r3, r3
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff f8dc 	bl	8000404 <__aeabi_i2d>
 800124c:	4682      	mov	sl, r0
 800124e:	468b      	mov	fp, r1
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff f8d4 	bl	8000404 <__aeabi_i2d>
 800125c:	4602      	mov	r2, r0
 800125e:	460b      	mov	r3, r1
 8001260:	4650      	mov	r0, sl
 8001262:	4659      	mov	r1, fp
 8001264:	f00d fd8d 	bl	800ed82 <atan2>
 8001268:	a345      	add	r3, pc, #276	; (adr r3, 8001380 <MPU6050_Read_All+0x388>)
 800126a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800126e:	f7ff f933 	bl	80004d8 <__aeabi_dmul>
 8001272:	4602      	mov	r2, r0
 8001274:	460b      	mov	r3, r1
 8001276:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 800127a:	f04f 0200 	mov.w	r2, #0
 800127e:	4b47      	ldr	r3, [pc, #284]	; (800139c <MPU6050_Read_All+0x3a4>)
 8001280:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001284:	f7ff fb9a 	bl	80009bc <__aeabi_dcmplt>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d00a      	beq.n	80012a4 <MPU6050_Read_All+0x2ac>
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001294:	f04f 0200 	mov.w	r2, #0
 8001298:	4b41      	ldr	r3, [pc, #260]	; (80013a0 <MPU6050_Read_All+0x3a8>)
 800129a:	f7ff fbad 	bl	80009f8 <__aeabi_dcmpgt>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d114      	bne.n	80012ce <MPU6050_Read_All+0x2d6>
 80012a4:	f04f 0200 	mov.w	r2, #0
 80012a8:	4b3d      	ldr	r3, [pc, #244]	; (80013a0 <MPU6050_Read_All+0x3a8>)
 80012aa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80012ae:	f7ff fba3 	bl	80009f8 <__aeabi_dcmpgt>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d015      	beq.n	80012e4 <MPU6050_Read_All+0x2ec>
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80012be:	f04f 0200 	mov.w	r2, #0
 80012c2:	4b36      	ldr	r3, [pc, #216]	; (800139c <MPU6050_Read_All+0x3a4>)
 80012c4:	f7ff fb7a 	bl	80009bc <__aeabi_dcmplt>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d00a      	beq.n	80012e4 <MPU6050_Read_All+0x2ec>
    {
        KalmanY.angle = pitch;
 80012ce:	4935      	ldr	r1, [pc, #212]	; (80013a4 <MPU6050_Read_All+0x3ac>)
 80012d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80012d4:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 80012d8:	6839      	ldr	r1, [r7, #0]
 80012da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80012de:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 80012e2:	e012      	b.n	800130a <MPU6050_Read_All+0x312>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80012ea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80012ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80012f2:	e9cd 2300 	strd	r2, r3, [sp]
 80012f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80012fa:	482a      	ldr	r0, [pc, #168]	; (80013a4 <MPU6050_Read_All+0x3ac>)
 80012fc:	f000 f856 	bl	80013ac <Kalman_getAngle>
 8001300:	4602      	mov	r2, r0
 8001302:	460b      	mov	r3, r1
 8001304:	6839      	ldr	r1, [r7, #0]
 8001306:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001310:	4690      	mov	r8, r2
 8001312:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8001316:	f04f 0200 	mov.w	r2, #0
 800131a:	4b21      	ldr	r3, [pc, #132]	; (80013a0 <MPU6050_Read_All+0x3a8>)
 800131c:	4640      	mov	r0, r8
 800131e:	4649      	mov	r1, r9
 8001320:	f7ff fb6a 	bl	80009f8 <__aeabi_dcmpgt>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d008      	beq.n	800133c <MPU6050_Read_All+0x344>
        DataStruct->Gx = -DataStruct->Gx;
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001330:	4614      	mov	r4, r2
 8001332:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001342:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001346:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800134a:	e9cd 2300 	strd	r2, r3, [sp]
 800134e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001352:	4815      	ldr	r0, [pc, #84]	; (80013a8 <MPU6050_Read_All+0x3b0>)
 8001354:	f000 f82a 	bl	80013ac <Kalman_getAngle>
 8001358:	4602      	mov	r2, r0
 800135a:	460b      	mov	r3, r1
 800135c:	6839      	ldr	r1, [r7, #0]
 800135e:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
 8001362:	bf00      	nop
 8001364:	3740      	adds	r7, #64	; 0x40
 8001366:	46bd      	mov	sp, r7
 8001368:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800136c:	f3af 8000 	nop.w
 8001370:	00000000 	.word	0x00000000
 8001374:	40cc2900 	.word	0x40cc2900
 8001378:	00000000 	.word	0x00000000
 800137c:	40606000 	.word	0x40606000
 8001380:	1a63c1f8 	.word	0x1a63c1f8
 8001384:	404ca5dc 	.word	0x404ca5dc
 8001388:	40d00000 	.word	0x40d00000
 800138c:	43aa0000 	.word	0x43aa0000
 8001390:	42121eb8 	.word	0x42121eb8
 8001394:	20000440 	.word	0x20000440
 8001398:	408f4000 	.word	0x408f4000
 800139c:	c0568000 	.word	0xc0568000
 80013a0:	40568000 	.word	0x40568000
 80013a4:	20000048 	.word	0x20000048
 80013a8:	20000000 	.word	0x20000000

080013ac <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 80013ac:	b5b0      	push	{r4, r5, r7, lr}
 80013ae:	b092      	sub	sp, #72	; 0x48
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	e9c7 2300 	strd	r2, r3, [r7]
    double rate = newRate - Kalman->bias;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80013be:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80013c2:	f7fe fed1 	bl	8000168 <__aeabi_dsub>
 80013c6:	4602      	mov	r2, r0
 80013c8:	460b      	mov	r3, r1
 80013ca:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += dt * rate;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80013d4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80013d8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80013dc:	f7ff f87c 	bl	80004d8 <__aeabi_dmul>
 80013e0:	4602      	mov	r2, r0
 80013e2:	460b      	mov	r3, r1
 80013e4:	4620      	mov	r0, r4
 80013e6:	4629      	mov	r1, r5
 80013e8:	f7fe fec0 	bl	800016c <__adddf3>
 80013ec:	4602      	mov	r2, r0
 80013ee:	460b      	mov	r3, r1
 80013f0:	68f9      	ldr	r1, [r7, #12]
 80013f2:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001402:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001406:	f7ff f867 	bl	80004d8 <__aeabi_dmul>
 800140a:	4602      	mov	r2, r0
 800140c:	460b      	mov	r3, r1
 800140e:	4610      	mov	r0, r2
 8001410:	4619      	mov	r1, r3
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001418:	f7fe fea6 	bl	8000168 <__aeabi_dsub>
 800141c:	4602      	mov	r2, r0
 800141e:	460b      	mov	r3, r1
 8001420:	4610      	mov	r0, r2
 8001422:	4619      	mov	r1, r3
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800142a:	f7fe fe9d 	bl	8000168 <__aeabi_dsub>
 800142e:	4602      	mov	r2, r0
 8001430:	460b      	mov	r3, r1
 8001432:	4610      	mov	r0, r2
 8001434:	4619      	mov	r1, r3
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800143c:	f7fe fe96 	bl	800016c <__adddf3>
 8001440:	4602      	mov	r2, r0
 8001442:	460b      	mov	r3, r1
 8001444:	4610      	mov	r0, r2
 8001446:	4619      	mov	r1, r3
 8001448:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800144c:	f7ff f844 	bl	80004d8 <__aeabi_dmul>
 8001450:	4602      	mov	r2, r0
 8001452:	460b      	mov	r3, r1
 8001454:	4620      	mov	r0, r4
 8001456:	4629      	mov	r1, r5
 8001458:	f7fe fe88 	bl	800016c <__adddf3>
 800145c:	4602      	mov	r2, r0
 800145e:	460b      	mov	r3, r1
 8001460:	68f9      	ldr	r1, [r7, #12]
 8001462:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001472:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001476:	f7ff f82f 	bl	80004d8 <__aeabi_dmul>
 800147a:	4602      	mov	r2, r0
 800147c:	460b      	mov	r3, r1
 800147e:	4620      	mov	r0, r4
 8001480:	4629      	mov	r1, r5
 8001482:	f7fe fe71 	bl	8000168 <__aeabi_dsub>
 8001486:	4602      	mov	r2, r0
 8001488:	460b      	mov	r3, r1
 800148a:	68f9      	ldr	r1, [r7, #12]
 800148c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800149c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80014a0:	f7ff f81a 	bl	80004d8 <__aeabi_dmul>
 80014a4:	4602      	mov	r2, r0
 80014a6:	460b      	mov	r3, r1
 80014a8:	4620      	mov	r0, r4
 80014aa:	4629      	mov	r1, r5
 80014ac:	f7fe fe5c 	bl	8000168 <__aeabi_dsub>
 80014b0:	4602      	mov	r2, r0
 80014b2:	460b      	mov	r3, r1
 80014b4:	68f9      	ldr	r1, [r7, #12]
 80014b6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80014c6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80014ca:	f7ff f805 	bl	80004d8 <__aeabi_dmul>
 80014ce:	4602      	mov	r2, r0
 80014d0:	460b      	mov	r3, r1
 80014d2:	4620      	mov	r0, r4
 80014d4:	4629      	mov	r1, r5
 80014d6:	f7fe fe49 	bl	800016c <__adddf3>
 80014da:	4602      	mov	r2, r0
 80014dc:	460b      	mov	r3, r1
 80014de:	68f9      	ldr	r1, [r7, #12]
 80014e0:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80014f0:	f7fe fe3c 	bl	800016c <__adddf3>
 80014f4:	4602      	mov	r2, r0
 80014f6:	460b      	mov	r3, r1
 80014f8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001502:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001506:	f7ff f911 	bl	800072c <__aeabi_ddiv>
 800150a:	4602      	mov	r2, r0
 800150c:	460b      	mov	r3, r1
 800150e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    K[1] = Kalman->P[1][0] / S;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001518:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800151c:	f7ff f906 	bl	800072c <__aeabi_ddiv>
 8001520:	4602      	mov	r2, r0
 8001522:	460b      	mov	r3, r1
 8001524:	e9c7 2306 	strd	r2, r3, [r7, #24]

    double y = newAngle - Kalman->angle;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800152e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001532:	f7fe fe19 	bl	8000168 <__aeabi_dsub>
 8001536:	4602      	mov	r2, r0
 8001538:	460b      	mov	r3, r1
 800153a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    Kalman->angle += K[0] * y;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001544:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001548:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800154c:	f7fe ffc4 	bl	80004d8 <__aeabi_dmul>
 8001550:	4602      	mov	r2, r0
 8001552:	460b      	mov	r3, r1
 8001554:	4620      	mov	r0, r4
 8001556:	4629      	mov	r1, r5
 8001558:	f7fe fe08 	bl	800016c <__adddf3>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	68f9      	ldr	r1, [r7, #12]
 8001562:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800156c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001570:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001574:	f7fe ffb0 	bl	80004d8 <__aeabi_dmul>
 8001578:	4602      	mov	r2, r0
 800157a:	460b      	mov	r3, r1
 800157c:	4620      	mov	r0, r4
 800157e:	4629      	mov	r1, r5
 8001580:	f7fe fdf4 	bl	800016c <__adddf3>
 8001584:	4602      	mov	r2, r0
 8001586:	460b      	mov	r3, r1
 8001588:	68f9      	ldr	r1, [r7, #12]
 800158a:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001594:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double P01_temp = Kalman->P[0][1];
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800159e:	e9c7 2308 	strd	r2, r3, [r7, #32]

    Kalman->P[0][0] -= K[0] * P00_temp;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80015a8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80015ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80015b0:	f7fe ff92 	bl	80004d8 <__aeabi_dmul>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	4620      	mov	r0, r4
 80015ba:	4629      	mov	r1, r5
 80015bc:	f7fe fdd4 	bl	8000168 <__aeabi_dsub>
 80015c0:	4602      	mov	r2, r0
 80015c2:	460b      	mov	r3, r1
 80015c4:	68f9      	ldr	r1, [r7, #12]
 80015c6:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80015d0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80015d4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80015d8:	f7fe ff7e 	bl	80004d8 <__aeabi_dmul>
 80015dc:	4602      	mov	r2, r0
 80015de:	460b      	mov	r3, r1
 80015e0:	4620      	mov	r0, r4
 80015e2:	4629      	mov	r1, r5
 80015e4:	f7fe fdc0 	bl	8000168 <__aeabi_dsub>
 80015e8:	4602      	mov	r2, r0
 80015ea:	460b      	mov	r3, r1
 80015ec:	68f9      	ldr	r1, [r7, #12]
 80015ee:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 80015f8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80015fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001600:	f7fe ff6a 	bl	80004d8 <__aeabi_dmul>
 8001604:	4602      	mov	r2, r0
 8001606:	460b      	mov	r3, r1
 8001608:	4620      	mov	r0, r4
 800160a:	4629      	mov	r1, r5
 800160c:	f7fe fdac 	bl	8000168 <__aeabi_dsub>
 8001610:	4602      	mov	r2, r0
 8001612:	460b      	mov	r3, r1
 8001614:	68f9      	ldr	r1, [r7, #12]
 8001616:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001620:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001624:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001628:	f7fe ff56 	bl	80004d8 <__aeabi_dmul>
 800162c:	4602      	mov	r2, r0
 800162e:	460b      	mov	r3, r1
 8001630:	4620      	mov	r0, r4
 8001632:	4629      	mov	r1, r5
 8001634:	f7fe fd98 	bl	8000168 <__aeabi_dsub>
 8001638:	4602      	mov	r2, r0
 800163a:	460b      	mov	r3, r1
 800163c:	68f9      	ldr	r1, [r7, #12]
 800163e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
};
 8001648:	4610      	mov	r0, r2
 800164a:	4619      	mov	r1, r3
 800164c:	3748      	adds	r7, #72	; 0x48
 800164e:	46bd      	mov	sp, r7
 8001650:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001654 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800165a:	f000 fe1b 	bl	8002294 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800165e:	f000 f897 	bl	8001790 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001662:	f000 fa17 	bl	8001a94 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8001666:	f009 ff79 	bl	800b55c <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 800166a:	f000 f8ef 	bl	800184c <MX_ADC1_Init>
  MX_ADC2_Init();
 800166e:	f000 f92b 	bl	80018c8 <MX_ADC2_Init>
  MX_USART1_UART_Init();
 8001672:	f000 f9e5 	bl	8001a40 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8001676:	f000 f965 	bl	8001944 <MX_I2C2_Init>
  MX_TIM1_Init();
 800167a:	f000 f991 	bl	80019a0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  MPU6050_Init(&hi2c2);
 800167e:	4837      	ldr	r0, [pc, #220]	; (800175c <main+0x108>)
 8001680:	f7ff fc60 	bl	8000f44 <MPU6050_Init>


  HAL_UART_Receive_IT(&huart1, &UART1_recv, 1);
 8001684:	2201      	movs	r2, #1
 8001686:	4936      	ldr	r1, [pc, #216]	; (8001760 <main+0x10c>)
 8001688:	4836      	ldr	r0, [pc, #216]	; (8001764 <main+0x110>)
 800168a:	f005 fe4c 	bl	8007326 <HAL_UART_Receive_IT>
  HAL_ADCEx_Calibration_Start(&hadc1);
 800168e:	4836      	ldr	r0, [pc, #216]	; (8001768 <main+0x114>)
 8001690:	f001 fab2 	bl	8002bf8 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2);
 8001694:	4835      	ldr	r0, [pc, #212]	; (800176c <main+0x118>)
 8001696:	f001 faaf 	bl	8002bf8 <HAL_ADCEx_Calibration_Start>
  debugenable.system = 1;
 800169a:	4b35      	ldr	r3, [pc, #212]	; (8001770 <main+0x11c>)
 800169c:	2201      	movs	r2, #1
 800169e:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MPU6050_Read_All(&hi2c2,&mpu6050);
 80016a0:	4934      	ldr	r1, [pc, #208]	; (8001774 <main+0x120>)
 80016a2:	482e      	ldr	r0, [pc, #184]	; (800175c <main+0x108>)
 80016a4:	f7ff fca8 	bl	8000ff8 <MPU6050_Read_All>
//	  SIMPLE_DEBUG("%f,%f,%f\n ",mpu6050.Gx,mpu6050.Gy,mpu6050.Gz);
	  SIMPLE_DEBUG("%f,%f\n",mpu6050.KalmanAngleX,mpu6050.KalmanAngleY)
 80016a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016ac:	2100      	movs	r1, #0
 80016ae:	4832      	ldr	r0, [pc, #200]	; (8001778 <main+0x124>)
 80016b0:	f00a fb38 	bl	800bd24 <memset>
 80016b4:	4b2f      	ldr	r3, [pc, #188]	; (8001774 <main+0x120>)
 80016b6:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 80016ba:	4b2e      	ldr	r3, [pc, #184]	; (8001774 <main+0x120>)
 80016bc:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80016c0:	e9cd 2300 	strd	r2, r3, [sp]
 80016c4:	4602      	mov	r2, r0
 80016c6:	460b      	mov	r3, r1
 80016c8:	492c      	ldr	r1, [pc, #176]	; (800177c <main+0x128>)
 80016ca:	482b      	ldr	r0, [pc, #172]	; (8001778 <main+0x124>)
 80016cc:	f00a ff92 	bl	800c5f4 <siprintf>
 80016d0:	4829      	ldr	r0, [pc, #164]	; (8001778 <main+0x124>)
 80016d2:	f7fe fd3d 	bl	8000150 <strlen>
 80016d6:	4603      	mov	r3, r0
 80016d8:	b29a      	uxth	r2, r3
 80016da:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80016de:	4926      	ldr	r1, [pc, #152]	; (8001778 <main+0x124>)
 80016e0:	4820      	ldr	r0, [pc, #128]	; (8001764 <main+0x110>)
 80016e2:	f005 fd8e 	bl	8007202 <HAL_UART_Transmit>
      HAL_ADC_Start(&hadc1);
 80016e6:	4820      	ldr	r0, [pc, #128]	; (8001768 <main+0x114>)
 80016e8:	f000 ff32 	bl	8002550 <HAL_ADC_Start>
      HAL_ADC_Start(&hadc2);
 80016ec:	481f      	ldr	r0, [pc, #124]	; (800176c <main+0x118>)
 80016ee:	f000 ff2f 	bl	8002550 <HAL_ADC_Start>
     // Poll ADC1 Peripheral & TimeOut = 1mSec
      HAL_ADC_PollForConversion(&hadc1, 1);
 80016f2:	2101      	movs	r1, #1
 80016f4:	481c      	ldr	r0, [pc, #112]	; (8001768 <main+0x114>)
 80016f6:	f000 ffd9 	bl	80026ac <HAL_ADC_PollForConversion>
      HAL_ADC_PollForConversion(&hadc2, 1);
 80016fa:	2101      	movs	r1, #1
 80016fc:	481b      	ldr	r0, [pc, #108]	; (800176c <main+0x118>)
 80016fe:	f000 ffd5 	bl	80026ac <HAL_ADC_PollForConversion>
     // Read The ADC Conversion Result & Map It To PWM DutyCycle
      AD_RES1 = HAL_ADC_GetValue(&hadc1);
 8001702:	4819      	ldr	r0, [pc, #100]	; (8001768 <main+0x114>)
 8001704:	f001 f8d8 	bl	80028b8 <HAL_ADC_GetValue>
 8001708:	4603      	mov	r3, r0
 800170a:	b29a      	uxth	r2, r3
 800170c:	4b1c      	ldr	r3, [pc, #112]	; (8001780 <main+0x12c>)
 800170e:	801a      	strh	r2, [r3, #0]
      AD_RES2 = HAL_ADC_GetValue(&hadc2);
 8001710:	4816      	ldr	r0, [pc, #88]	; (800176c <main+0x118>)
 8001712:	f001 f8d1 	bl	80028b8 <HAL_ADC_GetValue>
 8001716:	4603      	mov	r3, r0
 8001718:	b29a      	uxth	r2, r3
 800171a:	4b1a      	ldr	r3, [pc, #104]	; (8001784 <main+0x130>)
 800171c:	801a      	strh	r2, [r3, #0]

//      if()
      {
    	  mousehid.mouse_x = mpu6050.KalmanAngleY;
 800171e:	4b15      	ldr	r3, [pc, #84]	; (8001774 <main+0x120>)
 8001720:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001724:	4610      	mov	r0, r2
 8001726:	4619      	mov	r1, r3
 8001728:	f7ff f986 	bl	8000a38 <__aeabi_d2iz>
 800172c:	4603      	mov	r3, r0
 800172e:	b25a      	sxtb	r2, r3
 8001730:	4b15      	ldr	r3, [pc, #84]	; (8001788 <main+0x134>)
 8001732:	705a      	strb	r2, [r3, #1]
    	  mousehid.mouse_y = mpu6050.KalmanAngleX;
 8001734:	4b0f      	ldr	r3, [pc, #60]	; (8001774 <main+0x120>)
 8001736:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800173a:	4610      	mov	r0, r2
 800173c:	4619      	mov	r1, r3
 800173e:	f7ff f97b 	bl	8000a38 <__aeabi_d2iz>
 8001742:	4603      	mov	r3, r0
 8001744:	b25a      	sxtb	r2, r3
 8001746:	4b10      	ldr	r3, [pc, #64]	; (8001788 <main+0x134>)
 8001748:	709a      	strb	r2, [r3, #2]
      }

      USBD_HID_SendReport(&hUsbDeviceFS, &mousehid, sizeof(mousehid));
 800174a:	2204      	movs	r2, #4
 800174c:	490e      	ldr	r1, [pc, #56]	; (8001788 <main+0x134>)
 800174e:	480f      	ldr	r0, [pc, #60]	; (800178c <main+0x138>)
 8001750:	f008 fe14 	bl	800a37c <USBD_HID_SendReport>
//			  USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof(keyboardhid));
//
//			  pressed = HAL_GetTick();
//		  }
//	  }
	  HAL_Delay(50);
 8001754:	2032      	movs	r0, #50	; 0x32
 8001756:	f000 fdff 	bl	8002358 <HAL_Delay>
	  MPU6050_Read_All(&hi2c2,&mpu6050);
 800175a:	e7a1      	b.n	80016a0 <main+0x4c>
 800175c:	200004d0 	.word	0x200004d0
 8001760:	20000525 	.word	0x20000525
 8001764:	20000558 	.word	0x20000558
 8001768:	20000528 	.word	0x20000528
 800176c:	20000448 	.word	0x20000448
 8001770:	20000524 	.word	0x20000524
 8001774:	20000478 	.word	0x20000478
 8001778:	200005e4 	.word	0x200005e4
 800177c:	0800f0f8 	.word	0x0800f0f8
 8001780:	200003ee 	.word	0x200003ee
 8001784:	200003f0 	.word	0x200003f0
 8001788:	20000418 	.word	0x20000418
 800178c:	200007e8 	.word	0x200007e8

08001790 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b094      	sub	sp, #80	; 0x50
 8001794:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001796:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800179a:	2228      	movs	r2, #40	; 0x28
 800179c:	2100      	movs	r1, #0
 800179e:	4618      	mov	r0, r3
 80017a0:	f00a fac0 	bl	800bd24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017a4:	f107 0314 	add.w	r3, r7, #20
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	609a      	str	r2, [r3, #8]
 80017b0:	60da      	str	r2, [r3, #12]
 80017b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017b4:	1d3b      	adds	r3, r7, #4
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	605a      	str	r2, [r3, #4]
 80017bc:	609a      	str	r2, [r3, #8]
 80017be:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017c0:	2301      	movs	r3, #1
 80017c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80017ca:	2300      	movs	r3, #0
 80017cc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017ce:	2301      	movs	r3, #1
 80017d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017d2:	2302      	movs	r3, #2
 80017d4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80017dc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80017e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017e6:	4618      	mov	r0, r3
 80017e8:	f004 fb02 	bl	8005df0 <HAL_RCC_OscConfig>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80017f2:	f000 fa71 	bl	8001cd8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017f6:	230f      	movs	r3, #15
 80017f8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017fa:	2302      	movs	r3, #2
 80017fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017fe:	2300      	movs	r3, #0
 8001800:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001802:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001806:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001808:	2300      	movs	r3, #0
 800180a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800180c:	f107 0314 	add.w	r3, r7, #20
 8001810:	2101      	movs	r1, #1
 8001812:	4618      	mov	r0, r3
 8001814:	f004 fd6c 	bl	80062f0 <HAL_RCC_ClockConfig>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800181e:	f000 fa5b 	bl	8001cd8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8001822:	2312      	movs	r3, #18
 8001824:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8001826:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800182a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800182c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001830:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001832:	1d3b      	adds	r3, r7, #4
 8001834:	4618      	mov	r0, r3
 8001836:	f004 fef5 	bl	8006624 <HAL_RCCEx_PeriphCLKConfig>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001840:	f000 fa4a 	bl	8001cd8 <Error_Handler>
  }
}
 8001844:	bf00      	nop
 8001846:	3750      	adds	r7, #80	; 0x50
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001852:	1d3b      	adds	r3, r7, #4
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800185c:	4b18      	ldr	r3, [pc, #96]	; (80018c0 <MX_ADC1_Init+0x74>)
 800185e:	4a19      	ldr	r2, [pc, #100]	; (80018c4 <MX_ADC1_Init+0x78>)
 8001860:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001862:	4b17      	ldr	r3, [pc, #92]	; (80018c0 <MX_ADC1_Init+0x74>)
 8001864:	2200      	movs	r2, #0
 8001866:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001868:	4b15      	ldr	r3, [pc, #84]	; (80018c0 <MX_ADC1_Init+0x74>)
 800186a:	2200      	movs	r2, #0
 800186c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800186e:	4b14      	ldr	r3, [pc, #80]	; (80018c0 <MX_ADC1_Init+0x74>)
 8001870:	2200      	movs	r2, #0
 8001872:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001874:	4b12      	ldr	r3, [pc, #72]	; (80018c0 <MX_ADC1_Init+0x74>)
 8001876:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800187a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800187c:	4b10      	ldr	r3, [pc, #64]	; (80018c0 <MX_ADC1_Init+0x74>)
 800187e:	2200      	movs	r2, #0
 8001880:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001882:	4b0f      	ldr	r3, [pc, #60]	; (80018c0 <MX_ADC1_Init+0x74>)
 8001884:	2201      	movs	r2, #1
 8001886:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001888:	480d      	ldr	r0, [pc, #52]	; (80018c0 <MX_ADC1_Init+0x74>)
 800188a:	f000 fd89 	bl	80023a0 <HAL_ADC_Init>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001894:	f000 fa20 	bl	8001cd8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001898:	2307      	movs	r3, #7
 800189a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800189c:	2301      	movs	r3, #1
 800189e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80018a0:	2300      	movs	r3, #0
 80018a2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018a4:	1d3b      	adds	r3, r7, #4
 80018a6:	4619      	mov	r1, r3
 80018a8:	4805      	ldr	r0, [pc, #20]	; (80018c0 <MX_ADC1_Init+0x74>)
 80018aa:	f001 f811 	bl	80028d0 <HAL_ADC_ConfigChannel>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80018b4:	f000 fa10 	bl	8001cd8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80018b8:	bf00      	nop
 80018ba:	3710      	adds	r7, #16
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	20000528 	.word	0x20000528
 80018c4:	40012400 	.word	0x40012400

080018c8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018ce:	1d3b      	adds	r3, r7, #4
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 80018d8:	4b18      	ldr	r3, [pc, #96]	; (800193c <MX_ADC2_Init+0x74>)
 80018da:	4a19      	ldr	r2, [pc, #100]	; (8001940 <MX_ADC2_Init+0x78>)
 80018dc:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80018de:	4b17      	ldr	r3, [pc, #92]	; (800193c <MX_ADC2_Init+0x74>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80018e4:	4b15      	ldr	r3, [pc, #84]	; (800193c <MX_ADC2_Init+0x74>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80018ea:	4b14      	ldr	r3, [pc, #80]	; (800193c <MX_ADC2_Init+0x74>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018f0:	4b12      	ldr	r3, [pc, #72]	; (800193c <MX_ADC2_Init+0x74>)
 80018f2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80018f6:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018f8:	4b10      	ldr	r3, [pc, #64]	; (800193c <MX_ADC2_Init+0x74>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 80018fe:	4b0f      	ldr	r3, [pc, #60]	; (800193c <MX_ADC2_Init+0x74>)
 8001900:	2201      	movs	r2, #1
 8001902:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001904:	480d      	ldr	r0, [pc, #52]	; (800193c <MX_ADC2_Init+0x74>)
 8001906:	f000 fd4b 	bl	80023a0 <HAL_ADC_Init>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8001910:	f000 f9e2 	bl	8001cd8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001914:	2306      	movs	r3, #6
 8001916:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001918:	2301      	movs	r3, #1
 800191a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800191c:	2300      	movs	r3, #0
 800191e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001920:	1d3b      	adds	r3, r7, #4
 8001922:	4619      	mov	r1, r3
 8001924:	4805      	ldr	r0, [pc, #20]	; (800193c <MX_ADC2_Init+0x74>)
 8001926:	f000 ffd3 	bl	80028d0 <HAL_ADC_ConfigChannel>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8001930:	f000 f9d2 	bl	8001cd8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001934:	bf00      	nop
 8001936:	3710      	adds	r7, #16
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	20000448 	.word	0x20000448
 8001940:	40012800 	.word	0x40012800

08001944 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001948:	4b12      	ldr	r3, [pc, #72]	; (8001994 <MX_I2C2_Init+0x50>)
 800194a:	4a13      	ldr	r2, [pc, #76]	; (8001998 <MX_I2C2_Init+0x54>)
 800194c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800194e:	4b11      	ldr	r3, [pc, #68]	; (8001994 <MX_I2C2_Init+0x50>)
 8001950:	4a12      	ldr	r2, [pc, #72]	; (800199c <MX_I2C2_Init+0x58>)
 8001952:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001954:	4b0f      	ldr	r3, [pc, #60]	; (8001994 <MX_I2C2_Init+0x50>)
 8001956:	2200      	movs	r2, #0
 8001958:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800195a:	4b0e      	ldr	r3, [pc, #56]	; (8001994 <MX_I2C2_Init+0x50>)
 800195c:	2200      	movs	r2, #0
 800195e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001960:	4b0c      	ldr	r3, [pc, #48]	; (8001994 <MX_I2C2_Init+0x50>)
 8001962:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001966:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001968:	4b0a      	ldr	r3, [pc, #40]	; (8001994 <MX_I2C2_Init+0x50>)
 800196a:	2200      	movs	r2, #0
 800196c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800196e:	4b09      	ldr	r3, [pc, #36]	; (8001994 <MX_I2C2_Init+0x50>)
 8001970:	2200      	movs	r2, #0
 8001972:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001974:	4b07      	ldr	r3, [pc, #28]	; (8001994 <MX_I2C2_Init+0x50>)
 8001976:	2200      	movs	r2, #0
 8001978:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800197a:	4b06      	ldr	r3, [pc, #24]	; (8001994 <MX_I2C2_Init+0x50>)
 800197c:	2200      	movs	r2, #0
 800197e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001980:	4804      	ldr	r0, [pc, #16]	; (8001994 <MX_I2C2_Init+0x50>)
 8001982:	f001 fd87 	bl	8003494 <HAL_I2C_Init>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800198c:	f000 f9a4 	bl	8001cd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001990:	bf00      	nop
 8001992:	bd80      	pop	{r7, pc}
 8001994:	200004d0 	.word	0x200004d0
 8001998:	40005800 	.word	0x40005800
 800199c:	000186a0 	.word	0x000186a0

080019a0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019a6:	f107 0308 	add.w	r3, r7, #8
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]
 80019ae:	605a      	str	r2, [r3, #4]
 80019b0:	609a      	str	r2, [r3, #8]
 80019b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019b4:	463b      	mov	r3, r7
 80019b6:	2200      	movs	r2, #0
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80019bc:	4b1e      	ldr	r3, [pc, #120]	; (8001a38 <MX_TIM1_Init+0x98>)
 80019be:	4a1f      	ldr	r2, [pc, #124]	; (8001a3c <MX_TIM1_Init+0x9c>)
 80019c0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 48000;
 80019c2:	4b1d      	ldr	r3, [pc, #116]	; (8001a38 <MX_TIM1_Init+0x98>)
 80019c4:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80019c8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ca:	4b1b      	ldr	r3, [pc, #108]	; (8001a38 <MX_TIM1_Init+0x98>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50;
 80019d0:	4b19      	ldr	r3, [pc, #100]	; (8001a38 <MX_TIM1_Init+0x98>)
 80019d2:	2232      	movs	r2, #50	; 0x32
 80019d4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019d6:	4b18      	ldr	r3, [pc, #96]	; (8001a38 <MX_TIM1_Init+0x98>)
 80019d8:	2200      	movs	r2, #0
 80019da:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80019dc:	4b16      	ldr	r3, [pc, #88]	; (8001a38 <MX_TIM1_Init+0x98>)
 80019de:	2200      	movs	r2, #0
 80019e0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019e2:	4b15      	ldr	r3, [pc, #84]	; (8001a38 <MX_TIM1_Init+0x98>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80019e8:	4813      	ldr	r0, [pc, #76]	; (8001a38 <MX_TIM1_Init+0x98>)
 80019ea:	f004 ff95 	bl	8006918 <HAL_TIM_Base_Init>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80019f4:	f000 f970 	bl	8001cd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80019fe:	f107 0308 	add.w	r3, r7, #8
 8001a02:	4619      	mov	r1, r3
 8001a04:	480c      	ldr	r0, [pc, #48]	; (8001a38 <MX_TIM1_Init+0x98>)
 8001a06:	f005 f95f 	bl	8006cc8 <HAL_TIM_ConfigClockSource>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001a10:	f000 f962 	bl	8001cd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a14:	2300      	movs	r3, #0
 8001a16:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a1c:	463b      	mov	r3, r7
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4805      	ldr	r0, [pc, #20]	; (8001a38 <MX_TIM1_Init+0x98>)
 8001a22:	f005 fb31 	bl	8007088 <HAL_TIMEx_MasterConfigSynchronization>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001a2c:	f000 f954 	bl	8001cd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001a30:	bf00      	nop
 8001a32:	3718      	adds	r7, #24
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	2000059c 	.word	0x2000059c
 8001a3c:	40012c00 	.word	0x40012c00

08001a40 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a44:	4b11      	ldr	r3, [pc, #68]	; (8001a8c <MX_USART1_UART_Init+0x4c>)
 8001a46:	4a12      	ldr	r2, [pc, #72]	; (8001a90 <MX_USART1_UART_Init+0x50>)
 8001a48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a4a:	4b10      	ldr	r3, [pc, #64]	; (8001a8c <MX_USART1_UART_Init+0x4c>)
 8001a4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a50:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a52:	4b0e      	ldr	r3, [pc, #56]	; (8001a8c <MX_USART1_UART_Init+0x4c>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a58:	4b0c      	ldr	r3, [pc, #48]	; (8001a8c <MX_USART1_UART_Init+0x4c>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a5e:	4b0b      	ldr	r3, [pc, #44]	; (8001a8c <MX_USART1_UART_Init+0x4c>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a64:	4b09      	ldr	r3, [pc, #36]	; (8001a8c <MX_USART1_UART_Init+0x4c>)
 8001a66:	220c      	movs	r2, #12
 8001a68:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a6a:	4b08      	ldr	r3, [pc, #32]	; (8001a8c <MX_USART1_UART_Init+0x4c>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a70:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <MX_USART1_UART_Init+0x4c>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a76:	4805      	ldr	r0, [pc, #20]	; (8001a8c <MX_USART1_UART_Init+0x4c>)
 8001a78:	f005 fb76 	bl	8007168 <HAL_UART_Init>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001a82:	f000 f929 	bl	8001cd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a86:	bf00      	nop
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	20000558 	.word	0x20000558
 8001a90:	40013800 	.word	0x40013800

08001a94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b088      	sub	sp, #32
 8001a98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a9a:	f107 0310 	add.w	r3, r7, #16
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	605a      	str	r2, [r3, #4]
 8001aa4:	609a      	str	r2, [r3, #8]
 8001aa6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aa8:	4b3a      	ldr	r3, [pc, #232]	; (8001b94 <MX_GPIO_Init+0x100>)
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	4a39      	ldr	r2, [pc, #228]	; (8001b94 <MX_GPIO_Init+0x100>)
 8001aae:	f043 0320 	orr.w	r3, r3, #32
 8001ab2:	6193      	str	r3, [r2, #24]
 8001ab4:	4b37      	ldr	r3, [pc, #220]	; (8001b94 <MX_GPIO_Init+0x100>)
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	f003 0320 	and.w	r3, r3, #32
 8001abc:	60fb      	str	r3, [r7, #12]
 8001abe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac0:	4b34      	ldr	r3, [pc, #208]	; (8001b94 <MX_GPIO_Init+0x100>)
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	4a33      	ldr	r2, [pc, #204]	; (8001b94 <MX_GPIO_Init+0x100>)
 8001ac6:	f043 0304 	orr.w	r3, r3, #4
 8001aca:	6193      	str	r3, [r2, #24]
 8001acc:	4b31      	ldr	r3, [pc, #196]	; (8001b94 <MX_GPIO_Init+0x100>)
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	f003 0304 	and.w	r3, r3, #4
 8001ad4:	60bb      	str	r3, [r7, #8]
 8001ad6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ad8:	4b2e      	ldr	r3, [pc, #184]	; (8001b94 <MX_GPIO_Init+0x100>)
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	4a2d      	ldr	r2, [pc, #180]	; (8001b94 <MX_GPIO_Init+0x100>)
 8001ade:	f043 0308 	orr.w	r3, r3, #8
 8001ae2:	6193      	str	r3, [r2, #24]
 8001ae4:	4b2b      	ldr	r3, [pc, #172]	; (8001b94 <MX_GPIO_Init+0x100>)
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	f003 0308 	and.w	r3, r3, #8
 8001aec:	607b      	str	r3, [r7, #4]
 8001aee:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001af0:	2200      	movs	r2, #0
 8001af2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001af6:	4828      	ldr	r0, [pc, #160]	; (8001b98 <MX_GPIO_Init+0x104>)
 8001af8:	f001 fc83 	bl	8003402 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SW_Pin */
  GPIO_InitStruct.Pin = SW_Pin;
 8001afc:	2302      	movs	r3, #2
 8001afe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b00:	4b26      	ldr	r3, [pc, #152]	; (8001b9c <MX_GPIO_Init+0x108>)
 8001b02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b04:	2300      	movs	r3, #0
 8001b06:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SW_GPIO_Port, &GPIO_InitStruct);
 8001b08:	f107 0310 	add.w	r3, r7, #16
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	4824      	ldr	r0, [pc, #144]	; (8001ba0 <MX_GPIO_Init+0x10c>)
 8001b10:	f001 fadc 	bl	80030cc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001b14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b22:	2302      	movs	r3, #2
 8001b24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001b26:	f107 0310 	add.w	r3, r7, #16
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	481a      	ldr	r0, [pc, #104]	; (8001b98 <MX_GPIO_Init+0x104>)
 8001b2e:	f001 facd 	bl	80030cc <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin B2_Pin B3_Pin B4_Pin */
  GPIO_InitStruct.Pin = B1_Pin|B2_Pin|B3_Pin|B4_Pin;
 8001b32:	23b8      	movs	r3, #184	; 0xb8
 8001b34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b36:	4b19      	ldr	r3, [pc, #100]	; (8001b9c <MX_GPIO_Init+0x108>)
 8001b38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b3e:	f107 0310 	add.w	r3, r7, #16
 8001b42:	4619      	mov	r1, r3
 8001b44:	4814      	ldr	r0, [pc, #80]	; (8001b98 <MX_GPIO_Init+0x104>)
 8001b46:	f001 fac1 	bl	80030cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	2007      	movs	r0, #7
 8001b50:	f001 f9d5 	bl	8002efe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001b54:	2007      	movs	r0, #7
 8001b56:	f001 f9ee 	bl	8002f36 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	2009      	movs	r0, #9
 8001b60:	f001 f9cd 	bl	8002efe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001b64:	2009      	movs	r0, #9
 8001b66:	f001 f9e6 	bl	8002f36 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	200a      	movs	r0, #10
 8001b70:	f001 f9c5 	bl	8002efe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001b74:	200a      	movs	r0, #10
 8001b76:	f001 f9de 	bl	8002f36 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	2017      	movs	r0, #23
 8001b80:	f001 f9bd 	bl	8002efe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001b84:	2017      	movs	r0, #23
 8001b86:	f001 f9d6 	bl	8002f36 <HAL_NVIC_EnableIRQ>

}
 8001b8a:	bf00      	nop
 8001b8c:	3720      	adds	r7, #32
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40021000 	.word	0x40021000
 8001b98:	40010c00 	.word	0x40010c00
 8001b9c:	10110000 	.word	0x10110000
 8001ba0:	40010800 	.word	0x40010800

08001ba4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_1) // If The INT Source Is EXTI Line9 (A9 Pin)
 8001bae:	88fb      	ldrh	r3, [r7, #6]
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d102      	bne.n	8001bba <HAL_GPIO_EXTI_Callback+0x16>
    {
    	interrupt_happened = 1;
 8001bb4:	4b14      	ldr	r3, [pc, #80]	; (8001c08 <HAL_GPIO_EXTI_Callback+0x64>)
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	701a      	strb	r2, [r3, #0]
    }
    if(GPIO_Pin == GPIO_PIN_3 && state == true) // If The INT Source Is EXTI Line9 (A9 Pin)
 8001bba:	88fb      	ldrh	r3, [r7, #6]
 8001bbc:	2b08      	cmp	r3, #8
 8001bbe:	d10c      	bne.n	8001bda <HAL_GPIO_EXTI_Callback+0x36>
 8001bc0:	4b12      	ldr	r3, [pc, #72]	; (8001c0c <HAL_GPIO_EXTI_Callback+0x68>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d008      	beq.n	8001bda <HAL_GPIO_EXTI_Callback+0x36>
    {
    	HAL_TIM_Base_Start_IT(&htim1);
 8001bc8:	4811      	ldr	r0, [pc, #68]	; (8001c10 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001bca:	f004 fef5 	bl	80069b8 <HAL_TIM_Base_Start_IT>
    	interrupt_happened = 1;
 8001bce:	4b0e      	ldr	r3, [pc, #56]	; (8001c08 <HAL_GPIO_EXTI_Callback+0x64>)
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	701a      	strb	r2, [r3, #0]
    	state = false;
 8001bd4:	4b0d      	ldr	r3, [pc, #52]	; (8001c0c <HAL_GPIO_EXTI_Callback+0x68>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	701a      	strb	r2, [r3, #0]
    }
    if(GPIO_Pin == GPIO_PIN_4) // If The INT Source Is EXTI Line9 (A9 Pin)
 8001bda:	88fb      	ldrh	r3, [r7, #6]
 8001bdc:	2b10      	cmp	r3, #16
 8001bde:	d102      	bne.n	8001be6 <HAL_GPIO_EXTI_Callback+0x42>
    {
    	interrupt_happened = 1;
 8001be0:	4b09      	ldr	r3, [pc, #36]	; (8001c08 <HAL_GPIO_EXTI_Callback+0x64>)
 8001be2:	2201      	movs	r2, #1
 8001be4:	701a      	strb	r2, [r3, #0]
    }
    if(GPIO_Pin == GPIO_PIN_5) // If The INT Source Is EXTI Line9 (A9 Pin)
 8001be6:	88fb      	ldrh	r3, [r7, #6]
 8001be8:	2b20      	cmp	r3, #32
 8001bea:	d102      	bne.n	8001bf2 <HAL_GPIO_EXTI_Callback+0x4e>
    {
    	interrupt_happened = 1;
 8001bec:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <HAL_GPIO_EXTI_Callback+0x64>)
 8001bee:	2201      	movs	r2, #1
 8001bf0:	701a      	strb	r2, [r3, #0]
    }
    if(GPIO_Pin == GPIO_PIN_7) // If The INT Source Is EXTI Line9 (A9 Pin)
 8001bf2:	88fb      	ldrh	r3, [r7, #6]
 8001bf4:	2b80      	cmp	r3, #128	; 0x80
 8001bf6:	d102      	bne.n	8001bfe <HAL_GPIO_EXTI_Callback+0x5a>
    {
    	interrupt_happened = 1;
 8001bf8:	4b03      	ldr	r3, [pc, #12]	; (8001c08 <HAL_GPIO_EXTI_Callback+0x64>)
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	701a      	strb	r2, [r3, #0]
    }

}
 8001bfe:	bf00      	nop
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	200003ec 	.word	0x200003ec
 8001c0c:	20000090 	.word	0x20000090
 8001c10:	2000059c 	.word	0x2000059c

08001c14 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
	  UNUSED(htim);

	  /* NOTE : This function should not be modified, when the callback is needed,
	            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
	   */
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_RESET)
 8001c1c:	2108      	movs	r1, #8
 8001c1e:	480a      	ldr	r0, [pc, #40]	; (8001c48 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001c20:	f001 fbd8 	bl	80033d4 <HAL_GPIO_ReadPin>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d10a      	bne.n	8001c40 <HAL_TIM_PeriodElapsedCallback+0x2c>
		{
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 8001c2a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c2e:	4806      	ldr	r0, [pc, #24]	; (8001c48 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001c30:	f001 fbff 	bl	8003432 <HAL_GPIO_TogglePin>
			state = true;
 8001c34:	4b05      	ldr	r3, [pc, #20]	; (8001c4c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001c36:	2201      	movs	r2, #1
 8001c38:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim1);
 8001c3a:	4805      	ldr	r0, [pc, #20]	; (8001c50 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001c3c:	f004 ff0e 	bl	8006a5c <HAL_TIM_Base_Stop_IT>
		}
}
 8001c40:	bf00      	nop
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	40010c00 	.word	0x40010c00
 8001c4c:	20000090 	.word	0x20000090
 8001c50:	2000059c 	.word	0x2000059c

08001c54 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a0b      	ldr	r2, [pc, #44]	; (8001c90 <HAL_UART_RxCpltCallback+0x3c>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d10a      	bne.n	8001c7c <HAL_UART_RxCpltCallback+0x28>
	{
		UART1_recv -= 48;
 8001c66:	4b0b      	ldr	r3, [pc, #44]	; (8001c94 <HAL_UART_RxCpltCallback+0x40>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	3b30      	subs	r3, #48	; 0x30
 8001c6c:	b2da      	uxtb	r2, r3
 8001c6e:	4b09      	ldr	r3, [pc, #36]	; (8001c94 <HAL_UART_RxCpltCallback+0x40>)
 8001c70:	701a      	strb	r2, [r3, #0]
		printData(UART1_recv);
 8001c72:	4b08      	ldr	r3, [pc, #32]	; (8001c94 <HAL_UART_RxCpltCallback+0x40>)
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f000 f810 	bl	8001c9c <printData>
	}
	HAL_UART_Receive_IT(&huart1, &UART1_recv, 1);
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	4905      	ldr	r1, [pc, #20]	; (8001c94 <HAL_UART_RxCpltCallback+0x40>)
 8001c80:	4805      	ldr	r0, [pc, #20]	; (8001c98 <HAL_UART_RxCpltCallback+0x44>)
 8001c82:	f005 fb50 	bl	8007326 <HAL_UART_Receive_IT>
}
 8001c86:	bf00      	nop
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	40013800 	.word	0x40013800
 8001c94:	20000525 	.word	0x20000525
 8001c98:	20000558 	.word	0x20000558

08001c9c <printData>:
void printData(int data)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
	sprintf((char*)buf,"Data received:  %d \r\n",data);
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	4909      	ldr	r1, [pc, #36]	; (8001ccc <printData+0x30>)
 8001ca8:	4809      	ldr	r0, [pc, #36]	; (8001cd0 <printData+0x34>)
 8001caa:	f00a fca3 	bl	800c5f4 <siprintf>
	HAL_UART_Transmit(&huart1,buf,strlen((char*)buf),HAL_MAX_DELAY);
 8001cae:	4808      	ldr	r0, [pc, #32]	; (8001cd0 <printData+0x34>)
 8001cb0:	f7fe fa4e 	bl	8000150 <strlen>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	b29a      	uxth	r2, r3
 8001cb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cbc:	4904      	ldr	r1, [pc, #16]	; (8001cd0 <printData+0x34>)
 8001cbe:	4805      	ldr	r0, [pc, #20]	; (8001cd4 <printData+0x38>)
 8001cc0:	f005 fa9f 	bl	8007202 <HAL_UART_Transmit>
}
 8001cc4:	bf00      	nop
 8001cc6:	3708      	adds	r7, #8
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	0800f100 	.word	0x0800f100
 8001cd0:	200003f4 	.word	0x200003f4
 8001cd4:	20000558 	.word	0x20000558

08001cd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cdc:	b672      	cpsid	i
}
 8001cde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ce0:	e7fe      	b.n	8001ce0 <Error_Handler+0x8>
	...

08001ce4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001cea:	4b15      	ldr	r3, [pc, #84]	; (8001d40 <HAL_MspInit+0x5c>)
 8001cec:	699b      	ldr	r3, [r3, #24]
 8001cee:	4a14      	ldr	r2, [pc, #80]	; (8001d40 <HAL_MspInit+0x5c>)
 8001cf0:	f043 0301 	orr.w	r3, r3, #1
 8001cf4:	6193      	str	r3, [r2, #24]
 8001cf6:	4b12      	ldr	r3, [pc, #72]	; (8001d40 <HAL_MspInit+0x5c>)
 8001cf8:	699b      	ldr	r3, [r3, #24]
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	60bb      	str	r3, [r7, #8]
 8001d00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d02:	4b0f      	ldr	r3, [pc, #60]	; (8001d40 <HAL_MspInit+0x5c>)
 8001d04:	69db      	ldr	r3, [r3, #28]
 8001d06:	4a0e      	ldr	r2, [pc, #56]	; (8001d40 <HAL_MspInit+0x5c>)
 8001d08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d0c:	61d3      	str	r3, [r2, #28]
 8001d0e:	4b0c      	ldr	r3, [pc, #48]	; (8001d40 <HAL_MspInit+0x5c>)
 8001d10:	69db      	ldr	r3, [r3, #28]
 8001d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d16:	607b      	str	r3, [r7, #4]
 8001d18:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d1a:	4b0a      	ldr	r3, [pc, #40]	; (8001d44 <HAL_MspInit+0x60>)
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	60fb      	str	r3, [r7, #12]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001d26:	60fb      	str	r3, [r7, #12]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d2e:	60fb      	str	r3, [r7, #12]
 8001d30:	4a04      	ldr	r2, [pc, #16]	; (8001d44 <HAL_MspInit+0x60>)
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d36:	bf00      	nop
 8001d38:	3714      	adds	r7, #20
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bc80      	pop	{r7}
 8001d3e:	4770      	bx	lr
 8001d40:	40021000 	.word	0x40021000
 8001d44:	40010000 	.word	0x40010000

08001d48 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b08a      	sub	sp, #40	; 0x28
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d50:	f107 0318 	add.w	r3, r7, #24
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	605a      	str	r2, [r3, #4]
 8001d5a:	609a      	str	r2, [r3, #8]
 8001d5c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a28      	ldr	r2, [pc, #160]	; (8001e04 <HAL_ADC_MspInit+0xbc>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d122      	bne.n	8001dae <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d68:	4b27      	ldr	r3, [pc, #156]	; (8001e08 <HAL_ADC_MspInit+0xc0>)
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	4a26      	ldr	r2, [pc, #152]	; (8001e08 <HAL_ADC_MspInit+0xc0>)
 8001d6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d72:	6193      	str	r3, [r2, #24]
 8001d74:	4b24      	ldr	r3, [pc, #144]	; (8001e08 <HAL_ADC_MspInit+0xc0>)
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d7c:	617b      	str	r3, [r7, #20]
 8001d7e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d80:	4b21      	ldr	r3, [pc, #132]	; (8001e08 <HAL_ADC_MspInit+0xc0>)
 8001d82:	699b      	ldr	r3, [r3, #24]
 8001d84:	4a20      	ldr	r2, [pc, #128]	; (8001e08 <HAL_ADC_MspInit+0xc0>)
 8001d86:	f043 0304 	orr.w	r3, r3, #4
 8001d8a:	6193      	str	r3, [r2, #24]
 8001d8c:	4b1e      	ldr	r3, [pc, #120]	; (8001e08 <HAL_ADC_MspInit+0xc0>)
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	f003 0304 	and.w	r3, r3, #4
 8001d94:	613b      	str	r3, [r7, #16]
 8001d96:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001d98:	2380      	movs	r3, #128	; 0x80
 8001d9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001da0:	f107 0318 	add.w	r3, r7, #24
 8001da4:	4619      	mov	r1, r3
 8001da6:	4819      	ldr	r0, [pc, #100]	; (8001e0c <HAL_ADC_MspInit+0xc4>)
 8001da8:	f001 f990 	bl	80030cc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001dac:	e026      	b.n	8001dfc <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a17      	ldr	r2, [pc, #92]	; (8001e10 <HAL_ADC_MspInit+0xc8>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d121      	bne.n	8001dfc <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001db8:	4b13      	ldr	r3, [pc, #76]	; (8001e08 <HAL_ADC_MspInit+0xc0>)
 8001dba:	699b      	ldr	r3, [r3, #24]
 8001dbc:	4a12      	ldr	r2, [pc, #72]	; (8001e08 <HAL_ADC_MspInit+0xc0>)
 8001dbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dc2:	6193      	str	r3, [r2, #24]
 8001dc4:	4b10      	ldr	r3, [pc, #64]	; (8001e08 <HAL_ADC_MspInit+0xc0>)
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dcc:	60fb      	str	r3, [r7, #12]
 8001dce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd0:	4b0d      	ldr	r3, [pc, #52]	; (8001e08 <HAL_ADC_MspInit+0xc0>)
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	4a0c      	ldr	r2, [pc, #48]	; (8001e08 <HAL_ADC_MspInit+0xc0>)
 8001dd6:	f043 0304 	orr.w	r3, r3, #4
 8001dda:	6193      	str	r3, [r2, #24]
 8001ddc:	4b0a      	ldr	r3, [pc, #40]	; (8001e08 <HAL_ADC_MspInit+0xc0>)
 8001dde:	699b      	ldr	r3, [r3, #24]
 8001de0:	f003 0304 	and.w	r3, r3, #4
 8001de4:	60bb      	str	r3, [r7, #8]
 8001de6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001de8:	2340      	movs	r3, #64	; 0x40
 8001dea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dec:	2303      	movs	r3, #3
 8001dee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df0:	f107 0318 	add.w	r3, r7, #24
 8001df4:	4619      	mov	r1, r3
 8001df6:	4805      	ldr	r0, [pc, #20]	; (8001e0c <HAL_ADC_MspInit+0xc4>)
 8001df8:	f001 f968 	bl	80030cc <HAL_GPIO_Init>
}
 8001dfc:	bf00      	nop
 8001dfe:	3728      	adds	r7, #40	; 0x28
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	40012400 	.word	0x40012400
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	40010800 	.word	0x40010800
 8001e10:	40012800 	.word	0x40012800

08001e14 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b088      	sub	sp, #32
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e1c:	f107 0310 	add.w	r3, r7, #16
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	605a      	str	r2, [r3, #4]
 8001e26:	609a      	str	r2, [r3, #8]
 8001e28:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a16      	ldr	r2, [pc, #88]	; (8001e88 <HAL_I2C_MspInit+0x74>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d124      	bne.n	8001e7e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e34:	4b15      	ldr	r3, [pc, #84]	; (8001e8c <HAL_I2C_MspInit+0x78>)
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	4a14      	ldr	r2, [pc, #80]	; (8001e8c <HAL_I2C_MspInit+0x78>)
 8001e3a:	f043 0308 	orr.w	r3, r3, #8
 8001e3e:	6193      	str	r3, [r2, #24]
 8001e40:	4b12      	ldr	r3, [pc, #72]	; (8001e8c <HAL_I2C_MspInit+0x78>)
 8001e42:	699b      	ldr	r3, [r3, #24]
 8001e44:	f003 0308 	and.w	r3, r3, #8
 8001e48:	60fb      	str	r3, [r7, #12]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001e4c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001e50:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e52:	2312      	movs	r3, #18
 8001e54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e56:	2303      	movs	r3, #3
 8001e58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e5a:	f107 0310 	add.w	r3, r7, #16
 8001e5e:	4619      	mov	r1, r3
 8001e60:	480b      	ldr	r0, [pc, #44]	; (8001e90 <HAL_I2C_MspInit+0x7c>)
 8001e62:	f001 f933 	bl	80030cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001e66:	4b09      	ldr	r3, [pc, #36]	; (8001e8c <HAL_I2C_MspInit+0x78>)
 8001e68:	69db      	ldr	r3, [r3, #28]
 8001e6a:	4a08      	ldr	r2, [pc, #32]	; (8001e8c <HAL_I2C_MspInit+0x78>)
 8001e6c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e70:	61d3      	str	r3, [r2, #28]
 8001e72:	4b06      	ldr	r3, [pc, #24]	; (8001e8c <HAL_I2C_MspInit+0x78>)
 8001e74:	69db      	ldr	r3, [r3, #28]
 8001e76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e7a:	60bb      	str	r3, [r7, #8]
 8001e7c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001e7e:	bf00      	nop
 8001e80:	3720      	adds	r7, #32
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	40005800 	.word	0x40005800
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	40010c00 	.word	0x40010c00

08001e94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a19      	ldr	r2, [pc, #100]	; (8001f08 <HAL_TIM_Base_MspInit+0x74>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d12b      	bne.n	8001efe <HAL_TIM_Base_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ea6:	4b19      	ldr	r3, [pc, #100]	; (8001f0c <HAL_TIM_Base_MspInit+0x78>)
 8001ea8:	699b      	ldr	r3, [r3, #24]
 8001eaa:	4a18      	ldr	r2, [pc, #96]	; (8001f0c <HAL_TIM_Base_MspInit+0x78>)
 8001eac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001eb0:	6193      	str	r3, [r2, #24]
 8001eb2:	4b16      	ldr	r3, [pc, #88]	; (8001f0c <HAL_TIM_Base_MspInit+0x78>)
 8001eb4:	699b      	ldr	r3, [r3, #24]
 8001eb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001eba:	60fb      	str	r3, [r7, #12]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	2018      	movs	r0, #24
 8001ec4:	f001 f81b 	bl	8002efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8001ec8:	2018      	movs	r0, #24
 8001eca:	f001 f834 	bl	8002f36 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001ece:	2200      	movs	r2, #0
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	2019      	movs	r0, #25
 8001ed4:	f001 f813 	bl	8002efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001ed8:	2019      	movs	r0, #25
 8001eda:	f001 f82c 	bl	8002f36 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8001ede:	2200      	movs	r2, #0
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	201a      	movs	r0, #26
 8001ee4:	f001 f80b 	bl	8002efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8001ee8:	201a      	movs	r0, #26
 8001eea:	f001 f824 	bl	8002f36 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001eee:	2200      	movs	r2, #0
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	201b      	movs	r0, #27
 8001ef4:	f001 f803 	bl	8002efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001ef8:	201b      	movs	r0, #27
 8001efa:	f001 f81c 	bl	8002f36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001efe:	bf00      	nop
 8001f00:	3710      	adds	r7, #16
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	40012c00 	.word	0x40012c00
 8001f0c:	40021000 	.word	0x40021000

08001f10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b088      	sub	sp, #32
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f18:	f107 0310 	add.w	r3, r7, #16
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	605a      	str	r2, [r3, #4]
 8001f22:	609a      	str	r2, [r3, #8]
 8001f24:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a20      	ldr	r2, [pc, #128]	; (8001fac <HAL_UART_MspInit+0x9c>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d139      	bne.n	8001fa4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f30:	4b1f      	ldr	r3, [pc, #124]	; (8001fb0 <HAL_UART_MspInit+0xa0>)
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	4a1e      	ldr	r2, [pc, #120]	; (8001fb0 <HAL_UART_MspInit+0xa0>)
 8001f36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f3a:	6193      	str	r3, [r2, #24]
 8001f3c:	4b1c      	ldr	r3, [pc, #112]	; (8001fb0 <HAL_UART_MspInit+0xa0>)
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f44:	60fb      	str	r3, [r7, #12]
 8001f46:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f48:	4b19      	ldr	r3, [pc, #100]	; (8001fb0 <HAL_UART_MspInit+0xa0>)
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	4a18      	ldr	r2, [pc, #96]	; (8001fb0 <HAL_UART_MspInit+0xa0>)
 8001f4e:	f043 0304 	orr.w	r3, r3, #4
 8001f52:	6193      	str	r3, [r2, #24]
 8001f54:	4b16      	ldr	r3, [pc, #88]	; (8001fb0 <HAL_UART_MspInit+0xa0>)
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	f003 0304 	and.w	r3, r3, #4
 8001f5c:	60bb      	str	r3, [r7, #8]
 8001f5e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f64:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f66:	2302      	movs	r3, #2
 8001f68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f6e:	f107 0310 	add.w	r3, r7, #16
 8001f72:	4619      	mov	r1, r3
 8001f74:	480f      	ldr	r0, [pc, #60]	; (8001fb4 <HAL_UART_MspInit+0xa4>)
 8001f76:	f001 f8a9 	bl	80030cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f80:	2300      	movs	r3, #0
 8001f82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f84:	2300      	movs	r3, #0
 8001f86:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f88:	f107 0310 	add.w	r3, r7, #16
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	4809      	ldr	r0, [pc, #36]	; (8001fb4 <HAL_UART_MspInit+0xa4>)
 8001f90:	f001 f89c 	bl	80030cc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001f94:	2200      	movs	r2, #0
 8001f96:	2100      	movs	r1, #0
 8001f98:	2025      	movs	r0, #37	; 0x25
 8001f9a:	f000 ffb0 	bl	8002efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001f9e:	2025      	movs	r0, #37	; 0x25
 8001fa0:	f000 ffc9 	bl	8002f36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001fa4:	bf00      	nop
 8001fa6:	3720      	adds	r7, #32
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	40013800 	.word	0x40013800
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	40010800 	.word	0x40010800

08001fb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fbc:	e7fe      	b.n	8001fbc <NMI_Handler+0x4>

08001fbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fc2:	e7fe      	b.n	8001fc2 <HardFault_Handler+0x4>

08001fc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fc8:	e7fe      	b.n	8001fc8 <MemManage_Handler+0x4>

08001fca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fce:	e7fe      	b.n	8001fce <BusFault_Handler+0x4>

08001fd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fd4:	e7fe      	b.n	8001fd4 <UsageFault_Handler+0x4>

08001fd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fda:	bf00      	nop
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bc80      	pop	{r7}
 8001fe0:	4770      	bx	lr

08001fe2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fe6:	bf00      	nop
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bc80      	pop	{r7}
 8001fec:	4770      	bx	lr

08001fee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ff2:	bf00      	nop
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bc80      	pop	{r7}
 8001ff8:	4770      	bx	lr

08001ffa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ffe:	f000 f98f 	bl	8002320 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002002:	bf00      	nop
 8002004:	bd80      	pop	{r7, pc}

08002006 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800200a:	2002      	movs	r0, #2
 800200c:	f001 fa2a 	bl	8003464 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002010:	bf00      	nop
 8002012:	bd80      	pop	{r7, pc}

08002014 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8002018:	2008      	movs	r0, #8
 800201a:	f001 fa23 	bl	8003464 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800201e:	bf00      	nop
 8002020:	bd80      	pop	{r7, pc}

08002022 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002026:	2010      	movs	r0, #16
 8002028:	f001 fa1c 	bl	8003464 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800202c:	bf00      	nop
 800202e:	bd80      	pop	{r7, pc}

08002030 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002034:	4802      	ldr	r0, [pc, #8]	; (8002040 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8002036:	f002 fb5e 	bl	80046f6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800203a:	bf00      	nop
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	20000cac 	.word	0x20000cac

08002044 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002048:	2020      	movs	r0, #32
 800204a:	f001 fa0b 	bl	8003464 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800204e:	2080      	movs	r0, #128	; 0x80
 8002050:	f001 fa08 	bl	8003464 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002054:	bf00      	nop
 8002056:	bd80      	pop	{r7, pc}

08002058 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800205c:	4802      	ldr	r0, [pc, #8]	; (8002068 <TIM1_BRK_IRQHandler+0x10>)
 800205e:	f004 fd2b 	bl	8006ab8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8002062:	bf00      	nop
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	2000059c 	.word	0x2000059c

0800206c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002070:	4802      	ldr	r0, [pc, #8]	; (800207c <TIM1_UP_IRQHandler+0x10>)
 8002072:	f004 fd21 	bl	8006ab8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002076:	bf00      	nop
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	2000059c 	.word	0x2000059c

08002080 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002084:	4802      	ldr	r0, [pc, #8]	; (8002090 <TIM1_TRG_COM_IRQHandler+0x10>)
 8002086:	f004 fd17 	bl	8006ab8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800208a:	bf00      	nop
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	2000059c 	.word	0x2000059c

08002094 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002098:	4802      	ldr	r0, [pc, #8]	; (80020a4 <TIM1_CC_IRQHandler+0x10>)
 800209a:	f004 fd0d 	bl	8006ab8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800209e:	bf00      	nop
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	2000059c 	.word	0x2000059c

080020a8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80020ac:	4802      	ldr	r0, [pc, #8]	; (80020b8 <USART1_IRQHandler+0x10>)
 80020ae:	f005 f96b 	bl	8007388 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80020b2:	bf00      	nop
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	20000558 	.word	0x20000558

080020bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
	return 1;
 80020c0:	2301      	movs	r3, #1
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bc80      	pop	{r7}
 80020c8:	4770      	bx	lr

080020ca <_kill>:

int _kill(int pid, int sig)
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b082      	sub	sp, #8
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
 80020d2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80020d4:	f009 fdfc 	bl	800bcd0 <__errno>
 80020d8:	4603      	mov	r3, r0
 80020da:	2216      	movs	r2, #22
 80020dc:	601a      	str	r2, [r3, #0]
	return -1;
 80020de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <_exit>:

void _exit (int status)
{
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b082      	sub	sp, #8
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80020f2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f7ff ffe7 	bl	80020ca <_kill>
	while (1) {}		/* Make sure we hang here */
 80020fc:	e7fe      	b.n	80020fc <_exit+0x12>

080020fe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b086      	sub	sp, #24
 8002102:	af00      	add	r7, sp, #0
 8002104:	60f8      	str	r0, [r7, #12]
 8002106:	60b9      	str	r1, [r7, #8]
 8002108:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800210a:	2300      	movs	r3, #0
 800210c:	617b      	str	r3, [r7, #20]
 800210e:	e00a      	b.n	8002126 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002110:	f3af 8000 	nop.w
 8002114:	4601      	mov	r1, r0
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	1c5a      	adds	r2, r3, #1
 800211a:	60ba      	str	r2, [r7, #8]
 800211c:	b2ca      	uxtb	r2, r1
 800211e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	3301      	adds	r3, #1
 8002124:	617b      	str	r3, [r7, #20]
 8002126:	697a      	ldr	r2, [r7, #20]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	429a      	cmp	r2, r3
 800212c:	dbf0      	blt.n	8002110 <_read+0x12>
	}

return len;
 800212e:	687b      	ldr	r3, [r7, #4]
}
 8002130:	4618      	mov	r0, r3
 8002132:	3718      	adds	r7, #24
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b086      	sub	sp, #24
 800213c:	af00      	add	r7, sp, #0
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	60b9      	str	r1, [r7, #8]
 8002142:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002144:	2300      	movs	r3, #0
 8002146:	617b      	str	r3, [r7, #20]
 8002148:	e009      	b.n	800215e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	1c5a      	adds	r2, r3, #1
 800214e:	60ba      	str	r2, [r7, #8]
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	4618      	mov	r0, r3
 8002154:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	3301      	adds	r3, #1
 800215c:	617b      	str	r3, [r7, #20]
 800215e:	697a      	ldr	r2, [r7, #20]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	429a      	cmp	r2, r3
 8002164:	dbf1      	blt.n	800214a <_write+0x12>
	}
	return len;
 8002166:	687b      	ldr	r3, [r7, #4]
}
 8002168:	4618      	mov	r0, r3
 800216a:	3718      	adds	r7, #24
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <_close>:

int _close(int file)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
	return -1;
 8002178:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800217c:	4618      	mov	r0, r3
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	bc80      	pop	{r7}
 8002184:	4770      	bx	lr

08002186 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002186:	b480      	push	{r7}
 8002188:	b083      	sub	sp, #12
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
 800218e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002196:	605a      	str	r2, [r3, #4]
	return 0;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	bc80      	pop	{r7}
 80021a2:	4770      	bx	lr

080021a4 <_isatty>:

int _isatty(int file)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
	return 1;
 80021ac:	2301      	movs	r3, #1
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bc80      	pop	{r7}
 80021b6:	4770      	bx	lr

080021b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	607a      	str	r2, [r7, #4]
	return 0;
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3714      	adds	r7, #20
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bc80      	pop	{r7}
 80021ce:	4770      	bx	lr

080021d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b086      	sub	sp, #24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021d8:	4a14      	ldr	r2, [pc, #80]	; (800222c <_sbrk+0x5c>)
 80021da:	4b15      	ldr	r3, [pc, #84]	; (8002230 <_sbrk+0x60>)
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021e4:	4b13      	ldr	r3, [pc, #76]	; (8002234 <_sbrk+0x64>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d102      	bne.n	80021f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021ec:	4b11      	ldr	r3, [pc, #68]	; (8002234 <_sbrk+0x64>)
 80021ee:	4a12      	ldr	r2, [pc, #72]	; (8002238 <_sbrk+0x68>)
 80021f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021f2:	4b10      	ldr	r3, [pc, #64]	; (8002234 <_sbrk+0x64>)
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4413      	add	r3, r2
 80021fa:	693a      	ldr	r2, [r7, #16]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d207      	bcs.n	8002210 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002200:	f009 fd66 	bl	800bcd0 <__errno>
 8002204:	4603      	mov	r3, r0
 8002206:	220c      	movs	r2, #12
 8002208:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800220a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800220e:	e009      	b.n	8002224 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002210:	4b08      	ldr	r3, [pc, #32]	; (8002234 <_sbrk+0x64>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002216:	4b07      	ldr	r3, [pc, #28]	; (8002234 <_sbrk+0x64>)
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4413      	add	r3, r2
 800221e:	4a05      	ldr	r2, [pc, #20]	; (8002234 <_sbrk+0x64>)
 8002220:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002222:	68fb      	ldr	r3, [r7, #12]
}
 8002224:	4618      	mov	r0, r3
 8002226:	3718      	adds	r7, #24
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	20005000 	.word	0x20005000
 8002230:	00000400 	.word	0x00000400
 8002234:	2000041c 	.word	0x2000041c
 8002238:	20000fa8 	.word	0x20000fa8

0800223c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002240:	bf00      	nop
 8002242:	46bd      	mov	sp, r7
 8002244:	bc80      	pop	{r7}
 8002246:	4770      	bx	lr

08002248 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002248:	480c      	ldr	r0, [pc, #48]	; (800227c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800224a:	490d      	ldr	r1, [pc, #52]	; (8002280 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800224c:	4a0d      	ldr	r2, [pc, #52]	; (8002284 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800224e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002250:	e002      	b.n	8002258 <LoopCopyDataInit>

08002252 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002252:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002254:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002256:	3304      	adds	r3, #4

08002258 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002258:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800225a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800225c:	d3f9      	bcc.n	8002252 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800225e:	4a0a      	ldr	r2, [pc, #40]	; (8002288 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002260:	4c0a      	ldr	r4, [pc, #40]	; (800228c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002262:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002264:	e001      	b.n	800226a <LoopFillZerobss>

08002266 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002266:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002268:	3204      	adds	r2, #4

0800226a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800226a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800226c:	d3fb      	bcc.n	8002266 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800226e:	f7ff ffe5 	bl	800223c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002272:	f009 fd33 	bl	800bcdc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002276:	f7ff f9ed 	bl	8001654 <main>
  bx lr
 800227a:	4770      	bx	lr
  ldr r0, =_sdata
 800227c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002280:	200003cc 	.word	0x200003cc
  ldr r2, =_sidata
 8002284:	0800f5f0 	.word	0x0800f5f0
  ldr r2, =_sbss
 8002288:	200003d0 	.word	0x200003d0
  ldr r4, =_ebss
 800228c:	20000fa8 	.word	0x20000fa8

08002290 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002290:	e7fe      	b.n	8002290 <ADC1_2_IRQHandler>
	...

08002294 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002298:	4b08      	ldr	r3, [pc, #32]	; (80022bc <HAL_Init+0x28>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a07      	ldr	r2, [pc, #28]	; (80022bc <HAL_Init+0x28>)
 800229e:	f043 0310 	orr.w	r3, r3, #16
 80022a2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022a4:	2003      	movs	r0, #3
 80022a6:	f000 fe1f 	bl	8002ee8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022aa:	2000      	movs	r0, #0
 80022ac:	f000 f808 	bl	80022c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022b0:	f7ff fd18 	bl	8001ce4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	40022000 	.word	0x40022000

080022c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022c8:	4b12      	ldr	r3, [pc, #72]	; (8002314 <HAL_InitTick+0x54>)
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	4b12      	ldr	r3, [pc, #72]	; (8002318 <HAL_InitTick+0x58>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	4619      	mov	r1, r3
 80022d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80022da:	fbb2 f3f3 	udiv	r3, r2, r3
 80022de:	4618      	mov	r0, r3
 80022e0:	f000 fe37 	bl	8002f52 <HAL_SYSTICK_Config>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e00e      	b.n	800230c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2b0f      	cmp	r3, #15
 80022f2:	d80a      	bhi.n	800230a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022f4:	2200      	movs	r2, #0
 80022f6:	6879      	ldr	r1, [r7, #4]
 80022f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022fc:	f000 fdff 	bl	8002efe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002300:	4a06      	ldr	r2, [pc, #24]	; (800231c <HAL_InitTick+0x5c>)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002306:	2300      	movs	r3, #0
 8002308:	e000      	b.n	800230c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
}
 800230c:	4618      	mov	r0, r3
 800230e:	3708      	adds	r7, #8
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	20000094 	.word	0x20000094
 8002318:	2000009c 	.word	0x2000009c
 800231c:	20000098 	.word	0x20000098

08002320 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002324:	4b05      	ldr	r3, [pc, #20]	; (800233c <HAL_IncTick+0x1c>)
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	461a      	mov	r2, r3
 800232a:	4b05      	ldr	r3, [pc, #20]	; (8002340 <HAL_IncTick+0x20>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4413      	add	r3, r2
 8002330:	4a03      	ldr	r2, [pc, #12]	; (8002340 <HAL_IncTick+0x20>)
 8002332:	6013      	str	r3, [r2, #0]
}
 8002334:	bf00      	nop
 8002336:	46bd      	mov	sp, r7
 8002338:	bc80      	pop	{r7}
 800233a:	4770      	bx	lr
 800233c:	2000009c 	.word	0x2000009c
 8002340:	200007e4 	.word	0x200007e4

08002344 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  return uwTick;
 8002348:	4b02      	ldr	r3, [pc, #8]	; (8002354 <HAL_GetTick+0x10>)
 800234a:	681b      	ldr	r3, [r3, #0]
}
 800234c:	4618      	mov	r0, r3
 800234e:	46bd      	mov	sp, r7
 8002350:	bc80      	pop	{r7}
 8002352:	4770      	bx	lr
 8002354:	200007e4 	.word	0x200007e4

08002358 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002360:	f7ff fff0 	bl	8002344 <HAL_GetTick>
 8002364:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002370:	d005      	beq.n	800237e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002372:	4b0a      	ldr	r3, [pc, #40]	; (800239c <HAL_Delay+0x44>)
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	461a      	mov	r2, r3
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	4413      	add	r3, r2
 800237c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800237e:	bf00      	nop
 8002380:	f7ff ffe0 	bl	8002344 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	68fa      	ldr	r2, [r7, #12]
 800238c:	429a      	cmp	r2, r3
 800238e:	d8f7      	bhi.n	8002380 <HAL_Delay+0x28>
  {
  }
}
 8002390:	bf00      	nop
 8002392:	bf00      	nop
 8002394:	3710      	adds	r7, #16
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	2000009c 	.word	0x2000009c

080023a0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b086      	sub	sp, #24
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023a8:	2300      	movs	r3, #0
 80023aa:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80023ac:	2300      	movs	r3, #0
 80023ae:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80023b0:	2300      	movs	r3, #0
 80023b2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80023b4:	2300      	movs	r3, #0
 80023b6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d101      	bne.n	80023c2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e0be      	b.n	8002540 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d109      	bne.n	80023e4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f7ff fcb2 	bl	8001d48 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f000 fbc5 	bl	8002b74 <ADC_ConversionStop_Disable>
 80023ea:	4603      	mov	r3, r0
 80023ec:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f2:	f003 0310 	and.w	r3, r3, #16
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	f040 8099 	bne.w	800252e <HAL_ADC_Init+0x18e>
 80023fc:	7dfb      	ldrb	r3, [r7, #23]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	f040 8095 	bne.w	800252e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002408:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800240c:	f023 0302 	bic.w	r3, r3, #2
 8002410:	f043 0202 	orr.w	r2, r3, #2
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002420:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	7b1b      	ldrb	r3, [r3, #12]
 8002426:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002428:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800242a:	68ba      	ldr	r2, [r7, #8]
 800242c:	4313      	orrs	r3, r2
 800242e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002438:	d003      	beq.n	8002442 <HAL_ADC_Init+0xa2>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d102      	bne.n	8002448 <HAL_ADC_Init+0xa8>
 8002442:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002446:	e000      	b.n	800244a <HAL_ADC_Init+0xaa>
 8002448:	2300      	movs	r3, #0
 800244a:	693a      	ldr	r2, [r7, #16]
 800244c:	4313      	orrs	r3, r2
 800244e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	7d1b      	ldrb	r3, [r3, #20]
 8002454:	2b01      	cmp	r3, #1
 8002456:	d119      	bne.n	800248c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	7b1b      	ldrb	r3, [r3, #12]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d109      	bne.n	8002474 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	699b      	ldr	r3, [r3, #24]
 8002464:	3b01      	subs	r3, #1
 8002466:	035a      	lsls	r2, r3, #13
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	4313      	orrs	r3, r2
 800246c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002470:	613b      	str	r3, [r7, #16]
 8002472:	e00b      	b.n	800248c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002478:	f043 0220 	orr.w	r2, r3, #32
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002484:	f043 0201 	orr.w	r2, r3, #1
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	693a      	ldr	r2, [r7, #16]
 800249c:	430a      	orrs	r2, r1
 800249e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	689a      	ldr	r2, [r3, #8]
 80024a6:	4b28      	ldr	r3, [pc, #160]	; (8002548 <HAL_ADC_Init+0x1a8>)
 80024a8:	4013      	ands	r3, r2
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	6812      	ldr	r2, [r2, #0]
 80024ae:	68b9      	ldr	r1, [r7, #8]
 80024b0:	430b      	orrs	r3, r1
 80024b2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024bc:	d003      	beq.n	80024c6 <HAL_ADC_Init+0x126>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d104      	bne.n	80024d0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	3b01      	subs	r3, #1
 80024cc:	051b      	lsls	r3, r3, #20
 80024ce:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	68fa      	ldr	r2, [r7, #12]
 80024e0:	430a      	orrs	r2, r1
 80024e2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	689a      	ldr	r2, [r3, #8]
 80024ea:	4b18      	ldr	r3, [pc, #96]	; (800254c <HAL_ADC_Init+0x1ac>)
 80024ec:	4013      	ands	r3, r2
 80024ee:	68ba      	ldr	r2, [r7, #8]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d10b      	bne.n	800250c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024fe:	f023 0303 	bic.w	r3, r3, #3
 8002502:	f043 0201 	orr.w	r2, r3, #1
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800250a:	e018      	b.n	800253e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002510:	f023 0312 	bic.w	r3, r3, #18
 8002514:	f043 0210 	orr.w	r2, r3, #16
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002520:	f043 0201 	orr.w	r2, r3, #1
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800252c:	e007      	b.n	800253e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002532:	f043 0210 	orr.w	r2, r3, #16
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800253e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002540:	4618      	mov	r0, r3
 8002542:	3718      	adds	r7, #24
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	ffe1f7fd 	.word	0xffe1f7fd
 800254c:	ff1f0efe 	.word	0xff1f0efe

08002550 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002558:	2300      	movs	r3, #0
 800255a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002562:	2b01      	cmp	r3, #1
 8002564:	d101      	bne.n	800256a <HAL_ADC_Start+0x1a>
 8002566:	2302      	movs	r3, #2
 8002568:	e098      	b.n	800269c <HAL_ADC_Start+0x14c>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2201      	movs	r2, #1
 800256e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f000 faa4 	bl	8002ac0 <ADC_Enable>
 8002578:	4603      	mov	r3, r0
 800257a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800257c:	7bfb      	ldrb	r3, [r7, #15]
 800257e:	2b00      	cmp	r3, #0
 8002580:	f040 8087 	bne.w	8002692 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002588:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800258c:	f023 0301 	bic.w	r3, r3, #1
 8002590:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a41      	ldr	r2, [pc, #260]	; (80026a4 <HAL_ADC_Start+0x154>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d105      	bne.n	80025ae <HAL_ADC_Start+0x5e>
 80025a2:	4b41      	ldr	r3, [pc, #260]	; (80026a8 <HAL_ADC_Start+0x158>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d115      	bne.n	80025da <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d026      	beq.n	8002616 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025cc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80025d0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80025d8:	e01d      	b.n	8002616 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025de:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a2f      	ldr	r2, [pc, #188]	; (80026a8 <HAL_ADC_Start+0x158>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d004      	beq.n	80025fa <HAL_ADC_Start+0xaa>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a2b      	ldr	r2, [pc, #172]	; (80026a4 <HAL_ADC_Start+0x154>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d10d      	bne.n	8002616 <HAL_ADC_Start+0xc6>
 80025fa:	4b2b      	ldr	r3, [pc, #172]	; (80026a8 <HAL_ADC_Start+0x158>)
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002602:	2b00      	cmp	r3, #0
 8002604:	d007      	beq.n	8002616 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800260a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800260e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800261a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d006      	beq.n	8002630 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002626:	f023 0206 	bic.w	r2, r3, #6
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	62da      	str	r2, [r3, #44]	; 0x2c
 800262e:	e002      	b.n	8002636 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f06f 0202 	mvn.w	r2, #2
 8002646:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002652:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002656:	d113      	bne.n	8002680 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800265c:	4a11      	ldr	r2, [pc, #68]	; (80026a4 <HAL_ADC_Start+0x154>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d105      	bne.n	800266e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002662:	4b11      	ldr	r3, [pc, #68]	; (80026a8 <HAL_ADC_Start+0x158>)
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800266a:	2b00      	cmp	r3, #0
 800266c:	d108      	bne.n	8002680 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	689a      	ldr	r2, [r3, #8]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800267c:	609a      	str	r2, [r3, #8]
 800267e:	e00c      	b.n	800269a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	689a      	ldr	r2, [r3, #8]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800268e:	609a      	str	r2, [r3, #8]
 8002690:	e003      	b.n	800269a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800269a:	7bfb      	ldrb	r3, [r7, #15]
}
 800269c:	4618      	mov	r0, r3
 800269e:	3710      	adds	r7, #16
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	40012800 	.word	0x40012800
 80026a8:	40012400 	.word	0x40012400

080026ac <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80026ac:	b590      	push	{r4, r7, lr}
 80026ae:	b087      	sub	sp, #28
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80026b6:	2300      	movs	r3, #0
 80026b8:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80026ba:	2300      	movs	r3, #0
 80026bc:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80026be:	2300      	movs	r3, #0
 80026c0:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80026c2:	f7ff fe3f 	bl	8002344 <HAL_GetTick>
 80026c6:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d00b      	beq.n	80026ee <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026da:	f043 0220 	orr.w	r2, r3, #32
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e0d3      	b.n	8002896 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d131      	bne.n	8002760 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002702:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002706:	2b00      	cmp	r3, #0
 8002708:	d12a      	bne.n	8002760 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800270a:	e021      	b.n	8002750 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002712:	d01d      	beq.n	8002750 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d007      	beq.n	800272a <HAL_ADC_PollForConversion+0x7e>
 800271a:	f7ff fe13 	bl	8002344 <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	683a      	ldr	r2, [r7, #0]
 8002726:	429a      	cmp	r2, r3
 8002728:	d212      	bcs.n	8002750 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0302 	and.w	r3, r3, #2
 8002734:	2b00      	cmp	r3, #0
 8002736:	d10b      	bne.n	8002750 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800273c:	f043 0204 	orr.w	r2, r3, #4
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e0a2      	b.n	8002896 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d0d6      	beq.n	800270c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800275e:	e070      	b.n	8002842 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002760:	4b4f      	ldr	r3, [pc, #316]	; (80028a0 <HAL_ADC_PollForConversion+0x1f4>)
 8002762:	681c      	ldr	r4, [r3, #0]
 8002764:	2002      	movs	r0, #2
 8002766:	f004 f813 	bl	8006790 <HAL_RCCEx_GetPeriphCLKFreq>
 800276a:	4603      	mov	r3, r0
 800276c:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	6919      	ldr	r1, [r3, #16]
 8002776:	4b4b      	ldr	r3, [pc, #300]	; (80028a4 <HAL_ADC_PollForConversion+0x1f8>)
 8002778:	400b      	ands	r3, r1
 800277a:	2b00      	cmp	r3, #0
 800277c:	d118      	bne.n	80027b0 <HAL_ADC_PollForConversion+0x104>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	68d9      	ldr	r1, [r3, #12]
 8002784:	4b48      	ldr	r3, [pc, #288]	; (80028a8 <HAL_ADC_PollForConversion+0x1fc>)
 8002786:	400b      	ands	r3, r1
 8002788:	2b00      	cmp	r3, #0
 800278a:	d111      	bne.n	80027b0 <HAL_ADC_PollForConversion+0x104>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	6919      	ldr	r1, [r3, #16]
 8002792:	4b46      	ldr	r3, [pc, #280]	; (80028ac <HAL_ADC_PollForConversion+0x200>)
 8002794:	400b      	ands	r3, r1
 8002796:	2b00      	cmp	r3, #0
 8002798:	d108      	bne.n	80027ac <HAL_ADC_PollForConversion+0x100>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68d9      	ldr	r1, [r3, #12]
 80027a0:	4b43      	ldr	r3, [pc, #268]	; (80028b0 <HAL_ADC_PollForConversion+0x204>)
 80027a2:	400b      	ands	r3, r1
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d101      	bne.n	80027ac <HAL_ADC_PollForConversion+0x100>
 80027a8:	2314      	movs	r3, #20
 80027aa:	e020      	b.n	80027ee <HAL_ADC_PollForConversion+0x142>
 80027ac:	2329      	movs	r3, #41	; 0x29
 80027ae:	e01e      	b.n	80027ee <HAL_ADC_PollForConversion+0x142>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	6919      	ldr	r1, [r3, #16]
 80027b6:	4b3d      	ldr	r3, [pc, #244]	; (80028ac <HAL_ADC_PollForConversion+0x200>)
 80027b8:	400b      	ands	r3, r1
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d106      	bne.n	80027cc <HAL_ADC_PollForConversion+0x120>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	68d9      	ldr	r1, [r3, #12]
 80027c4:	4b3a      	ldr	r3, [pc, #232]	; (80028b0 <HAL_ADC_PollForConversion+0x204>)
 80027c6:	400b      	ands	r3, r1
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d00d      	beq.n	80027e8 <HAL_ADC_PollForConversion+0x13c>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	6919      	ldr	r1, [r3, #16]
 80027d2:	4b38      	ldr	r3, [pc, #224]	; (80028b4 <HAL_ADC_PollForConversion+0x208>)
 80027d4:	400b      	ands	r3, r1
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d108      	bne.n	80027ec <HAL_ADC_PollForConversion+0x140>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68d9      	ldr	r1, [r3, #12]
 80027e0:	4b34      	ldr	r3, [pc, #208]	; (80028b4 <HAL_ADC_PollForConversion+0x208>)
 80027e2:	400b      	ands	r3, r1
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d101      	bne.n	80027ec <HAL_ADC_PollForConversion+0x140>
 80027e8:	2354      	movs	r3, #84	; 0x54
 80027ea:	e000      	b.n	80027ee <HAL_ADC_PollForConversion+0x142>
 80027ec:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80027ee:	fb02 f303 	mul.w	r3, r2, r3
 80027f2:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80027f4:	e021      	b.n	800283a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027fc:	d01a      	beq.n	8002834 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d007      	beq.n	8002814 <HAL_ADC_PollForConversion+0x168>
 8002804:	f7ff fd9e 	bl	8002344 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	683a      	ldr	r2, [r7, #0]
 8002810:	429a      	cmp	r2, r3
 8002812:	d20f      	bcs.n	8002834 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	693a      	ldr	r2, [r7, #16]
 8002818:	429a      	cmp	r2, r3
 800281a:	d90b      	bls.n	8002834 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002820:	f043 0204 	orr.w	r2, r3, #4
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e030      	b.n	8002896 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	3301      	adds	r3, #1
 8002838:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	693a      	ldr	r2, [r7, #16]
 800283e:	429a      	cmp	r2, r3
 8002840:	d8d9      	bhi.n	80027f6 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f06f 0212 	mvn.w	r2, #18
 800284a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002850:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002862:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002866:	d115      	bne.n	8002894 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800286c:	2b00      	cmp	r3, #0
 800286e:	d111      	bne.n	8002894 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002874:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002880:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d105      	bne.n	8002894 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800288c:	f043 0201 	orr.w	r2, r3, #1
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	371c      	adds	r7, #28
 800289a:	46bd      	mov	sp, r7
 800289c:	bd90      	pop	{r4, r7, pc}
 800289e:	bf00      	nop
 80028a0:	20000094 	.word	0x20000094
 80028a4:	24924924 	.word	0x24924924
 80028a8:	00924924 	.word	0x00924924
 80028ac:	12492492 	.word	0x12492492
 80028b0:	00492492 	.word	0x00492492
 80028b4:	00249249 	.word	0x00249249

080028b8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	370c      	adds	r7, #12
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bc80      	pop	{r7}
 80028ce:	4770      	bx	lr

080028d0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80028d0:	b480      	push	{r7}
 80028d2:	b085      	sub	sp, #20
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028da:	2300      	movs	r3, #0
 80028dc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80028de:	2300      	movs	r3, #0
 80028e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d101      	bne.n	80028f0 <HAL_ADC_ConfigChannel+0x20>
 80028ec:	2302      	movs	r3, #2
 80028ee:	e0dc      	b.n	8002aaa <HAL_ADC_ConfigChannel+0x1da>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	2b06      	cmp	r3, #6
 80028fe:	d81c      	bhi.n	800293a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	685a      	ldr	r2, [r3, #4]
 800290a:	4613      	mov	r3, r2
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	4413      	add	r3, r2
 8002910:	3b05      	subs	r3, #5
 8002912:	221f      	movs	r2, #31
 8002914:	fa02 f303 	lsl.w	r3, r2, r3
 8002918:	43db      	mvns	r3, r3
 800291a:	4019      	ands	r1, r3
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	6818      	ldr	r0, [r3, #0]
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	685a      	ldr	r2, [r3, #4]
 8002924:	4613      	mov	r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	4413      	add	r3, r2
 800292a:	3b05      	subs	r3, #5
 800292c:	fa00 f203 	lsl.w	r2, r0, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	430a      	orrs	r2, r1
 8002936:	635a      	str	r2, [r3, #52]	; 0x34
 8002938:	e03c      	b.n	80029b4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	2b0c      	cmp	r3, #12
 8002940:	d81c      	bhi.n	800297c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685a      	ldr	r2, [r3, #4]
 800294c:	4613      	mov	r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	4413      	add	r3, r2
 8002952:	3b23      	subs	r3, #35	; 0x23
 8002954:	221f      	movs	r2, #31
 8002956:	fa02 f303 	lsl.w	r3, r2, r3
 800295a:	43db      	mvns	r3, r3
 800295c:	4019      	ands	r1, r3
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	6818      	ldr	r0, [r3, #0]
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	685a      	ldr	r2, [r3, #4]
 8002966:	4613      	mov	r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	4413      	add	r3, r2
 800296c:	3b23      	subs	r3, #35	; 0x23
 800296e:	fa00 f203 	lsl.w	r2, r0, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	430a      	orrs	r2, r1
 8002978:	631a      	str	r2, [r3, #48]	; 0x30
 800297a:	e01b      	b.n	80029b4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	685a      	ldr	r2, [r3, #4]
 8002986:	4613      	mov	r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	4413      	add	r3, r2
 800298c:	3b41      	subs	r3, #65	; 0x41
 800298e:	221f      	movs	r2, #31
 8002990:	fa02 f303 	lsl.w	r3, r2, r3
 8002994:	43db      	mvns	r3, r3
 8002996:	4019      	ands	r1, r3
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	6818      	ldr	r0, [r3, #0]
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685a      	ldr	r2, [r3, #4]
 80029a0:	4613      	mov	r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	4413      	add	r3, r2
 80029a6:	3b41      	subs	r3, #65	; 0x41
 80029a8:	fa00 f203 	lsl.w	r2, r0, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	430a      	orrs	r2, r1
 80029b2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2b09      	cmp	r3, #9
 80029ba:	d91c      	bls.n	80029f6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	68d9      	ldr	r1, [r3, #12]
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	4613      	mov	r3, r2
 80029c8:	005b      	lsls	r3, r3, #1
 80029ca:	4413      	add	r3, r2
 80029cc:	3b1e      	subs	r3, #30
 80029ce:	2207      	movs	r2, #7
 80029d0:	fa02 f303 	lsl.w	r3, r2, r3
 80029d4:	43db      	mvns	r3, r3
 80029d6:	4019      	ands	r1, r3
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	6898      	ldr	r0, [r3, #8]
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	4613      	mov	r3, r2
 80029e2:	005b      	lsls	r3, r3, #1
 80029e4:	4413      	add	r3, r2
 80029e6:	3b1e      	subs	r3, #30
 80029e8:	fa00 f203 	lsl.w	r2, r0, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	430a      	orrs	r2, r1
 80029f2:	60da      	str	r2, [r3, #12]
 80029f4:	e019      	b.n	8002a2a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	6919      	ldr	r1, [r3, #16]
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	4613      	mov	r3, r2
 8002a02:	005b      	lsls	r3, r3, #1
 8002a04:	4413      	add	r3, r2
 8002a06:	2207      	movs	r2, #7
 8002a08:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0c:	43db      	mvns	r3, r3
 8002a0e:	4019      	ands	r1, r3
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	6898      	ldr	r0, [r3, #8]
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	4413      	add	r3, r2
 8002a1e:	fa00 f203 	lsl.w	r2, r0, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	430a      	orrs	r2, r1
 8002a28:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2b10      	cmp	r3, #16
 8002a30:	d003      	beq.n	8002a3a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002a36:	2b11      	cmp	r3, #17
 8002a38:	d132      	bne.n	8002aa0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a1d      	ldr	r2, [pc, #116]	; (8002ab4 <HAL_ADC_ConfigChannel+0x1e4>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d125      	bne.n	8002a90 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d126      	bne.n	8002aa0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	689a      	ldr	r2, [r3, #8]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002a60:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2b10      	cmp	r3, #16
 8002a68:	d11a      	bne.n	8002aa0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a6a:	4b13      	ldr	r3, [pc, #76]	; (8002ab8 <HAL_ADC_ConfigChannel+0x1e8>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a13      	ldr	r2, [pc, #76]	; (8002abc <HAL_ADC_ConfigChannel+0x1ec>)
 8002a70:	fba2 2303 	umull	r2, r3, r2, r3
 8002a74:	0c9a      	lsrs	r2, r3, #18
 8002a76:	4613      	mov	r3, r2
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	4413      	add	r3, r2
 8002a7c:	005b      	lsls	r3, r3, #1
 8002a7e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a80:	e002      	b.n	8002a88 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	3b01      	subs	r3, #1
 8002a86:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d1f9      	bne.n	8002a82 <HAL_ADC_ConfigChannel+0x1b2>
 8002a8e:	e007      	b.n	8002aa0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a94:	f043 0220 	orr.w	r2, r3, #32
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3714      	adds	r7, #20
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bc80      	pop	{r7}
 8002ab2:	4770      	bx	lr
 8002ab4:	40012400 	.word	0x40012400
 8002ab8:	20000094 	.word	0x20000094
 8002abc:	431bde83 	.word	0x431bde83

08002ac0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002acc:	2300      	movs	r3, #0
 8002ace:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f003 0301 	and.w	r3, r3, #1
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d040      	beq.n	8002b60 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	689a      	ldr	r2, [r3, #8]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f042 0201 	orr.w	r2, r2, #1
 8002aec:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002aee:	4b1f      	ldr	r3, [pc, #124]	; (8002b6c <ADC_Enable+0xac>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a1f      	ldr	r2, [pc, #124]	; (8002b70 <ADC_Enable+0xb0>)
 8002af4:	fba2 2303 	umull	r2, r3, r2, r3
 8002af8:	0c9b      	lsrs	r3, r3, #18
 8002afa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002afc:	e002      	b.n	8002b04 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	3b01      	subs	r3, #1
 8002b02:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1f9      	bne.n	8002afe <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b0a:	f7ff fc1b 	bl	8002344 <HAL_GetTick>
 8002b0e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002b10:	e01f      	b.n	8002b52 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b12:	f7ff fc17 	bl	8002344 <HAL_GetTick>
 8002b16:	4602      	mov	r2, r0
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d918      	bls.n	8002b52 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d011      	beq.n	8002b52 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b32:	f043 0210 	orr.w	r2, r3, #16
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b3e:	f043 0201 	orr.w	r2, r3, #1
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e007      	b.n	8002b62 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f003 0301 	and.w	r3, r3, #1
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d1d8      	bne.n	8002b12 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3710      	adds	r7, #16
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	20000094 	.word	0x20000094
 8002b70:	431bde83 	.word	0x431bde83

08002b74 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d12e      	bne.n	8002bec <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	689a      	ldr	r2, [r3, #8]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f022 0201 	bic.w	r2, r2, #1
 8002b9c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b9e:	f7ff fbd1 	bl	8002344 <HAL_GetTick>
 8002ba2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002ba4:	e01b      	b.n	8002bde <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002ba6:	f7ff fbcd 	bl	8002344 <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d914      	bls.n	8002bde <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d10d      	bne.n	8002bde <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc6:	f043 0210 	orr.w	r2, r3, #16
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd2:	f043 0201 	orr.w	r2, r3, #1
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e007      	b.n	8002bee <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f003 0301 	and.w	r3, r3, #1
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d0dc      	beq.n	8002ba6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3710      	adds	r7, #16
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
	...

08002bf8 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002bf8:	b590      	push	{r4, r7, lr}
 8002bfa:	b087      	sub	sp, #28
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c00:	2300      	movs	r3, #0
 8002c02:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002c04:	2300      	movs	r3, #0
 8002c06:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d101      	bne.n	8002c16 <HAL_ADCEx_Calibration_Start+0x1e>
 8002c12:	2302      	movs	r3, #2
 8002c14:	e095      	b.n	8002d42 <HAL_ADCEx_Calibration_Start+0x14a>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2201      	movs	r2, #1
 8002c1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f7ff ffa8 	bl	8002b74 <ADC_ConversionStop_Disable>
 8002c24:	4603      	mov	r3, r0
 8002c26:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002c28:	7dfb      	ldrb	r3, [r7, #23]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	f040 8084 	bne.w	8002d38 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c34:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002c38:	f023 0302 	bic.w	r3, r3, #2
 8002c3c:	f043 0202 	orr.w	r2, r3, #2
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002c44:	4b41      	ldr	r3, [pc, #260]	; (8002d4c <HAL_ADCEx_Calibration_Start+0x154>)
 8002c46:	681c      	ldr	r4, [r3, #0]
 8002c48:	2002      	movs	r0, #2
 8002c4a:	f003 fda1 	bl	8006790 <HAL_RCCEx_GetPeriphCLKFreq>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8002c54:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002c56:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8002c58:	e002      	b.n	8002c60 <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	3b01      	subs	r3, #1
 8002c5e:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d1f9      	bne.n	8002c5a <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f7ff ff2a 	bl	8002ac0 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	689a      	ldr	r2, [r3, #8]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f042 0208 	orr.w	r2, r2, #8
 8002c7a:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002c7c:	f7ff fb62 	bl	8002344 <HAL_GetTick>
 8002c80:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002c82:	e01b      	b.n	8002cbc <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002c84:	f7ff fb5e 	bl	8002344 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b0a      	cmp	r3, #10
 8002c90:	d914      	bls.n	8002cbc <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f003 0308 	and.w	r3, r3, #8
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d00d      	beq.n	8002cbc <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca4:	f023 0312 	bic.w	r3, r3, #18
 8002ca8:	f043 0210 	orr.w	r2, r3, #16
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e042      	b.n	8002d42 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f003 0308 	and.w	r3, r3, #8
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d1dc      	bne.n	8002c84 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	689a      	ldr	r2, [r3, #8]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f042 0204 	orr.w	r2, r2, #4
 8002cd8:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002cda:	f7ff fb33 	bl	8002344 <HAL_GetTick>
 8002cde:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002ce0:	e01b      	b.n	8002d1a <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002ce2:	f7ff fb2f 	bl	8002344 <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	2b0a      	cmp	r3, #10
 8002cee:	d914      	bls.n	8002d1a <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f003 0304 	and.w	r3, r3, #4
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d00d      	beq.n	8002d1a <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d02:	f023 0312 	bic.w	r3, r3, #18
 8002d06:	f043 0210 	orr.w	r2, r3, #16
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e013      	b.n	8002d42 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f003 0304 	and.w	r3, r3, #4
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d1dc      	bne.n	8002ce2 <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d2c:	f023 0303 	bic.w	r3, r3, #3
 8002d30:	f043 0201 	orr.w	r2, r3, #1
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002d40:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	371c      	adds	r7, #28
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd90      	pop	{r4, r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	20000094 	.word	0x20000094

08002d50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b085      	sub	sp, #20
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f003 0307 	and.w	r3, r3, #7
 8002d5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d60:	4b0c      	ldr	r3, [pc, #48]	; (8002d94 <__NVIC_SetPriorityGrouping+0x44>)
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d66:	68ba      	ldr	r2, [r7, #8]
 8002d68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d82:	4a04      	ldr	r2, [pc, #16]	; (8002d94 <__NVIC_SetPriorityGrouping+0x44>)
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	60d3      	str	r3, [r2, #12]
}
 8002d88:	bf00      	nop
 8002d8a:	3714      	adds	r7, #20
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bc80      	pop	{r7}
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	e000ed00 	.word	0xe000ed00

08002d98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d9c:	4b04      	ldr	r3, [pc, #16]	; (8002db0 <__NVIC_GetPriorityGrouping+0x18>)
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	0a1b      	lsrs	r3, r3, #8
 8002da2:	f003 0307 	and.w	r3, r3, #7
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bc80      	pop	{r7}
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	e000ed00 	.word	0xe000ed00

08002db4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	4603      	mov	r3, r0
 8002dbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	db0b      	blt.n	8002dde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dc6:	79fb      	ldrb	r3, [r7, #7]
 8002dc8:	f003 021f 	and.w	r2, r3, #31
 8002dcc:	4906      	ldr	r1, [pc, #24]	; (8002de8 <__NVIC_EnableIRQ+0x34>)
 8002dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd2:	095b      	lsrs	r3, r3, #5
 8002dd4:	2001      	movs	r0, #1
 8002dd6:	fa00 f202 	lsl.w	r2, r0, r2
 8002dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002dde:	bf00      	nop
 8002de0:	370c      	adds	r7, #12
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bc80      	pop	{r7}
 8002de6:	4770      	bx	lr
 8002de8:	e000e100 	.word	0xe000e100

08002dec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	4603      	mov	r3, r0
 8002df4:	6039      	str	r1, [r7, #0]
 8002df6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	db0a      	blt.n	8002e16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	b2da      	uxtb	r2, r3
 8002e04:	490c      	ldr	r1, [pc, #48]	; (8002e38 <__NVIC_SetPriority+0x4c>)
 8002e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e0a:	0112      	lsls	r2, r2, #4
 8002e0c:	b2d2      	uxtb	r2, r2
 8002e0e:	440b      	add	r3, r1
 8002e10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e14:	e00a      	b.n	8002e2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	b2da      	uxtb	r2, r3
 8002e1a:	4908      	ldr	r1, [pc, #32]	; (8002e3c <__NVIC_SetPriority+0x50>)
 8002e1c:	79fb      	ldrb	r3, [r7, #7]
 8002e1e:	f003 030f 	and.w	r3, r3, #15
 8002e22:	3b04      	subs	r3, #4
 8002e24:	0112      	lsls	r2, r2, #4
 8002e26:	b2d2      	uxtb	r2, r2
 8002e28:	440b      	add	r3, r1
 8002e2a:	761a      	strb	r2, [r3, #24]
}
 8002e2c:	bf00      	nop
 8002e2e:	370c      	adds	r7, #12
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bc80      	pop	{r7}
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	e000e100 	.word	0xe000e100
 8002e3c:	e000ed00 	.word	0xe000ed00

08002e40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b089      	sub	sp, #36	; 0x24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f003 0307 	and.w	r3, r3, #7
 8002e52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	f1c3 0307 	rsb	r3, r3, #7
 8002e5a:	2b04      	cmp	r3, #4
 8002e5c:	bf28      	it	cs
 8002e5e:	2304      	movcs	r3, #4
 8002e60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	3304      	adds	r3, #4
 8002e66:	2b06      	cmp	r3, #6
 8002e68:	d902      	bls.n	8002e70 <NVIC_EncodePriority+0x30>
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	3b03      	subs	r3, #3
 8002e6e:	e000      	b.n	8002e72 <NVIC_EncodePriority+0x32>
 8002e70:	2300      	movs	r3, #0
 8002e72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7e:	43da      	mvns	r2, r3
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	401a      	ands	r2, r3
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e88:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e92:	43d9      	mvns	r1, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e98:	4313      	orrs	r3, r2
         );
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3724      	adds	r7, #36	; 0x24
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bc80      	pop	{r7}
 8002ea2:	4770      	bx	lr

08002ea4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	3b01      	subs	r3, #1
 8002eb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002eb4:	d301      	bcc.n	8002eba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e00f      	b.n	8002eda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002eba:	4a0a      	ldr	r2, [pc, #40]	; (8002ee4 <SysTick_Config+0x40>)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ec2:	210f      	movs	r1, #15
 8002ec4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ec8:	f7ff ff90 	bl	8002dec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ecc:	4b05      	ldr	r3, [pc, #20]	; (8002ee4 <SysTick_Config+0x40>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ed2:	4b04      	ldr	r3, [pc, #16]	; (8002ee4 <SysTick_Config+0x40>)
 8002ed4:	2207      	movs	r2, #7
 8002ed6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3708      	adds	r7, #8
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	e000e010 	.word	0xe000e010

08002ee8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f7ff ff2d 	bl	8002d50 <__NVIC_SetPriorityGrouping>
}
 8002ef6:	bf00      	nop
 8002ef8:	3708      	adds	r7, #8
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}

08002efe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002efe:	b580      	push	{r7, lr}
 8002f00:	b086      	sub	sp, #24
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	4603      	mov	r3, r0
 8002f06:	60b9      	str	r1, [r7, #8]
 8002f08:	607a      	str	r2, [r7, #4]
 8002f0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f10:	f7ff ff42 	bl	8002d98 <__NVIC_GetPriorityGrouping>
 8002f14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	68b9      	ldr	r1, [r7, #8]
 8002f1a:	6978      	ldr	r0, [r7, #20]
 8002f1c:	f7ff ff90 	bl	8002e40 <NVIC_EncodePriority>
 8002f20:	4602      	mov	r2, r0
 8002f22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f26:	4611      	mov	r1, r2
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7ff ff5f 	bl	8002dec <__NVIC_SetPriority>
}
 8002f2e:	bf00      	nop
 8002f30:	3718      	adds	r7, #24
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b082      	sub	sp, #8
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7ff ff35 	bl	8002db4 <__NVIC_EnableIRQ>
}
 8002f4a:	bf00      	nop
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b082      	sub	sp, #8
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f7ff ffa2 	bl	8002ea4 <SysTick_Config>
 8002f60:	4603      	mov	r3, r0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3708      	adds	r7, #8
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f6a:	b480      	push	{r7}
 8002f6c:	b085      	sub	sp, #20
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f72:	2300      	movs	r3, #0
 8002f74:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d008      	beq.n	8002f92 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2204      	movs	r2, #4
 8002f84:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e020      	b.n	8002fd4 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f022 020e 	bic.w	r2, r2, #14
 8002fa0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f022 0201 	bic.w	r2, r2, #1
 8002fb0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fba:	2101      	movs	r1, #1
 8002fbc:	fa01 f202 	lsl.w	r2, r1, r2
 8002fc0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002fd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3714      	adds	r7, #20
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bc80      	pop	{r7}
 8002fdc:	4770      	bx	lr
	...

08002fe0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d005      	beq.n	8003002 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2204      	movs	r2, #4
 8002ffa:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	73fb      	strb	r3, [r7, #15]
 8003000:	e051      	b.n	80030a6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f022 020e 	bic.w	r2, r2, #14
 8003010:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f022 0201 	bic.w	r2, r2, #1
 8003020:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a22      	ldr	r2, [pc, #136]	; (80030b0 <HAL_DMA_Abort_IT+0xd0>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d029      	beq.n	8003080 <HAL_DMA_Abort_IT+0xa0>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a20      	ldr	r2, [pc, #128]	; (80030b4 <HAL_DMA_Abort_IT+0xd4>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d022      	beq.n	800307c <HAL_DMA_Abort_IT+0x9c>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a1f      	ldr	r2, [pc, #124]	; (80030b8 <HAL_DMA_Abort_IT+0xd8>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d01a      	beq.n	8003076 <HAL_DMA_Abort_IT+0x96>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a1d      	ldr	r2, [pc, #116]	; (80030bc <HAL_DMA_Abort_IT+0xdc>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d012      	beq.n	8003070 <HAL_DMA_Abort_IT+0x90>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a1c      	ldr	r2, [pc, #112]	; (80030c0 <HAL_DMA_Abort_IT+0xe0>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d00a      	beq.n	800306a <HAL_DMA_Abort_IT+0x8a>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a1a      	ldr	r2, [pc, #104]	; (80030c4 <HAL_DMA_Abort_IT+0xe4>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d102      	bne.n	8003064 <HAL_DMA_Abort_IT+0x84>
 800305e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003062:	e00e      	b.n	8003082 <HAL_DMA_Abort_IT+0xa2>
 8003064:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003068:	e00b      	b.n	8003082 <HAL_DMA_Abort_IT+0xa2>
 800306a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800306e:	e008      	b.n	8003082 <HAL_DMA_Abort_IT+0xa2>
 8003070:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003074:	e005      	b.n	8003082 <HAL_DMA_Abort_IT+0xa2>
 8003076:	f44f 7380 	mov.w	r3, #256	; 0x100
 800307a:	e002      	b.n	8003082 <HAL_DMA_Abort_IT+0xa2>
 800307c:	2310      	movs	r3, #16
 800307e:	e000      	b.n	8003082 <HAL_DMA_Abort_IT+0xa2>
 8003080:	2301      	movs	r3, #1
 8003082:	4a11      	ldr	r2, [pc, #68]	; (80030c8 <HAL_DMA_Abort_IT+0xe8>)
 8003084:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2201      	movs	r2, #1
 800308a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800309a:	2b00      	cmp	r3, #0
 800309c:	d003      	beq.n	80030a6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	4798      	blx	r3
    } 
  }
  return status;
 80030a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3710      	adds	r7, #16
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	40020008 	.word	0x40020008
 80030b4:	4002001c 	.word	0x4002001c
 80030b8:	40020030 	.word	0x40020030
 80030bc:	40020044 	.word	0x40020044
 80030c0:	40020058 	.word	0x40020058
 80030c4:	4002006c 	.word	0x4002006c
 80030c8:	40020000 	.word	0x40020000

080030cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b08b      	sub	sp, #44	; 0x2c
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030d6:	2300      	movs	r3, #0
 80030d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80030da:	2300      	movs	r3, #0
 80030dc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030de:	e169      	b.n	80033b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80030e0:	2201      	movs	r2, #1
 80030e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e4:	fa02 f303 	lsl.w	r3, r2, r3
 80030e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	69fa      	ldr	r2, [r7, #28]
 80030f0:	4013      	ands	r3, r2
 80030f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	f040 8158 	bne.w	80033ae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	4a9a      	ldr	r2, [pc, #616]	; (800336c <HAL_GPIO_Init+0x2a0>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d05e      	beq.n	80031c6 <HAL_GPIO_Init+0xfa>
 8003108:	4a98      	ldr	r2, [pc, #608]	; (800336c <HAL_GPIO_Init+0x2a0>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d875      	bhi.n	80031fa <HAL_GPIO_Init+0x12e>
 800310e:	4a98      	ldr	r2, [pc, #608]	; (8003370 <HAL_GPIO_Init+0x2a4>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d058      	beq.n	80031c6 <HAL_GPIO_Init+0xfa>
 8003114:	4a96      	ldr	r2, [pc, #600]	; (8003370 <HAL_GPIO_Init+0x2a4>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d86f      	bhi.n	80031fa <HAL_GPIO_Init+0x12e>
 800311a:	4a96      	ldr	r2, [pc, #600]	; (8003374 <HAL_GPIO_Init+0x2a8>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d052      	beq.n	80031c6 <HAL_GPIO_Init+0xfa>
 8003120:	4a94      	ldr	r2, [pc, #592]	; (8003374 <HAL_GPIO_Init+0x2a8>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d869      	bhi.n	80031fa <HAL_GPIO_Init+0x12e>
 8003126:	4a94      	ldr	r2, [pc, #592]	; (8003378 <HAL_GPIO_Init+0x2ac>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d04c      	beq.n	80031c6 <HAL_GPIO_Init+0xfa>
 800312c:	4a92      	ldr	r2, [pc, #584]	; (8003378 <HAL_GPIO_Init+0x2ac>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d863      	bhi.n	80031fa <HAL_GPIO_Init+0x12e>
 8003132:	4a92      	ldr	r2, [pc, #584]	; (800337c <HAL_GPIO_Init+0x2b0>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d046      	beq.n	80031c6 <HAL_GPIO_Init+0xfa>
 8003138:	4a90      	ldr	r2, [pc, #576]	; (800337c <HAL_GPIO_Init+0x2b0>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d85d      	bhi.n	80031fa <HAL_GPIO_Init+0x12e>
 800313e:	2b12      	cmp	r3, #18
 8003140:	d82a      	bhi.n	8003198 <HAL_GPIO_Init+0xcc>
 8003142:	2b12      	cmp	r3, #18
 8003144:	d859      	bhi.n	80031fa <HAL_GPIO_Init+0x12e>
 8003146:	a201      	add	r2, pc, #4	; (adr r2, 800314c <HAL_GPIO_Init+0x80>)
 8003148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800314c:	080031c7 	.word	0x080031c7
 8003150:	080031a1 	.word	0x080031a1
 8003154:	080031b3 	.word	0x080031b3
 8003158:	080031f5 	.word	0x080031f5
 800315c:	080031fb 	.word	0x080031fb
 8003160:	080031fb 	.word	0x080031fb
 8003164:	080031fb 	.word	0x080031fb
 8003168:	080031fb 	.word	0x080031fb
 800316c:	080031fb 	.word	0x080031fb
 8003170:	080031fb 	.word	0x080031fb
 8003174:	080031fb 	.word	0x080031fb
 8003178:	080031fb 	.word	0x080031fb
 800317c:	080031fb 	.word	0x080031fb
 8003180:	080031fb 	.word	0x080031fb
 8003184:	080031fb 	.word	0x080031fb
 8003188:	080031fb 	.word	0x080031fb
 800318c:	080031fb 	.word	0x080031fb
 8003190:	080031a9 	.word	0x080031a9
 8003194:	080031bd 	.word	0x080031bd
 8003198:	4a79      	ldr	r2, [pc, #484]	; (8003380 <HAL_GPIO_Init+0x2b4>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d013      	beq.n	80031c6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800319e:	e02c      	b.n	80031fa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	623b      	str	r3, [r7, #32]
          break;
 80031a6:	e029      	b.n	80031fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	3304      	adds	r3, #4
 80031ae:	623b      	str	r3, [r7, #32]
          break;
 80031b0:	e024      	b.n	80031fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	3308      	adds	r3, #8
 80031b8:	623b      	str	r3, [r7, #32]
          break;
 80031ba:	e01f      	b.n	80031fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	330c      	adds	r3, #12
 80031c2:	623b      	str	r3, [r7, #32]
          break;
 80031c4:	e01a      	b.n	80031fc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d102      	bne.n	80031d4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80031ce:	2304      	movs	r3, #4
 80031d0:	623b      	str	r3, [r7, #32]
          break;
 80031d2:	e013      	b.n	80031fc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d105      	bne.n	80031e8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80031dc:	2308      	movs	r3, #8
 80031de:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	69fa      	ldr	r2, [r7, #28]
 80031e4:	611a      	str	r2, [r3, #16]
          break;
 80031e6:	e009      	b.n	80031fc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80031e8:	2308      	movs	r3, #8
 80031ea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	69fa      	ldr	r2, [r7, #28]
 80031f0:	615a      	str	r2, [r3, #20]
          break;
 80031f2:	e003      	b.n	80031fc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80031f4:	2300      	movs	r3, #0
 80031f6:	623b      	str	r3, [r7, #32]
          break;
 80031f8:	e000      	b.n	80031fc <HAL_GPIO_Init+0x130>
          break;
 80031fa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	2bff      	cmp	r3, #255	; 0xff
 8003200:	d801      	bhi.n	8003206 <HAL_GPIO_Init+0x13a>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	e001      	b.n	800320a <HAL_GPIO_Init+0x13e>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	3304      	adds	r3, #4
 800320a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	2bff      	cmp	r3, #255	; 0xff
 8003210:	d802      	bhi.n	8003218 <HAL_GPIO_Init+0x14c>
 8003212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	e002      	b.n	800321e <HAL_GPIO_Init+0x152>
 8003218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321a:	3b08      	subs	r3, #8
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	210f      	movs	r1, #15
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	fa01 f303 	lsl.w	r3, r1, r3
 800322c:	43db      	mvns	r3, r3
 800322e:	401a      	ands	r2, r3
 8003230:	6a39      	ldr	r1, [r7, #32]
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	fa01 f303 	lsl.w	r3, r1, r3
 8003238:	431a      	orrs	r2, r3
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003246:	2b00      	cmp	r3, #0
 8003248:	f000 80b1 	beq.w	80033ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800324c:	4b4d      	ldr	r3, [pc, #308]	; (8003384 <HAL_GPIO_Init+0x2b8>)
 800324e:	699b      	ldr	r3, [r3, #24]
 8003250:	4a4c      	ldr	r2, [pc, #304]	; (8003384 <HAL_GPIO_Init+0x2b8>)
 8003252:	f043 0301 	orr.w	r3, r3, #1
 8003256:	6193      	str	r3, [r2, #24]
 8003258:	4b4a      	ldr	r3, [pc, #296]	; (8003384 <HAL_GPIO_Init+0x2b8>)
 800325a:	699b      	ldr	r3, [r3, #24]
 800325c:	f003 0301 	and.w	r3, r3, #1
 8003260:	60bb      	str	r3, [r7, #8]
 8003262:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003264:	4a48      	ldr	r2, [pc, #288]	; (8003388 <HAL_GPIO_Init+0x2bc>)
 8003266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003268:	089b      	lsrs	r3, r3, #2
 800326a:	3302      	adds	r3, #2
 800326c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003270:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003274:	f003 0303 	and.w	r3, r3, #3
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	220f      	movs	r2, #15
 800327c:	fa02 f303 	lsl.w	r3, r2, r3
 8003280:	43db      	mvns	r3, r3
 8003282:	68fa      	ldr	r2, [r7, #12]
 8003284:	4013      	ands	r3, r2
 8003286:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4a40      	ldr	r2, [pc, #256]	; (800338c <HAL_GPIO_Init+0x2c0>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d013      	beq.n	80032b8 <HAL_GPIO_Init+0x1ec>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4a3f      	ldr	r2, [pc, #252]	; (8003390 <HAL_GPIO_Init+0x2c4>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d00d      	beq.n	80032b4 <HAL_GPIO_Init+0x1e8>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	4a3e      	ldr	r2, [pc, #248]	; (8003394 <HAL_GPIO_Init+0x2c8>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d007      	beq.n	80032b0 <HAL_GPIO_Init+0x1e4>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4a3d      	ldr	r2, [pc, #244]	; (8003398 <HAL_GPIO_Init+0x2cc>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d101      	bne.n	80032ac <HAL_GPIO_Init+0x1e0>
 80032a8:	2303      	movs	r3, #3
 80032aa:	e006      	b.n	80032ba <HAL_GPIO_Init+0x1ee>
 80032ac:	2304      	movs	r3, #4
 80032ae:	e004      	b.n	80032ba <HAL_GPIO_Init+0x1ee>
 80032b0:	2302      	movs	r3, #2
 80032b2:	e002      	b.n	80032ba <HAL_GPIO_Init+0x1ee>
 80032b4:	2301      	movs	r3, #1
 80032b6:	e000      	b.n	80032ba <HAL_GPIO_Init+0x1ee>
 80032b8:	2300      	movs	r3, #0
 80032ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032bc:	f002 0203 	and.w	r2, r2, #3
 80032c0:	0092      	lsls	r2, r2, #2
 80032c2:	4093      	lsls	r3, r2
 80032c4:	68fa      	ldr	r2, [r7, #12]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80032ca:	492f      	ldr	r1, [pc, #188]	; (8003388 <HAL_GPIO_Init+0x2bc>)
 80032cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ce:	089b      	lsrs	r3, r3, #2
 80032d0:	3302      	adds	r3, #2
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d006      	beq.n	80032f2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80032e4:	4b2d      	ldr	r3, [pc, #180]	; (800339c <HAL_GPIO_Init+0x2d0>)
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	492c      	ldr	r1, [pc, #176]	; (800339c <HAL_GPIO_Init+0x2d0>)
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	600b      	str	r3, [r1, #0]
 80032f0:	e006      	b.n	8003300 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80032f2:	4b2a      	ldr	r3, [pc, #168]	; (800339c <HAL_GPIO_Init+0x2d0>)
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	43db      	mvns	r3, r3
 80032fa:	4928      	ldr	r1, [pc, #160]	; (800339c <HAL_GPIO_Init+0x2d0>)
 80032fc:	4013      	ands	r3, r2
 80032fe:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d006      	beq.n	800331a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800330c:	4b23      	ldr	r3, [pc, #140]	; (800339c <HAL_GPIO_Init+0x2d0>)
 800330e:	685a      	ldr	r2, [r3, #4]
 8003310:	4922      	ldr	r1, [pc, #136]	; (800339c <HAL_GPIO_Init+0x2d0>)
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	4313      	orrs	r3, r2
 8003316:	604b      	str	r3, [r1, #4]
 8003318:	e006      	b.n	8003328 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800331a:	4b20      	ldr	r3, [pc, #128]	; (800339c <HAL_GPIO_Init+0x2d0>)
 800331c:	685a      	ldr	r2, [r3, #4]
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	43db      	mvns	r3, r3
 8003322:	491e      	ldr	r1, [pc, #120]	; (800339c <HAL_GPIO_Init+0x2d0>)
 8003324:	4013      	ands	r3, r2
 8003326:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d006      	beq.n	8003342 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003334:	4b19      	ldr	r3, [pc, #100]	; (800339c <HAL_GPIO_Init+0x2d0>)
 8003336:	689a      	ldr	r2, [r3, #8]
 8003338:	4918      	ldr	r1, [pc, #96]	; (800339c <HAL_GPIO_Init+0x2d0>)
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	4313      	orrs	r3, r2
 800333e:	608b      	str	r3, [r1, #8]
 8003340:	e006      	b.n	8003350 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003342:	4b16      	ldr	r3, [pc, #88]	; (800339c <HAL_GPIO_Init+0x2d0>)
 8003344:	689a      	ldr	r2, [r3, #8]
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	43db      	mvns	r3, r3
 800334a:	4914      	ldr	r1, [pc, #80]	; (800339c <HAL_GPIO_Init+0x2d0>)
 800334c:	4013      	ands	r3, r2
 800334e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d021      	beq.n	80033a0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800335c:	4b0f      	ldr	r3, [pc, #60]	; (800339c <HAL_GPIO_Init+0x2d0>)
 800335e:	68da      	ldr	r2, [r3, #12]
 8003360:	490e      	ldr	r1, [pc, #56]	; (800339c <HAL_GPIO_Init+0x2d0>)
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	4313      	orrs	r3, r2
 8003366:	60cb      	str	r3, [r1, #12]
 8003368:	e021      	b.n	80033ae <HAL_GPIO_Init+0x2e2>
 800336a:	bf00      	nop
 800336c:	10320000 	.word	0x10320000
 8003370:	10310000 	.word	0x10310000
 8003374:	10220000 	.word	0x10220000
 8003378:	10210000 	.word	0x10210000
 800337c:	10120000 	.word	0x10120000
 8003380:	10110000 	.word	0x10110000
 8003384:	40021000 	.word	0x40021000
 8003388:	40010000 	.word	0x40010000
 800338c:	40010800 	.word	0x40010800
 8003390:	40010c00 	.word	0x40010c00
 8003394:	40011000 	.word	0x40011000
 8003398:	40011400 	.word	0x40011400
 800339c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80033a0:	4b0b      	ldr	r3, [pc, #44]	; (80033d0 <HAL_GPIO_Init+0x304>)
 80033a2:	68da      	ldr	r2, [r3, #12]
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	43db      	mvns	r3, r3
 80033a8:	4909      	ldr	r1, [pc, #36]	; (80033d0 <HAL_GPIO_Init+0x304>)
 80033aa:	4013      	ands	r3, r2
 80033ac:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80033ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b0:	3301      	adds	r3, #1
 80033b2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ba:	fa22 f303 	lsr.w	r3, r2, r3
 80033be:	2b00      	cmp	r3, #0
 80033c0:	f47f ae8e 	bne.w	80030e0 <HAL_GPIO_Init+0x14>
  }
}
 80033c4:	bf00      	nop
 80033c6:	bf00      	nop
 80033c8:	372c      	adds	r7, #44	; 0x2c
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bc80      	pop	{r7}
 80033ce:	4770      	bx	lr
 80033d0:	40010400 	.word	0x40010400

080033d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b085      	sub	sp, #20
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	460b      	mov	r3, r1
 80033de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	689a      	ldr	r2, [r3, #8]
 80033e4:	887b      	ldrh	r3, [r7, #2]
 80033e6:	4013      	ands	r3, r2
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d002      	beq.n	80033f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80033ec:	2301      	movs	r3, #1
 80033ee:	73fb      	strb	r3, [r7, #15]
 80033f0:	e001      	b.n	80033f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80033f2:	2300      	movs	r3, #0
 80033f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80033f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3714      	adds	r7, #20
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bc80      	pop	{r7}
 8003400:	4770      	bx	lr

08003402 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003402:	b480      	push	{r7}
 8003404:	b083      	sub	sp, #12
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
 800340a:	460b      	mov	r3, r1
 800340c:	807b      	strh	r3, [r7, #2]
 800340e:	4613      	mov	r3, r2
 8003410:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003412:	787b      	ldrb	r3, [r7, #1]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d003      	beq.n	8003420 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003418:	887a      	ldrh	r2, [r7, #2]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800341e:	e003      	b.n	8003428 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003420:	887b      	ldrh	r3, [r7, #2]
 8003422:	041a      	lsls	r2, r3, #16
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	611a      	str	r2, [r3, #16]
}
 8003428:	bf00      	nop
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	bc80      	pop	{r7}
 8003430:	4770      	bx	lr

08003432 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003432:	b480      	push	{r7}
 8003434:	b085      	sub	sp, #20
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
 800343a:	460b      	mov	r3, r1
 800343c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003444:	887a      	ldrh	r2, [r7, #2]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	4013      	ands	r3, r2
 800344a:	041a      	lsls	r2, r3, #16
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	43d9      	mvns	r1, r3
 8003450:	887b      	ldrh	r3, [r7, #2]
 8003452:	400b      	ands	r3, r1
 8003454:	431a      	orrs	r2, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	611a      	str	r2, [r3, #16]
}
 800345a:	bf00      	nop
 800345c:	3714      	adds	r7, #20
 800345e:	46bd      	mov	sp, r7
 8003460:	bc80      	pop	{r7}
 8003462:	4770      	bx	lr

08003464 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
 800346a:	4603      	mov	r3, r0
 800346c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800346e:	4b08      	ldr	r3, [pc, #32]	; (8003490 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003470:	695a      	ldr	r2, [r3, #20]
 8003472:	88fb      	ldrh	r3, [r7, #6]
 8003474:	4013      	ands	r3, r2
 8003476:	2b00      	cmp	r3, #0
 8003478:	d006      	beq.n	8003488 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800347a:	4a05      	ldr	r2, [pc, #20]	; (8003490 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800347c:	88fb      	ldrh	r3, [r7, #6]
 800347e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003480:	88fb      	ldrh	r3, [r7, #6]
 8003482:	4618      	mov	r0, r3
 8003484:	f7fe fb8e 	bl	8001ba4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003488:	bf00      	nop
 800348a:	3708      	adds	r7, #8
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	40010400 	.word	0x40010400

08003494 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d101      	bne.n	80034a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e12b      	b.n	80036fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d106      	bne.n	80034c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f7fe fcaa 	bl	8001e14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2224      	movs	r2, #36	; 0x24
 80034c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f022 0201 	bic.w	r2, r2, #1
 80034d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80034f8:	f003 f84e 	bl	8006598 <HAL_RCC_GetPCLK1Freq>
 80034fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	4a81      	ldr	r2, [pc, #516]	; (8003708 <HAL_I2C_Init+0x274>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d807      	bhi.n	8003518 <HAL_I2C_Init+0x84>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	4a80      	ldr	r2, [pc, #512]	; (800370c <HAL_I2C_Init+0x278>)
 800350c:	4293      	cmp	r3, r2
 800350e:	bf94      	ite	ls
 8003510:	2301      	movls	r3, #1
 8003512:	2300      	movhi	r3, #0
 8003514:	b2db      	uxtb	r3, r3
 8003516:	e006      	b.n	8003526 <HAL_I2C_Init+0x92>
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	4a7d      	ldr	r2, [pc, #500]	; (8003710 <HAL_I2C_Init+0x27c>)
 800351c:	4293      	cmp	r3, r2
 800351e:	bf94      	ite	ls
 8003520:	2301      	movls	r3, #1
 8003522:	2300      	movhi	r3, #0
 8003524:	b2db      	uxtb	r3, r3
 8003526:	2b00      	cmp	r3, #0
 8003528:	d001      	beq.n	800352e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e0e7      	b.n	80036fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	4a78      	ldr	r2, [pc, #480]	; (8003714 <HAL_I2C_Init+0x280>)
 8003532:	fba2 2303 	umull	r2, r3, r2, r3
 8003536:	0c9b      	lsrs	r3, r3, #18
 8003538:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68ba      	ldr	r2, [r7, #8]
 800354a:	430a      	orrs	r2, r1
 800354c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	6a1b      	ldr	r3, [r3, #32]
 8003554:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	4a6a      	ldr	r2, [pc, #424]	; (8003708 <HAL_I2C_Init+0x274>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d802      	bhi.n	8003568 <HAL_I2C_Init+0xd4>
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	3301      	adds	r3, #1
 8003566:	e009      	b.n	800357c <HAL_I2C_Init+0xe8>
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800356e:	fb02 f303 	mul.w	r3, r2, r3
 8003572:	4a69      	ldr	r2, [pc, #420]	; (8003718 <HAL_I2C_Init+0x284>)
 8003574:	fba2 2303 	umull	r2, r3, r2, r3
 8003578:	099b      	lsrs	r3, r3, #6
 800357a:	3301      	adds	r3, #1
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	6812      	ldr	r2, [r2, #0]
 8003580:	430b      	orrs	r3, r1
 8003582:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	69db      	ldr	r3, [r3, #28]
 800358a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800358e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	495c      	ldr	r1, [pc, #368]	; (8003708 <HAL_I2C_Init+0x274>)
 8003598:	428b      	cmp	r3, r1
 800359a:	d819      	bhi.n	80035d0 <HAL_I2C_Init+0x13c>
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	1e59      	subs	r1, r3, #1
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	005b      	lsls	r3, r3, #1
 80035a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80035aa:	1c59      	adds	r1, r3, #1
 80035ac:	f640 73fc 	movw	r3, #4092	; 0xffc
 80035b0:	400b      	ands	r3, r1
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00a      	beq.n	80035cc <HAL_I2C_Init+0x138>
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	1e59      	subs	r1, r3, #1
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	005b      	lsls	r3, r3, #1
 80035c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80035c4:	3301      	adds	r3, #1
 80035c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035ca:	e051      	b.n	8003670 <HAL_I2C_Init+0x1dc>
 80035cc:	2304      	movs	r3, #4
 80035ce:	e04f      	b.n	8003670 <HAL_I2C_Init+0x1dc>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d111      	bne.n	80035fc <HAL_I2C_Init+0x168>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	1e58      	subs	r0, r3, #1
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6859      	ldr	r1, [r3, #4]
 80035e0:	460b      	mov	r3, r1
 80035e2:	005b      	lsls	r3, r3, #1
 80035e4:	440b      	add	r3, r1
 80035e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80035ea:	3301      	adds	r3, #1
 80035ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	bf0c      	ite	eq
 80035f4:	2301      	moveq	r3, #1
 80035f6:	2300      	movne	r3, #0
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	e012      	b.n	8003622 <HAL_I2C_Init+0x18e>
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	1e58      	subs	r0, r3, #1
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6859      	ldr	r1, [r3, #4]
 8003604:	460b      	mov	r3, r1
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	440b      	add	r3, r1
 800360a:	0099      	lsls	r1, r3, #2
 800360c:	440b      	add	r3, r1
 800360e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003612:	3301      	adds	r3, #1
 8003614:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003618:	2b00      	cmp	r3, #0
 800361a:	bf0c      	ite	eq
 800361c:	2301      	moveq	r3, #1
 800361e:	2300      	movne	r3, #0
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b00      	cmp	r3, #0
 8003624:	d001      	beq.n	800362a <HAL_I2C_Init+0x196>
 8003626:	2301      	movs	r3, #1
 8003628:	e022      	b.n	8003670 <HAL_I2C_Init+0x1dc>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d10e      	bne.n	8003650 <HAL_I2C_Init+0x1bc>
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	1e58      	subs	r0, r3, #1
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6859      	ldr	r1, [r3, #4]
 800363a:	460b      	mov	r3, r1
 800363c:	005b      	lsls	r3, r3, #1
 800363e:	440b      	add	r3, r1
 8003640:	fbb0 f3f3 	udiv	r3, r0, r3
 8003644:	3301      	adds	r3, #1
 8003646:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800364a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800364e:	e00f      	b.n	8003670 <HAL_I2C_Init+0x1dc>
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	1e58      	subs	r0, r3, #1
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6859      	ldr	r1, [r3, #4]
 8003658:	460b      	mov	r3, r1
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	440b      	add	r3, r1
 800365e:	0099      	lsls	r1, r3, #2
 8003660:	440b      	add	r3, r1
 8003662:	fbb0 f3f3 	udiv	r3, r0, r3
 8003666:	3301      	adds	r3, #1
 8003668:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800366c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003670:	6879      	ldr	r1, [r7, #4]
 8003672:	6809      	ldr	r1, [r1, #0]
 8003674:	4313      	orrs	r3, r2
 8003676:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	69da      	ldr	r2, [r3, #28]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a1b      	ldr	r3, [r3, #32]
 800368a:	431a      	orrs	r2, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	430a      	orrs	r2, r1
 8003692:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800369e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	6911      	ldr	r1, [r2, #16]
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	68d2      	ldr	r2, [r2, #12]
 80036aa:	4311      	orrs	r1, r2
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	6812      	ldr	r2, [r2, #0]
 80036b0:	430b      	orrs	r3, r1
 80036b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	695a      	ldr	r2, [r3, #20]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	431a      	orrs	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	430a      	orrs	r2, r1
 80036ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f042 0201 	orr.w	r2, r2, #1
 80036de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2220      	movs	r2, #32
 80036ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3710      	adds	r7, #16
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	000186a0 	.word	0x000186a0
 800370c:	001e847f 	.word	0x001e847f
 8003710:	003d08ff 	.word	0x003d08ff
 8003714:	431bde83 	.word	0x431bde83
 8003718:	10624dd3 	.word	0x10624dd3

0800371c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b088      	sub	sp, #32
 8003720:	af02      	add	r7, sp, #8
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	4608      	mov	r0, r1
 8003726:	4611      	mov	r1, r2
 8003728:	461a      	mov	r2, r3
 800372a:	4603      	mov	r3, r0
 800372c:	817b      	strh	r3, [r7, #10]
 800372e:	460b      	mov	r3, r1
 8003730:	813b      	strh	r3, [r7, #8]
 8003732:	4613      	mov	r3, r2
 8003734:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003736:	f7fe fe05 	bl	8002344 <HAL_GetTick>
 800373a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003742:	b2db      	uxtb	r3, r3
 8003744:	2b20      	cmp	r3, #32
 8003746:	f040 80d9 	bne.w	80038fc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	9300      	str	r3, [sp, #0]
 800374e:	2319      	movs	r3, #25
 8003750:	2201      	movs	r2, #1
 8003752:	496d      	ldr	r1, [pc, #436]	; (8003908 <HAL_I2C_Mem_Write+0x1ec>)
 8003754:	68f8      	ldr	r0, [r7, #12]
 8003756:	f000 fcc1 	bl	80040dc <I2C_WaitOnFlagUntilTimeout>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d001      	beq.n	8003764 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003760:	2302      	movs	r3, #2
 8003762:	e0cc      	b.n	80038fe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800376a:	2b01      	cmp	r3, #1
 800376c:	d101      	bne.n	8003772 <HAL_I2C_Mem_Write+0x56>
 800376e:	2302      	movs	r3, #2
 8003770:	e0c5      	b.n	80038fe <HAL_I2C_Mem_Write+0x1e2>
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2201      	movs	r2, #1
 8003776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0301 	and.w	r3, r3, #1
 8003784:	2b01      	cmp	r3, #1
 8003786:	d007      	beq.n	8003798 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f042 0201 	orr.w	r2, r2, #1
 8003796:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037a6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2221      	movs	r2, #33	; 0x21
 80037ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2240      	movs	r2, #64	; 0x40
 80037b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2200      	movs	r2, #0
 80037bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6a3a      	ldr	r2, [r7, #32]
 80037c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80037c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ce:	b29a      	uxth	r2, r3
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	4a4d      	ldr	r2, [pc, #308]	; (800390c <HAL_I2C_Mem_Write+0x1f0>)
 80037d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037da:	88f8      	ldrh	r0, [r7, #6]
 80037dc:	893a      	ldrh	r2, [r7, #8]
 80037de:	8979      	ldrh	r1, [r7, #10]
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	9301      	str	r3, [sp, #4]
 80037e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037e6:	9300      	str	r3, [sp, #0]
 80037e8:	4603      	mov	r3, r0
 80037ea:	68f8      	ldr	r0, [r7, #12]
 80037ec:	f000 faf8 	bl	8003de0 <I2C_RequestMemoryWrite>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d052      	beq.n	800389c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e081      	b.n	80038fe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037fa:	697a      	ldr	r2, [r7, #20]
 80037fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037fe:	68f8      	ldr	r0, [r7, #12]
 8003800:	f000 fd42 	bl	8004288 <I2C_WaitOnTXEFlagUntilTimeout>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00d      	beq.n	8003826 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380e:	2b04      	cmp	r3, #4
 8003810:	d107      	bne.n	8003822 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003820:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e06b      	b.n	80038fe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382a:	781a      	ldrb	r2, [r3, #0]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003836:	1c5a      	adds	r2, r3, #1
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003840:	3b01      	subs	r3, #1
 8003842:	b29a      	uxth	r2, r3
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800384c:	b29b      	uxth	r3, r3
 800384e:	3b01      	subs	r3, #1
 8003850:	b29a      	uxth	r2, r3
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	695b      	ldr	r3, [r3, #20]
 800385c:	f003 0304 	and.w	r3, r3, #4
 8003860:	2b04      	cmp	r3, #4
 8003862:	d11b      	bne.n	800389c <HAL_I2C_Mem_Write+0x180>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003868:	2b00      	cmp	r3, #0
 800386a:	d017      	beq.n	800389c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003870:	781a      	ldrb	r2, [r3, #0]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387c:	1c5a      	adds	r2, r3, #1
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003886:	3b01      	subs	r3, #1
 8003888:	b29a      	uxth	r2, r3
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003892:	b29b      	uxth	r3, r3
 8003894:	3b01      	subs	r3, #1
 8003896:	b29a      	uxth	r2, r3
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d1aa      	bne.n	80037fa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038a4:	697a      	ldr	r2, [r7, #20]
 80038a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038a8:	68f8      	ldr	r0, [r7, #12]
 80038aa:	f000 fd2e 	bl	800430a <I2C_WaitOnBTFFlagUntilTimeout>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d00d      	beq.n	80038d0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b8:	2b04      	cmp	r3, #4
 80038ba:	d107      	bne.n	80038cc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038ca:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e016      	b.n	80038fe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2220      	movs	r2, #32
 80038e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80038f8:	2300      	movs	r3, #0
 80038fa:	e000      	b.n	80038fe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80038fc:	2302      	movs	r3, #2
  }
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3718      	adds	r7, #24
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	00100002 	.word	0x00100002
 800390c:	ffff0000 	.word	0xffff0000

08003910 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b08c      	sub	sp, #48	; 0x30
 8003914:	af02      	add	r7, sp, #8
 8003916:	60f8      	str	r0, [r7, #12]
 8003918:	4608      	mov	r0, r1
 800391a:	4611      	mov	r1, r2
 800391c:	461a      	mov	r2, r3
 800391e:	4603      	mov	r3, r0
 8003920:	817b      	strh	r3, [r7, #10]
 8003922:	460b      	mov	r3, r1
 8003924:	813b      	strh	r3, [r7, #8]
 8003926:	4613      	mov	r3, r2
 8003928:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800392a:	2300      	movs	r3, #0
 800392c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800392e:	f7fe fd09 	bl	8002344 <HAL_GetTick>
 8003932:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800393a:	b2db      	uxtb	r3, r3
 800393c:	2b20      	cmp	r3, #32
 800393e:	f040 8244 	bne.w	8003dca <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003944:	9300      	str	r3, [sp, #0]
 8003946:	2319      	movs	r3, #25
 8003948:	2201      	movs	r2, #1
 800394a:	4982      	ldr	r1, [pc, #520]	; (8003b54 <HAL_I2C_Mem_Read+0x244>)
 800394c:	68f8      	ldr	r0, [r7, #12]
 800394e:	f000 fbc5 	bl	80040dc <I2C_WaitOnFlagUntilTimeout>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d001      	beq.n	800395c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003958:	2302      	movs	r3, #2
 800395a:	e237      	b.n	8003dcc <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003962:	2b01      	cmp	r3, #1
 8003964:	d101      	bne.n	800396a <HAL_I2C_Mem_Read+0x5a>
 8003966:	2302      	movs	r3, #2
 8003968:	e230      	b.n	8003dcc <HAL_I2C_Mem_Read+0x4bc>
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2201      	movs	r2, #1
 800396e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0301 	and.w	r3, r3, #1
 800397c:	2b01      	cmp	r3, #1
 800397e:	d007      	beq.n	8003990 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f042 0201 	orr.w	r2, r2, #1
 800398e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800399e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2222      	movs	r2, #34	; 0x22
 80039a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2240      	movs	r2, #64	; 0x40
 80039ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2200      	movs	r2, #0
 80039b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80039c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c6:	b29a      	uxth	r2, r3
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	4a62      	ldr	r2, [pc, #392]	; (8003b58 <HAL_I2C_Mem_Read+0x248>)
 80039d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80039d2:	88f8      	ldrh	r0, [r7, #6]
 80039d4:	893a      	ldrh	r2, [r7, #8]
 80039d6:	8979      	ldrh	r1, [r7, #10]
 80039d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039da:	9301      	str	r3, [sp, #4]
 80039dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039de:	9300      	str	r3, [sp, #0]
 80039e0:	4603      	mov	r3, r0
 80039e2:	68f8      	ldr	r0, [r7, #12]
 80039e4:	f000 fa92 	bl	8003f0c <I2C_RequestMemoryRead>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d001      	beq.n	80039f2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e1ec      	b.n	8003dcc <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d113      	bne.n	8003a22 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039fa:	2300      	movs	r3, #0
 80039fc:	61fb      	str	r3, [r7, #28]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	695b      	ldr	r3, [r3, #20]
 8003a04:	61fb      	str	r3, [r7, #28]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	61fb      	str	r3, [r7, #28]
 8003a0e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a1e:	601a      	str	r2, [r3, #0]
 8003a20:	e1c0      	b.n	8003da4 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d11e      	bne.n	8003a68 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a38:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003a3a:	b672      	cpsid	i
}
 8003a3c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a3e:	2300      	movs	r3, #0
 8003a40:	61bb      	str	r3, [r7, #24]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	695b      	ldr	r3, [r3, #20]
 8003a48:	61bb      	str	r3, [r7, #24]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	699b      	ldr	r3, [r3, #24]
 8003a50:	61bb      	str	r3, [r7, #24]
 8003a52:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a62:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003a64:	b662      	cpsie	i
}
 8003a66:	e035      	b.n	8003ad4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d11e      	bne.n	8003aae <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a7e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003a80:	b672      	cpsid	i
}
 8003a82:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a84:	2300      	movs	r3, #0
 8003a86:	617b      	str	r3, [r7, #20]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	695b      	ldr	r3, [r3, #20]
 8003a8e:	617b      	str	r3, [r7, #20]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	699b      	ldr	r3, [r3, #24]
 8003a96:	617b      	str	r3, [r7, #20]
 8003a98:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003aa8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003aaa:	b662      	cpsie	i
}
 8003aac:	e012      	b.n	8003ad4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003abc:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003abe:	2300      	movs	r3, #0
 8003ac0:	613b      	str	r3, [r7, #16]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	695b      	ldr	r3, [r3, #20]
 8003ac8:	613b      	str	r3, [r7, #16]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	699b      	ldr	r3, [r3, #24]
 8003ad0:	613b      	str	r3, [r7, #16]
 8003ad2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003ad4:	e166      	b.n	8003da4 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ada:	2b03      	cmp	r3, #3
 8003adc:	f200 811f 	bhi.w	8003d1e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d123      	bne.n	8003b30 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003aec:	68f8      	ldr	r0, [r7, #12]
 8003aee:	f000 fc4d 	bl	800438c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d001      	beq.n	8003afc <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e167      	b.n	8003dcc <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	691a      	ldr	r2, [r3, #16]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b06:	b2d2      	uxtb	r2, r2
 8003b08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0e:	1c5a      	adds	r2, r3, #1
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b18:	3b01      	subs	r3, #1
 8003b1a:	b29a      	uxth	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	3b01      	subs	r3, #1
 8003b28:	b29a      	uxth	r2, r3
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b2e:	e139      	b.n	8003da4 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d152      	bne.n	8003bde <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3a:	9300      	str	r3, [sp, #0]
 8003b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b3e:	2200      	movs	r2, #0
 8003b40:	4906      	ldr	r1, [pc, #24]	; (8003b5c <HAL_I2C_Mem_Read+0x24c>)
 8003b42:	68f8      	ldr	r0, [r7, #12]
 8003b44:	f000 faca 	bl	80040dc <I2C_WaitOnFlagUntilTimeout>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d008      	beq.n	8003b60 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e13c      	b.n	8003dcc <HAL_I2C_Mem_Read+0x4bc>
 8003b52:	bf00      	nop
 8003b54:	00100002 	.word	0x00100002
 8003b58:	ffff0000 	.word	0xffff0000
 8003b5c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003b60:	b672      	cpsid	i
}
 8003b62:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	691a      	ldr	r2, [r3, #16]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7e:	b2d2      	uxtb	r2, r2
 8003b80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b86:	1c5a      	adds	r2, r3, #1
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b90:	3b01      	subs	r3, #1
 8003b92:	b29a      	uxth	r2, r3
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	b29a      	uxth	r2, r3
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003ba6:	b662      	cpsie	i
}
 8003ba8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	691a      	ldr	r2, [r3, #16]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb4:	b2d2      	uxtb	r2, r2
 8003bb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbc:	1c5a      	adds	r2, r3, #1
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	b29a      	uxth	r2, r3
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	3b01      	subs	r3, #1
 8003bd6:	b29a      	uxth	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003bdc:	e0e2      	b.n	8003da4 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be0:	9300      	str	r3, [sp, #0]
 8003be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003be4:	2200      	movs	r2, #0
 8003be6:	497b      	ldr	r1, [pc, #492]	; (8003dd4 <HAL_I2C_Mem_Read+0x4c4>)
 8003be8:	68f8      	ldr	r0, [r7, #12]
 8003bea:	f000 fa77 	bl	80040dc <I2C_WaitOnFlagUntilTimeout>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d001      	beq.n	8003bf8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e0e9      	b.n	8003dcc <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c06:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003c08:	b672      	cpsid	i
}
 8003c0a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	691a      	ldr	r2, [r3, #16]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c16:	b2d2      	uxtb	r2, r2
 8003c18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1e:	1c5a      	adds	r2, r3, #1
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c28:	3b01      	subs	r3, #1
 8003c2a:	b29a      	uxth	r2, r3
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	3b01      	subs	r3, #1
 8003c38:	b29a      	uxth	r2, r3
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003c3e:	4b66      	ldr	r3, [pc, #408]	; (8003dd8 <HAL_I2C_Mem_Read+0x4c8>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	08db      	lsrs	r3, r3, #3
 8003c44:	4a65      	ldr	r2, [pc, #404]	; (8003ddc <HAL_I2C_Mem_Read+0x4cc>)
 8003c46:	fba2 2303 	umull	r2, r3, r2, r3
 8003c4a:	0a1a      	lsrs	r2, r3, #8
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	4413      	add	r3, r2
 8003c52:	00da      	lsls	r2, r3, #3
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003c58:	6a3b      	ldr	r3, [r7, #32]
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003c5e:	6a3b      	ldr	r3, [r7, #32]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d118      	bne.n	8003c96 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2200      	movs	r2, #0
 8003c68:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2220      	movs	r2, #32
 8003c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7e:	f043 0220 	orr.w	r2, r3, #32
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003c86:	b662      	cpsie	i
}
 8003c88:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e09a      	b.n	8003dcc <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	695b      	ldr	r3, [r3, #20]
 8003c9c:	f003 0304 	and.w	r3, r3, #4
 8003ca0:	2b04      	cmp	r3, #4
 8003ca2:	d1d9      	bne.n	8003c58 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cb2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	691a      	ldr	r2, [r3, #16]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbe:	b2d2      	uxtb	r2, r2
 8003cc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc6:	1c5a      	adds	r2, r3, #1
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cd0:	3b01      	subs	r3, #1
 8003cd2:	b29a      	uxth	r2, r3
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	b29a      	uxth	r2, r3
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003ce6:	b662      	cpsie	i
}
 8003ce8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	691a      	ldr	r2, [r3, #16]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf4:	b2d2      	uxtb	r2, r2
 8003cf6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfc:	1c5a      	adds	r2, r3, #1
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d06:	3b01      	subs	r3, #1
 8003d08:	b29a      	uxth	r2, r3
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	3b01      	subs	r3, #1
 8003d16:	b29a      	uxth	r2, r3
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d1c:	e042      	b.n	8003da4 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d20:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d22:	68f8      	ldr	r0, [r7, #12]
 8003d24:	f000 fb32 	bl	800438c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d001      	beq.n	8003d32 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e04c      	b.n	8003dcc <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	691a      	ldr	r2, [r3, #16]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3c:	b2d2      	uxtb	r2, r2
 8003d3e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d44:	1c5a      	adds	r2, r3, #1
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	b29a      	uxth	r2, r3
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	3b01      	subs	r3, #1
 8003d5e:	b29a      	uxth	r2, r3
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	695b      	ldr	r3, [r3, #20]
 8003d6a:	f003 0304 	and.w	r3, r3, #4
 8003d6e:	2b04      	cmp	r3, #4
 8003d70:	d118      	bne.n	8003da4 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	691a      	ldr	r2, [r3, #16]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7c:	b2d2      	uxtb	r2, r2
 8003d7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d84:	1c5a      	adds	r2, r3, #1
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	b29a      	uxth	r2, r3
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	3b01      	subs	r3, #1
 8003d9e:	b29a      	uxth	r2, r3
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	f47f ae94 	bne.w	8003ad6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2220      	movs	r2, #32
 8003db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	e000      	b.n	8003dcc <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8003dca:	2302      	movs	r3, #2
  }
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3728      	adds	r7, #40	; 0x28
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	00010004 	.word	0x00010004
 8003dd8:	20000094 	.word	0x20000094
 8003ddc:	14f8b589 	.word	0x14f8b589

08003de0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b088      	sub	sp, #32
 8003de4:	af02      	add	r7, sp, #8
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	4608      	mov	r0, r1
 8003dea:	4611      	mov	r1, r2
 8003dec:	461a      	mov	r2, r3
 8003dee:	4603      	mov	r3, r0
 8003df0:	817b      	strh	r3, [r7, #10]
 8003df2:	460b      	mov	r3, r1
 8003df4:	813b      	strh	r3, [r7, #8]
 8003df6:	4613      	mov	r3, r2
 8003df8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e08:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0c:	9300      	str	r3, [sp, #0]
 8003e0e:	6a3b      	ldr	r3, [r7, #32]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e16:	68f8      	ldr	r0, [r7, #12]
 8003e18:	f000 f960 	bl	80040dc <I2C_WaitOnFlagUntilTimeout>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00d      	beq.n	8003e3e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e30:	d103      	bne.n	8003e3a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e38:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e05f      	b.n	8003efe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e3e:	897b      	ldrh	r3, [r7, #10]
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	461a      	mov	r2, r3
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e4c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e50:	6a3a      	ldr	r2, [r7, #32]
 8003e52:	492d      	ldr	r1, [pc, #180]	; (8003f08 <I2C_RequestMemoryWrite+0x128>)
 8003e54:	68f8      	ldr	r0, [r7, #12]
 8003e56:	f000 f998 	bl	800418a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d001      	beq.n	8003e64 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e04c      	b.n	8003efe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e64:	2300      	movs	r3, #0
 8003e66:	617b      	str	r3, [r7, #20]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	695b      	ldr	r3, [r3, #20]
 8003e6e:	617b      	str	r3, [r7, #20]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	699b      	ldr	r3, [r3, #24]
 8003e76:	617b      	str	r3, [r7, #20]
 8003e78:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e7c:	6a39      	ldr	r1, [r7, #32]
 8003e7e:	68f8      	ldr	r0, [r7, #12]
 8003e80:	f000 fa02 	bl	8004288 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00d      	beq.n	8003ea6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8e:	2b04      	cmp	r3, #4
 8003e90:	d107      	bne.n	8003ea2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ea0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e02b      	b.n	8003efe <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ea6:	88fb      	ldrh	r3, [r7, #6]
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d105      	bne.n	8003eb8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003eac:	893b      	ldrh	r3, [r7, #8]
 8003eae:	b2da      	uxtb	r2, r3
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	611a      	str	r2, [r3, #16]
 8003eb6:	e021      	b.n	8003efc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003eb8:	893b      	ldrh	r3, [r7, #8]
 8003eba:	0a1b      	lsrs	r3, r3, #8
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	b2da      	uxtb	r2, r3
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ec6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ec8:	6a39      	ldr	r1, [r7, #32]
 8003eca:	68f8      	ldr	r0, [r7, #12]
 8003ecc:	f000 f9dc 	bl	8004288 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00d      	beq.n	8003ef2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eda:	2b04      	cmp	r3, #4
 8003edc:	d107      	bne.n	8003eee <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e005      	b.n	8003efe <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ef2:	893b      	ldrh	r3, [r7, #8]
 8003ef4:	b2da      	uxtb	r2, r3
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3718      	adds	r7, #24
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	00010002 	.word	0x00010002

08003f0c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b088      	sub	sp, #32
 8003f10:	af02      	add	r7, sp, #8
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	4608      	mov	r0, r1
 8003f16:	4611      	mov	r1, r2
 8003f18:	461a      	mov	r2, r3
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	817b      	strh	r3, [r7, #10]
 8003f1e:	460b      	mov	r3, r1
 8003f20:	813b      	strh	r3, [r7, #8]
 8003f22:	4613      	mov	r3, r2
 8003f24:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f34:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f44:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f48:	9300      	str	r3, [sp, #0]
 8003f4a:	6a3b      	ldr	r3, [r7, #32]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f52:	68f8      	ldr	r0, [r7, #12]
 8003f54:	f000 f8c2 	bl	80040dc <I2C_WaitOnFlagUntilTimeout>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00d      	beq.n	8003f7a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f6c:	d103      	bne.n	8003f76 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f74:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e0aa      	b.n	80040d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f7a:	897b      	ldrh	r3, [r7, #10]
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	461a      	mov	r2, r3
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f88:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8c:	6a3a      	ldr	r2, [r7, #32]
 8003f8e:	4952      	ldr	r1, [pc, #328]	; (80040d8 <I2C_RequestMemoryRead+0x1cc>)
 8003f90:	68f8      	ldr	r0, [r7, #12]
 8003f92:	f000 f8fa 	bl	800418a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d001      	beq.n	8003fa0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e097      	b.n	80040d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	617b      	str	r3, [r7, #20]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	617b      	str	r3, [r7, #20]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	699b      	ldr	r3, [r3, #24]
 8003fb2:	617b      	str	r3, [r7, #20]
 8003fb4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fb8:	6a39      	ldr	r1, [r7, #32]
 8003fba:	68f8      	ldr	r0, [r7, #12]
 8003fbc:	f000 f964 	bl	8004288 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d00d      	beq.n	8003fe2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fca:	2b04      	cmp	r3, #4
 8003fcc:	d107      	bne.n	8003fde <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fdc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e076      	b.n	80040d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003fe2:	88fb      	ldrh	r3, [r7, #6]
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d105      	bne.n	8003ff4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003fe8:	893b      	ldrh	r3, [r7, #8]
 8003fea:	b2da      	uxtb	r2, r3
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	611a      	str	r2, [r3, #16]
 8003ff2:	e021      	b.n	8004038 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ff4:	893b      	ldrh	r3, [r7, #8]
 8003ff6:	0a1b      	lsrs	r3, r3, #8
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	b2da      	uxtb	r2, r3
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004002:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004004:	6a39      	ldr	r1, [r7, #32]
 8004006:	68f8      	ldr	r0, [r7, #12]
 8004008:	f000 f93e 	bl	8004288 <I2C_WaitOnTXEFlagUntilTimeout>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d00d      	beq.n	800402e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004016:	2b04      	cmp	r3, #4
 8004018:	d107      	bne.n	800402a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004028:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e050      	b.n	80040d0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800402e:	893b      	ldrh	r3, [r7, #8]
 8004030:	b2da      	uxtb	r2, r3
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800403a:	6a39      	ldr	r1, [r7, #32]
 800403c:	68f8      	ldr	r0, [r7, #12]
 800403e:	f000 f923 	bl	8004288 <I2C_WaitOnTXEFlagUntilTimeout>
 8004042:	4603      	mov	r3, r0
 8004044:	2b00      	cmp	r3, #0
 8004046:	d00d      	beq.n	8004064 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404c:	2b04      	cmp	r3, #4
 800404e:	d107      	bne.n	8004060 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800405e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e035      	b.n	80040d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004072:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004076:	9300      	str	r3, [sp, #0]
 8004078:	6a3b      	ldr	r3, [r7, #32]
 800407a:	2200      	movs	r2, #0
 800407c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004080:	68f8      	ldr	r0, [r7, #12]
 8004082:	f000 f82b 	bl	80040dc <I2C_WaitOnFlagUntilTimeout>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d00d      	beq.n	80040a8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004096:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800409a:	d103      	bne.n	80040a4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	e013      	b.n	80040d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80040a8:	897b      	ldrh	r3, [r7, #10]
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	f043 0301 	orr.w	r3, r3, #1
 80040b0:	b2da      	uxtb	r2, r3
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ba:	6a3a      	ldr	r2, [r7, #32]
 80040bc:	4906      	ldr	r1, [pc, #24]	; (80040d8 <I2C_RequestMemoryRead+0x1cc>)
 80040be:	68f8      	ldr	r0, [r7, #12]
 80040c0:	f000 f863 	bl	800418a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d001      	beq.n	80040ce <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e000      	b.n	80040d0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3718      	adds	r7, #24
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	00010002 	.word	0x00010002

080040dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	603b      	str	r3, [r7, #0]
 80040e8:	4613      	mov	r3, r2
 80040ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040ec:	e025      	b.n	800413a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040f4:	d021      	beq.n	800413a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040f6:	f7fe f925 	bl	8002344 <HAL_GetTick>
 80040fa:	4602      	mov	r2, r0
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	683a      	ldr	r2, [r7, #0]
 8004102:	429a      	cmp	r2, r3
 8004104:	d302      	bcc.n	800410c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d116      	bne.n	800413a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2200      	movs	r2, #0
 8004110:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2220      	movs	r2, #32
 8004116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2200      	movs	r2, #0
 800411e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004126:	f043 0220 	orr.w	r2, r3, #32
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e023      	b.n	8004182 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	0c1b      	lsrs	r3, r3, #16
 800413e:	b2db      	uxtb	r3, r3
 8004140:	2b01      	cmp	r3, #1
 8004142:	d10d      	bne.n	8004160 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	695b      	ldr	r3, [r3, #20]
 800414a:	43da      	mvns	r2, r3
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	4013      	ands	r3, r2
 8004150:	b29b      	uxth	r3, r3
 8004152:	2b00      	cmp	r3, #0
 8004154:	bf0c      	ite	eq
 8004156:	2301      	moveq	r3, #1
 8004158:	2300      	movne	r3, #0
 800415a:	b2db      	uxtb	r3, r3
 800415c:	461a      	mov	r2, r3
 800415e:	e00c      	b.n	800417a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	699b      	ldr	r3, [r3, #24]
 8004166:	43da      	mvns	r2, r3
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	4013      	ands	r3, r2
 800416c:	b29b      	uxth	r3, r3
 800416e:	2b00      	cmp	r3, #0
 8004170:	bf0c      	ite	eq
 8004172:	2301      	moveq	r3, #1
 8004174:	2300      	movne	r3, #0
 8004176:	b2db      	uxtb	r3, r3
 8004178:	461a      	mov	r2, r3
 800417a:	79fb      	ldrb	r3, [r7, #7]
 800417c:	429a      	cmp	r2, r3
 800417e:	d0b6      	beq.n	80040ee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	3710      	adds	r7, #16
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}

0800418a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800418a:	b580      	push	{r7, lr}
 800418c:	b084      	sub	sp, #16
 800418e:	af00      	add	r7, sp, #0
 8004190:	60f8      	str	r0, [r7, #12]
 8004192:	60b9      	str	r1, [r7, #8]
 8004194:	607a      	str	r2, [r7, #4]
 8004196:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004198:	e051      	b.n	800423e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	695b      	ldr	r3, [r3, #20]
 80041a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041a8:	d123      	bne.n	80041f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041b8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80041c2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2200      	movs	r2, #0
 80041c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2220      	movs	r2, #32
 80041ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041de:	f043 0204 	orr.w	r2, r3, #4
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e046      	b.n	8004280 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041f8:	d021      	beq.n	800423e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041fa:	f7fe f8a3 	bl	8002344 <HAL_GetTick>
 80041fe:	4602      	mov	r2, r0
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	429a      	cmp	r2, r3
 8004208:	d302      	bcc.n	8004210 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d116      	bne.n	800423e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2200      	movs	r2, #0
 8004214:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2220      	movs	r2, #32
 800421a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422a:	f043 0220 	orr.w	r2, r3, #32
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e020      	b.n	8004280 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	0c1b      	lsrs	r3, r3, #16
 8004242:	b2db      	uxtb	r3, r3
 8004244:	2b01      	cmp	r3, #1
 8004246:	d10c      	bne.n	8004262 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	43da      	mvns	r2, r3
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	4013      	ands	r3, r2
 8004254:	b29b      	uxth	r3, r3
 8004256:	2b00      	cmp	r3, #0
 8004258:	bf14      	ite	ne
 800425a:	2301      	movne	r3, #1
 800425c:	2300      	moveq	r3, #0
 800425e:	b2db      	uxtb	r3, r3
 8004260:	e00b      	b.n	800427a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	699b      	ldr	r3, [r3, #24]
 8004268:	43da      	mvns	r2, r3
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	4013      	ands	r3, r2
 800426e:	b29b      	uxth	r3, r3
 8004270:	2b00      	cmp	r3, #0
 8004272:	bf14      	ite	ne
 8004274:	2301      	movne	r3, #1
 8004276:	2300      	moveq	r3, #0
 8004278:	b2db      	uxtb	r3, r3
 800427a:	2b00      	cmp	r3, #0
 800427c:	d18d      	bne.n	800419a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800427e:	2300      	movs	r3, #0
}
 8004280:	4618      	mov	r0, r3
 8004282:	3710      	adds	r7, #16
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}

08004288 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004294:	e02d      	b.n	80042f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004296:	68f8      	ldr	r0, [r7, #12]
 8004298:	f000 f8ce 	bl	8004438 <I2C_IsAcknowledgeFailed>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d001      	beq.n	80042a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e02d      	b.n	8004302 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042ac:	d021      	beq.n	80042f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042ae:	f7fe f849 	bl	8002344 <HAL_GetTick>
 80042b2:	4602      	mov	r2, r0
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	68ba      	ldr	r2, [r7, #8]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d302      	bcc.n	80042c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d116      	bne.n	80042f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2200      	movs	r2, #0
 80042c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2220      	movs	r2, #32
 80042ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042de:	f043 0220 	orr.w	r2, r3, #32
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e007      	b.n	8004302 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	695b      	ldr	r3, [r3, #20]
 80042f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042fc:	2b80      	cmp	r3, #128	; 0x80
 80042fe:	d1ca      	bne.n	8004296 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	3710      	adds	r7, #16
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}

0800430a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800430a:	b580      	push	{r7, lr}
 800430c:	b084      	sub	sp, #16
 800430e:	af00      	add	r7, sp, #0
 8004310:	60f8      	str	r0, [r7, #12]
 8004312:	60b9      	str	r1, [r7, #8]
 8004314:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004316:	e02d      	b.n	8004374 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004318:	68f8      	ldr	r0, [r7, #12]
 800431a:	f000 f88d 	bl	8004438 <I2C_IsAcknowledgeFailed>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d001      	beq.n	8004328 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e02d      	b.n	8004384 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800432e:	d021      	beq.n	8004374 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004330:	f7fe f808 	bl	8002344 <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	68ba      	ldr	r2, [r7, #8]
 800433c:	429a      	cmp	r2, r3
 800433e:	d302      	bcc.n	8004346 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d116      	bne.n	8004374 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2220      	movs	r2, #32
 8004350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2200      	movs	r2, #0
 8004358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004360:	f043 0220 	orr.w	r2, r3, #32
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2200      	movs	r2, #0
 800436c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e007      	b.n	8004384 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	f003 0304 	and.w	r3, r3, #4
 800437e:	2b04      	cmp	r3, #4
 8004380:	d1ca      	bne.n	8004318 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004382:	2300      	movs	r3, #0
}
 8004384:	4618      	mov	r0, r3
 8004386:	3710      	adds	r7, #16
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	60b9      	str	r1, [r7, #8]
 8004396:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004398:	e042      	b.n	8004420 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	695b      	ldr	r3, [r3, #20]
 80043a0:	f003 0310 	and.w	r3, r3, #16
 80043a4:	2b10      	cmp	r3, #16
 80043a6:	d119      	bne.n	80043dc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f06f 0210 	mvn.w	r2, #16
 80043b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2200      	movs	r2, #0
 80043b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2220      	movs	r2, #32
 80043bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e029      	b.n	8004430 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043dc:	f7fd ffb2 	bl	8002344 <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	68ba      	ldr	r2, [r7, #8]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d302      	bcc.n	80043f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d116      	bne.n	8004420 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2220      	movs	r2, #32
 80043fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440c:	f043 0220 	orr.w	r2, r3, #32
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2200      	movs	r2, #0
 8004418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e007      	b.n	8004430 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	695b      	ldr	r3, [r3, #20]
 8004426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800442a:	2b40      	cmp	r3, #64	; 0x40
 800442c:	d1b5      	bne.n	800439a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800442e:	2300      	movs	r3, #0
}
 8004430:	4618      	mov	r0, r3
 8004432:	3710      	adds	r7, #16
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	695b      	ldr	r3, [r3, #20]
 8004446:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800444a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800444e:	d11b      	bne.n	8004488 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004458:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2220      	movs	r2, #32
 8004464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004474:	f043 0204 	orr.w	r2, r3, #4
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e000      	b.n	800448a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	370c      	adds	r7, #12
 800448e:	46bd      	mov	sp, r7
 8004490:	bc80      	pop	{r7}
 8004492:	4770      	bx	lr

08004494 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004496:	b08b      	sub	sp, #44	; 0x2c
 8004498:	af06      	add	r7, sp, #24
 800449a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d101      	bne.n	80044a6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e0fd      	b.n	80046a2 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d106      	bne.n	80044c0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f007 f982 	bl	800b7c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2203      	movs	r2, #3
 80044c4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4618      	mov	r0, r3
 80044ce:	f003 fba9 	bl	8007c24 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	603b      	str	r3, [r7, #0]
 80044d8:	687e      	ldr	r6, [r7, #4]
 80044da:	466d      	mov	r5, sp
 80044dc:	f106 0410 	add.w	r4, r6, #16
 80044e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80044e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80044e4:	6823      	ldr	r3, [r4, #0]
 80044e6:	602b      	str	r3, [r5, #0]
 80044e8:	1d33      	adds	r3, r6, #4
 80044ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80044ec:	6838      	ldr	r0, [r7, #0]
 80044ee:	f003 fb73 	bl	8007bd8 <USB_CoreInit>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d005      	beq.n	8004504 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2202      	movs	r2, #2
 80044fc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e0ce      	b.n	80046a2 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	2100      	movs	r1, #0
 800450a:	4618      	mov	r0, r3
 800450c:	f003 fba4 	bl	8007c58 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004510:	2300      	movs	r3, #0
 8004512:	73fb      	strb	r3, [r7, #15]
 8004514:	e04c      	b.n	80045b0 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004516:	7bfb      	ldrb	r3, [r7, #15]
 8004518:	6879      	ldr	r1, [r7, #4]
 800451a:	1c5a      	adds	r2, r3, #1
 800451c:	4613      	mov	r3, r2
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	4413      	add	r3, r2
 8004522:	00db      	lsls	r3, r3, #3
 8004524:	440b      	add	r3, r1
 8004526:	3301      	adds	r3, #1
 8004528:	2201      	movs	r2, #1
 800452a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800452c:	7bfb      	ldrb	r3, [r7, #15]
 800452e:	6879      	ldr	r1, [r7, #4]
 8004530:	1c5a      	adds	r2, r3, #1
 8004532:	4613      	mov	r3, r2
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	4413      	add	r3, r2
 8004538:	00db      	lsls	r3, r3, #3
 800453a:	440b      	add	r3, r1
 800453c:	7bfa      	ldrb	r2, [r7, #15]
 800453e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004540:	7bfa      	ldrb	r2, [r7, #15]
 8004542:	7bfb      	ldrb	r3, [r7, #15]
 8004544:	b298      	uxth	r0, r3
 8004546:	6879      	ldr	r1, [r7, #4]
 8004548:	4613      	mov	r3, r2
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	4413      	add	r3, r2
 800454e:	00db      	lsls	r3, r3, #3
 8004550:	440b      	add	r3, r1
 8004552:	3336      	adds	r3, #54	; 0x36
 8004554:	4602      	mov	r2, r0
 8004556:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004558:	7bfb      	ldrb	r3, [r7, #15]
 800455a:	6879      	ldr	r1, [r7, #4]
 800455c:	1c5a      	adds	r2, r3, #1
 800455e:	4613      	mov	r3, r2
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	4413      	add	r3, r2
 8004564:	00db      	lsls	r3, r3, #3
 8004566:	440b      	add	r3, r1
 8004568:	3303      	adds	r3, #3
 800456a:	2200      	movs	r2, #0
 800456c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800456e:	7bfa      	ldrb	r2, [r7, #15]
 8004570:	6879      	ldr	r1, [r7, #4]
 8004572:	4613      	mov	r3, r2
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	4413      	add	r3, r2
 8004578:	00db      	lsls	r3, r3, #3
 800457a:	440b      	add	r3, r1
 800457c:	3338      	adds	r3, #56	; 0x38
 800457e:	2200      	movs	r2, #0
 8004580:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004582:	7bfa      	ldrb	r2, [r7, #15]
 8004584:	6879      	ldr	r1, [r7, #4]
 8004586:	4613      	mov	r3, r2
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	4413      	add	r3, r2
 800458c:	00db      	lsls	r3, r3, #3
 800458e:	440b      	add	r3, r1
 8004590:	333c      	adds	r3, #60	; 0x3c
 8004592:	2200      	movs	r2, #0
 8004594:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004596:	7bfa      	ldrb	r2, [r7, #15]
 8004598:	6879      	ldr	r1, [r7, #4]
 800459a:	4613      	mov	r3, r2
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	4413      	add	r3, r2
 80045a0:	00db      	lsls	r3, r3, #3
 80045a2:	440b      	add	r3, r1
 80045a4:	3340      	adds	r3, #64	; 0x40
 80045a6:	2200      	movs	r2, #0
 80045a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045aa:	7bfb      	ldrb	r3, [r7, #15]
 80045ac:	3301      	adds	r3, #1
 80045ae:	73fb      	strb	r3, [r7, #15]
 80045b0:	7bfa      	ldrb	r2, [r7, #15]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d3ad      	bcc.n	8004516 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045ba:	2300      	movs	r3, #0
 80045bc:	73fb      	strb	r3, [r7, #15]
 80045be:	e044      	b.n	800464a <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80045c0:	7bfa      	ldrb	r2, [r7, #15]
 80045c2:	6879      	ldr	r1, [r7, #4]
 80045c4:	4613      	mov	r3, r2
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	4413      	add	r3, r2
 80045ca:	00db      	lsls	r3, r3, #3
 80045cc:	440b      	add	r3, r1
 80045ce:	f203 1369 	addw	r3, r3, #361	; 0x169
 80045d2:	2200      	movs	r2, #0
 80045d4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80045d6:	7bfa      	ldrb	r2, [r7, #15]
 80045d8:	6879      	ldr	r1, [r7, #4]
 80045da:	4613      	mov	r3, r2
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	4413      	add	r3, r2
 80045e0:	00db      	lsls	r3, r3, #3
 80045e2:	440b      	add	r3, r1
 80045e4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80045e8:	7bfa      	ldrb	r2, [r7, #15]
 80045ea:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80045ec:	7bfa      	ldrb	r2, [r7, #15]
 80045ee:	6879      	ldr	r1, [r7, #4]
 80045f0:	4613      	mov	r3, r2
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	4413      	add	r3, r2
 80045f6:	00db      	lsls	r3, r3, #3
 80045f8:	440b      	add	r3, r1
 80045fa:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80045fe:	2200      	movs	r2, #0
 8004600:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004602:	7bfa      	ldrb	r2, [r7, #15]
 8004604:	6879      	ldr	r1, [r7, #4]
 8004606:	4613      	mov	r3, r2
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	4413      	add	r3, r2
 800460c:	00db      	lsls	r3, r3, #3
 800460e:	440b      	add	r3, r1
 8004610:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8004614:	2200      	movs	r2, #0
 8004616:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004618:	7bfa      	ldrb	r2, [r7, #15]
 800461a:	6879      	ldr	r1, [r7, #4]
 800461c:	4613      	mov	r3, r2
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	4413      	add	r3, r2
 8004622:	00db      	lsls	r3, r3, #3
 8004624:	440b      	add	r3, r1
 8004626:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800462a:	2200      	movs	r2, #0
 800462c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800462e:	7bfa      	ldrb	r2, [r7, #15]
 8004630:	6879      	ldr	r1, [r7, #4]
 8004632:	4613      	mov	r3, r2
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	4413      	add	r3, r2
 8004638:	00db      	lsls	r3, r3, #3
 800463a:	440b      	add	r3, r1
 800463c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004640:	2200      	movs	r2, #0
 8004642:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004644:	7bfb      	ldrb	r3, [r7, #15]
 8004646:	3301      	adds	r3, #1
 8004648:	73fb      	strb	r3, [r7, #15]
 800464a:	7bfa      	ldrb	r2, [r7, #15]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	429a      	cmp	r2, r3
 8004652:	d3b5      	bcc.n	80045c0 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	603b      	str	r3, [r7, #0]
 800465a:	687e      	ldr	r6, [r7, #4]
 800465c:	466d      	mov	r5, sp
 800465e:	f106 0410 	add.w	r4, r6, #16
 8004662:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004664:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004666:	6823      	ldr	r3, [r4, #0]
 8004668:	602b      	str	r3, [r5, #0]
 800466a:	1d33      	adds	r3, r6, #4
 800466c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800466e:	6838      	ldr	r0, [r7, #0]
 8004670:	f003 fafe 	bl	8007c70 <USB_DevInit>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d005      	beq.n	8004686 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2202      	movs	r2, #2
 800467e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e00d      	b.n	80046a2 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2201      	movs	r2, #1
 8004692:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4618      	mov	r0, r3
 800469c:	f005 fc6f 	bl	8009f7e <USB_DevDisconnect>

  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3714      	adds	r7, #20
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080046aa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80046aa:	b580      	push	{r7, lr}
 80046ac:	b082      	sub	sp, #8
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d101      	bne.n	80046c0 <HAL_PCD_Start+0x16>
 80046bc:	2302      	movs	r3, #2
 80046be:	e016      	b.n	80046ee <HAL_PCD_Start+0x44>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4618      	mov	r0, r3
 80046ce:	f003 fa93 	bl	8007bf8 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80046d2:	2101      	movs	r1, #1
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f007 fac4 	bl	800bc62 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4618      	mov	r0, r3
 80046e0:	f005 fc43 	bl	8009f6a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3708      	adds	r7, #8
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}

080046f6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80046f6:	b580      	push	{r7, lr}
 80046f8:	b088      	sub	sp, #32
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4618      	mov	r0, r3
 8004704:	f005 fc45 	bl	8009f92 <USB_ReadInterrupts>
 8004708:	4603      	mov	r3, r0
 800470a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800470e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004712:	d102      	bne.n	800471a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f000 fb4a 	bl	8004dae <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4618      	mov	r0, r3
 8004720:	f005 fc37 	bl	8009f92 <USB_ReadInterrupts>
 8004724:	4603      	mov	r3, r0
 8004726:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800472a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800472e:	d112      	bne.n	8004756 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004738:	b29a      	uxth	r2, r3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004742:	b292      	uxth	r2, r2
 8004744:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f007 f8b6 	bl	800b8ba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800474e:	2100      	movs	r1, #0
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f000 f925 	bl	80049a0 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4618      	mov	r0, r3
 800475c:	f005 fc19 	bl	8009f92 <USB_ReadInterrupts>
 8004760:	4603      	mov	r3, r0
 8004762:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004766:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800476a:	d10b      	bne.n	8004784 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004774:	b29a      	uxth	r2, r3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800477e:	b292      	uxth	r2, r2
 8004780:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4618      	mov	r0, r3
 800478a:	f005 fc02 	bl	8009f92 <USB_ReadInterrupts>
 800478e:	4603      	mov	r3, r0
 8004790:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004794:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004798:	d10b      	bne.n	80047b2 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80047a2:	b29a      	uxth	r2, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047ac:	b292      	uxth	r2, r2
 80047ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4618      	mov	r0, r3
 80047b8:	f005 fbeb 	bl	8009f92 <USB_ReadInterrupts>
 80047bc:	4603      	mov	r3, r0
 80047be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047c6:	d126      	bne.n	8004816 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80047d0:	b29a      	uxth	r2, r3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f022 0204 	bic.w	r2, r2, #4
 80047da:	b292      	uxth	r2, r2
 80047dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80047e8:	b29a      	uxth	r2, r3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f022 0208 	bic.w	r2, r2, #8
 80047f2:	b292      	uxth	r2, r2
 80047f4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f007 f897 	bl	800b92c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004806:	b29a      	uxth	r2, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004810:	b292      	uxth	r2, r2
 8004812:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4618      	mov	r0, r3
 800481c:	f005 fbb9 	bl	8009f92 <USB_ReadInterrupts>
 8004820:	4603      	mov	r3, r0
 8004822:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004826:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800482a:	f040 8084 	bne.w	8004936 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 800482e:	2300      	movs	r3, #0
 8004830:	77fb      	strb	r3, [r7, #31]
 8004832:	e011      	b.n	8004858 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	461a      	mov	r2, r3
 800483a:	7ffb      	ldrb	r3, [r7, #31]
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	441a      	add	r2, r3
 8004840:	7ffb      	ldrb	r3, [r7, #31]
 8004842:	8812      	ldrh	r2, [r2, #0]
 8004844:	b292      	uxth	r2, r2
 8004846:	005b      	lsls	r3, r3, #1
 8004848:	f107 0120 	add.w	r1, r7, #32
 800484c:	440b      	add	r3, r1
 800484e:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8004852:	7ffb      	ldrb	r3, [r7, #31]
 8004854:	3301      	adds	r3, #1
 8004856:	77fb      	strb	r3, [r7, #31]
 8004858:	7ffb      	ldrb	r3, [r7, #31]
 800485a:	2b07      	cmp	r3, #7
 800485c:	d9ea      	bls.n	8004834 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004866:	b29a      	uxth	r2, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f042 0201 	orr.w	r2, r2, #1
 8004870:	b292      	uxth	r2, r2
 8004872:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800487e:	b29a      	uxth	r2, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f022 0201 	bic.w	r2, r2, #1
 8004888:	b292      	uxth	r2, r2
 800488a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800488e:	bf00      	nop
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004898:	b29b      	uxth	r3, r3
 800489a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d0f6      	beq.n	8004890 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80048aa:	b29a      	uxth	r2, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048b4:	b292      	uxth	r2, r2
 80048b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80048ba:	2300      	movs	r3, #0
 80048bc:	77fb      	strb	r3, [r7, #31]
 80048be:	e010      	b.n	80048e2 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80048c0:	7ffb      	ldrb	r3, [r7, #31]
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	6812      	ldr	r2, [r2, #0]
 80048c6:	4611      	mov	r1, r2
 80048c8:	7ffa      	ldrb	r2, [r7, #31]
 80048ca:	0092      	lsls	r2, r2, #2
 80048cc:	440a      	add	r2, r1
 80048ce:	005b      	lsls	r3, r3, #1
 80048d0:	f107 0120 	add.w	r1, r7, #32
 80048d4:	440b      	add	r3, r1
 80048d6:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80048da:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80048dc:	7ffb      	ldrb	r3, [r7, #31]
 80048de:	3301      	adds	r3, #1
 80048e0:	77fb      	strb	r3, [r7, #31]
 80048e2:	7ffb      	ldrb	r3, [r7, #31]
 80048e4:	2b07      	cmp	r3, #7
 80048e6:	d9eb      	bls.n	80048c0 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80048f0:	b29a      	uxth	r2, r3
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f042 0208 	orr.w	r2, r2, #8
 80048fa:	b292      	uxth	r2, r2
 80048fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004908:	b29a      	uxth	r2, r3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004912:	b292      	uxth	r2, r2
 8004914:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004920:	b29a      	uxth	r2, r3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f042 0204 	orr.w	r2, r2, #4
 800492a:	b292      	uxth	r2, r2
 800492c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f006 ffe1 	bl	800b8f8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4618      	mov	r0, r3
 800493c:	f005 fb29 	bl	8009f92 <USB_ReadInterrupts>
 8004940:	4603      	mov	r3, r0
 8004942:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004946:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800494a:	d10e      	bne.n	800496a <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004954:	b29a      	uxth	r2, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800495e:	b292      	uxth	r2, r2
 8004960:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f006 ff9a 	bl	800b89e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4618      	mov	r0, r3
 8004970:	f005 fb0f 	bl	8009f92 <USB_ReadInterrupts>
 8004974:	4603      	mov	r3, r0
 8004976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800497a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800497e:	d10b      	bne.n	8004998 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004988:	b29a      	uxth	r2, r3
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004992:	b292      	uxth	r2, r2
 8004994:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8004998:	bf00      	nop
 800499a:	3720      	adds	r7, #32
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}

080049a0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b082      	sub	sp, #8
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	460b      	mov	r3, r1
 80049aa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d101      	bne.n	80049ba <HAL_PCD_SetAddress+0x1a>
 80049b6:	2302      	movs	r3, #2
 80049b8:	e013      	b.n	80049e2 <HAL_PCD_SetAddress+0x42>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2201      	movs	r2, #1
 80049be:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	78fa      	ldrb	r2, [r7, #3]
 80049c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	78fa      	ldrb	r2, [r7, #3]
 80049d0:	4611      	mov	r1, r2
 80049d2:	4618      	mov	r0, r3
 80049d4:	f005 fab6 	bl	8009f44 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80049e0:	2300      	movs	r3, #0
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3708      	adds	r7, #8
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}

080049ea <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80049ea:	b580      	push	{r7, lr}
 80049ec:	b084      	sub	sp, #16
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6078      	str	r0, [r7, #4]
 80049f2:	4608      	mov	r0, r1
 80049f4:	4611      	mov	r1, r2
 80049f6:	461a      	mov	r2, r3
 80049f8:	4603      	mov	r3, r0
 80049fa:	70fb      	strb	r3, [r7, #3]
 80049fc:	460b      	mov	r3, r1
 80049fe:	803b      	strh	r3, [r7, #0]
 8004a00:	4613      	mov	r3, r2
 8004a02:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004a04:	2300      	movs	r3, #0
 8004a06:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004a08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	da0e      	bge.n	8004a2e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a10:	78fb      	ldrb	r3, [r7, #3]
 8004a12:	f003 0307 	and.w	r3, r3, #7
 8004a16:	1c5a      	adds	r2, r3, #1
 8004a18:	4613      	mov	r3, r2
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	4413      	add	r3, r2
 8004a1e:	00db      	lsls	r3, r3, #3
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	4413      	add	r3, r2
 8004a24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2201      	movs	r2, #1
 8004a2a:	705a      	strb	r2, [r3, #1]
 8004a2c:	e00e      	b.n	8004a4c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a2e:	78fb      	ldrb	r3, [r7, #3]
 8004a30:	f003 0207 	and.w	r2, r3, #7
 8004a34:	4613      	mov	r3, r2
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	4413      	add	r3, r2
 8004a3a:	00db      	lsls	r3, r3, #3
 8004a3c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	4413      	add	r3, r2
 8004a44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004a4c:	78fb      	ldrb	r3, [r7, #3]
 8004a4e:	f003 0307 	and.w	r3, r3, #7
 8004a52:	b2da      	uxtb	r2, r3
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004a58:	883a      	ldrh	r2, [r7, #0]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	78ba      	ldrb	r2, [r7, #2]
 8004a62:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	785b      	ldrb	r3, [r3, #1]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d004      	beq.n	8004a76 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	b29a      	uxth	r2, r3
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004a76:	78bb      	ldrb	r3, [r7, #2]
 8004a78:	2b02      	cmp	r3, #2
 8004a7a:	d102      	bne.n	8004a82 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d101      	bne.n	8004a90 <HAL_PCD_EP_Open+0xa6>
 8004a8c:	2302      	movs	r3, #2
 8004a8e:	e00e      	b.n	8004aae <HAL_PCD_EP_Open+0xc4>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	68f9      	ldr	r1, [r7, #12]
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f003 f906 	bl	8007cb0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8004aac:	7afb      	ldrb	r3, [r7, #11]
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3710      	adds	r7, #16
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}

08004ab6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ab6:	b580      	push	{r7, lr}
 8004ab8:	b084      	sub	sp, #16
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]
 8004abe:	460b      	mov	r3, r1
 8004ac0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004ac2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	da0e      	bge.n	8004ae8 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004aca:	78fb      	ldrb	r3, [r7, #3]
 8004acc:	f003 0307 	and.w	r3, r3, #7
 8004ad0:	1c5a      	adds	r2, r3, #1
 8004ad2:	4613      	mov	r3, r2
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	4413      	add	r3, r2
 8004ad8:	00db      	lsls	r3, r3, #3
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	4413      	add	r3, r2
 8004ade:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	705a      	strb	r2, [r3, #1]
 8004ae6:	e00e      	b.n	8004b06 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ae8:	78fb      	ldrb	r3, [r7, #3]
 8004aea:	f003 0207 	and.w	r2, r3, #7
 8004aee:	4613      	mov	r3, r2
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	4413      	add	r3, r2
 8004af4:	00db      	lsls	r3, r3, #3
 8004af6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	4413      	add	r3, r2
 8004afe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004b06:	78fb      	ldrb	r3, [r7, #3]
 8004b08:	f003 0307 	and.w	r3, r3, #7
 8004b0c:	b2da      	uxtb	r2, r3
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d101      	bne.n	8004b20 <HAL_PCD_EP_Close+0x6a>
 8004b1c:	2302      	movs	r3, #2
 8004b1e:	e00e      	b.n	8004b3e <HAL_PCD_EP_Close+0x88>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	68f9      	ldr	r1, [r7, #12]
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f003 fc28 	bl	8008384 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3710      	adds	r7, #16
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004b46:	b580      	push	{r7, lr}
 8004b48:	b086      	sub	sp, #24
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	60f8      	str	r0, [r7, #12]
 8004b4e:	607a      	str	r2, [r7, #4]
 8004b50:	603b      	str	r3, [r7, #0]
 8004b52:	460b      	mov	r3, r1
 8004b54:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b56:	7afb      	ldrb	r3, [r7, #11]
 8004b58:	f003 0207 	and.w	r2, r3, #7
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	4413      	add	r3, r2
 8004b62:	00db      	lsls	r3, r3, #3
 8004b64:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004b68:	68fa      	ldr	r2, [r7, #12]
 8004b6a:	4413      	add	r3, r2
 8004b6c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	683a      	ldr	r2, [r7, #0]
 8004b78:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	2200      	movs	r2, #0
 8004b84:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b86:	7afb      	ldrb	r3, [r7, #11]
 8004b88:	f003 0307 	and.w	r3, r3, #7
 8004b8c:	b2da      	uxtb	r2, r3
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004b92:	7afb      	ldrb	r3, [r7, #11]
 8004b94:	f003 0307 	and.w	r3, r3, #7
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d106      	bne.n	8004baa <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	6979      	ldr	r1, [r7, #20]
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f003 fdda 	bl	800875c <USB_EPStartXfer>
 8004ba8:	e005      	b.n	8004bb6 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	6979      	ldr	r1, [r7, #20]
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f003 fdd3 	bl	800875c <USB_EPStartXfer>
  }

  return HAL_OK;
 8004bb6:	2300      	movs	r3, #0
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3718      	adds	r7, #24
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}

08004bc0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b086      	sub	sp, #24
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	607a      	str	r2, [r7, #4]
 8004bca:	603b      	str	r3, [r7, #0]
 8004bcc:	460b      	mov	r3, r1
 8004bce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004bd0:	7afb      	ldrb	r3, [r7, #11]
 8004bd2:	f003 0307 	and.w	r3, r3, #7
 8004bd6:	1c5a      	adds	r2, r3, #1
 8004bd8:	4613      	mov	r3, r2
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	4413      	add	r3, r2
 8004bde:	00db      	lsls	r3, r3, #3
 8004be0:	68fa      	ldr	r2, [r7, #12]
 8004be2:	4413      	add	r3, r2
 8004be4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	683a      	ldr	r2, [r7, #0]
 8004bf0:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	683a      	ldr	r2, [r7, #0]
 8004bfe:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	2200      	movs	r2, #0
 8004c04:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	2201      	movs	r2, #1
 8004c0a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c0c:	7afb      	ldrb	r3, [r7, #11]
 8004c0e:	f003 0307 	and.w	r3, r3, #7
 8004c12:	b2da      	uxtb	r2, r3
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004c18:	7afb      	ldrb	r3, [r7, #11]
 8004c1a:	f003 0307 	and.w	r3, r3, #7
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d106      	bne.n	8004c30 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	6979      	ldr	r1, [r7, #20]
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f003 fd97 	bl	800875c <USB_EPStartXfer>
 8004c2e:	e005      	b.n	8004c3c <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	6979      	ldr	r1, [r7, #20]
 8004c36:	4618      	mov	r0, r3
 8004c38:	f003 fd90 	bl	800875c <USB_EPStartXfer>
  }

  return HAL_OK;
 8004c3c:	2300      	movs	r3, #0
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3718      	adds	r7, #24
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}

08004c46 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c46:	b580      	push	{r7, lr}
 8004c48:	b084      	sub	sp, #16
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	6078      	str	r0, [r7, #4]
 8004c4e:	460b      	mov	r3, r1
 8004c50:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004c52:	78fb      	ldrb	r3, [r7, #3]
 8004c54:	f003 0207 	and.w	r2, r3, #7
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d901      	bls.n	8004c64 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e04c      	b.n	8004cfe <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004c64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	da0e      	bge.n	8004c8a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c6c:	78fb      	ldrb	r3, [r7, #3]
 8004c6e:	f003 0307 	and.w	r3, r3, #7
 8004c72:	1c5a      	adds	r2, r3, #1
 8004c74:	4613      	mov	r3, r2
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	4413      	add	r3, r2
 8004c7a:	00db      	lsls	r3, r3, #3
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	4413      	add	r3, r2
 8004c80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2201      	movs	r2, #1
 8004c86:	705a      	strb	r2, [r3, #1]
 8004c88:	e00c      	b.n	8004ca4 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004c8a:	78fa      	ldrb	r2, [r7, #3]
 8004c8c:	4613      	mov	r3, r2
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	4413      	add	r3, r2
 8004c92:	00db      	lsls	r3, r3, #3
 8004c94:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	4413      	add	r3, r2
 8004c9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004caa:	78fb      	ldrb	r3, [r7, #3]
 8004cac:	f003 0307 	and.w	r3, r3, #7
 8004cb0:	b2da      	uxtb	r2, r3
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d101      	bne.n	8004cc4 <HAL_PCD_EP_SetStall+0x7e>
 8004cc0:	2302      	movs	r3, #2
 8004cc2:	e01c      	b.n	8004cfe <HAL_PCD_EP_SetStall+0xb8>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68f9      	ldr	r1, [r7, #12]
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f005 f839 	bl	8009d4a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004cd8:	78fb      	ldrb	r3, [r7, #3]
 8004cda:	f003 0307 	and.w	r3, r3, #7
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d108      	bne.n	8004cf4 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8004cec:	4619      	mov	r1, r3
 8004cee:	4610      	mov	r0, r2
 8004cf0:	f005 f95e 	bl	8009fb0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3710      	adds	r7, #16
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}

08004d06 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d06:	b580      	push	{r7, lr}
 8004d08:	b084      	sub	sp, #16
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
 8004d0e:	460b      	mov	r3, r1
 8004d10:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004d12:	78fb      	ldrb	r3, [r7, #3]
 8004d14:	f003 020f 	and.w	r2, r3, #15
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d901      	bls.n	8004d24 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e040      	b.n	8004da6 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004d24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	da0e      	bge.n	8004d4a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d2c:	78fb      	ldrb	r3, [r7, #3]
 8004d2e:	f003 0307 	and.w	r3, r3, #7
 8004d32:	1c5a      	adds	r2, r3, #1
 8004d34:	4613      	mov	r3, r2
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	4413      	add	r3, r2
 8004d3a:	00db      	lsls	r3, r3, #3
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	4413      	add	r3, r2
 8004d40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2201      	movs	r2, #1
 8004d46:	705a      	strb	r2, [r3, #1]
 8004d48:	e00e      	b.n	8004d68 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d4a:	78fb      	ldrb	r3, [r7, #3]
 8004d4c:	f003 0207 	and.w	r2, r3, #7
 8004d50:	4613      	mov	r3, r2
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	4413      	add	r3, r2
 8004d56:	00db      	lsls	r3, r3, #3
 8004d58:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	4413      	add	r3, r2
 8004d60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2200      	movs	r2, #0
 8004d66:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d6e:	78fb      	ldrb	r3, [r7, #3]
 8004d70:	f003 0307 	and.w	r3, r3, #7
 8004d74:	b2da      	uxtb	r2, r3
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d101      	bne.n	8004d88 <HAL_PCD_EP_ClrStall+0x82>
 8004d84:	2302      	movs	r3, #2
 8004d86:	e00e      	b.n	8004da6 <HAL_PCD_EP_ClrStall+0xa0>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	68f9      	ldr	r1, [r7, #12]
 8004d96:	4618      	mov	r0, r3
 8004d98:	f005 f827 	bl	8009dea <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004da4:	2300      	movs	r3, #0
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3710      	adds	r7, #16
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}

08004dae <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004dae:	b580      	push	{r7, lr}
 8004db0:	b08e      	sub	sp, #56	; 0x38
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004db6:	e2ec      	b.n	8005392 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004dc0:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004dc2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	f003 030f 	and.w	r3, r3, #15
 8004dca:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8004dce:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	f040 8161 	bne.w	800509a <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004dd8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004dda:	f003 0310 	and.w	r3, r3, #16
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d152      	bne.n	8004e88 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	881b      	ldrh	r3, [r3, #0]
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004df2:	81fb      	strh	r3, [r7, #14]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	89fb      	ldrh	r3, [r7, #14]
 8004dfa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dfe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	3328      	adds	r3, #40	; 0x28
 8004e0a:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	461a      	mov	r2, r3
 8004e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	00db      	lsls	r3, r3, #3
 8004e1e:	4413      	add	r3, r2
 8004e20:	3302      	adds	r3, #2
 8004e22:	005b      	lsls	r3, r3, #1
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	6812      	ldr	r2, [r2, #0]
 8004e28:	4413      	add	r3, r2
 8004e2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e2e:	881b      	ldrh	r3, [r3, #0]
 8004e30:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e36:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3a:	695a      	ldr	r2, [r3, #20]
 8004e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3e:	69db      	ldr	r3, [r3, #28]
 8004e40:	441a      	add	r2, r3
 8004e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e44:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004e46:	2100      	movs	r1, #0
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f006 fd0e 	bl	800b86a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	f000 829b 	beq.w	8005392 <PCD_EP_ISR_Handler+0x5e4>
 8004e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5e:	699b      	ldr	r3, [r3, #24]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	f040 8296 	bne.w	8005392 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004e72:	b2da      	uxtb	r2, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	b292      	uxth	r2, r2
 8004e7a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004e86:	e284      	b.n	8005392 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004e8e:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	881b      	ldrh	r3, [r3, #0]
 8004e96:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004e98:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004e9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d034      	beq.n	8004f0c <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	461a      	mov	r2, r3
 8004eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	00db      	lsls	r3, r3, #3
 8004eb4:	4413      	add	r3, r2
 8004eb6:	3306      	adds	r3, #6
 8004eb8:	005b      	lsls	r3, r3, #1
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	6812      	ldr	r2, [r2, #0]
 8004ebe:	4413      	add	r3, r2
 8004ec0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ec4:	881b      	ldrh	r3, [r3, #0]
 8004ec6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ecc:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6818      	ldr	r0, [r3, #0]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8004ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eda:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ede:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	f005 f8b5 	bl	800a050 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	881b      	ldrh	r3, [r3, #0]
 8004eec:	b29a      	uxth	r2, r3
 8004eee:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	823b      	strh	r3, [r7, #16]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	8a3a      	ldrh	r2, [r7, #16]
 8004efc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004f00:	b292      	uxth	r2, r2
 8004f02:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f006 fc83 	bl	800b810 <HAL_PCD_SetupStageCallback>
 8004f0a:	e242      	b.n	8005392 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004f0c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	f280 823e 	bge.w	8005392 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	881b      	ldrh	r3, [r3, #0]
 8004f1c:	b29a      	uxth	r2, r3
 8004f1e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004f22:	4013      	ands	r3, r2
 8004f24:	83bb      	strh	r3, [r7, #28]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	8bba      	ldrh	r2, [r7, #28]
 8004f2c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004f30:	b292      	uxth	r2, r2
 8004f32:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	461a      	mov	r2, r3
 8004f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	00db      	lsls	r3, r3, #3
 8004f46:	4413      	add	r3, r2
 8004f48:	3306      	adds	r3, #6
 8004f4a:	005b      	lsls	r3, r3, #1
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	6812      	ldr	r2, [r2, #0]
 8004f50:	4413      	add	r3, r2
 8004f52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f56:	881b      	ldrh	r3, [r3, #0]
 8004f58:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f62:	69db      	ldr	r3, [r3, #28]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d019      	beq.n	8004f9c <PCD_EP_ISR_Handler+0x1ee>
 8004f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6a:	695b      	ldr	r3, [r3, #20]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d015      	beq.n	8004f9c <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6818      	ldr	r0, [r3, #0]
 8004f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f76:	6959      	ldr	r1, [r3, #20]
 8004f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	f005 f865 	bl	800a050 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f88:	695a      	ldr	r2, [r3, #20]
 8004f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8c:	69db      	ldr	r3, [r3, #28]
 8004f8e:	441a      	add	r2, r3
 8004f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f92:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004f94:	2100      	movs	r1, #0
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f006 fc4c 	bl	800b834 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	881b      	ldrh	r3, [r3, #0]
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	f040 81f2 	bne.w	8005392 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	61bb      	str	r3, [r7, #24]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	4413      	add	r3, r2
 8004fc4:	61bb      	str	r3, [r7, #24]
 8004fc6:	69bb      	ldr	r3, [r7, #24]
 8004fc8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004fcc:	617b      	str	r3, [r7, #20]
 8004fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd0:	691b      	ldr	r3, [r3, #16]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d112      	bne.n	8004ffc <PCD_EP_ISR_Handler+0x24e>
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	881b      	ldrh	r3, [r3, #0]
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004fe0:	b29a      	uxth	r2, r3
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	801a      	strh	r2, [r3, #0]
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	881b      	ldrh	r3, [r3, #0]
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ff0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ff4:	b29a      	uxth	r2, r3
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	801a      	strh	r2, [r3, #0]
 8004ffa:	e02f      	b.n	800505c <PCD_EP_ISR_Handler+0x2ae>
 8004ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffe:	691b      	ldr	r3, [r3, #16]
 8005000:	2b3e      	cmp	r3, #62	; 0x3e
 8005002:	d813      	bhi.n	800502c <PCD_EP_ISR_Handler+0x27e>
 8005004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005006:	691b      	ldr	r3, [r3, #16]
 8005008:	085b      	lsrs	r3, r3, #1
 800500a:	633b      	str	r3, [r7, #48]	; 0x30
 800500c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500e:	691b      	ldr	r3, [r3, #16]
 8005010:	f003 0301 	and.w	r3, r3, #1
 8005014:	2b00      	cmp	r3, #0
 8005016:	d002      	beq.n	800501e <PCD_EP_ISR_Handler+0x270>
 8005018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800501a:	3301      	adds	r3, #1
 800501c:	633b      	str	r3, [r7, #48]	; 0x30
 800501e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005020:	b29b      	uxth	r3, r3
 8005022:	029b      	lsls	r3, r3, #10
 8005024:	b29a      	uxth	r2, r3
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	801a      	strh	r2, [r3, #0]
 800502a:	e017      	b.n	800505c <PCD_EP_ISR_Handler+0x2ae>
 800502c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	095b      	lsrs	r3, r3, #5
 8005032:	633b      	str	r3, [r7, #48]	; 0x30
 8005034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005036:	691b      	ldr	r3, [r3, #16]
 8005038:	f003 031f 	and.w	r3, r3, #31
 800503c:	2b00      	cmp	r3, #0
 800503e:	d102      	bne.n	8005046 <PCD_EP_ISR_Handler+0x298>
 8005040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005042:	3b01      	subs	r3, #1
 8005044:	633b      	str	r3, [r7, #48]	; 0x30
 8005046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005048:	b29b      	uxth	r3, r3
 800504a:	029b      	lsls	r3, r3, #10
 800504c:	b29b      	uxth	r3, r3
 800504e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005052:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005056:	b29a      	uxth	r2, r3
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	881b      	ldrh	r3, [r3, #0]
 8005062:	b29b      	uxth	r3, r3
 8005064:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005068:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800506c:	827b      	strh	r3, [r7, #18]
 800506e:	8a7b      	ldrh	r3, [r7, #18]
 8005070:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005074:	827b      	strh	r3, [r7, #18]
 8005076:	8a7b      	ldrh	r3, [r7, #18]
 8005078:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800507c:	827b      	strh	r3, [r7, #18]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	8a7b      	ldrh	r3, [r7, #18]
 8005084:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005088:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800508c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005090:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005094:	b29b      	uxth	r3, r3
 8005096:	8013      	strh	r3, [r2, #0]
 8005098:	e17b      	b.n	8005392 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	461a      	mov	r2, r3
 80050a0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	4413      	add	r3, r2
 80050a8:	881b      	ldrh	r3, [r3, #0]
 80050aa:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80050ac:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	f280 80ea 	bge.w	800528a <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	461a      	mov	r2, r3
 80050bc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	4413      	add	r3, r2
 80050c4:	881b      	ldrh	r3, [r3, #0]
 80050c6:	b29a      	uxth	r2, r3
 80050c8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80050cc:	4013      	ands	r3, r2
 80050ce:	853b      	strh	r3, [r7, #40]	; 0x28
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	461a      	mov	r2, r3
 80050d6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	4413      	add	r3, r2
 80050de:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80050e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80050e4:	b292      	uxth	r2, r2
 80050e6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80050e8:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80050ec:	4613      	mov	r3, r2
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	4413      	add	r3, r2
 80050f2:	00db      	lsls	r3, r3, #3
 80050f4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	4413      	add	r3, r2
 80050fc:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80050fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005100:	7b1b      	ldrb	r3, [r3, #12]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d122      	bne.n	800514c <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800510e:	b29b      	uxth	r3, r3
 8005110:	461a      	mov	r2, r3
 8005112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	00db      	lsls	r3, r3, #3
 8005118:	4413      	add	r3, r2
 800511a:	3306      	adds	r3, #6
 800511c:	005b      	lsls	r3, r3, #1
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	6812      	ldr	r2, [r2, #0]
 8005122:	4413      	add	r3, r2
 8005124:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005128:	881b      	ldrh	r3, [r3, #0]
 800512a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800512e:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8005130:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005132:	2b00      	cmp	r3, #0
 8005134:	f000 8087 	beq.w	8005246 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6818      	ldr	r0, [r3, #0]
 800513c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513e:	6959      	ldr	r1, [r3, #20]
 8005140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005142:	88da      	ldrh	r2, [r3, #6]
 8005144:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005146:	f004 ff83 	bl	800a050 <USB_ReadPMA>
 800514a:	e07c      	b.n	8005246 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800514c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514e:	78db      	ldrb	r3, [r3, #3]
 8005150:	2b02      	cmp	r3, #2
 8005152:	d108      	bne.n	8005166 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005154:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005156:	461a      	mov	r2, r3
 8005158:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 f927 	bl	80053ae <HAL_PCD_EP_DB_Receive>
 8005160:	4603      	mov	r3, r0
 8005162:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005164:	e06f      	b.n	8005246 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	461a      	mov	r2, r3
 800516c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	4413      	add	r3, r2
 8005174:	881b      	ldrh	r3, [r3, #0]
 8005176:	b29b      	uxth	r3, r3
 8005178:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800517c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005180:	847b      	strh	r3, [r7, #34]	; 0x22
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	461a      	mov	r2, r3
 8005188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518a:	781b      	ldrb	r3, [r3, #0]
 800518c:	009b      	lsls	r3, r3, #2
 800518e:	441a      	add	r2, r3
 8005190:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005192:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005196:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800519a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800519e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	461a      	mov	r2, r3
 80051ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	4413      	add	r3, r2
 80051b4:	881b      	ldrh	r3, [r3, #0]
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d021      	beq.n	8005204 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	461a      	mov	r2, r3
 80051cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	00db      	lsls	r3, r3, #3
 80051d2:	4413      	add	r3, r2
 80051d4:	3302      	adds	r3, #2
 80051d6:	005b      	lsls	r3, r3, #1
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	6812      	ldr	r2, [r2, #0]
 80051dc:	4413      	add	r3, r2
 80051de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051e2:	881b      	ldrh	r3, [r3, #0]
 80051e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051e8:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80051ea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d02a      	beq.n	8005246 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6818      	ldr	r0, [r3, #0]
 80051f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f6:	6959      	ldr	r1, [r3, #20]
 80051f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fa:	891a      	ldrh	r2, [r3, #8]
 80051fc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80051fe:	f004 ff27 	bl	800a050 <USB_ReadPMA>
 8005202:	e020      	b.n	8005246 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800520c:	b29b      	uxth	r3, r3
 800520e:	461a      	mov	r2, r3
 8005210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	00db      	lsls	r3, r3, #3
 8005216:	4413      	add	r3, r2
 8005218:	3306      	adds	r3, #6
 800521a:	005b      	lsls	r3, r3, #1
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	6812      	ldr	r2, [r2, #0]
 8005220:	4413      	add	r3, r2
 8005222:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005226:	881b      	ldrh	r3, [r3, #0]
 8005228:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800522c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800522e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005230:	2b00      	cmp	r3, #0
 8005232:	d008      	beq.n	8005246 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6818      	ldr	r0, [r3, #0]
 8005238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523a:	6959      	ldr	r1, [r3, #20]
 800523c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523e:	895a      	ldrh	r2, [r3, #10]
 8005240:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005242:	f004 ff05 	bl	800a050 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005248:	69da      	ldr	r2, [r3, #28]
 800524a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800524c:	441a      	add	r2, r3
 800524e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005250:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005254:	695a      	ldr	r2, [r3, #20]
 8005256:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005258:	441a      	add	r2, r3
 800525a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800525e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005260:	699b      	ldr	r3, [r3, #24]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d004      	beq.n	8005270 <PCD_EP_ISR_Handler+0x4c2>
 8005266:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	429a      	cmp	r2, r3
 800526e:	d206      	bcs.n	800527e <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	4619      	mov	r1, r3
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f006 fadc 	bl	800b834 <HAL_PCD_DataOutStageCallback>
 800527c:	e005      	b.n	800528a <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005284:	4618      	mov	r0, r3
 8005286:	f003 fa69 	bl	800875c <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800528a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800528c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005290:	2b00      	cmp	r3, #0
 8005292:	d07e      	beq.n	8005392 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8005294:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005298:	1c5a      	adds	r2, r3, #1
 800529a:	4613      	mov	r3, r2
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	4413      	add	r3, r2
 80052a0:	00db      	lsls	r3, r3, #3
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	4413      	add	r3, r2
 80052a6:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	461a      	mov	r2, r3
 80052ae:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	4413      	add	r3, r2
 80052b6:	881b      	ldrh	r3, [r3, #0]
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80052be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052c2:	843b      	strh	r3, [r7, #32]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	461a      	mov	r2, r3
 80052ca:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	441a      	add	r2, r3
 80052d2:	8c3b      	ldrh	r3, [r7, #32]
 80052d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052dc:	b29b      	uxth	r3, r3
 80052de:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80052e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e2:	78db      	ldrb	r3, [r3, #3]
 80052e4:	2b03      	cmp	r3, #3
 80052e6:	d00c      	beq.n	8005302 <PCD_EP_ISR_Handler+0x554>
 80052e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ea:	78db      	ldrb	r3, [r3, #3]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d008      	beq.n	8005302 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80052f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f2:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80052f4:	2b02      	cmp	r3, #2
 80052f6:	d146      	bne.n	8005386 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80052f8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80052fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d141      	bne.n	8005386 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800530a:	b29b      	uxth	r3, r3
 800530c:	461a      	mov	r2, r3
 800530e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	00db      	lsls	r3, r3, #3
 8005314:	4413      	add	r3, r2
 8005316:	3302      	adds	r3, #2
 8005318:	005b      	lsls	r3, r3, #1
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	6812      	ldr	r2, [r2, #0]
 800531e:	4413      	add	r3, r2
 8005320:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005324:	881b      	ldrh	r3, [r3, #0]
 8005326:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800532a:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800532c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532e:	699a      	ldr	r2, [r3, #24]
 8005330:	8bfb      	ldrh	r3, [r7, #30]
 8005332:	429a      	cmp	r2, r3
 8005334:	d906      	bls.n	8005344 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8005336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005338:	699a      	ldr	r2, [r3, #24]
 800533a:	8bfb      	ldrh	r3, [r7, #30]
 800533c:	1ad2      	subs	r2, r2, r3
 800533e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005340:	619a      	str	r2, [r3, #24]
 8005342:	e002      	b.n	800534a <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8005344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005346:	2200      	movs	r2, #0
 8005348:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800534a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534c:	699b      	ldr	r3, [r3, #24]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d106      	bne.n	8005360 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	4619      	mov	r1, r3
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f006 fa86 	bl	800b86a <HAL_PCD_DataInStageCallback>
 800535e:	e018      	b.n	8005392 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8005360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005362:	695a      	ldr	r2, [r3, #20]
 8005364:	8bfb      	ldrh	r3, [r7, #30]
 8005366:	441a      	add	r2, r3
 8005368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536a:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800536c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536e:	69da      	ldr	r2, [r3, #28]
 8005370:	8bfb      	ldrh	r3, [r7, #30]
 8005372:	441a      	add	r2, r3
 8005374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005376:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800537e:	4618      	mov	r0, r3
 8005380:	f003 f9ec 	bl	800875c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8005384:	e005      	b.n	8005392 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005386:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005388:	461a      	mov	r2, r3
 800538a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f000 f91b 	bl	80055c8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800539a:	b29b      	uxth	r3, r3
 800539c:	b21b      	sxth	r3, r3
 800539e:	2b00      	cmp	r3, #0
 80053a0:	f6ff ad0a 	blt.w	8004db8 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80053a4:	2300      	movs	r3, #0
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3738      	adds	r7, #56	; 0x38
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}

080053ae <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80053ae:	b580      	push	{r7, lr}
 80053b0:	b088      	sub	sp, #32
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	60f8      	str	r0, [r7, #12]
 80053b6:	60b9      	str	r1, [r7, #8]
 80053b8:	4613      	mov	r3, r2
 80053ba:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80053bc:	88fb      	ldrh	r3, [r7, #6]
 80053be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d07e      	beq.n	80054c4 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	461a      	mov	r2, r3
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	00db      	lsls	r3, r3, #3
 80053d8:	4413      	add	r3, r2
 80053da:	3302      	adds	r3, #2
 80053dc:	005b      	lsls	r3, r3, #1
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	6812      	ldr	r2, [r2, #0]
 80053e2:	4413      	add	r3, r2
 80053e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053e8:	881b      	ldrh	r3, [r3, #0]
 80053ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053ee:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	699a      	ldr	r2, [r3, #24]
 80053f4:	8b7b      	ldrh	r3, [r7, #26]
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d306      	bcc.n	8005408 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	699a      	ldr	r2, [r3, #24]
 80053fe:	8b7b      	ldrh	r3, [r7, #26]
 8005400:	1ad2      	subs	r2, r2, r3
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	619a      	str	r2, [r3, #24]
 8005406:	e002      	b.n	800540e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	2200      	movs	r2, #0
 800540c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	699b      	ldr	r3, [r3, #24]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d123      	bne.n	800545e <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	461a      	mov	r2, r3
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	4413      	add	r3, r2
 8005424:	881b      	ldrh	r3, [r3, #0]
 8005426:	b29b      	uxth	r3, r3
 8005428:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800542c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005430:	833b      	strh	r3, [r7, #24]
 8005432:	8b3b      	ldrh	r3, [r7, #24]
 8005434:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005438:	833b      	strh	r3, [r7, #24]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	461a      	mov	r2, r3
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	441a      	add	r2, r3
 8005448:	8b3b      	ldrh	r3, [r7, #24]
 800544a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800544e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005452:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005456:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800545a:	b29b      	uxth	r3, r3
 800545c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800545e:	88fb      	ldrh	r3, [r7, #6]
 8005460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005464:	2b00      	cmp	r3, #0
 8005466:	d01f      	beq.n	80054a8 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	461a      	mov	r2, r3
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	4413      	add	r3, r2
 8005476:	881b      	ldrh	r3, [r3, #0]
 8005478:	b29b      	uxth	r3, r3
 800547a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800547e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005482:	82fb      	strh	r3, [r7, #22]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	461a      	mov	r2, r3
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	441a      	add	r2, r3
 8005492:	8afb      	ldrh	r3, [r7, #22]
 8005494:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005498:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800549c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054a0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80054a8:	8b7b      	ldrh	r3, [r7, #26]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	f000 8087 	beq.w	80055be <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6818      	ldr	r0, [r3, #0]
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	6959      	ldr	r1, [r3, #20]
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	891a      	ldrh	r2, [r3, #8]
 80054bc:	8b7b      	ldrh	r3, [r7, #26]
 80054be:	f004 fdc7 	bl	800a050 <USB_ReadPMA>
 80054c2:	e07c      	b.n	80055be <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	461a      	mov	r2, r3
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	00db      	lsls	r3, r3, #3
 80054d6:	4413      	add	r3, r2
 80054d8:	3306      	adds	r3, #6
 80054da:	005b      	lsls	r3, r3, #1
 80054dc:	68fa      	ldr	r2, [r7, #12]
 80054de:	6812      	ldr	r2, [r2, #0]
 80054e0:	4413      	add	r3, r2
 80054e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054e6:	881b      	ldrh	r3, [r3, #0]
 80054e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054ec:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	699a      	ldr	r2, [r3, #24]
 80054f2:	8b7b      	ldrh	r3, [r7, #26]
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d306      	bcc.n	8005506 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	699a      	ldr	r2, [r3, #24]
 80054fc:	8b7b      	ldrh	r3, [r7, #26]
 80054fe:	1ad2      	subs	r2, r2, r3
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	619a      	str	r2, [r3, #24]
 8005504:	e002      	b.n	800550c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	2200      	movs	r2, #0
 800550a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	699b      	ldr	r3, [r3, #24]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d123      	bne.n	800555c <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	461a      	mov	r2, r3
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	4413      	add	r3, r2
 8005522:	881b      	ldrh	r3, [r3, #0]
 8005524:	b29b      	uxth	r3, r3
 8005526:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800552a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800552e:	83fb      	strh	r3, [r7, #30]
 8005530:	8bfb      	ldrh	r3, [r7, #30]
 8005532:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005536:	83fb      	strh	r3, [r7, #30]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	461a      	mov	r2, r3
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	441a      	add	r2, r3
 8005546:	8bfb      	ldrh	r3, [r7, #30]
 8005548:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800554c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005550:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005554:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005558:	b29b      	uxth	r3, r3
 800555a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800555c:	88fb      	ldrh	r3, [r7, #6]
 800555e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005562:	2b00      	cmp	r3, #0
 8005564:	d11f      	bne.n	80055a6 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	461a      	mov	r2, r3
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	4413      	add	r3, r2
 8005574:	881b      	ldrh	r3, [r3, #0]
 8005576:	b29b      	uxth	r3, r3
 8005578:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800557c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005580:	83bb      	strh	r3, [r7, #28]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	461a      	mov	r2, r3
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	441a      	add	r2, r3
 8005590:	8bbb      	ldrh	r3, [r7, #28]
 8005592:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005596:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800559a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800559e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80055a6:	8b7b      	ldrh	r3, [r7, #26]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d008      	beq.n	80055be <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6818      	ldr	r0, [r3, #0]
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	6959      	ldr	r1, [r3, #20]
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	895a      	ldrh	r2, [r3, #10]
 80055b8:	8b7b      	ldrh	r3, [r7, #26]
 80055ba:	f004 fd49 	bl	800a050 <USB_ReadPMA>
    }
  }

  return count;
 80055be:	8b7b      	ldrh	r3, [r7, #26]
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3720      	adds	r7, #32
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b0a2      	sub	sp, #136	; 0x88
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	60b9      	str	r1, [r7, #8]
 80055d2:	4613      	mov	r3, r2
 80055d4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80055d6:	88fb      	ldrh	r3, [r7, #6]
 80055d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055dc:	2b00      	cmp	r3, #0
 80055de:	f000 81c7 	beq.w	8005970 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	461a      	mov	r2, r3
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	00db      	lsls	r3, r3, #3
 80055f4:	4413      	add	r3, r2
 80055f6:	3302      	adds	r3, #2
 80055f8:	005b      	lsls	r3, r3, #1
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	6812      	ldr	r2, [r2, #0]
 80055fe:	4413      	add	r3, r2
 8005600:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005604:	881b      	ldrh	r3, [r3, #0]
 8005606:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800560a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	699a      	ldr	r2, [r3, #24]
 8005612:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005616:	429a      	cmp	r2, r3
 8005618:	d907      	bls.n	800562a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	699a      	ldr	r2, [r3, #24]
 800561e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005622:	1ad2      	subs	r2, r2, r3
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	619a      	str	r2, [r3, #24]
 8005628:	e002      	b.n	8005630 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	2200      	movs	r2, #0
 800562e:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	699b      	ldr	r3, [r3, #24]
 8005634:	2b00      	cmp	r3, #0
 8005636:	f040 80b9 	bne.w	80057ac <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	785b      	ldrb	r3, [r3, #1]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d126      	bne.n	8005690 <HAL_PCD_EP_DB_Transmit+0xc8>
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	62bb      	str	r3, [r7, #40]	; 0x28
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005650:	b29b      	uxth	r3, r3
 8005652:	461a      	mov	r2, r3
 8005654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005656:	4413      	add	r3, r2
 8005658:	62bb      	str	r3, [r7, #40]	; 0x28
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	781b      	ldrb	r3, [r3, #0]
 800565e:	011a      	lsls	r2, r3, #4
 8005660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005662:	4413      	add	r3, r2
 8005664:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005668:	627b      	str	r3, [r7, #36]	; 0x24
 800566a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566c:	881b      	ldrh	r3, [r3, #0]
 800566e:	b29b      	uxth	r3, r3
 8005670:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005674:	b29a      	uxth	r2, r3
 8005676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005678:	801a      	strh	r2, [r3, #0]
 800567a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567c:	881b      	ldrh	r3, [r3, #0]
 800567e:	b29b      	uxth	r3, r3
 8005680:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005684:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005688:	b29a      	uxth	r2, r3
 800568a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568c:	801a      	strh	r2, [r3, #0]
 800568e:	e01a      	b.n	80056c6 <HAL_PCD_EP_DB_Transmit+0xfe>
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	785b      	ldrb	r3, [r3, #1]
 8005694:	2b01      	cmp	r3, #1
 8005696:	d116      	bne.n	80056c6 <HAL_PCD_EP_DB_Transmit+0xfe>
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	633b      	str	r3, [r7, #48]	; 0x30
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	461a      	mov	r2, r3
 80056aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ac:	4413      	add	r3, r2
 80056ae:	633b      	str	r3, [r7, #48]	; 0x30
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	011a      	lsls	r2, r3, #4
 80056b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b8:	4413      	add	r3, r2
 80056ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80056be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c2:	2200      	movs	r2, #0
 80056c4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	623b      	str	r3, [r7, #32]
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	785b      	ldrb	r3, [r3, #1]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d126      	bne.n	8005722 <HAL_PCD_EP_DB_Transmit+0x15a>
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	61bb      	str	r3, [r7, #24]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	461a      	mov	r2, r3
 80056e6:	69bb      	ldr	r3, [r7, #24]
 80056e8:	4413      	add	r3, r2
 80056ea:	61bb      	str	r3, [r7, #24]
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	781b      	ldrb	r3, [r3, #0]
 80056f0:	011a      	lsls	r2, r3, #4
 80056f2:	69bb      	ldr	r3, [r7, #24]
 80056f4:	4413      	add	r3, r2
 80056f6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80056fa:	617b      	str	r3, [r7, #20]
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	881b      	ldrh	r3, [r3, #0]
 8005700:	b29b      	uxth	r3, r3
 8005702:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005706:	b29a      	uxth	r2, r3
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	801a      	strh	r2, [r3, #0]
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	881b      	ldrh	r3, [r3, #0]
 8005710:	b29b      	uxth	r3, r3
 8005712:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005716:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800571a:	b29a      	uxth	r2, r3
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	801a      	strh	r2, [r3, #0]
 8005720:	e017      	b.n	8005752 <HAL_PCD_EP_DB_Transmit+0x18a>
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	785b      	ldrb	r3, [r3, #1]
 8005726:	2b01      	cmp	r3, #1
 8005728:	d113      	bne.n	8005752 <HAL_PCD_EP_DB_Transmit+0x18a>
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005732:	b29b      	uxth	r3, r3
 8005734:	461a      	mov	r2, r3
 8005736:	6a3b      	ldr	r3, [r7, #32]
 8005738:	4413      	add	r3, r2
 800573a:	623b      	str	r3, [r7, #32]
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	011a      	lsls	r2, r3, #4
 8005742:	6a3b      	ldr	r3, [r7, #32]
 8005744:	4413      	add	r3, r2
 8005746:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800574a:	61fb      	str	r3, [r7, #28]
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	2200      	movs	r2, #0
 8005750:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	4619      	mov	r1, r3
 8005758:	68f8      	ldr	r0, [r7, #12]
 800575a:	f006 f886 	bl	800b86a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800575e:	88fb      	ldrh	r3, [r7, #6]
 8005760:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005764:	2b00      	cmp	r3, #0
 8005766:	f000 82d4 	beq.w	8005d12 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	461a      	mov	r2, r3
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	4413      	add	r3, r2
 8005778:	881b      	ldrh	r3, [r3, #0]
 800577a:	b29b      	uxth	r3, r3
 800577c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005780:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005784:	827b      	strh	r3, [r7, #18]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	461a      	mov	r2, r3
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	009b      	lsls	r3, r3, #2
 8005792:	441a      	add	r2, r3
 8005794:	8a7b      	ldrh	r3, [r7, #18]
 8005796:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800579a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800579e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80057a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	8013      	strh	r3, [r2, #0]
 80057aa:	e2b2      	b.n	8005d12 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80057ac:	88fb      	ldrh	r3, [r7, #6]
 80057ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d021      	beq.n	80057fa <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	461a      	mov	r2, r3
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	009b      	lsls	r3, r3, #2
 80057c2:	4413      	add	r3, r2
 80057c4:	881b      	ldrh	r3, [r3, #0]
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057d0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	461a      	mov	r2, r3
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	781b      	ldrb	r3, [r3, #0]
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	441a      	add	r2, r3
 80057e2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80057e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80057f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005800:	2b01      	cmp	r3, #1
 8005802:	f040 8286 	bne.w	8005d12 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	695a      	ldr	r2, [r3, #20]
 800580a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800580e:	441a      	add	r2, r3
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	69da      	ldr	r2, [r3, #28]
 8005818:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800581c:	441a      	add	r2, r3
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	6a1a      	ldr	r2, [r3, #32]
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	691b      	ldr	r3, [r3, #16]
 800582a:	429a      	cmp	r2, r3
 800582c:	d309      	bcc.n	8005842 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	691b      	ldr	r3, [r3, #16]
 8005832:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	6a1a      	ldr	r2, [r3, #32]
 8005838:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800583a:	1ad2      	subs	r2, r2, r3
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	621a      	str	r2, [r3, #32]
 8005840:	e015      	b.n	800586e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	6a1b      	ldr	r3, [r3, #32]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d107      	bne.n	800585a <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 800584a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800584e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	2200      	movs	r2, #0
 8005854:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005858:	e009      	b.n	800586e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	2200      	movs	r2, #0
 800585e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	6a1b      	ldr	r3, [r3, #32]
 8005866:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	2200      	movs	r2, #0
 800586c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	785b      	ldrb	r3, [r3, #1]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d155      	bne.n	8005922 <HAL_PCD_EP_DB_Transmit+0x35a>
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	63bb      	str	r3, [r7, #56]	; 0x38
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005884:	b29b      	uxth	r3, r3
 8005886:	461a      	mov	r2, r3
 8005888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800588a:	4413      	add	r3, r2
 800588c:	63bb      	str	r3, [r7, #56]	; 0x38
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	781b      	ldrb	r3, [r3, #0]
 8005892:	011a      	lsls	r2, r3, #4
 8005894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005896:	4413      	add	r3, r2
 8005898:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800589c:	637b      	str	r3, [r7, #52]	; 0x34
 800589e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d112      	bne.n	80058ca <HAL_PCD_EP_DB_Transmit+0x302>
 80058a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058a6:	881b      	ldrh	r3, [r3, #0]
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80058ae:	b29a      	uxth	r2, r3
 80058b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058b2:	801a      	strh	r2, [r3, #0]
 80058b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058b6:	881b      	ldrh	r3, [r3, #0]
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058c2:	b29a      	uxth	r2, r3
 80058c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058c6:	801a      	strh	r2, [r3, #0]
 80058c8:	e047      	b.n	800595a <HAL_PCD_EP_DB_Transmit+0x392>
 80058ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058cc:	2b3e      	cmp	r3, #62	; 0x3e
 80058ce:	d811      	bhi.n	80058f4 <HAL_PCD_EP_DB_Transmit+0x32c>
 80058d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058d2:	085b      	lsrs	r3, r3, #1
 80058d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80058d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058d8:	f003 0301 	and.w	r3, r3, #1
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d002      	beq.n	80058e6 <HAL_PCD_EP_DB_Transmit+0x31e>
 80058e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058e2:	3301      	adds	r3, #1
 80058e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80058e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	029b      	lsls	r3, r3, #10
 80058ec:	b29a      	uxth	r2, r3
 80058ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058f0:	801a      	strh	r2, [r3, #0]
 80058f2:	e032      	b.n	800595a <HAL_PCD_EP_DB_Transmit+0x392>
 80058f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058f6:	095b      	lsrs	r3, r3, #5
 80058f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80058fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058fc:	f003 031f 	and.w	r3, r3, #31
 8005900:	2b00      	cmp	r3, #0
 8005902:	d102      	bne.n	800590a <HAL_PCD_EP_DB_Transmit+0x342>
 8005904:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005906:	3b01      	subs	r3, #1
 8005908:	64bb      	str	r3, [r7, #72]	; 0x48
 800590a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800590c:	b29b      	uxth	r3, r3
 800590e:	029b      	lsls	r3, r3, #10
 8005910:	b29b      	uxth	r3, r3
 8005912:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005916:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800591a:	b29a      	uxth	r2, r3
 800591c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800591e:	801a      	strh	r2, [r3, #0]
 8005920:	e01b      	b.n	800595a <HAL_PCD_EP_DB_Transmit+0x392>
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	785b      	ldrb	r3, [r3, #1]
 8005926:	2b01      	cmp	r3, #1
 8005928:	d117      	bne.n	800595a <HAL_PCD_EP_DB_Transmit+0x392>
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	643b      	str	r3, [r7, #64]	; 0x40
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005938:	b29b      	uxth	r3, r3
 800593a:	461a      	mov	r2, r3
 800593c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800593e:	4413      	add	r3, r2
 8005940:	643b      	str	r3, [r7, #64]	; 0x40
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	011a      	lsls	r2, r3, #4
 8005948:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800594a:	4413      	add	r3, r2
 800594c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005950:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005952:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005954:	b29a      	uxth	r2, r3
 8005956:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005958:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	6818      	ldr	r0, [r3, #0]
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	6959      	ldr	r1, [r3, #20]
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	891a      	ldrh	r2, [r3, #8]
 8005966:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005968:	b29b      	uxth	r3, r3
 800596a:	f004 fb2c 	bl	8009fc6 <USB_WritePMA>
 800596e:	e1d0      	b.n	8005d12 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005978:	b29b      	uxth	r3, r3
 800597a:	461a      	mov	r2, r3
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	00db      	lsls	r3, r3, #3
 8005982:	4413      	add	r3, r2
 8005984:	3306      	adds	r3, #6
 8005986:	005b      	lsls	r3, r3, #1
 8005988:	68fa      	ldr	r2, [r7, #12]
 800598a:	6812      	ldr	r2, [r2, #0]
 800598c:	4413      	add	r3, r2
 800598e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005992:	881b      	ldrh	r3, [r3, #0]
 8005994:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005998:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	699a      	ldr	r2, [r3, #24]
 80059a0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d307      	bcc.n	80059b8 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	699a      	ldr	r2, [r3, #24]
 80059ac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80059b0:	1ad2      	subs	r2, r2, r3
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	619a      	str	r2, [r3, #24]
 80059b6:	e002      	b.n	80059be <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	2200      	movs	r2, #0
 80059bc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	699b      	ldr	r3, [r3, #24]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	f040 80c4 	bne.w	8005b50 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	785b      	ldrb	r3, [r3, #1]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d126      	bne.n	8005a1e <HAL_PCD_EP_DB_Transmit+0x456>
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059de:	b29b      	uxth	r3, r3
 80059e0:	461a      	mov	r2, r3
 80059e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059e4:	4413      	add	r3, r2
 80059e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	011a      	lsls	r2, r3, #4
 80059ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059f0:	4413      	add	r3, r2
 80059f2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80059f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80059f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80059fa:	881b      	ldrh	r3, [r3, #0]
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a02:	b29a      	uxth	r2, r3
 8005a04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a06:	801a      	strh	r2, [r3, #0]
 8005a08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a0a:	881b      	ldrh	r3, [r3, #0]
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a16:	b29a      	uxth	r2, r3
 8005a18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a1a:	801a      	strh	r2, [r3, #0]
 8005a1c:	e01a      	b.n	8005a54 <HAL_PCD_EP_DB_Transmit+0x48c>
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	785b      	ldrb	r3, [r3, #1]
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d116      	bne.n	8005a54 <HAL_PCD_EP_DB_Transmit+0x48c>
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	677b      	str	r3, [r7, #116]	; 0x74
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	461a      	mov	r2, r3
 8005a38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a3a:	4413      	add	r3, r2
 8005a3c:	677b      	str	r3, [r7, #116]	; 0x74
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	011a      	lsls	r2, r3, #4
 8005a44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a46:	4413      	add	r3, r2
 8005a48:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a4c:	673b      	str	r3, [r7, #112]	; 0x70
 8005a4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a50:	2200      	movs	r2, #0
 8005a52:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	67bb      	str	r3, [r7, #120]	; 0x78
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	785b      	ldrb	r3, [r3, #1]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d12f      	bne.n	8005ac2 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	461a      	mov	r2, r3
 8005a76:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005a7a:	4413      	add	r3, r2
 8005a7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	011a      	lsls	r2, r3, #4
 8005a86:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005a8a:	4413      	add	r3, r2
 8005a8c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005a94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a98:	881b      	ldrh	r3, [r3, #0]
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005aa0:	b29a      	uxth	r2, r3
 8005aa2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005aa6:	801a      	strh	r2, [r3, #0]
 8005aa8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005aac:	881b      	ldrh	r3, [r3, #0]
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ab4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ab8:	b29a      	uxth	r2, r3
 8005aba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005abe:	801a      	strh	r2, [r3, #0]
 8005ac0:	e017      	b.n	8005af2 <HAL_PCD_EP_DB_Transmit+0x52a>
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	785b      	ldrb	r3, [r3, #1]
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d113      	bne.n	8005af2 <HAL_PCD_EP_DB_Transmit+0x52a>
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ad8:	4413      	add	r3, r2
 8005ada:	67bb      	str	r3, [r7, #120]	; 0x78
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	011a      	lsls	r2, r3, #4
 8005ae2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ae4:	4413      	add	r3, r2
 8005ae6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005aea:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005aec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005aee:	2200      	movs	r2, #0
 8005af0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	781b      	ldrb	r3, [r3, #0]
 8005af6:	4619      	mov	r1, r3
 8005af8:	68f8      	ldr	r0, [r7, #12]
 8005afa:	f005 feb6 	bl	800b86a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005afe:	88fb      	ldrh	r3, [r7, #6]
 8005b00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	f040 8104 	bne.w	8005d12 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	461a      	mov	r2, r3
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	4413      	add	r3, r2
 8005b18:	881b      	ldrh	r3, [r3, #0]
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b24:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	781b      	ldrb	r3, [r3, #0]
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	441a      	add	r2, r3
 8005b36:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005b3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b42:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	8013      	strh	r3, [r2, #0]
 8005b4e:	e0e0      	b.n	8005d12 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005b50:	88fb      	ldrh	r3, [r7, #6]
 8005b52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d121      	bne.n	8005b9e <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	461a      	mov	r2, r3
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	4413      	add	r3, r2
 8005b68:	881b      	ldrh	r3, [r3, #0]
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b74:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	781b      	ldrb	r3, [r3, #0]
 8005b82:	009b      	lsls	r3, r3, #2
 8005b84:	441a      	add	r2, r3
 8005b86:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005b8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	f040 80b4 	bne.w	8005d12 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	695a      	ldr	r2, [r3, #20]
 8005bae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005bb2:	441a      	add	r2, r3
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	69da      	ldr	r2, [r3, #28]
 8005bbc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005bc0:	441a      	add	r2, r3
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	6a1a      	ldr	r2, [r3, #32]
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	691b      	ldr	r3, [r3, #16]
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d309      	bcc.n	8005be6 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	6a1a      	ldr	r2, [r3, #32]
 8005bdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bde:	1ad2      	subs	r2, r2, r3
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	621a      	str	r2, [r3, #32]
 8005be4:	e015      	b.n	8005c12 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	6a1b      	ldr	r3, [r3, #32]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d107      	bne.n	8005bfe <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8005bee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005bf2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005bfc:	e009      	b.n	8005c12 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	6a1b      	ldr	r3, [r3, #32]
 8005c02:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	2200      	movs	r2, #0
 8005c08:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	667b      	str	r3, [r7, #100]	; 0x64
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	785b      	ldrb	r3, [r3, #1]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d155      	bne.n	8005ccc <HAL_PCD_EP_DB_Transmit+0x704>
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	461a      	mov	r2, r3
 8005c32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c34:	4413      	add	r3, r2
 8005c36:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	011a      	lsls	r2, r3, #4
 8005c3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c40:	4413      	add	r3, r2
 8005c42:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c46:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d112      	bne.n	8005c74 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8005c4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c50:	881b      	ldrh	r3, [r3, #0]
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c58:	b29a      	uxth	r2, r3
 8005c5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c5c:	801a      	strh	r2, [r3, #0]
 8005c5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c60:	881b      	ldrh	r3, [r3, #0]
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c6c:	b29a      	uxth	r2, r3
 8005c6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c70:	801a      	strh	r2, [r3, #0]
 8005c72:	e044      	b.n	8005cfe <HAL_PCD_EP_DB_Transmit+0x736>
 8005c74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c76:	2b3e      	cmp	r3, #62	; 0x3e
 8005c78:	d811      	bhi.n	8005c9e <HAL_PCD_EP_DB_Transmit+0x6d6>
 8005c7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c7c:	085b      	lsrs	r3, r3, #1
 8005c7e:	657b      	str	r3, [r7, #84]	; 0x54
 8005c80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c82:	f003 0301 	and.w	r3, r3, #1
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d002      	beq.n	8005c90 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8005c8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c8c:	3301      	adds	r3, #1
 8005c8e:	657b      	str	r3, [r7, #84]	; 0x54
 8005c90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	029b      	lsls	r3, r3, #10
 8005c96:	b29a      	uxth	r2, r3
 8005c98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c9a:	801a      	strh	r2, [r3, #0]
 8005c9c:	e02f      	b.n	8005cfe <HAL_PCD_EP_DB_Transmit+0x736>
 8005c9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ca0:	095b      	lsrs	r3, r3, #5
 8005ca2:	657b      	str	r3, [r7, #84]	; 0x54
 8005ca4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ca6:	f003 031f 	and.w	r3, r3, #31
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d102      	bne.n	8005cb4 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8005cae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cb0:	3b01      	subs	r3, #1
 8005cb2:	657b      	str	r3, [r7, #84]	; 0x54
 8005cb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	029b      	lsls	r3, r3, #10
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cc4:	b29a      	uxth	r2, r3
 8005cc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005cc8:	801a      	strh	r2, [r3, #0]
 8005cca:	e018      	b.n	8005cfe <HAL_PCD_EP_DB_Transmit+0x736>
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	785b      	ldrb	r3, [r3, #1]
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d114      	bne.n	8005cfe <HAL_PCD_EP_DB_Transmit+0x736>
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	461a      	mov	r2, r3
 8005ce0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ce2:	4413      	add	r3, r2
 8005ce4:	667b      	str	r3, [r7, #100]	; 0x64
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	011a      	lsls	r2, r3, #4
 8005cec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cee:	4413      	add	r3, r2
 8005cf0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005cf4:	663b      	str	r3, [r7, #96]	; 0x60
 8005cf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cf8:	b29a      	uxth	r2, r3
 8005cfa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005cfc:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	6818      	ldr	r0, [r3, #0]
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	6959      	ldr	r1, [r3, #20]
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	895a      	ldrh	r2, [r3, #10]
 8005d0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	f004 f95a 	bl	8009fc6 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	461a      	mov	r2, r3
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	4413      	add	r3, r2
 8005d20:	881b      	ldrh	r3, [r3, #0]
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d2c:	823b      	strh	r3, [r7, #16]
 8005d2e:	8a3b      	ldrh	r3, [r7, #16]
 8005d30:	f083 0310 	eor.w	r3, r3, #16
 8005d34:	823b      	strh	r3, [r7, #16]
 8005d36:	8a3b      	ldrh	r3, [r7, #16]
 8005d38:	f083 0320 	eor.w	r3, r3, #32
 8005d3c:	823b      	strh	r3, [r7, #16]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	461a      	mov	r2, r3
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	009b      	lsls	r3, r3, #2
 8005d4a:	441a      	add	r2, r3
 8005d4c:	8a3b      	ldrh	r3, [r7, #16]
 8005d4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005d62:	2300      	movs	r3, #0
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	3788      	adds	r7, #136	; 0x88
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}

08005d6c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b087      	sub	sp, #28
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	60f8      	str	r0, [r7, #12]
 8005d74:	607b      	str	r3, [r7, #4]
 8005d76:	460b      	mov	r3, r1
 8005d78:	817b      	strh	r3, [r7, #10]
 8005d7a:	4613      	mov	r3, r2
 8005d7c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005d7e:	897b      	ldrh	r3, [r7, #10]
 8005d80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d00b      	beq.n	8005da2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d8a:	897b      	ldrh	r3, [r7, #10]
 8005d8c:	f003 0307 	and.w	r3, r3, #7
 8005d90:	1c5a      	adds	r2, r3, #1
 8005d92:	4613      	mov	r3, r2
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	4413      	add	r3, r2
 8005d98:	00db      	lsls	r3, r3, #3
 8005d9a:	68fa      	ldr	r2, [r7, #12]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	617b      	str	r3, [r7, #20]
 8005da0:	e009      	b.n	8005db6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005da2:	897a      	ldrh	r2, [r7, #10]
 8005da4:	4613      	mov	r3, r2
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	4413      	add	r3, r2
 8005daa:	00db      	lsls	r3, r3, #3
 8005dac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005db0:	68fa      	ldr	r2, [r7, #12]
 8005db2:	4413      	add	r3, r2
 8005db4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005db6:	893b      	ldrh	r3, [r7, #8]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d107      	bne.n	8005dcc <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	b29a      	uxth	r2, r3
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	80da      	strh	r2, [r3, #6]
 8005dca:	e00b      	b.n	8005de4 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	b29a      	uxth	r2, r3
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	0c1b      	lsrs	r3, r3, #16
 8005dde:	b29a      	uxth	r2, r3
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8005de4:	2300      	movs	r3, #0
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	371c      	adds	r7, #28
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bc80      	pop	{r7}
 8005dee:	4770      	bx	lr

08005df0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b086      	sub	sp, #24
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d101      	bne.n	8005e02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e26c      	b.n	80062dc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f003 0301 	and.w	r3, r3, #1
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	f000 8087 	beq.w	8005f1e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005e10:	4b92      	ldr	r3, [pc, #584]	; (800605c <HAL_RCC_OscConfig+0x26c>)
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	f003 030c 	and.w	r3, r3, #12
 8005e18:	2b04      	cmp	r3, #4
 8005e1a:	d00c      	beq.n	8005e36 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005e1c:	4b8f      	ldr	r3, [pc, #572]	; (800605c <HAL_RCC_OscConfig+0x26c>)
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	f003 030c 	and.w	r3, r3, #12
 8005e24:	2b08      	cmp	r3, #8
 8005e26:	d112      	bne.n	8005e4e <HAL_RCC_OscConfig+0x5e>
 8005e28:	4b8c      	ldr	r3, [pc, #560]	; (800605c <HAL_RCC_OscConfig+0x26c>)
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e34:	d10b      	bne.n	8005e4e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e36:	4b89      	ldr	r3, [pc, #548]	; (800605c <HAL_RCC_OscConfig+0x26c>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d06c      	beq.n	8005f1c <HAL_RCC_OscConfig+0x12c>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d168      	bne.n	8005f1c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e246      	b.n	80062dc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e56:	d106      	bne.n	8005e66 <HAL_RCC_OscConfig+0x76>
 8005e58:	4b80      	ldr	r3, [pc, #512]	; (800605c <HAL_RCC_OscConfig+0x26c>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a7f      	ldr	r2, [pc, #508]	; (800605c <HAL_RCC_OscConfig+0x26c>)
 8005e5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e62:	6013      	str	r3, [r2, #0]
 8005e64:	e02e      	b.n	8005ec4 <HAL_RCC_OscConfig+0xd4>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d10c      	bne.n	8005e88 <HAL_RCC_OscConfig+0x98>
 8005e6e:	4b7b      	ldr	r3, [pc, #492]	; (800605c <HAL_RCC_OscConfig+0x26c>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a7a      	ldr	r2, [pc, #488]	; (800605c <HAL_RCC_OscConfig+0x26c>)
 8005e74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e78:	6013      	str	r3, [r2, #0]
 8005e7a:	4b78      	ldr	r3, [pc, #480]	; (800605c <HAL_RCC_OscConfig+0x26c>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a77      	ldr	r2, [pc, #476]	; (800605c <HAL_RCC_OscConfig+0x26c>)
 8005e80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e84:	6013      	str	r3, [r2, #0]
 8005e86:	e01d      	b.n	8005ec4 <HAL_RCC_OscConfig+0xd4>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e90:	d10c      	bne.n	8005eac <HAL_RCC_OscConfig+0xbc>
 8005e92:	4b72      	ldr	r3, [pc, #456]	; (800605c <HAL_RCC_OscConfig+0x26c>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a71      	ldr	r2, [pc, #452]	; (800605c <HAL_RCC_OscConfig+0x26c>)
 8005e98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e9c:	6013      	str	r3, [r2, #0]
 8005e9e:	4b6f      	ldr	r3, [pc, #444]	; (800605c <HAL_RCC_OscConfig+0x26c>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a6e      	ldr	r2, [pc, #440]	; (800605c <HAL_RCC_OscConfig+0x26c>)
 8005ea4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ea8:	6013      	str	r3, [r2, #0]
 8005eaa:	e00b      	b.n	8005ec4 <HAL_RCC_OscConfig+0xd4>
 8005eac:	4b6b      	ldr	r3, [pc, #428]	; (800605c <HAL_RCC_OscConfig+0x26c>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a6a      	ldr	r2, [pc, #424]	; (800605c <HAL_RCC_OscConfig+0x26c>)
 8005eb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005eb6:	6013      	str	r3, [r2, #0]
 8005eb8:	4b68      	ldr	r3, [pc, #416]	; (800605c <HAL_RCC_OscConfig+0x26c>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a67      	ldr	r2, [pc, #412]	; (800605c <HAL_RCC_OscConfig+0x26c>)
 8005ebe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ec2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d013      	beq.n	8005ef4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ecc:	f7fc fa3a 	bl	8002344 <HAL_GetTick>
 8005ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ed2:	e008      	b.n	8005ee6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ed4:	f7fc fa36 	bl	8002344 <HAL_GetTick>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	1ad3      	subs	r3, r2, r3
 8005ede:	2b64      	cmp	r3, #100	; 0x64
 8005ee0:	d901      	bls.n	8005ee6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005ee2:	2303      	movs	r3, #3
 8005ee4:	e1fa      	b.n	80062dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ee6:	4b5d      	ldr	r3, [pc, #372]	; (800605c <HAL_RCC_OscConfig+0x26c>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d0f0      	beq.n	8005ed4 <HAL_RCC_OscConfig+0xe4>
 8005ef2:	e014      	b.n	8005f1e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ef4:	f7fc fa26 	bl	8002344 <HAL_GetTick>
 8005ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005efa:	e008      	b.n	8005f0e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005efc:	f7fc fa22 	bl	8002344 <HAL_GetTick>
 8005f00:	4602      	mov	r2, r0
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	1ad3      	subs	r3, r2, r3
 8005f06:	2b64      	cmp	r3, #100	; 0x64
 8005f08:	d901      	bls.n	8005f0e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005f0a:	2303      	movs	r3, #3
 8005f0c:	e1e6      	b.n	80062dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f0e:	4b53      	ldr	r3, [pc, #332]	; (800605c <HAL_RCC_OscConfig+0x26c>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d1f0      	bne.n	8005efc <HAL_RCC_OscConfig+0x10c>
 8005f1a:	e000      	b.n	8005f1e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f003 0302 	and.w	r3, r3, #2
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d063      	beq.n	8005ff2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005f2a:	4b4c      	ldr	r3, [pc, #304]	; (800605c <HAL_RCC_OscConfig+0x26c>)
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	f003 030c 	and.w	r3, r3, #12
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d00b      	beq.n	8005f4e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005f36:	4b49      	ldr	r3, [pc, #292]	; (800605c <HAL_RCC_OscConfig+0x26c>)
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	f003 030c 	and.w	r3, r3, #12
 8005f3e:	2b08      	cmp	r3, #8
 8005f40:	d11c      	bne.n	8005f7c <HAL_RCC_OscConfig+0x18c>
 8005f42:	4b46      	ldr	r3, [pc, #280]	; (800605c <HAL_RCC_OscConfig+0x26c>)
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d116      	bne.n	8005f7c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f4e:	4b43      	ldr	r3, [pc, #268]	; (800605c <HAL_RCC_OscConfig+0x26c>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f003 0302 	and.w	r3, r3, #2
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d005      	beq.n	8005f66 <HAL_RCC_OscConfig+0x176>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	691b      	ldr	r3, [r3, #16]
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d001      	beq.n	8005f66 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	e1ba      	b.n	80062dc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f66:	4b3d      	ldr	r3, [pc, #244]	; (800605c <HAL_RCC_OscConfig+0x26c>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	695b      	ldr	r3, [r3, #20]
 8005f72:	00db      	lsls	r3, r3, #3
 8005f74:	4939      	ldr	r1, [pc, #228]	; (800605c <HAL_RCC_OscConfig+0x26c>)
 8005f76:	4313      	orrs	r3, r2
 8005f78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f7a:	e03a      	b.n	8005ff2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	691b      	ldr	r3, [r3, #16]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d020      	beq.n	8005fc6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f84:	4b36      	ldr	r3, [pc, #216]	; (8006060 <HAL_RCC_OscConfig+0x270>)
 8005f86:	2201      	movs	r2, #1
 8005f88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f8a:	f7fc f9db 	bl	8002344 <HAL_GetTick>
 8005f8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f90:	e008      	b.n	8005fa4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f92:	f7fc f9d7 	bl	8002344 <HAL_GetTick>
 8005f96:	4602      	mov	r2, r0
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	1ad3      	subs	r3, r2, r3
 8005f9c:	2b02      	cmp	r3, #2
 8005f9e:	d901      	bls.n	8005fa4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005fa0:	2303      	movs	r3, #3
 8005fa2:	e19b      	b.n	80062dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fa4:	4b2d      	ldr	r3, [pc, #180]	; (800605c <HAL_RCC_OscConfig+0x26c>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f003 0302 	and.w	r3, r3, #2
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d0f0      	beq.n	8005f92 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fb0:	4b2a      	ldr	r3, [pc, #168]	; (800605c <HAL_RCC_OscConfig+0x26c>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	695b      	ldr	r3, [r3, #20]
 8005fbc:	00db      	lsls	r3, r3, #3
 8005fbe:	4927      	ldr	r1, [pc, #156]	; (800605c <HAL_RCC_OscConfig+0x26c>)
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	600b      	str	r3, [r1, #0]
 8005fc4:	e015      	b.n	8005ff2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005fc6:	4b26      	ldr	r3, [pc, #152]	; (8006060 <HAL_RCC_OscConfig+0x270>)
 8005fc8:	2200      	movs	r2, #0
 8005fca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fcc:	f7fc f9ba 	bl	8002344 <HAL_GetTick>
 8005fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fd2:	e008      	b.n	8005fe6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fd4:	f7fc f9b6 	bl	8002344 <HAL_GetTick>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	1ad3      	subs	r3, r2, r3
 8005fde:	2b02      	cmp	r3, #2
 8005fe0:	d901      	bls.n	8005fe6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005fe2:	2303      	movs	r3, #3
 8005fe4:	e17a      	b.n	80062dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fe6:	4b1d      	ldr	r3, [pc, #116]	; (800605c <HAL_RCC_OscConfig+0x26c>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f003 0302 	and.w	r3, r3, #2
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d1f0      	bne.n	8005fd4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f003 0308 	and.w	r3, r3, #8
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d03a      	beq.n	8006074 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	699b      	ldr	r3, [r3, #24]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d019      	beq.n	800603a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006006:	4b17      	ldr	r3, [pc, #92]	; (8006064 <HAL_RCC_OscConfig+0x274>)
 8006008:	2201      	movs	r2, #1
 800600a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800600c:	f7fc f99a 	bl	8002344 <HAL_GetTick>
 8006010:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006012:	e008      	b.n	8006026 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006014:	f7fc f996 	bl	8002344 <HAL_GetTick>
 8006018:	4602      	mov	r2, r0
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	1ad3      	subs	r3, r2, r3
 800601e:	2b02      	cmp	r3, #2
 8006020:	d901      	bls.n	8006026 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006022:	2303      	movs	r3, #3
 8006024:	e15a      	b.n	80062dc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006026:	4b0d      	ldr	r3, [pc, #52]	; (800605c <HAL_RCC_OscConfig+0x26c>)
 8006028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800602a:	f003 0302 	and.w	r3, r3, #2
 800602e:	2b00      	cmp	r3, #0
 8006030:	d0f0      	beq.n	8006014 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006032:	2001      	movs	r0, #1
 8006034:	f000 fad8 	bl	80065e8 <RCC_Delay>
 8006038:	e01c      	b.n	8006074 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800603a:	4b0a      	ldr	r3, [pc, #40]	; (8006064 <HAL_RCC_OscConfig+0x274>)
 800603c:	2200      	movs	r2, #0
 800603e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006040:	f7fc f980 	bl	8002344 <HAL_GetTick>
 8006044:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006046:	e00f      	b.n	8006068 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006048:	f7fc f97c 	bl	8002344 <HAL_GetTick>
 800604c:	4602      	mov	r2, r0
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	1ad3      	subs	r3, r2, r3
 8006052:	2b02      	cmp	r3, #2
 8006054:	d908      	bls.n	8006068 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006056:	2303      	movs	r3, #3
 8006058:	e140      	b.n	80062dc <HAL_RCC_OscConfig+0x4ec>
 800605a:	bf00      	nop
 800605c:	40021000 	.word	0x40021000
 8006060:	42420000 	.word	0x42420000
 8006064:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006068:	4b9e      	ldr	r3, [pc, #632]	; (80062e4 <HAL_RCC_OscConfig+0x4f4>)
 800606a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606c:	f003 0302 	and.w	r3, r3, #2
 8006070:	2b00      	cmp	r3, #0
 8006072:	d1e9      	bne.n	8006048 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f003 0304 	and.w	r3, r3, #4
 800607c:	2b00      	cmp	r3, #0
 800607e:	f000 80a6 	beq.w	80061ce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006082:	2300      	movs	r3, #0
 8006084:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006086:	4b97      	ldr	r3, [pc, #604]	; (80062e4 <HAL_RCC_OscConfig+0x4f4>)
 8006088:	69db      	ldr	r3, [r3, #28]
 800608a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800608e:	2b00      	cmp	r3, #0
 8006090:	d10d      	bne.n	80060ae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006092:	4b94      	ldr	r3, [pc, #592]	; (80062e4 <HAL_RCC_OscConfig+0x4f4>)
 8006094:	69db      	ldr	r3, [r3, #28]
 8006096:	4a93      	ldr	r2, [pc, #588]	; (80062e4 <HAL_RCC_OscConfig+0x4f4>)
 8006098:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800609c:	61d3      	str	r3, [r2, #28]
 800609e:	4b91      	ldr	r3, [pc, #580]	; (80062e4 <HAL_RCC_OscConfig+0x4f4>)
 80060a0:	69db      	ldr	r3, [r3, #28]
 80060a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060a6:	60bb      	str	r3, [r7, #8]
 80060a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80060aa:	2301      	movs	r3, #1
 80060ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060ae:	4b8e      	ldr	r3, [pc, #568]	; (80062e8 <HAL_RCC_OscConfig+0x4f8>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d118      	bne.n	80060ec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80060ba:	4b8b      	ldr	r3, [pc, #556]	; (80062e8 <HAL_RCC_OscConfig+0x4f8>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a8a      	ldr	r2, [pc, #552]	; (80062e8 <HAL_RCC_OscConfig+0x4f8>)
 80060c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80060c6:	f7fc f93d 	bl	8002344 <HAL_GetTick>
 80060ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060cc:	e008      	b.n	80060e0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060ce:	f7fc f939 	bl	8002344 <HAL_GetTick>
 80060d2:	4602      	mov	r2, r0
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	1ad3      	subs	r3, r2, r3
 80060d8:	2b64      	cmp	r3, #100	; 0x64
 80060da:	d901      	bls.n	80060e0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80060dc:	2303      	movs	r3, #3
 80060de:	e0fd      	b.n	80062dc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060e0:	4b81      	ldr	r3, [pc, #516]	; (80062e8 <HAL_RCC_OscConfig+0x4f8>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d0f0      	beq.n	80060ce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d106      	bne.n	8006102 <HAL_RCC_OscConfig+0x312>
 80060f4:	4b7b      	ldr	r3, [pc, #492]	; (80062e4 <HAL_RCC_OscConfig+0x4f4>)
 80060f6:	6a1b      	ldr	r3, [r3, #32]
 80060f8:	4a7a      	ldr	r2, [pc, #488]	; (80062e4 <HAL_RCC_OscConfig+0x4f4>)
 80060fa:	f043 0301 	orr.w	r3, r3, #1
 80060fe:	6213      	str	r3, [r2, #32]
 8006100:	e02d      	b.n	800615e <HAL_RCC_OscConfig+0x36e>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d10c      	bne.n	8006124 <HAL_RCC_OscConfig+0x334>
 800610a:	4b76      	ldr	r3, [pc, #472]	; (80062e4 <HAL_RCC_OscConfig+0x4f4>)
 800610c:	6a1b      	ldr	r3, [r3, #32]
 800610e:	4a75      	ldr	r2, [pc, #468]	; (80062e4 <HAL_RCC_OscConfig+0x4f4>)
 8006110:	f023 0301 	bic.w	r3, r3, #1
 8006114:	6213      	str	r3, [r2, #32]
 8006116:	4b73      	ldr	r3, [pc, #460]	; (80062e4 <HAL_RCC_OscConfig+0x4f4>)
 8006118:	6a1b      	ldr	r3, [r3, #32]
 800611a:	4a72      	ldr	r2, [pc, #456]	; (80062e4 <HAL_RCC_OscConfig+0x4f4>)
 800611c:	f023 0304 	bic.w	r3, r3, #4
 8006120:	6213      	str	r3, [r2, #32]
 8006122:	e01c      	b.n	800615e <HAL_RCC_OscConfig+0x36e>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	2b05      	cmp	r3, #5
 800612a:	d10c      	bne.n	8006146 <HAL_RCC_OscConfig+0x356>
 800612c:	4b6d      	ldr	r3, [pc, #436]	; (80062e4 <HAL_RCC_OscConfig+0x4f4>)
 800612e:	6a1b      	ldr	r3, [r3, #32]
 8006130:	4a6c      	ldr	r2, [pc, #432]	; (80062e4 <HAL_RCC_OscConfig+0x4f4>)
 8006132:	f043 0304 	orr.w	r3, r3, #4
 8006136:	6213      	str	r3, [r2, #32]
 8006138:	4b6a      	ldr	r3, [pc, #424]	; (80062e4 <HAL_RCC_OscConfig+0x4f4>)
 800613a:	6a1b      	ldr	r3, [r3, #32]
 800613c:	4a69      	ldr	r2, [pc, #420]	; (80062e4 <HAL_RCC_OscConfig+0x4f4>)
 800613e:	f043 0301 	orr.w	r3, r3, #1
 8006142:	6213      	str	r3, [r2, #32]
 8006144:	e00b      	b.n	800615e <HAL_RCC_OscConfig+0x36e>
 8006146:	4b67      	ldr	r3, [pc, #412]	; (80062e4 <HAL_RCC_OscConfig+0x4f4>)
 8006148:	6a1b      	ldr	r3, [r3, #32]
 800614a:	4a66      	ldr	r2, [pc, #408]	; (80062e4 <HAL_RCC_OscConfig+0x4f4>)
 800614c:	f023 0301 	bic.w	r3, r3, #1
 8006150:	6213      	str	r3, [r2, #32]
 8006152:	4b64      	ldr	r3, [pc, #400]	; (80062e4 <HAL_RCC_OscConfig+0x4f4>)
 8006154:	6a1b      	ldr	r3, [r3, #32]
 8006156:	4a63      	ldr	r2, [pc, #396]	; (80062e4 <HAL_RCC_OscConfig+0x4f4>)
 8006158:	f023 0304 	bic.w	r3, r3, #4
 800615c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	68db      	ldr	r3, [r3, #12]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d015      	beq.n	8006192 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006166:	f7fc f8ed 	bl	8002344 <HAL_GetTick>
 800616a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800616c:	e00a      	b.n	8006184 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800616e:	f7fc f8e9 	bl	8002344 <HAL_GetTick>
 8006172:	4602      	mov	r2, r0
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	1ad3      	subs	r3, r2, r3
 8006178:	f241 3288 	movw	r2, #5000	; 0x1388
 800617c:	4293      	cmp	r3, r2
 800617e:	d901      	bls.n	8006184 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006180:	2303      	movs	r3, #3
 8006182:	e0ab      	b.n	80062dc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006184:	4b57      	ldr	r3, [pc, #348]	; (80062e4 <HAL_RCC_OscConfig+0x4f4>)
 8006186:	6a1b      	ldr	r3, [r3, #32]
 8006188:	f003 0302 	and.w	r3, r3, #2
 800618c:	2b00      	cmp	r3, #0
 800618e:	d0ee      	beq.n	800616e <HAL_RCC_OscConfig+0x37e>
 8006190:	e014      	b.n	80061bc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006192:	f7fc f8d7 	bl	8002344 <HAL_GetTick>
 8006196:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006198:	e00a      	b.n	80061b0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800619a:	f7fc f8d3 	bl	8002344 <HAL_GetTick>
 800619e:	4602      	mov	r2, r0
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	1ad3      	subs	r3, r2, r3
 80061a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d901      	bls.n	80061b0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80061ac:	2303      	movs	r3, #3
 80061ae:	e095      	b.n	80062dc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061b0:	4b4c      	ldr	r3, [pc, #304]	; (80062e4 <HAL_RCC_OscConfig+0x4f4>)
 80061b2:	6a1b      	ldr	r3, [r3, #32]
 80061b4:	f003 0302 	and.w	r3, r3, #2
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d1ee      	bne.n	800619a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80061bc:	7dfb      	ldrb	r3, [r7, #23]
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d105      	bne.n	80061ce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061c2:	4b48      	ldr	r3, [pc, #288]	; (80062e4 <HAL_RCC_OscConfig+0x4f4>)
 80061c4:	69db      	ldr	r3, [r3, #28]
 80061c6:	4a47      	ldr	r2, [pc, #284]	; (80062e4 <HAL_RCC_OscConfig+0x4f4>)
 80061c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061cc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	69db      	ldr	r3, [r3, #28]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	f000 8081 	beq.w	80062da <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80061d8:	4b42      	ldr	r3, [pc, #264]	; (80062e4 <HAL_RCC_OscConfig+0x4f4>)
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	f003 030c 	and.w	r3, r3, #12
 80061e0:	2b08      	cmp	r3, #8
 80061e2:	d061      	beq.n	80062a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	69db      	ldr	r3, [r3, #28]
 80061e8:	2b02      	cmp	r3, #2
 80061ea:	d146      	bne.n	800627a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061ec:	4b3f      	ldr	r3, [pc, #252]	; (80062ec <HAL_RCC_OscConfig+0x4fc>)
 80061ee:	2200      	movs	r2, #0
 80061f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061f2:	f7fc f8a7 	bl	8002344 <HAL_GetTick>
 80061f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80061f8:	e008      	b.n	800620c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061fa:	f7fc f8a3 	bl	8002344 <HAL_GetTick>
 80061fe:	4602      	mov	r2, r0
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	1ad3      	subs	r3, r2, r3
 8006204:	2b02      	cmp	r3, #2
 8006206:	d901      	bls.n	800620c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006208:	2303      	movs	r3, #3
 800620a:	e067      	b.n	80062dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800620c:	4b35      	ldr	r3, [pc, #212]	; (80062e4 <HAL_RCC_OscConfig+0x4f4>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006214:	2b00      	cmp	r3, #0
 8006216:	d1f0      	bne.n	80061fa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6a1b      	ldr	r3, [r3, #32]
 800621c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006220:	d108      	bne.n	8006234 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006222:	4b30      	ldr	r3, [pc, #192]	; (80062e4 <HAL_RCC_OscConfig+0x4f4>)
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	492d      	ldr	r1, [pc, #180]	; (80062e4 <HAL_RCC_OscConfig+0x4f4>)
 8006230:	4313      	orrs	r3, r2
 8006232:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006234:	4b2b      	ldr	r3, [pc, #172]	; (80062e4 <HAL_RCC_OscConfig+0x4f4>)
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6a19      	ldr	r1, [r3, #32]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006244:	430b      	orrs	r3, r1
 8006246:	4927      	ldr	r1, [pc, #156]	; (80062e4 <HAL_RCC_OscConfig+0x4f4>)
 8006248:	4313      	orrs	r3, r2
 800624a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800624c:	4b27      	ldr	r3, [pc, #156]	; (80062ec <HAL_RCC_OscConfig+0x4fc>)
 800624e:	2201      	movs	r2, #1
 8006250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006252:	f7fc f877 	bl	8002344 <HAL_GetTick>
 8006256:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006258:	e008      	b.n	800626c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800625a:	f7fc f873 	bl	8002344 <HAL_GetTick>
 800625e:	4602      	mov	r2, r0
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	1ad3      	subs	r3, r2, r3
 8006264:	2b02      	cmp	r3, #2
 8006266:	d901      	bls.n	800626c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006268:	2303      	movs	r3, #3
 800626a:	e037      	b.n	80062dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800626c:	4b1d      	ldr	r3, [pc, #116]	; (80062e4 <HAL_RCC_OscConfig+0x4f4>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006274:	2b00      	cmp	r3, #0
 8006276:	d0f0      	beq.n	800625a <HAL_RCC_OscConfig+0x46a>
 8006278:	e02f      	b.n	80062da <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800627a:	4b1c      	ldr	r3, [pc, #112]	; (80062ec <HAL_RCC_OscConfig+0x4fc>)
 800627c:	2200      	movs	r2, #0
 800627e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006280:	f7fc f860 	bl	8002344 <HAL_GetTick>
 8006284:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006286:	e008      	b.n	800629a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006288:	f7fc f85c 	bl	8002344 <HAL_GetTick>
 800628c:	4602      	mov	r2, r0
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	1ad3      	subs	r3, r2, r3
 8006292:	2b02      	cmp	r3, #2
 8006294:	d901      	bls.n	800629a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006296:	2303      	movs	r3, #3
 8006298:	e020      	b.n	80062dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800629a:	4b12      	ldr	r3, [pc, #72]	; (80062e4 <HAL_RCC_OscConfig+0x4f4>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d1f0      	bne.n	8006288 <HAL_RCC_OscConfig+0x498>
 80062a6:	e018      	b.n	80062da <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	69db      	ldr	r3, [r3, #28]
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d101      	bne.n	80062b4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80062b0:	2301      	movs	r3, #1
 80062b2:	e013      	b.n	80062dc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80062b4:	4b0b      	ldr	r3, [pc, #44]	; (80062e4 <HAL_RCC_OscConfig+0x4f4>)
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6a1b      	ldr	r3, [r3, #32]
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d106      	bne.n	80062d6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d001      	beq.n	80062da <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	e000      	b.n	80062dc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80062da:	2300      	movs	r3, #0
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3718      	adds	r7, #24
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}
 80062e4:	40021000 	.word	0x40021000
 80062e8:	40007000 	.word	0x40007000
 80062ec:	42420060 	.word	0x42420060

080062f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b084      	sub	sp, #16
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d101      	bne.n	8006304 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006300:	2301      	movs	r3, #1
 8006302:	e0d0      	b.n	80064a6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006304:	4b6a      	ldr	r3, [pc, #424]	; (80064b0 <HAL_RCC_ClockConfig+0x1c0>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f003 0307 	and.w	r3, r3, #7
 800630c:	683a      	ldr	r2, [r7, #0]
 800630e:	429a      	cmp	r2, r3
 8006310:	d910      	bls.n	8006334 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006312:	4b67      	ldr	r3, [pc, #412]	; (80064b0 <HAL_RCC_ClockConfig+0x1c0>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f023 0207 	bic.w	r2, r3, #7
 800631a:	4965      	ldr	r1, [pc, #404]	; (80064b0 <HAL_RCC_ClockConfig+0x1c0>)
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	4313      	orrs	r3, r2
 8006320:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006322:	4b63      	ldr	r3, [pc, #396]	; (80064b0 <HAL_RCC_ClockConfig+0x1c0>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f003 0307 	and.w	r3, r3, #7
 800632a:	683a      	ldr	r2, [r7, #0]
 800632c:	429a      	cmp	r2, r3
 800632e:	d001      	beq.n	8006334 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006330:	2301      	movs	r3, #1
 8006332:	e0b8      	b.n	80064a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f003 0302 	and.w	r3, r3, #2
 800633c:	2b00      	cmp	r3, #0
 800633e:	d020      	beq.n	8006382 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f003 0304 	and.w	r3, r3, #4
 8006348:	2b00      	cmp	r3, #0
 800634a:	d005      	beq.n	8006358 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800634c:	4b59      	ldr	r3, [pc, #356]	; (80064b4 <HAL_RCC_ClockConfig+0x1c4>)
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	4a58      	ldr	r2, [pc, #352]	; (80064b4 <HAL_RCC_ClockConfig+0x1c4>)
 8006352:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006356:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f003 0308 	and.w	r3, r3, #8
 8006360:	2b00      	cmp	r3, #0
 8006362:	d005      	beq.n	8006370 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006364:	4b53      	ldr	r3, [pc, #332]	; (80064b4 <HAL_RCC_ClockConfig+0x1c4>)
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	4a52      	ldr	r2, [pc, #328]	; (80064b4 <HAL_RCC_ClockConfig+0x1c4>)
 800636a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800636e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006370:	4b50      	ldr	r3, [pc, #320]	; (80064b4 <HAL_RCC_ClockConfig+0x1c4>)
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	494d      	ldr	r1, [pc, #308]	; (80064b4 <HAL_RCC_ClockConfig+0x1c4>)
 800637e:	4313      	orrs	r3, r2
 8006380:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f003 0301 	and.w	r3, r3, #1
 800638a:	2b00      	cmp	r3, #0
 800638c:	d040      	beq.n	8006410 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	2b01      	cmp	r3, #1
 8006394:	d107      	bne.n	80063a6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006396:	4b47      	ldr	r3, [pc, #284]	; (80064b4 <HAL_RCC_ClockConfig+0x1c4>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d115      	bne.n	80063ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	e07f      	b.n	80064a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	2b02      	cmp	r3, #2
 80063ac:	d107      	bne.n	80063be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063ae:	4b41      	ldr	r3, [pc, #260]	; (80064b4 <HAL_RCC_ClockConfig+0x1c4>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d109      	bne.n	80063ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	e073      	b.n	80064a6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063be:	4b3d      	ldr	r3, [pc, #244]	; (80064b4 <HAL_RCC_ClockConfig+0x1c4>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f003 0302 	and.w	r3, r3, #2
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d101      	bne.n	80063ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	e06b      	b.n	80064a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80063ce:	4b39      	ldr	r3, [pc, #228]	; (80064b4 <HAL_RCC_ClockConfig+0x1c4>)
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	f023 0203 	bic.w	r2, r3, #3
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	4936      	ldr	r1, [pc, #216]	; (80064b4 <HAL_RCC_ClockConfig+0x1c4>)
 80063dc:	4313      	orrs	r3, r2
 80063de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80063e0:	f7fb ffb0 	bl	8002344 <HAL_GetTick>
 80063e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063e6:	e00a      	b.n	80063fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063e8:	f7fb ffac 	bl	8002344 <HAL_GetTick>
 80063ec:	4602      	mov	r2, r0
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	1ad3      	subs	r3, r2, r3
 80063f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d901      	bls.n	80063fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80063fa:	2303      	movs	r3, #3
 80063fc:	e053      	b.n	80064a6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063fe:	4b2d      	ldr	r3, [pc, #180]	; (80064b4 <HAL_RCC_ClockConfig+0x1c4>)
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	f003 020c 	and.w	r2, r3, #12
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	009b      	lsls	r3, r3, #2
 800640c:	429a      	cmp	r2, r3
 800640e:	d1eb      	bne.n	80063e8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006410:	4b27      	ldr	r3, [pc, #156]	; (80064b0 <HAL_RCC_ClockConfig+0x1c0>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f003 0307 	and.w	r3, r3, #7
 8006418:	683a      	ldr	r2, [r7, #0]
 800641a:	429a      	cmp	r2, r3
 800641c:	d210      	bcs.n	8006440 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800641e:	4b24      	ldr	r3, [pc, #144]	; (80064b0 <HAL_RCC_ClockConfig+0x1c0>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f023 0207 	bic.w	r2, r3, #7
 8006426:	4922      	ldr	r1, [pc, #136]	; (80064b0 <HAL_RCC_ClockConfig+0x1c0>)
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	4313      	orrs	r3, r2
 800642c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800642e:	4b20      	ldr	r3, [pc, #128]	; (80064b0 <HAL_RCC_ClockConfig+0x1c0>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f003 0307 	and.w	r3, r3, #7
 8006436:	683a      	ldr	r2, [r7, #0]
 8006438:	429a      	cmp	r2, r3
 800643a:	d001      	beq.n	8006440 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	e032      	b.n	80064a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f003 0304 	and.w	r3, r3, #4
 8006448:	2b00      	cmp	r3, #0
 800644a:	d008      	beq.n	800645e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800644c:	4b19      	ldr	r3, [pc, #100]	; (80064b4 <HAL_RCC_ClockConfig+0x1c4>)
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	68db      	ldr	r3, [r3, #12]
 8006458:	4916      	ldr	r1, [pc, #88]	; (80064b4 <HAL_RCC_ClockConfig+0x1c4>)
 800645a:	4313      	orrs	r3, r2
 800645c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f003 0308 	and.w	r3, r3, #8
 8006466:	2b00      	cmp	r3, #0
 8006468:	d009      	beq.n	800647e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800646a:	4b12      	ldr	r3, [pc, #72]	; (80064b4 <HAL_RCC_ClockConfig+0x1c4>)
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	00db      	lsls	r3, r3, #3
 8006478:	490e      	ldr	r1, [pc, #56]	; (80064b4 <HAL_RCC_ClockConfig+0x1c4>)
 800647a:	4313      	orrs	r3, r2
 800647c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800647e:	f000 f821 	bl	80064c4 <HAL_RCC_GetSysClockFreq>
 8006482:	4602      	mov	r2, r0
 8006484:	4b0b      	ldr	r3, [pc, #44]	; (80064b4 <HAL_RCC_ClockConfig+0x1c4>)
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	091b      	lsrs	r3, r3, #4
 800648a:	f003 030f 	and.w	r3, r3, #15
 800648e:	490a      	ldr	r1, [pc, #40]	; (80064b8 <HAL_RCC_ClockConfig+0x1c8>)
 8006490:	5ccb      	ldrb	r3, [r1, r3]
 8006492:	fa22 f303 	lsr.w	r3, r2, r3
 8006496:	4a09      	ldr	r2, [pc, #36]	; (80064bc <HAL_RCC_ClockConfig+0x1cc>)
 8006498:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800649a:	4b09      	ldr	r3, [pc, #36]	; (80064c0 <HAL_RCC_ClockConfig+0x1d0>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4618      	mov	r0, r3
 80064a0:	f7fb ff0e 	bl	80022c0 <HAL_InitTick>

  return HAL_OK;
 80064a4:	2300      	movs	r3, #0
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3710      	adds	r7, #16
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}
 80064ae:	bf00      	nop
 80064b0:	40022000 	.word	0x40022000
 80064b4:	40021000 	.word	0x40021000
 80064b8:	0800f17c 	.word	0x0800f17c
 80064bc:	20000094 	.word	0x20000094
 80064c0:	20000098 	.word	0x20000098

080064c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80064c4:	b490      	push	{r4, r7}
 80064c6:	b08a      	sub	sp, #40	; 0x28
 80064c8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80064ca:	4b2a      	ldr	r3, [pc, #168]	; (8006574 <HAL_RCC_GetSysClockFreq+0xb0>)
 80064cc:	1d3c      	adds	r4, r7, #4
 80064ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80064d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80064d4:	f240 2301 	movw	r3, #513	; 0x201
 80064d8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80064da:	2300      	movs	r3, #0
 80064dc:	61fb      	str	r3, [r7, #28]
 80064de:	2300      	movs	r3, #0
 80064e0:	61bb      	str	r3, [r7, #24]
 80064e2:	2300      	movs	r3, #0
 80064e4:	627b      	str	r3, [r7, #36]	; 0x24
 80064e6:	2300      	movs	r3, #0
 80064e8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80064ea:	2300      	movs	r3, #0
 80064ec:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80064ee:	4b22      	ldr	r3, [pc, #136]	; (8006578 <HAL_RCC_GetSysClockFreq+0xb4>)
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80064f4:	69fb      	ldr	r3, [r7, #28]
 80064f6:	f003 030c 	and.w	r3, r3, #12
 80064fa:	2b04      	cmp	r3, #4
 80064fc:	d002      	beq.n	8006504 <HAL_RCC_GetSysClockFreq+0x40>
 80064fe:	2b08      	cmp	r3, #8
 8006500:	d003      	beq.n	800650a <HAL_RCC_GetSysClockFreq+0x46>
 8006502:	e02d      	b.n	8006560 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006504:	4b1d      	ldr	r3, [pc, #116]	; (800657c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006506:	623b      	str	r3, [r7, #32]
      break;
 8006508:	e02d      	b.n	8006566 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800650a:	69fb      	ldr	r3, [r7, #28]
 800650c:	0c9b      	lsrs	r3, r3, #18
 800650e:	f003 030f 	and.w	r3, r3, #15
 8006512:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006516:	4413      	add	r3, r2
 8006518:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800651c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800651e:	69fb      	ldr	r3, [r7, #28]
 8006520:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006524:	2b00      	cmp	r3, #0
 8006526:	d013      	beq.n	8006550 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006528:	4b13      	ldr	r3, [pc, #76]	; (8006578 <HAL_RCC_GetSysClockFreq+0xb4>)
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	0c5b      	lsrs	r3, r3, #17
 800652e:	f003 0301 	and.w	r3, r3, #1
 8006532:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006536:	4413      	add	r3, r2
 8006538:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800653c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	4a0e      	ldr	r2, [pc, #56]	; (800657c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006542:	fb02 f203 	mul.w	r2, r2, r3
 8006546:	69bb      	ldr	r3, [r7, #24]
 8006548:	fbb2 f3f3 	udiv	r3, r2, r3
 800654c:	627b      	str	r3, [r7, #36]	; 0x24
 800654e:	e004      	b.n	800655a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	4a0b      	ldr	r2, [pc, #44]	; (8006580 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006554:	fb02 f303 	mul.w	r3, r2, r3
 8006558:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800655a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655c:	623b      	str	r3, [r7, #32]
      break;
 800655e:	e002      	b.n	8006566 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006560:	4b06      	ldr	r3, [pc, #24]	; (800657c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006562:	623b      	str	r3, [r7, #32]
      break;
 8006564:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006566:	6a3b      	ldr	r3, [r7, #32]
}
 8006568:	4618      	mov	r0, r3
 800656a:	3728      	adds	r7, #40	; 0x28
 800656c:	46bd      	mov	sp, r7
 800656e:	bc90      	pop	{r4, r7}
 8006570:	4770      	bx	lr
 8006572:	bf00      	nop
 8006574:	0800f118 	.word	0x0800f118
 8006578:	40021000 	.word	0x40021000
 800657c:	007a1200 	.word	0x007a1200
 8006580:	003d0900 	.word	0x003d0900

08006584 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006584:	b480      	push	{r7}
 8006586:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006588:	4b02      	ldr	r3, [pc, #8]	; (8006594 <HAL_RCC_GetHCLKFreq+0x10>)
 800658a:	681b      	ldr	r3, [r3, #0]
}
 800658c:	4618      	mov	r0, r3
 800658e:	46bd      	mov	sp, r7
 8006590:	bc80      	pop	{r7}
 8006592:	4770      	bx	lr
 8006594:	20000094 	.word	0x20000094

08006598 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800659c:	f7ff fff2 	bl	8006584 <HAL_RCC_GetHCLKFreq>
 80065a0:	4602      	mov	r2, r0
 80065a2:	4b05      	ldr	r3, [pc, #20]	; (80065b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	0a1b      	lsrs	r3, r3, #8
 80065a8:	f003 0307 	and.w	r3, r3, #7
 80065ac:	4903      	ldr	r1, [pc, #12]	; (80065bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80065ae:	5ccb      	ldrb	r3, [r1, r3]
 80065b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	bd80      	pop	{r7, pc}
 80065b8:	40021000 	.word	0x40021000
 80065bc:	0800f18c 	.word	0x0800f18c

080065c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80065c4:	f7ff ffde 	bl	8006584 <HAL_RCC_GetHCLKFreq>
 80065c8:	4602      	mov	r2, r0
 80065ca:	4b05      	ldr	r3, [pc, #20]	; (80065e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	0adb      	lsrs	r3, r3, #11
 80065d0:	f003 0307 	and.w	r3, r3, #7
 80065d4:	4903      	ldr	r1, [pc, #12]	; (80065e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80065d6:	5ccb      	ldrb	r3, [r1, r3]
 80065d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065dc:	4618      	mov	r0, r3
 80065de:	bd80      	pop	{r7, pc}
 80065e0:	40021000 	.word	0x40021000
 80065e4:	0800f18c 	.word	0x0800f18c

080065e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b085      	sub	sp, #20
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80065f0:	4b0a      	ldr	r3, [pc, #40]	; (800661c <RCC_Delay+0x34>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a0a      	ldr	r2, [pc, #40]	; (8006620 <RCC_Delay+0x38>)
 80065f6:	fba2 2303 	umull	r2, r3, r2, r3
 80065fa:	0a5b      	lsrs	r3, r3, #9
 80065fc:	687a      	ldr	r2, [r7, #4]
 80065fe:	fb02 f303 	mul.w	r3, r2, r3
 8006602:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006604:	bf00      	nop
  }
  while (Delay --);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	1e5a      	subs	r2, r3, #1
 800660a:	60fa      	str	r2, [r7, #12]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d1f9      	bne.n	8006604 <RCC_Delay+0x1c>
}
 8006610:	bf00      	nop
 8006612:	bf00      	nop
 8006614:	3714      	adds	r7, #20
 8006616:	46bd      	mov	sp, r7
 8006618:	bc80      	pop	{r7}
 800661a:	4770      	bx	lr
 800661c:	20000094 	.word	0x20000094
 8006620:	10624dd3 	.word	0x10624dd3

08006624 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b086      	sub	sp, #24
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800662c:	2300      	movs	r3, #0
 800662e:	613b      	str	r3, [r7, #16]
 8006630:	2300      	movs	r3, #0
 8006632:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f003 0301 	and.w	r3, r3, #1
 800663c:	2b00      	cmp	r3, #0
 800663e:	d07d      	beq.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006640:	2300      	movs	r3, #0
 8006642:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006644:	4b4f      	ldr	r3, [pc, #316]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006646:	69db      	ldr	r3, [r3, #28]
 8006648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800664c:	2b00      	cmp	r3, #0
 800664e:	d10d      	bne.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006650:	4b4c      	ldr	r3, [pc, #304]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006652:	69db      	ldr	r3, [r3, #28]
 8006654:	4a4b      	ldr	r2, [pc, #300]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006656:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800665a:	61d3      	str	r3, [r2, #28]
 800665c:	4b49      	ldr	r3, [pc, #292]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800665e:	69db      	ldr	r3, [r3, #28]
 8006660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006664:	60bb      	str	r3, [r7, #8]
 8006666:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006668:	2301      	movs	r3, #1
 800666a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800666c:	4b46      	ldr	r3, [pc, #280]	; (8006788 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006674:	2b00      	cmp	r3, #0
 8006676:	d118      	bne.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006678:	4b43      	ldr	r3, [pc, #268]	; (8006788 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a42      	ldr	r2, [pc, #264]	; (8006788 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800667e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006682:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006684:	f7fb fe5e 	bl	8002344 <HAL_GetTick>
 8006688:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800668a:	e008      	b.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800668c:	f7fb fe5a 	bl	8002344 <HAL_GetTick>
 8006690:	4602      	mov	r2, r0
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	1ad3      	subs	r3, r2, r3
 8006696:	2b64      	cmp	r3, #100	; 0x64
 8006698:	d901      	bls.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800669a:	2303      	movs	r3, #3
 800669c:	e06d      	b.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800669e:	4b3a      	ldr	r3, [pc, #232]	; (8006788 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d0f0      	beq.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80066aa:	4b36      	ldr	r3, [pc, #216]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066ac:	6a1b      	ldr	r3, [r3, #32]
 80066ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066b2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d02e      	beq.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066c2:	68fa      	ldr	r2, [r7, #12]
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d027      	beq.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80066c8:	4b2e      	ldr	r3, [pc, #184]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066ca:	6a1b      	ldr	r3, [r3, #32]
 80066cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066d0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80066d2:	4b2e      	ldr	r3, [pc, #184]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80066d4:	2201      	movs	r2, #1
 80066d6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80066d8:	4b2c      	ldr	r3, [pc, #176]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80066da:	2200      	movs	r2, #0
 80066dc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80066de:	4a29      	ldr	r2, [pc, #164]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f003 0301 	and.w	r3, r3, #1
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d014      	beq.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066ee:	f7fb fe29 	bl	8002344 <HAL_GetTick>
 80066f2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066f4:	e00a      	b.n	800670c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066f6:	f7fb fe25 	bl	8002344 <HAL_GetTick>
 80066fa:	4602      	mov	r2, r0
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	1ad3      	subs	r3, r2, r3
 8006700:	f241 3288 	movw	r2, #5000	; 0x1388
 8006704:	4293      	cmp	r3, r2
 8006706:	d901      	bls.n	800670c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006708:	2303      	movs	r3, #3
 800670a:	e036      	b.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800670c:	4b1d      	ldr	r3, [pc, #116]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800670e:	6a1b      	ldr	r3, [r3, #32]
 8006710:	f003 0302 	and.w	r3, r3, #2
 8006714:	2b00      	cmp	r3, #0
 8006716:	d0ee      	beq.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006718:	4b1a      	ldr	r3, [pc, #104]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800671a:	6a1b      	ldr	r3, [r3, #32]
 800671c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	4917      	ldr	r1, [pc, #92]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006726:	4313      	orrs	r3, r2
 8006728:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800672a:	7dfb      	ldrb	r3, [r7, #23]
 800672c:	2b01      	cmp	r3, #1
 800672e:	d105      	bne.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006730:	4b14      	ldr	r3, [pc, #80]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006732:	69db      	ldr	r3, [r3, #28]
 8006734:	4a13      	ldr	r2, [pc, #76]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006736:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800673a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f003 0302 	and.w	r3, r3, #2
 8006744:	2b00      	cmp	r3, #0
 8006746:	d008      	beq.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006748:	4b0e      	ldr	r3, [pc, #56]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	689b      	ldr	r3, [r3, #8]
 8006754:	490b      	ldr	r1, [pc, #44]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006756:	4313      	orrs	r3, r2
 8006758:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f003 0310 	and.w	r3, r3, #16
 8006762:	2b00      	cmp	r3, #0
 8006764:	d008      	beq.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006766:	4b07      	ldr	r3, [pc, #28]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	68db      	ldr	r3, [r3, #12]
 8006772:	4904      	ldr	r1, [pc, #16]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006774:	4313      	orrs	r3, r2
 8006776:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006778:	2300      	movs	r3, #0
}
 800677a:	4618      	mov	r0, r3
 800677c:	3718      	adds	r7, #24
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}
 8006782:	bf00      	nop
 8006784:	40021000 	.word	0x40021000
 8006788:	40007000 	.word	0x40007000
 800678c:	42420440 	.word	0x42420440

08006790 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006790:	b590      	push	{r4, r7, lr}
 8006792:	b08d      	sub	sp, #52	; 0x34
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006798:	4b5a      	ldr	r3, [pc, #360]	; (8006904 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 800679a:	f107 040c 	add.w	r4, r7, #12
 800679e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80067a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80067a4:	f240 2301 	movw	r3, #513	; 0x201
 80067a8:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80067aa:	2300      	movs	r3, #0
 80067ac:	627b      	str	r3, [r7, #36]	; 0x24
 80067ae:	2300      	movs	r3, #0
 80067b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067b2:	2300      	movs	r3, #0
 80067b4:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80067b6:	2300      	movs	r3, #0
 80067b8:	61fb      	str	r3, [r7, #28]
 80067ba:	2300      	movs	r3, #0
 80067bc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2b10      	cmp	r3, #16
 80067c2:	d00a      	beq.n	80067da <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2b10      	cmp	r3, #16
 80067c8:	f200 8091 	bhi.w	80068ee <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	d04c      	beq.n	800686c <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2b02      	cmp	r3, #2
 80067d6:	d07c      	beq.n	80068d2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80067d8:	e089      	b.n	80068ee <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 80067da:	4b4b      	ldr	r3, [pc, #300]	; (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80067e0:	4b49      	ldr	r3, [pc, #292]	; (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	f000 8082 	beq.w	80068f2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80067ee:	69fb      	ldr	r3, [r7, #28]
 80067f0:	0c9b      	lsrs	r3, r3, #18
 80067f2:	f003 030f 	and.w	r3, r3, #15
 80067f6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80067fa:	4413      	add	r3, r2
 80067fc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006800:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006802:	69fb      	ldr	r3, [r7, #28]
 8006804:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006808:	2b00      	cmp	r3, #0
 800680a:	d018      	beq.n	800683e <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800680c:	4b3e      	ldr	r3, [pc, #248]	; (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	0c5b      	lsrs	r3, r3, #17
 8006812:	f003 0301 	and.w	r3, r3, #1
 8006816:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800681a:	4413      	add	r3, r2
 800681c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006820:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006822:	69fb      	ldr	r3, [r7, #28]
 8006824:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006828:	2b00      	cmp	r3, #0
 800682a:	d00d      	beq.n	8006848 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800682c:	4a37      	ldr	r2, [pc, #220]	; (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 800682e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006830:	fbb2 f2f3 	udiv	r2, r2, r3
 8006834:	6a3b      	ldr	r3, [r7, #32]
 8006836:	fb02 f303 	mul.w	r3, r2, r3
 800683a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800683c:	e004      	b.n	8006848 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800683e:	6a3b      	ldr	r3, [r7, #32]
 8006840:	4a33      	ldr	r2, [pc, #204]	; (8006910 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8006842:	fb02 f303 	mul.w	r3, r2, r3
 8006846:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8006848:	4b2f      	ldr	r3, [pc, #188]	; (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006850:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006854:	d102      	bne.n	800685c <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8006856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006858:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800685a:	e04a      	b.n	80068f2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 800685c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800685e:	005b      	lsls	r3, r3, #1
 8006860:	4a2c      	ldr	r2, [pc, #176]	; (8006914 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8006862:	fba2 2303 	umull	r2, r3, r2, r3
 8006866:	085b      	lsrs	r3, r3, #1
 8006868:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800686a:	e042      	b.n	80068f2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 800686c:	4b26      	ldr	r3, [pc, #152]	; (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800686e:	6a1b      	ldr	r3, [r3, #32]
 8006870:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8006872:	69fb      	ldr	r3, [r7, #28]
 8006874:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006878:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800687c:	d108      	bne.n	8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800687e:	69fb      	ldr	r3, [r7, #28]
 8006880:	f003 0302 	and.w	r3, r3, #2
 8006884:	2b00      	cmp	r3, #0
 8006886:	d003      	beq.n	8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8006888:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800688c:	62bb      	str	r3, [r7, #40]	; 0x28
 800688e:	e01f      	b.n	80068d0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8006890:	69fb      	ldr	r3, [r7, #28]
 8006892:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006896:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800689a:	d109      	bne.n	80068b0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800689c:	4b1a      	ldr	r3, [pc, #104]	; (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800689e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a0:	f003 0302 	and.w	r3, r3, #2
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d003      	beq.n	80068b0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 80068a8:	f649 4340 	movw	r3, #40000	; 0x9c40
 80068ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80068ae:	e00f      	b.n	80068d0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80068b0:	69fb      	ldr	r3, [r7, #28]
 80068b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068ba:	d11c      	bne.n	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80068bc:	4b12      	ldr	r3, [pc, #72]	; (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d016      	beq.n	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 80068c8:	f24f 4324 	movw	r3, #62500	; 0xf424
 80068cc:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80068ce:	e012      	b.n	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80068d0:	e011      	b.n	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80068d2:	f7ff fe75 	bl	80065c0 <HAL_RCC_GetPCLK2Freq>
 80068d6:	4602      	mov	r2, r0
 80068d8:	4b0b      	ldr	r3, [pc, #44]	; (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	0b9b      	lsrs	r3, r3, #14
 80068de:	f003 0303 	and.w	r3, r3, #3
 80068e2:	3301      	adds	r3, #1
 80068e4:	005b      	lsls	r3, r3, #1
 80068e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80068ea:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80068ec:	e004      	b.n	80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80068ee:	bf00      	nop
 80068f0:	e002      	b.n	80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80068f2:	bf00      	nop
 80068f4:	e000      	b.n	80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80068f6:	bf00      	nop
    }
  }
  return (frequency);
 80068f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3734      	adds	r7, #52	; 0x34
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd90      	pop	{r4, r7, pc}
 8006902:	bf00      	nop
 8006904:	0800f128 	.word	0x0800f128
 8006908:	40021000 	.word	0x40021000
 800690c:	007a1200 	.word	0x007a1200
 8006910:	003d0900 	.word	0x003d0900
 8006914:	aaaaaaab 	.word	0xaaaaaaab

08006918 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b082      	sub	sp, #8
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d101      	bne.n	800692a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	e041      	b.n	80069ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006930:	b2db      	uxtb	r3, r3
 8006932:	2b00      	cmp	r3, #0
 8006934:	d106      	bne.n	8006944 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2200      	movs	r2, #0
 800693a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f7fb faa8 	bl	8001e94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2202      	movs	r2, #2
 8006948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	3304      	adds	r3, #4
 8006954:	4619      	mov	r1, r3
 8006956:	4610      	mov	r0, r2
 8006958:	f000 fa9e 	bl	8006e98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2201      	movs	r2, #1
 8006960:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2201      	movs	r2, #1
 8006968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2201      	movs	r2, #1
 8006970:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2201      	movs	r2, #1
 8006978:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2201      	movs	r2, #1
 8006980:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2201      	movs	r2, #1
 8006990:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2201      	movs	r2, #1
 8006998:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2201      	movs	r2, #1
 80069a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80069ac:	2300      	movs	r3, #0
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3708      	adds	r7, #8
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}
	...

080069b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b085      	sub	sp, #20
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069c6:	b2db      	uxtb	r3, r3
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	d001      	beq.n	80069d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80069cc:	2301      	movs	r3, #1
 80069ce:	e03a      	b.n	8006a46 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2202      	movs	r2, #2
 80069d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	68da      	ldr	r2, [r3, #12]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f042 0201 	orr.w	r2, r2, #1
 80069e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a18      	ldr	r2, [pc, #96]	; (8006a50 <HAL_TIM_Base_Start_IT+0x98>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d00e      	beq.n	8006a10 <HAL_TIM_Base_Start_IT+0x58>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069fa:	d009      	beq.n	8006a10 <HAL_TIM_Base_Start_IT+0x58>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a14      	ldr	r2, [pc, #80]	; (8006a54 <HAL_TIM_Base_Start_IT+0x9c>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d004      	beq.n	8006a10 <HAL_TIM_Base_Start_IT+0x58>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a13      	ldr	r2, [pc, #76]	; (8006a58 <HAL_TIM_Base_Start_IT+0xa0>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d111      	bne.n	8006a34 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	f003 0307 	and.w	r3, r3, #7
 8006a1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2b06      	cmp	r3, #6
 8006a20:	d010      	beq.n	8006a44 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	681a      	ldr	r2, [r3, #0]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f042 0201 	orr.w	r2, r2, #1
 8006a30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a32:	e007      	b.n	8006a44 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f042 0201 	orr.w	r2, r2, #1
 8006a42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a44:	2300      	movs	r3, #0
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3714      	adds	r7, #20
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bc80      	pop	{r7}
 8006a4e:	4770      	bx	lr
 8006a50:	40012c00 	.word	0x40012c00
 8006a54:	40000400 	.word	0x40000400
 8006a58:	40000800 	.word	0x40000800

08006a5c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b083      	sub	sp, #12
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	68da      	ldr	r2, [r3, #12]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f022 0201 	bic.w	r2, r2, #1
 8006a72:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	6a1a      	ldr	r2, [r3, #32]
 8006a7a:	f241 1311 	movw	r3, #4369	; 0x1111
 8006a7e:	4013      	ands	r3, r2
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d10f      	bne.n	8006aa4 <HAL_TIM_Base_Stop_IT+0x48>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	6a1a      	ldr	r2, [r3, #32]
 8006a8a:	f240 4344 	movw	r3, #1092	; 0x444
 8006a8e:	4013      	ands	r3, r2
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d107      	bne.n	8006aa4 <HAL_TIM_Base_Stop_IT+0x48>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f022 0201 	bic.w	r2, r2, #1
 8006aa2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006aac:	2300      	movs	r3, #0
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	370c      	adds	r7, #12
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bc80      	pop	{r7}
 8006ab6:	4770      	bx	lr

08006ab8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b082      	sub	sp, #8
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	691b      	ldr	r3, [r3, #16]
 8006ac6:	f003 0302 	and.w	r3, r3, #2
 8006aca:	2b02      	cmp	r3, #2
 8006acc:	d122      	bne.n	8006b14 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	68db      	ldr	r3, [r3, #12]
 8006ad4:	f003 0302 	and.w	r3, r3, #2
 8006ad8:	2b02      	cmp	r3, #2
 8006ada:	d11b      	bne.n	8006b14 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f06f 0202 	mvn.w	r2, #2
 8006ae4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2201      	movs	r2, #1
 8006aea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	699b      	ldr	r3, [r3, #24]
 8006af2:	f003 0303 	and.w	r3, r3, #3
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d003      	beq.n	8006b02 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 f9b1 	bl	8006e62 <HAL_TIM_IC_CaptureCallback>
 8006b00:	e005      	b.n	8006b0e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f000 f9a4 	bl	8006e50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f000 f9b3 	bl	8006e74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2200      	movs	r2, #0
 8006b12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	691b      	ldr	r3, [r3, #16]
 8006b1a:	f003 0304 	and.w	r3, r3, #4
 8006b1e:	2b04      	cmp	r3, #4
 8006b20:	d122      	bne.n	8006b68 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	68db      	ldr	r3, [r3, #12]
 8006b28:	f003 0304 	and.w	r3, r3, #4
 8006b2c:	2b04      	cmp	r3, #4
 8006b2e:	d11b      	bne.n	8006b68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f06f 0204 	mvn.w	r2, #4
 8006b38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2202      	movs	r2, #2
 8006b3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	699b      	ldr	r3, [r3, #24]
 8006b46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d003      	beq.n	8006b56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f000 f987 	bl	8006e62 <HAL_TIM_IC_CaptureCallback>
 8006b54:	e005      	b.n	8006b62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f000 f97a 	bl	8006e50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f000 f989 	bl	8006e74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2200      	movs	r2, #0
 8006b66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	691b      	ldr	r3, [r3, #16]
 8006b6e:	f003 0308 	and.w	r3, r3, #8
 8006b72:	2b08      	cmp	r3, #8
 8006b74:	d122      	bne.n	8006bbc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	f003 0308 	and.w	r3, r3, #8
 8006b80:	2b08      	cmp	r3, #8
 8006b82:	d11b      	bne.n	8006bbc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f06f 0208 	mvn.w	r2, #8
 8006b8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2204      	movs	r2, #4
 8006b92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	69db      	ldr	r3, [r3, #28]
 8006b9a:	f003 0303 	and.w	r3, r3, #3
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d003      	beq.n	8006baa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f000 f95d 	bl	8006e62 <HAL_TIM_IC_CaptureCallback>
 8006ba8:	e005      	b.n	8006bb6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f000 f950 	bl	8006e50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f000 f95f 	bl	8006e74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	691b      	ldr	r3, [r3, #16]
 8006bc2:	f003 0310 	and.w	r3, r3, #16
 8006bc6:	2b10      	cmp	r3, #16
 8006bc8:	d122      	bne.n	8006c10 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	68db      	ldr	r3, [r3, #12]
 8006bd0:	f003 0310 	and.w	r3, r3, #16
 8006bd4:	2b10      	cmp	r3, #16
 8006bd6:	d11b      	bne.n	8006c10 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f06f 0210 	mvn.w	r2, #16
 8006be0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2208      	movs	r2, #8
 8006be6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	69db      	ldr	r3, [r3, #28]
 8006bee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d003      	beq.n	8006bfe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f000 f933 	bl	8006e62 <HAL_TIM_IC_CaptureCallback>
 8006bfc:	e005      	b.n	8006c0a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f000 f926 	bl	8006e50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f000 f935 	bl	8006e74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	691b      	ldr	r3, [r3, #16]
 8006c16:	f003 0301 	and.w	r3, r3, #1
 8006c1a:	2b01      	cmp	r3, #1
 8006c1c:	d10e      	bne.n	8006c3c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	68db      	ldr	r3, [r3, #12]
 8006c24:	f003 0301 	and.w	r3, r3, #1
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d107      	bne.n	8006c3c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f06f 0201 	mvn.w	r2, #1
 8006c34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f7fa ffec 	bl	8001c14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	691b      	ldr	r3, [r3, #16]
 8006c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c46:	2b80      	cmp	r3, #128	; 0x80
 8006c48:	d10e      	bne.n	8006c68 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	68db      	ldr	r3, [r3, #12]
 8006c50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c54:	2b80      	cmp	r3, #128	; 0x80
 8006c56:	d107      	bne.n	8006c68 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006c60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f000 fa77 	bl	8007156 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	691b      	ldr	r3, [r3, #16]
 8006c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c72:	2b40      	cmp	r3, #64	; 0x40
 8006c74:	d10e      	bne.n	8006c94 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	68db      	ldr	r3, [r3, #12]
 8006c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c80:	2b40      	cmp	r3, #64	; 0x40
 8006c82:	d107      	bne.n	8006c94 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006c8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 f8f9 	bl	8006e86 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	691b      	ldr	r3, [r3, #16]
 8006c9a:	f003 0320 	and.w	r3, r3, #32
 8006c9e:	2b20      	cmp	r3, #32
 8006ca0:	d10e      	bne.n	8006cc0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	68db      	ldr	r3, [r3, #12]
 8006ca8:	f003 0320 	and.w	r3, r3, #32
 8006cac:	2b20      	cmp	r3, #32
 8006cae:	d107      	bne.n	8006cc0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f06f 0220 	mvn.w	r2, #32
 8006cb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f000 fa42 	bl	8007144 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006cc0:	bf00      	nop
 8006cc2:	3708      	adds	r7, #8
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}

08006cc8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b084      	sub	sp, #16
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d101      	bne.n	8006ce0 <HAL_TIM_ConfigClockSource+0x18>
 8006cdc:	2302      	movs	r3, #2
 8006cde:	e0b3      	b.n	8006e48 <HAL_TIM_ConfigClockSource+0x180>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2202      	movs	r2, #2
 8006cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	689b      	ldr	r3, [r3, #8]
 8006cf6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006cfe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d06:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	68fa      	ldr	r2, [r7, #12]
 8006d0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d18:	d03e      	beq.n	8006d98 <HAL_TIM_ConfigClockSource+0xd0>
 8006d1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d1e:	f200 8087 	bhi.w	8006e30 <HAL_TIM_ConfigClockSource+0x168>
 8006d22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d26:	f000 8085 	beq.w	8006e34 <HAL_TIM_ConfigClockSource+0x16c>
 8006d2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d2e:	d87f      	bhi.n	8006e30 <HAL_TIM_ConfigClockSource+0x168>
 8006d30:	2b70      	cmp	r3, #112	; 0x70
 8006d32:	d01a      	beq.n	8006d6a <HAL_TIM_ConfigClockSource+0xa2>
 8006d34:	2b70      	cmp	r3, #112	; 0x70
 8006d36:	d87b      	bhi.n	8006e30 <HAL_TIM_ConfigClockSource+0x168>
 8006d38:	2b60      	cmp	r3, #96	; 0x60
 8006d3a:	d050      	beq.n	8006dde <HAL_TIM_ConfigClockSource+0x116>
 8006d3c:	2b60      	cmp	r3, #96	; 0x60
 8006d3e:	d877      	bhi.n	8006e30 <HAL_TIM_ConfigClockSource+0x168>
 8006d40:	2b50      	cmp	r3, #80	; 0x50
 8006d42:	d03c      	beq.n	8006dbe <HAL_TIM_ConfigClockSource+0xf6>
 8006d44:	2b50      	cmp	r3, #80	; 0x50
 8006d46:	d873      	bhi.n	8006e30 <HAL_TIM_ConfigClockSource+0x168>
 8006d48:	2b40      	cmp	r3, #64	; 0x40
 8006d4a:	d058      	beq.n	8006dfe <HAL_TIM_ConfigClockSource+0x136>
 8006d4c:	2b40      	cmp	r3, #64	; 0x40
 8006d4e:	d86f      	bhi.n	8006e30 <HAL_TIM_ConfigClockSource+0x168>
 8006d50:	2b30      	cmp	r3, #48	; 0x30
 8006d52:	d064      	beq.n	8006e1e <HAL_TIM_ConfigClockSource+0x156>
 8006d54:	2b30      	cmp	r3, #48	; 0x30
 8006d56:	d86b      	bhi.n	8006e30 <HAL_TIM_ConfigClockSource+0x168>
 8006d58:	2b20      	cmp	r3, #32
 8006d5a:	d060      	beq.n	8006e1e <HAL_TIM_ConfigClockSource+0x156>
 8006d5c:	2b20      	cmp	r3, #32
 8006d5e:	d867      	bhi.n	8006e30 <HAL_TIM_ConfigClockSource+0x168>
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d05c      	beq.n	8006e1e <HAL_TIM_ConfigClockSource+0x156>
 8006d64:	2b10      	cmp	r3, #16
 8006d66:	d05a      	beq.n	8006e1e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006d68:	e062      	b.n	8006e30 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6818      	ldr	r0, [r3, #0]
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	6899      	ldr	r1, [r3, #8]
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	685a      	ldr	r2, [r3, #4]
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	68db      	ldr	r3, [r3, #12]
 8006d7a:	f000 f966 	bl	800704a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006d8c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	68fa      	ldr	r2, [r7, #12]
 8006d94:	609a      	str	r2, [r3, #8]
      break;
 8006d96:	e04e      	b.n	8006e36 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6818      	ldr	r0, [r3, #0]
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	6899      	ldr	r1, [r3, #8]
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	685a      	ldr	r2, [r3, #4]
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	68db      	ldr	r3, [r3, #12]
 8006da8:	f000 f94f 	bl	800704a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	689a      	ldr	r2, [r3, #8]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006dba:	609a      	str	r2, [r3, #8]
      break;
 8006dbc:	e03b      	b.n	8006e36 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6818      	ldr	r0, [r3, #0]
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	6859      	ldr	r1, [r3, #4]
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	68db      	ldr	r3, [r3, #12]
 8006dca:	461a      	mov	r2, r3
 8006dcc:	f000 f8c6 	bl	8006f5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	2150      	movs	r1, #80	; 0x50
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f000 f91d 	bl	8007016 <TIM_ITRx_SetConfig>
      break;
 8006ddc:	e02b      	b.n	8006e36 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6818      	ldr	r0, [r3, #0]
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	6859      	ldr	r1, [r3, #4]
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	68db      	ldr	r3, [r3, #12]
 8006dea:	461a      	mov	r2, r3
 8006dec:	f000 f8e4 	bl	8006fb8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	2160      	movs	r1, #96	; 0x60
 8006df6:	4618      	mov	r0, r3
 8006df8:	f000 f90d 	bl	8007016 <TIM_ITRx_SetConfig>
      break;
 8006dfc:	e01b      	b.n	8006e36 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6818      	ldr	r0, [r3, #0]
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	6859      	ldr	r1, [r3, #4]
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	68db      	ldr	r3, [r3, #12]
 8006e0a:	461a      	mov	r2, r3
 8006e0c:	f000 f8a6 	bl	8006f5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	2140      	movs	r1, #64	; 0x40
 8006e16:	4618      	mov	r0, r3
 8006e18:	f000 f8fd 	bl	8007016 <TIM_ITRx_SetConfig>
      break;
 8006e1c:	e00b      	b.n	8006e36 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681a      	ldr	r2, [r3, #0]
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4619      	mov	r1, r3
 8006e28:	4610      	mov	r0, r2
 8006e2a:	f000 f8f4 	bl	8007016 <TIM_ITRx_SetConfig>
        break;
 8006e2e:	e002      	b.n	8006e36 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006e30:	bf00      	nop
 8006e32:	e000      	b.n	8006e36 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006e34:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2201      	movs	r2, #1
 8006e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2200      	movs	r2, #0
 8006e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e46:	2300      	movs	r3, #0
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3710      	adds	r7, #16
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}

08006e50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b083      	sub	sp, #12
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006e58:	bf00      	nop
 8006e5a:	370c      	adds	r7, #12
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bc80      	pop	{r7}
 8006e60:	4770      	bx	lr

08006e62 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006e62:	b480      	push	{r7}
 8006e64:	b083      	sub	sp, #12
 8006e66:	af00      	add	r7, sp, #0
 8006e68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006e6a:	bf00      	nop
 8006e6c:	370c      	adds	r7, #12
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bc80      	pop	{r7}
 8006e72:	4770      	bx	lr

08006e74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b083      	sub	sp, #12
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e7c:	bf00      	nop
 8006e7e:	370c      	adds	r7, #12
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bc80      	pop	{r7}
 8006e84:	4770      	bx	lr

08006e86 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e86:	b480      	push	{r7}
 8006e88:	b083      	sub	sp, #12
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e8e:	bf00      	nop
 8006e90:	370c      	adds	r7, #12
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bc80      	pop	{r7}
 8006e96:	4770      	bx	lr

08006e98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b085      	sub	sp, #20
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	4a29      	ldr	r2, [pc, #164]	; (8006f50 <TIM_Base_SetConfig+0xb8>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d00b      	beq.n	8006ec8 <TIM_Base_SetConfig+0x30>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eb6:	d007      	beq.n	8006ec8 <TIM_Base_SetConfig+0x30>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	4a26      	ldr	r2, [pc, #152]	; (8006f54 <TIM_Base_SetConfig+0xbc>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d003      	beq.n	8006ec8 <TIM_Base_SetConfig+0x30>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	4a25      	ldr	r2, [pc, #148]	; (8006f58 <TIM_Base_SetConfig+0xc0>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d108      	bne.n	8006eda <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ece:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	68fa      	ldr	r2, [r7, #12]
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	4a1c      	ldr	r2, [pc, #112]	; (8006f50 <TIM_Base_SetConfig+0xb8>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d00b      	beq.n	8006efa <TIM_Base_SetConfig+0x62>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ee8:	d007      	beq.n	8006efa <TIM_Base_SetConfig+0x62>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	4a19      	ldr	r2, [pc, #100]	; (8006f54 <TIM_Base_SetConfig+0xbc>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d003      	beq.n	8006efa <TIM_Base_SetConfig+0x62>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	4a18      	ldr	r2, [pc, #96]	; (8006f58 <TIM_Base_SetConfig+0xc0>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d108      	bne.n	8006f0c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	68db      	ldr	r3, [r3, #12]
 8006f06:	68fa      	ldr	r2, [r7, #12]
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	695b      	ldr	r3, [r3, #20]
 8006f16:	4313      	orrs	r3, r2
 8006f18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	68fa      	ldr	r2, [r7, #12]
 8006f1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	689a      	ldr	r2, [r3, #8]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	4a07      	ldr	r2, [pc, #28]	; (8006f50 <TIM_Base_SetConfig+0xb8>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d103      	bne.n	8006f40 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	691a      	ldr	r2, [r3, #16]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2201      	movs	r2, #1
 8006f44:	615a      	str	r2, [r3, #20]
}
 8006f46:	bf00      	nop
 8006f48:	3714      	adds	r7, #20
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bc80      	pop	{r7}
 8006f4e:	4770      	bx	lr
 8006f50:	40012c00 	.word	0x40012c00
 8006f54:	40000400 	.word	0x40000400
 8006f58:	40000800 	.word	0x40000800

08006f5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b087      	sub	sp, #28
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	60f8      	str	r0, [r7, #12]
 8006f64:	60b9      	str	r1, [r7, #8]
 8006f66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	6a1b      	ldr	r3, [r3, #32]
 8006f6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	6a1b      	ldr	r3, [r3, #32]
 8006f72:	f023 0201 	bic.w	r2, r3, #1
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	699b      	ldr	r3, [r3, #24]
 8006f7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	011b      	lsls	r3, r3, #4
 8006f8c:	693a      	ldr	r2, [r7, #16]
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	f023 030a 	bic.w	r3, r3, #10
 8006f98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006f9a:	697a      	ldr	r2, [r7, #20]
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	693a      	ldr	r2, [r7, #16]
 8006fa6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	697a      	ldr	r2, [r7, #20]
 8006fac:	621a      	str	r2, [r3, #32]
}
 8006fae:	bf00      	nop
 8006fb0:	371c      	adds	r7, #28
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bc80      	pop	{r7}
 8006fb6:	4770      	bx	lr

08006fb8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b087      	sub	sp, #28
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	60f8      	str	r0, [r7, #12]
 8006fc0:	60b9      	str	r1, [r7, #8]
 8006fc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	6a1b      	ldr	r3, [r3, #32]
 8006fc8:	f023 0210 	bic.w	r2, r3, #16
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	699b      	ldr	r3, [r3, #24]
 8006fd4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	6a1b      	ldr	r3, [r3, #32]
 8006fda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006fe2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	031b      	lsls	r3, r3, #12
 8006fe8:	697a      	ldr	r2, [r7, #20]
 8006fea:	4313      	orrs	r3, r2
 8006fec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006ff4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	011b      	lsls	r3, r3, #4
 8006ffa:	693a      	ldr	r2, [r7, #16]
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	697a      	ldr	r2, [r7, #20]
 8007004:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	693a      	ldr	r2, [r7, #16]
 800700a:	621a      	str	r2, [r3, #32]
}
 800700c:	bf00      	nop
 800700e:	371c      	adds	r7, #28
 8007010:	46bd      	mov	sp, r7
 8007012:	bc80      	pop	{r7}
 8007014:	4770      	bx	lr

08007016 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007016:	b480      	push	{r7}
 8007018:	b085      	sub	sp, #20
 800701a:	af00      	add	r7, sp, #0
 800701c:	6078      	str	r0, [r7, #4]
 800701e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800702c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800702e:	683a      	ldr	r2, [r7, #0]
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	4313      	orrs	r3, r2
 8007034:	f043 0307 	orr.w	r3, r3, #7
 8007038:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	68fa      	ldr	r2, [r7, #12]
 800703e:	609a      	str	r2, [r3, #8]
}
 8007040:	bf00      	nop
 8007042:	3714      	adds	r7, #20
 8007044:	46bd      	mov	sp, r7
 8007046:	bc80      	pop	{r7}
 8007048:	4770      	bx	lr

0800704a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800704a:	b480      	push	{r7}
 800704c:	b087      	sub	sp, #28
 800704e:	af00      	add	r7, sp, #0
 8007050:	60f8      	str	r0, [r7, #12]
 8007052:	60b9      	str	r1, [r7, #8]
 8007054:	607a      	str	r2, [r7, #4]
 8007056:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007064:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	021a      	lsls	r2, r3, #8
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	431a      	orrs	r2, r3
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	4313      	orrs	r3, r2
 8007072:	697a      	ldr	r2, [r7, #20]
 8007074:	4313      	orrs	r3, r2
 8007076:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	697a      	ldr	r2, [r7, #20]
 800707c:	609a      	str	r2, [r3, #8]
}
 800707e:	bf00      	nop
 8007080:	371c      	adds	r7, #28
 8007082:	46bd      	mov	sp, r7
 8007084:	bc80      	pop	{r7}
 8007086:	4770      	bx	lr

08007088 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007088:	b480      	push	{r7}
 800708a:	b085      	sub	sp, #20
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007098:	2b01      	cmp	r3, #1
 800709a:	d101      	bne.n	80070a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800709c:	2302      	movs	r3, #2
 800709e:	e046      	b.n	800712e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2201      	movs	r2, #1
 80070a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2202      	movs	r2, #2
 80070ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	689b      	ldr	r3, [r3, #8]
 80070be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	68fa      	ldr	r2, [r7, #12]
 80070ce:	4313      	orrs	r3, r2
 80070d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	68fa      	ldr	r2, [r7, #12]
 80070d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a16      	ldr	r2, [pc, #88]	; (8007138 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d00e      	beq.n	8007102 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070ec:	d009      	beq.n	8007102 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a12      	ldr	r2, [pc, #72]	; (800713c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d004      	beq.n	8007102 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a10      	ldr	r2, [pc, #64]	; (8007140 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d10c      	bne.n	800711c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007108:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	68ba      	ldr	r2, [r7, #8]
 8007110:	4313      	orrs	r3, r2
 8007112:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	68ba      	ldr	r2, [r7, #8]
 800711a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2201      	movs	r2, #1
 8007120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2200      	movs	r2, #0
 8007128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800712c:	2300      	movs	r3, #0
}
 800712e:	4618      	mov	r0, r3
 8007130:	3714      	adds	r7, #20
 8007132:	46bd      	mov	sp, r7
 8007134:	bc80      	pop	{r7}
 8007136:	4770      	bx	lr
 8007138:	40012c00 	.word	0x40012c00
 800713c:	40000400 	.word	0x40000400
 8007140:	40000800 	.word	0x40000800

08007144 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007144:	b480      	push	{r7}
 8007146:	b083      	sub	sp, #12
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800714c:	bf00      	nop
 800714e:	370c      	adds	r7, #12
 8007150:	46bd      	mov	sp, r7
 8007152:	bc80      	pop	{r7}
 8007154:	4770      	bx	lr

08007156 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007156:	b480      	push	{r7}
 8007158:	b083      	sub	sp, #12
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800715e:	bf00      	nop
 8007160:	370c      	adds	r7, #12
 8007162:	46bd      	mov	sp, r7
 8007164:	bc80      	pop	{r7}
 8007166:	4770      	bx	lr

08007168 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b082      	sub	sp, #8
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d101      	bne.n	800717a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007176:	2301      	movs	r3, #1
 8007178:	e03f      	b.n	80071fa <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007180:	b2db      	uxtb	r3, r3
 8007182:	2b00      	cmp	r3, #0
 8007184:	d106      	bne.n	8007194 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2200      	movs	r2, #0
 800718a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f7fa febe 	bl	8001f10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2224      	movs	r2, #36	; 0x24
 8007198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	68da      	ldr	r2, [r3, #12]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80071aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f000 fc85 	bl	8007abc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	691a      	ldr	r2, [r3, #16]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80071c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	695a      	ldr	r2, [r3, #20]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80071d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	68da      	ldr	r2, [r3, #12]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80071e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2200      	movs	r2, #0
 80071e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2220      	movs	r2, #32
 80071ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2220      	movs	r2, #32
 80071f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80071f8:	2300      	movs	r3, #0
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3708      	adds	r7, #8
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}

08007202 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007202:	b580      	push	{r7, lr}
 8007204:	b08a      	sub	sp, #40	; 0x28
 8007206:	af02      	add	r7, sp, #8
 8007208:	60f8      	str	r0, [r7, #12]
 800720a:	60b9      	str	r1, [r7, #8]
 800720c:	603b      	str	r3, [r7, #0]
 800720e:	4613      	mov	r3, r2
 8007210:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007212:	2300      	movs	r3, #0
 8007214:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800721c:	b2db      	uxtb	r3, r3
 800721e:	2b20      	cmp	r3, #32
 8007220:	d17c      	bne.n	800731c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d002      	beq.n	800722e <HAL_UART_Transmit+0x2c>
 8007228:	88fb      	ldrh	r3, [r7, #6]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d101      	bne.n	8007232 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800722e:	2301      	movs	r3, #1
 8007230:	e075      	b.n	800731e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007238:	2b01      	cmp	r3, #1
 800723a:	d101      	bne.n	8007240 <HAL_UART_Transmit+0x3e>
 800723c:	2302      	movs	r3, #2
 800723e:	e06e      	b.n	800731e <HAL_UART_Transmit+0x11c>
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2201      	movs	r2, #1
 8007244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2200      	movs	r2, #0
 800724c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2221      	movs	r2, #33	; 0x21
 8007252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007256:	f7fb f875 	bl	8002344 <HAL_GetTick>
 800725a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	88fa      	ldrh	r2, [r7, #6]
 8007260:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	88fa      	ldrh	r2, [r7, #6]
 8007266:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	689b      	ldr	r3, [r3, #8]
 800726c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007270:	d108      	bne.n	8007284 <HAL_UART_Transmit+0x82>
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	691b      	ldr	r3, [r3, #16]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d104      	bne.n	8007284 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800727a:	2300      	movs	r3, #0
 800727c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	61bb      	str	r3, [r7, #24]
 8007282:	e003      	b.n	800728c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007288:	2300      	movs	r3, #0
 800728a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2200      	movs	r2, #0
 8007290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007294:	e02a      	b.n	80072ec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	9300      	str	r3, [sp, #0]
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	2200      	movs	r2, #0
 800729e:	2180      	movs	r1, #128	; 0x80
 80072a0:	68f8      	ldr	r0, [r7, #12]
 80072a2:	f000 fa38 	bl	8007716 <UART_WaitOnFlagUntilTimeout>
 80072a6:	4603      	mov	r3, r0
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d001      	beq.n	80072b0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80072ac:	2303      	movs	r3, #3
 80072ae:	e036      	b.n	800731e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80072b0:	69fb      	ldr	r3, [r7, #28]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d10b      	bne.n	80072ce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80072b6:	69bb      	ldr	r3, [r7, #24]
 80072b8:	881b      	ldrh	r3, [r3, #0]
 80072ba:	461a      	mov	r2, r3
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80072c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80072c6:	69bb      	ldr	r3, [r7, #24]
 80072c8:	3302      	adds	r3, #2
 80072ca:	61bb      	str	r3, [r7, #24]
 80072cc:	e007      	b.n	80072de <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80072ce:	69fb      	ldr	r3, [r7, #28]
 80072d0:	781a      	ldrb	r2, [r3, #0]
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80072d8:	69fb      	ldr	r3, [r7, #28]
 80072da:	3301      	adds	r3, #1
 80072dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	3b01      	subs	r3, #1
 80072e6:	b29a      	uxth	r2, r3
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80072f0:	b29b      	uxth	r3, r3
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d1cf      	bne.n	8007296 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	9300      	str	r3, [sp, #0]
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	2200      	movs	r2, #0
 80072fe:	2140      	movs	r1, #64	; 0x40
 8007300:	68f8      	ldr	r0, [r7, #12]
 8007302:	f000 fa08 	bl	8007716 <UART_WaitOnFlagUntilTimeout>
 8007306:	4603      	mov	r3, r0
 8007308:	2b00      	cmp	r3, #0
 800730a:	d001      	beq.n	8007310 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800730c:	2303      	movs	r3, #3
 800730e:	e006      	b.n	800731e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2220      	movs	r2, #32
 8007314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007318:	2300      	movs	r3, #0
 800731a:	e000      	b.n	800731e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800731c:	2302      	movs	r3, #2
  }
}
 800731e:	4618      	mov	r0, r3
 8007320:	3720      	adds	r7, #32
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}

08007326 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007326:	b580      	push	{r7, lr}
 8007328:	b084      	sub	sp, #16
 800732a:	af00      	add	r7, sp, #0
 800732c:	60f8      	str	r0, [r7, #12]
 800732e:	60b9      	str	r1, [r7, #8]
 8007330:	4613      	mov	r3, r2
 8007332:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800733a:	b2db      	uxtb	r3, r3
 800733c:	2b20      	cmp	r3, #32
 800733e:	d11d      	bne.n	800737c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d002      	beq.n	800734c <HAL_UART_Receive_IT+0x26>
 8007346:	88fb      	ldrh	r3, [r7, #6]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d101      	bne.n	8007350 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800734c:	2301      	movs	r3, #1
 800734e:	e016      	b.n	800737e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007356:	2b01      	cmp	r3, #1
 8007358:	d101      	bne.n	800735e <HAL_UART_Receive_IT+0x38>
 800735a:	2302      	movs	r3, #2
 800735c:	e00f      	b.n	800737e <HAL_UART_Receive_IT+0x58>
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2201      	movs	r2, #1
 8007362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2200      	movs	r2, #0
 800736a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800736c:	88fb      	ldrh	r3, [r7, #6]
 800736e:	461a      	mov	r2, r3
 8007370:	68b9      	ldr	r1, [r7, #8]
 8007372:	68f8      	ldr	r0, [r7, #12]
 8007374:	f000 fa19 	bl	80077aa <UART_Start_Receive_IT>
 8007378:	4603      	mov	r3, r0
 800737a:	e000      	b.n	800737e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800737c:	2302      	movs	r3, #2
  }
}
 800737e:	4618      	mov	r0, r3
 8007380:	3710      	adds	r7, #16
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}
	...

08007388 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b08a      	sub	sp, #40	; 0x28
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	68db      	ldr	r3, [r3, #12]
 800739e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	695b      	ldr	r3, [r3, #20]
 80073a6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80073a8:	2300      	movs	r3, #0
 80073aa:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80073ac:	2300      	movs	r3, #0
 80073ae:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80073b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b2:	f003 030f 	and.w	r3, r3, #15
 80073b6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80073b8:	69bb      	ldr	r3, [r7, #24]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d10d      	bne.n	80073da <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80073be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c0:	f003 0320 	and.w	r3, r3, #32
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d008      	beq.n	80073da <HAL_UART_IRQHandler+0x52>
 80073c8:	6a3b      	ldr	r3, [r7, #32]
 80073ca:	f003 0320 	and.w	r3, r3, #32
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d003      	beq.n	80073da <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 fac9 	bl	800796a <UART_Receive_IT>
      return;
 80073d8:	e17b      	b.n	80076d2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80073da:	69bb      	ldr	r3, [r7, #24]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	f000 80b1 	beq.w	8007544 <HAL_UART_IRQHandler+0x1bc>
 80073e2:	69fb      	ldr	r3, [r7, #28]
 80073e4:	f003 0301 	and.w	r3, r3, #1
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d105      	bne.n	80073f8 <HAL_UART_IRQHandler+0x70>
 80073ec:	6a3b      	ldr	r3, [r7, #32]
 80073ee:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	f000 80a6 	beq.w	8007544 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80073f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fa:	f003 0301 	and.w	r3, r3, #1
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d00a      	beq.n	8007418 <HAL_UART_IRQHandler+0x90>
 8007402:	6a3b      	ldr	r3, [r7, #32]
 8007404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007408:	2b00      	cmp	r3, #0
 800740a:	d005      	beq.n	8007418 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007410:	f043 0201 	orr.w	r2, r3, #1
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741a:	f003 0304 	and.w	r3, r3, #4
 800741e:	2b00      	cmp	r3, #0
 8007420:	d00a      	beq.n	8007438 <HAL_UART_IRQHandler+0xb0>
 8007422:	69fb      	ldr	r3, [r7, #28]
 8007424:	f003 0301 	and.w	r3, r3, #1
 8007428:	2b00      	cmp	r3, #0
 800742a:	d005      	beq.n	8007438 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007430:	f043 0202 	orr.w	r2, r3, #2
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800743a:	f003 0302 	and.w	r3, r3, #2
 800743e:	2b00      	cmp	r3, #0
 8007440:	d00a      	beq.n	8007458 <HAL_UART_IRQHandler+0xd0>
 8007442:	69fb      	ldr	r3, [r7, #28]
 8007444:	f003 0301 	and.w	r3, r3, #1
 8007448:	2b00      	cmp	r3, #0
 800744a:	d005      	beq.n	8007458 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007450:	f043 0204 	orr.w	r2, r3, #4
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745a:	f003 0308 	and.w	r3, r3, #8
 800745e:	2b00      	cmp	r3, #0
 8007460:	d00f      	beq.n	8007482 <HAL_UART_IRQHandler+0xfa>
 8007462:	6a3b      	ldr	r3, [r7, #32]
 8007464:	f003 0320 	and.w	r3, r3, #32
 8007468:	2b00      	cmp	r3, #0
 800746a:	d104      	bne.n	8007476 <HAL_UART_IRQHandler+0xee>
 800746c:	69fb      	ldr	r3, [r7, #28]
 800746e:	f003 0301 	and.w	r3, r3, #1
 8007472:	2b00      	cmp	r3, #0
 8007474:	d005      	beq.n	8007482 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800747a:	f043 0208 	orr.w	r2, r3, #8
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007486:	2b00      	cmp	r3, #0
 8007488:	f000 811e 	beq.w	80076c8 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800748c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800748e:	f003 0320 	and.w	r3, r3, #32
 8007492:	2b00      	cmp	r3, #0
 8007494:	d007      	beq.n	80074a6 <HAL_UART_IRQHandler+0x11e>
 8007496:	6a3b      	ldr	r3, [r7, #32]
 8007498:	f003 0320 	and.w	r3, r3, #32
 800749c:	2b00      	cmp	r3, #0
 800749e:	d002      	beq.n	80074a6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f000 fa62 	bl	800796a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	695b      	ldr	r3, [r3, #20]
 80074ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	bf14      	ite	ne
 80074b4:	2301      	movne	r3, #1
 80074b6:	2300      	moveq	r3, #0
 80074b8:	b2db      	uxtb	r3, r3
 80074ba:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c0:	f003 0308 	and.w	r3, r3, #8
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d102      	bne.n	80074ce <HAL_UART_IRQHandler+0x146>
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d031      	beq.n	8007532 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f000 f9a4 	bl	800781c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	695b      	ldr	r3, [r3, #20]
 80074da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d023      	beq.n	800752a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	695a      	ldr	r2, [r3, #20]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074f0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d013      	beq.n	8007522 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074fe:	4a76      	ldr	r2, [pc, #472]	; (80076d8 <HAL_UART_IRQHandler+0x350>)
 8007500:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007506:	4618      	mov	r0, r3
 8007508:	f7fb fd6a 	bl	8002fe0 <HAL_DMA_Abort_IT>
 800750c:	4603      	mov	r3, r0
 800750e:	2b00      	cmp	r3, #0
 8007510:	d016      	beq.n	8007540 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007518:	687a      	ldr	r2, [r7, #4]
 800751a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800751c:	4610      	mov	r0, r2
 800751e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007520:	e00e      	b.n	8007540 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f000 f8e3 	bl	80076ee <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007528:	e00a      	b.n	8007540 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f000 f8df 	bl	80076ee <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007530:	e006      	b.n	8007540 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f000 f8db 	bl	80076ee <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2200      	movs	r2, #0
 800753c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800753e:	e0c3      	b.n	80076c8 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007540:	bf00      	nop
    return;
 8007542:	e0c1      	b.n	80076c8 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007548:	2b01      	cmp	r3, #1
 800754a:	f040 80a1 	bne.w	8007690 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800754e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007550:	f003 0310 	and.w	r3, r3, #16
 8007554:	2b00      	cmp	r3, #0
 8007556:	f000 809b 	beq.w	8007690 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800755a:	6a3b      	ldr	r3, [r7, #32]
 800755c:	f003 0310 	and.w	r3, r3, #16
 8007560:	2b00      	cmp	r3, #0
 8007562:	f000 8095 	beq.w	8007690 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007566:	2300      	movs	r3, #0
 8007568:	60fb      	str	r3, [r7, #12]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	60fb      	str	r3, [r7, #12]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	685b      	ldr	r3, [r3, #4]
 8007578:	60fb      	str	r3, [r7, #12]
 800757a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	695b      	ldr	r3, [r3, #20]
 8007582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007586:	2b00      	cmp	r3, #0
 8007588:	d04e      	beq.n	8007628 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8007594:	8a3b      	ldrh	r3, [r7, #16]
 8007596:	2b00      	cmp	r3, #0
 8007598:	f000 8098 	beq.w	80076cc <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80075a0:	8a3a      	ldrh	r2, [r7, #16]
 80075a2:	429a      	cmp	r2, r3
 80075a4:	f080 8092 	bcs.w	80076cc <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	8a3a      	ldrh	r2, [r7, #16]
 80075ac:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075b2:	699b      	ldr	r3, [r3, #24]
 80075b4:	2b20      	cmp	r3, #32
 80075b6:	d02b      	beq.n	8007610 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	68da      	ldr	r2, [r3, #12]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80075c6:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	695a      	ldr	r2, [r3, #20]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f022 0201 	bic.w	r2, r2, #1
 80075d6:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	695a      	ldr	r2, [r3, #20]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075e6:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2220      	movs	r2, #32
 80075ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2200      	movs	r2, #0
 80075f4:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	68da      	ldr	r2, [r3, #12]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f022 0210 	bic.w	r2, r2, #16
 8007604:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800760a:	4618      	mov	r0, r3
 800760c:	f7fb fcad 	bl	8002f6a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007618:	b29b      	uxth	r3, r3
 800761a:	1ad3      	subs	r3, r2, r3
 800761c:	b29b      	uxth	r3, r3
 800761e:	4619      	mov	r1, r3
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f000 f86d 	bl	8007700 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007626:	e051      	b.n	80076cc <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007630:	b29b      	uxth	r3, r3
 8007632:	1ad3      	subs	r3, r2, r3
 8007634:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800763a:	b29b      	uxth	r3, r3
 800763c:	2b00      	cmp	r3, #0
 800763e:	d047      	beq.n	80076d0 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8007640:	8a7b      	ldrh	r3, [r7, #18]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d044      	beq.n	80076d0 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	68da      	ldr	r2, [r3, #12]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007654:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	695a      	ldr	r2, [r3, #20]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f022 0201 	bic.w	r2, r2, #1
 8007664:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2220      	movs	r2, #32
 800766a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2200      	movs	r2, #0
 8007672:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	68da      	ldr	r2, [r3, #12]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f022 0210 	bic.w	r2, r2, #16
 8007682:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007684:	8a7b      	ldrh	r3, [r7, #18]
 8007686:	4619      	mov	r1, r3
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f000 f839 	bl	8007700 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800768e:	e01f      	b.n	80076d0 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007696:	2b00      	cmp	r3, #0
 8007698:	d008      	beq.n	80076ac <HAL_UART_IRQHandler+0x324>
 800769a:	6a3b      	ldr	r3, [r7, #32]
 800769c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d003      	beq.n	80076ac <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f000 f8f9 	bl	800789c <UART_Transmit_IT>
    return;
 80076aa:	e012      	b.n	80076d2 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80076ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d00d      	beq.n	80076d2 <HAL_UART_IRQHandler+0x34a>
 80076b6:	6a3b      	ldr	r3, [r7, #32]
 80076b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d008      	beq.n	80076d2 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f000 f93a 	bl	800793a <UART_EndTransmit_IT>
    return;
 80076c6:	e004      	b.n	80076d2 <HAL_UART_IRQHandler+0x34a>
    return;
 80076c8:	bf00      	nop
 80076ca:	e002      	b.n	80076d2 <HAL_UART_IRQHandler+0x34a>
      return;
 80076cc:	bf00      	nop
 80076ce:	e000      	b.n	80076d2 <HAL_UART_IRQHandler+0x34a>
      return;
 80076d0:	bf00      	nop
  }
}
 80076d2:	3728      	adds	r7, #40	; 0x28
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}
 80076d8:	08007875 	.word	0x08007875

080076dc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80076dc:	b480      	push	{r7}
 80076de:	b083      	sub	sp, #12
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80076e4:	bf00      	nop
 80076e6:	370c      	adds	r7, #12
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bc80      	pop	{r7}
 80076ec:	4770      	bx	lr

080076ee <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80076ee:	b480      	push	{r7}
 80076f0:	b083      	sub	sp, #12
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80076f6:	bf00      	nop
 80076f8:	370c      	adds	r7, #12
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bc80      	pop	{r7}
 80076fe:	4770      	bx	lr

08007700 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007700:	b480      	push	{r7}
 8007702:	b083      	sub	sp, #12
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	460b      	mov	r3, r1
 800770a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800770c:	bf00      	nop
 800770e:	370c      	adds	r7, #12
 8007710:	46bd      	mov	sp, r7
 8007712:	bc80      	pop	{r7}
 8007714:	4770      	bx	lr

08007716 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007716:	b580      	push	{r7, lr}
 8007718:	b084      	sub	sp, #16
 800771a:	af00      	add	r7, sp, #0
 800771c:	60f8      	str	r0, [r7, #12]
 800771e:	60b9      	str	r1, [r7, #8]
 8007720:	603b      	str	r3, [r7, #0]
 8007722:	4613      	mov	r3, r2
 8007724:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007726:	e02c      	b.n	8007782 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007728:	69bb      	ldr	r3, [r7, #24]
 800772a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800772e:	d028      	beq.n	8007782 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007730:	69bb      	ldr	r3, [r7, #24]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d007      	beq.n	8007746 <UART_WaitOnFlagUntilTimeout+0x30>
 8007736:	f7fa fe05 	bl	8002344 <HAL_GetTick>
 800773a:	4602      	mov	r2, r0
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	1ad3      	subs	r3, r2, r3
 8007740:	69ba      	ldr	r2, [r7, #24]
 8007742:	429a      	cmp	r2, r3
 8007744:	d21d      	bcs.n	8007782 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	68da      	ldr	r2, [r3, #12]
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007754:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	695a      	ldr	r2, [r3, #20]
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f022 0201 	bic.w	r2, r2, #1
 8007764:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2220      	movs	r2, #32
 800776a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2220      	movs	r2, #32
 8007772:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2200      	movs	r2, #0
 800777a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800777e:	2303      	movs	r3, #3
 8007780:	e00f      	b.n	80077a2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	681a      	ldr	r2, [r3, #0]
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	4013      	ands	r3, r2
 800778c:	68ba      	ldr	r2, [r7, #8]
 800778e:	429a      	cmp	r2, r3
 8007790:	bf0c      	ite	eq
 8007792:	2301      	moveq	r3, #1
 8007794:	2300      	movne	r3, #0
 8007796:	b2db      	uxtb	r3, r3
 8007798:	461a      	mov	r2, r3
 800779a:	79fb      	ldrb	r3, [r7, #7]
 800779c:	429a      	cmp	r2, r3
 800779e:	d0c3      	beq.n	8007728 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80077a0:	2300      	movs	r3, #0
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3710      	adds	r7, #16
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}

080077aa <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80077aa:	b480      	push	{r7}
 80077ac:	b085      	sub	sp, #20
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	60f8      	str	r0, [r7, #12]
 80077b2:	60b9      	str	r1, [r7, #8]
 80077b4:	4613      	mov	r3, r2
 80077b6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	68ba      	ldr	r2, [r7, #8]
 80077bc:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	88fa      	ldrh	r2, [r7, #6]
 80077c2:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	88fa      	ldrh	r2, [r7, #6]
 80077c8:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2200      	movs	r2, #0
 80077ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	2222      	movs	r2, #34	; 0x22
 80077d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2200      	movs	r2, #0
 80077dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	68da      	ldr	r2, [r3, #12]
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80077ee:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	695a      	ldr	r2, [r3, #20]
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f042 0201 	orr.w	r2, r2, #1
 80077fe:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	68da      	ldr	r2, [r3, #12]
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f042 0220 	orr.w	r2, r2, #32
 800780e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007810:	2300      	movs	r3, #0
}
 8007812:	4618      	mov	r0, r3
 8007814:	3714      	adds	r7, #20
 8007816:	46bd      	mov	sp, r7
 8007818:	bc80      	pop	{r7}
 800781a:	4770      	bx	lr

0800781c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800781c:	b480      	push	{r7}
 800781e:	b083      	sub	sp, #12
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	68da      	ldr	r2, [r3, #12]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007832:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	695a      	ldr	r2, [r3, #20]
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f022 0201 	bic.w	r2, r2, #1
 8007842:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007848:	2b01      	cmp	r3, #1
 800784a:	d107      	bne.n	800785c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	68da      	ldr	r2, [r3, #12]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f022 0210 	bic.w	r2, r2, #16
 800785a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2220      	movs	r2, #32
 8007860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2200      	movs	r2, #0
 8007868:	631a      	str	r2, [r3, #48]	; 0x30
}
 800786a:	bf00      	nop
 800786c:	370c      	adds	r7, #12
 800786e:	46bd      	mov	sp, r7
 8007870:	bc80      	pop	{r7}
 8007872:	4770      	bx	lr

08007874 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b084      	sub	sp, #16
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007880:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2200      	movs	r2, #0
 8007886:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2200      	movs	r2, #0
 800788c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800788e:	68f8      	ldr	r0, [r7, #12]
 8007890:	f7ff ff2d 	bl	80076ee <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007894:	bf00      	nop
 8007896:	3710      	adds	r7, #16
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}

0800789c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800789c:	b480      	push	{r7}
 800789e:	b085      	sub	sp, #20
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078aa:	b2db      	uxtb	r3, r3
 80078ac:	2b21      	cmp	r3, #33	; 0x21
 80078ae:	d13e      	bne.n	800792e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078b8:	d114      	bne.n	80078e4 <UART_Transmit_IT+0x48>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	691b      	ldr	r3, [r3, #16]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d110      	bne.n	80078e4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6a1b      	ldr	r3, [r3, #32]
 80078c6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	881b      	ldrh	r3, [r3, #0]
 80078cc:	461a      	mov	r2, r3
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80078d6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6a1b      	ldr	r3, [r3, #32]
 80078dc:	1c9a      	adds	r2, r3, #2
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	621a      	str	r2, [r3, #32]
 80078e2:	e008      	b.n	80078f6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6a1b      	ldr	r3, [r3, #32]
 80078e8:	1c59      	adds	r1, r3, #1
 80078ea:	687a      	ldr	r2, [r7, #4]
 80078ec:	6211      	str	r1, [r2, #32]
 80078ee:	781a      	ldrb	r2, [r3, #0]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	3b01      	subs	r3, #1
 80078fe:	b29b      	uxth	r3, r3
 8007900:	687a      	ldr	r2, [r7, #4]
 8007902:	4619      	mov	r1, r3
 8007904:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007906:	2b00      	cmp	r3, #0
 8007908:	d10f      	bne.n	800792a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	68da      	ldr	r2, [r3, #12]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007918:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	68da      	ldr	r2, [r3, #12]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007928:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800792a:	2300      	movs	r3, #0
 800792c:	e000      	b.n	8007930 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800792e:	2302      	movs	r3, #2
  }
}
 8007930:	4618      	mov	r0, r3
 8007932:	3714      	adds	r7, #20
 8007934:	46bd      	mov	sp, r7
 8007936:	bc80      	pop	{r7}
 8007938:	4770      	bx	lr

0800793a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800793a:	b580      	push	{r7, lr}
 800793c:	b082      	sub	sp, #8
 800793e:	af00      	add	r7, sp, #0
 8007940:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	68da      	ldr	r2, [r3, #12]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007950:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2220      	movs	r2, #32
 8007956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f7ff febe 	bl	80076dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007960:	2300      	movs	r3, #0
}
 8007962:	4618      	mov	r0, r3
 8007964:	3708      	adds	r7, #8
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}

0800796a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800796a:	b580      	push	{r7, lr}
 800796c:	b086      	sub	sp, #24
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007978:	b2db      	uxtb	r3, r3
 800797a:	2b22      	cmp	r3, #34	; 0x22
 800797c:	f040 8099 	bne.w	8007ab2 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007988:	d117      	bne.n	80079ba <UART_Receive_IT+0x50>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	691b      	ldr	r3, [r3, #16]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d113      	bne.n	80079ba <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007992:	2300      	movs	r3, #0
 8007994:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800799a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	b29b      	uxth	r3, r3
 80079a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079a8:	b29a      	uxth	r2, r3
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079b2:	1c9a      	adds	r2, r3, #2
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	629a      	str	r2, [r3, #40]	; 0x28
 80079b8:	e026      	b.n	8007a08 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079be:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80079c0:	2300      	movs	r3, #0
 80079c2:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	689b      	ldr	r3, [r3, #8]
 80079c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079cc:	d007      	beq.n	80079de <UART_Receive_IT+0x74>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	689b      	ldr	r3, [r3, #8]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d10a      	bne.n	80079ec <UART_Receive_IT+0x82>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	691b      	ldr	r3, [r3, #16]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d106      	bne.n	80079ec <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	b2da      	uxtb	r2, r3
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	701a      	strb	r2, [r3, #0]
 80079ea:	e008      	b.n	80079fe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	b2db      	uxtb	r3, r3
 80079f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079f8:	b2da      	uxtb	r2, r3
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a02:	1c5a      	adds	r2, r3, #1
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a0c:	b29b      	uxth	r3, r3
 8007a0e:	3b01      	subs	r3, #1
 8007a10:	b29b      	uxth	r3, r3
 8007a12:	687a      	ldr	r2, [r7, #4]
 8007a14:	4619      	mov	r1, r3
 8007a16:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d148      	bne.n	8007aae <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	68da      	ldr	r2, [r3, #12]
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f022 0220 	bic.w	r2, r2, #32
 8007a2a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	68da      	ldr	r2, [r3, #12]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007a3a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	695a      	ldr	r2, [r3, #20]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f022 0201 	bic.w	r2, r2, #1
 8007a4a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2220      	movs	r2, #32
 8007a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	d123      	bne.n	8007aa4 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	68da      	ldr	r2, [r3, #12]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f022 0210 	bic.w	r2, r2, #16
 8007a70:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f003 0310 	and.w	r3, r3, #16
 8007a7c:	2b10      	cmp	r3, #16
 8007a7e:	d10a      	bne.n	8007a96 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007a80:	2300      	movs	r3, #0
 8007a82:	60fb      	str	r3, [r7, #12]
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	60fb      	str	r3, [r7, #12]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	60fb      	str	r3, [r7, #12]
 8007a94:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007a9a:	4619      	mov	r1, r3
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f7ff fe2f 	bl	8007700 <HAL_UARTEx_RxEventCallback>
 8007aa2:	e002      	b.n	8007aaa <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f7fa f8d5 	bl	8001c54 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	e002      	b.n	8007ab4 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	e000      	b.n	8007ab4 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8007ab2:	2302      	movs	r3, #2
  }
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	3718      	adds	r7, #24
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}

08007abc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b084      	sub	sp, #16
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	691b      	ldr	r3, [r3, #16]
 8007aca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	68da      	ldr	r2, [r3, #12]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	430a      	orrs	r2, r1
 8007ad8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	689a      	ldr	r2, [r3, #8]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	691b      	ldr	r3, [r3, #16]
 8007ae2:	431a      	orrs	r2, r3
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	695b      	ldr	r3, [r3, #20]
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	68db      	ldr	r3, [r3, #12]
 8007af2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007af6:	f023 030c 	bic.w	r3, r3, #12
 8007afa:	687a      	ldr	r2, [r7, #4]
 8007afc:	6812      	ldr	r2, [r2, #0]
 8007afe:	68b9      	ldr	r1, [r7, #8]
 8007b00:	430b      	orrs	r3, r1
 8007b02:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	695b      	ldr	r3, [r3, #20]
 8007b0a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	699a      	ldr	r2, [r3, #24]
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	430a      	orrs	r2, r1
 8007b18:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4a2c      	ldr	r2, [pc, #176]	; (8007bd0 <UART_SetConfig+0x114>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d103      	bne.n	8007b2c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007b24:	f7fe fd4c 	bl	80065c0 <HAL_RCC_GetPCLK2Freq>
 8007b28:	60f8      	str	r0, [r7, #12]
 8007b2a:	e002      	b.n	8007b32 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007b2c:	f7fe fd34 	bl	8006598 <HAL_RCC_GetPCLK1Freq>
 8007b30:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007b32:	68fa      	ldr	r2, [r7, #12]
 8007b34:	4613      	mov	r3, r2
 8007b36:	009b      	lsls	r3, r3, #2
 8007b38:	4413      	add	r3, r2
 8007b3a:	009a      	lsls	r2, r3, #2
 8007b3c:	441a      	add	r2, r3
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	009b      	lsls	r3, r3, #2
 8007b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b48:	4a22      	ldr	r2, [pc, #136]	; (8007bd4 <UART_SetConfig+0x118>)
 8007b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8007b4e:	095b      	lsrs	r3, r3, #5
 8007b50:	0119      	lsls	r1, r3, #4
 8007b52:	68fa      	ldr	r2, [r7, #12]
 8007b54:	4613      	mov	r3, r2
 8007b56:	009b      	lsls	r3, r3, #2
 8007b58:	4413      	add	r3, r2
 8007b5a:	009a      	lsls	r2, r3, #2
 8007b5c:	441a      	add	r2, r3
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	009b      	lsls	r3, r3, #2
 8007b64:	fbb2 f2f3 	udiv	r2, r2, r3
 8007b68:	4b1a      	ldr	r3, [pc, #104]	; (8007bd4 <UART_SetConfig+0x118>)
 8007b6a:	fba3 0302 	umull	r0, r3, r3, r2
 8007b6e:	095b      	lsrs	r3, r3, #5
 8007b70:	2064      	movs	r0, #100	; 0x64
 8007b72:	fb00 f303 	mul.w	r3, r0, r3
 8007b76:	1ad3      	subs	r3, r2, r3
 8007b78:	011b      	lsls	r3, r3, #4
 8007b7a:	3332      	adds	r3, #50	; 0x32
 8007b7c:	4a15      	ldr	r2, [pc, #84]	; (8007bd4 <UART_SetConfig+0x118>)
 8007b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8007b82:	095b      	lsrs	r3, r3, #5
 8007b84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007b88:	4419      	add	r1, r3
 8007b8a:	68fa      	ldr	r2, [r7, #12]
 8007b8c:	4613      	mov	r3, r2
 8007b8e:	009b      	lsls	r3, r3, #2
 8007b90:	4413      	add	r3, r2
 8007b92:	009a      	lsls	r2, r3, #2
 8007b94:	441a      	add	r2, r3
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	685b      	ldr	r3, [r3, #4]
 8007b9a:	009b      	lsls	r3, r3, #2
 8007b9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007ba0:	4b0c      	ldr	r3, [pc, #48]	; (8007bd4 <UART_SetConfig+0x118>)
 8007ba2:	fba3 0302 	umull	r0, r3, r3, r2
 8007ba6:	095b      	lsrs	r3, r3, #5
 8007ba8:	2064      	movs	r0, #100	; 0x64
 8007baa:	fb00 f303 	mul.w	r3, r0, r3
 8007bae:	1ad3      	subs	r3, r2, r3
 8007bb0:	011b      	lsls	r3, r3, #4
 8007bb2:	3332      	adds	r3, #50	; 0x32
 8007bb4:	4a07      	ldr	r2, [pc, #28]	; (8007bd4 <UART_SetConfig+0x118>)
 8007bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8007bba:	095b      	lsrs	r3, r3, #5
 8007bbc:	f003 020f 	and.w	r2, r3, #15
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	440a      	add	r2, r1
 8007bc6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007bc8:	bf00      	nop
 8007bca:	3710      	adds	r7, #16
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}
 8007bd0:	40013800 	.word	0x40013800
 8007bd4:	51eb851f 	.word	0x51eb851f

08007bd8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007bd8:	b084      	sub	sp, #16
 8007bda:	b480      	push	{r7}
 8007bdc:	b083      	sub	sp, #12
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	6078      	str	r0, [r7, #4]
 8007be2:	f107 0014 	add.w	r0, r7, #20
 8007be6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007bea:	2300      	movs	r3, #0
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	370c      	adds	r7, #12
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bc80      	pop	{r7}
 8007bf4:	b004      	add	sp, #16
 8007bf6:	4770      	bx	lr

08007bf8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b085      	sub	sp, #20
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2200      	movs	r2, #0
 8007c04:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007c08:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007c0c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	b29a      	uxth	r2, r3
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007c18:	2300      	movs	r3, #0
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3714      	adds	r7, #20
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bc80      	pop	{r7}
 8007c22:	4770      	bx	lr

08007c24 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b085      	sub	sp, #20
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007c2c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007c30:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007c38:	b29a      	uxth	r2, r3
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	b29b      	uxth	r3, r3
 8007c3e:	43db      	mvns	r3, r3
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	4013      	ands	r3, r2
 8007c44:	b29a      	uxth	r2, r3
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007c4c:	2300      	movs	r3, #0
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3714      	adds	r7, #20
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bc80      	pop	{r7}
 8007c56:	4770      	bx	lr

08007c58 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b083      	sub	sp, #12
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	460b      	mov	r3, r1
 8007c62:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007c64:	2300      	movs	r3, #0
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	370c      	adds	r7, #12
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bc80      	pop	{r7}
 8007c6e:	4770      	bx	lr

08007c70 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007c70:	b084      	sub	sp, #16
 8007c72:	b480      	push	{r7}
 8007c74:	b083      	sub	sp, #12
 8007c76:	af00      	add	r7, sp, #0
 8007c78:	6078      	str	r0, [r7, #4]
 8007c7a:	f107 0014 	add.w	r0, r7, #20
 8007c7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2201      	movs	r2, #1
 8007c86:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2200      	movs	r2, #0
 8007c96:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007ca2:	2300      	movs	r3, #0
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	370c      	adds	r7, #12
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bc80      	pop	{r7}
 8007cac:	b004      	add	sp, #16
 8007cae:	4770      	bx	lr

08007cb0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b09b      	sub	sp, #108	; 0x6c
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
 8007cb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007cc0:	687a      	ldr	r2, [r7, #4]
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	781b      	ldrb	r3, [r3, #0]
 8007cc6:	009b      	lsls	r3, r3, #2
 8007cc8:	4413      	add	r3, r2
 8007cca:	881b      	ldrh	r3, [r3, #0]
 8007ccc:	b29b      	uxth	r3, r3
 8007cce:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8007cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cd6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	78db      	ldrb	r3, [r3, #3]
 8007cde:	2b03      	cmp	r3, #3
 8007ce0:	d81f      	bhi.n	8007d22 <USB_ActivateEndpoint+0x72>
 8007ce2:	a201      	add	r2, pc, #4	; (adr r2, 8007ce8 <USB_ActivateEndpoint+0x38>)
 8007ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ce8:	08007cf9 	.word	0x08007cf9
 8007cec:	08007d15 	.word	0x08007d15
 8007cf0:	08007d2b 	.word	0x08007d2b
 8007cf4:	08007d07 	.word	0x08007d07
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007cf8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007cfc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007d00:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007d04:	e012      	b.n	8007d2c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007d06:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007d0a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8007d0e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007d12:	e00b      	b.n	8007d2c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007d14:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007d18:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007d1c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007d20:	e004      	b.n	8007d2c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8007d22:	2301      	movs	r3, #1
 8007d24:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8007d28:	e000      	b.n	8007d2c <USB_ActivateEndpoint+0x7c>
      break;
 8007d2a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007d2c:	687a      	ldr	r2, [r7, #4]
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	781b      	ldrb	r3, [r3, #0]
 8007d32:	009b      	lsls	r3, r3, #2
 8007d34:	441a      	add	r2, r3
 8007d36:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007d3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d4a:	b29b      	uxth	r3, r3
 8007d4c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007d4e:	687a      	ldr	r2, [r7, #4]
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	781b      	ldrb	r3, [r3, #0]
 8007d54:	009b      	lsls	r3, r3, #2
 8007d56:	4413      	add	r3, r2
 8007d58:	881b      	ldrh	r3, [r3, #0]
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d64:	b29a      	uxth	r2, r3
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	781b      	ldrb	r3, [r3, #0]
 8007d6a:	b29b      	uxth	r3, r3
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8007d72:	687a      	ldr	r2, [r7, #4]
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	781b      	ldrb	r3, [r3, #0]
 8007d78:	009b      	lsls	r3, r3, #2
 8007d7a:	441a      	add	r2, r3
 8007d7c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8007d80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d90:	b29b      	uxth	r3, r3
 8007d92:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	7b1b      	ldrb	r3, [r3, #12]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	f040 8149 	bne.w	8008030 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	785b      	ldrb	r3, [r3, #1]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	f000 8084 	beq.w	8007eb0 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	617b      	str	r3, [r7, #20]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	461a      	mov	r2, r3
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	4413      	add	r3, r2
 8007dba:	617b      	str	r3, [r7, #20]
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	781b      	ldrb	r3, [r3, #0]
 8007dc0:	011a      	lsls	r2, r3, #4
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	4413      	add	r3, r2
 8007dc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007dca:	613b      	str	r3, [r7, #16]
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	88db      	ldrh	r3, [r3, #6]
 8007dd0:	085b      	lsrs	r3, r3, #1
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	005b      	lsls	r3, r3, #1
 8007dd6:	b29a      	uxth	r2, r3
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007ddc:	687a      	ldr	r2, [r7, #4]
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	781b      	ldrb	r3, [r3, #0]
 8007de2:	009b      	lsls	r3, r3, #2
 8007de4:	4413      	add	r3, r2
 8007de6:	881b      	ldrh	r3, [r3, #0]
 8007de8:	81fb      	strh	r3, [r7, #14]
 8007dea:	89fb      	ldrh	r3, [r7, #14]
 8007dec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d01b      	beq.n	8007e2c <USB_ActivateEndpoint+0x17c>
 8007df4:	687a      	ldr	r2, [r7, #4]
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	781b      	ldrb	r3, [r3, #0]
 8007dfa:	009b      	lsls	r3, r3, #2
 8007dfc:	4413      	add	r3, r2
 8007dfe:	881b      	ldrh	r3, [r3, #0]
 8007e00:	b29b      	uxth	r3, r3
 8007e02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e0a:	81bb      	strh	r3, [r7, #12]
 8007e0c:	687a      	ldr	r2, [r7, #4]
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	781b      	ldrb	r3, [r3, #0]
 8007e12:	009b      	lsls	r3, r3, #2
 8007e14:	441a      	add	r2, r3
 8007e16:	89bb      	ldrh	r3, [r7, #12]
 8007e18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e24:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	78db      	ldrb	r3, [r3, #3]
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d020      	beq.n	8007e76 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007e34:	687a      	ldr	r2, [r7, #4]
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	781b      	ldrb	r3, [r3, #0]
 8007e3a:	009b      	lsls	r3, r3, #2
 8007e3c:	4413      	add	r3, r2
 8007e3e:	881b      	ldrh	r3, [r3, #0]
 8007e40:	b29b      	uxth	r3, r3
 8007e42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e4a:	813b      	strh	r3, [r7, #8]
 8007e4c:	893b      	ldrh	r3, [r7, #8]
 8007e4e:	f083 0320 	eor.w	r3, r3, #32
 8007e52:	813b      	strh	r3, [r7, #8]
 8007e54:	687a      	ldr	r2, [r7, #4]
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	781b      	ldrb	r3, [r3, #0]
 8007e5a:	009b      	lsls	r3, r3, #2
 8007e5c:	441a      	add	r2, r3
 8007e5e:	893b      	ldrh	r3, [r7, #8]
 8007e60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e70:	b29b      	uxth	r3, r3
 8007e72:	8013      	strh	r3, [r2, #0]
 8007e74:	e27f      	b.n	8008376 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007e76:	687a      	ldr	r2, [r7, #4]
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	781b      	ldrb	r3, [r3, #0]
 8007e7c:	009b      	lsls	r3, r3, #2
 8007e7e:	4413      	add	r3, r2
 8007e80:	881b      	ldrh	r3, [r3, #0]
 8007e82:	b29b      	uxth	r3, r3
 8007e84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e8c:	817b      	strh	r3, [r7, #10]
 8007e8e:	687a      	ldr	r2, [r7, #4]
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	781b      	ldrb	r3, [r3, #0]
 8007e94:	009b      	lsls	r3, r3, #2
 8007e96:	441a      	add	r2, r3
 8007e98:	897b      	ldrh	r3, [r7, #10]
 8007e9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ea2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ea6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007eaa:	b29b      	uxth	r3, r3
 8007eac:	8013      	strh	r3, [r2, #0]
 8007eae:	e262      	b.n	8008376 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007eba:	b29b      	uxth	r3, r3
 8007ebc:	461a      	mov	r2, r3
 8007ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ec0:	4413      	add	r3, r2
 8007ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	781b      	ldrb	r3, [r3, #0]
 8007ec8:	011a      	lsls	r2, r3, #4
 8007eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ecc:	4413      	add	r3, r2
 8007ece:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8007ed2:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	88db      	ldrh	r3, [r3, #6]
 8007ed8:	085b      	lsrs	r3, r3, #1
 8007eda:	b29b      	uxth	r3, r3
 8007edc:	005b      	lsls	r3, r3, #1
 8007ede:	b29a      	uxth	r2, r3
 8007ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ee2:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	627b      	str	r3, [r7, #36]	; 0x24
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007eee:	b29b      	uxth	r3, r3
 8007ef0:	461a      	mov	r2, r3
 8007ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef4:	4413      	add	r3, r2
 8007ef6:	627b      	str	r3, [r7, #36]	; 0x24
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	781b      	ldrb	r3, [r3, #0]
 8007efc:	011a      	lsls	r2, r3, #4
 8007efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f00:	4413      	add	r3, r2
 8007f02:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007f06:	623b      	str	r3, [r7, #32]
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	691b      	ldr	r3, [r3, #16]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d112      	bne.n	8007f36 <USB_ActivateEndpoint+0x286>
 8007f10:	6a3b      	ldr	r3, [r7, #32]
 8007f12:	881b      	ldrh	r3, [r3, #0]
 8007f14:	b29b      	uxth	r3, r3
 8007f16:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007f1a:	b29a      	uxth	r2, r3
 8007f1c:	6a3b      	ldr	r3, [r7, #32]
 8007f1e:	801a      	strh	r2, [r3, #0]
 8007f20:	6a3b      	ldr	r3, [r7, #32]
 8007f22:	881b      	ldrh	r3, [r3, #0]
 8007f24:	b29b      	uxth	r3, r3
 8007f26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f2e:	b29a      	uxth	r2, r3
 8007f30:	6a3b      	ldr	r3, [r7, #32]
 8007f32:	801a      	strh	r2, [r3, #0]
 8007f34:	e02f      	b.n	8007f96 <USB_ActivateEndpoint+0x2e6>
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	691b      	ldr	r3, [r3, #16]
 8007f3a:	2b3e      	cmp	r3, #62	; 0x3e
 8007f3c:	d813      	bhi.n	8007f66 <USB_ActivateEndpoint+0x2b6>
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	691b      	ldr	r3, [r3, #16]
 8007f42:	085b      	lsrs	r3, r3, #1
 8007f44:	663b      	str	r3, [r7, #96]	; 0x60
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	691b      	ldr	r3, [r3, #16]
 8007f4a:	f003 0301 	and.w	r3, r3, #1
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d002      	beq.n	8007f58 <USB_ActivateEndpoint+0x2a8>
 8007f52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007f54:	3301      	adds	r3, #1
 8007f56:	663b      	str	r3, [r7, #96]	; 0x60
 8007f58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007f5a:	b29b      	uxth	r3, r3
 8007f5c:	029b      	lsls	r3, r3, #10
 8007f5e:	b29a      	uxth	r2, r3
 8007f60:	6a3b      	ldr	r3, [r7, #32]
 8007f62:	801a      	strh	r2, [r3, #0]
 8007f64:	e017      	b.n	8007f96 <USB_ActivateEndpoint+0x2e6>
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	691b      	ldr	r3, [r3, #16]
 8007f6a:	095b      	lsrs	r3, r3, #5
 8007f6c:	663b      	str	r3, [r7, #96]	; 0x60
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	691b      	ldr	r3, [r3, #16]
 8007f72:	f003 031f 	and.w	r3, r3, #31
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d102      	bne.n	8007f80 <USB_ActivateEndpoint+0x2d0>
 8007f7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007f7c:	3b01      	subs	r3, #1
 8007f7e:	663b      	str	r3, [r7, #96]	; 0x60
 8007f80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007f82:	b29b      	uxth	r3, r3
 8007f84:	029b      	lsls	r3, r3, #10
 8007f86:	b29b      	uxth	r3, r3
 8007f88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f90:	b29a      	uxth	r2, r3
 8007f92:	6a3b      	ldr	r3, [r7, #32]
 8007f94:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007f96:	687a      	ldr	r2, [r7, #4]
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	781b      	ldrb	r3, [r3, #0]
 8007f9c:	009b      	lsls	r3, r3, #2
 8007f9e:	4413      	add	r3, r2
 8007fa0:	881b      	ldrh	r3, [r3, #0]
 8007fa2:	83fb      	strh	r3, [r7, #30]
 8007fa4:	8bfb      	ldrh	r3, [r7, #30]
 8007fa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d01b      	beq.n	8007fe6 <USB_ActivateEndpoint+0x336>
 8007fae:	687a      	ldr	r2, [r7, #4]
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	781b      	ldrb	r3, [r3, #0]
 8007fb4:	009b      	lsls	r3, r3, #2
 8007fb6:	4413      	add	r3, r2
 8007fb8:	881b      	ldrh	r3, [r3, #0]
 8007fba:	b29b      	uxth	r3, r3
 8007fbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fc4:	83bb      	strh	r3, [r7, #28]
 8007fc6:	687a      	ldr	r2, [r7, #4]
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	781b      	ldrb	r3, [r3, #0]
 8007fcc:	009b      	lsls	r3, r3, #2
 8007fce:	441a      	add	r2, r3
 8007fd0:	8bbb      	ldrh	r3, [r7, #28]
 8007fd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fda:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007fde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fe2:	b29b      	uxth	r3, r3
 8007fe4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007fe6:	687a      	ldr	r2, [r7, #4]
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	781b      	ldrb	r3, [r3, #0]
 8007fec:	009b      	lsls	r3, r3, #2
 8007fee:	4413      	add	r3, r2
 8007ff0:	881b      	ldrh	r3, [r3, #0]
 8007ff2:	b29b      	uxth	r3, r3
 8007ff4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ff8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ffc:	837b      	strh	r3, [r7, #26]
 8007ffe:	8b7b      	ldrh	r3, [r7, #26]
 8008000:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008004:	837b      	strh	r3, [r7, #26]
 8008006:	8b7b      	ldrh	r3, [r7, #26]
 8008008:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800800c:	837b      	strh	r3, [r7, #26]
 800800e:	687a      	ldr	r2, [r7, #4]
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	781b      	ldrb	r3, [r3, #0]
 8008014:	009b      	lsls	r3, r3, #2
 8008016:	441a      	add	r2, r3
 8008018:	8b7b      	ldrh	r3, [r7, #26]
 800801a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800801e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008022:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008026:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800802a:	b29b      	uxth	r3, r3
 800802c:	8013      	strh	r3, [r2, #0]
 800802e:	e1a2      	b.n	8008376 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8008030:	687a      	ldr	r2, [r7, #4]
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	781b      	ldrb	r3, [r3, #0]
 8008036:	009b      	lsls	r3, r3, #2
 8008038:	4413      	add	r3, r2
 800803a:	881b      	ldrh	r3, [r3, #0]
 800803c:	b29b      	uxth	r3, r3
 800803e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008046:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800804a:	687a      	ldr	r2, [r7, #4]
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	781b      	ldrb	r3, [r3, #0]
 8008050:	009b      	lsls	r3, r3, #2
 8008052:	441a      	add	r2, r3
 8008054:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8008058:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800805c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008060:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008068:	b29b      	uxth	r3, r3
 800806a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	65bb      	str	r3, [r7, #88]	; 0x58
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008076:	b29b      	uxth	r3, r3
 8008078:	461a      	mov	r2, r3
 800807a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800807c:	4413      	add	r3, r2
 800807e:	65bb      	str	r3, [r7, #88]	; 0x58
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	781b      	ldrb	r3, [r3, #0]
 8008084:	011a      	lsls	r2, r3, #4
 8008086:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008088:	4413      	add	r3, r2
 800808a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800808e:	657b      	str	r3, [r7, #84]	; 0x54
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	891b      	ldrh	r3, [r3, #8]
 8008094:	085b      	lsrs	r3, r3, #1
 8008096:	b29b      	uxth	r3, r3
 8008098:	005b      	lsls	r3, r3, #1
 800809a:	b29a      	uxth	r2, r3
 800809c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800809e:	801a      	strh	r2, [r3, #0]
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	653b      	str	r3, [r7, #80]	; 0x50
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080aa:	b29b      	uxth	r3, r3
 80080ac:	461a      	mov	r2, r3
 80080ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080b0:	4413      	add	r3, r2
 80080b2:	653b      	str	r3, [r7, #80]	; 0x50
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	011a      	lsls	r2, r3, #4
 80080ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080bc:	4413      	add	r3, r2
 80080be:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80080c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	895b      	ldrh	r3, [r3, #10]
 80080c8:	085b      	lsrs	r3, r3, #1
 80080ca:	b29b      	uxth	r3, r3
 80080cc:	005b      	lsls	r3, r3, #1
 80080ce:	b29a      	uxth	r2, r3
 80080d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080d2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	785b      	ldrb	r3, [r3, #1]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	f040 8091 	bne.w	8008200 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80080de:	687a      	ldr	r2, [r7, #4]
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	781b      	ldrb	r3, [r3, #0]
 80080e4:	009b      	lsls	r3, r3, #2
 80080e6:	4413      	add	r3, r2
 80080e8:	881b      	ldrh	r3, [r3, #0]
 80080ea:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80080ec:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80080ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d01b      	beq.n	800812e <USB_ActivateEndpoint+0x47e>
 80080f6:	687a      	ldr	r2, [r7, #4]
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	781b      	ldrb	r3, [r3, #0]
 80080fc:	009b      	lsls	r3, r3, #2
 80080fe:	4413      	add	r3, r2
 8008100:	881b      	ldrh	r3, [r3, #0]
 8008102:	b29b      	uxth	r3, r3
 8008104:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008108:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800810c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800810e:	687a      	ldr	r2, [r7, #4]
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	781b      	ldrb	r3, [r3, #0]
 8008114:	009b      	lsls	r3, r3, #2
 8008116:	441a      	add	r2, r3
 8008118:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800811a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800811e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008122:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008126:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800812a:	b29b      	uxth	r3, r3
 800812c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800812e:	687a      	ldr	r2, [r7, #4]
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	781b      	ldrb	r3, [r3, #0]
 8008134:	009b      	lsls	r3, r3, #2
 8008136:	4413      	add	r3, r2
 8008138:	881b      	ldrh	r3, [r3, #0]
 800813a:	873b      	strh	r3, [r7, #56]	; 0x38
 800813c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800813e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008142:	2b00      	cmp	r3, #0
 8008144:	d01b      	beq.n	800817e <USB_ActivateEndpoint+0x4ce>
 8008146:	687a      	ldr	r2, [r7, #4]
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	781b      	ldrb	r3, [r3, #0]
 800814c:	009b      	lsls	r3, r3, #2
 800814e:	4413      	add	r3, r2
 8008150:	881b      	ldrh	r3, [r3, #0]
 8008152:	b29b      	uxth	r3, r3
 8008154:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008158:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800815c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800815e:	687a      	ldr	r2, [r7, #4]
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	781b      	ldrb	r3, [r3, #0]
 8008164:	009b      	lsls	r3, r3, #2
 8008166:	441a      	add	r2, r3
 8008168:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800816a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800816e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008172:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008176:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800817a:	b29b      	uxth	r3, r3
 800817c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800817e:	687a      	ldr	r2, [r7, #4]
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	781b      	ldrb	r3, [r3, #0]
 8008184:	009b      	lsls	r3, r3, #2
 8008186:	4413      	add	r3, r2
 8008188:	881b      	ldrh	r3, [r3, #0]
 800818a:	b29b      	uxth	r3, r3
 800818c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008190:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008194:	86bb      	strh	r3, [r7, #52]	; 0x34
 8008196:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008198:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800819c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800819e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80081a0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80081a4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80081a6:	687a      	ldr	r2, [r7, #4]
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	781b      	ldrb	r3, [r3, #0]
 80081ac:	009b      	lsls	r3, r3, #2
 80081ae:	441a      	add	r2, r3
 80081b0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80081b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081c2:	b29b      	uxth	r3, r3
 80081c4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80081c6:	687a      	ldr	r2, [r7, #4]
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	781b      	ldrb	r3, [r3, #0]
 80081cc:	009b      	lsls	r3, r3, #2
 80081ce:	4413      	add	r3, r2
 80081d0:	881b      	ldrh	r3, [r3, #0]
 80081d2:	b29b      	uxth	r3, r3
 80081d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081dc:	867b      	strh	r3, [r7, #50]	; 0x32
 80081de:	687a      	ldr	r2, [r7, #4]
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	781b      	ldrb	r3, [r3, #0]
 80081e4:	009b      	lsls	r3, r3, #2
 80081e6:	441a      	add	r2, r3
 80081e8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80081ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081fa:	b29b      	uxth	r3, r3
 80081fc:	8013      	strh	r3, [r2, #0]
 80081fe:	e0ba      	b.n	8008376 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008200:	687a      	ldr	r2, [r7, #4]
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	781b      	ldrb	r3, [r3, #0]
 8008206:	009b      	lsls	r3, r3, #2
 8008208:	4413      	add	r3, r2
 800820a:	881b      	ldrh	r3, [r3, #0]
 800820c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8008210:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008214:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008218:	2b00      	cmp	r3, #0
 800821a:	d01d      	beq.n	8008258 <USB_ActivateEndpoint+0x5a8>
 800821c:	687a      	ldr	r2, [r7, #4]
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	781b      	ldrb	r3, [r3, #0]
 8008222:	009b      	lsls	r3, r3, #2
 8008224:	4413      	add	r3, r2
 8008226:	881b      	ldrh	r3, [r3, #0]
 8008228:	b29b      	uxth	r3, r3
 800822a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800822e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008232:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8008236:	687a      	ldr	r2, [r7, #4]
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	781b      	ldrb	r3, [r3, #0]
 800823c:	009b      	lsls	r3, r3, #2
 800823e:	441a      	add	r2, r3
 8008240:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008244:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008248:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800824c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008250:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008254:	b29b      	uxth	r3, r3
 8008256:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008258:	687a      	ldr	r2, [r7, #4]
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	781b      	ldrb	r3, [r3, #0]
 800825e:	009b      	lsls	r3, r3, #2
 8008260:	4413      	add	r3, r2
 8008262:	881b      	ldrh	r3, [r3, #0]
 8008264:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8008268:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800826c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008270:	2b00      	cmp	r3, #0
 8008272:	d01d      	beq.n	80082b0 <USB_ActivateEndpoint+0x600>
 8008274:	687a      	ldr	r2, [r7, #4]
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	781b      	ldrb	r3, [r3, #0]
 800827a:	009b      	lsls	r3, r3, #2
 800827c:	4413      	add	r3, r2
 800827e:	881b      	ldrh	r3, [r3, #0]
 8008280:	b29b      	uxth	r3, r3
 8008282:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800828a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800828e:	687a      	ldr	r2, [r7, #4]
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	781b      	ldrb	r3, [r3, #0]
 8008294:	009b      	lsls	r3, r3, #2
 8008296:	441a      	add	r2, r3
 8008298:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800829c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082a8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80082ac:	b29b      	uxth	r3, r3
 80082ae:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	78db      	ldrb	r3, [r3, #3]
 80082b4:	2b01      	cmp	r3, #1
 80082b6:	d024      	beq.n	8008302 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80082b8:	687a      	ldr	r2, [r7, #4]
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	781b      	ldrb	r3, [r3, #0]
 80082be:	009b      	lsls	r3, r3, #2
 80082c0:	4413      	add	r3, r2
 80082c2:	881b      	ldrh	r3, [r3, #0]
 80082c4:	b29b      	uxth	r3, r3
 80082c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082ce:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80082d2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80082d6:	f083 0320 	eor.w	r3, r3, #32
 80082da:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80082de:	687a      	ldr	r2, [r7, #4]
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	781b      	ldrb	r3, [r3, #0]
 80082e4:	009b      	lsls	r3, r3, #2
 80082e6:	441a      	add	r2, r3
 80082e8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80082ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082fc:	b29b      	uxth	r3, r3
 80082fe:	8013      	strh	r3, [r2, #0]
 8008300:	e01d      	b.n	800833e <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008302:	687a      	ldr	r2, [r7, #4]
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	781b      	ldrb	r3, [r3, #0]
 8008308:	009b      	lsls	r3, r3, #2
 800830a:	4413      	add	r3, r2
 800830c:	881b      	ldrh	r3, [r3, #0]
 800830e:	b29b      	uxth	r3, r3
 8008310:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008314:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008318:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800831c:	687a      	ldr	r2, [r7, #4]
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	781b      	ldrb	r3, [r3, #0]
 8008322:	009b      	lsls	r3, r3, #2
 8008324:	441a      	add	r2, r3
 8008326:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800832a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800832e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008332:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008336:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800833a:	b29b      	uxth	r3, r3
 800833c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800833e:	687a      	ldr	r2, [r7, #4]
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	781b      	ldrb	r3, [r3, #0]
 8008344:	009b      	lsls	r3, r3, #2
 8008346:	4413      	add	r3, r2
 8008348:	881b      	ldrh	r3, [r3, #0]
 800834a:	b29b      	uxth	r3, r3
 800834c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008350:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008354:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008356:	687a      	ldr	r2, [r7, #4]
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	781b      	ldrb	r3, [r3, #0]
 800835c:	009b      	lsls	r3, r3, #2
 800835e:	441a      	add	r2, r3
 8008360:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008362:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008366:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800836a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800836e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008372:	b29b      	uxth	r3, r3
 8008374:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8008376:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800837a:	4618      	mov	r0, r3
 800837c:	376c      	adds	r7, #108	; 0x6c
 800837e:	46bd      	mov	sp, r7
 8008380:	bc80      	pop	{r7}
 8008382:	4770      	bx	lr

08008384 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008384:	b480      	push	{r7}
 8008386:	b08d      	sub	sp, #52	; 0x34
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
 800838c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	7b1b      	ldrb	r3, [r3, #12]
 8008392:	2b00      	cmp	r3, #0
 8008394:	f040 808e 	bne.w	80084b4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	785b      	ldrb	r3, [r3, #1]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d044      	beq.n	800842a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80083a0:	687a      	ldr	r2, [r7, #4]
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	781b      	ldrb	r3, [r3, #0]
 80083a6:	009b      	lsls	r3, r3, #2
 80083a8:	4413      	add	r3, r2
 80083aa:	881b      	ldrh	r3, [r3, #0]
 80083ac:	81bb      	strh	r3, [r7, #12]
 80083ae:	89bb      	ldrh	r3, [r7, #12]
 80083b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d01b      	beq.n	80083f0 <USB_DeactivateEndpoint+0x6c>
 80083b8:	687a      	ldr	r2, [r7, #4]
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	781b      	ldrb	r3, [r3, #0]
 80083be:	009b      	lsls	r3, r3, #2
 80083c0:	4413      	add	r3, r2
 80083c2:	881b      	ldrh	r3, [r3, #0]
 80083c4:	b29b      	uxth	r3, r3
 80083c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083ce:	817b      	strh	r3, [r7, #10]
 80083d0:	687a      	ldr	r2, [r7, #4]
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	781b      	ldrb	r3, [r3, #0]
 80083d6:	009b      	lsls	r3, r3, #2
 80083d8:	441a      	add	r2, r3
 80083da:	897b      	ldrh	r3, [r7, #10]
 80083dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80083ec:	b29b      	uxth	r3, r3
 80083ee:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80083f0:	687a      	ldr	r2, [r7, #4]
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	781b      	ldrb	r3, [r3, #0]
 80083f6:	009b      	lsls	r3, r3, #2
 80083f8:	4413      	add	r3, r2
 80083fa:	881b      	ldrh	r3, [r3, #0]
 80083fc:	b29b      	uxth	r3, r3
 80083fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008402:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008406:	813b      	strh	r3, [r7, #8]
 8008408:	687a      	ldr	r2, [r7, #4]
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	781b      	ldrb	r3, [r3, #0]
 800840e:	009b      	lsls	r3, r3, #2
 8008410:	441a      	add	r2, r3
 8008412:	893b      	ldrh	r3, [r7, #8]
 8008414:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008418:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800841c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008420:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008424:	b29b      	uxth	r3, r3
 8008426:	8013      	strh	r3, [r2, #0]
 8008428:	e192      	b.n	8008750 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800842a:	687a      	ldr	r2, [r7, #4]
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	781b      	ldrb	r3, [r3, #0]
 8008430:	009b      	lsls	r3, r3, #2
 8008432:	4413      	add	r3, r2
 8008434:	881b      	ldrh	r3, [r3, #0]
 8008436:	827b      	strh	r3, [r7, #18]
 8008438:	8a7b      	ldrh	r3, [r7, #18]
 800843a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800843e:	2b00      	cmp	r3, #0
 8008440:	d01b      	beq.n	800847a <USB_DeactivateEndpoint+0xf6>
 8008442:	687a      	ldr	r2, [r7, #4]
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	781b      	ldrb	r3, [r3, #0]
 8008448:	009b      	lsls	r3, r3, #2
 800844a:	4413      	add	r3, r2
 800844c:	881b      	ldrh	r3, [r3, #0]
 800844e:	b29b      	uxth	r3, r3
 8008450:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008454:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008458:	823b      	strh	r3, [r7, #16]
 800845a:	687a      	ldr	r2, [r7, #4]
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	781b      	ldrb	r3, [r3, #0]
 8008460:	009b      	lsls	r3, r3, #2
 8008462:	441a      	add	r2, r3
 8008464:	8a3b      	ldrh	r3, [r7, #16]
 8008466:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800846a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800846e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008472:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008476:	b29b      	uxth	r3, r3
 8008478:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800847a:	687a      	ldr	r2, [r7, #4]
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	781b      	ldrb	r3, [r3, #0]
 8008480:	009b      	lsls	r3, r3, #2
 8008482:	4413      	add	r3, r2
 8008484:	881b      	ldrh	r3, [r3, #0]
 8008486:	b29b      	uxth	r3, r3
 8008488:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800848c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008490:	81fb      	strh	r3, [r7, #14]
 8008492:	687a      	ldr	r2, [r7, #4]
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	781b      	ldrb	r3, [r3, #0]
 8008498:	009b      	lsls	r3, r3, #2
 800849a:	441a      	add	r2, r3
 800849c:	89fb      	ldrh	r3, [r7, #14]
 800849e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084ae:	b29b      	uxth	r3, r3
 80084b0:	8013      	strh	r3, [r2, #0]
 80084b2:	e14d      	b.n	8008750 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	785b      	ldrb	r3, [r3, #1]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	f040 80a5 	bne.w	8008608 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80084be:	687a      	ldr	r2, [r7, #4]
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	781b      	ldrb	r3, [r3, #0]
 80084c4:	009b      	lsls	r3, r3, #2
 80084c6:	4413      	add	r3, r2
 80084c8:	881b      	ldrh	r3, [r3, #0]
 80084ca:	843b      	strh	r3, [r7, #32]
 80084cc:	8c3b      	ldrh	r3, [r7, #32]
 80084ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d01b      	beq.n	800850e <USB_DeactivateEndpoint+0x18a>
 80084d6:	687a      	ldr	r2, [r7, #4]
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	781b      	ldrb	r3, [r3, #0]
 80084dc:	009b      	lsls	r3, r3, #2
 80084de:	4413      	add	r3, r2
 80084e0:	881b      	ldrh	r3, [r3, #0]
 80084e2:	b29b      	uxth	r3, r3
 80084e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084ec:	83fb      	strh	r3, [r7, #30]
 80084ee:	687a      	ldr	r2, [r7, #4]
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	781b      	ldrb	r3, [r3, #0]
 80084f4:	009b      	lsls	r3, r3, #2
 80084f6:	441a      	add	r2, r3
 80084f8:	8bfb      	ldrh	r3, [r7, #30]
 80084fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008502:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008506:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800850a:	b29b      	uxth	r3, r3
 800850c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800850e:	687a      	ldr	r2, [r7, #4]
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	781b      	ldrb	r3, [r3, #0]
 8008514:	009b      	lsls	r3, r3, #2
 8008516:	4413      	add	r3, r2
 8008518:	881b      	ldrh	r3, [r3, #0]
 800851a:	83bb      	strh	r3, [r7, #28]
 800851c:	8bbb      	ldrh	r3, [r7, #28]
 800851e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008522:	2b00      	cmp	r3, #0
 8008524:	d01b      	beq.n	800855e <USB_DeactivateEndpoint+0x1da>
 8008526:	687a      	ldr	r2, [r7, #4]
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	781b      	ldrb	r3, [r3, #0]
 800852c:	009b      	lsls	r3, r3, #2
 800852e:	4413      	add	r3, r2
 8008530:	881b      	ldrh	r3, [r3, #0]
 8008532:	b29b      	uxth	r3, r3
 8008534:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008538:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800853c:	837b      	strh	r3, [r7, #26]
 800853e:	687a      	ldr	r2, [r7, #4]
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	781b      	ldrb	r3, [r3, #0]
 8008544:	009b      	lsls	r3, r3, #2
 8008546:	441a      	add	r2, r3
 8008548:	8b7b      	ldrh	r3, [r7, #26]
 800854a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800854e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008552:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008556:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800855a:	b29b      	uxth	r3, r3
 800855c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800855e:	687a      	ldr	r2, [r7, #4]
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	781b      	ldrb	r3, [r3, #0]
 8008564:	009b      	lsls	r3, r3, #2
 8008566:	4413      	add	r3, r2
 8008568:	881b      	ldrh	r3, [r3, #0]
 800856a:	b29b      	uxth	r3, r3
 800856c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008570:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008574:	833b      	strh	r3, [r7, #24]
 8008576:	687a      	ldr	r2, [r7, #4]
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	781b      	ldrb	r3, [r3, #0]
 800857c:	009b      	lsls	r3, r3, #2
 800857e:	441a      	add	r2, r3
 8008580:	8b3b      	ldrh	r3, [r7, #24]
 8008582:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008586:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800858a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800858e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008592:	b29b      	uxth	r3, r3
 8008594:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008596:	687a      	ldr	r2, [r7, #4]
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	781b      	ldrb	r3, [r3, #0]
 800859c:	009b      	lsls	r3, r3, #2
 800859e:	4413      	add	r3, r2
 80085a0:	881b      	ldrh	r3, [r3, #0]
 80085a2:	b29b      	uxth	r3, r3
 80085a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80085a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085ac:	82fb      	strh	r3, [r7, #22]
 80085ae:	687a      	ldr	r2, [r7, #4]
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	781b      	ldrb	r3, [r3, #0]
 80085b4:	009b      	lsls	r3, r3, #2
 80085b6:	441a      	add	r2, r3
 80085b8:	8afb      	ldrh	r3, [r7, #22]
 80085ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085ca:	b29b      	uxth	r3, r3
 80085cc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80085ce:	687a      	ldr	r2, [r7, #4]
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	781b      	ldrb	r3, [r3, #0]
 80085d4:	009b      	lsls	r3, r3, #2
 80085d6:	4413      	add	r3, r2
 80085d8:	881b      	ldrh	r3, [r3, #0]
 80085da:	b29b      	uxth	r3, r3
 80085dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085e4:	82bb      	strh	r3, [r7, #20]
 80085e6:	687a      	ldr	r2, [r7, #4]
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	781b      	ldrb	r3, [r3, #0]
 80085ec:	009b      	lsls	r3, r3, #2
 80085ee:	441a      	add	r2, r3
 80085f0:	8abb      	ldrh	r3, [r7, #20]
 80085f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008602:	b29b      	uxth	r3, r3
 8008604:	8013      	strh	r3, [r2, #0]
 8008606:	e0a3      	b.n	8008750 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008608:	687a      	ldr	r2, [r7, #4]
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	781b      	ldrb	r3, [r3, #0]
 800860e:	009b      	lsls	r3, r3, #2
 8008610:	4413      	add	r3, r2
 8008612:	881b      	ldrh	r3, [r3, #0]
 8008614:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008616:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008618:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800861c:	2b00      	cmp	r3, #0
 800861e:	d01b      	beq.n	8008658 <USB_DeactivateEndpoint+0x2d4>
 8008620:	687a      	ldr	r2, [r7, #4]
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	781b      	ldrb	r3, [r3, #0]
 8008626:	009b      	lsls	r3, r3, #2
 8008628:	4413      	add	r3, r2
 800862a:	881b      	ldrh	r3, [r3, #0]
 800862c:	b29b      	uxth	r3, r3
 800862e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008636:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8008638:	687a      	ldr	r2, [r7, #4]
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	781b      	ldrb	r3, [r3, #0]
 800863e:	009b      	lsls	r3, r3, #2
 8008640:	441a      	add	r2, r3
 8008642:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008644:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008648:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800864c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008654:	b29b      	uxth	r3, r3
 8008656:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008658:	687a      	ldr	r2, [r7, #4]
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	781b      	ldrb	r3, [r3, #0]
 800865e:	009b      	lsls	r3, r3, #2
 8008660:	4413      	add	r3, r2
 8008662:	881b      	ldrh	r3, [r3, #0]
 8008664:	857b      	strh	r3, [r7, #42]	; 0x2a
 8008666:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800866c:	2b00      	cmp	r3, #0
 800866e:	d01b      	beq.n	80086a8 <USB_DeactivateEndpoint+0x324>
 8008670:	687a      	ldr	r2, [r7, #4]
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	781b      	ldrb	r3, [r3, #0]
 8008676:	009b      	lsls	r3, r3, #2
 8008678:	4413      	add	r3, r2
 800867a:	881b      	ldrh	r3, [r3, #0]
 800867c:	b29b      	uxth	r3, r3
 800867e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008682:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008686:	853b      	strh	r3, [r7, #40]	; 0x28
 8008688:	687a      	ldr	r2, [r7, #4]
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	781b      	ldrb	r3, [r3, #0]
 800868e:	009b      	lsls	r3, r3, #2
 8008690:	441a      	add	r2, r3
 8008692:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008694:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008698:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800869c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086a0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80086a4:	b29b      	uxth	r3, r3
 80086a6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80086a8:	687a      	ldr	r2, [r7, #4]
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	781b      	ldrb	r3, [r3, #0]
 80086ae:	009b      	lsls	r3, r3, #2
 80086b0:	4413      	add	r3, r2
 80086b2:	881b      	ldrh	r3, [r3, #0]
 80086b4:	b29b      	uxth	r3, r3
 80086b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086be:	84fb      	strh	r3, [r7, #38]	; 0x26
 80086c0:	687a      	ldr	r2, [r7, #4]
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	781b      	ldrb	r3, [r3, #0]
 80086c6:	009b      	lsls	r3, r3, #2
 80086c8:	441a      	add	r2, r3
 80086ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80086cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80086d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086dc:	b29b      	uxth	r3, r3
 80086de:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80086e0:	687a      	ldr	r2, [r7, #4]
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	781b      	ldrb	r3, [r3, #0]
 80086e6:	009b      	lsls	r3, r3, #2
 80086e8:	4413      	add	r3, r2
 80086ea:	881b      	ldrh	r3, [r3, #0]
 80086ec:	b29b      	uxth	r3, r3
 80086ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086f6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80086f8:	687a      	ldr	r2, [r7, #4]
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	781b      	ldrb	r3, [r3, #0]
 80086fe:	009b      	lsls	r3, r3, #2
 8008700:	441a      	add	r2, r3
 8008702:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008704:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008708:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800870c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008710:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008714:	b29b      	uxth	r3, r3
 8008716:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008718:	687a      	ldr	r2, [r7, #4]
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	781b      	ldrb	r3, [r3, #0]
 800871e:	009b      	lsls	r3, r3, #2
 8008720:	4413      	add	r3, r2
 8008722:	881b      	ldrh	r3, [r3, #0]
 8008724:	b29b      	uxth	r3, r3
 8008726:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800872a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800872e:	847b      	strh	r3, [r7, #34]	; 0x22
 8008730:	687a      	ldr	r2, [r7, #4]
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	781b      	ldrb	r3, [r3, #0]
 8008736:	009b      	lsls	r3, r3, #2
 8008738:	441a      	add	r2, r3
 800873a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800873c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008740:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008744:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800874c:	b29b      	uxth	r3, r3
 800874e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008750:	2300      	movs	r3, #0
}
 8008752:	4618      	mov	r0, r3
 8008754:	3734      	adds	r7, #52	; 0x34
 8008756:	46bd      	mov	sp, r7
 8008758:	bc80      	pop	{r7}
 800875a:	4770      	bx	lr

0800875c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b0cc      	sub	sp, #304	; 0x130
 8008760:	af00      	add	r7, sp, #0
 8008762:	1d3b      	adds	r3, r7, #4
 8008764:	6018      	str	r0, [r3, #0]
 8008766:	463b      	mov	r3, r7
 8008768:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800876a:	463b      	mov	r3, r7
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	785b      	ldrb	r3, [r3, #1]
 8008770:	2b01      	cmp	r3, #1
 8008772:	f040 872e 	bne.w	80095d2 <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008776:	463b      	mov	r3, r7
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	699a      	ldr	r2, [r3, #24]
 800877c:	463b      	mov	r3, r7
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	691b      	ldr	r3, [r3, #16]
 8008782:	429a      	cmp	r2, r3
 8008784:	d905      	bls.n	8008792 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8008786:	463b      	mov	r3, r7
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	691b      	ldr	r3, [r3, #16]
 800878c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8008790:	e004      	b.n	800879c <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8008792:	463b      	mov	r3, r7
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	699b      	ldr	r3, [r3, #24]
 8008798:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800879c:	463b      	mov	r3, r7
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	7b1b      	ldrb	r3, [r3, #12]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d134      	bne.n	8008810 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80087a6:	463b      	mov	r3, r7
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	6959      	ldr	r1, [r3, #20]
 80087ac:	463b      	mov	r3, r7
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	88da      	ldrh	r2, [r3, #6]
 80087b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087b6:	b29b      	uxth	r3, r3
 80087b8:	1d38      	adds	r0, r7, #4
 80087ba:	6800      	ldr	r0, [r0, #0]
 80087bc:	f001 fc03 	bl	8009fc6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80087c0:	f107 0310 	add.w	r3, r7, #16
 80087c4:	1d3a      	adds	r2, r7, #4
 80087c6:	6812      	ldr	r2, [r2, #0]
 80087c8:	601a      	str	r2, [r3, #0]
 80087ca:	1d3b      	adds	r3, r7, #4
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087d2:	b29b      	uxth	r3, r3
 80087d4:	4619      	mov	r1, r3
 80087d6:	f107 0310 	add.w	r3, r7, #16
 80087da:	f107 0210 	add.w	r2, r7, #16
 80087de:	6812      	ldr	r2, [r2, #0]
 80087e0:	440a      	add	r2, r1
 80087e2:	601a      	str	r2, [r3, #0]
 80087e4:	463b      	mov	r3, r7
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	781b      	ldrb	r3, [r3, #0]
 80087ea:	011a      	lsls	r2, r3, #4
 80087ec:	f107 0310 	add.w	r3, r7, #16
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	4413      	add	r3, r2
 80087f4:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80087f8:	f107 030c 	add.w	r3, r7, #12
 80087fc:	601a      	str	r2, [r3, #0]
 80087fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008802:	b29a      	uxth	r2, r3
 8008804:	f107 030c 	add.w	r3, r7, #12
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	801a      	strh	r2, [r3, #0]
 800880c:	f000 beac 	b.w	8009568 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008810:	463b      	mov	r3, r7
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	78db      	ldrb	r3, [r3, #3]
 8008816:	2b02      	cmp	r3, #2
 8008818:	f040 838c 	bne.w	8008f34 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800881c:	463b      	mov	r3, r7
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	6a1a      	ldr	r2, [r3, #32]
 8008822:	463b      	mov	r3, r7
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	691b      	ldr	r3, [r3, #16]
 8008828:	429a      	cmp	r2, r3
 800882a:	f240 8330 	bls.w	8008e8e <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800882e:	1d3b      	adds	r3, r7, #4
 8008830:	681a      	ldr	r2, [r3, #0]
 8008832:	463b      	mov	r3, r7
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	781b      	ldrb	r3, [r3, #0]
 8008838:	009b      	lsls	r3, r3, #2
 800883a:	4413      	add	r3, r2
 800883c:	881b      	ldrh	r3, [r3, #0]
 800883e:	b29b      	uxth	r3, r3
 8008840:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008844:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008848:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800884c:	1d3b      	adds	r3, r7, #4
 800884e:	681a      	ldr	r2, [r3, #0]
 8008850:	463b      	mov	r3, r7
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	781b      	ldrb	r3, [r3, #0]
 8008856:	009b      	lsls	r3, r3, #2
 8008858:	441a      	add	r2, r3
 800885a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800885e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008862:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008866:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800886a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800886e:	b29b      	uxth	r3, r3
 8008870:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008872:	463b      	mov	r3, r7
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	6a1a      	ldr	r2, [r3, #32]
 8008878:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800887c:	1ad2      	subs	r2, r2, r3
 800887e:	463b      	mov	r3, r7
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008884:	1d3b      	adds	r3, r7, #4
 8008886:	681a      	ldr	r2, [r3, #0]
 8008888:	463b      	mov	r3, r7
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	781b      	ldrb	r3, [r3, #0]
 800888e:	009b      	lsls	r3, r3, #2
 8008890:	4413      	add	r3, r2
 8008892:	881b      	ldrh	r3, [r3, #0]
 8008894:	b29b      	uxth	r3, r3
 8008896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800889a:	2b00      	cmp	r3, #0
 800889c:	f000 819e 	beq.w	8008bdc <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80088a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80088a4:	1d3a      	adds	r2, r7, #4
 80088a6:	6812      	ldr	r2, [r2, #0]
 80088a8:	601a      	str	r2, [r3, #0]
 80088aa:	463b      	mov	r3, r7
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	785b      	ldrb	r3, [r3, #1]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d17a      	bne.n	80089aa <USB_EPStartXfer+0x24e>
 80088b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80088b8:	1d3a      	adds	r2, r7, #4
 80088ba:	6812      	ldr	r2, [r2, #0]
 80088bc:	601a      	str	r2, [r3, #0]
 80088be:	1d3b      	adds	r3, r7, #4
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088c6:	b29b      	uxth	r3, r3
 80088c8:	4619      	mov	r1, r3
 80088ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80088ce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80088d2:	6812      	ldr	r2, [r2, #0]
 80088d4:	440a      	add	r2, r1
 80088d6:	601a      	str	r2, [r3, #0]
 80088d8:	463b      	mov	r3, r7
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	781b      	ldrb	r3, [r3, #0]
 80088de:	011a      	lsls	r2, r3, #4
 80088e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	4413      	add	r3, r2
 80088e8:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80088ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80088f0:	601a      	str	r2, [r3, #0]
 80088f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d11a      	bne.n	8008930 <USB_EPStartXfer+0x1d4>
 80088fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	881b      	ldrh	r3, [r3, #0]
 8008902:	b29b      	uxth	r3, r3
 8008904:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008908:	b29a      	uxth	r2, r3
 800890a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	801a      	strh	r2, [r3, #0]
 8008912:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	881b      	ldrh	r3, [r3, #0]
 800891a:	b29b      	uxth	r3, r3
 800891c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008920:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008924:	b29a      	uxth	r2, r3
 8008926:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	801a      	strh	r2, [r3, #0]
 800892e:	e062      	b.n	80089f6 <USB_EPStartXfer+0x29a>
 8008930:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008934:	2b3e      	cmp	r3, #62	; 0x3e
 8008936:	d819      	bhi.n	800896c <USB_EPStartXfer+0x210>
 8008938:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800893c:	085b      	lsrs	r3, r3, #1
 800893e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008942:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008946:	f003 0301 	and.w	r3, r3, #1
 800894a:	2b00      	cmp	r3, #0
 800894c:	d004      	beq.n	8008958 <USB_EPStartXfer+0x1fc>
 800894e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008952:	3301      	adds	r3, #1
 8008954:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008958:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800895c:	b29b      	uxth	r3, r3
 800895e:	029b      	lsls	r3, r3, #10
 8008960:	b29a      	uxth	r2, r3
 8008962:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	801a      	strh	r2, [r3, #0]
 800896a:	e044      	b.n	80089f6 <USB_EPStartXfer+0x29a>
 800896c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008970:	095b      	lsrs	r3, r3, #5
 8008972:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008976:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800897a:	f003 031f 	and.w	r3, r3, #31
 800897e:	2b00      	cmp	r3, #0
 8008980:	d104      	bne.n	800898c <USB_EPStartXfer+0x230>
 8008982:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008986:	3b01      	subs	r3, #1
 8008988:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800898c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008990:	b29b      	uxth	r3, r3
 8008992:	029b      	lsls	r3, r3, #10
 8008994:	b29b      	uxth	r3, r3
 8008996:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800899a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800899e:	b29a      	uxth	r2, r3
 80089a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	801a      	strh	r2, [r3, #0]
 80089a8:	e025      	b.n	80089f6 <USB_EPStartXfer+0x29a>
 80089aa:	463b      	mov	r3, r7
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	785b      	ldrb	r3, [r3, #1]
 80089b0:	2b01      	cmp	r3, #1
 80089b2:	d120      	bne.n	80089f6 <USB_EPStartXfer+0x29a>
 80089b4:	1d3b      	adds	r3, r7, #4
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089bc:	b29b      	uxth	r3, r3
 80089be:	4619      	mov	r1, r3
 80089c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80089c4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80089c8:	6812      	ldr	r2, [r2, #0]
 80089ca:	440a      	add	r2, r1
 80089cc:	601a      	str	r2, [r3, #0]
 80089ce:	463b      	mov	r3, r7
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	781b      	ldrb	r3, [r3, #0]
 80089d4:	011a      	lsls	r2, r3, #4
 80089d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4413      	add	r3, r2
 80089de:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80089e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80089e6:	601a      	str	r2, [r3, #0]
 80089e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089ec:	b29a      	uxth	r2, r3
 80089ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80089f6:	463b      	mov	r3, r7
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	895b      	ldrh	r3, [r3, #10]
 80089fc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008a00:	463b      	mov	r3, r7
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	6959      	ldr	r1, [r3, #20]
 8008a06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a0a:	b29b      	uxth	r3, r3
 8008a0c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008a10:	1d38      	adds	r0, r7, #4
 8008a12:	6800      	ldr	r0, [r0, #0]
 8008a14:	f001 fad7 	bl	8009fc6 <USB_WritePMA>
            ep->xfer_buff += len;
 8008a18:	463b      	mov	r3, r7
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	695a      	ldr	r2, [r3, #20]
 8008a1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a22:	441a      	add	r2, r3
 8008a24:	463b      	mov	r3, r7
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008a2a:	463b      	mov	r3, r7
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	6a1a      	ldr	r2, [r3, #32]
 8008a30:	463b      	mov	r3, r7
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	691b      	ldr	r3, [r3, #16]
 8008a36:	429a      	cmp	r2, r3
 8008a38:	d909      	bls.n	8008a4e <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 8008a3a:	463b      	mov	r3, r7
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	6a1a      	ldr	r2, [r3, #32]
 8008a40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a44:	1ad2      	subs	r2, r2, r3
 8008a46:	463b      	mov	r3, r7
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	621a      	str	r2, [r3, #32]
 8008a4c:	e008      	b.n	8008a60 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 8008a4e:	463b      	mov	r3, r7
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	6a1b      	ldr	r3, [r3, #32]
 8008a54:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8008a58:	463b      	mov	r3, r7
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008a60:	463b      	mov	r3, r7
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	785b      	ldrb	r3, [r3, #1]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d17a      	bne.n	8008b60 <USB_EPStartXfer+0x404>
 8008a6a:	f107 0318 	add.w	r3, r7, #24
 8008a6e:	1d3a      	adds	r2, r7, #4
 8008a70:	6812      	ldr	r2, [r2, #0]
 8008a72:	601a      	str	r2, [r3, #0]
 8008a74:	1d3b      	adds	r3, r7, #4
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a7c:	b29b      	uxth	r3, r3
 8008a7e:	4619      	mov	r1, r3
 8008a80:	f107 0318 	add.w	r3, r7, #24
 8008a84:	f107 0218 	add.w	r2, r7, #24
 8008a88:	6812      	ldr	r2, [r2, #0]
 8008a8a:	440a      	add	r2, r1
 8008a8c:	601a      	str	r2, [r3, #0]
 8008a8e:	463b      	mov	r3, r7
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	781b      	ldrb	r3, [r3, #0]
 8008a94:	011a      	lsls	r2, r3, #4
 8008a96:	f107 0318 	add.w	r3, r7, #24
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4413      	add	r3, r2
 8008a9e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8008aa2:	f107 0314 	add.w	r3, r7, #20
 8008aa6:	601a      	str	r2, [r3, #0]
 8008aa8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d11a      	bne.n	8008ae6 <USB_EPStartXfer+0x38a>
 8008ab0:	f107 0314 	add.w	r3, r7, #20
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	881b      	ldrh	r3, [r3, #0]
 8008ab8:	b29b      	uxth	r3, r3
 8008aba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008abe:	b29a      	uxth	r2, r3
 8008ac0:	f107 0314 	add.w	r3, r7, #20
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	801a      	strh	r2, [r3, #0]
 8008ac8:	f107 0314 	add.w	r3, r7, #20
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	881b      	ldrh	r3, [r3, #0]
 8008ad0:	b29b      	uxth	r3, r3
 8008ad2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ad6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ada:	b29a      	uxth	r2, r3
 8008adc:	f107 0314 	add.w	r3, r7, #20
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	801a      	strh	r2, [r3, #0]
 8008ae4:	e067      	b.n	8008bb6 <USB_EPStartXfer+0x45a>
 8008ae6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008aea:	2b3e      	cmp	r3, #62	; 0x3e
 8008aec:	d819      	bhi.n	8008b22 <USB_EPStartXfer+0x3c6>
 8008aee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008af2:	085b      	lsrs	r3, r3, #1
 8008af4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008af8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008afc:	f003 0301 	and.w	r3, r3, #1
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d004      	beq.n	8008b0e <USB_EPStartXfer+0x3b2>
 8008b04:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008b08:	3301      	adds	r3, #1
 8008b0a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008b0e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008b12:	b29b      	uxth	r3, r3
 8008b14:	029b      	lsls	r3, r3, #10
 8008b16:	b29a      	uxth	r2, r3
 8008b18:	f107 0314 	add.w	r3, r7, #20
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	801a      	strh	r2, [r3, #0]
 8008b20:	e049      	b.n	8008bb6 <USB_EPStartXfer+0x45a>
 8008b22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b26:	095b      	lsrs	r3, r3, #5
 8008b28:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008b2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b30:	f003 031f 	and.w	r3, r3, #31
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d104      	bne.n	8008b42 <USB_EPStartXfer+0x3e6>
 8008b38:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008b3c:	3b01      	subs	r3, #1
 8008b3e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008b42:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008b46:	b29b      	uxth	r3, r3
 8008b48:	029b      	lsls	r3, r3, #10
 8008b4a:	b29b      	uxth	r3, r3
 8008b4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b54:	b29a      	uxth	r2, r3
 8008b56:	f107 0314 	add.w	r3, r7, #20
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	801a      	strh	r2, [r3, #0]
 8008b5e:	e02a      	b.n	8008bb6 <USB_EPStartXfer+0x45a>
 8008b60:	463b      	mov	r3, r7
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	785b      	ldrb	r3, [r3, #1]
 8008b66:	2b01      	cmp	r3, #1
 8008b68:	d125      	bne.n	8008bb6 <USB_EPStartXfer+0x45a>
 8008b6a:	f107 0320 	add.w	r3, r7, #32
 8008b6e:	1d3a      	adds	r2, r7, #4
 8008b70:	6812      	ldr	r2, [r2, #0]
 8008b72:	601a      	str	r2, [r3, #0]
 8008b74:	1d3b      	adds	r3, r7, #4
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b7c:	b29b      	uxth	r3, r3
 8008b7e:	4619      	mov	r1, r3
 8008b80:	f107 0320 	add.w	r3, r7, #32
 8008b84:	f107 0220 	add.w	r2, r7, #32
 8008b88:	6812      	ldr	r2, [r2, #0]
 8008b8a:	440a      	add	r2, r1
 8008b8c:	601a      	str	r2, [r3, #0]
 8008b8e:	463b      	mov	r3, r7
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	781b      	ldrb	r3, [r3, #0]
 8008b94:	011a      	lsls	r2, r3, #4
 8008b96:	f107 0320 	add.w	r3, r7, #32
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	4413      	add	r3, r2
 8008b9e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8008ba2:	f107 031c 	add.w	r3, r7, #28
 8008ba6:	601a      	str	r2, [r3, #0]
 8008ba8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bac:	b29a      	uxth	r2, r3
 8008bae:	f107 031c 	add.w	r3, r7, #28
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008bb6:	463b      	mov	r3, r7
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	891b      	ldrh	r3, [r3, #8]
 8008bbc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008bc0:	463b      	mov	r3, r7
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	6959      	ldr	r1, [r3, #20]
 8008bc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bca:	b29b      	uxth	r3, r3
 8008bcc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008bd0:	1d38      	adds	r0, r7, #4
 8008bd2:	6800      	ldr	r0, [r0, #0]
 8008bd4:	f001 f9f7 	bl	8009fc6 <USB_WritePMA>
 8008bd8:	f000 bcc6 	b.w	8009568 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008bdc:	463b      	mov	r3, r7
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	785b      	ldrb	r3, [r3, #1]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d164      	bne.n	8008cb0 <USB_EPStartXfer+0x554>
 8008be6:	1d3b      	adds	r3, r7, #4
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	64bb      	str	r3, [r7, #72]	; 0x48
 8008bec:	1d3b      	adds	r3, r7, #4
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008bf4:	b29b      	uxth	r3, r3
 8008bf6:	461a      	mov	r2, r3
 8008bf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bfa:	4413      	add	r3, r2
 8008bfc:	64bb      	str	r3, [r7, #72]	; 0x48
 8008bfe:	463b      	mov	r3, r7
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	781b      	ldrb	r3, [r3, #0]
 8008c04:	011a      	lsls	r2, r3, #4
 8008c06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c08:	4413      	add	r3, r2
 8008c0a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008c0e:	647b      	str	r3, [r7, #68]	; 0x44
 8008c10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d112      	bne.n	8008c3e <USB_EPStartXfer+0x4e2>
 8008c18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c1a:	881b      	ldrh	r3, [r3, #0]
 8008c1c:	b29b      	uxth	r3, r3
 8008c1e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008c22:	b29a      	uxth	r2, r3
 8008c24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c26:	801a      	strh	r2, [r3, #0]
 8008c28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c2a:	881b      	ldrh	r3, [r3, #0]
 8008c2c:	b29b      	uxth	r3, r3
 8008c2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c36:	b29a      	uxth	r2, r3
 8008c38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c3a:	801a      	strh	r2, [r3, #0]
 8008c3c:	e057      	b.n	8008cee <USB_EPStartXfer+0x592>
 8008c3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c42:	2b3e      	cmp	r3, #62	; 0x3e
 8008c44:	d817      	bhi.n	8008c76 <USB_EPStartXfer+0x51a>
 8008c46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c4a:	085b      	lsrs	r3, r3, #1
 8008c4c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008c50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c54:	f003 0301 	and.w	r3, r3, #1
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d004      	beq.n	8008c66 <USB_EPStartXfer+0x50a>
 8008c5c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008c60:	3301      	adds	r3, #1
 8008c62:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008c66:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008c6a:	b29b      	uxth	r3, r3
 8008c6c:	029b      	lsls	r3, r3, #10
 8008c6e:	b29a      	uxth	r2, r3
 8008c70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c72:	801a      	strh	r2, [r3, #0]
 8008c74:	e03b      	b.n	8008cee <USB_EPStartXfer+0x592>
 8008c76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c7a:	095b      	lsrs	r3, r3, #5
 8008c7c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008c80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c84:	f003 031f 	and.w	r3, r3, #31
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d104      	bne.n	8008c96 <USB_EPStartXfer+0x53a>
 8008c8c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008c90:	3b01      	subs	r3, #1
 8008c92:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008c96:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008c9a:	b29b      	uxth	r3, r3
 8008c9c:	029b      	lsls	r3, r3, #10
 8008c9e:	b29b      	uxth	r3, r3
 8008ca0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ca4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ca8:	b29a      	uxth	r2, r3
 8008caa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008cac:	801a      	strh	r2, [r3, #0]
 8008cae:	e01e      	b.n	8008cee <USB_EPStartXfer+0x592>
 8008cb0:	463b      	mov	r3, r7
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	785b      	ldrb	r3, [r3, #1]
 8008cb6:	2b01      	cmp	r3, #1
 8008cb8:	d119      	bne.n	8008cee <USB_EPStartXfer+0x592>
 8008cba:	1d3b      	adds	r3, r7, #4
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	653b      	str	r3, [r7, #80]	; 0x50
 8008cc0:	1d3b      	adds	r3, r7, #4
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008cc8:	b29b      	uxth	r3, r3
 8008cca:	461a      	mov	r2, r3
 8008ccc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008cce:	4413      	add	r3, r2
 8008cd0:	653b      	str	r3, [r7, #80]	; 0x50
 8008cd2:	463b      	mov	r3, r7
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	781b      	ldrb	r3, [r3, #0]
 8008cd8:	011a      	lsls	r2, r3, #4
 8008cda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008cdc:	4413      	add	r3, r2
 8008cde:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008ce2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ce4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ce8:	b29a      	uxth	r2, r3
 8008cea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008cee:	463b      	mov	r3, r7
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	891b      	ldrh	r3, [r3, #8]
 8008cf4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008cf8:	463b      	mov	r3, r7
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	6959      	ldr	r1, [r3, #20]
 8008cfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d02:	b29b      	uxth	r3, r3
 8008d04:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008d08:	1d38      	adds	r0, r7, #4
 8008d0a:	6800      	ldr	r0, [r0, #0]
 8008d0c:	f001 f95b 	bl	8009fc6 <USB_WritePMA>
            ep->xfer_buff += len;
 8008d10:	463b      	mov	r3, r7
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	695a      	ldr	r2, [r3, #20]
 8008d16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d1a:	441a      	add	r2, r3
 8008d1c:	463b      	mov	r3, r7
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008d22:	463b      	mov	r3, r7
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	6a1a      	ldr	r2, [r3, #32]
 8008d28:	463b      	mov	r3, r7
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	691b      	ldr	r3, [r3, #16]
 8008d2e:	429a      	cmp	r2, r3
 8008d30:	d909      	bls.n	8008d46 <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 8008d32:	463b      	mov	r3, r7
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	6a1a      	ldr	r2, [r3, #32]
 8008d38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d3c:	1ad2      	subs	r2, r2, r3
 8008d3e:	463b      	mov	r3, r7
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	621a      	str	r2, [r3, #32]
 8008d44:	e008      	b.n	8008d58 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8008d46:	463b      	mov	r3, r7
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	6a1b      	ldr	r3, [r3, #32]
 8008d4c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8008d50:	463b      	mov	r3, r7
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	2200      	movs	r2, #0
 8008d56:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008d58:	1d3b      	adds	r3, r7, #4
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	643b      	str	r3, [r7, #64]	; 0x40
 8008d5e:	463b      	mov	r3, r7
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	785b      	ldrb	r3, [r3, #1]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d164      	bne.n	8008e32 <USB_EPStartXfer+0x6d6>
 8008d68:	1d3b      	adds	r3, r7, #4
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	63bb      	str	r3, [r7, #56]	; 0x38
 8008d6e:	1d3b      	adds	r3, r7, #4
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d76:	b29b      	uxth	r3, r3
 8008d78:	461a      	mov	r2, r3
 8008d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d7c:	4413      	add	r3, r2
 8008d7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008d80:	463b      	mov	r3, r7
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	781b      	ldrb	r3, [r3, #0]
 8008d86:	011a      	lsls	r2, r3, #4
 8008d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d8a:	4413      	add	r3, r2
 8008d8c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008d90:	637b      	str	r3, [r7, #52]	; 0x34
 8008d92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d112      	bne.n	8008dc0 <USB_EPStartXfer+0x664>
 8008d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d9c:	881b      	ldrh	r3, [r3, #0]
 8008d9e:	b29b      	uxth	r3, r3
 8008da0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008da4:	b29a      	uxth	r2, r3
 8008da6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008da8:	801a      	strh	r2, [r3, #0]
 8008daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dac:	881b      	ldrh	r3, [r3, #0]
 8008dae:	b29b      	uxth	r3, r3
 8008db0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008db4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008db8:	b29a      	uxth	r2, r3
 8008dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dbc:	801a      	strh	r2, [r3, #0]
 8008dbe:	e054      	b.n	8008e6a <USB_EPStartXfer+0x70e>
 8008dc0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008dc4:	2b3e      	cmp	r3, #62	; 0x3e
 8008dc6:	d817      	bhi.n	8008df8 <USB_EPStartXfer+0x69c>
 8008dc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008dcc:	085b      	lsrs	r3, r3, #1
 8008dce:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008dd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008dd6:	f003 0301 	and.w	r3, r3, #1
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d004      	beq.n	8008de8 <USB_EPStartXfer+0x68c>
 8008dde:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008de2:	3301      	adds	r3, #1
 8008de4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008de8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008dec:	b29b      	uxth	r3, r3
 8008dee:	029b      	lsls	r3, r3, #10
 8008df0:	b29a      	uxth	r2, r3
 8008df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008df4:	801a      	strh	r2, [r3, #0]
 8008df6:	e038      	b.n	8008e6a <USB_EPStartXfer+0x70e>
 8008df8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008dfc:	095b      	lsrs	r3, r3, #5
 8008dfe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008e02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e06:	f003 031f 	and.w	r3, r3, #31
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d104      	bne.n	8008e18 <USB_EPStartXfer+0x6bc>
 8008e0e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008e12:	3b01      	subs	r3, #1
 8008e14:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008e18:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008e1c:	b29b      	uxth	r3, r3
 8008e1e:	029b      	lsls	r3, r3, #10
 8008e20:	b29b      	uxth	r3, r3
 8008e22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e2a:	b29a      	uxth	r2, r3
 8008e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e2e:	801a      	strh	r2, [r3, #0]
 8008e30:	e01b      	b.n	8008e6a <USB_EPStartXfer+0x70e>
 8008e32:	463b      	mov	r3, r7
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	785b      	ldrb	r3, [r3, #1]
 8008e38:	2b01      	cmp	r3, #1
 8008e3a:	d116      	bne.n	8008e6a <USB_EPStartXfer+0x70e>
 8008e3c:	1d3b      	adds	r3, r7, #4
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e44:	b29b      	uxth	r3, r3
 8008e46:	461a      	mov	r2, r3
 8008e48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e4a:	4413      	add	r3, r2
 8008e4c:	643b      	str	r3, [r7, #64]	; 0x40
 8008e4e:	463b      	mov	r3, r7
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	781b      	ldrb	r3, [r3, #0]
 8008e54:	011a      	lsls	r2, r3, #4
 8008e56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e58:	4413      	add	r3, r2
 8008e5a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e64:	b29a      	uxth	r2, r3
 8008e66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e68:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008e6a:	463b      	mov	r3, r7
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	895b      	ldrh	r3, [r3, #10]
 8008e70:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008e74:	463b      	mov	r3, r7
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	6959      	ldr	r1, [r3, #20]
 8008e7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e7e:	b29b      	uxth	r3, r3
 8008e80:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008e84:	1d38      	adds	r0, r7, #4
 8008e86:	6800      	ldr	r0, [r0, #0]
 8008e88:	f001 f89d 	bl	8009fc6 <USB_WritePMA>
 8008e8c:	e36c      	b.n	8009568 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008e8e:	463b      	mov	r3, r7
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	6a1b      	ldr	r3, [r3, #32]
 8008e94:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8008e98:	1d3b      	adds	r3, r7, #4
 8008e9a:	681a      	ldr	r2, [r3, #0]
 8008e9c:	463b      	mov	r3, r7
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	781b      	ldrb	r3, [r3, #0]
 8008ea2:	009b      	lsls	r3, r3, #2
 8008ea4:	4413      	add	r3, r2
 8008ea6:	881b      	ldrh	r3, [r3, #0]
 8008ea8:	b29b      	uxth	r3, r3
 8008eaa:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8008eae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008eb2:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8008eb6:	1d3b      	adds	r3, r7, #4
 8008eb8:	681a      	ldr	r2, [r3, #0]
 8008eba:	463b      	mov	r3, r7
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	781b      	ldrb	r3, [r3, #0]
 8008ec0:	009b      	lsls	r3, r3, #2
 8008ec2:	441a      	add	r2, r3
 8008ec4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008ec8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ecc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ed0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ed8:	b29b      	uxth	r3, r3
 8008eda:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008edc:	1d3b      	adds	r3, r7, #4
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ee2:	1d3b      	adds	r3, r7, #4
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008eea:	b29b      	uxth	r3, r3
 8008eec:	461a      	mov	r2, r3
 8008eee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ef0:	4413      	add	r3, r2
 8008ef2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ef4:	463b      	mov	r3, r7
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	781b      	ldrb	r3, [r3, #0]
 8008efa:	011a      	lsls	r2, r3, #4
 8008efc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008efe:	4413      	add	r3, r2
 8008f00:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008f04:	65bb      	str	r3, [r7, #88]	; 0x58
 8008f06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f0a:	b29a      	uxth	r2, r3
 8008f0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008f0e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008f10:	463b      	mov	r3, r7
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	891b      	ldrh	r3, [r3, #8]
 8008f16:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008f1a:	463b      	mov	r3, r7
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	6959      	ldr	r1, [r3, #20]
 8008f20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f24:	b29b      	uxth	r3, r3
 8008f26:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008f2a:	1d38      	adds	r0, r7, #4
 8008f2c:	6800      	ldr	r0, [r0, #0]
 8008f2e:	f001 f84a 	bl	8009fc6 <USB_WritePMA>
 8008f32:	e319      	b.n	8009568 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8008f34:	1d3b      	adds	r3, r7, #4
 8008f36:	681a      	ldr	r2, [r3, #0]
 8008f38:	463b      	mov	r3, r7
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	781b      	ldrb	r3, [r3, #0]
 8008f3e:	009b      	lsls	r3, r3, #2
 8008f40:	4413      	add	r3, r2
 8008f42:	881b      	ldrh	r3, [r3, #0]
 8008f44:	b29b      	uxth	r3, r3
 8008f46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f4e:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8008f52:	1d3b      	adds	r3, r7, #4
 8008f54:	681a      	ldr	r2, [r3, #0]
 8008f56:	463b      	mov	r3, r7
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	781b      	ldrb	r3, [r3, #0]
 8008f5c:	009b      	lsls	r3, r3, #2
 8008f5e:	441a      	add	r2, r3
 8008f60:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8008f64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f6c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008f70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f74:	b29b      	uxth	r3, r3
 8008f76:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008f78:	463b      	mov	r3, r7
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	6a1a      	ldr	r2, [r3, #32]
 8008f7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f82:	1ad2      	subs	r2, r2, r3
 8008f84:	463b      	mov	r3, r7
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008f8a:	1d3b      	adds	r3, r7, #4
 8008f8c:	681a      	ldr	r2, [r3, #0]
 8008f8e:	463b      	mov	r3, r7
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	781b      	ldrb	r3, [r3, #0]
 8008f94:	009b      	lsls	r3, r3, #2
 8008f96:	4413      	add	r3, r2
 8008f98:	881b      	ldrh	r3, [r3, #0]
 8008f9a:	b29b      	uxth	r3, r3
 8008f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	f000 8162 	beq.w	800926a <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008fa6:	1d3b      	adds	r3, r7, #4
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008fae:	463b      	mov	r3, r7
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	785b      	ldrb	r3, [r3, #1]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d164      	bne.n	8009082 <USB_EPStartXfer+0x926>
 8008fb8:	1d3b      	adds	r3, r7, #4
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	67bb      	str	r3, [r7, #120]	; 0x78
 8008fbe:	1d3b      	adds	r3, r7, #4
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008fc6:	b29b      	uxth	r3, r3
 8008fc8:	461a      	mov	r2, r3
 8008fca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008fcc:	4413      	add	r3, r2
 8008fce:	67bb      	str	r3, [r7, #120]	; 0x78
 8008fd0:	463b      	mov	r3, r7
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	781b      	ldrb	r3, [r3, #0]
 8008fd6:	011a      	lsls	r2, r3, #4
 8008fd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008fda:	4413      	add	r3, r2
 8008fdc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008fe0:	677b      	str	r3, [r7, #116]	; 0x74
 8008fe2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d112      	bne.n	8009010 <USB_EPStartXfer+0x8b4>
 8008fea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008fec:	881b      	ldrh	r3, [r3, #0]
 8008fee:	b29b      	uxth	r3, r3
 8008ff0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008ff4:	b29a      	uxth	r2, r3
 8008ff6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ff8:	801a      	strh	r2, [r3, #0]
 8008ffa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ffc:	881b      	ldrh	r3, [r3, #0]
 8008ffe:	b29b      	uxth	r3, r3
 8009000:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009004:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009008:	b29a      	uxth	r2, r3
 800900a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800900c:	801a      	strh	r2, [r3, #0]
 800900e:	e057      	b.n	80090c0 <USB_EPStartXfer+0x964>
 8009010:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009014:	2b3e      	cmp	r3, #62	; 0x3e
 8009016:	d817      	bhi.n	8009048 <USB_EPStartXfer+0x8ec>
 8009018:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800901c:	085b      	lsrs	r3, r3, #1
 800901e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009022:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009026:	f003 0301 	and.w	r3, r3, #1
 800902a:	2b00      	cmp	r3, #0
 800902c:	d004      	beq.n	8009038 <USB_EPStartXfer+0x8dc>
 800902e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009032:	3301      	adds	r3, #1
 8009034:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009038:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800903c:	b29b      	uxth	r3, r3
 800903e:	029b      	lsls	r3, r3, #10
 8009040:	b29a      	uxth	r2, r3
 8009042:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009044:	801a      	strh	r2, [r3, #0]
 8009046:	e03b      	b.n	80090c0 <USB_EPStartXfer+0x964>
 8009048:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800904c:	095b      	lsrs	r3, r3, #5
 800904e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009052:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009056:	f003 031f 	and.w	r3, r3, #31
 800905a:	2b00      	cmp	r3, #0
 800905c:	d104      	bne.n	8009068 <USB_EPStartXfer+0x90c>
 800905e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009062:	3b01      	subs	r3, #1
 8009064:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009068:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800906c:	b29b      	uxth	r3, r3
 800906e:	029b      	lsls	r3, r3, #10
 8009070:	b29b      	uxth	r3, r3
 8009072:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009076:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800907a:	b29a      	uxth	r2, r3
 800907c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800907e:	801a      	strh	r2, [r3, #0]
 8009080:	e01e      	b.n	80090c0 <USB_EPStartXfer+0x964>
 8009082:	463b      	mov	r3, r7
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	785b      	ldrb	r3, [r3, #1]
 8009088:	2b01      	cmp	r3, #1
 800908a:	d119      	bne.n	80090c0 <USB_EPStartXfer+0x964>
 800908c:	1d3b      	adds	r3, r7, #4
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009094:	b29b      	uxth	r3, r3
 8009096:	461a      	mov	r2, r3
 8009098:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800909c:	4413      	add	r3, r2
 800909e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80090a2:	463b      	mov	r3, r7
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	781b      	ldrb	r3, [r3, #0]
 80090a8:	011a      	lsls	r2, r3, #4
 80090aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80090ae:	4413      	add	r3, r2
 80090b0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80090b4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80090b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090ba:	b29a      	uxth	r2, r3
 80090bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80090be:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80090c0:	463b      	mov	r3, r7
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	895b      	ldrh	r3, [r3, #10]
 80090c6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80090ca:	463b      	mov	r3, r7
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	6959      	ldr	r1, [r3, #20]
 80090d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090d4:	b29b      	uxth	r3, r3
 80090d6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80090da:	1d38      	adds	r0, r7, #4
 80090dc:	6800      	ldr	r0, [r0, #0]
 80090de:	f000 ff72 	bl	8009fc6 <USB_WritePMA>
          ep->xfer_buff += len;
 80090e2:	463b      	mov	r3, r7
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	695a      	ldr	r2, [r3, #20]
 80090e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090ec:	441a      	add	r2, r3
 80090ee:	463b      	mov	r3, r7
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80090f4:	463b      	mov	r3, r7
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	6a1a      	ldr	r2, [r3, #32]
 80090fa:	463b      	mov	r3, r7
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	691b      	ldr	r3, [r3, #16]
 8009100:	429a      	cmp	r2, r3
 8009102:	d909      	bls.n	8009118 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8009104:	463b      	mov	r3, r7
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	6a1a      	ldr	r2, [r3, #32]
 800910a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800910e:	1ad2      	subs	r2, r2, r3
 8009110:	463b      	mov	r3, r7
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	621a      	str	r2, [r3, #32]
 8009116:	e008      	b.n	800912a <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8009118:	463b      	mov	r3, r7
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	6a1b      	ldr	r3, [r3, #32]
 800911e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8009122:	463b      	mov	r3, r7
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	2200      	movs	r2, #0
 8009128:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800912a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800912e:	2b00      	cmp	r3, #0
 8009130:	f000 821a 	beq.w	8009568 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009134:	463b      	mov	r3, r7
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	785b      	ldrb	r3, [r3, #1]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d164      	bne.n	8009208 <USB_EPStartXfer+0xaac>
 800913e:	1d3b      	adds	r3, r7, #4
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	66bb      	str	r3, [r7, #104]	; 0x68
 8009144:	1d3b      	adds	r3, r7, #4
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800914c:	b29b      	uxth	r3, r3
 800914e:	461a      	mov	r2, r3
 8009150:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009152:	4413      	add	r3, r2
 8009154:	66bb      	str	r3, [r7, #104]	; 0x68
 8009156:	463b      	mov	r3, r7
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	781b      	ldrb	r3, [r3, #0]
 800915c:	011a      	lsls	r2, r3, #4
 800915e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009160:	4413      	add	r3, r2
 8009162:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009166:	667b      	str	r3, [r7, #100]	; 0x64
 8009168:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800916c:	2b00      	cmp	r3, #0
 800916e:	d112      	bne.n	8009196 <USB_EPStartXfer+0xa3a>
 8009170:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009172:	881b      	ldrh	r3, [r3, #0]
 8009174:	b29b      	uxth	r3, r3
 8009176:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800917a:	b29a      	uxth	r2, r3
 800917c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800917e:	801a      	strh	r2, [r3, #0]
 8009180:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009182:	881b      	ldrh	r3, [r3, #0]
 8009184:	b29b      	uxth	r3, r3
 8009186:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800918a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800918e:	b29a      	uxth	r2, r3
 8009190:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009192:	801a      	strh	r2, [r3, #0]
 8009194:	e057      	b.n	8009246 <USB_EPStartXfer+0xaea>
 8009196:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800919a:	2b3e      	cmp	r3, #62	; 0x3e
 800919c:	d817      	bhi.n	80091ce <USB_EPStartXfer+0xa72>
 800919e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091a2:	085b      	lsrs	r3, r3, #1
 80091a4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80091a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091ac:	f003 0301 	and.w	r3, r3, #1
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d004      	beq.n	80091be <USB_EPStartXfer+0xa62>
 80091b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091b8:	3301      	adds	r3, #1
 80091ba:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80091be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091c2:	b29b      	uxth	r3, r3
 80091c4:	029b      	lsls	r3, r3, #10
 80091c6:	b29a      	uxth	r2, r3
 80091c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80091ca:	801a      	strh	r2, [r3, #0]
 80091cc:	e03b      	b.n	8009246 <USB_EPStartXfer+0xaea>
 80091ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091d2:	095b      	lsrs	r3, r3, #5
 80091d4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80091d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091dc:	f003 031f 	and.w	r3, r3, #31
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d104      	bne.n	80091ee <USB_EPStartXfer+0xa92>
 80091e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091e8:	3b01      	subs	r3, #1
 80091ea:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80091ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091f2:	b29b      	uxth	r3, r3
 80091f4:	029b      	lsls	r3, r3, #10
 80091f6:	b29b      	uxth	r3, r3
 80091f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009200:	b29a      	uxth	r2, r3
 8009202:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009204:	801a      	strh	r2, [r3, #0]
 8009206:	e01e      	b.n	8009246 <USB_EPStartXfer+0xaea>
 8009208:	463b      	mov	r3, r7
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	785b      	ldrb	r3, [r3, #1]
 800920e:	2b01      	cmp	r3, #1
 8009210:	d119      	bne.n	8009246 <USB_EPStartXfer+0xaea>
 8009212:	1d3b      	adds	r3, r7, #4
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	673b      	str	r3, [r7, #112]	; 0x70
 8009218:	1d3b      	adds	r3, r7, #4
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009220:	b29b      	uxth	r3, r3
 8009222:	461a      	mov	r2, r3
 8009224:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009226:	4413      	add	r3, r2
 8009228:	673b      	str	r3, [r7, #112]	; 0x70
 800922a:	463b      	mov	r3, r7
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	781b      	ldrb	r3, [r3, #0]
 8009230:	011a      	lsls	r2, r3, #4
 8009232:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009234:	4413      	add	r3, r2
 8009236:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800923a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800923c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009240:	b29a      	uxth	r2, r3
 8009242:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009244:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009246:	463b      	mov	r3, r7
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	891b      	ldrh	r3, [r3, #8]
 800924c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009250:	463b      	mov	r3, r7
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	6959      	ldr	r1, [r3, #20]
 8009256:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800925a:	b29b      	uxth	r3, r3
 800925c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009260:	1d38      	adds	r0, r7, #4
 8009262:	6800      	ldr	r0, [r0, #0]
 8009264:	f000 feaf 	bl	8009fc6 <USB_WritePMA>
 8009268:	e17e      	b.n	8009568 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800926a:	463b      	mov	r3, r7
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	785b      	ldrb	r3, [r3, #1]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d16f      	bne.n	8009354 <USB_EPStartXfer+0xbf8>
 8009274:	1d3b      	adds	r3, r7, #4
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800927c:	1d3b      	adds	r3, r7, #4
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009284:	b29b      	uxth	r3, r3
 8009286:	461a      	mov	r2, r3
 8009288:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800928c:	4413      	add	r3, r2
 800928e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009292:	463b      	mov	r3, r7
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	781b      	ldrb	r3, [r3, #0]
 8009298:	011a      	lsls	r2, r3, #4
 800929a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800929e:	4413      	add	r3, r2
 80092a0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80092a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80092a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d116      	bne.n	80092de <USB_EPStartXfer+0xb82>
 80092b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80092b4:	881b      	ldrh	r3, [r3, #0]
 80092b6:	b29b      	uxth	r3, r3
 80092b8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80092bc:	b29a      	uxth	r2, r3
 80092be:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80092c2:	801a      	strh	r2, [r3, #0]
 80092c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80092c8:	881b      	ldrh	r3, [r3, #0]
 80092ca:	b29b      	uxth	r3, r3
 80092cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092d4:	b29a      	uxth	r2, r3
 80092d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80092da:	801a      	strh	r2, [r3, #0]
 80092dc:	e05f      	b.n	800939e <USB_EPStartXfer+0xc42>
 80092de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092e2:	2b3e      	cmp	r3, #62	; 0x3e
 80092e4:	d818      	bhi.n	8009318 <USB_EPStartXfer+0xbbc>
 80092e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092ea:	085b      	lsrs	r3, r3, #1
 80092ec:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80092f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092f4:	f003 0301 	and.w	r3, r3, #1
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d004      	beq.n	8009306 <USB_EPStartXfer+0xbaa>
 80092fc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009300:	3301      	adds	r3, #1
 8009302:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8009306:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800930a:	b29b      	uxth	r3, r3
 800930c:	029b      	lsls	r3, r3, #10
 800930e:	b29a      	uxth	r2, r3
 8009310:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009314:	801a      	strh	r2, [r3, #0]
 8009316:	e042      	b.n	800939e <USB_EPStartXfer+0xc42>
 8009318:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800931c:	095b      	lsrs	r3, r3, #5
 800931e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8009322:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009326:	f003 031f 	and.w	r3, r3, #31
 800932a:	2b00      	cmp	r3, #0
 800932c:	d104      	bne.n	8009338 <USB_EPStartXfer+0xbdc>
 800932e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009332:	3b01      	subs	r3, #1
 8009334:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8009338:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800933c:	b29b      	uxth	r3, r3
 800933e:	029b      	lsls	r3, r3, #10
 8009340:	b29b      	uxth	r3, r3
 8009342:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009346:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800934a:	b29a      	uxth	r2, r3
 800934c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009350:	801a      	strh	r2, [r3, #0]
 8009352:	e024      	b.n	800939e <USB_EPStartXfer+0xc42>
 8009354:	463b      	mov	r3, r7
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	785b      	ldrb	r3, [r3, #1]
 800935a:	2b01      	cmp	r3, #1
 800935c:	d11f      	bne.n	800939e <USB_EPStartXfer+0xc42>
 800935e:	1d3b      	adds	r3, r7, #4
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009366:	1d3b      	adds	r3, r7, #4
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800936e:	b29b      	uxth	r3, r3
 8009370:	461a      	mov	r2, r3
 8009372:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009376:	4413      	add	r3, r2
 8009378:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800937c:	463b      	mov	r3, r7
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	781b      	ldrb	r3, [r3, #0]
 8009382:	011a      	lsls	r2, r3, #4
 8009384:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009388:	4413      	add	r3, r2
 800938a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800938e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009392:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009396:	b29a      	uxth	r2, r3
 8009398:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800939c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800939e:	463b      	mov	r3, r7
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	891b      	ldrh	r3, [r3, #8]
 80093a4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80093a8:	463b      	mov	r3, r7
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	6959      	ldr	r1, [r3, #20]
 80093ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093b2:	b29b      	uxth	r3, r3
 80093b4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80093b8:	1d38      	adds	r0, r7, #4
 80093ba:	6800      	ldr	r0, [r0, #0]
 80093bc:	f000 fe03 	bl	8009fc6 <USB_WritePMA>
          ep->xfer_buff += len;
 80093c0:	463b      	mov	r3, r7
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	695a      	ldr	r2, [r3, #20]
 80093c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093ca:	441a      	add	r2, r3
 80093cc:	463b      	mov	r3, r7
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80093d2:	463b      	mov	r3, r7
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	6a1a      	ldr	r2, [r3, #32]
 80093d8:	463b      	mov	r3, r7
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	691b      	ldr	r3, [r3, #16]
 80093de:	429a      	cmp	r2, r3
 80093e0:	d909      	bls.n	80093f6 <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 80093e2:	463b      	mov	r3, r7
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	6a1a      	ldr	r2, [r3, #32]
 80093e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093ec:	1ad2      	subs	r2, r2, r3
 80093ee:	463b      	mov	r3, r7
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	621a      	str	r2, [r3, #32]
 80093f4:	e008      	b.n	8009408 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 80093f6:	463b      	mov	r3, r7
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	6a1b      	ldr	r3, [r3, #32]
 80093fc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8009400:	463b      	mov	r3, r7
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	2200      	movs	r2, #0
 8009406:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8009408:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800940c:	2b00      	cmp	r3, #0
 800940e:	f000 80ab 	beq.w	8009568 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009412:	1d3b      	adds	r3, r7, #4
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800941a:	463b      	mov	r3, r7
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	785b      	ldrb	r3, [r3, #1]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d16f      	bne.n	8009504 <USB_EPStartXfer+0xda8>
 8009424:	1d3b      	adds	r3, r7, #4
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800942c:	1d3b      	adds	r3, r7, #4
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009434:	b29b      	uxth	r3, r3
 8009436:	461a      	mov	r2, r3
 8009438:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800943c:	4413      	add	r3, r2
 800943e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009442:	463b      	mov	r3, r7
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	781b      	ldrb	r3, [r3, #0]
 8009448:	011a      	lsls	r2, r3, #4
 800944a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800944e:	4413      	add	r3, r2
 8009450:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009454:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009458:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800945c:	2b00      	cmp	r3, #0
 800945e:	d116      	bne.n	800948e <USB_EPStartXfer+0xd32>
 8009460:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009464:	881b      	ldrh	r3, [r3, #0]
 8009466:	b29b      	uxth	r3, r3
 8009468:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800946c:	b29a      	uxth	r2, r3
 800946e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009472:	801a      	strh	r2, [r3, #0]
 8009474:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009478:	881b      	ldrh	r3, [r3, #0]
 800947a:	b29b      	uxth	r3, r3
 800947c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009480:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009484:	b29a      	uxth	r2, r3
 8009486:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800948a:	801a      	strh	r2, [r3, #0]
 800948c:	e05b      	b.n	8009546 <USB_EPStartXfer+0xdea>
 800948e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009492:	2b3e      	cmp	r3, #62	; 0x3e
 8009494:	d818      	bhi.n	80094c8 <USB_EPStartXfer+0xd6c>
 8009496:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800949a:	085b      	lsrs	r3, r3, #1
 800949c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80094a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094a4:	f003 0301 	and.w	r3, r3, #1
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d004      	beq.n	80094b6 <USB_EPStartXfer+0xd5a>
 80094ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80094b0:	3301      	adds	r3, #1
 80094b2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80094b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80094ba:	b29b      	uxth	r3, r3
 80094bc:	029b      	lsls	r3, r3, #10
 80094be:	b29a      	uxth	r2, r3
 80094c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80094c4:	801a      	strh	r2, [r3, #0]
 80094c6:	e03e      	b.n	8009546 <USB_EPStartXfer+0xdea>
 80094c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094cc:	095b      	lsrs	r3, r3, #5
 80094ce:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80094d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094d6:	f003 031f 	and.w	r3, r3, #31
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d104      	bne.n	80094e8 <USB_EPStartXfer+0xd8c>
 80094de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80094e2:	3b01      	subs	r3, #1
 80094e4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80094e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80094ec:	b29b      	uxth	r3, r3
 80094ee:	029b      	lsls	r3, r3, #10
 80094f0:	b29b      	uxth	r3, r3
 80094f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094fa:	b29a      	uxth	r2, r3
 80094fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009500:	801a      	strh	r2, [r3, #0]
 8009502:	e020      	b.n	8009546 <USB_EPStartXfer+0xdea>
 8009504:	463b      	mov	r3, r7
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	785b      	ldrb	r3, [r3, #1]
 800950a:	2b01      	cmp	r3, #1
 800950c:	d11b      	bne.n	8009546 <USB_EPStartXfer+0xdea>
 800950e:	1d3b      	adds	r3, r7, #4
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009516:	b29b      	uxth	r3, r3
 8009518:	461a      	mov	r2, r3
 800951a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800951e:	4413      	add	r3, r2
 8009520:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009524:	463b      	mov	r3, r7
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	781b      	ldrb	r3, [r3, #0]
 800952a:	011a      	lsls	r2, r3, #4
 800952c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009530:	4413      	add	r3, r2
 8009532:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009536:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800953a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800953e:	b29a      	uxth	r2, r3
 8009540:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009544:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009546:	463b      	mov	r3, r7
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	895b      	ldrh	r3, [r3, #10]
 800954c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009550:	463b      	mov	r3, r7
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	6959      	ldr	r1, [r3, #20]
 8009556:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800955a:	b29b      	uxth	r3, r3
 800955c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009560:	1d38      	adds	r0, r7, #4
 8009562:	6800      	ldr	r0, [r0, #0]
 8009564:	f000 fd2f 	bl	8009fc6 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009568:	1d3b      	adds	r3, r7, #4
 800956a:	681a      	ldr	r2, [r3, #0]
 800956c:	463b      	mov	r3, r7
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	781b      	ldrb	r3, [r3, #0]
 8009572:	009b      	lsls	r3, r3, #2
 8009574:	4413      	add	r3, r2
 8009576:	881b      	ldrh	r3, [r3, #0]
 8009578:	b29b      	uxth	r3, r3
 800957a:	f107 020a 	add.w	r2, r7, #10
 800957e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009582:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009586:	8013      	strh	r3, [r2, #0]
 8009588:	f107 030a 	add.w	r3, r7, #10
 800958c:	f107 020a 	add.w	r2, r7, #10
 8009590:	8812      	ldrh	r2, [r2, #0]
 8009592:	f082 0210 	eor.w	r2, r2, #16
 8009596:	801a      	strh	r2, [r3, #0]
 8009598:	f107 030a 	add.w	r3, r7, #10
 800959c:	f107 020a 	add.w	r2, r7, #10
 80095a0:	8812      	ldrh	r2, [r2, #0]
 80095a2:	f082 0220 	eor.w	r2, r2, #32
 80095a6:	801a      	strh	r2, [r3, #0]
 80095a8:	1d3b      	adds	r3, r7, #4
 80095aa:	681a      	ldr	r2, [r3, #0]
 80095ac:	463b      	mov	r3, r7
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	781b      	ldrb	r3, [r3, #0]
 80095b2:	009b      	lsls	r3, r3, #2
 80095b4:	441a      	add	r2, r3
 80095b6:	f107 030a 	add.w	r3, r7, #10
 80095ba:	881b      	ldrh	r3, [r3, #0]
 80095bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80095c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80095c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095cc:	b29b      	uxth	r3, r3
 80095ce:	8013      	strh	r3, [r2, #0]
 80095d0:	e3b5      	b.n	8009d3e <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80095d2:	463b      	mov	r3, r7
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	7b1b      	ldrb	r3, [r3, #12]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	f040 8090 	bne.w	80096fe <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80095de:	463b      	mov	r3, r7
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	699a      	ldr	r2, [r3, #24]
 80095e4:	463b      	mov	r3, r7
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	691b      	ldr	r3, [r3, #16]
 80095ea:	429a      	cmp	r2, r3
 80095ec:	d90e      	bls.n	800960c <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 80095ee:	463b      	mov	r3, r7
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	691b      	ldr	r3, [r3, #16]
 80095f4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80095f8:	463b      	mov	r3, r7
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	699a      	ldr	r2, [r3, #24]
 80095fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009602:	1ad2      	subs	r2, r2, r3
 8009604:	463b      	mov	r3, r7
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	619a      	str	r2, [r3, #24]
 800960a:	e008      	b.n	800961e <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 800960c:	463b      	mov	r3, r7
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	699b      	ldr	r3, [r3, #24]
 8009612:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8009616:	463b      	mov	r3, r7
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	2200      	movs	r2, #0
 800961c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800961e:	1d3b      	adds	r3, r7, #4
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009626:	1d3b      	adds	r3, r7, #4
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800962e:	b29b      	uxth	r3, r3
 8009630:	461a      	mov	r2, r3
 8009632:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009636:	4413      	add	r3, r2
 8009638:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800963c:	463b      	mov	r3, r7
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	781b      	ldrb	r3, [r3, #0]
 8009642:	011a      	lsls	r2, r3, #4
 8009644:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009648:	4413      	add	r3, r2
 800964a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800964e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009652:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009656:	2b00      	cmp	r3, #0
 8009658:	d116      	bne.n	8009688 <USB_EPStartXfer+0xf2c>
 800965a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800965e:	881b      	ldrh	r3, [r3, #0]
 8009660:	b29b      	uxth	r3, r3
 8009662:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009666:	b29a      	uxth	r2, r3
 8009668:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800966c:	801a      	strh	r2, [r3, #0]
 800966e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009672:	881b      	ldrh	r3, [r3, #0]
 8009674:	b29b      	uxth	r3, r3
 8009676:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800967a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800967e:	b29a      	uxth	r2, r3
 8009680:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009684:	801a      	strh	r2, [r3, #0]
 8009686:	e32c      	b.n	8009ce2 <USB_EPStartXfer+0x1586>
 8009688:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800968c:	2b3e      	cmp	r3, #62	; 0x3e
 800968e:	d818      	bhi.n	80096c2 <USB_EPStartXfer+0xf66>
 8009690:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009694:	085b      	lsrs	r3, r3, #1
 8009696:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800969a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800969e:	f003 0301 	and.w	r3, r3, #1
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d004      	beq.n	80096b0 <USB_EPStartXfer+0xf54>
 80096a6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80096aa:	3301      	adds	r3, #1
 80096ac:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80096b0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80096b4:	b29b      	uxth	r3, r3
 80096b6:	029b      	lsls	r3, r3, #10
 80096b8:	b29a      	uxth	r2, r3
 80096ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80096be:	801a      	strh	r2, [r3, #0]
 80096c0:	e30f      	b.n	8009ce2 <USB_EPStartXfer+0x1586>
 80096c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096c6:	095b      	lsrs	r3, r3, #5
 80096c8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80096cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096d0:	f003 031f 	and.w	r3, r3, #31
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d104      	bne.n	80096e2 <USB_EPStartXfer+0xf86>
 80096d8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80096dc:	3b01      	subs	r3, #1
 80096de:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80096e2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80096e6:	b29b      	uxth	r3, r3
 80096e8:	029b      	lsls	r3, r3, #10
 80096ea:	b29b      	uxth	r3, r3
 80096ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096f4:	b29a      	uxth	r2, r3
 80096f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80096fa:	801a      	strh	r2, [r3, #0]
 80096fc:	e2f1      	b.n	8009ce2 <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80096fe:	463b      	mov	r3, r7
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	78db      	ldrb	r3, [r3, #3]
 8009704:	2b02      	cmp	r3, #2
 8009706:	f040 818f 	bne.w	8009a28 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800970a:	463b      	mov	r3, r7
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	785b      	ldrb	r3, [r3, #1]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d175      	bne.n	8009800 <USB_EPStartXfer+0x10a4>
 8009714:	1d3b      	adds	r3, r7, #4
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800971c:	1d3b      	adds	r3, r7, #4
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009724:	b29b      	uxth	r3, r3
 8009726:	461a      	mov	r2, r3
 8009728:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800972c:	4413      	add	r3, r2
 800972e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009732:	463b      	mov	r3, r7
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	781b      	ldrb	r3, [r3, #0]
 8009738:	011a      	lsls	r2, r3, #4
 800973a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800973e:	4413      	add	r3, r2
 8009740:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009744:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009748:	463b      	mov	r3, r7
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	691b      	ldr	r3, [r3, #16]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d116      	bne.n	8009780 <USB_EPStartXfer+0x1024>
 8009752:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009756:	881b      	ldrh	r3, [r3, #0]
 8009758:	b29b      	uxth	r3, r3
 800975a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800975e:	b29a      	uxth	r2, r3
 8009760:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009764:	801a      	strh	r2, [r3, #0]
 8009766:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800976a:	881b      	ldrh	r3, [r3, #0]
 800976c:	b29b      	uxth	r3, r3
 800976e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009772:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009776:	b29a      	uxth	r2, r3
 8009778:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800977c:	801a      	strh	r2, [r3, #0]
 800977e:	e065      	b.n	800984c <USB_EPStartXfer+0x10f0>
 8009780:	463b      	mov	r3, r7
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	691b      	ldr	r3, [r3, #16]
 8009786:	2b3e      	cmp	r3, #62	; 0x3e
 8009788:	d81a      	bhi.n	80097c0 <USB_EPStartXfer+0x1064>
 800978a:	463b      	mov	r3, r7
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	691b      	ldr	r3, [r3, #16]
 8009790:	085b      	lsrs	r3, r3, #1
 8009792:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009796:	463b      	mov	r3, r7
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	691b      	ldr	r3, [r3, #16]
 800979c:	f003 0301 	and.w	r3, r3, #1
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d004      	beq.n	80097ae <USB_EPStartXfer+0x1052>
 80097a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097a8:	3301      	adds	r3, #1
 80097aa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80097ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097b2:	b29b      	uxth	r3, r3
 80097b4:	029b      	lsls	r3, r3, #10
 80097b6:	b29a      	uxth	r2, r3
 80097b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80097bc:	801a      	strh	r2, [r3, #0]
 80097be:	e045      	b.n	800984c <USB_EPStartXfer+0x10f0>
 80097c0:	463b      	mov	r3, r7
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	691b      	ldr	r3, [r3, #16]
 80097c6:	095b      	lsrs	r3, r3, #5
 80097c8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80097cc:	463b      	mov	r3, r7
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	691b      	ldr	r3, [r3, #16]
 80097d2:	f003 031f 	and.w	r3, r3, #31
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d104      	bne.n	80097e4 <USB_EPStartXfer+0x1088>
 80097da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097de:	3b01      	subs	r3, #1
 80097e0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80097e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097e8:	b29b      	uxth	r3, r3
 80097ea:	029b      	lsls	r3, r3, #10
 80097ec:	b29b      	uxth	r3, r3
 80097ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097f6:	b29a      	uxth	r2, r3
 80097f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80097fc:	801a      	strh	r2, [r3, #0]
 80097fe:	e025      	b.n	800984c <USB_EPStartXfer+0x10f0>
 8009800:	463b      	mov	r3, r7
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	785b      	ldrb	r3, [r3, #1]
 8009806:	2b01      	cmp	r3, #1
 8009808:	d120      	bne.n	800984c <USB_EPStartXfer+0x10f0>
 800980a:	1d3b      	adds	r3, r7, #4
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009812:	1d3b      	adds	r3, r7, #4
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800981a:	b29b      	uxth	r3, r3
 800981c:	461a      	mov	r2, r3
 800981e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009822:	4413      	add	r3, r2
 8009824:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009828:	463b      	mov	r3, r7
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	781b      	ldrb	r3, [r3, #0]
 800982e:	011a      	lsls	r2, r3, #4
 8009830:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009834:	4413      	add	r3, r2
 8009836:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800983a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800983e:	463b      	mov	r3, r7
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	691b      	ldr	r3, [r3, #16]
 8009844:	b29a      	uxth	r2, r3
 8009846:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800984a:	801a      	strh	r2, [r3, #0]
 800984c:	1d3b      	adds	r3, r7, #4
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009854:	463b      	mov	r3, r7
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	785b      	ldrb	r3, [r3, #1]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d175      	bne.n	800994a <USB_EPStartXfer+0x11ee>
 800985e:	1d3b      	adds	r3, r7, #4
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009866:	1d3b      	adds	r3, r7, #4
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800986e:	b29b      	uxth	r3, r3
 8009870:	461a      	mov	r2, r3
 8009872:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009876:	4413      	add	r3, r2
 8009878:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800987c:	463b      	mov	r3, r7
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	781b      	ldrb	r3, [r3, #0]
 8009882:	011a      	lsls	r2, r3, #4
 8009884:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009888:	4413      	add	r3, r2
 800988a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800988e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009892:	463b      	mov	r3, r7
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	691b      	ldr	r3, [r3, #16]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d116      	bne.n	80098ca <USB_EPStartXfer+0x116e>
 800989c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80098a0:	881b      	ldrh	r3, [r3, #0]
 80098a2:	b29b      	uxth	r3, r3
 80098a4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80098a8:	b29a      	uxth	r2, r3
 80098aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80098ae:	801a      	strh	r2, [r3, #0]
 80098b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80098b4:	881b      	ldrh	r3, [r3, #0]
 80098b6:	b29b      	uxth	r3, r3
 80098b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098c0:	b29a      	uxth	r2, r3
 80098c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80098c6:	801a      	strh	r2, [r3, #0]
 80098c8:	e061      	b.n	800998e <USB_EPStartXfer+0x1232>
 80098ca:	463b      	mov	r3, r7
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	691b      	ldr	r3, [r3, #16]
 80098d0:	2b3e      	cmp	r3, #62	; 0x3e
 80098d2:	d81a      	bhi.n	800990a <USB_EPStartXfer+0x11ae>
 80098d4:	463b      	mov	r3, r7
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	691b      	ldr	r3, [r3, #16]
 80098da:	085b      	lsrs	r3, r3, #1
 80098dc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80098e0:	463b      	mov	r3, r7
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	691b      	ldr	r3, [r3, #16]
 80098e6:	f003 0301 	and.w	r3, r3, #1
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d004      	beq.n	80098f8 <USB_EPStartXfer+0x119c>
 80098ee:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80098f2:	3301      	adds	r3, #1
 80098f4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80098f8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80098fc:	b29b      	uxth	r3, r3
 80098fe:	029b      	lsls	r3, r3, #10
 8009900:	b29a      	uxth	r2, r3
 8009902:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009906:	801a      	strh	r2, [r3, #0]
 8009908:	e041      	b.n	800998e <USB_EPStartXfer+0x1232>
 800990a:	463b      	mov	r3, r7
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	691b      	ldr	r3, [r3, #16]
 8009910:	095b      	lsrs	r3, r3, #5
 8009912:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009916:	463b      	mov	r3, r7
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	691b      	ldr	r3, [r3, #16]
 800991c:	f003 031f 	and.w	r3, r3, #31
 8009920:	2b00      	cmp	r3, #0
 8009922:	d104      	bne.n	800992e <USB_EPStartXfer+0x11d2>
 8009924:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009928:	3b01      	subs	r3, #1
 800992a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800992e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009932:	b29b      	uxth	r3, r3
 8009934:	029b      	lsls	r3, r3, #10
 8009936:	b29b      	uxth	r3, r3
 8009938:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800993c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009940:	b29a      	uxth	r2, r3
 8009942:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009946:	801a      	strh	r2, [r3, #0]
 8009948:	e021      	b.n	800998e <USB_EPStartXfer+0x1232>
 800994a:	463b      	mov	r3, r7
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	785b      	ldrb	r3, [r3, #1]
 8009950:	2b01      	cmp	r3, #1
 8009952:	d11c      	bne.n	800998e <USB_EPStartXfer+0x1232>
 8009954:	1d3b      	adds	r3, r7, #4
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800995c:	b29b      	uxth	r3, r3
 800995e:	461a      	mov	r2, r3
 8009960:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009964:	4413      	add	r3, r2
 8009966:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800996a:	463b      	mov	r3, r7
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	781b      	ldrb	r3, [r3, #0]
 8009970:	011a      	lsls	r2, r3, #4
 8009972:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009976:	4413      	add	r3, r2
 8009978:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800997c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009980:	463b      	mov	r3, r7
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	691b      	ldr	r3, [r3, #16]
 8009986:	b29a      	uxth	r2, r3
 8009988:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800998c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800998e:	463b      	mov	r3, r7
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	69db      	ldr	r3, [r3, #28]
 8009994:	2b00      	cmp	r3, #0
 8009996:	f000 81a4 	beq.w	8009ce2 <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800999a:	1d3b      	adds	r3, r7, #4
 800999c:	681a      	ldr	r2, [r3, #0]
 800999e:	463b      	mov	r3, r7
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	781b      	ldrb	r3, [r3, #0]
 80099a4:	009b      	lsls	r3, r3, #2
 80099a6:	4413      	add	r3, r2
 80099a8:	881b      	ldrh	r3, [r3, #0]
 80099aa:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80099ae:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80099b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d005      	beq.n	80099c6 <USB_EPStartXfer+0x126a>
 80099ba:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80099be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d10d      	bne.n	80099e2 <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80099c6:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80099ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	f040 8187 	bne.w	8009ce2 <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80099d4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80099d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099dc:	2b00      	cmp	r3, #0
 80099de:	f040 8180 	bne.w	8009ce2 <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80099e2:	1d3b      	adds	r3, r7, #4
 80099e4:	681a      	ldr	r2, [r3, #0]
 80099e6:	463b      	mov	r3, r7
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	781b      	ldrb	r3, [r3, #0]
 80099ec:	009b      	lsls	r3, r3, #2
 80099ee:	4413      	add	r3, r2
 80099f0:	881b      	ldrh	r3, [r3, #0]
 80099f2:	b29b      	uxth	r3, r3
 80099f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099fc:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8009a00:	1d3b      	adds	r3, r7, #4
 8009a02:	681a      	ldr	r2, [r3, #0]
 8009a04:	463b      	mov	r3, r7
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	781b      	ldrb	r3, [r3, #0]
 8009a0a:	009b      	lsls	r3, r3, #2
 8009a0c:	441a      	add	r2, r3
 8009a0e:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8009a12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a1e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009a22:	b29b      	uxth	r3, r3
 8009a24:	8013      	strh	r3, [r2, #0]
 8009a26:	e15c      	b.n	8009ce2 <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009a28:	463b      	mov	r3, r7
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	78db      	ldrb	r3, [r3, #3]
 8009a2e:	2b01      	cmp	r3, #1
 8009a30:	f040 8155 	bne.w	8009cde <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8009a34:	463b      	mov	r3, r7
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	699a      	ldr	r2, [r3, #24]
 8009a3a:	463b      	mov	r3, r7
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	691b      	ldr	r3, [r3, #16]
 8009a40:	429a      	cmp	r2, r3
 8009a42:	d90e      	bls.n	8009a62 <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8009a44:	463b      	mov	r3, r7
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	691b      	ldr	r3, [r3, #16]
 8009a4a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8009a4e:	463b      	mov	r3, r7
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	699a      	ldr	r2, [r3, #24]
 8009a54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a58:	1ad2      	subs	r2, r2, r3
 8009a5a:	463b      	mov	r3, r7
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	619a      	str	r2, [r3, #24]
 8009a60:	e008      	b.n	8009a74 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 8009a62:	463b      	mov	r3, r7
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	699b      	ldr	r3, [r3, #24]
 8009a68:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8009a6c:	463b      	mov	r3, r7
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	2200      	movs	r2, #0
 8009a72:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009a74:	463b      	mov	r3, r7
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	785b      	ldrb	r3, [r3, #1]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d16f      	bne.n	8009b5e <USB_EPStartXfer+0x1402>
 8009a7e:	1d3b      	adds	r3, r7, #4
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009a86:	1d3b      	adds	r3, r7, #4
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a8e:	b29b      	uxth	r3, r3
 8009a90:	461a      	mov	r2, r3
 8009a92:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009a96:	4413      	add	r3, r2
 8009a98:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009a9c:	463b      	mov	r3, r7
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	781b      	ldrb	r3, [r3, #0]
 8009aa2:	011a      	lsls	r2, r3, #4
 8009aa4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009aa8:	4413      	add	r3, r2
 8009aaa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009aae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009ab2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d116      	bne.n	8009ae8 <USB_EPStartXfer+0x138c>
 8009aba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009abe:	881b      	ldrh	r3, [r3, #0]
 8009ac0:	b29b      	uxth	r3, r3
 8009ac2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009ac6:	b29a      	uxth	r2, r3
 8009ac8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009acc:	801a      	strh	r2, [r3, #0]
 8009ace:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009ad2:	881b      	ldrh	r3, [r3, #0]
 8009ad4:	b29b      	uxth	r3, r3
 8009ad6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ada:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ade:	b29a      	uxth	r2, r3
 8009ae0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009ae4:	801a      	strh	r2, [r3, #0]
 8009ae6:	e05f      	b.n	8009ba8 <USB_EPStartXfer+0x144c>
 8009ae8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009aec:	2b3e      	cmp	r3, #62	; 0x3e
 8009aee:	d818      	bhi.n	8009b22 <USB_EPStartXfer+0x13c6>
 8009af0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009af4:	085b      	lsrs	r3, r3, #1
 8009af6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009afa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009afe:	f003 0301 	and.w	r3, r3, #1
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d004      	beq.n	8009b10 <USB_EPStartXfer+0x13b4>
 8009b06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009b0a:	3301      	adds	r3, #1
 8009b0c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009b10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009b14:	b29b      	uxth	r3, r3
 8009b16:	029b      	lsls	r3, r3, #10
 8009b18:	b29a      	uxth	r2, r3
 8009b1a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009b1e:	801a      	strh	r2, [r3, #0]
 8009b20:	e042      	b.n	8009ba8 <USB_EPStartXfer+0x144c>
 8009b22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b26:	095b      	lsrs	r3, r3, #5
 8009b28:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009b2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b30:	f003 031f 	and.w	r3, r3, #31
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d104      	bne.n	8009b42 <USB_EPStartXfer+0x13e6>
 8009b38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009b3c:	3b01      	subs	r3, #1
 8009b3e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009b42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009b46:	b29b      	uxth	r3, r3
 8009b48:	029b      	lsls	r3, r3, #10
 8009b4a:	b29b      	uxth	r3, r3
 8009b4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b54:	b29a      	uxth	r2, r3
 8009b56:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009b5a:	801a      	strh	r2, [r3, #0]
 8009b5c:	e024      	b.n	8009ba8 <USB_EPStartXfer+0x144c>
 8009b5e:	463b      	mov	r3, r7
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	785b      	ldrb	r3, [r3, #1]
 8009b64:	2b01      	cmp	r3, #1
 8009b66:	d11f      	bne.n	8009ba8 <USB_EPStartXfer+0x144c>
 8009b68:	1d3b      	adds	r3, r7, #4
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009b70:	1d3b      	adds	r3, r7, #4
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b78:	b29b      	uxth	r3, r3
 8009b7a:	461a      	mov	r2, r3
 8009b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b80:	4413      	add	r3, r2
 8009b82:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009b86:	463b      	mov	r3, r7
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	781b      	ldrb	r3, [r3, #0]
 8009b8c:	011a      	lsls	r2, r3, #4
 8009b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b92:	4413      	add	r3, r2
 8009b94:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009b98:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009b9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ba0:	b29a      	uxth	r2, r3
 8009ba2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009ba6:	801a      	strh	r2, [r3, #0]
 8009ba8:	1d3b      	adds	r3, r7, #4
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009bb0:	463b      	mov	r3, r7
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	785b      	ldrb	r3, [r3, #1]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d16f      	bne.n	8009c9a <USB_EPStartXfer+0x153e>
 8009bba:	1d3b      	adds	r3, r7, #4
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009bc2:	1d3b      	adds	r3, r7, #4
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009bca:	b29b      	uxth	r3, r3
 8009bcc:	461a      	mov	r2, r3
 8009bce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009bd2:	4413      	add	r3, r2
 8009bd4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009bd8:	463b      	mov	r3, r7
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	781b      	ldrb	r3, [r3, #0]
 8009bde:	011a      	lsls	r2, r3, #4
 8009be0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009be4:	4413      	add	r3, r2
 8009be6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009bea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009bee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d116      	bne.n	8009c24 <USB_EPStartXfer+0x14c8>
 8009bf6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009bfa:	881b      	ldrh	r3, [r3, #0]
 8009bfc:	b29b      	uxth	r3, r3
 8009bfe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009c02:	b29a      	uxth	r2, r3
 8009c04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009c08:	801a      	strh	r2, [r3, #0]
 8009c0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009c0e:	881b      	ldrh	r3, [r3, #0]
 8009c10:	b29b      	uxth	r3, r3
 8009c12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c1a:	b29a      	uxth	r2, r3
 8009c1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009c20:	801a      	strh	r2, [r3, #0]
 8009c22:	e05e      	b.n	8009ce2 <USB_EPStartXfer+0x1586>
 8009c24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c28:	2b3e      	cmp	r3, #62	; 0x3e
 8009c2a:	d818      	bhi.n	8009c5e <USB_EPStartXfer+0x1502>
 8009c2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c30:	085b      	lsrs	r3, r3, #1
 8009c32:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009c36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c3a:	f003 0301 	and.w	r3, r3, #1
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d004      	beq.n	8009c4c <USB_EPStartXfer+0x14f0>
 8009c42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009c46:	3301      	adds	r3, #1
 8009c48:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009c4c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009c50:	b29b      	uxth	r3, r3
 8009c52:	029b      	lsls	r3, r3, #10
 8009c54:	b29a      	uxth	r2, r3
 8009c56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009c5a:	801a      	strh	r2, [r3, #0]
 8009c5c:	e041      	b.n	8009ce2 <USB_EPStartXfer+0x1586>
 8009c5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c62:	095b      	lsrs	r3, r3, #5
 8009c64:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009c68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c6c:	f003 031f 	and.w	r3, r3, #31
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d104      	bne.n	8009c7e <USB_EPStartXfer+0x1522>
 8009c74:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009c78:	3b01      	subs	r3, #1
 8009c7a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009c7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009c82:	b29b      	uxth	r3, r3
 8009c84:	029b      	lsls	r3, r3, #10
 8009c86:	b29b      	uxth	r3, r3
 8009c88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c90:	b29a      	uxth	r2, r3
 8009c92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009c96:	801a      	strh	r2, [r3, #0]
 8009c98:	e023      	b.n	8009ce2 <USB_EPStartXfer+0x1586>
 8009c9a:	463b      	mov	r3, r7
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	785b      	ldrb	r3, [r3, #1]
 8009ca0:	2b01      	cmp	r3, #1
 8009ca2:	d11e      	bne.n	8009ce2 <USB_EPStartXfer+0x1586>
 8009ca4:	1d3b      	adds	r3, r7, #4
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009cac:	b29b      	uxth	r3, r3
 8009cae:	461a      	mov	r2, r3
 8009cb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009cb4:	4413      	add	r3, r2
 8009cb6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009cba:	463b      	mov	r3, r7
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	781b      	ldrb	r3, [r3, #0]
 8009cc0:	011a      	lsls	r2, r3, #4
 8009cc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009cc6:	4413      	add	r3, r2
 8009cc8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009ccc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009cd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009cd4:	b29a      	uxth	r2, r3
 8009cd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009cda:	801a      	strh	r2, [r3, #0]
 8009cdc:	e001      	b.n	8009ce2 <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 8009cde:	2301      	movs	r3, #1
 8009ce0:	e02e      	b.n	8009d40 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009ce2:	1d3b      	adds	r3, r7, #4
 8009ce4:	681a      	ldr	r2, [r3, #0]
 8009ce6:	463b      	mov	r3, r7
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	781b      	ldrb	r3, [r3, #0]
 8009cec:	009b      	lsls	r3, r3, #2
 8009cee:	4413      	add	r3, r2
 8009cf0:	881b      	ldrh	r3, [r3, #0]
 8009cf2:	b29b      	uxth	r3, r3
 8009cf4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009cf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cfc:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8009d00:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009d04:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009d08:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8009d0c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009d10:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009d14:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8009d18:	1d3b      	adds	r3, r7, #4
 8009d1a:	681a      	ldr	r2, [r3, #0]
 8009d1c:	463b      	mov	r3, r7
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	781b      	ldrb	r3, [r3, #0]
 8009d22:	009b      	lsls	r3, r3, #2
 8009d24:	441a      	add	r2, r3
 8009d26:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009d2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d3a:	b29b      	uxth	r3, r3
 8009d3c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009d3e:	2300      	movs	r3, #0
}
 8009d40:	4618      	mov	r0, r3
 8009d42:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}

08009d4a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009d4a:	b480      	push	{r7}
 8009d4c:	b085      	sub	sp, #20
 8009d4e:	af00      	add	r7, sp, #0
 8009d50:	6078      	str	r0, [r7, #4]
 8009d52:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	785b      	ldrb	r3, [r3, #1]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d020      	beq.n	8009d9e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009d5c:	687a      	ldr	r2, [r7, #4]
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	781b      	ldrb	r3, [r3, #0]
 8009d62:	009b      	lsls	r3, r3, #2
 8009d64:	4413      	add	r3, r2
 8009d66:	881b      	ldrh	r3, [r3, #0]
 8009d68:	b29b      	uxth	r3, r3
 8009d6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d72:	81bb      	strh	r3, [r7, #12]
 8009d74:	89bb      	ldrh	r3, [r7, #12]
 8009d76:	f083 0310 	eor.w	r3, r3, #16
 8009d7a:	81bb      	strh	r3, [r7, #12]
 8009d7c:	687a      	ldr	r2, [r7, #4]
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	781b      	ldrb	r3, [r3, #0]
 8009d82:	009b      	lsls	r3, r3, #2
 8009d84:	441a      	add	r2, r3
 8009d86:	89bb      	ldrh	r3, [r7, #12]
 8009d88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d98:	b29b      	uxth	r3, r3
 8009d9a:	8013      	strh	r3, [r2, #0]
 8009d9c:	e01f      	b.n	8009dde <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009d9e:	687a      	ldr	r2, [r7, #4]
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	781b      	ldrb	r3, [r3, #0]
 8009da4:	009b      	lsls	r3, r3, #2
 8009da6:	4413      	add	r3, r2
 8009da8:	881b      	ldrh	r3, [r3, #0]
 8009daa:	b29b      	uxth	r3, r3
 8009dac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009db0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009db4:	81fb      	strh	r3, [r7, #14]
 8009db6:	89fb      	ldrh	r3, [r7, #14]
 8009db8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009dbc:	81fb      	strh	r3, [r7, #14]
 8009dbe:	687a      	ldr	r2, [r7, #4]
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	781b      	ldrb	r3, [r3, #0]
 8009dc4:	009b      	lsls	r3, r3, #2
 8009dc6:	441a      	add	r2, r3
 8009dc8:	89fb      	ldrh	r3, [r7, #14]
 8009dca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009dce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009dd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009dd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009dda:	b29b      	uxth	r3, r3
 8009ddc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009dde:	2300      	movs	r3, #0
}
 8009de0:	4618      	mov	r0, r3
 8009de2:	3714      	adds	r7, #20
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bc80      	pop	{r7}
 8009de8:	4770      	bx	lr

08009dea <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009dea:	b480      	push	{r7}
 8009dec:	b087      	sub	sp, #28
 8009dee:	af00      	add	r7, sp, #0
 8009df0:	6078      	str	r0, [r7, #4]
 8009df2:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	7b1b      	ldrb	r3, [r3, #12]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	f040 809d 	bne.w	8009f38 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	785b      	ldrb	r3, [r3, #1]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d04c      	beq.n	8009ea0 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009e06:	687a      	ldr	r2, [r7, #4]
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	781b      	ldrb	r3, [r3, #0]
 8009e0c:	009b      	lsls	r3, r3, #2
 8009e0e:	4413      	add	r3, r2
 8009e10:	881b      	ldrh	r3, [r3, #0]
 8009e12:	823b      	strh	r3, [r7, #16]
 8009e14:	8a3b      	ldrh	r3, [r7, #16]
 8009e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d01b      	beq.n	8009e56 <USB_EPClearStall+0x6c>
 8009e1e:	687a      	ldr	r2, [r7, #4]
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	781b      	ldrb	r3, [r3, #0]
 8009e24:	009b      	lsls	r3, r3, #2
 8009e26:	4413      	add	r3, r2
 8009e28:	881b      	ldrh	r3, [r3, #0]
 8009e2a:	b29b      	uxth	r3, r3
 8009e2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e34:	81fb      	strh	r3, [r7, #14]
 8009e36:	687a      	ldr	r2, [r7, #4]
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	781b      	ldrb	r3, [r3, #0]
 8009e3c:	009b      	lsls	r3, r3, #2
 8009e3e:	441a      	add	r2, r3
 8009e40:	89fb      	ldrh	r3, [r7, #14]
 8009e42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e4e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009e52:	b29b      	uxth	r3, r3
 8009e54:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	78db      	ldrb	r3, [r3, #3]
 8009e5a:	2b01      	cmp	r3, #1
 8009e5c:	d06c      	beq.n	8009f38 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009e5e:	687a      	ldr	r2, [r7, #4]
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	781b      	ldrb	r3, [r3, #0]
 8009e64:	009b      	lsls	r3, r3, #2
 8009e66:	4413      	add	r3, r2
 8009e68:	881b      	ldrh	r3, [r3, #0]
 8009e6a:	b29b      	uxth	r3, r3
 8009e6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e74:	81bb      	strh	r3, [r7, #12]
 8009e76:	89bb      	ldrh	r3, [r7, #12]
 8009e78:	f083 0320 	eor.w	r3, r3, #32
 8009e7c:	81bb      	strh	r3, [r7, #12]
 8009e7e:	687a      	ldr	r2, [r7, #4]
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	781b      	ldrb	r3, [r3, #0]
 8009e84:	009b      	lsls	r3, r3, #2
 8009e86:	441a      	add	r2, r3
 8009e88:	89bb      	ldrh	r3, [r7, #12]
 8009e8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e9a:	b29b      	uxth	r3, r3
 8009e9c:	8013      	strh	r3, [r2, #0]
 8009e9e:	e04b      	b.n	8009f38 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009ea0:	687a      	ldr	r2, [r7, #4]
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	781b      	ldrb	r3, [r3, #0]
 8009ea6:	009b      	lsls	r3, r3, #2
 8009ea8:	4413      	add	r3, r2
 8009eaa:	881b      	ldrh	r3, [r3, #0]
 8009eac:	82fb      	strh	r3, [r7, #22]
 8009eae:	8afb      	ldrh	r3, [r7, #22]
 8009eb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d01b      	beq.n	8009ef0 <USB_EPClearStall+0x106>
 8009eb8:	687a      	ldr	r2, [r7, #4]
 8009eba:	683b      	ldr	r3, [r7, #0]
 8009ebc:	781b      	ldrb	r3, [r3, #0]
 8009ebe:	009b      	lsls	r3, r3, #2
 8009ec0:	4413      	add	r3, r2
 8009ec2:	881b      	ldrh	r3, [r3, #0]
 8009ec4:	b29b      	uxth	r3, r3
 8009ec6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ece:	82bb      	strh	r3, [r7, #20]
 8009ed0:	687a      	ldr	r2, [r7, #4]
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	781b      	ldrb	r3, [r3, #0]
 8009ed6:	009b      	lsls	r3, r3, #2
 8009ed8:	441a      	add	r2, r3
 8009eda:	8abb      	ldrh	r3, [r7, #20]
 8009edc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ee0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ee4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009ee8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009eec:	b29b      	uxth	r3, r3
 8009eee:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009ef0:	687a      	ldr	r2, [r7, #4]
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	781b      	ldrb	r3, [r3, #0]
 8009ef6:	009b      	lsls	r3, r3, #2
 8009ef8:	4413      	add	r3, r2
 8009efa:	881b      	ldrh	r3, [r3, #0]
 8009efc:	b29b      	uxth	r3, r3
 8009efe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f06:	827b      	strh	r3, [r7, #18]
 8009f08:	8a7b      	ldrh	r3, [r7, #18]
 8009f0a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009f0e:	827b      	strh	r3, [r7, #18]
 8009f10:	8a7b      	ldrh	r3, [r7, #18]
 8009f12:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009f16:	827b      	strh	r3, [r7, #18]
 8009f18:	687a      	ldr	r2, [r7, #4]
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	781b      	ldrb	r3, [r3, #0]
 8009f1e:	009b      	lsls	r3, r3, #2
 8009f20:	441a      	add	r2, r3
 8009f22:	8a7b      	ldrh	r3, [r7, #18]
 8009f24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f34:	b29b      	uxth	r3, r3
 8009f36:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009f38:	2300      	movs	r3, #0
}
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	371c      	adds	r7, #28
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	bc80      	pop	{r7}
 8009f42:	4770      	bx	lr

08009f44 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009f44:	b480      	push	{r7}
 8009f46:	b083      	sub	sp, #12
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
 8009f4c:	460b      	mov	r3, r1
 8009f4e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009f50:	78fb      	ldrb	r3, [r7, #3]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d103      	bne.n	8009f5e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2280      	movs	r2, #128	; 0x80
 8009f5a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8009f5e:	2300      	movs	r3, #0
}
 8009f60:	4618      	mov	r0, r3
 8009f62:	370c      	adds	r7, #12
 8009f64:	46bd      	mov	sp, r7
 8009f66:	bc80      	pop	{r7}
 8009f68:	4770      	bx	lr

08009f6a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009f6a:	b480      	push	{r7}
 8009f6c:	b083      	sub	sp, #12
 8009f6e:	af00      	add	r7, sp, #0
 8009f70:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009f72:	2300      	movs	r3, #0
}
 8009f74:	4618      	mov	r0, r3
 8009f76:	370c      	adds	r7, #12
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	bc80      	pop	{r7}
 8009f7c:	4770      	bx	lr

08009f7e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8009f7e:	b480      	push	{r7}
 8009f80:	b083      	sub	sp, #12
 8009f82:	af00      	add	r7, sp, #0
 8009f84:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009f86:	2300      	movs	r3, #0
}
 8009f88:	4618      	mov	r0, r3
 8009f8a:	370c      	adds	r7, #12
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bc80      	pop	{r7}
 8009f90:	4770      	bx	lr

08009f92 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8009f92:	b480      	push	{r7}
 8009f94:	b085      	sub	sp, #20
 8009f96:	af00      	add	r7, sp, #0
 8009f98:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009fa0:	b29b      	uxth	r3, r3
 8009fa2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
}
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	3714      	adds	r7, #20
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bc80      	pop	{r7}
 8009fae:	4770      	bx	lr

08009fb0 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8009fb0:	b480      	push	{r7}
 8009fb2:	b083      	sub	sp, #12
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
 8009fb8:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8009fba:	2300      	movs	r3, #0
}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	370c      	adds	r7, #12
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bc80      	pop	{r7}
 8009fc4:	4770      	bx	lr

08009fc6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009fc6:	b480      	push	{r7}
 8009fc8:	b08d      	sub	sp, #52	; 0x34
 8009fca:	af00      	add	r7, sp, #0
 8009fcc:	60f8      	str	r0, [r7, #12]
 8009fce:	60b9      	str	r1, [r7, #8]
 8009fd0:	4611      	mov	r1, r2
 8009fd2:	461a      	mov	r2, r3
 8009fd4:	460b      	mov	r3, r1
 8009fd6:	80fb      	strh	r3, [r7, #6]
 8009fd8:	4613      	mov	r3, r2
 8009fda:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009fdc:	88bb      	ldrh	r3, [r7, #4]
 8009fde:	3301      	adds	r3, #1
 8009fe0:	085b      	lsrs	r3, r3, #1
 8009fe2:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009fec:	88fb      	ldrh	r3, [r7, #6]
 8009fee:	005a      	lsls	r2, r3, #1
 8009ff0:	69fb      	ldr	r3, [r7, #28]
 8009ff2:	4413      	add	r3, r2
 8009ff4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009ff8:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8009ffa:	6a3b      	ldr	r3, [r7, #32]
 8009ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009ffe:	e01e      	b.n	800a03e <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800a000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a002:	781b      	ldrb	r3, [r3, #0]
 800a004:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800a006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a008:	3301      	adds	r3, #1
 800a00a:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800a00c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a00e:	781b      	ldrb	r3, [r3, #0]
 800a010:	b29b      	uxth	r3, r3
 800a012:	021b      	lsls	r3, r3, #8
 800a014:	b29b      	uxth	r3, r3
 800a016:	461a      	mov	r2, r3
 800a018:	69bb      	ldr	r3, [r7, #24]
 800a01a:	4313      	orrs	r3, r2
 800a01c:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	b29a      	uxth	r2, r3
 800a022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a024:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a028:	3302      	adds	r3, #2
 800a02a:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800a02c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a02e:	3302      	adds	r3, #2
 800a030:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800a032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a034:	3301      	adds	r3, #1
 800a036:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800a038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a03a:	3b01      	subs	r3, #1
 800a03c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a03e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a040:	2b00      	cmp	r3, #0
 800a042:	d1dd      	bne.n	800a000 <USB_WritePMA+0x3a>
  }
}
 800a044:	bf00      	nop
 800a046:	bf00      	nop
 800a048:	3734      	adds	r7, #52	; 0x34
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bc80      	pop	{r7}
 800a04e:	4770      	bx	lr

0800a050 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a050:	b480      	push	{r7}
 800a052:	b08b      	sub	sp, #44	; 0x2c
 800a054:	af00      	add	r7, sp, #0
 800a056:	60f8      	str	r0, [r7, #12]
 800a058:	60b9      	str	r1, [r7, #8]
 800a05a:	4611      	mov	r1, r2
 800a05c:	461a      	mov	r2, r3
 800a05e:	460b      	mov	r3, r1
 800a060:	80fb      	strh	r3, [r7, #6]
 800a062:	4613      	mov	r3, r2
 800a064:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a066:	88bb      	ldrh	r3, [r7, #4]
 800a068:	085b      	lsrs	r3, r3, #1
 800a06a:	b29b      	uxth	r3, r3
 800a06c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a072:	68bb      	ldr	r3, [r7, #8]
 800a074:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a076:	88fb      	ldrh	r3, [r7, #6]
 800a078:	005a      	lsls	r2, r3, #1
 800a07a:	697b      	ldr	r3, [r7, #20]
 800a07c:	4413      	add	r3, r2
 800a07e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a082:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800a084:	69bb      	ldr	r3, [r7, #24]
 800a086:	627b      	str	r3, [r7, #36]	; 0x24
 800a088:	e01b      	b.n	800a0c2 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800a08a:	6a3b      	ldr	r3, [r7, #32]
 800a08c:	881b      	ldrh	r3, [r3, #0]
 800a08e:	b29b      	uxth	r3, r3
 800a090:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a092:	6a3b      	ldr	r3, [r7, #32]
 800a094:	3302      	adds	r3, #2
 800a096:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a098:	693b      	ldr	r3, [r7, #16]
 800a09a:	b2da      	uxtb	r2, r3
 800a09c:	69fb      	ldr	r3, [r7, #28]
 800a09e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a0a0:	69fb      	ldr	r3, [r7, #28]
 800a0a2:	3301      	adds	r3, #1
 800a0a4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800a0a6:	693b      	ldr	r3, [r7, #16]
 800a0a8:	0a1b      	lsrs	r3, r3, #8
 800a0aa:	b2da      	uxtb	r2, r3
 800a0ac:	69fb      	ldr	r3, [r7, #28]
 800a0ae:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a0b0:	69fb      	ldr	r3, [r7, #28]
 800a0b2:	3301      	adds	r3, #1
 800a0b4:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800a0b6:	6a3b      	ldr	r3, [r7, #32]
 800a0b8:	3302      	adds	r3, #2
 800a0ba:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800a0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0be:	3b01      	subs	r3, #1
 800a0c0:	627b      	str	r3, [r7, #36]	; 0x24
 800a0c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d1e0      	bne.n	800a08a <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800a0c8:	88bb      	ldrh	r3, [r7, #4]
 800a0ca:	f003 0301 	and.w	r3, r3, #1
 800a0ce:	b29b      	uxth	r3, r3
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d007      	beq.n	800a0e4 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800a0d4:	6a3b      	ldr	r3, [r7, #32]
 800a0d6:	881b      	ldrh	r3, [r3, #0]
 800a0d8:	b29b      	uxth	r3, r3
 800a0da:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a0dc:	693b      	ldr	r3, [r7, #16]
 800a0de:	b2da      	uxtb	r2, r3
 800a0e0:	69fb      	ldr	r3, [r7, #28]
 800a0e2:	701a      	strb	r2, [r3, #0]
  }
}
 800a0e4:	bf00      	nop
 800a0e6:	372c      	adds	r7, #44	; 0x2c
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	bc80      	pop	{r7}
 800a0ec:	4770      	bx	lr

0800a0ee <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a0ee:	b580      	push	{r7, lr}
 800a0f0:	b082      	sub	sp, #8
 800a0f2:	af00      	add	r7, sp, #0
 800a0f4:	6078      	str	r0, [r7, #4]
 800a0f6:	460b      	mov	r3, r1
 800a0f8:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800a0fa:	2304      	movs	r3, #4
 800a0fc:	2203      	movs	r2, #3
 800a0fe:	2181      	movs	r1, #129	; 0x81
 800a100:	6878      	ldr	r0, [r7, #4]
 800a102:	f001 fc84 	bl	800ba0e <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2201      	movs	r2, #1
 800a10a:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 800a10c:	2010      	movs	r0, #16
 800a10e:	f001 fd93 	bl	800bc38 <USBD_static_malloc>
 800a112:	4602      	mov	r2, r0
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a120:	2b00      	cmp	r3, #0
 800a122:	d101      	bne.n	800a128 <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 800a124:	2302      	movs	r3, #2
 800a126:	e005      	b.n	800a134 <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a12e:	2200      	movs	r2, #0
 800a130:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 800a132:	2300      	movs	r3, #0
}
 800a134:	4618      	mov	r0, r3
 800a136:	3708      	adds	r7, #8
 800a138:	46bd      	mov	sp, r7
 800a13a:	bd80      	pop	{r7, pc}

0800a13c <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b082      	sub	sp, #8
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
 800a144:	460b      	mov	r3, r1
 800a146:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 800a148:	2181      	movs	r1, #129	; 0x81
 800a14a:	6878      	ldr	r0, [r7, #4]
 800a14c:	f001 fc85 	bl	800ba5a <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2200      	movs	r2, #0
 800a154:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d009      	beq.n	800a174 <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a166:	4618      	mov	r0, r3
 800a168:	f001 fd72 	bl	800bc50 <USBD_static_free>
    pdev->pClassData = NULL;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2200      	movs	r2, #0
 800a170:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 800a174:	2300      	movs	r3, #0
}
 800a176:	4618      	mov	r0, r3
 800a178:	3708      	adds	r7, #8
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bd80      	pop	{r7, pc}
	...

0800a180 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b088      	sub	sp, #32
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
 800a188:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a190:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800a192:	2300      	movs	r3, #0
 800a194:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 800a196:	2300      	movs	r3, #0
 800a198:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800a19a:	2300      	movs	r3, #0
 800a19c:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 800a19e:	2300      	movs	r3, #0
 800a1a0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	781b      	ldrb	r3, [r3, #0]
 800a1a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d045      	beq.n	800a23a <USBD_HID_Setup+0xba>
 800a1ae:	2b20      	cmp	r3, #32
 800a1b0:	f040 80d3 	bne.w	800a35a <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	785b      	ldrb	r3, [r3, #1]
 800a1b8:	3b02      	subs	r3, #2
 800a1ba:	2b09      	cmp	r3, #9
 800a1bc:	d835      	bhi.n	800a22a <USBD_HID_Setup+0xaa>
 800a1be:	a201      	add	r2, pc, #4	; (adr r2, 800a1c4 <USBD_HID_Setup+0x44>)
 800a1c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1c4:	0800a21b 	.word	0x0800a21b
 800a1c8:	0800a1fb 	.word	0x0800a1fb
 800a1cc:	0800a22b 	.word	0x0800a22b
 800a1d0:	0800a22b 	.word	0x0800a22b
 800a1d4:	0800a22b 	.word	0x0800a22b
 800a1d8:	0800a22b 	.word	0x0800a22b
 800a1dc:	0800a22b 	.word	0x0800a22b
 800a1e0:	0800a22b 	.word	0x0800a22b
 800a1e4:	0800a209 	.word	0x0800a209
 800a1e8:	0800a1ed 	.word	0x0800a1ed
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	885b      	ldrh	r3, [r3, #2]
 800a1f0:	b2db      	uxtb	r3, r3
 800a1f2:	461a      	mov	r2, r3
 800a1f4:	693b      	ldr	r3, [r7, #16]
 800a1f6:	601a      	str	r2, [r3, #0]
          break;
 800a1f8:	e01e      	b.n	800a238 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 800a1fa:	693b      	ldr	r3, [r7, #16]
 800a1fc:	2201      	movs	r2, #1
 800a1fe:	4619      	mov	r1, r3
 800a200:	6878      	ldr	r0, [r7, #4]
 800a202:	f001 f944 	bl	800b48e <USBD_CtlSendData>
          break;
 800a206:	e017      	b.n	800a238 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	885b      	ldrh	r3, [r3, #2]
 800a20c:	0a1b      	lsrs	r3, r3, #8
 800a20e:	b29b      	uxth	r3, r3
 800a210:	b2db      	uxtb	r3, r3
 800a212:	461a      	mov	r2, r3
 800a214:	693b      	ldr	r3, [r7, #16]
 800a216:	605a      	str	r2, [r3, #4]
          break;
 800a218:	e00e      	b.n	800a238 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 800a21a:	693b      	ldr	r3, [r7, #16]
 800a21c:	3304      	adds	r3, #4
 800a21e:	2201      	movs	r2, #1
 800a220:	4619      	mov	r1, r3
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f001 f933 	bl	800b48e <USBD_CtlSendData>
          break;
 800a228:	e006      	b.n	800a238 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 800a22a:	6839      	ldr	r1, [r7, #0]
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	f001 f8c4 	bl	800b3ba <USBD_CtlError>
          ret = USBD_FAIL;
 800a232:	2302      	movs	r3, #2
 800a234:	75fb      	strb	r3, [r7, #23]
          break;
 800a236:	bf00      	nop
      }
      break;
 800a238:	e096      	b.n	800a368 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	785b      	ldrb	r3, [r3, #1]
 800a23e:	2b0b      	cmp	r3, #11
 800a240:	f200 8083 	bhi.w	800a34a <USBD_HID_Setup+0x1ca>
 800a244:	a201      	add	r2, pc, #4	; (adr r2, 800a24c <USBD_HID_Setup+0xcc>)
 800a246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a24a:	bf00      	nop
 800a24c:	0800a27d 	.word	0x0800a27d
 800a250:	0800a34b 	.word	0x0800a34b
 800a254:	0800a34b 	.word	0x0800a34b
 800a258:	0800a34b 	.word	0x0800a34b
 800a25c:	0800a34b 	.word	0x0800a34b
 800a260:	0800a34b 	.word	0x0800a34b
 800a264:	0800a2a5 	.word	0x0800a2a5
 800a268:	0800a34b 	.word	0x0800a34b
 800a26c:	0800a34b 	.word	0x0800a34b
 800a270:	0800a34b 	.word	0x0800a34b
 800a274:	0800a2fd 	.word	0x0800a2fd
 800a278:	0800a325 	.word	0x0800a325
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a282:	2b03      	cmp	r3, #3
 800a284:	d107      	bne.n	800a296 <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800a286:	f107 030e 	add.w	r3, r7, #14
 800a28a:	2202      	movs	r2, #2
 800a28c:	4619      	mov	r1, r3
 800a28e:	6878      	ldr	r0, [r7, #4]
 800a290:	f001 f8fd 	bl	800b48e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a294:	e060      	b.n	800a358 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800a296:	6839      	ldr	r1, [r7, #0]
 800a298:	6878      	ldr	r0, [r7, #4]
 800a29a:	f001 f88e 	bl	800b3ba <USBD_CtlError>
            ret = USBD_FAIL;
 800a29e:	2302      	movs	r3, #2
 800a2a0:	75fb      	strb	r3, [r7, #23]
          break;
 800a2a2:	e059      	b.n	800a358 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	885b      	ldrh	r3, [r3, #2]
 800a2a8:	0a1b      	lsrs	r3, r3, #8
 800a2aa:	b29b      	uxth	r3, r3
 800a2ac:	2b22      	cmp	r3, #34	; 0x22
 800a2ae:	d108      	bne.n	800a2c2 <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	88db      	ldrh	r3, [r3, #6]
 800a2b4:	2b4a      	cmp	r3, #74	; 0x4a
 800a2b6:	bf28      	it	cs
 800a2b8:	234a      	movcs	r3, #74	; 0x4a
 800a2ba:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 800a2bc:	4b2d      	ldr	r3, [pc, #180]	; (800a374 <USBD_HID_Setup+0x1f4>)
 800a2be:	61bb      	str	r3, [r7, #24]
 800a2c0:	e015      	b.n	800a2ee <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	885b      	ldrh	r3, [r3, #2]
 800a2c6:	0a1b      	lsrs	r3, r3, #8
 800a2c8:	b29b      	uxth	r3, r3
 800a2ca:	2b21      	cmp	r3, #33	; 0x21
 800a2cc:	d108      	bne.n	800a2e0 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 800a2ce:	4b2a      	ldr	r3, [pc, #168]	; (800a378 <USBD_HID_Setup+0x1f8>)
 800a2d0:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	88db      	ldrh	r3, [r3, #6]
 800a2d6:	2b09      	cmp	r3, #9
 800a2d8:	bf28      	it	cs
 800a2da:	2309      	movcs	r3, #9
 800a2dc:	83fb      	strh	r3, [r7, #30]
 800a2de:	e006      	b.n	800a2ee <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 800a2e0:	6839      	ldr	r1, [r7, #0]
 800a2e2:	6878      	ldr	r0, [r7, #4]
 800a2e4:	f001 f869 	bl	800b3ba <USBD_CtlError>
            ret = USBD_FAIL;
 800a2e8:	2302      	movs	r3, #2
 800a2ea:	75fb      	strb	r3, [r7, #23]
            break;
 800a2ec:	e034      	b.n	800a358 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 800a2ee:	8bfb      	ldrh	r3, [r7, #30]
 800a2f0:	461a      	mov	r2, r3
 800a2f2:	69b9      	ldr	r1, [r7, #24]
 800a2f4:	6878      	ldr	r0, [r7, #4]
 800a2f6:	f001 f8ca 	bl	800b48e <USBD_CtlSendData>
          break;
 800a2fa:	e02d      	b.n	800a358 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a302:	2b03      	cmp	r3, #3
 800a304:	d107      	bne.n	800a316 <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 800a306:	693b      	ldr	r3, [r7, #16]
 800a308:	3308      	adds	r3, #8
 800a30a:	2201      	movs	r2, #1
 800a30c:	4619      	mov	r1, r3
 800a30e:	6878      	ldr	r0, [r7, #4]
 800a310:	f001 f8bd 	bl	800b48e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a314:	e020      	b.n	800a358 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800a316:	6839      	ldr	r1, [r7, #0]
 800a318:	6878      	ldr	r0, [r7, #4]
 800a31a:	f001 f84e 	bl	800b3ba <USBD_CtlError>
            ret = USBD_FAIL;
 800a31e:	2302      	movs	r3, #2
 800a320:	75fb      	strb	r3, [r7, #23]
          break;
 800a322:	e019      	b.n	800a358 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a32a:	2b03      	cmp	r3, #3
 800a32c:	d106      	bne.n	800a33c <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	885b      	ldrh	r3, [r3, #2]
 800a332:	b2db      	uxtb	r3, r3
 800a334:	461a      	mov	r2, r3
 800a336:	693b      	ldr	r3, [r7, #16]
 800a338:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a33a:	e00d      	b.n	800a358 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800a33c:	6839      	ldr	r1, [r7, #0]
 800a33e:	6878      	ldr	r0, [r7, #4]
 800a340:	f001 f83b 	bl	800b3ba <USBD_CtlError>
            ret = USBD_FAIL;
 800a344:	2302      	movs	r3, #2
 800a346:	75fb      	strb	r3, [r7, #23]
          break;
 800a348:	e006      	b.n	800a358 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 800a34a:	6839      	ldr	r1, [r7, #0]
 800a34c:	6878      	ldr	r0, [r7, #4]
 800a34e:	f001 f834 	bl	800b3ba <USBD_CtlError>
          ret = USBD_FAIL;
 800a352:	2302      	movs	r3, #2
 800a354:	75fb      	strb	r3, [r7, #23]
          break;
 800a356:	bf00      	nop
      }
      break;
 800a358:	e006      	b.n	800a368 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 800a35a:	6839      	ldr	r1, [r7, #0]
 800a35c:	6878      	ldr	r0, [r7, #4]
 800a35e:	f001 f82c 	bl	800b3ba <USBD_CtlError>
      ret = USBD_FAIL;
 800a362:	2302      	movs	r3, #2
 800a364:	75fb      	strb	r3, [r7, #23]
      break;
 800a366:	bf00      	nop
  }

  return ret;
 800a368:	7dfb      	ldrb	r3, [r7, #23]
}
 800a36a:	4618      	mov	r0, r3
 800a36c:	3720      	adds	r7, #32
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}
 800a372:	bf00      	nop
 800a374:	2000015c 	.word	0x2000015c
 800a378:	20000144 	.word	0x20000144

0800a37c <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b086      	sub	sp, #24
 800a380:	af00      	add	r7, sp, #0
 800a382:	60f8      	str	r0, [r7, #12]
 800a384:	60b9      	str	r1, [r7, #8]
 800a386:	4613      	mov	r3, r2
 800a388:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a390:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a398:	2b03      	cmp	r3, #3
 800a39a:	d10c      	bne.n	800a3b6 <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 800a39c:	697b      	ldr	r3, [r7, #20]
 800a39e:	7b1b      	ldrb	r3, [r3, #12]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d108      	bne.n	800a3b6 <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 800a3a4:	697b      	ldr	r3, [r7, #20]
 800a3a6:	2201      	movs	r2, #1
 800a3a8:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 800a3aa:	88fb      	ldrh	r3, [r7, #6]
 800a3ac:	68ba      	ldr	r2, [r7, #8]
 800a3ae:	2181      	movs	r1, #129	; 0x81
 800a3b0:	68f8      	ldr	r0, [r7, #12]
 800a3b2:	f001 fbfa 	bl	800bbaa <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 800a3b6:	2300      	movs	r3, #0
}
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	3718      	adds	r7, #24
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	bd80      	pop	{r7, pc}

0800a3c0 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 800a3c0:	b480      	push	{r7}
 800a3c2:	b083      	sub	sp, #12
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2222      	movs	r2, #34	; 0x22
 800a3cc:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 800a3ce:	4b03      	ldr	r3, [pc, #12]	; (800a3dc <USBD_HID_GetFSCfgDesc+0x1c>)
}
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	370c      	adds	r7, #12
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bc80      	pop	{r7}
 800a3d8:	4770      	bx	lr
 800a3da:	bf00      	nop
 800a3dc:	200000d8 	.word	0x200000d8

0800a3e0 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 800a3e0:	b480      	push	{r7}
 800a3e2:	b083      	sub	sp, #12
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2222      	movs	r2, #34	; 0x22
 800a3ec:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 800a3ee:	4b03      	ldr	r3, [pc, #12]	; (800a3fc <USBD_HID_GetHSCfgDesc+0x1c>)
}
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	370c      	adds	r7, #12
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	bc80      	pop	{r7}
 800a3f8:	4770      	bx	lr
 800a3fa:	bf00      	nop
 800a3fc:	200000fc 	.word	0x200000fc

0800a400 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a400:	b480      	push	{r7}
 800a402:	b083      	sub	sp, #12
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2222      	movs	r2, #34	; 0x22
 800a40c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 800a40e:	4b03      	ldr	r3, [pc, #12]	; (800a41c <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 800a410:	4618      	mov	r0, r3
 800a412:	370c      	adds	r7, #12
 800a414:	46bd      	mov	sp, r7
 800a416:	bc80      	pop	{r7}
 800a418:	4770      	bx	lr
 800a41a:	bf00      	nop
 800a41c:	20000120 	.word	0x20000120

0800a420 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 800a420:	b480      	push	{r7}
 800a422:	b083      	sub	sp, #12
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
 800a428:	460b      	mov	r3, r1
 800a42a:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a432:	2200      	movs	r2, #0
 800a434:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 800a436:	2300      	movs	r3, #0
}
 800a438:	4618      	mov	r0, r3
 800a43a:	370c      	adds	r7, #12
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bc80      	pop	{r7}
 800a440:	4770      	bx	lr
	...

0800a444 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800a444:	b480      	push	{r7}
 800a446:	b083      	sub	sp, #12
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	220a      	movs	r2, #10
 800a450:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 800a452:	4b03      	ldr	r3, [pc, #12]	; (800a460 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800a454:	4618      	mov	r0, r3
 800a456:	370c      	adds	r7, #12
 800a458:	46bd      	mov	sp, r7
 800a45a:	bc80      	pop	{r7}
 800a45c:	4770      	bx	lr
 800a45e:	bf00      	nop
 800a460:	20000150 	.word	0x20000150

0800a464 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b084      	sub	sp, #16
 800a468:	af00      	add	r7, sp, #0
 800a46a:	60f8      	str	r0, [r7, #12]
 800a46c:	60b9      	str	r1, [r7, #8]
 800a46e:	4613      	mov	r3, r2
 800a470:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d101      	bne.n	800a47c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a478:	2302      	movs	r3, #2
 800a47a:	e01a      	b.n	800a4b2 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a482:	2b00      	cmp	r3, #0
 800a484:	d003      	beq.n	800a48e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	2200      	movs	r2, #0
 800a48a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a48e:	68bb      	ldr	r3, [r7, #8]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d003      	beq.n	800a49c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	68ba      	ldr	r2, [r7, #8]
 800a498:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	2201      	movs	r2, #1
 800a4a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	79fa      	ldrb	r2, [r7, #7]
 800a4a8:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800a4aa:	68f8      	ldr	r0, [r7, #12]
 800a4ac:	f001 fa4c 	bl	800b948 <USBD_LL_Init>

  return USBD_OK;
 800a4b0:	2300      	movs	r3, #0
}
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	3710      	adds	r7, #16
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	bd80      	pop	{r7, pc}

0800a4ba <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a4ba:	b480      	push	{r7}
 800a4bc:	b085      	sub	sp, #20
 800a4be:	af00      	add	r7, sp, #0
 800a4c0:	6078      	str	r0, [r7, #4]
 800a4c2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d006      	beq.n	800a4dc <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	683a      	ldr	r2, [r7, #0]
 800a4d2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	73fb      	strb	r3, [r7, #15]
 800a4da:	e001      	b.n	800a4e0 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800a4dc:	2302      	movs	r3, #2
 800a4de:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a4e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	3714      	adds	r7, #20
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	bc80      	pop	{r7}
 800a4ea:	4770      	bx	lr

0800a4ec <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b082      	sub	sp, #8
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	f001 fa6f 	bl	800b9d8 <USBD_LL_Start>

  return USBD_OK;
 800a4fa:	2300      	movs	r3, #0
}
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	3708      	adds	r7, #8
 800a500:	46bd      	mov	sp, r7
 800a502:	bd80      	pop	{r7, pc}

0800a504 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a504:	b480      	push	{r7}
 800a506:	b083      	sub	sp, #12
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a50c:	2300      	movs	r3, #0
}
 800a50e:	4618      	mov	r0, r3
 800a510:	370c      	adds	r7, #12
 800a512:	46bd      	mov	sp, r7
 800a514:	bc80      	pop	{r7}
 800a516:	4770      	bx	lr

0800a518 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b084      	sub	sp, #16
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
 800a520:	460b      	mov	r3, r1
 800a522:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a524:	2302      	movs	r3, #2
 800a526:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d00c      	beq.n	800a54c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	78fa      	ldrb	r2, [r7, #3]
 800a53c:	4611      	mov	r1, r2
 800a53e:	6878      	ldr	r0, [r7, #4]
 800a540:	4798      	blx	r3
 800a542:	4603      	mov	r3, r0
 800a544:	2b00      	cmp	r3, #0
 800a546:	d101      	bne.n	800a54c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800a548:	2300      	movs	r3, #0
 800a54a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800a54c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a54e:	4618      	mov	r0, r3
 800a550:	3710      	adds	r7, #16
 800a552:	46bd      	mov	sp, r7
 800a554:	bd80      	pop	{r7, pc}

0800a556 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a556:	b580      	push	{r7, lr}
 800a558:	b082      	sub	sp, #8
 800a55a:	af00      	add	r7, sp, #0
 800a55c:	6078      	str	r0, [r7, #4]
 800a55e:	460b      	mov	r3, r1
 800a560:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a568:	685b      	ldr	r3, [r3, #4]
 800a56a:	78fa      	ldrb	r2, [r7, #3]
 800a56c:	4611      	mov	r1, r2
 800a56e:	6878      	ldr	r0, [r7, #4]
 800a570:	4798      	blx	r3

  return USBD_OK;
 800a572:	2300      	movs	r3, #0
}
 800a574:	4618      	mov	r0, r3
 800a576:	3708      	adds	r7, #8
 800a578:	46bd      	mov	sp, r7
 800a57a:	bd80      	pop	{r7, pc}

0800a57c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b082      	sub	sp, #8
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
 800a584:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a58c:	6839      	ldr	r1, [r7, #0]
 800a58e:	4618      	mov	r0, r3
 800a590:	f000 fed7 	bl	800b342 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2201      	movs	r2, #1
 800a598:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a5a2:	461a      	mov	r2, r3
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a5b0:	f003 031f 	and.w	r3, r3, #31
 800a5b4:	2b02      	cmp	r3, #2
 800a5b6:	d016      	beq.n	800a5e6 <USBD_LL_SetupStage+0x6a>
 800a5b8:	2b02      	cmp	r3, #2
 800a5ba:	d81c      	bhi.n	800a5f6 <USBD_LL_SetupStage+0x7a>
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d002      	beq.n	800a5c6 <USBD_LL_SetupStage+0x4a>
 800a5c0:	2b01      	cmp	r3, #1
 800a5c2:	d008      	beq.n	800a5d6 <USBD_LL_SetupStage+0x5a>
 800a5c4:	e017      	b.n	800a5f6 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a5cc:	4619      	mov	r1, r3
 800a5ce:	6878      	ldr	r0, [r7, #4]
 800a5d0:	f000 f9ca 	bl	800a968 <USBD_StdDevReq>
      break;
 800a5d4:	e01a      	b.n	800a60c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a5dc:	4619      	mov	r1, r3
 800a5de:	6878      	ldr	r0, [r7, #4]
 800a5e0:	f000 fa2c 	bl	800aa3c <USBD_StdItfReq>
      break;
 800a5e4:	e012      	b.n	800a60c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a5ec:	4619      	mov	r1, r3
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	f000 fa6c 	bl	800aacc <USBD_StdEPReq>
      break;
 800a5f4:	e00a      	b.n	800a60c <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a5fc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a600:	b2db      	uxtb	r3, r3
 800a602:	4619      	mov	r1, r3
 800a604:	6878      	ldr	r0, [r7, #4]
 800a606:	f001 fa47 	bl	800ba98 <USBD_LL_StallEP>
      break;
 800a60a:	bf00      	nop
  }

  return USBD_OK;
 800a60c:	2300      	movs	r3, #0
}
 800a60e:	4618      	mov	r0, r3
 800a610:	3708      	adds	r7, #8
 800a612:	46bd      	mov	sp, r7
 800a614:	bd80      	pop	{r7, pc}

0800a616 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a616:	b580      	push	{r7, lr}
 800a618:	b086      	sub	sp, #24
 800a61a:	af00      	add	r7, sp, #0
 800a61c:	60f8      	str	r0, [r7, #12]
 800a61e:	460b      	mov	r3, r1
 800a620:	607a      	str	r2, [r7, #4]
 800a622:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a624:	7afb      	ldrb	r3, [r7, #11]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d14b      	bne.n	800a6c2 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a630:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a638:	2b03      	cmp	r3, #3
 800a63a:	d134      	bne.n	800a6a6 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800a63c:	697b      	ldr	r3, [r7, #20]
 800a63e:	68da      	ldr	r2, [r3, #12]
 800a640:	697b      	ldr	r3, [r7, #20]
 800a642:	691b      	ldr	r3, [r3, #16]
 800a644:	429a      	cmp	r2, r3
 800a646:	d919      	bls.n	800a67c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800a648:	697b      	ldr	r3, [r7, #20]
 800a64a:	68da      	ldr	r2, [r3, #12]
 800a64c:	697b      	ldr	r3, [r7, #20]
 800a64e:	691b      	ldr	r3, [r3, #16]
 800a650:	1ad2      	subs	r2, r2, r3
 800a652:	697b      	ldr	r3, [r7, #20]
 800a654:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a656:	697b      	ldr	r3, [r7, #20]
 800a658:	68da      	ldr	r2, [r3, #12]
 800a65a:	697b      	ldr	r3, [r7, #20]
 800a65c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a65e:	429a      	cmp	r2, r3
 800a660:	d203      	bcs.n	800a66a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a662:	697b      	ldr	r3, [r7, #20]
 800a664:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800a666:	b29b      	uxth	r3, r3
 800a668:	e002      	b.n	800a670 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a66a:	697b      	ldr	r3, [r7, #20]
 800a66c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a66e:	b29b      	uxth	r3, r3
 800a670:	461a      	mov	r2, r3
 800a672:	6879      	ldr	r1, [r7, #4]
 800a674:	68f8      	ldr	r0, [r7, #12]
 800a676:	f000 ff38 	bl	800b4ea <USBD_CtlContinueRx>
 800a67a:	e038      	b.n	800a6ee <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a682:	691b      	ldr	r3, [r3, #16]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d00a      	beq.n	800a69e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a68e:	2b03      	cmp	r3, #3
 800a690:	d105      	bne.n	800a69e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a698:	691b      	ldr	r3, [r3, #16]
 800a69a:	68f8      	ldr	r0, [r7, #12]
 800a69c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800a69e:	68f8      	ldr	r0, [r7, #12]
 800a6a0:	f000 ff35 	bl	800b50e <USBD_CtlSendStatus>
 800a6a4:	e023      	b.n	800a6ee <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a6ac:	2b05      	cmp	r3, #5
 800a6ae:	d11e      	bne.n	800a6ee <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800a6b8:	2100      	movs	r1, #0
 800a6ba:	68f8      	ldr	r0, [r7, #12]
 800a6bc:	f001 f9ec 	bl	800ba98 <USBD_LL_StallEP>
 800a6c0:	e015      	b.n	800a6ee <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6c8:	699b      	ldr	r3, [r3, #24]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d00d      	beq.n	800a6ea <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800a6d4:	2b03      	cmp	r3, #3
 800a6d6:	d108      	bne.n	800a6ea <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6de:	699b      	ldr	r3, [r3, #24]
 800a6e0:	7afa      	ldrb	r2, [r7, #11]
 800a6e2:	4611      	mov	r1, r2
 800a6e4:	68f8      	ldr	r0, [r7, #12]
 800a6e6:	4798      	blx	r3
 800a6e8:	e001      	b.n	800a6ee <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a6ea:	2302      	movs	r3, #2
 800a6ec:	e000      	b.n	800a6f0 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800a6ee:	2300      	movs	r3, #0
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	3718      	adds	r7, #24
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bd80      	pop	{r7, pc}

0800a6f8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b086      	sub	sp, #24
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	60f8      	str	r0, [r7, #12]
 800a700:	460b      	mov	r3, r1
 800a702:	607a      	str	r2, [r7, #4]
 800a704:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a706:	7afb      	ldrb	r3, [r7, #11]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d17f      	bne.n	800a80c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	3314      	adds	r3, #20
 800a710:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a718:	2b02      	cmp	r3, #2
 800a71a:	d15c      	bne.n	800a7d6 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800a71c:	697b      	ldr	r3, [r7, #20]
 800a71e:	68da      	ldr	r2, [r3, #12]
 800a720:	697b      	ldr	r3, [r7, #20]
 800a722:	691b      	ldr	r3, [r3, #16]
 800a724:	429a      	cmp	r2, r3
 800a726:	d915      	bls.n	800a754 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800a728:	697b      	ldr	r3, [r7, #20]
 800a72a:	68da      	ldr	r2, [r3, #12]
 800a72c:	697b      	ldr	r3, [r7, #20]
 800a72e:	691b      	ldr	r3, [r3, #16]
 800a730:	1ad2      	subs	r2, r2, r3
 800a732:	697b      	ldr	r3, [r7, #20]
 800a734:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800a736:	697b      	ldr	r3, [r7, #20]
 800a738:	68db      	ldr	r3, [r3, #12]
 800a73a:	b29b      	uxth	r3, r3
 800a73c:	461a      	mov	r2, r3
 800a73e:	6879      	ldr	r1, [r7, #4]
 800a740:	68f8      	ldr	r0, [r7, #12]
 800a742:	f000 fec0 	bl	800b4c6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a746:	2300      	movs	r3, #0
 800a748:	2200      	movs	r2, #0
 800a74a:	2100      	movs	r1, #0
 800a74c:	68f8      	ldr	r0, [r7, #12]
 800a74e:	f001 fa4f 	bl	800bbf0 <USBD_LL_PrepareReceive>
 800a752:	e04e      	b.n	800a7f2 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a754:	697b      	ldr	r3, [r7, #20]
 800a756:	689b      	ldr	r3, [r3, #8]
 800a758:	697a      	ldr	r2, [r7, #20]
 800a75a:	6912      	ldr	r2, [r2, #16]
 800a75c:	fbb3 f1f2 	udiv	r1, r3, r2
 800a760:	fb02 f201 	mul.w	r2, r2, r1
 800a764:	1a9b      	subs	r3, r3, r2
 800a766:	2b00      	cmp	r3, #0
 800a768:	d11c      	bne.n	800a7a4 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800a76a:	697b      	ldr	r3, [r7, #20]
 800a76c:	689a      	ldr	r2, [r3, #8]
 800a76e:	697b      	ldr	r3, [r7, #20]
 800a770:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a772:	429a      	cmp	r2, r3
 800a774:	d316      	bcc.n	800a7a4 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800a776:	697b      	ldr	r3, [r7, #20]
 800a778:	689a      	ldr	r2, [r3, #8]
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a780:	429a      	cmp	r2, r3
 800a782:	d20f      	bcs.n	800a7a4 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a784:	2200      	movs	r2, #0
 800a786:	2100      	movs	r1, #0
 800a788:	68f8      	ldr	r0, [r7, #12]
 800a78a:	f000 fe9c 	bl	800b4c6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	2200      	movs	r2, #0
 800a792:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a796:	2300      	movs	r3, #0
 800a798:	2200      	movs	r2, #0
 800a79a:	2100      	movs	r1, #0
 800a79c:	68f8      	ldr	r0, [r7, #12]
 800a79e:	f001 fa27 	bl	800bbf0 <USBD_LL_PrepareReceive>
 800a7a2:	e026      	b.n	800a7f2 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7aa:	68db      	ldr	r3, [r3, #12]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d00a      	beq.n	800a7c6 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a7b6:	2b03      	cmp	r3, #3
 800a7b8:	d105      	bne.n	800a7c6 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7c0:	68db      	ldr	r3, [r3, #12]
 800a7c2:	68f8      	ldr	r0, [r7, #12]
 800a7c4:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800a7c6:	2180      	movs	r1, #128	; 0x80
 800a7c8:	68f8      	ldr	r0, [r7, #12]
 800a7ca:	f001 f965 	bl	800ba98 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800a7ce:	68f8      	ldr	r0, [r7, #12]
 800a7d0:	f000 feb0 	bl	800b534 <USBD_CtlReceiveStatus>
 800a7d4:	e00d      	b.n	800a7f2 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a7dc:	2b04      	cmp	r3, #4
 800a7de:	d004      	beq.n	800a7ea <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d103      	bne.n	800a7f2 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800a7ea:	2180      	movs	r1, #128	; 0x80
 800a7ec:	68f8      	ldr	r0, [r7, #12]
 800a7ee:	f001 f953 	bl	800ba98 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a7f8:	2b01      	cmp	r3, #1
 800a7fa:	d11d      	bne.n	800a838 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800a7fc:	68f8      	ldr	r0, [r7, #12]
 800a7fe:	f7ff fe81 	bl	800a504 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	2200      	movs	r2, #0
 800a806:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a80a:	e015      	b.n	800a838 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a812:	695b      	ldr	r3, [r3, #20]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d00d      	beq.n	800a834 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800a81e:	2b03      	cmp	r3, #3
 800a820:	d108      	bne.n	800a834 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a828:	695b      	ldr	r3, [r3, #20]
 800a82a:	7afa      	ldrb	r2, [r7, #11]
 800a82c:	4611      	mov	r1, r2
 800a82e:	68f8      	ldr	r0, [r7, #12]
 800a830:	4798      	blx	r3
 800a832:	e001      	b.n	800a838 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a834:	2302      	movs	r3, #2
 800a836:	e000      	b.n	800a83a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800a838:	2300      	movs	r3, #0
}
 800a83a:	4618      	mov	r0, r3
 800a83c:	3718      	adds	r7, #24
 800a83e:	46bd      	mov	sp, r7
 800a840:	bd80      	pop	{r7, pc}

0800a842 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a842:	b580      	push	{r7, lr}
 800a844:	b082      	sub	sp, #8
 800a846:	af00      	add	r7, sp, #0
 800a848:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a84a:	2340      	movs	r3, #64	; 0x40
 800a84c:	2200      	movs	r2, #0
 800a84e:	2100      	movs	r1, #0
 800a850:	6878      	ldr	r0, [r7, #4]
 800a852:	f001 f8dc 	bl	800ba0e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	2201      	movs	r2, #1
 800a85a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	2240      	movs	r2, #64	; 0x40
 800a862:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a866:	2340      	movs	r3, #64	; 0x40
 800a868:	2200      	movs	r2, #0
 800a86a:	2180      	movs	r1, #128	; 0x80
 800a86c:	6878      	ldr	r0, [r7, #4]
 800a86e:	f001 f8ce 	bl	800ba0e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2201      	movs	r2, #1
 800a876:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2240      	movs	r2, #64	; 0x40
 800a87c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2201      	movs	r2, #1
 800a882:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2200      	movs	r2, #0
 800a88a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2200      	movs	r2, #0
 800a892:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2200      	movs	r2, #0
 800a898:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d009      	beq.n	800a8ba <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8ac:	685b      	ldr	r3, [r3, #4]
 800a8ae:	687a      	ldr	r2, [r7, #4]
 800a8b0:	6852      	ldr	r2, [r2, #4]
 800a8b2:	b2d2      	uxtb	r2, r2
 800a8b4:	4611      	mov	r1, r2
 800a8b6:	6878      	ldr	r0, [r7, #4]
 800a8b8:	4798      	blx	r3
  }

  return USBD_OK;
 800a8ba:	2300      	movs	r3, #0
}
 800a8bc:	4618      	mov	r0, r3
 800a8be:	3708      	adds	r7, #8
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	bd80      	pop	{r7, pc}

0800a8c4 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a8c4:	b480      	push	{r7}
 800a8c6:	b083      	sub	sp, #12
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
 800a8cc:	460b      	mov	r3, r1
 800a8ce:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	78fa      	ldrb	r2, [r7, #3]
 800a8d4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a8d6:	2300      	movs	r3, #0
}
 800a8d8:	4618      	mov	r0, r3
 800a8da:	370c      	adds	r7, #12
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	bc80      	pop	{r7}
 800a8e0:	4770      	bx	lr

0800a8e2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a8e2:	b480      	push	{r7}
 800a8e4:	b083      	sub	sp, #12
 800a8e6:	af00      	add	r7, sp, #0
 800a8e8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2204      	movs	r2, #4
 800a8fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a8fe:	2300      	movs	r3, #0
}
 800a900:	4618      	mov	r0, r3
 800a902:	370c      	adds	r7, #12
 800a904:	46bd      	mov	sp, r7
 800a906:	bc80      	pop	{r7}
 800a908:	4770      	bx	lr

0800a90a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a90a:	b480      	push	{r7}
 800a90c:	b083      	sub	sp, #12
 800a90e:	af00      	add	r7, sp, #0
 800a910:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a918:	2b04      	cmp	r3, #4
 800a91a:	d105      	bne.n	800a928 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a928:	2300      	movs	r3, #0
}
 800a92a:	4618      	mov	r0, r3
 800a92c:	370c      	adds	r7, #12
 800a92e:	46bd      	mov	sp, r7
 800a930:	bc80      	pop	{r7}
 800a932:	4770      	bx	lr

0800a934 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b082      	sub	sp, #8
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a942:	2b03      	cmp	r3, #3
 800a944:	d10b      	bne.n	800a95e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a94c:	69db      	ldr	r3, [r3, #28]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d005      	beq.n	800a95e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a958:	69db      	ldr	r3, [r3, #28]
 800a95a:	6878      	ldr	r0, [r7, #4]
 800a95c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a95e:	2300      	movs	r3, #0
}
 800a960:	4618      	mov	r0, r3
 800a962:	3708      	adds	r7, #8
 800a964:	46bd      	mov	sp, r7
 800a966:	bd80      	pop	{r7, pc}

0800a968 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b084      	sub	sp, #16
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
 800a970:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a972:	2300      	movs	r3, #0
 800a974:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	781b      	ldrb	r3, [r3, #0]
 800a97a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a97e:	2b40      	cmp	r3, #64	; 0x40
 800a980:	d005      	beq.n	800a98e <USBD_StdDevReq+0x26>
 800a982:	2b40      	cmp	r3, #64	; 0x40
 800a984:	d84f      	bhi.n	800aa26 <USBD_StdDevReq+0xbe>
 800a986:	2b00      	cmp	r3, #0
 800a988:	d009      	beq.n	800a99e <USBD_StdDevReq+0x36>
 800a98a:	2b20      	cmp	r3, #32
 800a98c:	d14b      	bne.n	800aa26 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a994:	689b      	ldr	r3, [r3, #8]
 800a996:	6839      	ldr	r1, [r7, #0]
 800a998:	6878      	ldr	r0, [r7, #4]
 800a99a:	4798      	blx	r3
      break;
 800a99c:	e048      	b.n	800aa30 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	785b      	ldrb	r3, [r3, #1]
 800a9a2:	2b09      	cmp	r3, #9
 800a9a4:	d839      	bhi.n	800aa1a <USBD_StdDevReq+0xb2>
 800a9a6:	a201      	add	r2, pc, #4	; (adr r2, 800a9ac <USBD_StdDevReq+0x44>)
 800a9a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9ac:	0800a9fd 	.word	0x0800a9fd
 800a9b0:	0800aa11 	.word	0x0800aa11
 800a9b4:	0800aa1b 	.word	0x0800aa1b
 800a9b8:	0800aa07 	.word	0x0800aa07
 800a9bc:	0800aa1b 	.word	0x0800aa1b
 800a9c0:	0800a9df 	.word	0x0800a9df
 800a9c4:	0800a9d5 	.word	0x0800a9d5
 800a9c8:	0800aa1b 	.word	0x0800aa1b
 800a9cc:	0800a9f3 	.word	0x0800a9f3
 800a9d0:	0800a9e9 	.word	0x0800a9e9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a9d4:	6839      	ldr	r1, [r7, #0]
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	f000 f9dc 	bl	800ad94 <USBD_GetDescriptor>
          break;
 800a9dc:	e022      	b.n	800aa24 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a9de:	6839      	ldr	r1, [r7, #0]
 800a9e0:	6878      	ldr	r0, [r7, #4]
 800a9e2:	f000 fb3f 	bl	800b064 <USBD_SetAddress>
          break;
 800a9e6:	e01d      	b.n	800aa24 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800a9e8:	6839      	ldr	r1, [r7, #0]
 800a9ea:	6878      	ldr	r0, [r7, #4]
 800a9ec:	f000 fb7e 	bl	800b0ec <USBD_SetConfig>
          break;
 800a9f0:	e018      	b.n	800aa24 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a9f2:	6839      	ldr	r1, [r7, #0]
 800a9f4:	6878      	ldr	r0, [r7, #4]
 800a9f6:	f000 fc07 	bl	800b208 <USBD_GetConfig>
          break;
 800a9fa:	e013      	b.n	800aa24 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a9fc:	6839      	ldr	r1, [r7, #0]
 800a9fe:	6878      	ldr	r0, [r7, #4]
 800aa00:	f000 fc37 	bl	800b272 <USBD_GetStatus>
          break;
 800aa04:	e00e      	b.n	800aa24 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800aa06:	6839      	ldr	r1, [r7, #0]
 800aa08:	6878      	ldr	r0, [r7, #4]
 800aa0a:	f000 fc65 	bl	800b2d8 <USBD_SetFeature>
          break;
 800aa0e:	e009      	b.n	800aa24 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800aa10:	6839      	ldr	r1, [r7, #0]
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	f000 fc74 	bl	800b300 <USBD_ClrFeature>
          break;
 800aa18:	e004      	b.n	800aa24 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800aa1a:	6839      	ldr	r1, [r7, #0]
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	f000 fccc 	bl	800b3ba <USBD_CtlError>
          break;
 800aa22:	bf00      	nop
      }
      break;
 800aa24:	e004      	b.n	800aa30 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800aa26:	6839      	ldr	r1, [r7, #0]
 800aa28:	6878      	ldr	r0, [r7, #4]
 800aa2a:	f000 fcc6 	bl	800b3ba <USBD_CtlError>
      break;
 800aa2e:	bf00      	nop
  }

  return ret;
 800aa30:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa32:	4618      	mov	r0, r3
 800aa34:	3710      	adds	r7, #16
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}
 800aa3a:	bf00      	nop

0800aa3c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b084      	sub	sp, #16
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
 800aa44:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aa46:	2300      	movs	r3, #0
 800aa48:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aa4a:	683b      	ldr	r3, [r7, #0]
 800aa4c:	781b      	ldrb	r3, [r3, #0]
 800aa4e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aa52:	2b40      	cmp	r3, #64	; 0x40
 800aa54:	d005      	beq.n	800aa62 <USBD_StdItfReq+0x26>
 800aa56:	2b40      	cmp	r3, #64	; 0x40
 800aa58:	d82e      	bhi.n	800aab8 <USBD_StdItfReq+0x7c>
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d001      	beq.n	800aa62 <USBD_StdItfReq+0x26>
 800aa5e:	2b20      	cmp	r3, #32
 800aa60:	d12a      	bne.n	800aab8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa68:	3b01      	subs	r3, #1
 800aa6a:	2b02      	cmp	r3, #2
 800aa6c:	d81d      	bhi.n	800aaaa <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	889b      	ldrh	r3, [r3, #4]
 800aa72:	b2db      	uxtb	r3, r3
 800aa74:	2b01      	cmp	r3, #1
 800aa76:	d813      	bhi.n	800aaa0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa7e:	689b      	ldr	r3, [r3, #8]
 800aa80:	6839      	ldr	r1, [r7, #0]
 800aa82:	6878      	ldr	r0, [r7, #4]
 800aa84:	4798      	blx	r3
 800aa86:	4603      	mov	r3, r0
 800aa88:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	88db      	ldrh	r3, [r3, #6]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d110      	bne.n	800aab4 <USBD_StdItfReq+0x78>
 800aa92:	7bfb      	ldrb	r3, [r7, #15]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d10d      	bne.n	800aab4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800aa98:	6878      	ldr	r0, [r7, #4]
 800aa9a:	f000 fd38 	bl	800b50e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800aa9e:	e009      	b.n	800aab4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800aaa0:	6839      	ldr	r1, [r7, #0]
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f000 fc89 	bl	800b3ba <USBD_CtlError>
          break;
 800aaa8:	e004      	b.n	800aab4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800aaaa:	6839      	ldr	r1, [r7, #0]
 800aaac:	6878      	ldr	r0, [r7, #4]
 800aaae:	f000 fc84 	bl	800b3ba <USBD_CtlError>
          break;
 800aab2:	e000      	b.n	800aab6 <USBD_StdItfReq+0x7a>
          break;
 800aab4:	bf00      	nop
      }
      break;
 800aab6:	e004      	b.n	800aac2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800aab8:	6839      	ldr	r1, [r7, #0]
 800aaba:	6878      	ldr	r0, [r7, #4]
 800aabc:	f000 fc7d 	bl	800b3ba <USBD_CtlError>
      break;
 800aac0:	bf00      	nop
  }

  return USBD_OK;
 800aac2:	2300      	movs	r3, #0
}
 800aac4:	4618      	mov	r0, r3
 800aac6:	3710      	adds	r7, #16
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bd80      	pop	{r7, pc}

0800aacc <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b084      	sub	sp, #16
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
 800aad4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800aad6:	2300      	movs	r3, #0
 800aad8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	889b      	ldrh	r3, [r3, #4]
 800aade:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	781b      	ldrb	r3, [r3, #0]
 800aae4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aae8:	2b40      	cmp	r3, #64	; 0x40
 800aaea:	d007      	beq.n	800aafc <USBD_StdEPReq+0x30>
 800aaec:	2b40      	cmp	r3, #64	; 0x40
 800aaee:	f200 8146 	bhi.w	800ad7e <USBD_StdEPReq+0x2b2>
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d00a      	beq.n	800ab0c <USBD_StdEPReq+0x40>
 800aaf6:	2b20      	cmp	r3, #32
 800aaf8:	f040 8141 	bne.w	800ad7e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab02:	689b      	ldr	r3, [r3, #8]
 800ab04:	6839      	ldr	r1, [r7, #0]
 800ab06:	6878      	ldr	r0, [r7, #4]
 800ab08:	4798      	blx	r3
      break;
 800ab0a:	e13d      	b.n	800ad88 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	781b      	ldrb	r3, [r3, #0]
 800ab10:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ab14:	2b20      	cmp	r3, #32
 800ab16:	d10a      	bne.n	800ab2e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab1e:	689b      	ldr	r3, [r3, #8]
 800ab20:	6839      	ldr	r1, [r7, #0]
 800ab22:	6878      	ldr	r0, [r7, #4]
 800ab24:	4798      	blx	r3
 800ab26:	4603      	mov	r3, r0
 800ab28:	73fb      	strb	r3, [r7, #15]

        return ret;
 800ab2a:	7bfb      	ldrb	r3, [r7, #15]
 800ab2c:	e12d      	b.n	800ad8a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800ab2e:	683b      	ldr	r3, [r7, #0]
 800ab30:	785b      	ldrb	r3, [r3, #1]
 800ab32:	2b03      	cmp	r3, #3
 800ab34:	d007      	beq.n	800ab46 <USBD_StdEPReq+0x7a>
 800ab36:	2b03      	cmp	r3, #3
 800ab38:	f300 811b 	bgt.w	800ad72 <USBD_StdEPReq+0x2a6>
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d072      	beq.n	800ac26 <USBD_StdEPReq+0x15a>
 800ab40:	2b01      	cmp	r3, #1
 800ab42:	d03a      	beq.n	800abba <USBD_StdEPReq+0xee>
 800ab44:	e115      	b.n	800ad72 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab4c:	2b02      	cmp	r3, #2
 800ab4e:	d002      	beq.n	800ab56 <USBD_StdEPReq+0x8a>
 800ab50:	2b03      	cmp	r3, #3
 800ab52:	d015      	beq.n	800ab80 <USBD_StdEPReq+0xb4>
 800ab54:	e02b      	b.n	800abae <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ab56:	7bbb      	ldrb	r3, [r7, #14]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d00c      	beq.n	800ab76 <USBD_StdEPReq+0xaa>
 800ab5c:	7bbb      	ldrb	r3, [r7, #14]
 800ab5e:	2b80      	cmp	r3, #128	; 0x80
 800ab60:	d009      	beq.n	800ab76 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800ab62:	7bbb      	ldrb	r3, [r7, #14]
 800ab64:	4619      	mov	r1, r3
 800ab66:	6878      	ldr	r0, [r7, #4]
 800ab68:	f000 ff96 	bl	800ba98 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800ab6c:	2180      	movs	r1, #128	; 0x80
 800ab6e:	6878      	ldr	r0, [r7, #4]
 800ab70:	f000 ff92 	bl	800ba98 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ab74:	e020      	b.n	800abb8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800ab76:	6839      	ldr	r1, [r7, #0]
 800ab78:	6878      	ldr	r0, [r7, #4]
 800ab7a:	f000 fc1e 	bl	800b3ba <USBD_CtlError>
              break;
 800ab7e:	e01b      	b.n	800abb8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	885b      	ldrh	r3, [r3, #2]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d10e      	bne.n	800aba6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800ab88:	7bbb      	ldrb	r3, [r7, #14]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d00b      	beq.n	800aba6 <USBD_StdEPReq+0xda>
 800ab8e:	7bbb      	ldrb	r3, [r7, #14]
 800ab90:	2b80      	cmp	r3, #128	; 0x80
 800ab92:	d008      	beq.n	800aba6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	88db      	ldrh	r3, [r3, #6]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d104      	bne.n	800aba6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800ab9c:	7bbb      	ldrb	r3, [r7, #14]
 800ab9e:	4619      	mov	r1, r3
 800aba0:	6878      	ldr	r0, [r7, #4]
 800aba2:	f000 ff79 	bl	800ba98 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800aba6:	6878      	ldr	r0, [r7, #4]
 800aba8:	f000 fcb1 	bl	800b50e <USBD_CtlSendStatus>

              break;
 800abac:	e004      	b.n	800abb8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800abae:	6839      	ldr	r1, [r7, #0]
 800abb0:	6878      	ldr	r0, [r7, #4]
 800abb2:	f000 fc02 	bl	800b3ba <USBD_CtlError>
              break;
 800abb6:	bf00      	nop
          }
          break;
 800abb8:	e0e0      	b.n	800ad7c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abc0:	2b02      	cmp	r3, #2
 800abc2:	d002      	beq.n	800abca <USBD_StdEPReq+0xfe>
 800abc4:	2b03      	cmp	r3, #3
 800abc6:	d015      	beq.n	800abf4 <USBD_StdEPReq+0x128>
 800abc8:	e026      	b.n	800ac18 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800abca:	7bbb      	ldrb	r3, [r7, #14]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d00c      	beq.n	800abea <USBD_StdEPReq+0x11e>
 800abd0:	7bbb      	ldrb	r3, [r7, #14]
 800abd2:	2b80      	cmp	r3, #128	; 0x80
 800abd4:	d009      	beq.n	800abea <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800abd6:	7bbb      	ldrb	r3, [r7, #14]
 800abd8:	4619      	mov	r1, r3
 800abda:	6878      	ldr	r0, [r7, #4]
 800abdc:	f000 ff5c 	bl	800ba98 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800abe0:	2180      	movs	r1, #128	; 0x80
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	f000 ff58 	bl	800ba98 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800abe8:	e01c      	b.n	800ac24 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800abea:	6839      	ldr	r1, [r7, #0]
 800abec:	6878      	ldr	r0, [r7, #4]
 800abee:	f000 fbe4 	bl	800b3ba <USBD_CtlError>
              break;
 800abf2:	e017      	b.n	800ac24 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	885b      	ldrh	r3, [r3, #2]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d112      	bne.n	800ac22 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800abfc:	7bbb      	ldrb	r3, [r7, #14]
 800abfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d004      	beq.n	800ac10 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800ac06:	7bbb      	ldrb	r3, [r7, #14]
 800ac08:	4619      	mov	r1, r3
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	f000 ff63 	bl	800bad6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800ac10:	6878      	ldr	r0, [r7, #4]
 800ac12:	f000 fc7c 	bl	800b50e <USBD_CtlSendStatus>
              }
              break;
 800ac16:	e004      	b.n	800ac22 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800ac18:	6839      	ldr	r1, [r7, #0]
 800ac1a:	6878      	ldr	r0, [r7, #4]
 800ac1c:	f000 fbcd 	bl	800b3ba <USBD_CtlError>
              break;
 800ac20:	e000      	b.n	800ac24 <USBD_StdEPReq+0x158>
              break;
 800ac22:	bf00      	nop
          }
          break;
 800ac24:	e0aa      	b.n	800ad7c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac2c:	2b02      	cmp	r3, #2
 800ac2e:	d002      	beq.n	800ac36 <USBD_StdEPReq+0x16a>
 800ac30:	2b03      	cmp	r3, #3
 800ac32:	d032      	beq.n	800ac9a <USBD_StdEPReq+0x1ce>
 800ac34:	e097      	b.n	800ad66 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ac36:	7bbb      	ldrb	r3, [r7, #14]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d007      	beq.n	800ac4c <USBD_StdEPReq+0x180>
 800ac3c:	7bbb      	ldrb	r3, [r7, #14]
 800ac3e:	2b80      	cmp	r3, #128	; 0x80
 800ac40:	d004      	beq.n	800ac4c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800ac42:	6839      	ldr	r1, [r7, #0]
 800ac44:	6878      	ldr	r0, [r7, #4]
 800ac46:	f000 fbb8 	bl	800b3ba <USBD_CtlError>
                break;
 800ac4a:	e091      	b.n	800ad70 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ac4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	da0b      	bge.n	800ac6c <USBD_StdEPReq+0x1a0>
 800ac54:	7bbb      	ldrb	r3, [r7, #14]
 800ac56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ac5a:	4613      	mov	r3, r2
 800ac5c:	009b      	lsls	r3, r3, #2
 800ac5e:	4413      	add	r3, r2
 800ac60:	009b      	lsls	r3, r3, #2
 800ac62:	3310      	adds	r3, #16
 800ac64:	687a      	ldr	r2, [r7, #4]
 800ac66:	4413      	add	r3, r2
 800ac68:	3304      	adds	r3, #4
 800ac6a:	e00b      	b.n	800ac84 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ac6c:	7bbb      	ldrb	r3, [r7, #14]
 800ac6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ac72:	4613      	mov	r3, r2
 800ac74:	009b      	lsls	r3, r3, #2
 800ac76:	4413      	add	r3, r2
 800ac78:	009b      	lsls	r3, r3, #2
 800ac7a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ac7e:	687a      	ldr	r2, [r7, #4]
 800ac80:	4413      	add	r3, r2
 800ac82:	3304      	adds	r3, #4
 800ac84:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ac86:	68bb      	ldr	r3, [r7, #8]
 800ac88:	2200      	movs	r2, #0
 800ac8a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ac8c:	68bb      	ldr	r3, [r7, #8]
 800ac8e:	2202      	movs	r2, #2
 800ac90:	4619      	mov	r1, r3
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	f000 fbfb 	bl	800b48e <USBD_CtlSendData>
              break;
 800ac98:	e06a      	b.n	800ad70 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ac9a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	da11      	bge.n	800acc6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800aca2:	7bbb      	ldrb	r3, [r7, #14]
 800aca4:	f003 020f 	and.w	r2, r3, #15
 800aca8:	6879      	ldr	r1, [r7, #4]
 800acaa:	4613      	mov	r3, r2
 800acac:	009b      	lsls	r3, r3, #2
 800acae:	4413      	add	r3, r2
 800acb0:	009b      	lsls	r3, r3, #2
 800acb2:	440b      	add	r3, r1
 800acb4:	3318      	adds	r3, #24
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d117      	bne.n	800acec <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800acbc:	6839      	ldr	r1, [r7, #0]
 800acbe:	6878      	ldr	r0, [r7, #4]
 800acc0:	f000 fb7b 	bl	800b3ba <USBD_CtlError>
                  break;
 800acc4:	e054      	b.n	800ad70 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800acc6:	7bbb      	ldrb	r3, [r7, #14]
 800acc8:	f003 020f 	and.w	r2, r3, #15
 800accc:	6879      	ldr	r1, [r7, #4]
 800acce:	4613      	mov	r3, r2
 800acd0:	009b      	lsls	r3, r3, #2
 800acd2:	4413      	add	r3, r2
 800acd4:	009b      	lsls	r3, r3, #2
 800acd6:	440b      	add	r3, r1
 800acd8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d104      	bne.n	800acec <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800ace2:	6839      	ldr	r1, [r7, #0]
 800ace4:	6878      	ldr	r0, [r7, #4]
 800ace6:	f000 fb68 	bl	800b3ba <USBD_CtlError>
                  break;
 800acea:	e041      	b.n	800ad70 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800acec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	da0b      	bge.n	800ad0c <USBD_StdEPReq+0x240>
 800acf4:	7bbb      	ldrb	r3, [r7, #14]
 800acf6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800acfa:	4613      	mov	r3, r2
 800acfc:	009b      	lsls	r3, r3, #2
 800acfe:	4413      	add	r3, r2
 800ad00:	009b      	lsls	r3, r3, #2
 800ad02:	3310      	adds	r3, #16
 800ad04:	687a      	ldr	r2, [r7, #4]
 800ad06:	4413      	add	r3, r2
 800ad08:	3304      	adds	r3, #4
 800ad0a:	e00b      	b.n	800ad24 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ad0c:	7bbb      	ldrb	r3, [r7, #14]
 800ad0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ad12:	4613      	mov	r3, r2
 800ad14:	009b      	lsls	r3, r3, #2
 800ad16:	4413      	add	r3, r2
 800ad18:	009b      	lsls	r3, r3, #2
 800ad1a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ad1e:	687a      	ldr	r2, [r7, #4]
 800ad20:	4413      	add	r3, r2
 800ad22:	3304      	adds	r3, #4
 800ad24:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ad26:	7bbb      	ldrb	r3, [r7, #14]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d002      	beq.n	800ad32 <USBD_StdEPReq+0x266>
 800ad2c:	7bbb      	ldrb	r3, [r7, #14]
 800ad2e:	2b80      	cmp	r3, #128	; 0x80
 800ad30:	d103      	bne.n	800ad3a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800ad32:	68bb      	ldr	r3, [r7, #8]
 800ad34:	2200      	movs	r2, #0
 800ad36:	601a      	str	r2, [r3, #0]
 800ad38:	e00e      	b.n	800ad58 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800ad3a:	7bbb      	ldrb	r3, [r7, #14]
 800ad3c:	4619      	mov	r1, r3
 800ad3e:	6878      	ldr	r0, [r7, #4]
 800ad40:	f000 fee8 	bl	800bb14 <USBD_LL_IsStallEP>
 800ad44:	4603      	mov	r3, r0
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d003      	beq.n	800ad52 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800ad4a:	68bb      	ldr	r3, [r7, #8]
 800ad4c:	2201      	movs	r2, #1
 800ad4e:	601a      	str	r2, [r3, #0]
 800ad50:	e002      	b.n	800ad58 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800ad52:	68bb      	ldr	r3, [r7, #8]
 800ad54:	2200      	movs	r2, #0
 800ad56:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ad58:	68bb      	ldr	r3, [r7, #8]
 800ad5a:	2202      	movs	r2, #2
 800ad5c:	4619      	mov	r1, r3
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	f000 fb95 	bl	800b48e <USBD_CtlSendData>
              break;
 800ad64:	e004      	b.n	800ad70 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800ad66:	6839      	ldr	r1, [r7, #0]
 800ad68:	6878      	ldr	r0, [r7, #4]
 800ad6a:	f000 fb26 	bl	800b3ba <USBD_CtlError>
              break;
 800ad6e:	bf00      	nop
          }
          break;
 800ad70:	e004      	b.n	800ad7c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800ad72:	6839      	ldr	r1, [r7, #0]
 800ad74:	6878      	ldr	r0, [r7, #4]
 800ad76:	f000 fb20 	bl	800b3ba <USBD_CtlError>
          break;
 800ad7a:	bf00      	nop
      }
      break;
 800ad7c:	e004      	b.n	800ad88 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800ad7e:	6839      	ldr	r1, [r7, #0]
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	f000 fb1a 	bl	800b3ba <USBD_CtlError>
      break;
 800ad86:	bf00      	nop
  }

  return ret;
 800ad88:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	3710      	adds	r7, #16
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	bd80      	pop	{r7, pc}
	...

0800ad94 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b084      	sub	sp, #16
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
 800ad9c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ad9e:	2300      	movs	r3, #0
 800ada0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ada2:	2300      	movs	r3, #0
 800ada4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ada6:	2300      	movs	r3, #0
 800ada8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800adaa:	683b      	ldr	r3, [r7, #0]
 800adac:	885b      	ldrh	r3, [r3, #2]
 800adae:	0a1b      	lsrs	r3, r3, #8
 800adb0:	b29b      	uxth	r3, r3
 800adb2:	3b01      	subs	r3, #1
 800adb4:	2b06      	cmp	r3, #6
 800adb6:	f200 8128 	bhi.w	800b00a <USBD_GetDescriptor+0x276>
 800adba:	a201      	add	r2, pc, #4	; (adr r2, 800adc0 <USBD_GetDescriptor+0x2c>)
 800adbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adc0:	0800addd 	.word	0x0800addd
 800adc4:	0800adf5 	.word	0x0800adf5
 800adc8:	0800ae35 	.word	0x0800ae35
 800adcc:	0800b00b 	.word	0x0800b00b
 800add0:	0800b00b 	.word	0x0800b00b
 800add4:	0800afab 	.word	0x0800afab
 800add8:	0800afd7 	.word	0x0800afd7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	687a      	ldr	r2, [r7, #4]
 800ade6:	7c12      	ldrb	r2, [r2, #16]
 800ade8:	f107 0108 	add.w	r1, r7, #8
 800adec:	4610      	mov	r0, r2
 800adee:	4798      	blx	r3
 800adf0:	60f8      	str	r0, [r7, #12]
      break;
 800adf2:	e112      	b.n	800b01a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	7c1b      	ldrb	r3, [r3, #16]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d10d      	bne.n	800ae18 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae04:	f107 0208 	add.w	r2, r7, #8
 800ae08:	4610      	mov	r0, r2
 800ae0a:	4798      	blx	r3
 800ae0c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	3301      	adds	r3, #1
 800ae12:	2202      	movs	r2, #2
 800ae14:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ae16:	e100      	b.n	800b01a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae20:	f107 0208 	add.w	r2, r7, #8
 800ae24:	4610      	mov	r0, r2
 800ae26:	4798      	blx	r3
 800ae28:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	3301      	adds	r3, #1
 800ae2e:	2202      	movs	r2, #2
 800ae30:	701a      	strb	r2, [r3, #0]
      break;
 800ae32:	e0f2      	b.n	800b01a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	885b      	ldrh	r3, [r3, #2]
 800ae38:	b2db      	uxtb	r3, r3
 800ae3a:	2b05      	cmp	r3, #5
 800ae3c:	f200 80ac 	bhi.w	800af98 <USBD_GetDescriptor+0x204>
 800ae40:	a201      	add	r2, pc, #4	; (adr r2, 800ae48 <USBD_GetDescriptor+0xb4>)
 800ae42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae46:	bf00      	nop
 800ae48:	0800ae61 	.word	0x0800ae61
 800ae4c:	0800ae95 	.word	0x0800ae95
 800ae50:	0800aec9 	.word	0x0800aec9
 800ae54:	0800aefd 	.word	0x0800aefd
 800ae58:	0800af31 	.word	0x0800af31
 800ae5c:	0800af65 	.word	0x0800af65
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ae66:	685b      	ldr	r3, [r3, #4]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d00b      	beq.n	800ae84 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ae72:	685b      	ldr	r3, [r3, #4]
 800ae74:	687a      	ldr	r2, [r7, #4]
 800ae76:	7c12      	ldrb	r2, [r2, #16]
 800ae78:	f107 0108 	add.w	r1, r7, #8
 800ae7c:	4610      	mov	r0, r2
 800ae7e:	4798      	blx	r3
 800ae80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae82:	e091      	b.n	800afa8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ae84:	6839      	ldr	r1, [r7, #0]
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	f000 fa97 	bl	800b3ba <USBD_CtlError>
            err++;
 800ae8c:	7afb      	ldrb	r3, [r7, #11]
 800ae8e:	3301      	adds	r3, #1
 800ae90:	72fb      	strb	r3, [r7, #11]
          break;
 800ae92:	e089      	b.n	800afa8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ae9a:	689b      	ldr	r3, [r3, #8]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d00b      	beq.n	800aeb8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aea6:	689b      	ldr	r3, [r3, #8]
 800aea8:	687a      	ldr	r2, [r7, #4]
 800aeaa:	7c12      	ldrb	r2, [r2, #16]
 800aeac:	f107 0108 	add.w	r1, r7, #8
 800aeb0:	4610      	mov	r0, r2
 800aeb2:	4798      	blx	r3
 800aeb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aeb6:	e077      	b.n	800afa8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aeb8:	6839      	ldr	r1, [r7, #0]
 800aeba:	6878      	ldr	r0, [r7, #4]
 800aebc:	f000 fa7d 	bl	800b3ba <USBD_CtlError>
            err++;
 800aec0:	7afb      	ldrb	r3, [r7, #11]
 800aec2:	3301      	adds	r3, #1
 800aec4:	72fb      	strb	r3, [r7, #11]
          break;
 800aec6:	e06f      	b.n	800afa8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aece:	68db      	ldr	r3, [r3, #12]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d00b      	beq.n	800aeec <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aeda:	68db      	ldr	r3, [r3, #12]
 800aedc:	687a      	ldr	r2, [r7, #4]
 800aede:	7c12      	ldrb	r2, [r2, #16]
 800aee0:	f107 0108 	add.w	r1, r7, #8
 800aee4:	4610      	mov	r0, r2
 800aee6:	4798      	blx	r3
 800aee8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aeea:	e05d      	b.n	800afa8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aeec:	6839      	ldr	r1, [r7, #0]
 800aeee:	6878      	ldr	r0, [r7, #4]
 800aef0:	f000 fa63 	bl	800b3ba <USBD_CtlError>
            err++;
 800aef4:	7afb      	ldrb	r3, [r7, #11]
 800aef6:	3301      	adds	r3, #1
 800aef8:	72fb      	strb	r3, [r7, #11]
          break;
 800aefa:	e055      	b.n	800afa8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800af02:	691b      	ldr	r3, [r3, #16]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d00b      	beq.n	800af20 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800af0e:	691b      	ldr	r3, [r3, #16]
 800af10:	687a      	ldr	r2, [r7, #4]
 800af12:	7c12      	ldrb	r2, [r2, #16]
 800af14:	f107 0108 	add.w	r1, r7, #8
 800af18:	4610      	mov	r0, r2
 800af1a:	4798      	blx	r3
 800af1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af1e:	e043      	b.n	800afa8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800af20:	6839      	ldr	r1, [r7, #0]
 800af22:	6878      	ldr	r0, [r7, #4]
 800af24:	f000 fa49 	bl	800b3ba <USBD_CtlError>
            err++;
 800af28:	7afb      	ldrb	r3, [r7, #11]
 800af2a:	3301      	adds	r3, #1
 800af2c:	72fb      	strb	r3, [r7, #11]
          break;
 800af2e:	e03b      	b.n	800afa8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800af36:	695b      	ldr	r3, [r3, #20]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d00b      	beq.n	800af54 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800af42:	695b      	ldr	r3, [r3, #20]
 800af44:	687a      	ldr	r2, [r7, #4]
 800af46:	7c12      	ldrb	r2, [r2, #16]
 800af48:	f107 0108 	add.w	r1, r7, #8
 800af4c:	4610      	mov	r0, r2
 800af4e:	4798      	blx	r3
 800af50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af52:	e029      	b.n	800afa8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800af54:	6839      	ldr	r1, [r7, #0]
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	f000 fa2f 	bl	800b3ba <USBD_CtlError>
            err++;
 800af5c:	7afb      	ldrb	r3, [r7, #11]
 800af5e:	3301      	adds	r3, #1
 800af60:	72fb      	strb	r3, [r7, #11]
          break;
 800af62:	e021      	b.n	800afa8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800af6a:	699b      	ldr	r3, [r3, #24]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d00b      	beq.n	800af88 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800af76:	699b      	ldr	r3, [r3, #24]
 800af78:	687a      	ldr	r2, [r7, #4]
 800af7a:	7c12      	ldrb	r2, [r2, #16]
 800af7c:	f107 0108 	add.w	r1, r7, #8
 800af80:	4610      	mov	r0, r2
 800af82:	4798      	blx	r3
 800af84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af86:	e00f      	b.n	800afa8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800af88:	6839      	ldr	r1, [r7, #0]
 800af8a:	6878      	ldr	r0, [r7, #4]
 800af8c:	f000 fa15 	bl	800b3ba <USBD_CtlError>
            err++;
 800af90:	7afb      	ldrb	r3, [r7, #11]
 800af92:	3301      	adds	r3, #1
 800af94:	72fb      	strb	r3, [r7, #11]
          break;
 800af96:	e007      	b.n	800afa8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800af98:	6839      	ldr	r1, [r7, #0]
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f000 fa0d 	bl	800b3ba <USBD_CtlError>
          err++;
 800afa0:	7afb      	ldrb	r3, [r7, #11]
 800afa2:	3301      	adds	r3, #1
 800afa4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800afa6:	e038      	b.n	800b01a <USBD_GetDescriptor+0x286>
 800afa8:	e037      	b.n	800b01a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	7c1b      	ldrb	r3, [r3, #16]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d109      	bne.n	800afc6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afba:	f107 0208 	add.w	r2, r7, #8
 800afbe:	4610      	mov	r0, r2
 800afc0:	4798      	blx	r3
 800afc2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800afc4:	e029      	b.n	800b01a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800afc6:	6839      	ldr	r1, [r7, #0]
 800afc8:	6878      	ldr	r0, [r7, #4]
 800afca:	f000 f9f6 	bl	800b3ba <USBD_CtlError>
        err++;
 800afce:	7afb      	ldrb	r3, [r7, #11]
 800afd0:	3301      	adds	r3, #1
 800afd2:	72fb      	strb	r3, [r7, #11]
      break;
 800afd4:	e021      	b.n	800b01a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	7c1b      	ldrb	r3, [r3, #16]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d10d      	bne.n	800affa <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afe6:	f107 0208 	add.w	r2, r7, #8
 800afea:	4610      	mov	r0, r2
 800afec:	4798      	blx	r3
 800afee:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	3301      	adds	r3, #1
 800aff4:	2207      	movs	r2, #7
 800aff6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aff8:	e00f      	b.n	800b01a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800affa:	6839      	ldr	r1, [r7, #0]
 800affc:	6878      	ldr	r0, [r7, #4]
 800affe:	f000 f9dc 	bl	800b3ba <USBD_CtlError>
        err++;
 800b002:	7afb      	ldrb	r3, [r7, #11]
 800b004:	3301      	adds	r3, #1
 800b006:	72fb      	strb	r3, [r7, #11]
      break;
 800b008:	e007      	b.n	800b01a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b00a:	6839      	ldr	r1, [r7, #0]
 800b00c:	6878      	ldr	r0, [r7, #4]
 800b00e:	f000 f9d4 	bl	800b3ba <USBD_CtlError>
      err++;
 800b012:	7afb      	ldrb	r3, [r7, #11]
 800b014:	3301      	adds	r3, #1
 800b016:	72fb      	strb	r3, [r7, #11]
      break;
 800b018:	bf00      	nop
  }

  if (err != 0U)
 800b01a:	7afb      	ldrb	r3, [r7, #11]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d11c      	bne.n	800b05a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800b020:	893b      	ldrh	r3, [r7, #8]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d011      	beq.n	800b04a <USBD_GetDescriptor+0x2b6>
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	88db      	ldrh	r3, [r3, #6]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d00d      	beq.n	800b04a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800b02e:	683b      	ldr	r3, [r7, #0]
 800b030:	88da      	ldrh	r2, [r3, #6]
 800b032:	893b      	ldrh	r3, [r7, #8]
 800b034:	4293      	cmp	r3, r2
 800b036:	bf28      	it	cs
 800b038:	4613      	movcs	r3, r2
 800b03a:	b29b      	uxth	r3, r3
 800b03c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b03e:	893b      	ldrh	r3, [r7, #8]
 800b040:	461a      	mov	r2, r3
 800b042:	68f9      	ldr	r1, [r7, #12]
 800b044:	6878      	ldr	r0, [r7, #4]
 800b046:	f000 fa22 	bl	800b48e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800b04a:	683b      	ldr	r3, [r7, #0]
 800b04c:	88db      	ldrh	r3, [r3, #6]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d104      	bne.n	800b05c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800b052:	6878      	ldr	r0, [r7, #4]
 800b054:	f000 fa5b 	bl	800b50e <USBD_CtlSendStatus>
 800b058:	e000      	b.n	800b05c <USBD_GetDescriptor+0x2c8>
    return;
 800b05a:	bf00      	nop
    }
  }
}
 800b05c:	3710      	adds	r7, #16
 800b05e:	46bd      	mov	sp, r7
 800b060:	bd80      	pop	{r7, pc}
 800b062:	bf00      	nop

0800b064 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b084      	sub	sp, #16
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
 800b06c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b06e:	683b      	ldr	r3, [r7, #0]
 800b070:	889b      	ldrh	r3, [r3, #4]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d130      	bne.n	800b0d8 <USBD_SetAddress+0x74>
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	88db      	ldrh	r3, [r3, #6]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d12c      	bne.n	800b0d8 <USBD_SetAddress+0x74>
 800b07e:	683b      	ldr	r3, [r7, #0]
 800b080:	885b      	ldrh	r3, [r3, #2]
 800b082:	2b7f      	cmp	r3, #127	; 0x7f
 800b084:	d828      	bhi.n	800b0d8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b086:	683b      	ldr	r3, [r7, #0]
 800b088:	885b      	ldrh	r3, [r3, #2]
 800b08a:	b2db      	uxtb	r3, r3
 800b08c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b090:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b098:	2b03      	cmp	r3, #3
 800b09a:	d104      	bne.n	800b0a6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800b09c:	6839      	ldr	r1, [r7, #0]
 800b09e:	6878      	ldr	r0, [r7, #4]
 800b0a0:	f000 f98b 	bl	800b3ba <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0a4:	e01d      	b.n	800b0e2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	7bfa      	ldrb	r2, [r7, #15]
 800b0aa:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b0ae:	7bfb      	ldrb	r3, [r7, #15]
 800b0b0:	4619      	mov	r1, r3
 800b0b2:	6878      	ldr	r0, [r7, #4]
 800b0b4:	f000 fd5a 	bl	800bb6c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800b0b8:	6878      	ldr	r0, [r7, #4]
 800b0ba:	f000 fa28 	bl	800b50e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b0be:	7bfb      	ldrb	r3, [r7, #15]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d004      	beq.n	800b0ce <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2202      	movs	r2, #2
 800b0c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0cc:	e009      	b.n	800b0e2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	2201      	movs	r2, #1
 800b0d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0d6:	e004      	b.n	800b0e2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b0d8:	6839      	ldr	r1, [r7, #0]
 800b0da:	6878      	ldr	r0, [r7, #4]
 800b0dc:	f000 f96d 	bl	800b3ba <USBD_CtlError>
  }
}
 800b0e0:	bf00      	nop
 800b0e2:	bf00      	nop
 800b0e4:	3710      	adds	r7, #16
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	bd80      	pop	{r7, pc}
	...

0800b0ec <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b082      	sub	sp, #8
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
 800b0f4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	885b      	ldrh	r3, [r3, #2]
 800b0fa:	b2da      	uxtb	r2, r3
 800b0fc:	4b41      	ldr	r3, [pc, #260]	; (800b204 <USBD_SetConfig+0x118>)
 800b0fe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b100:	4b40      	ldr	r3, [pc, #256]	; (800b204 <USBD_SetConfig+0x118>)
 800b102:	781b      	ldrb	r3, [r3, #0]
 800b104:	2b01      	cmp	r3, #1
 800b106:	d904      	bls.n	800b112 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800b108:	6839      	ldr	r1, [r7, #0]
 800b10a:	6878      	ldr	r0, [r7, #4]
 800b10c:	f000 f955 	bl	800b3ba <USBD_CtlError>
 800b110:	e075      	b.n	800b1fe <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b118:	2b02      	cmp	r3, #2
 800b11a:	d002      	beq.n	800b122 <USBD_SetConfig+0x36>
 800b11c:	2b03      	cmp	r3, #3
 800b11e:	d023      	beq.n	800b168 <USBD_SetConfig+0x7c>
 800b120:	e062      	b.n	800b1e8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800b122:	4b38      	ldr	r3, [pc, #224]	; (800b204 <USBD_SetConfig+0x118>)
 800b124:	781b      	ldrb	r3, [r3, #0]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d01a      	beq.n	800b160 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800b12a:	4b36      	ldr	r3, [pc, #216]	; (800b204 <USBD_SetConfig+0x118>)
 800b12c:	781b      	ldrb	r3, [r3, #0]
 800b12e:	461a      	mov	r2, r3
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2203      	movs	r2, #3
 800b138:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b13c:	4b31      	ldr	r3, [pc, #196]	; (800b204 <USBD_SetConfig+0x118>)
 800b13e:	781b      	ldrb	r3, [r3, #0]
 800b140:	4619      	mov	r1, r3
 800b142:	6878      	ldr	r0, [r7, #4]
 800b144:	f7ff f9e8 	bl	800a518 <USBD_SetClassConfig>
 800b148:	4603      	mov	r3, r0
 800b14a:	2b02      	cmp	r3, #2
 800b14c:	d104      	bne.n	800b158 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800b14e:	6839      	ldr	r1, [r7, #0]
 800b150:	6878      	ldr	r0, [r7, #4]
 800b152:	f000 f932 	bl	800b3ba <USBD_CtlError>
            return;
 800b156:	e052      	b.n	800b1fe <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800b158:	6878      	ldr	r0, [r7, #4]
 800b15a:	f000 f9d8 	bl	800b50e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b15e:	e04e      	b.n	800b1fe <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b160:	6878      	ldr	r0, [r7, #4]
 800b162:	f000 f9d4 	bl	800b50e <USBD_CtlSendStatus>
        break;
 800b166:	e04a      	b.n	800b1fe <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800b168:	4b26      	ldr	r3, [pc, #152]	; (800b204 <USBD_SetConfig+0x118>)
 800b16a:	781b      	ldrb	r3, [r3, #0]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d112      	bne.n	800b196 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	2202      	movs	r2, #2
 800b174:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800b178:	4b22      	ldr	r3, [pc, #136]	; (800b204 <USBD_SetConfig+0x118>)
 800b17a:	781b      	ldrb	r3, [r3, #0]
 800b17c:	461a      	mov	r2, r3
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800b182:	4b20      	ldr	r3, [pc, #128]	; (800b204 <USBD_SetConfig+0x118>)
 800b184:	781b      	ldrb	r3, [r3, #0]
 800b186:	4619      	mov	r1, r3
 800b188:	6878      	ldr	r0, [r7, #4]
 800b18a:	f7ff f9e4 	bl	800a556 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800b18e:	6878      	ldr	r0, [r7, #4]
 800b190:	f000 f9bd 	bl	800b50e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b194:	e033      	b.n	800b1fe <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800b196:	4b1b      	ldr	r3, [pc, #108]	; (800b204 <USBD_SetConfig+0x118>)
 800b198:	781b      	ldrb	r3, [r3, #0]
 800b19a:	461a      	mov	r2, r3
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	685b      	ldr	r3, [r3, #4]
 800b1a0:	429a      	cmp	r2, r3
 800b1a2:	d01d      	beq.n	800b1e0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	685b      	ldr	r3, [r3, #4]
 800b1a8:	b2db      	uxtb	r3, r3
 800b1aa:	4619      	mov	r1, r3
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	f7ff f9d2 	bl	800a556 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800b1b2:	4b14      	ldr	r3, [pc, #80]	; (800b204 <USBD_SetConfig+0x118>)
 800b1b4:	781b      	ldrb	r3, [r3, #0]
 800b1b6:	461a      	mov	r2, r3
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b1bc:	4b11      	ldr	r3, [pc, #68]	; (800b204 <USBD_SetConfig+0x118>)
 800b1be:	781b      	ldrb	r3, [r3, #0]
 800b1c0:	4619      	mov	r1, r3
 800b1c2:	6878      	ldr	r0, [r7, #4]
 800b1c4:	f7ff f9a8 	bl	800a518 <USBD_SetClassConfig>
 800b1c8:	4603      	mov	r3, r0
 800b1ca:	2b02      	cmp	r3, #2
 800b1cc:	d104      	bne.n	800b1d8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800b1ce:	6839      	ldr	r1, [r7, #0]
 800b1d0:	6878      	ldr	r0, [r7, #4]
 800b1d2:	f000 f8f2 	bl	800b3ba <USBD_CtlError>
            return;
 800b1d6:	e012      	b.n	800b1fe <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b1d8:	6878      	ldr	r0, [r7, #4]
 800b1da:	f000 f998 	bl	800b50e <USBD_CtlSendStatus>
        break;
 800b1de:	e00e      	b.n	800b1fe <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b1e0:	6878      	ldr	r0, [r7, #4]
 800b1e2:	f000 f994 	bl	800b50e <USBD_CtlSendStatus>
        break;
 800b1e6:	e00a      	b.n	800b1fe <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800b1e8:	6839      	ldr	r1, [r7, #0]
 800b1ea:	6878      	ldr	r0, [r7, #4]
 800b1ec:	f000 f8e5 	bl	800b3ba <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800b1f0:	4b04      	ldr	r3, [pc, #16]	; (800b204 <USBD_SetConfig+0x118>)
 800b1f2:	781b      	ldrb	r3, [r3, #0]
 800b1f4:	4619      	mov	r1, r3
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	f7ff f9ad 	bl	800a556 <USBD_ClrClassConfig>
        break;
 800b1fc:	bf00      	nop
    }
  }
}
 800b1fe:	3708      	adds	r7, #8
 800b200:	46bd      	mov	sp, r7
 800b202:	bd80      	pop	{r7, pc}
 800b204:	20000420 	.word	0x20000420

0800b208 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b082      	sub	sp, #8
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
 800b210:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	88db      	ldrh	r3, [r3, #6]
 800b216:	2b01      	cmp	r3, #1
 800b218:	d004      	beq.n	800b224 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b21a:	6839      	ldr	r1, [r7, #0]
 800b21c:	6878      	ldr	r0, [r7, #4]
 800b21e:	f000 f8cc 	bl	800b3ba <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b222:	e022      	b.n	800b26a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b22a:	2b02      	cmp	r3, #2
 800b22c:	dc02      	bgt.n	800b234 <USBD_GetConfig+0x2c>
 800b22e:	2b00      	cmp	r3, #0
 800b230:	dc03      	bgt.n	800b23a <USBD_GetConfig+0x32>
 800b232:	e015      	b.n	800b260 <USBD_GetConfig+0x58>
 800b234:	2b03      	cmp	r3, #3
 800b236:	d00b      	beq.n	800b250 <USBD_GetConfig+0x48>
 800b238:	e012      	b.n	800b260 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	2200      	movs	r2, #0
 800b23e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	3308      	adds	r3, #8
 800b244:	2201      	movs	r2, #1
 800b246:	4619      	mov	r1, r3
 800b248:	6878      	ldr	r0, [r7, #4]
 800b24a:	f000 f920 	bl	800b48e <USBD_CtlSendData>
        break;
 800b24e:	e00c      	b.n	800b26a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	3304      	adds	r3, #4
 800b254:	2201      	movs	r2, #1
 800b256:	4619      	mov	r1, r3
 800b258:	6878      	ldr	r0, [r7, #4]
 800b25a:	f000 f918 	bl	800b48e <USBD_CtlSendData>
        break;
 800b25e:	e004      	b.n	800b26a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800b260:	6839      	ldr	r1, [r7, #0]
 800b262:	6878      	ldr	r0, [r7, #4]
 800b264:	f000 f8a9 	bl	800b3ba <USBD_CtlError>
        break;
 800b268:	bf00      	nop
}
 800b26a:	bf00      	nop
 800b26c:	3708      	adds	r7, #8
 800b26e:	46bd      	mov	sp, r7
 800b270:	bd80      	pop	{r7, pc}

0800b272 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b272:	b580      	push	{r7, lr}
 800b274:	b082      	sub	sp, #8
 800b276:	af00      	add	r7, sp, #0
 800b278:	6078      	str	r0, [r7, #4]
 800b27a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b282:	3b01      	subs	r3, #1
 800b284:	2b02      	cmp	r3, #2
 800b286:	d81e      	bhi.n	800b2c6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b288:	683b      	ldr	r3, [r7, #0]
 800b28a:	88db      	ldrh	r3, [r3, #6]
 800b28c:	2b02      	cmp	r3, #2
 800b28e:	d004      	beq.n	800b29a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800b290:	6839      	ldr	r1, [r7, #0]
 800b292:	6878      	ldr	r0, [r7, #4]
 800b294:	f000 f891 	bl	800b3ba <USBD_CtlError>
        break;
 800b298:	e01a      	b.n	800b2d0 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	2201      	movs	r2, #1
 800b29e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d005      	beq.n	800b2b6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	68db      	ldr	r3, [r3, #12]
 800b2ae:	f043 0202 	orr.w	r2, r3, #2
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	330c      	adds	r3, #12
 800b2ba:	2202      	movs	r2, #2
 800b2bc:	4619      	mov	r1, r3
 800b2be:	6878      	ldr	r0, [r7, #4]
 800b2c0:	f000 f8e5 	bl	800b48e <USBD_CtlSendData>
      break;
 800b2c4:	e004      	b.n	800b2d0 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800b2c6:	6839      	ldr	r1, [r7, #0]
 800b2c8:	6878      	ldr	r0, [r7, #4]
 800b2ca:	f000 f876 	bl	800b3ba <USBD_CtlError>
      break;
 800b2ce:	bf00      	nop
  }
}
 800b2d0:	bf00      	nop
 800b2d2:	3708      	adds	r7, #8
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	bd80      	pop	{r7, pc}

0800b2d8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b082      	sub	sp, #8
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
 800b2e0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b2e2:	683b      	ldr	r3, [r7, #0]
 800b2e4:	885b      	ldrh	r3, [r3, #2]
 800b2e6:	2b01      	cmp	r3, #1
 800b2e8:	d106      	bne.n	800b2f8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	2201      	movs	r2, #1
 800b2ee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800b2f2:	6878      	ldr	r0, [r7, #4]
 800b2f4:	f000 f90b 	bl	800b50e <USBD_CtlSendStatus>
  }
}
 800b2f8:	bf00      	nop
 800b2fa:	3708      	adds	r7, #8
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	bd80      	pop	{r7, pc}

0800b300 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b082      	sub	sp, #8
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
 800b308:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b310:	3b01      	subs	r3, #1
 800b312:	2b02      	cmp	r3, #2
 800b314:	d80b      	bhi.n	800b32e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	885b      	ldrh	r3, [r3, #2]
 800b31a:	2b01      	cmp	r3, #1
 800b31c:	d10c      	bne.n	800b338 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	2200      	movs	r2, #0
 800b322:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800b326:	6878      	ldr	r0, [r7, #4]
 800b328:	f000 f8f1 	bl	800b50e <USBD_CtlSendStatus>
      }
      break;
 800b32c:	e004      	b.n	800b338 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800b32e:	6839      	ldr	r1, [r7, #0]
 800b330:	6878      	ldr	r0, [r7, #4]
 800b332:	f000 f842 	bl	800b3ba <USBD_CtlError>
      break;
 800b336:	e000      	b.n	800b33a <USBD_ClrFeature+0x3a>
      break;
 800b338:	bf00      	nop
  }
}
 800b33a:	bf00      	nop
 800b33c:	3708      	adds	r7, #8
 800b33e:	46bd      	mov	sp, r7
 800b340:	bd80      	pop	{r7, pc}

0800b342 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b342:	b480      	push	{r7}
 800b344:	b083      	sub	sp, #12
 800b346:	af00      	add	r7, sp, #0
 800b348:	6078      	str	r0, [r7, #4]
 800b34a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	781a      	ldrb	r2, [r3, #0]
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800b354:	683b      	ldr	r3, [r7, #0]
 800b356:	785a      	ldrb	r2, [r3, #1]
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	3302      	adds	r3, #2
 800b360:	781b      	ldrb	r3, [r3, #0]
 800b362:	b29a      	uxth	r2, r3
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	3303      	adds	r3, #3
 800b368:	781b      	ldrb	r3, [r3, #0]
 800b36a:	b29b      	uxth	r3, r3
 800b36c:	021b      	lsls	r3, r3, #8
 800b36e:	b29b      	uxth	r3, r3
 800b370:	4413      	add	r3, r2
 800b372:	b29a      	uxth	r2, r3
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800b378:	683b      	ldr	r3, [r7, #0]
 800b37a:	3304      	adds	r3, #4
 800b37c:	781b      	ldrb	r3, [r3, #0]
 800b37e:	b29a      	uxth	r2, r3
 800b380:	683b      	ldr	r3, [r7, #0]
 800b382:	3305      	adds	r3, #5
 800b384:	781b      	ldrb	r3, [r3, #0]
 800b386:	b29b      	uxth	r3, r3
 800b388:	021b      	lsls	r3, r3, #8
 800b38a:	b29b      	uxth	r3, r3
 800b38c:	4413      	add	r3, r2
 800b38e:	b29a      	uxth	r2, r3
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	3306      	adds	r3, #6
 800b398:	781b      	ldrb	r3, [r3, #0]
 800b39a:	b29a      	uxth	r2, r3
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	3307      	adds	r3, #7
 800b3a0:	781b      	ldrb	r3, [r3, #0]
 800b3a2:	b29b      	uxth	r3, r3
 800b3a4:	021b      	lsls	r3, r3, #8
 800b3a6:	b29b      	uxth	r3, r3
 800b3a8:	4413      	add	r3, r2
 800b3aa:	b29a      	uxth	r2, r3
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	80da      	strh	r2, [r3, #6]

}
 800b3b0:	bf00      	nop
 800b3b2:	370c      	adds	r7, #12
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	bc80      	pop	{r7}
 800b3b8:	4770      	bx	lr

0800b3ba <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800b3ba:	b580      	push	{r7, lr}
 800b3bc:	b082      	sub	sp, #8
 800b3be:	af00      	add	r7, sp, #0
 800b3c0:	6078      	str	r0, [r7, #4]
 800b3c2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800b3c4:	2180      	movs	r1, #128	; 0x80
 800b3c6:	6878      	ldr	r0, [r7, #4]
 800b3c8:	f000 fb66 	bl	800ba98 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800b3cc:	2100      	movs	r1, #0
 800b3ce:	6878      	ldr	r0, [r7, #4]
 800b3d0:	f000 fb62 	bl	800ba98 <USBD_LL_StallEP>
}
 800b3d4:	bf00      	nop
 800b3d6:	3708      	adds	r7, #8
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	bd80      	pop	{r7, pc}

0800b3dc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b086      	sub	sp, #24
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	60f8      	str	r0, [r7, #12]
 800b3e4:	60b9      	str	r1, [r7, #8]
 800b3e6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d032      	beq.n	800b458 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800b3f2:	68f8      	ldr	r0, [r7, #12]
 800b3f4:	f000 f834 	bl	800b460 <USBD_GetLen>
 800b3f8:	4603      	mov	r3, r0
 800b3fa:	3301      	adds	r3, #1
 800b3fc:	b29b      	uxth	r3, r3
 800b3fe:	005b      	lsls	r3, r3, #1
 800b400:	b29a      	uxth	r2, r3
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800b406:	7dfb      	ldrb	r3, [r7, #23]
 800b408:	1c5a      	adds	r2, r3, #1
 800b40a:	75fa      	strb	r2, [r7, #23]
 800b40c:	461a      	mov	r2, r3
 800b40e:	68bb      	ldr	r3, [r7, #8]
 800b410:	4413      	add	r3, r2
 800b412:	687a      	ldr	r2, [r7, #4]
 800b414:	7812      	ldrb	r2, [r2, #0]
 800b416:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800b418:	7dfb      	ldrb	r3, [r7, #23]
 800b41a:	1c5a      	adds	r2, r3, #1
 800b41c:	75fa      	strb	r2, [r7, #23]
 800b41e:	461a      	mov	r2, r3
 800b420:	68bb      	ldr	r3, [r7, #8]
 800b422:	4413      	add	r3, r2
 800b424:	2203      	movs	r2, #3
 800b426:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800b428:	e012      	b.n	800b450 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	1c5a      	adds	r2, r3, #1
 800b42e:	60fa      	str	r2, [r7, #12]
 800b430:	7dfa      	ldrb	r2, [r7, #23]
 800b432:	1c51      	adds	r1, r2, #1
 800b434:	75f9      	strb	r1, [r7, #23]
 800b436:	4611      	mov	r1, r2
 800b438:	68ba      	ldr	r2, [r7, #8]
 800b43a:	440a      	add	r2, r1
 800b43c:	781b      	ldrb	r3, [r3, #0]
 800b43e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800b440:	7dfb      	ldrb	r3, [r7, #23]
 800b442:	1c5a      	adds	r2, r3, #1
 800b444:	75fa      	strb	r2, [r7, #23]
 800b446:	461a      	mov	r2, r3
 800b448:	68bb      	ldr	r3, [r7, #8]
 800b44a:	4413      	add	r3, r2
 800b44c:	2200      	movs	r2, #0
 800b44e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	781b      	ldrb	r3, [r3, #0]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d1e8      	bne.n	800b42a <USBD_GetString+0x4e>
    }
  }
}
 800b458:	bf00      	nop
 800b45a:	3718      	adds	r7, #24
 800b45c:	46bd      	mov	sp, r7
 800b45e:	bd80      	pop	{r7, pc}

0800b460 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b460:	b480      	push	{r7}
 800b462:	b085      	sub	sp, #20
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b468:	2300      	movs	r3, #0
 800b46a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800b46c:	e005      	b.n	800b47a <USBD_GetLen+0x1a>
  {
    len++;
 800b46e:	7bfb      	ldrb	r3, [r7, #15]
 800b470:	3301      	adds	r3, #1
 800b472:	73fb      	strb	r3, [r7, #15]
    buf++;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	3301      	adds	r3, #1
 800b478:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	781b      	ldrb	r3, [r3, #0]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d1f5      	bne.n	800b46e <USBD_GetLen+0xe>
  }

  return len;
 800b482:	7bfb      	ldrb	r3, [r7, #15]
}
 800b484:	4618      	mov	r0, r3
 800b486:	3714      	adds	r7, #20
 800b488:	46bd      	mov	sp, r7
 800b48a:	bc80      	pop	{r7}
 800b48c:	4770      	bx	lr

0800b48e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800b48e:	b580      	push	{r7, lr}
 800b490:	b084      	sub	sp, #16
 800b492:	af00      	add	r7, sp, #0
 800b494:	60f8      	str	r0, [r7, #12]
 800b496:	60b9      	str	r1, [r7, #8]
 800b498:	4613      	mov	r3, r2
 800b49a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	2202      	movs	r2, #2
 800b4a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b4a4:	88fa      	ldrh	r2, [r7, #6]
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800b4aa:	88fa      	ldrh	r2, [r7, #6]
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b4b0:	88fb      	ldrh	r3, [r7, #6]
 800b4b2:	68ba      	ldr	r2, [r7, #8]
 800b4b4:	2100      	movs	r1, #0
 800b4b6:	68f8      	ldr	r0, [r7, #12]
 800b4b8:	f000 fb77 	bl	800bbaa <USBD_LL_Transmit>

  return USBD_OK;
 800b4bc:	2300      	movs	r3, #0
}
 800b4be:	4618      	mov	r0, r3
 800b4c0:	3710      	adds	r7, #16
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	bd80      	pop	{r7, pc}

0800b4c6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800b4c6:	b580      	push	{r7, lr}
 800b4c8:	b084      	sub	sp, #16
 800b4ca:	af00      	add	r7, sp, #0
 800b4cc:	60f8      	str	r0, [r7, #12]
 800b4ce:	60b9      	str	r1, [r7, #8]
 800b4d0:	4613      	mov	r3, r2
 800b4d2:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b4d4:	88fb      	ldrh	r3, [r7, #6]
 800b4d6:	68ba      	ldr	r2, [r7, #8]
 800b4d8:	2100      	movs	r1, #0
 800b4da:	68f8      	ldr	r0, [r7, #12]
 800b4dc:	f000 fb65 	bl	800bbaa <USBD_LL_Transmit>

  return USBD_OK;
 800b4e0:	2300      	movs	r3, #0
}
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	3710      	adds	r7, #16
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bd80      	pop	{r7, pc}

0800b4ea <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800b4ea:	b580      	push	{r7, lr}
 800b4ec:	b084      	sub	sp, #16
 800b4ee:	af00      	add	r7, sp, #0
 800b4f0:	60f8      	str	r0, [r7, #12]
 800b4f2:	60b9      	str	r1, [r7, #8]
 800b4f4:	4613      	mov	r3, r2
 800b4f6:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b4f8:	88fb      	ldrh	r3, [r7, #6]
 800b4fa:	68ba      	ldr	r2, [r7, #8]
 800b4fc:	2100      	movs	r1, #0
 800b4fe:	68f8      	ldr	r0, [r7, #12]
 800b500:	f000 fb76 	bl	800bbf0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b504:	2300      	movs	r3, #0
}
 800b506:	4618      	mov	r0, r3
 800b508:	3710      	adds	r7, #16
 800b50a:	46bd      	mov	sp, r7
 800b50c:	bd80      	pop	{r7, pc}

0800b50e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b50e:	b580      	push	{r7, lr}
 800b510:	b082      	sub	sp, #8
 800b512:	af00      	add	r7, sp, #0
 800b514:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	2204      	movs	r2, #4
 800b51a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b51e:	2300      	movs	r3, #0
 800b520:	2200      	movs	r2, #0
 800b522:	2100      	movs	r1, #0
 800b524:	6878      	ldr	r0, [r7, #4]
 800b526:	f000 fb40 	bl	800bbaa <USBD_LL_Transmit>

  return USBD_OK;
 800b52a:	2300      	movs	r3, #0
}
 800b52c:	4618      	mov	r0, r3
 800b52e:	3708      	adds	r7, #8
 800b530:	46bd      	mov	sp, r7
 800b532:	bd80      	pop	{r7, pc}

0800b534 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b082      	sub	sp, #8
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2205      	movs	r2, #5
 800b540:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b544:	2300      	movs	r3, #0
 800b546:	2200      	movs	r2, #0
 800b548:	2100      	movs	r1, #0
 800b54a:	6878      	ldr	r0, [r7, #4]
 800b54c:	f000 fb50 	bl	800bbf0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b550:	2300      	movs	r3, #0
}
 800b552:	4618      	mov	r0, r3
 800b554:	3708      	adds	r7, #8
 800b556:	46bd      	mov	sp, r7
 800b558:	bd80      	pop	{r7, pc}
	...

0800b55c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b560:	2200      	movs	r2, #0
 800b562:	490e      	ldr	r1, [pc, #56]	; (800b59c <MX_USB_DEVICE_Init+0x40>)
 800b564:	480e      	ldr	r0, [pc, #56]	; (800b5a0 <MX_USB_DEVICE_Init+0x44>)
 800b566:	f7fe ff7d 	bl	800a464 <USBD_Init>
 800b56a:	4603      	mov	r3, r0
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d001      	beq.n	800b574 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b570:	f7f6 fbb2 	bl	8001cd8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800b574:	490b      	ldr	r1, [pc, #44]	; (800b5a4 <MX_USB_DEVICE_Init+0x48>)
 800b576:	480a      	ldr	r0, [pc, #40]	; (800b5a0 <MX_USB_DEVICE_Init+0x44>)
 800b578:	f7fe ff9f 	bl	800a4ba <USBD_RegisterClass>
 800b57c:	4603      	mov	r3, r0
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d001      	beq.n	800b586 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b582:	f7f6 fba9 	bl	8001cd8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b586:	4806      	ldr	r0, [pc, #24]	; (800b5a0 <MX_USB_DEVICE_Init+0x44>)
 800b588:	f7fe ffb0 	bl	800a4ec <USBD_Start>
 800b58c:	4603      	mov	r3, r0
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d001      	beq.n	800b596 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800b592:	f7f6 fba1 	bl	8001cd8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b596:	bf00      	nop
 800b598:	bd80      	pop	{r7, pc}
 800b59a:	bf00      	nop
 800b59c:	200001a8 	.word	0x200001a8
 800b5a0:	200007e8 	.word	0x200007e8
 800b5a4:	200000a0 	.word	0x200000a0

0800b5a8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5a8:	b480      	push	{r7}
 800b5aa:	b083      	sub	sp, #12
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	4603      	mov	r3, r0
 800b5b0:	6039      	str	r1, [r7, #0]
 800b5b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b5b4:	683b      	ldr	r3, [r7, #0]
 800b5b6:	2212      	movs	r2, #18
 800b5b8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b5ba:	4b03      	ldr	r3, [pc, #12]	; (800b5c8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b5bc:	4618      	mov	r0, r3
 800b5be:	370c      	adds	r7, #12
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	bc80      	pop	{r7}
 800b5c4:	4770      	bx	lr
 800b5c6:	bf00      	nop
 800b5c8:	200001c4 	.word	0x200001c4

0800b5cc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5cc:	b480      	push	{r7}
 800b5ce:	b083      	sub	sp, #12
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	4603      	mov	r3, r0
 800b5d4:	6039      	str	r1, [r7, #0]
 800b5d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b5d8:	683b      	ldr	r3, [r7, #0]
 800b5da:	2204      	movs	r2, #4
 800b5dc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b5de:	4b03      	ldr	r3, [pc, #12]	; (800b5ec <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	370c      	adds	r7, #12
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bc80      	pop	{r7}
 800b5e8:	4770      	bx	lr
 800b5ea:	bf00      	nop
 800b5ec:	200001d8 	.word	0x200001d8

0800b5f0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b082      	sub	sp, #8
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	4603      	mov	r3, r0
 800b5f8:	6039      	str	r1, [r7, #0]
 800b5fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b5fc:	79fb      	ldrb	r3, [r7, #7]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d105      	bne.n	800b60e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b602:	683a      	ldr	r2, [r7, #0]
 800b604:	4907      	ldr	r1, [pc, #28]	; (800b624 <USBD_FS_ProductStrDescriptor+0x34>)
 800b606:	4808      	ldr	r0, [pc, #32]	; (800b628 <USBD_FS_ProductStrDescriptor+0x38>)
 800b608:	f7ff fee8 	bl	800b3dc <USBD_GetString>
 800b60c:	e004      	b.n	800b618 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b60e:	683a      	ldr	r2, [r7, #0]
 800b610:	4904      	ldr	r1, [pc, #16]	; (800b624 <USBD_FS_ProductStrDescriptor+0x34>)
 800b612:	4805      	ldr	r0, [pc, #20]	; (800b628 <USBD_FS_ProductStrDescriptor+0x38>)
 800b614:	f7ff fee2 	bl	800b3dc <USBD_GetString>
  }
  return USBD_StrDesc;
 800b618:	4b02      	ldr	r3, [pc, #8]	; (800b624 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b61a:	4618      	mov	r0, r3
 800b61c:	3708      	adds	r7, #8
 800b61e:	46bd      	mov	sp, r7
 800b620:	bd80      	pop	{r7, pc}
 800b622:	bf00      	nop
 800b624:	20000aac 	.word	0x20000aac
 800b628:	0800f138 	.word	0x0800f138

0800b62c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b082      	sub	sp, #8
 800b630:	af00      	add	r7, sp, #0
 800b632:	4603      	mov	r3, r0
 800b634:	6039      	str	r1, [r7, #0]
 800b636:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b638:	683a      	ldr	r2, [r7, #0]
 800b63a:	4904      	ldr	r1, [pc, #16]	; (800b64c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b63c:	4804      	ldr	r0, [pc, #16]	; (800b650 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b63e:	f7ff fecd 	bl	800b3dc <USBD_GetString>
  return USBD_StrDesc;
 800b642:	4b02      	ldr	r3, [pc, #8]	; (800b64c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b644:	4618      	mov	r0, r3
 800b646:	3708      	adds	r7, #8
 800b648:	46bd      	mov	sp, r7
 800b64a:	bd80      	pop	{r7, pc}
 800b64c:	20000aac 	.word	0x20000aac
 800b650:	0800f14c 	.word	0x0800f14c

0800b654 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b082      	sub	sp, #8
 800b658:	af00      	add	r7, sp, #0
 800b65a:	4603      	mov	r3, r0
 800b65c:	6039      	str	r1, [r7, #0]
 800b65e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b660:	683b      	ldr	r3, [r7, #0]
 800b662:	221a      	movs	r2, #26
 800b664:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b666:	f000 f843 	bl	800b6f0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b66a:	4b02      	ldr	r3, [pc, #8]	; (800b674 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b66c:	4618      	mov	r0, r3
 800b66e:	3708      	adds	r7, #8
 800b670:	46bd      	mov	sp, r7
 800b672:	bd80      	pop	{r7, pc}
 800b674:	200001dc 	.word	0x200001dc

0800b678 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	b082      	sub	sp, #8
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	4603      	mov	r3, r0
 800b680:	6039      	str	r1, [r7, #0]
 800b682:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b684:	79fb      	ldrb	r3, [r7, #7]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d105      	bne.n	800b696 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b68a:	683a      	ldr	r2, [r7, #0]
 800b68c:	4907      	ldr	r1, [pc, #28]	; (800b6ac <USBD_FS_ConfigStrDescriptor+0x34>)
 800b68e:	4808      	ldr	r0, [pc, #32]	; (800b6b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b690:	f7ff fea4 	bl	800b3dc <USBD_GetString>
 800b694:	e004      	b.n	800b6a0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b696:	683a      	ldr	r2, [r7, #0]
 800b698:	4904      	ldr	r1, [pc, #16]	; (800b6ac <USBD_FS_ConfigStrDescriptor+0x34>)
 800b69a:	4805      	ldr	r0, [pc, #20]	; (800b6b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b69c:	f7ff fe9e 	bl	800b3dc <USBD_GetString>
  }
  return USBD_StrDesc;
 800b6a0:	4b02      	ldr	r3, [pc, #8]	; (800b6ac <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	3708      	adds	r7, #8
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	bd80      	pop	{r7, pc}
 800b6aa:	bf00      	nop
 800b6ac:	20000aac 	.word	0x20000aac
 800b6b0:	0800f160 	.word	0x0800f160

0800b6b4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b082      	sub	sp, #8
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	4603      	mov	r3, r0
 800b6bc:	6039      	str	r1, [r7, #0]
 800b6be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b6c0:	79fb      	ldrb	r3, [r7, #7]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d105      	bne.n	800b6d2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b6c6:	683a      	ldr	r2, [r7, #0]
 800b6c8:	4907      	ldr	r1, [pc, #28]	; (800b6e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b6ca:	4808      	ldr	r0, [pc, #32]	; (800b6ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b6cc:	f7ff fe86 	bl	800b3dc <USBD_GetString>
 800b6d0:	e004      	b.n	800b6dc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b6d2:	683a      	ldr	r2, [r7, #0]
 800b6d4:	4904      	ldr	r1, [pc, #16]	; (800b6e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b6d6:	4805      	ldr	r0, [pc, #20]	; (800b6ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b6d8:	f7ff fe80 	bl	800b3dc <USBD_GetString>
  }
  return USBD_StrDesc;
 800b6dc:	4b02      	ldr	r3, [pc, #8]	; (800b6e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b6de:	4618      	mov	r0, r3
 800b6e0:	3708      	adds	r7, #8
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	bd80      	pop	{r7, pc}
 800b6e6:	bf00      	nop
 800b6e8:	20000aac 	.word	0x20000aac
 800b6ec:	0800f16c 	.word	0x0800f16c

0800b6f0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b084      	sub	sp, #16
 800b6f4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b6f6:	4b0f      	ldr	r3, [pc, #60]	; (800b734 <Get_SerialNum+0x44>)
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b6fc:	4b0e      	ldr	r3, [pc, #56]	; (800b738 <Get_SerialNum+0x48>)
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b702:	4b0e      	ldr	r3, [pc, #56]	; (800b73c <Get_SerialNum+0x4c>)
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b708:	68fa      	ldr	r2, [r7, #12]
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	4413      	add	r3, r2
 800b70e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d009      	beq.n	800b72a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b716:	2208      	movs	r2, #8
 800b718:	4909      	ldr	r1, [pc, #36]	; (800b740 <Get_SerialNum+0x50>)
 800b71a:	68f8      	ldr	r0, [r7, #12]
 800b71c:	f000 f814 	bl	800b748 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b720:	2204      	movs	r2, #4
 800b722:	4908      	ldr	r1, [pc, #32]	; (800b744 <Get_SerialNum+0x54>)
 800b724:	68b8      	ldr	r0, [r7, #8]
 800b726:	f000 f80f 	bl	800b748 <IntToUnicode>
  }
}
 800b72a:	bf00      	nop
 800b72c:	3710      	adds	r7, #16
 800b72e:	46bd      	mov	sp, r7
 800b730:	bd80      	pop	{r7, pc}
 800b732:	bf00      	nop
 800b734:	1ffff7e8 	.word	0x1ffff7e8
 800b738:	1ffff7ec 	.word	0x1ffff7ec
 800b73c:	1ffff7f0 	.word	0x1ffff7f0
 800b740:	200001de 	.word	0x200001de
 800b744:	200001ee 	.word	0x200001ee

0800b748 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b748:	b480      	push	{r7}
 800b74a:	b087      	sub	sp, #28
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	60f8      	str	r0, [r7, #12]
 800b750:	60b9      	str	r1, [r7, #8]
 800b752:	4613      	mov	r3, r2
 800b754:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b756:	2300      	movs	r3, #0
 800b758:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b75a:	2300      	movs	r3, #0
 800b75c:	75fb      	strb	r3, [r7, #23]
 800b75e:	e027      	b.n	800b7b0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	0f1b      	lsrs	r3, r3, #28
 800b764:	2b09      	cmp	r3, #9
 800b766:	d80b      	bhi.n	800b780 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	0f1b      	lsrs	r3, r3, #28
 800b76c:	b2da      	uxtb	r2, r3
 800b76e:	7dfb      	ldrb	r3, [r7, #23]
 800b770:	005b      	lsls	r3, r3, #1
 800b772:	4619      	mov	r1, r3
 800b774:	68bb      	ldr	r3, [r7, #8]
 800b776:	440b      	add	r3, r1
 800b778:	3230      	adds	r2, #48	; 0x30
 800b77a:	b2d2      	uxtb	r2, r2
 800b77c:	701a      	strb	r2, [r3, #0]
 800b77e:	e00a      	b.n	800b796 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	0f1b      	lsrs	r3, r3, #28
 800b784:	b2da      	uxtb	r2, r3
 800b786:	7dfb      	ldrb	r3, [r7, #23]
 800b788:	005b      	lsls	r3, r3, #1
 800b78a:	4619      	mov	r1, r3
 800b78c:	68bb      	ldr	r3, [r7, #8]
 800b78e:	440b      	add	r3, r1
 800b790:	3237      	adds	r2, #55	; 0x37
 800b792:	b2d2      	uxtb	r2, r2
 800b794:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	011b      	lsls	r3, r3, #4
 800b79a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b79c:	7dfb      	ldrb	r3, [r7, #23]
 800b79e:	005b      	lsls	r3, r3, #1
 800b7a0:	3301      	adds	r3, #1
 800b7a2:	68ba      	ldr	r2, [r7, #8]
 800b7a4:	4413      	add	r3, r2
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b7aa:	7dfb      	ldrb	r3, [r7, #23]
 800b7ac:	3301      	adds	r3, #1
 800b7ae:	75fb      	strb	r3, [r7, #23]
 800b7b0:	7dfa      	ldrb	r2, [r7, #23]
 800b7b2:	79fb      	ldrb	r3, [r7, #7]
 800b7b4:	429a      	cmp	r2, r3
 800b7b6:	d3d3      	bcc.n	800b760 <IntToUnicode+0x18>
  }
}
 800b7b8:	bf00      	nop
 800b7ba:	bf00      	nop
 800b7bc:	371c      	adds	r7, #28
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	bc80      	pop	{r7}
 800b7c2:	4770      	bx	lr

0800b7c4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b084      	sub	sp, #16
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	4a0d      	ldr	r2, [pc, #52]	; (800b808 <HAL_PCD_MspInit+0x44>)
 800b7d2:	4293      	cmp	r3, r2
 800b7d4:	d113      	bne.n	800b7fe <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b7d6:	4b0d      	ldr	r3, [pc, #52]	; (800b80c <HAL_PCD_MspInit+0x48>)
 800b7d8:	69db      	ldr	r3, [r3, #28]
 800b7da:	4a0c      	ldr	r2, [pc, #48]	; (800b80c <HAL_PCD_MspInit+0x48>)
 800b7dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b7e0:	61d3      	str	r3, [r2, #28]
 800b7e2:	4b0a      	ldr	r3, [pc, #40]	; (800b80c <HAL_PCD_MspInit+0x48>)
 800b7e4:	69db      	ldr	r3, [r3, #28]
 800b7e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b7ea:	60fb      	str	r3, [r7, #12]
 800b7ec:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	2100      	movs	r1, #0
 800b7f2:	2014      	movs	r0, #20
 800b7f4:	f7f7 fb83 	bl	8002efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800b7f8:	2014      	movs	r0, #20
 800b7fa:	f7f7 fb9c 	bl	8002f36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b7fe:	bf00      	nop
 800b800:	3710      	adds	r7, #16
 800b802:	46bd      	mov	sp, r7
 800b804:	bd80      	pop	{r7, pc}
 800b806:	bf00      	nop
 800b808:	40005c00 	.word	0x40005c00
 800b80c:	40021000 	.word	0x40021000

0800b810 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b082      	sub	sp, #8
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800b824:	4619      	mov	r1, r3
 800b826:	4610      	mov	r0, r2
 800b828:	f7fe fea8 	bl	800a57c <USBD_LL_SetupStage>
}
 800b82c:	bf00      	nop
 800b82e:	3708      	adds	r7, #8
 800b830:	46bd      	mov	sp, r7
 800b832:	bd80      	pop	{r7, pc}

0800b834 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b834:	b580      	push	{r7, lr}
 800b836:	b082      	sub	sp, #8
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
 800b83c:	460b      	mov	r3, r1
 800b83e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800b846:	78fa      	ldrb	r2, [r7, #3]
 800b848:	6879      	ldr	r1, [r7, #4]
 800b84a:	4613      	mov	r3, r2
 800b84c:	009b      	lsls	r3, r3, #2
 800b84e:	4413      	add	r3, r2
 800b850:	00db      	lsls	r3, r3, #3
 800b852:	440b      	add	r3, r1
 800b854:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800b858:	681a      	ldr	r2, [r3, #0]
 800b85a:	78fb      	ldrb	r3, [r7, #3]
 800b85c:	4619      	mov	r1, r3
 800b85e:	f7fe feda 	bl	800a616 <USBD_LL_DataOutStage>
}
 800b862:	bf00      	nop
 800b864:	3708      	adds	r7, #8
 800b866:	46bd      	mov	sp, r7
 800b868:	bd80      	pop	{r7, pc}

0800b86a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b86a:	b580      	push	{r7, lr}
 800b86c:	b082      	sub	sp, #8
 800b86e:	af00      	add	r7, sp, #0
 800b870:	6078      	str	r0, [r7, #4]
 800b872:	460b      	mov	r3, r1
 800b874:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800b87c:	78fa      	ldrb	r2, [r7, #3]
 800b87e:	6879      	ldr	r1, [r7, #4]
 800b880:	4613      	mov	r3, r2
 800b882:	009b      	lsls	r3, r3, #2
 800b884:	4413      	add	r3, r2
 800b886:	00db      	lsls	r3, r3, #3
 800b888:	440b      	add	r3, r1
 800b88a:	333c      	adds	r3, #60	; 0x3c
 800b88c:	681a      	ldr	r2, [r3, #0]
 800b88e:	78fb      	ldrb	r3, [r7, #3]
 800b890:	4619      	mov	r1, r3
 800b892:	f7fe ff31 	bl	800a6f8 <USBD_LL_DataInStage>
}
 800b896:	bf00      	nop
 800b898:	3708      	adds	r7, #8
 800b89a:	46bd      	mov	sp, r7
 800b89c:	bd80      	pop	{r7, pc}

0800b89e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b89e:	b580      	push	{r7, lr}
 800b8a0:	b082      	sub	sp, #8
 800b8a2:	af00      	add	r7, sp, #0
 800b8a4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	f7ff f841 	bl	800a934 <USBD_LL_SOF>
}
 800b8b2:	bf00      	nop
 800b8b4:	3708      	adds	r7, #8
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	bd80      	pop	{r7, pc}

0800b8ba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8ba:	b580      	push	{r7, lr}
 800b8bc:	b084      	sub	sp, #16
 800b8be:	af00      	add	r7, sp, #0
 800b8c0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b8c2:	2301      	movs	r3, #1
 800b8c4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	689b      	ldr	r3, [r3, #8]
 800b8ca:	2b02      	cmp	r3, #2
 800b8cc:	d001      	beq.n	800b8d2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b8ce:	f7f6 fa03 	bl	8001cd8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b8d8:	7bfa      	ldrb	r2, [r7, #15]
 800b8da:	4611      	mov	r1, r2
 800b8dc:	4618      	mov	r0, r3
 800b8de:	f7fe fff1 	bl	800a8c4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	f7fe ffaa 	bl	800a842 <USBD_LL_Reset>
}
 800b8ee:	bf00      	nop
 800b8f0:	3710      	adds	r7, #16
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd80      	pop	{r7, pc}
	...

0800b8f8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b082      	sub	sp, #8
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b906:	4618      	mov	r0, r3
 800b908:	f7fe ffeb 	bl	800a8e2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	699b      	ldr	r3, [r3, #24]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d005      	beq.n	800b920 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b914:	4b04      	ldr	r3, [pc, #16]	; (800b928 <HAL_PCD_SuspendCallback+0x30>)
 800b916:	691b      	ldr	r3, [r3, #16]
 800b918:	4a03      	ldr	r2, [pc, #12]	; (800b928 <HAL_PCD_SuspendCallback+0x30>)
 800b91a:	f043 0306 	orr.w	r3, r3, #6
 800b91e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b920:	bf00      	nop
 800b922:	3708      	adds	r7, #8
 800b924:	46bd      	mov	sp, r7
 800b926:	bd80      	pop	{r7, pc}
 800b928:	e000ed00 	.word	0xe000ed00

0800b92c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b082      	sub	sp, #8
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b93a:	4618      	mov	r0, r3
 800b93c:	f7fe ffe5 	bl	800a90a <USBD_LL_Resume>
}
 800b940:	bf00      	nop
 800b942:	3708      	adds	r7, #8
 800b944:	46bd      	mov	sp, r7
 800b946:	bd80      	pop	{r7, pc}

0800b948 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b082      	sub	sp, #8
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800b950:	4a1f      	ldr	r2, [pc, #124]	; (800b9d0 <USBD_LL_Init+0x88>)
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	4a1d      	ldr	r2, [pc, #116]	; (800b9d0 <USBD_LL_Init+0x88>)
 800b95c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800b960:	4b1b      	ldr	r3, [pc, #108]	; (800b9d0 <USBD_LL_Init+0x88>)
 800b962:	4a1c      	ldr	r2, [pc, #112]	; (800b9d4 <USBD_LL_Init+0x8c>)
 800b964:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b966:	4b1a      	ldr	r3, [pc, #104]	; (800b9d0 <USBD_LL_Init+0x88>)
 800b968:	2208      	movs	r2, #8
 800b96a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b96c:	4b18      	ldr	r3, [pc, #96]	; (800b9d0 <USBD_LL_Init+0x88>)
 800b96e:	2202      	movs	r2, #2
 800b970:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b972:	4b17      	ldr	r3, [pc, #92]	; (800b9d0 <USBD_LL_Init+0x88>)
 800b974:	2200      	movs	r2, #0
 800b976:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b978:	4b15      	ldr	r3, [pc, #84]	; (800b9d0 <USBD_LL_Init+0x88>)
 800b97a:	2200      	movs	r2, #0
 800b97c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b97e:	4b14      	ldr	r3, [pc, #80]	; (800b9d0 <USBD_LL_Init+0x88>)
 800b980:	2200      	movs	r2, #0
 800b982:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b984:	4812      	ldr	r0, [pc, #72]	; (800b9d0 <USBD_LL_Init+0x88>)
 800b986:	f7f8 fd85 	bl	8004494 <HAL_PCD_Init>
 800b98a:	4603      	mov	r3, r0
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d001      	beq.n	800b994 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800b990:	f7f6 f9a2 	bl	8001cd8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b99a:	2318      	movs	r3, #24
 800b99c:	2200      	movs	r2, #0
 800b99e:	2100      	movs	r1, #0
 800b9a0:	f7fa f9e4 	bl	8005d6c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b9aa:	2358      	movs	r3, #88	; 0x58
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	2180      	movs	r1, #128	; 0x80
 800b9b0:	f7fa f9dc 	bl	8005d6c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b9ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b9be:	2200      	movs	r2, #0
 800b9c0:	2181      	movs	r1, #129	; 0x81
 800b9c2:	f7fa f9d3 	bl	8005d6c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 800b9c6:	2300      	movs	r3, #0
}
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	3708      	adds	r7, #8
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	bd80      	pop	{r7, pc}
 800b9d0:	20000cac 	.word	0x20000cac
 800b9d4:	40005c00 	.word	0x40005c00

0800b9d8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b084      	sub	sp, #16
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	f7f8 fe5b 	bl	80046aa <HAL_PCD_Start>
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b9f8:	7bfb      	ldrb	r3, [r7, #15]
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	f000 f93c 	bl	800bc78 <USBD_Get_USB_Status>
 800ba00:	4603      	mov	r3, r0
 800ba02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba04:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba06:	4618      	mov	r0, r3
 800ba08:	3710      	adds	r7, #16
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	bd80      	pop	{r7, pc}

0800ba0e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ba0e:	b580      	push	{r7, lr}
 800ba10:	b084      	sub	sp, #16
 800ba12:	af00      	add	r7, sp, #0
 800ba14:	6078      	str	r0, [r7, #4]
 800ba16:	4608      	mov	r0, r1
 800ba18:	4611      	mov	r1, r2
 800ba1a:	461a      	mov	r2, r3
 800ba1c:	4603      	mov	r3, r0
 800ba1e:	70fb      	strb	r3, [r7, #3]
 800ba20:	460b      	mov	r3, r1
 800ba22:	70bb      	strb	r3, [r7, #2]
 800ba24:	4613      	mov	r3, r2
 800ba26:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba28:	2300      	movs	r3, #0
 800ba2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ba36:	78bb      	ldrb	r3, [r7, #2]
 800ba38:	883a      	ldrh	r2, [r7, #0]
 800ba3a:	78f9      	ldrb	r1, [r7, #3]
 800ba3c:	f7f8 ffd5 	bl	80049ea <HAL_PCD_EP_Open>
 800ba40:	4603      	mov	r3, r0
 800ba42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba44:	7bfb      	ldrb	r3, [r7, #15]
 800ba46:	4618      	mov	r0, r3
 800ba48:	f000 f916 	bl	800bc78 <USBD_Get_USB_Status>
 800ba4c:	4603      	mov	r3, r0
 800ba4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba50:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba52:	4618      	mov	r0, r3
 800ba54:	3710      	adds	r7, #16
 800ba56:	46bd      	mov	sp, r7
 800ba58:	bd80      	pop	{r7, pc}

0800ba5a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba5a:	b580      	push	{r7, lr}
 800ba5c:	b084      	sub	sp, #16
 800ba5e:	af00      	add	r7, sp, #0
 800ba60:	6078      	str	r0, [r7, #4]
 800ba62:	460b      	mov	r3, r1
 800ba64:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba66:	2300      	movs	r3, #0
 800ba68:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ba74:	78fa      	ldrb	r2, [r7, #3]
 800ba76:	4611      	mov	r1, r2
 800ba78:	4618      	mov	r0, r3
 800ba7a:	f7f9 f81c 	bl	8004ab6 <HAL_PCD_EP_Close>
 800ba7e:	4603      	mov	r3, r0
 800ba80:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba82:	7bfb      	ldrb	r3, [r7, #15]
 800ba84:	4618      	mov	r0, r3
 800ba86:	f000 f8f7 	bl	800bc78 <USBD_Get_USB_Status>
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba8e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba90:	4618      	mov	r0, r3
 800ba92:	3710      	adds	r7, #16
 800ba94:	46bd      	mov	sp, r7
 800ba96:	bd80      	pop	{r7, pc}

0800ba98 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b084      	sub	sp, #16
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
 800baa0:	460b      	mov	r3, r1
 800baa2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800baa4:	2300      	movs	r3, #0
 800baa6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800baa8:	2300      	movs	r3, #0
 800baaa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bab2:	78fa      	ldrb	r2, [r7, #3]
 800bab4:	4611      	mov	r1, r2
 800bab6:	4618      	mov	r0, r3
 800bab8:	f7f9 f8c5 	bl	8004c46 <HAL_PCD_EP_SetStall>
 800babc:	4603      	mov	r3, r0
 800babe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bac0:	7bfb      	ldrb	r3, [r7, #15]
 800bac2:	4618      	mov	r0, r3
 800bac4:	f000 f8d8 	bl	800bc78 <USBD_Get_USB_Status>
 800bac8:	4603      	mov	r3, r0
 800baca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bacc:	7bbb      	ldrb	r3, [r7, #14]
}
 800bace:	4618      	mov	r0, r3
 800bad0:	3710      	adds	r7, #16
 800bad2:	46bd      	mov	sp, r7
 800bad4:	bd80      	pop	{r7, pc}

0800bad6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bad6:	b580      	push	{r7, lr}
 800bad8:	b084      	sub	sp, #16
 800bada:	af00      	add	r7, sp, #0
 800badc:	6078      	str	r0, [r7, #4]
 800bade:	460b      	mov	r3, r1
 800bae0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bae2:	2300      	movs	r3, #0
 800bae4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bae6:	2300      	movs	r3, #0
 800bae8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800baf0:	78fa      	ldrb	r2, [r7, #3]
 800baf2:	4611      	mov	r1, r2
 800baf4:	4618      	mov	r0, r3
 800baf6:	f7f9 f906 	bl	8004d06 <HAL_PCD_EP_ClrStall>
 800bafa:	4603      	mov	r3, r0
 800bafc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bafe:	7bfb      	ldrb	r3, [r7, #15]
 800bb00:	4618      	mov	r0, r3
 800bb02:	f000 f8b9 	bl	800bc78 <USBD_Get_USB_Status>
 800bb06:	4603      	mov	r3, r0
 800bb08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb0a:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	3710      	adds	r7, #16
 800bb10:	46bd      	mov	sp, r7
 800bb12:	bd80      	pop	{r7, pc}

0800bb14 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bb14:	b480      	push	{r7}
 800bb16:	b085      	sub	sp, #20
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
 800bb1c:	460b      	mov	r3, r1
 800bb1e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bb26:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bb28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	da0c      	bge.n	800bb4a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bb30:	78fb      	ldrb	r3, [r7, #3]
 800bb32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb36:	68f9      	ldr	r1, [r7, #12]
 800bb38:	1c5a      	adds	r2, r3, #1
 800bb3a:	4613      	mov	r3, r2
 800bb3c:	009b      	lsls	r3, r3, #2
 800bb3e:	4413      	add	r3, r2
 800bb40:	00db      	lsls	r3, r3, #3
 800bb42:	440b      	add	r3, r1
 800bb44:	3302      	adds	r3, #2
 800bb46:	781b      	ldrb	r3, [r3, #0]
 800bb48:	e00b      	b.n	800bb62 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bb4a:	78fb      	ldrb	r3, [r7, #3]
 800bb4c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bb50:	68f9      	ldr	r1, [r7, #12]
 800bb52:	4613      	mov	r3, r2
 800bb54:	009b      	lsls	r3, r3, #2
 800bb56:	4413      	add	r3, r2
 800bb58:	00db      	lsls	r3, r3, #3
 800bb5a:	440b      	add	r3, r1
 800bb5c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800bb60:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bb62:	4618      	mov	r0, r3
 800bb64:	3714      	adds	r7, #20
 800bb66:	46bd      	mov	sp, r7
 800bb68:	bc80      	pop	{r7}
 800bb6a:	4770      	bx	lr

0800bb6c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b084      	sub	sp, #16
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
 800bb74:	460b      	mov	r3, r1
 800bb76:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb78:	2300      	movs	r3, #0
 800bb7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bb86:	78fa      	ldrb	r2, [r7, #3]
 800bb88:	4611      	mov	r1, r2
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	f7f8 ff08 	bl	80049a0 <HAL_PCD_SetAddress>
 800bb90:	4603      	mov	r3, r0
 800bb92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb94:	7bfb      	ldrb	r3, [r7, #15]
 800bb96:	4618      	mov	r0, r3
 800bb98:	f000 f86e 	bl	800bc78 <USBD_Get_USB_Status>
 800bb9c:	4603      	mov	r3, r0
 800bb9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bba0:	7bbb      	ldrb	r3, [r7, #14]
}
 800bba2:	4618      	mov	r0, r3
 800bba4:	3710      	adds	r7, #16
 800bba6:	46bd      	mov	sp, r7
 800bba8:	bd80      	pop	{r7, pc}

0800bbaa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800bbaa:	b580      	push	{r7, lr}
 800bbac:	b086      	sub	sp, #24
 800bbae:	af00      	add	r7, sp, #0
 800bbb0:	60f8      	str	r0, [r7, #12]
 800bbb2:	607a      	str	r2, [r7, #4]
 800bbb4:	461a      	mov	r2, r3
 800bbb6:	460b      	mov	r3, r1
 800bbb8:	72fb      	strb	r3, [r7, #11]
 800bbba:	4613      	mov	r3, r2
 800bbbc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bbcc:	893b      	ldrh	r3, [r7, #8]
 800bbce:	7af9      	ldrb	r1, [r7, #11]
 800bbd0:	687a      	ldr	r2, [r7, #4]
 800bbd2:	f7f8 fff5 	bl	8004bc0 <HAL_PCD_EP_Transmit>
 800bbd6:	4603      	mov	r3, r0
 800bbd8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bbda:	7dfb      	ldrb	r3, [r7, #23]
 800bbdc:	4618      	mov	r0, r3
 800bbde:	f000 f84b 	bl	800bc78 <USBD_Get_USB_Status>
 800bbe2:	4603      	mov	r3, r0
 800bbe4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bbe6:	7dbb      	ldrb	r3, [r7, #22]
}
 800bbe8:	4618      	mov	r0, r3
 800bbea:	3718      	adds	r7, #24
 800bbec:	46bd      	mov	sp, r7
 800bbee:	bd80      	pop	{r7, pc}

0800bbf0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b086      	sub	sp, #24
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	60f8      	str	r0, [r7, #12]
 800bbf8:	607a      	str	r2, [r7, #4]
 800bbfa:	461a      	mov	r2, r3
 800bbfc:	460b      	mov	r3, r1
 800bbfe:	72fb      	strb	r3, [r7, #11]
 800bc00:	4613      	mov	r3, r2
 800bc02:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc04:	2300      	movs	r3, #0
 800bc06:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc08:	2300      	movs	r3, #0
 800bc0a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bc12:	893b      	ldrh	r3, [r7, #8]
 800bc14:	7af9      	ldrb	r1, [r7, #11]
 800bc16:	687a      	ldr	r2, [r7, #4]
 800bc18:	f7f8 ff95 	bl	8004b46 <HAL_PCD_EP_Receive>
 800bc1c:	4603      	mov	r3, r0
 800bc1e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc20:	7dfb      	ldrb	r3, [r7, #23]
 800bc22:	4618      	mov	r0, r3
 800bc24:	f000 f828 	bl	800bc78 <USBD_Get_USB_Status>
 800bc28:	4603      	mov	r3, r0
 800bc2a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bc2c:	7dbb      	ldrb	r3, [r7, #22]
}
 800bc2e:	4618      	mov	r0, r3
 800bc30:	3718      	adds	r7, #24
 800bc32:	46bd      	mov	sp, r7
 800bc34:	bd80      	pop	{r7, pc}
	...

0800bc38 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bc38:	b480      	push	{r7}
 800bc3a:	b083      	sub	sp, #12
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bc40:	4b02      	ldr	r3, [pc, #8]	; (800bc4c <USBD_static_malloc+0x14>)
}
 800bc42:	4618      	mov	r0, r3
 800bc44:	370c      	adds	r7, #12
 800bc46:	46bd      	mov	sp, r7
 800bc48:	bc80      	pop	{r7}
 800bc4a:	4770      	bx	lr
 800bc4c:	20000424 	.word	0x20000424

0800bc50 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bc50:	b480      	push	{r7}
 800bc52:	b083      	sub	sp, #12
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]

}
 800bc58:	bf00      	nop
 800bc5a:	370c      	adds	r7, #12
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	bc80      	pop	{r7}
 800bc60:	4770      	bx	lr

0800bc62 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc62:	b480      	push	{r7}
 800bc64:	b083      	sub	sp, #12
 800bc66:	af00      	add	r7, sp, #0
 800bc68:	6078      	str	r0, [r7, #4]
 800bc6a:	460b      	mov	r3, r1
 800bc6c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800bc6e:	bf00      	nop
 800bc70:	370c      	adds	r7, #12
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bc80      	pop	{r7}
 800bc76:	4770      	bx	lr

0800bc78 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bc78:	b480      	push	{r7}
 800bc7a:	b085      	sub	sp, #20
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	4603      	mov	r3, r0
 800bc80:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc82:	2300      	movs	r3, #0
 800bc84:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bc86:	79fb      	ldrb	r3, [r7, #7]
 800bc88:	2b03      	cmp	r3, #3
 800bc8a:	d817      	bhi.n	800bcbc <USBD_Get_USB_Status+0x44>
 800bc8c:	a201      	add	r2, pc, #4	; (adr r2, 800bc94 <USBD_Get_USB_Status+0x1c>)
 800bc8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc92:	bf00      	nop
 800bc94:	0800bca5 	.word	0x0800bca5
 800bc98:	0800bcab 	.word	0x0800bcab
 800bc9c:	0800bcb1 	.word	0x0800bcb1
 800bca0:	0800bcb7 	.word	0x0800bcb7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bca4:	2300      	movs	r3, #0
 800bca6:	73fb      	strb	r3, [r7, #15]
    break;
 800bca8:	e00b      	b.n	800bcc2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bcaa:	2302      	movs	r3, #2
 800bcac:	73fb      	strb	r3, [r7, #15]
    break;
 800bcae:	e008      	b.n	800bcc2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bcb0:	2301      	movs	r3, #1
 800bcb2:	73fb      	strb	r3, [r7, #15]
    break;
 800bcb4:	e005      	b.n	800bcc2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bcb6:	2302      	movs	r3, #2
 800bcb8:	73fb      	strb	r3, [r7, #15]
    break;
 800bcba:	e002      	b.n	800bcc2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bcbc:	2302      	movs	r3, #2
 800bcbe:	73fb      	strb	r3, [r7, #15]
    break;
 800bcc0:	bf00      	nop
  }
  return usb_status;
 800bcc2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	3714      	adds	r7, #20
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	bc80      	pop	{r7}
 800bccc:	4770      	bx	lr
 800bcce:	bf00      	nop

0800bcd0 <__errno>:
 800bcd0:	4b01      	ldr	r3, [pc, #4]	; (800bcd8 <__errno+0x8>)
 800bcd2:	6818      	ldr	r0, [r3, #0]
 800bcd4:	4770      	bx	lr
 800bcd6:	bf00      	nop
 800bcd8:	200001f8 	.word	0x200001f8

0800bcdc <__libc_init_array>:
 800bcdc:	b570      	push	{r4, r5, r6, lr}
 800bcde:	2600      	movs	r6, #0
 800bce0:	4d0c      	ldr	r5, [pc, #48]	; (800bd14 <__libc_init_array+0x38>)
 800bce2:	4c0d      	ldr	r4, [pc, #52]	; (800bd18 <__libc_init_array+0x3c>)
 800bce4:	1b64      	subs	r4, r4, r5
 800bce6:	10a4      	asrs	r4, r4, #2
 800bce8:	42a6      	cmp	r6, r4
 800bcea:	d109      	bne.n	800bd00 <__libc_init_array+0x24>
 800bcec:	f003 f9f6 	bl	800f0dc <_init>
 800bcf0:	2600      	movs	r6, #0
 800bcf2:	4d0a      	ldr	r5, [pc, #40]	; (800bd1c <__libc_init_array+0x40>)
 800bcf4:	4c0a      	ldr	r4, [pc, #40]	; (800bd20 <__libc_init_array+0x44>)
 800bcf6:	1b64      	subs	r4, r4, r5
 800bcf8:	10a4      	asrs	r4, r4, #2
 800bcfa:	42a6      	cmp	r6, r4
 800bcfc:	d105      	bne.n	800bd0a <__libc_init_array+0x2e>
 800bcfe:	bd70      	pop	{r4, r5, r6, pc}
 800bd00:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd04:	4798      	blx	r3
 800bd06:	3601      	adds	r6, #1
 800bd08:	e7ee      	b.n	800bce8 <__libc_init_array+0xc>
 800bd0a:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd0e:	4798      	blx	r3
 800bd10:	3601      	adds	r6, #1
 800bd12:	e7f2      	b.n	800bcfa <__libc_init_array+0x1e>
 800bd14:	0800f5e8 	.word	0x0800f5e8
 800bd18:	0800f5e8 	.word	0x0800f5e8
 800bd1c:	0800f5e8 	.word	0x0800f5e8
 800bd20:	0800f5ec 	.word	0x0800f5ec

0800bd24 <memset>:
 800bd24:	4603      	mov	r3, r0
 800bd26:	4402      	add	r2, r0
 800bd28:	4293      	cmp	r3, r2
 800bd2a:	d100      	bne.n	800bd2e <memset+0xa>
 800bd2c:	4770      	bx	lr
 800bd2e:	f803 1b01 	strb.w	r1, [r3], #1
 800bd32:	e7f9      	b.n	800bd28 <memset+0x4>

0800bd34 <__cvt>:
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd3a:	461f      	mov	r7, r3
 800bd3c:	bfbb      	ittet	lt
 800bd3e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800bd42:	461f      	movlt	r7, r3
 800bd44:	2300      	movge	r3, #0
 800bd46:	232d      	movlt	r3, #45	; 0x2d
 800bd48:	b088      	sub	sp, #32
 800bd4a:	4614      	mov	r4, r2
 800bd4c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bd4e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800bd50:	7013      	strb	r3, [r2, #0]
 800bd52:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bd54:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800bd58:	f023 0820 	bic.w	r8, r3, #32
 800bd5c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bd60:	d005      	beq.n	800bd6e <__cvt+0x3a>
 800bd62:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800bd66:	d100      	bne.n	800bd6a <__cvt+0x36>
 800bd68:	3501      	adds	r5, #1
 800bd6a:	2302      	movs	r3, #2
 800bd6c:	e000      	b.n	800bd70 <__cvt+0x3c>
 800bd6e:	2303      	movs	r3, #3
 800bd70:	aa07      	add	r2, sp, #28
 800bd72:	9204      	str	r2, [sp, #16]
 800bd74:	aa06      	add	r2, sp, #24
 800bd76:	e9cd a202 	strd	sl, r2, [sp, #8]
 800bd7a:	e9cd 3500 	strd	r3, r5, [sp]
 800bd7e:	4622      	mov	r2, r4
 800bd80:	463b      	mov	r3, r7
 800bd82:	f000 fce5 	bl	800c750 <_dtoa_r>
 800bd86:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800bd8a:	4606      	mov	r6, r0
 800bd8c:	d102      	bne.n	800bd94 <__cvt+0x60>
 800bd8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bd90:	07db      	lsls	r3, r3, #31
 800bd92:	d522      	bpl.n	800bdda <__cvt+0xa6>
 800bd94:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bd98:	eb06 0905 	add.w	r9, r6, r5
 800bd9c:	d110      	bne.n	800bdc0 <__cvt+0x8c>
 800bd9e:	7833      	ldrb	r3, [r6, #0]
 800bda0:	2b30      	cmp	r3, #48	; 0x30
 800bda2:	d10a      	bne.n	800bdba <__cvt+0x86>
 800bda4:	2200      	movs	r2, #0
 800bda6:	2300      	movs	r3, #0
 800bda8:	4620      	mov	r0, r4
 800bdaa:	4639      	mov	r1, r7
 800bdac:	f7f4 fdfc 	bl	80009a8 <__aeabi_dcmpeq>
 800bdb0:	b918      	cbnz	r0, 800bdba <__cvt+0x86>
 800bdb2:	f1c5 0501 	rsb	r5, r5, #1
 800bdb6:	f8ca 5000 	str.w	r5, [sl]
 800bdba:	f8da 3000 	ldr.w	r3, [sl]
 800bdbe:	4499      	add	r9, r3
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	4620      	mov	r0, r4
 800bdc6:	4639      	mov	r1, r7
 800bdc8:	f7f4 fdee 	bl	80009a8 <__aeabi_dcmpeq>
 800bdcc:	b108      	cbz	r0, 800bdd2 <__cvt+0x9e>
 800bdce:	f8cd 901c 	str.w	r9, [sp, #28]
 800bdd2:	2230      	movs	r2, #48	; 0x30
 800bdd4:	9b07      	ldr	r3, [sp, #28]
 800bdd6:	454b      	cmp	r3, r9
 800bdd8:	d307      	bcc.n	800bdea <__cvt+0xb6>
 800bdda:	4630      	mov	r0, r6
 800bddc:	9b07      	ldr	r3, [sp, #28]
 800bdde:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800bde0:	1b9b      	subs	r3, r3, r6
 800bde2:	6013      	str	r3, [r2, #0]
 800bde4:	b008      	add	sp, #32
 800bde6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdea:	1c59      	adds	r1, r3, #1
 800bdec:	9107      	str	r1, [sp, #28]
 800bdee:	701a      	strb	r2, [r3, #0]
 800bdf0:	e7f0      	b.n	800bdd4 <__cvt+0xa0>

0800bdf2 <__exponent>:
 800bdf2:	4603      	mov	r3, r0
 800bdf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bdf6:	2900      	cmp	r1, #0
 800bdf8:	f803 2b02 	strb.w	r2, [r3], #2
 800bdfc:	bfb6      	itet	lt
 800bdfe:	222d      	movlt	r2, #45	; 0x2d
 800be00:	222b      	movge	r2, #43	; 0x2b
 800be02:	4249      	neglt	r1, r1
 800be04:	2909      	cmp	r1, #9
 800be06:	7042      	strb	r2, [r0, #1]
 800be08:	dd2b      	ble.n	800be62 <__exponent+0x70>
 800be0a:	f10d 0407 	add.w	r4, sp, #7
 800be0e:	46a4      	mov	ip, r4
 800be10:	270a      	movs	r7, #10
 800be12:	fb91 f6f7 	sdiv	r6, r1, r7
 800be16:	460a      	mov	r2, r1
 800be18:	46a6      	mov	lr, r4
 800be1a:	fb07 1516 	mls	r5, r7, r6, r1
 800be1e:	2a63      	cmp	r2, #99	; 0x63
 800be20:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800be24:	4631      	mov	r1, r6
 800be26:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800be2a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800be2e:	dcf0      	bgt.n	800be12 <__exponent+0x20>
 800be30:	3130      	adds	r1, #48	; 0x30
 800be32:	f1ae 0502 	sub.w	r5, lr, #2
 800be36:	f804 1c01 	strb.w	r1, [r4, #-1]
 800be3a:	4629      	mov	r1, r5
 800be3c:	1c44      	adds	r4, r0, #1
 800be3e:	4561      	cmp	r1, ip
 800be40:	d30a      	bcc.n	800be58 <__exponent+0x66>
 800be42:	f10d 0209 	add.w	r2, sp, #9
 800be46:	eba2 020e 	sub.w	r2, r2, lr
 800be4a:	4565      	cmp	r5, ip
 800be4c:	bf88      	it	hi
 800be4e:	2200      	movhi	r2, #0
 800be50:	4413      	add	r3, r2
 800be52:	1a18      	subs	r0, r3, r0
 800be54:	b003      	add	sp, #12
 800be56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be58:	f811 2b01 	ldrb.w	r2, [r1], #1
 800be5c:	f804 2f01 	strb.w	r2, [r4, #1]!
 800be60:	e7ed      	b.n	800be3e <__exponent+0x4c>
 800be62:	2330      	movs	r3, #48	; 0x30
 800be64:	3130      	adds	r1, #48	; 0x30
 800be66:	7083      	strb	r3, [r0, #2]
 800be68:	70c1      	strb	r1, [r0, #3]
 800be6a:	1d03      	adds	r3, r0, #4
 800be6c:	e7f1      	b.n	800be52 <__exponent+0x60>
	...

0800be70 <_printf_float>:
 800be70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be74:	b091      	sub	sp, #68	; 0x44
 800be76:	460c      	mov	r4, r1
 800be78:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800be7c:	4616      	mov	r6, r2
 800be7e:	461f      	mov	r7, r3
 800be80:	4605      	mov	r5, r0
 800be82:	f001 fa53 	bl	800d32c <_localeconv_r>
 800be86:	6803      	ldr	r3, [r0, #0]
 800be88:	4618      	mov	r0, r3
 800be8a:	9309      	str	r3, [sp, #36]	; 0x24
 800be8c:	f7f4 f960 	bl	8000150 <strlen>
 800be90:	2300      	movs	r3, #0
 800be92:	930e      	str	r3, [sp, #56]	; 0x38
 800be94:	f8d8 3000 	ldr.w	r3, [r8]
 800be98:	900a      	str	r0, [sp, #40]	; 0x28
 800be9a:	3307      	adds	r3, #7
 800be9c:	f023 0307 	bic.w	r3, r3, #7
 800bea0:	f103 0208 	add.w	r2, r3, #8
 800bea4:	f894 9018 	ldrb.w	r9, [r4, #24]
 800bea8:	f8d4 b000 	ldr.w	fp, [r4]
 800beac:	f8c8 2000 	str.w	r2, [r8]
 800beb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beb4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800beb8:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800bebc:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800bec0:	930b      	str	r3, [sp, #44]	; 0x2c
 800bec2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bec6:	4640      	mov	r0, r8
 800bec8:	4b9c      	ldr	r3, [pc, #624]	; (800c13c <_printf_float+0x2cc>)
 800beca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800becc:	f7f4 fd9e 	bl	8000a0c <__aeabi_dcmpun>
 800bed0:	bb70      	cbnz	r0, 800bf30 <_printf_float+0xc0>
 800bed2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bed6:	4640      	mov	r0, r8
 800bed8:	4b98      	ldr	r3, [pc, #608]	; (800c13c <_printf_float+0x2cc>)
 800beda:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bedc:	f7f4 fd78 	bl	80009d0 <__aeabi_dcmple>
 800bee0:	bb30      	cbnz	r0, 800bf30 <_printf_float+0xc0>
 800bee2:	2200      	movs	r2, #0
 800bee4:	2300      	movs	r3, #0
 800bee6:	4640      	mov	r0, r8
 800bee8:	4651      	mov	r1, sl
 800beea:	f7f4 fd67 	bl	80009bc <__aeabi_dcmplt>
 800beee:	b110      	cbz	r0, 800bef6 <_printf_float+0x86>
 800bef0:	232d      	movs	r3, #45	; 0x2d
 800bef2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bef6:	4b92      	ldr	r3, [pc, #584]	; (800c140 <_printf_float+0x2d0>)
 800bef8:	4892      	ldr	r0, [pc, #584]	; (800c144 <_printf_float+0x2d4>)
 800befa:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800befe:	bf94      	ite	ls
 800bf00:	4698      	movls	r8, r3
 800bf02:	4680      	movhi	r8, r0
 800bf04:	2303      	movs	r3, #3
 800bf06:	f04f 0a00 	mov.w	sl, #0
 800bf0a:	6123      	str	r3, [r4, #16]
 800bf0c:	f02b 0304 	bic.w	r3, fp, #4
 800bf10:	6023      	str	r3, [r4, #0]
 800bf12:	4633      	mov	r3, r6
 800bf14:	4621      	mov	r1, r4
 800bf16:	4628      	mov	r0, r5
 800bf18:	9700      	str	r7, [sp, #0]
 800bf1a:	aa0f      	add	r2, sp, #60	; 0x3c
 800bf1c:	f000 f9d4 	bl	800c2c8 <_printf_common>
 800bf20:	3001      	adds	r0, #1
 800bf22:	f040 8090 	bne.w	800c046 <_printf_float+0x1d6>
 800bf26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bf2a:	b011      	add	sp, #68	; 0x44
 800bf2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf30:	4642      	mov	r2, r8
 800bf32:	4653      	mov	r3, sl
 800bf34:	4640      	mov	r0, r8
 800bf36:	4651      	mov	r1, sl
 800bf38:	f7f4 fd68 	bl	8000a0c <__aeabi_dcmpun>
 800bf3c:	b148      	cbz	r0, 800bf52 <_printf_float+0xe2>
 800bf3e:	f1ba 0f00 	cmp.w	sl, #0
 800bf42:	bfb8      	it	lt
 800bf44:	232d      	movlt	r3, #45	; 0x2d
 800bf46:	4880      	ldr	r0, [pc, #512]	; (800c148 <_printf_float+0x2d8>)
 800bf48:	bfb8      	it	lt
 800bf4a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800bf4e:	4b7f      	ldr	r3, [pc, #508]	; (800c14c <_printf_float+0x2dc>)
 800bf50:	e7d3      	b.n	800befa <_printf_float+0x8a>
 800bf52:	6863      	ldr	r3, [r4, #4]
 800bf54:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800bf58:	1c5a      	adds	r2, r3, #1
 800bf5a:	d142      	bne.n	800bfe2 <_printf_float+0x172>
 800bf5c:	2306      	movs	r3, #6
 800bf5e:	6063      	str	r3, [r4, #4]
 800bf60:	2200      	movs	r2, #0
 800bf62:	9206      	str	r2, [sp, #24]
 800bf64:	aa0e      	add	r2, sp, #56	; 0x38
 800bf66:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800bf6a:	aa0d      	add	r2, sp, #52	; 0x34
 800bf6c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800bf70:	9203      	str	r2, [sp, #12]
 800bf72:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800bf76:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800bf7a:	6023      	str	r3, [r4, #0]
 800bf7c:	6863      	ldr	r3, [r4, #4]
 800bf7e:	4642      	mov	r2, r8
 800bf80:	9300      	str	r3, [sp, #0]
 800bf82:	4628      	mov	r0, r5
 800bf84:	4653      	mov	r3, sl
 800bf86:	910b      	str	r1, [sp, #44]	; 0x2c
 800bf88:	f7ff fed4 	bl	800bd34 <__cvt>
 800bf8c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bf8e:	4680      	mov	r8, r0
 800bf90:	2947      	cmp	r1, #71	; 0x47
 800bf92:	990d      	ldr	r1, [sp, #52]	; 0x34
 800bf94:	d108      	bne.n	800bfa8 <_printf_float+0x138>
 800bf96:	1cc8      	adds	r0, r1, #3
 800bf98:	db02      	blt.n	800bfa0 <_printf_float+0x130>
 800bf9a:	6863      	ldr	r3, [r4, #4]
 800bf9c:	4299      	cmp	r1, r3
 800bf9e:	dd40      	ble.n	800c022 <_printf_float+0x1b2>
 800bfa0:	f1a9 0902 	sub.w	r9, r9, #2
 800bfa4:	fa5f f989 	uxtb.w	r9, r9
 800bfa8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800bfac:	d81f      	bhi.n	800bfee <_printf_float+0x17e>
 800bfae:	464a      	mov	r2, r9
 800bfb0:	3901      	subs	r1, #1
 800bfb2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bfb6:	910d      	str	r1, [sp, #52]	; 0x34
 800bfb8:	f7ff ff1b 	bl	800bdf2 <__exponent>
 800bfbc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bfbe:	4682      	mov	sl, r0
 800bfc0:	1813      	adds	r3, r2, r0
 800bfc2:	2a01      	cmp	r2, #1
 800bfc4:	6123      	str	r3, [r4, #16]
 800bfc6:	dc02      	bgt.n	800bfce <_printf_float+0x15e>
 800bfc8:	6822      	ldr	r2, [r4, #0]
 800bfca:	07d2      	lsls	r2, r2, #31
 800bfcc:	d501      	bpl.n	800bfd2 <_printf_float+0x162>
 800bfce:	3301      	adds	r3, #1
 800bfd0:	6123      	str	r3, [r4, #16]
 800bfd2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d09b      	beq.n	800bf12 <_printf_float+0xa2>
 800bfda:	232d      	movs	r3, #45	; 0x2d
 800bfdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bfe0:	e797      	b.n	800bf12 <_printf_float+0xa2>
 800bfe2:	2947      	cmp	r1, #71	; 0x47
 800bfe4:	d1bc      	bne.n	800bf60 <_printf_float+0xf0>
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d1ba      	bne.n	800bf60 <_printf_float+0xf0>
 800bfea:	2301      	movs	r3, #1
 800bfec:	e7b7      	b.n	800bf5e <_printf_float+0xee>
 800bfee:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800bff2:	d118      	bne.n	800c026 <_printf_float+0x1b6>
 800bff4:	2900      	cmp	r1, #0
 800bff6:	6863      	ldr	r3, [r4, #4]
 800bff8:	dd0b      	ble.n	800c012 <_printf_float+0x1a2>
 800bffa:	6121      	str	r1, [r4, #16]
 800bffc:	b913      	cbnz	r3, 800c004 <_printf_float+0x194>
 800bffe:	6822      	ldr	r2, [r4, #0]
 800c000:	07d0      	lsls	r0, r2, #31
 800c002:	d502      	bpl.n	800c00a <_printf_float+0x19a>
 800c004:	3301      	adds	r3, #1
 800c006:	440b      	add	r3, r1
 800c008:	6123      	str	r3, [r4, #16]
 800c00a:	f04f 0a00 	mov.w	sl, #0
 800c00e:	65a1      	str	r1, [r4, #88]	; 0x58
 800c010:	e7df      	b.n	800bfd2 <_printf_float+0x162>
 800c012:	b913      	cbnz	r3, 800c01a <_printf_float+0x1aa>
 800c014:	6822      	ldr	r2, [r4, #0]
 800c016:	07d2      	lsls	r2, r2, #31
 800c018:	d501      	bpl.n	800c01e <_printf_float+0x1ae>
 800c01a:	3302      	adds	r3, #2
 800c01c:	e7f4      	b.n	800c008 <_printf_float+0x198>
 800c01e:	2301      	movs	r3, #1
 800c020:	e7f2      	b.n	800c008 <_printf_float+0x198>
 800c022:	f04f 0967 	mov.w	r9, #103	; 0x67
 800c026:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c028:	4299      	cmp	r1, r3
 800c02a:	db05      	blt.n	800c038 <_printf_float+0x1c8>
 800c02c:	6823      	ldr	r3, [r4, #0]
 800c02e:	6121      	str	r1, [r4, #16]
 800c030:	07d8      	lsls	r0, r3, #31
 800c032:	d5ea      	bpl.n	800c00a <_printf_float+0x19a>
 800c034:	1c4b      	adds	r3, r1, #1
 800c036:	e7e7      	b.n	800c008 <_printf_float+0x198>
 800c038:	2900      	cmp	r1, #0
 800c03a:	bfcc      	ite	gt
 800c03c:	2201      	movgt	r2, #1
 800c03e:	f1c1 0202 	rsble	r2, r1, #2
 800c042:	4413      	add	r3, r2
 800c044:	e7e0      	b.n	800c008 <_printf_float+0x198>
 800c046:	6823      	ldr	r3, [r4, #0]
 800c048:	055a      	lsls	r2, r3, #21
 800c04a:	d407      	bmi.n	800c05c <_printf_float+0x1ec>
 800c04c:	6923      	ldr	r3, [r4, #16]
 800c04e:	4642      	mov	r2, r8
 800c050:	4631      	mov	r1, r6
 800c052:	4628      	mov	r0, r5
 800c054:	47b8      	blx	r7
 800c056:	3001      	adds	r0, #1
 800c058:	d12b      	bne.n	800c0b2 <_printf_float+0x242>
 800c05a:	e764      	b.n	800bf26 <_printf_float+0xb6>
 800c05c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800c060:	f240 80dd 	bls.w	800c21e <_printf_float+0x3ae>
 800c064:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c068:	2200      	movs	r2, #0
 800c06a:	2300      	movs	r3, #0
 800c06c:	f7f4 fc9c 	bl	80009a8 <__aeabi_dcmpeq>
 800c070:	2800      	cmp	r0, #0
 800c072:	d033      	beq.n	800c0dc <_printf_float+0x26c>
 800c074:	2301      	movs	r3, #1
 800c076:	4631      	mov	r1, r6
 800c078:	4628      	mov	r0, r5
 800c07a:	4a35      	ldr	r2, [pc, #212]	; (800c150 <_printf_float+0x2e0>)
 800c07c:	47b8      	blx	r7
 800c07e:	3001      	adds	r0, #1
 800c080:	f43f af51 	beq.w	800bf26 <_printf_float+0xb6>
 800c084:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800c088:	429a      	cmp	r2, r3
 800c08a:	db02      	blt.n	800c092 <_printf_float+0x222>
 800c08c:	6823      	ldr	r3, [r4, #0]
 800c08e:	07d8      	lsls	r0, r3, #31
 800c090:	d50f      	bpl.n	800c0b2 <_printf_float+0x242>
 800c092:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c096:	4631      	mov	r1, r6
 800c098:	4628      	mov	r0, r5
 800c09a:	47b8      	blx	r7
 800c09c:	3001      	adds	r0, #1
 800c09e:	f43f af42 	beq.w	800bf26 <_printf_float+0xb6>
 800c0a2:	f04f 0800 	mov.w	r8, #0
 800c0a6:	f104 091a 	add.w	r9, r4, #26
 800c0aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c0ac:	3b01      	subs	r3, #1
 800c0ae:	4543      	cmp	r3, r8
 800c0b0:	dc09      	bgt.n	800c0c6 <_printf_float+0x256>
 800c0b2:	6823      	ldr	r3, [r4, #0]
 800c0b4:	079b      	lsls	r3, r3, #30
 800c0b6:	f100 8102 	bmi.w	800c2be <_printf_float+0x44e>
 800c0ba:	68e0      	ldr	r0, [r4, #12]
 800c0bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c0be:	4298      	cmp	r0, r3
 800c0c0:	bfb8      	it	lt
 800c0c2:	4618      	movlt	r0, r3
 800c0c4:	e731      	b.n	800bf2a <_printf_float+0xba>
 800c0c6:	2301      	movs	r3, #1
 800c0c8:	464a      	mov	r2, r9
 800c0ca:	4631      	mov	r1, r6
 800c0cc:	4628      	mov	r0, r5
 800c0ce:	47b8      	blx	r7
 800c0d0:	3001      	adds	r0, #1
 800c0d2:	f43f af28 	beq.w	800bf26 <_printf_float+0xb6>
 800c0d6:	f108 0801 	add.w	r8, r8, #1
 800c0da:	e7e6      	b.n	800c0aa <_printf_float+0x23a>
 800c0dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	dc38      	bgt.n	800c154 <_printf_float+0x2e4>
 800c0e2:	2301      	movs	r3, #1
 800c0e4:	4631      	mov	r1, r6
 800c0e6:	4628      	mov	r0, r5
 800c0e8:	4a19      	ldr	r2, [pc, #100]	; (800c150 <_printf_float+0x2e0>)
 800c0ea:	47b8      	blx	r7
 800c0ec:	3001      	adds	r0, #1
 800c0ee:	f43f af1a 	beq.w	800bf26 <_printf_float+0xb6>
 800c0f2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800c0f6:	4313      	orrs	r3, r2
 800c0f8:	d102      	bne.n	800c100 <_printf_float+0x290>
 800c0fa:	6823      	ldr	r3, [r4, #0]
 800c0fc:	07d9      	lsls	r1, r3, #31
 800c0fe:	d5d8      	bpl.n	800c0b2 <_printf_float+0x242>
 800c100:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c104:	4631      	mov	r1, r6
 800c106:	4628      	mov	r0, r5
 800c108:	47b8      	blx	r7
 800c10a:	3001      	adds	r0, #1
 800c10c:	f43f af0b 	beq.w	800bf26 <_printf_float+0xb6>
 800c110:	f04f 0900 	mov.w	r9, #0
 800c114:	f104 0a1a 	add.w	sl, r4, #26
 800c118:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c11a:	425b      	negs	r3, r3
 800c11c:	454b      	cmp	r3, r9
 800c11e:	dc01      	bgt.n	800c124 <_printf_float+0x2b4>
 800c120:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c122:	e794      	b.n	800c04e <_printf_float+0x1de>
 800c124:	2301      	movs	r3, #1
 800c126:	4652      	mov	r2, sl
 800c128:	4631      	mov	r1, r6
 800c12a:	4628      	mov	r0, r5
 800c12c:	47b8      	blx	r7
 800c12e:	3001      	adds	r0, #1
 800c130:	f43f aef9 	beq.w	800bf26 <_printf_float+0xb6>
 800c134:	f109 0901 	add.w	r9, r9, #1
 800c138:	e7ee      	b.n	800c118 <_printf_float+0x2a8>
 800c13a:	bf00      	nop
 800c13c:	7fefffff 	.word	0x7fefffff
 800c140:	0800f198 	.word	0x0800f198
 800c144:	0800f19c 	.word	0x0800f19c
 800c148:	0800f1a4 	.word	0x0800f1a4
 800c14c:	0800f1a0 	.word	0x0800f1a0
 800c150:	0800f1a8 	.word	0x0800f1a8
 800c154:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c156:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c158:	429a      	cmp	r2, r3
 800c15a:	bfa8      	it	ge
 800c15c:	461a      	movge	r2, r3
 800c15e:	2a00      	cmp	r2, #0
 800c160:	4691      	mov	r9, r2
 800c162:	dc37      	bgt.n	800c1d4 <_printf_float+0x364>
 800c164:	f04f 0b00 	mov.w	fp, #0
 800c168:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c16c:	f104 021a 	add.w	r2, r4, #26
 800c170:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800c174:	ebaa 0309 	sub.w	r3, sl, r9
 800c178:	455b      	cmp	r3, fp
 800c17a:	dc33      	bgt.n	800c1e4 <_printf_float+0x374>
 800c17c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800c180:	429a      	cmp	r2, r3
 800c182:	db3b      	blt.n	800c1fc <_printf_float+0x38c>
 800c184:	6823      	ldr	r3, [r4, #0]
 800c186:	07da      	lsls	r2, r3, #31
 800c188:	d438      	bmi.n	800c1fc <_printf_float+0x38c>
 800c18a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c18c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c18e:	eba2 030a 	sub.w	r3, r2, sl
 800c192:	eba2 0901 	sub.w	r9, r2, r1
 800c196:	4599      	cmp	r9, r3
 800c198:	bfa8      	it	ge
 800c19a:	4699      	movge	r9, r3
 800c19c:	f1b9 0f00 	cmp.w	r9, #0
 800c1a0:	dc34      	bgt.n	800c20c <_printf_float+0x39c>
 800c1a2:	f04f 0800 	mov.w	r8, #0
 800c1a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c1aa:	f104 0a1a 	add.w	sl, r4, #26
 800c1ae:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800c1b2:	1a9b      	subs	r3, r3, r2
 800c1b4:	eba3 0309 	sub.w	r3, r3, r9
 800c1b8:	4543      	cmp	r3, r8
 800c1ba:	f77f af7a 	ble.w	800c0b2 <_printf_float+0x242>
 800c1be:	2301      	movs	r3, #1
 800c1c0:	4652      	mov	r2, sl
 800c1c2:	4631      	mov	r1, r6
 800c1c4:	4628      	mov	r0, r5
 800c1c6:	47b8      	blx	r7
 800c1c8:	3001      	adds	r0, #1
 800c1ca:	f43f aeac 	beq.w	800bf26 <_printf_float+0xb6>
 800c1ce:	f108 0801 	add.w	r8, r8, #1
 800c1d2:	e7ec      	b.n	800c1ae <_printf_float+0x33e>
 800c1d4:	4613      	mov	r3, r2
 800c1d6:	4631      	mov	r1, r6
 800c1d8:	4642      	mov	r2, r8
 800c1da:	4628      	mov	r0, r5
 800c1dc:	47b8      	blx	r7
 800c1de:	3001      	adds	r0, #1
 800c1e0:	d1c0      	bne.n	800c164 <_printf_float+0x2f4>
 800c1e2:	e6a0      	b.n	800bf26 <_printf_float+0xb6>
 800c1e4:	2301      	movs	r3, #1
 800c1e6:	4631      	mov	r1, r6
 800c1e8:	4628      	mov	r0, r5
 800c1ea:	920b      	str	r2, [sp, #44]	; 0x2c
 800c1ec:	47b8      	blx	r7
 800c1ee:	3001      	adds	r0, #1
 800c1f0:	f43f ae99 	beq.w	800bf26 <_printf_float+0xb6>
 800c1f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c1f6:	f10b 0b01 	add.w	fp, fp, #1
 800c1fa:	e7b9      	b.n	800c170 <_printf_float+0x300>
 800c1fc:	4631      	mov	r1, r6
 800c1fe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c202:	4628      	mov	r0, r5
 800c204:	47b8      	blx	r7
 800c206:	3001      	adds	r0, #1
 800c208:	d1bf      	bne.n	800c18a <_printf_float+0x31a>
 800c20a:	e68c      	b.n	800bf26 <_printf_float+0xb6>
 800c20c:	464b      	mov	r3, r9
 800c20e:	4631      	mov	r1, r6
 800c210:	4628      	mov	r0, r5
 800c212:	eb08 020a 	add.w	r2, r8, sl
 800c216:	47b8      	blx	r7
 800c218:	3001      	adds	r0, #1
 800c21a:	d1c2      	bne.n	800c1a2 <_printf_float+0x332>
 800c21c:	e683      	b.n	800bf26 <_printf_float+0xb6>
 800c21e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c220:	2a01      	cmp	r2, #1
 800c222:	dc01      	bgt.n	800c228 <_printf_float+0x3b8>
 800c224:	07db      	lsls	r3, r3, #31
 800c226:	d537      	bpl.n	800c298 <_printf_float+0x428>
 800c228:	2301      	movs	r3, #1
 800c22a:	4642      	mov	r2, r8
 800c22c:	4631      	mov	r1, r6
 800c22e:	4628      	mov	r0, r5
 800c230:	47b8      	blx	r7
 800c232:	3001      	adds	r0, #1
 800c234:	f43f ae77 	beq.w	800bf26 <_printf_float+0xb6>
 800c238:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c23c:	4631      	mov	r1, r6
 800c23e:	4628      	mov	r0, r5
 800c240:	47b8      	blx	r7
 800c242:	3001      	adds	r0, #1
 800c244:	f43f ae6f 	beq.w	800bf26 <_printf_float+0xb6>
 800c248:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c24c:	2200      	movs	r2, #0
 800c24e:	2300      	movs	r3, #0
 800c250:	f7f4 fbaa 	bl	80009a8 <__aeabi_dcmpeq>
 800c254:	b9d8      	cbnz	r0, 800c28e <_printf_float+0x41e>
 800c256:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c258:	f108 0201 	add.w	r2, r8, #1
 800c25c:	3b01      	subs	r3, #1
 800c25e:	4631      	mov	r1, r6
 800c260:	4628      	mov	r0, r5
 800c262:	47b8      	blx	r7
 800c264:	3001      	adds	r0, #1
 800c266:	d10e      	bne.n	800c286 <_printf_float+0x416>
 800c268:	e65d      	b.n	800bf26 <_printf_float+0xb6>
 800c26a:	2301      	movs	r3, #1
 800c26c:	464a      	mov	r2, r9
 800c26e:	4631      	mov	r1, r6
 800c270:	4628      	mov	r0, r5
 800c272:	47b8      	blx	r7
 800c274:	3001      	adds	r0, #1
 800c276:	f43f ae56 	beq.w	800bf26 <_printf_float+0xb6>
 800c27a:	f108 0801 	add.w	r8, r8, #1
 800c27e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c280:	3b01      	subs	r3, #1
 800c282:	4543      	cmp	r3, r8
 800c284:	dcf1      	bgt.n	800c26a <_printf_float+0x3fa>
 800c286:	4653      	mov	r3, sl
 800c288:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c28c:	e6e0      	b.n	800c050 <_printf_float+0x1e0>
 800c28e:	f04f 0800 	mov.w	r8, #0
 800c292:	f104 091a 	add.w	r9, r4, #26
 800c296:	e7f2      	b.n	800c27e <_printf_float+0x40e>
 800c298:	2301      	movs	r3, #1
 800c29a:	4642      	mov	r2, r8
 800c29c:	e7df      	b.n	800c25e <_printf_float+0x3ee>
 800c29e:	2301      	movs	r3, #1
 800c2a0:	464a      	mov	r2, r9
 800c2a2:	4631      	mov	r1, r6
 800c2a4:	4628      	mov	r0, r5
 800c2a6:	47b8      	blx	r7
 800c2a8:	3001      	adds	r0, #1
 800c2aa:	f43f ae3c 	beq.w	800bf26 <_printf_float+0xb6>
 800c2ae:	f108 0801 	add.w	r8, r8, #1
 800c2b2:	68e3      	ldr	r3, [r4, #12]
 800c2b4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c2b6:	1a5b      	subs	r3, r3, r1
 800c2b8:	4543      	cmp	r3, r8
 800c2ba:	dcf0      	bgt.n	800c29e <_printf_float+0x42e>
 800c2bc:	e6fd      	b.n	800c0ba <_printf_float+0x24a>
 800c2be:	f04f 0800 	mov.w	r8, #0
 800c2c2:	f104 0919 	add.w	r9, r4, #25
 800c2c6:	e7f4      	b.n	800c2b2 <_printf_float+0x442>

0800c2c8 <_printf_common>:
 800c2c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2cc:	4616      	mov	r6, r2
 800c2ce:	4699      	mov	r9, r3
 800c2d0:	688a      	ldr	r2, [r1, #8]
 800c2d2:	690b      	ldr	r3, [r1, #16]
 800c2d4:	4607      	mov	r7, r0
 800c2d6:	4293      	cmp	r3, r2
 800c2d8:	bfb8      	it	lt
 800c2da:	4613      	movlt	r3, r2
 800c2dc:	6033      	str	r3, [r6, #0]
 800c2de:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c2e2:	460c      	mov	r4, r1
 800c2e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c2e8:	b10a      	cbz	r2, 800c2ee <_printf_common+0x26>
 800c2ea:	3301      	adds	r3, #1
 800c2ec:	6033      	str	r3, [r6, #0]
 800c2ee:	6823      	ldr	r3, [r4, #0]
 800c2f0:	0699      	lsls	r1, r3, #26
 800c2f2:	bf42      	ittt	mi
 800c2f4:	6833      	ldrmi	r3, [r6, #0]
 800c2f6:	3302      	addmi	r3, #2
 800c2f8:	6033      	strmi	r3, [r6, #0]
 800c2fa:	6825      	ldr	r5, [r4, #0]
 800c2fc:	f015 0506 	ands.w	r5, r5, #6
 800c300:	d106      	bne.n	800c310 <_printf_common+0x48>
 800c302:	f104 0a19 	add.w	sl, r4, #25
 800c306:	68e3      	ldr	r3, [r4, #12]
 800c308:	6832      	ldr	r2, [r6, #0]
 800c30a:	1a9b      	subs	r3, r3, r2
 800c30c:	42ab      	cmp	r3, r5
 800c30e:	dc28      	bgt.n	800c362 <_printf_common+0x9a>
 800c310:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c314:	1e13      	subs	r3, r2, #0
 800c316:	6822      	ldr	r2, [r4, #0]
 800c318:	bf18      	it	ne
 800c31a:	2301      	movne	r3, #1
 800c31c:	0692      	lsls	r2, r2, #26
 800c31e:	d42d      	bmi.n	800c37c <_printf_common+0xb4>
 800c320:	4649      	mov	r1, r9
 800c322:	4638      	mov	r0, r7
 800c324:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c328:	47c0      	blx	r8
 800c32a:	3001      	adds	r0, #1
 800c32c:	d020      	beq.n	800c370 <_printf_common+0xa8>
 800c32e:	6823      	ldr	r3, [r4, #0]
 800c330:	68e5      	ldr	r5, [r4, #12]
 800c332:	f003 0306 	and.w	r3, r3, #6
 800c336:	2b04      	cmp	r3, #4
 800c338:	bf18      	it	ne
 800c33a:	2500      	movne	r5, #0
 800c33c:	6832      	ldr	r2, [r6, #0]
 800c33e:	f04f 0600 	mov.w	r6, #0
 800c342:	68a3      	ldr	r3, [r4, #8]
 800c344:	bf08      	it	eq
 800c346:	1aad      	subeq	r5, r5, r2
 800c348:	6922      	ldr	r2, [r4, #16]
 800c34a:	bf08      	it	eq
 800c34c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c350:	4293      	cmp	r3, r2
 800c352:	bfc4      	itt	gt
 800c354:	1a9b      	subgt	r3, r3, r2
 800c356:	18ed      	addgt	r5, r5, r3
 800c358:	341a      	adds	r4, #26
 800c35a:	42b5      	cmp	r5, r6
 800c35c:	d11a      	bne.n	800c394 <_printf_common+0xcc>
 800c35e:	2000      	movs	r0, #0
 800c360:	e008      	b.n	800c374 <_printf_common+0xac>
 800c362:	2301      	movs	r3, #1
 800c364:	4652      	mov	r2, sl
 800c366:	4649      	mov	r1, r9
 800c368:	4638      	mov	r0, r7
 800c36a:	47c0      	blx	r8
 800c36c:	3001      	adds	r0, #1
 800c36e:	d103      	bne.n	800c378 <_printf_common+0xb0>
 800c370:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c378:	3501      	adds	r5, #1
 800c37a:	e7c4      	b.n	800c306 <_printf_common+0x3e>
 800c37c:	2030      	movs	r0, #48	; 0x30
 800c37e:	18e1      	adds	r1, r4, r3
 800c380:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c384:	1c5a      	adds	r2, r3, #1
 800c386:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c38a:	4422      	add	r2, r4
 800c38c:	3302      	adds	r3, #2
 800c38e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c392:	e7c5      	b.n	800c320 <_printf_common+0x58>
 800c394:	2301      	movs	r3, #1
 800c396:	4622      	mov	r2, r4
 800c398:	4649      	mov	r1, r9
 800c39a:	4638      	mov	r0, r7
 800c39c:	47c0      	blx	r8
 800c39e:	3001      	adds	r0, #1
 800c3a0:	d0e6      	beq.n	800c370 <_printf_common+0xa8>
 800c3a2:	3601      	adds	r6, #1
 800c3a4:	e7d9      	b.n	800c35a <_printf_common+0x92>
	...

0800c3a8 <_printf_i>:
 800c3a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c3ac:	460c      	mov	r4, r1
 800c3ae:	7e27      	ldrb	r7, [r4, #24]
 800c3b0:	4691      	mov	r9, r2
 800c3b2:	2f78      	cmp	r7, #120	; 0x78
 800c3b4:	4680      	mov	r8, r0
 800c3b6:	469a      	mov	sl, r3
 800c3b8:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c3ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c3be:	d807      	bhi.n	800c3d0 <_printf_i+0x28>
 800c3c0:	2f62      	cmp	r7, #98	; 0x62
 800c3c2:	d80a      	bhi.n	800c3da <_printf_i+0x32>
 800c3c4:	2f00      	cmp	r7, #0
 800c3c6:	f000 80d9 	beq.w	800c57c <_printf_i+0x1d4>
 800c3ca:	2f58      	cmp	r7, #88	; 0x58
 800c3cc:	f000 80a4 	beq.w	800c518 <_printf_i+0x170>
 800c3d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c3d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c3d8:	e03a      	b.n	800c450 <_printf_i+0xa8>
 800c3da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c3de:	2b15      	cmp	r3, #21
 800c3e0:	d8f6      	bhi.n	800c3d0 <_printf_i+0x28>
 800c3e2:	a001      	add	r0, pc, #4	; (adr r0, 800c3e8 <_printf_i+0x40>)
 800c3e4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c3e8:	0800c441 	.word	0x0800c441
 800c3ec:	0800c455 	.word	0x0800c455
 800c3f0:	0800c3d1 	.word	0x0800c3d1
 800c3f4:	0800c3d1 	.word	0x0800c3d1
 800c3f8:	0800c3d1 	.word	0x0800c3d1
 800c3fc:	0800c3d1 	.word	0x0800c3d1
 800c400:	0800c455 	.word	0x0800c455
 800c404:	0800c3d1 	.word	0x0800c3d1
 800c408:	0800c3d1 	.word	0x0800c3d1
 800c40c:	0800c3d1 	.word	0x0800c3d1
 800c410:	0800c3d1 	.word	0x0800c3d1
 800c414:	0800c563 	.word	0x0800c563
 800c418:	0800c485 	.word	0x0800c485
 800c41c:	0800c545 	.word	0x0800c545
 800c420:	0800c3d1 	.word	0x0800c3d1
 800c424:	0800c3d1 	.word	0x0800c3d1
 800c428:	0800c585 	.word	0x0800c585
 800c42c:	0800c3d1 	.word	0x0800c3d1
 800c430:	0800c485 	.word	0x0800c485
 800c434:	0800c3d1 	.word	0x0800c3d1
 800c438:	0800c3d1 	.word	0x0800c3d1
 800c43c:	0800c54d 	.word	0x0800c54d
 800c440:	680b      	ldr	r3, [r1, #0]
 800c442:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c446:	1d1a      	adds	r2, r3, #4
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	600a      	str	r2, [r1, #0]
 800c44c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c450:	2301      	movs	r3, #1
 800c452:	e0a4      	b.n	800c59e <_printf_i+0x1f6>
 800c454:	6825      	ldr	r5, [r4, #0]
 800c456:	6808      	ldr	r0, [r1, #0]
 800c458:	062e      	lsls	r6, r5, #24
 800c45a:	f100 0304 	add.w	r3, r0, #4
 800c45e:	d50a      	bpl.n	800c476 <_printf_i+0xce>
 800c460:	6805      	ldr	r5, [r0, #0]
 800c462:	600b      	str	r3, [r1, #0]
 800c464:	2d00      	cmp	r5, #0
 800c466:	da03      	bge.n	800c470 <_printf_i+0xc8>
 800c468:	232d      	movs	r3, #45	; 0x2d
 800c46a:	426d      	negs	r5, r5
 800c46c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c470:	230a      	movs	r3, #10
 800c472:	485e      	ldr	r0, [pc, #376]	; (800c5ec <_printf_i+0x244>)
 800c474:	e019      	b.n	800c4aa <_printf_i+0x102>
 800c476:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c47a:	6805      	ldr	r5, [r0, #0]
 800c47c:	600b      	str	r3, [r1, #0]
 800c47e:	bf18      	it	ne
 800c480:	b22d      	sxthne	r5, r5
 800c482:	e7ef      	b.n	800c464 <_printf_i+0xbc>
 800c484:	680b      	ldr	r3, [r1, #0]
 800c486:	6825      	ldr	r5, [r4, #0]
 800c488:	1d18      	adds	r0, r3, #4
 800c48a:	6008      	str	r0, [r1, #0]
 800c48c:	0628      	lsls	r0, r5, #24
 800c48e:	d501      	bpl.n	800c494 <_printf_i+0xec>
 800c490:	681d      	ldr	r5, [r3, #0]
 800c492:	e002      	b.n	800c49a <_printf_i+0xf2>
 800c494:	0669      	lsls	r1, r5, #25
 800c496:	d5fb      	bpl.n	800c490 <_printf_i+0xe8>
 800c498:	881d      	ldrh	r5, [r3, #0]
 800c49a:	2f6f      	cmp	r7, #111	; 0x6f
 800c49c:	bf0c      	ite	eq
 800c49e:	2308      	moveq	r3, #8
 800c4a0:	230a      	movne	r3, #10
 800c4a2:	4852      	ldr	r0, [pc, #328]	; (800c5ec <_printf_i+0x244>)
 800c4a4:	2100      	movs	r1, #0
 800c4a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c4aa:	6866      	ldr	r6, [r4, #4]
 800c4ac:	2e00      	cmp	r6, #0
 800c4ae:	bfa8      	it	ge
 800c4b0:	6821      	ldrge	r1, [r4, #0]
 800c4b2:	60a6      	str	r6, [r4, #8]
 800c4b4:	bfa4      	itt	ge
 800c4b6:	f021 0104 	bicge.w	r1, r1, #4
 800c4ba:	6021      	strge	r1, [r4, #0]
 800c4bc:	b90d      	cbnz	r5, 800c4c2 <_printf_i+0x11a>
 800c4be:	2e00      	cmp	r6, #0
 800c4c0:	d04d      	beq.n	800c55e <_printf_i+0x1b6>
 800c4c2:	4616      	mov	r6, r2
 800c4c4:	fbb5 f1f3 	udiv	r1, r5, r3
 800c4c8:	fb03 5711 	mls	r7, r3, r1, r5
 800c4cc:	5dc7      	ldrb	r7, [r0, r7]
 800c4ce:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c4d2:	462f      	mov	r7, r5
 800c4d4:	42bb      	cmp	r3, r7
 800c4d6:	460d      	mov	r5, r1
 800c4d8:	d9f4      	bls.n	800c4c4 <_printf_i+0x11c>
 800c4da:	2b08      	cmp	r3, #8
 800c4dc:	d10b      	bne.n	800c4f6 <_printf_i+0x14e>
 800c4de:	6823      	ldr	r3, [r4, #0]
 800c4e0:	07df      	lsls	r7, r3, #31
 800c4e2:	d508      	bpl.n	800c4f6 <_printf_i+0x14e>
 800c4e4:	6923      	ldr	r3, [r4, #16]
 800c4e6:	6861      	ldr	r1, [r4, #4]
 800c4e8:	4299      	cmp	r1, r3
 800c4ea:	bfde      	ittt	le
 800c4ec:	2330      	movle	r3, #48	; 0x30
 800c4ee:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c4f2:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800c4f6:	1b92      	subs	r2, r2, r6
 800c4f8:	6122      	str	r2, [r4, #16]
 800c4fa:	464b      	mov	r3, r9
 800c4fc:	4621      	mov	r1, r4
 800c4fe:	4640      	mov	r0, r8
 800c500:	f8cd a000 	str.w	sl, [sp]
 800c504:	aa03      	add	r2, sp, #12
 800c506:	f7ff fedf 	bl	800c2c8 <_printf_common>
 800c50a:	3001      	adds	r0, #1
 800c50c:	d14c      	bne.n	800c5a8 <_printf_i+0x200>
 800c50e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c512:	b004      	add	sp, #16
 800c514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c518:	4834      	ldr	r0, [pc, #208]	; (800c5ec <_printf_i+0x244>)
 800c51a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c51e:	680e      	ldr	r6, [r1, #0]
 800c520:	6823      	ldr	r3, [r4, #0]
 800c522:	f856 5b04 	ldr.w	r5, [r6], #4
 800c526:	061f      	lsls	r7, r3, #24
 800c528:	600e      	str	r6, [r1, #0]
 800c52a:	d514      	bpl.n	800c556 <_printf_i+0x1ae>
 800c52c:	07d9      	lsls	r1, r3, #31
 800c52e:	bf44      	itt	mi
 800c530:	f043 0320 	orrmi.w	r3, r3, #32
 800c534:	6023      	strmi	r3, [r4, #0]
 800c536:	b91d      	cbnz	r5, 800c540 <_printf_i+0x198>
 800c538:	6823      	ldr	r3, [r4, #0]
 800c53a:	f023 0320 	bic.w	r3, r3, #32
 800c53e:	6023      	str	r3, [r4, #0]
 800c540:	2310      	movs	r3, #16
 800c542:	e7af      	b.n	800c4a4 <_printf_i+0xfc>
 800c544:	6823      	ldr	r3, [r4, #0]
 800c546:	f043 0320 	orr.w	r3, r3, #32
 800c54a:	6023      	str	r3, [r4, #0]
 800c54c:	2378      	movs	r3, #120	; 0x78
 800c54e:	4828      	ldr	r0, [pc, #160]	; (800c5f0 <_printf_i+0x248>)
 800c550:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c554:	e7e3      	b.n	800c51e <_printf_i+0x176>
 800c556:	065e      	lsls	r6, r3, #25
 800c558:	bf48      	it	mi
 800c55a:	b2ad      	uxthmi	r5, r5
 800c55c:	e7e6      	b.n	800c52c <_printf_i+0x184>
 800c55e:	4616      	mov	r6, r2
 800c560:	e7bb      	b.n	800c4da <_printf_i+0x132>
 800c562:	680b      	ldr	r3, [r1, #0]
 800c564:	6826      	ldr	r6, [r4, #0]
 800c566:	1d1d      	adds	r5, r3, #4
 800c568:	6960      	ldr	r0, [r4, #20]
 800c56a:	600d      	str	r5, [r1, #0]
 800c56c:	0635      	lsls	r5, r6, #24
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	d501      	bpl.n	800c576 <_printf_i+0x1ce>
 800c572:	6018      	str	r0, [r3, #0]
 800c574:	e002      	b.n	800c57c <_printf_i+0x1d4>
 800c576:	0671      	lsls	r1, r6, #25
 800c578:	d5fb      	bpl.n	800c572 <_printf_i+0x1ca>
 800c57a:	8018      	strh	r0, [r3, #0]
 800c57c:	2300      	movs	r3, #0
 800c57e:	4616      	mov	r6, r2
 800c580:	6123      	str	r3, [r4, #16]
 800c582:	e7ba      	b.n	800c4fa <_printf_i+0x152>
 800c584:	680b      	ldr	r3, [r1, #0]
 800c586:	1d1a      	adds	r2, r3, #4
 800c588:	600a      	str	r2, [r1, #0]
 800c58a:	681e      	ldr	r6, [r3, #0]
 800c58c:	2100      	movs	r1, #0
 800c58e:	4630      	mov	r0, r6
 800c590:	6862      	ldr	r2, [r4, #4]
 800c592:	f000 fed7 	bl	800d344 <memchr>
 800c596:	b108      	cbz	r0, 800c59c <_printf_i+0x1f4>
 800c598:	1b80      	subs	r0, r0, r6
 800c59a:	6060      	str	r0, [r4, #4]
 800c59c:	6863      	ldr	r3, [r4, #4]
 800c59e:	6123      	str	r3, [r4, #16]
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c5a6:	e7a8      	b.n	800c4fa <_printf_i+0x152>
 800c5a8:	4632      	mov	r2, r6
 800c5aa:	4649      	mov	r1, r9
 800c5ac:	4640      	mov	r0, r8
 800c5ae:	6923      	ldr	r3, [r4, #16]
 800c5b0:	47d0      	blx	sl
 800c5b2:	3001      	adds	r0, #1
 800c5b4:	d0ab      	beq.n	800c50e <_printf_i+0x166>
 800c5b6:	6823      	ldr	r3, [r4, #0]
 800c5b8:	079b      	lsls	r3, r3, #30
 800c5ba:	d413      	bmi.n	800c5e4 <_printf_i+0x23c>
 800c5bc:	68e0      	ldr	r0, [r4, #12]
 800c5be:	9b03      	ldr	r3, [sp, #12]
 800c5c0:	4298      	cmp	r0, r3
 800c5c2:	bfb8      	it	lt
 800c5c4:	4618      	movlt	r0, r3
 800c5c6:	e7a4      	b.n	800c512 <_printf_i+0x16a>
 800c5c8:	2301      	movs	r3, #1
 800c5ca:	4632      	mov	r2, r6
 800c5cc:	4649      	mov	r1, r9
 800c5ce:	4640      	mov	r0, r8
 800c5d0:	47d0      	blx	sl
 800c5d2:	3001      	adds	r0, #1
 800c5d4:	d09b      	beq.n	800c50e <_printf_i+0x166>
 800c5d6:	3501      	adds	r5, #1
 800c5d8:	68e3      	ldr	r3, [r4, #12]
 800c5da:	9903      	ldr	r1, [sp, #12]
 800c5dc:	1a5b      	subs	r3, r3, r1
 800c5de:	42ab      	cmp	r3, r5
 800c5e0:	dcf2      	bgt.n	800c5c8 <_printf_i+0x220>
 800c5e2:	e7eb      	b.n	800c5bc <_printf_i+0x214>
 800c5e4:	2500      	movs	r5, #0
 800c5e6:	f104 0619 	add.w	r6, r4, #25
 800c5ea:	e7f5      	b.n	800c5d8 <_printf_i+0x230>
 800c5ec:	0800f1aa 	.word	0x0800f1aa
 800c5f0:	0800f1bb 	.word	0x0800f1bb

0800c5f4 <siprintf>:
 800c5f4:	b40e      	push	{r1, r2, r3}
 800c5f6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c5fa:	b500      	push	{lr}
 800c5fc:	b09c      	sub	sp, #112	; 0x70
 800c5fe:	ab1d      	add	r3, sp, #116	; 0x74
 800c600:	9002      	str	r0, [sp, #8]
 800c602:	9006      	str	r0, [sp, #24]
 800c604:	9107      	str	r1, [sp, #28]
 800c606:	9104      	str	r1, [sp, #16]
 800c608:	4808      	ldr	r0, [pc, #32]	; (800c62c <siprintf+0x38>)
 800c60a:	4909      	ldr	r1, [pc, #36]	; (800c630 <siprintf+0x3c>)
 800c60c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c610:	9105      	str	r1, [sp, #20]
 800c612:	6800      	ldr	r0, [r0, #0]
 800c614:	a902      	add	r1, sp, #8
 800c616:	9301      	str	r3, [sp, #4]
 800c618:	f001 fb42 	bl	800dca0 <_svfiprintf_r>
 800c61c:	2200      	movs	r2, #0
 800c61e:	9b02      	ldr	r3, [sp, #8]
 800c620:	701a      	strb	r2, [r3, #0]
 800c622:	b01c      	add	sp, #112	; 0x70
 800c624:	f85d eb04 	ldr.w	lr, [sp], #4
 800c628:	b003      	add	sp, #12
 800c62a:	4770      	bx	lr
 800c62c:	200001f8 	.word	0x200001f8
 800c630:	ffff0208 	.word	0xffff0208

0800c634 <quorem>:
 800c634:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c638:	6903      	ldr	r3, [r0, #16]
 800c63a:	690c      	ldr	r4, [r1, #16]
 800c63c:	4607      	mov	r7, r0
 800c63e:	42a3      	cmp	r3, r4
 800c640:	f2c0 8083 	blt.w	800c74a <quorem+0x116>
 800c644:	3c01      	subs	r4, #1
 800c646:	f100 0514 	add.w	r5, r0, #20
 800c64a:	f101 0814 	add.w	r8, r1, #20
 800c64e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c652:	9301      	str	r3, [sp, #4]
 800c654:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c658:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c65c:	3301      	adds	r3, #1
 800c65e:	429a      	cmp	r2, r3
 800c660:	fbb2 f6f3 	udiv	r6, r2, r3
 800c664:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c668:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c66c:	d332      	bcc.n	800c6d4 <quorem+0xa0>
 800c66e:	f04f 0e00 	mov.w	lr, #0
 800c672:	4640      	mov	r0, r8
 800c674:	46ac      	mov	ip, r5
 800c676:	46f2      	mov	sl, lr
 800c678:	f850 2b04 	ldr.w	r2, [r0], #4
 800c67c:	b293      	uxth	r3, r2
 800c67e:	fb06 e303 	mla	r3, r6, r3, lr
 800c682:	0c12      	lsrs	r2, r2, #16
 800c684:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c688:	fb06 e202 	mla	r2, r6, r2, lr
 800c68c:	b29b      	uxth	r3, r3
 800c68e:	ebaa 0303 	sub.w	r3, sl, r3
 800c692:	f8dc a000 	ldr.w	sl, [ip]
 800c696:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c69a:	fa1f fa8a 	uxth.w	sl, sl
 800c69e:	4453      	add	r3, sl
 800c6a0:	fa1f fa82 	uxth.w	sl, r2
 800c6a4:	f8dc 2000 	ldr.w	r2, [ip]
 800c6a8:	4581      	cmp	r9, r0
 800c6aa:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800c6ae:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c6b2:	b29b      	uxth	r3, r3
 800c6b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c6b8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c6bc:	f84c 3b04 	str.w	r3, [ip], #4
 800c6c0:	d2da      	bcs.n	800c678 <quorem+0x44>
 800c6c2:	f855 300b 	ldr.w	r3, [r5, fp]
 800c6c6:	b92b      	cbnz	r3, 800c6d4 <quorem+0xa0>
 800c6c8:	9b01      	ldr	r3, [sp, #4]
 800c6ca:	3b04      	subs	r3, #4
 800c6cc:	429d      	cmp	r5, r3
 800c6ce:	461a      	mov	r2, r3
 800c6d0:	d32f      	bcc.n	800c732 <quorem+0xfe>
 800c6d2:	613c      	str	r4, [r7, #16]
 800c6d4:	4638      	mov	r0, r7
 800c6d6:	f001 f8cb 	bl	800d870 <__mcmp>
 800c6da:	2800      	cmp	r0, #0
 800c6dc:	db25      	blt.n	800c72a <quorem+0xf6>
 800c6de:	4628      	mov	r0, r5
 800c6e0:	f04f 0c00 	mov.w	ip, #0
 800c6e4:	3601      	adds	r6, #1
 800c6e6:	f858 1b04 	ldr.w	r1, [r8], #4
 800c6ea:	f8d0 e000 	ldr.w	lr, [r0]
 800c6ee:	b28b      	uxth	r3, r1
 800c6f0:	ebac 0303 	sub.w	r3, ip, r3
 800c6f4:	fa1f f28e 	uxth.w	r2, lr
 800c6f8:	4413      	add	r3, r2
 800c6fa:	0c0a      	lsrs	r2, r1, #16
 800c6fc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c700:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c704:	b29b      	uxth	r3, r3
 800c706:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c70a:	45c1      	cmp	r9, r8
 800c70c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c710:	f840 3b04 	str.w	r3, [r0], #4
 800c714:	d2e7      	bcs.n	800c6e6 <quorem+0xb2>
 800c716:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c71a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c71e:	b922      	cbnz	r2, 800c72a <quorem+0xf6>
 800c720:	3b04      	subs	r3, #4
 800c722:	429d      	cmp	r5, r3
 800c724:	461a      	mov	r2, r3
 800c726:	d30a      	bcc.n	800c73e <quorem+0x10a>
 800c728:	613c      	str	r4, [r7, #16]
 800c72a:	4630      	mov	r0, r6
 800c72c:	b003      	add	sp, #12
 800c72e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c732:	6812      	ldr	r2, [r2, #0]
 800c734:	3b04      	subs	r3, #4
 800c736:	2a00      	cmp	r2, #0
 800c738:	d1cb      	bne.n	800c6d2 <quorem+0x9e>
 800c73a:	3c01      	subs	r4, #1
 800c73c:	e7c6      	b.n	800c6cc <quorem+0x98>
 800c73e:	6812      	ldr	r2, [r2, #0]
 800c740:	3b04      	subs	r3, #4
 800c742:	2a00      	cmp	r2, #0
 800c744:	d1f0      	bne.n	800c728 <quorem+0xf4>
 800c746:	3c01      	subs	r4, #1
 800c748:	e7eb      	b.n	800c722 <quorem+0xee>
 800c74a:	2000      	movs	r0, #0
 800c74c:	e7ee      	b.n	800c72c <quorem+0xf8>
	...

0800c750 <_dtoa_r>:
 800c750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c754:	4616      	mov	r6, r2
 800c756:	461f      	mov	r7, r3
 800c758:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800c75a:	b099      	sub	sp, #100	; 0x64
 800c75c:	4605      	mov	r5, r0
 800c75e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800c762:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800c766:	b974      	cbnz	r4, 800c786 <_dtoa_r+0x36>
 800c768:	2010      	movs	r0, #16
 800c76a:	f000 fde3 	bl	800d334 <malloc>
 800c76e:	4602      	mov	r2, r0
 800c770:	6268      	str	r0, [r5, #36]	; 0x24
 800c772:	b920      	cbnz	r0, 800c77e <_dtoa_r+0x2e>
 800c774:	21ea      	movs	r1, #234	; 0xea
 800c776:	4bae      	ldr	r3, [pc, #696]	; (800ca30 <_dtoa_r+0x2e0>)
 800c778:	48ae      	ldr	r0, [pc, #696]	; (800ca34 <_dtoa_r+0x2e4>)
 800c77a:	f001 fba1 	bl	800dec0 <__assert_func>
 800c77e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c782:	6004      	str	r4, [r0, #0]
 800c784:	60c4      	str	r4, [r0, #12]
 800c786:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c788:	6819      	ldr	r1, [r3, #0]
 800c78a:	b151      	cbz	r1, 800c7a2 <_dtoa_r+0x52>
 800c78c:	685a      	ldr	r2, [r3, #4]
 800c78e:	2301      	movs	r3, #1
 800c790:	4093      	lsls	r3, r2
 800c792:	604a      	str	r2, [r1, #4]
 800c794:	608b      	str	r3, [r1, #8]
 800c796:	4628      	mov	r0, r5
 800c798:	f000 fe30 	bl	800d3fc <_Bfree>
 800c79c:	2200      	movs	r2, #0
 800c79e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c7a0:	601a      	str	r2, [r3, #0]
 800c7a2:	1e3b      	subs	r3, r7, #0
 800c7a4:	bfaf      	iteee	ge
 800c7a6:	2300      	movge	r3, #0
 800c7a8:	2201      	movlt	r2, #1
 800c7aa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c7ae:	9305      	strlt	r3, [sp, #20]
 800c7b0:	bfa8      	it	ge
 800c7b2:	f8c8 3000 	strge.w	r3, [r8]
 800c7b6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800c7ba:	4b9f      	ldr	r3, [pc, #636]	; (800ca38 <_dtoa_r+0x2e8>)
 800c7bc:	bfb8      	it	lt
 800c7be:	f8c8 2000 	strlt.w	r2, [r8]
 800c7c2:	ea33 0309 	bics.w	r3, r3, r9
 800c7c6:	d119      	bne.n	800c7fc <_dtoa_r+0xac>
 800c7c8:	f242 730f 	movw	r3, #9999	; 0x270f
 800c7cc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c7ce:	6013      	str	r3, [r2, #0]
 800c7d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c7d4:	4333      	orrs	r3, r6
 800c7d6:	f000 8580 	beq.w	800d2da <_dtoa_r+0xb8a>
 800c7da:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c7dc:	b953      	cbnz	r3, 800c7f4 <_dtoa_r+0xa4>
 800c7de:	4b97      	ldr	r3, [pc, #604]	; (800ca3c <_dtoa_r+0x2ec>)
 800c7e0:	e022      	b.n	800c828 <_dtoa_r+0xd8>
 800c7e2:	4b97      	ldr	r3, [pc, #604]	; (800ca40 <_dtoa_r+0x2f0>)
 800c7e4:	9308      	str	r3, [sp, #32]
 800c7e6:	3308      	adds	r3, #8
 800c7e8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800c7ea:	6013      	str	r3, [r2, #0]
 800c7ec:	9808      	ldr	r0, [sp, #32]
 800c7ee:	b019      	add	sp, #100	; 0x64
 800c7f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7f4:	4b91      	ldr	r3, [pc, #580]	; (800ca3c <_dtoa_r+0x2ec>)
 800c7f6:	9308      	str	r3, [sp, #32]
 800c7f8:	3303      	adds	r3, #3
 800c7fa:	e7f5      	b.n	800c7e8 <_dtoa_r+0x98>
 800c7fc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800c800:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800c804:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c808:	2200      	movs	r2, #0
 800c80a:	2300      	movs	r3, #0
 800c80c:	f7f4 f8cc 	bl	80009a8 <__aeabi_dcmpeq>
 800c810:	4680      	mov	r8, r0
 800c812:	b158      	cbz	r0, 800c82c <_dtoa_r+0xdc>
 800c814:	2301      	movs	r3, #1
 800c816:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c818:	6013      	str	r3, [r2, #0]
 800c81a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	f000 8559 	beq.w	800d2d4 <_dtoa_r+0xb84>
 800c822:	4888      	ldr	r0, [pc, #544]	; (800ca44 <_dtoa_r+0x2f4>)
 800c824:	6018      	str	r0, [r3, #0]
 800c826:	1e43      	subs	r3, r0, #1
 800c828:	9308      	str	r3, [sp, #32]
 800c82a:	e7df      	b.n	800c7ec <_dtoa_r+0x9c>
 800c82c:	ab16      	add	r3, sp, #88	; 0x58
 800c82e:	9301      	str	r3, [sp, #4]
 800c830:	ab17      	add	r3, sp, #92	; 0x5c
 800c832:	9300      	str	r3, [sp, #0]
 800c834:	4628      	mov	r0, r5
 800c836:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c83a:	f001 f8c5 	bl	800d9c8 <__d2b>
 800c83e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800c842:	4682      	mov	sl, r0
 800c844:	2c00      	cmp	r4, #0
 800c846:	d07e      	beq.n	800c946 <_dtoa_r+0x1f6>
 800c848:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c84c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c84e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800c852:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c856:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800c85a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800c85e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800c862:	2200      	movs	r2, #0
 800c864:	4b78      	ldr	r3, [pc, #480]	; (800ca48 <_dtoa_r+0x2f8>)
 800c866:	f7f3 fc7f 	bl	8000168 <__aeabi_dsub>
 800c86a:	a36b      	add	r3, pc, #428	; (adr r3, 800ca18 <_dtoa_r+0x2c8>)
 800c86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c870:	f7f3 fe32 	bl	80004d8 <__aeabi_dmul>
 800c874:	a36a      	add	r3, pc, #424	; (adr r3, 800ca20 <_dtoa_r+0x2d0>)
 800c876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c87a:	f7f3 fc77 	bl	800016c <__adddf3>
 800c87e:	4606      	mov	r6, r0
 800c880:	4620      	mov	r0, r4
 800c882:	460f      	mov	r7, r1
 800c884:	f7f3 fdbe 	bl	8000404 <__aeabi_i2d>
 800c888:	a367      	add	r3, pc, #412	; (adr r3, 800ca28 <_dtoa_r+0x2d8>)
 800c88a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c88e:	f7f3 fe23 	bl	80004d8 <__aeabi_dmul>
 800c892:	4602      	mov	r2, r0
 800c894:	460b      	mov	r3, r1
 800c896:	4630      	mov	r0, r6
 800c898:	4639      	mov	r1, r7
 800c89a:	f7f3 fc67 	bl	800016c <__adddf3>
 800c89e:	4606      	mov	r6, r0
 800c8a0:	460f      	mov	r7, r1
 800c8a2:	f7f4 f8c9 	bl	8000a38 <__aeabi_d2iz>
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	4681      	mov	r9, r0
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	4630      	mov	r0, r6
 800c8ae:	4639      	mov	r1, r7
 800c8b0:	f7f4 f884 	bl	80009bc <__aeabi_dcmplt>
 800c8b4:	b148      	cbz	r0, 800c8ca <_dtoa_r+0x17a>
 800c8b6:	4648      	mov	r0, r9
 800c8b8:	f7f3 fda4 	bl	8000404 <__aeabi_i2d>
 800c8bc:	4632      	mov	r2, r6
 800c8be:	463b      	mov	r3, r7
 800c8c0:	f7f4 f872 	bl	80009a8 <__aeabi_dcmpeq>
 800c8c4:	b908      	cbnz	r0, 800c8ca <_dtoa_r+0x17a>
 800c8c6:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800c8ca:	f1b9 0f16 	cmp.w	r9, #22
 800c8ce:	d857      	bhi.n	800c980 <_dtoa_r+0x230>
 800c8d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c8d4:	4b5d      	ldr	r3, [pc, #372]	; (800ca4c <_dtoa_r+0x2fc>)
 800c8d6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800c8da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8de:	f7f4 f86d 	bl	80009bc <__aeabi_dcmplt>
 800c8e2:	2800      	cmp	r0, #0
 800c8e4:	d04e      	beq.n	800c984 <_dtoa_r+0x234>
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800c8ec:	930f      	str	r3, [sp, #60]	; 0x3c
 800c8ee:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c8f0:	1b1c      	subs	r4, r3, r4
 800c8f2:	1e63      	subs	r3, r4, #1
 800c8f4:	9309      	str	r3, [sp, #36]	; 0x24
 800c8f6:	bf49      	itett	mi
 800c8f8:	f1c4 0301 	rsbmi	r3, r4, #1
 800c8fc:	2300      	movpl	r3, #0
 800c8fe:	9306      	strmi	r3, [sp, #24]
 800c900:	2300      	movmi	r3, #0
 800c902:	bf54      	ite	pl
 800c904:	9306      	strpl	r3, [sp, #24]
 800c906:	9309      	strmi	r3, [sp, #36]	; 0x24
 800c908:	f1b9 0f00 	cmp.w	r9, #0
 800c90c:	db3c      	blt.n	800c988 <_dtoa_r+0x238>
 800c90e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c910:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800c914:	444b      	add	r3, r9
 800c916:	9309      	str	r3, [sp, #36]	; 0x24
 800c918:	2300      	movs	r3, #0
 800c91a:	930a      	str	r3, [sp, #40]	; 0x28
 800c91c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c91e:	2b09      	cmp	r3, #9
 800c920:	d86c      	bhi.n	800c9fc <_dtoa_r+0x2ac>
 800c922:	2b05      	cmp	r3, #5
 800c924:	bfc4      	itt	gt
 800c926:	3b04      	subgt	r3, #4
 800c928:	9322      	strgt	r3, [sp, #136]	; 0x88
 800c92a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c92c:	bfc8      	it	gt
 800c92e:	2400      	movgt	r4, #0
 800c930:	f1a3 0302 	sub.w	r3, r3, #2
 800c934:	bfd8      	it	le
 800c936:	2401      	movle	r4, #1
 800c938:	2b03      	cmp	r3, #3
 800c93a:	f200 808b 	bhi.w	800ca54 <_dtoa_r+0x304>
 800c93e:	e8df f003 	tbb	[pc, r3]
 800c942:	4f2d      	.short	0x4f2d
 800c944:	5b4d      	.short	0x5b4d
 800c946:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800c94a:	441c      	add	r4, r3
 800c94c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800c950:	2b20      	cmp	r3, #32
 800c952:	bfc3      	ittte	gt
 800c954:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c958:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800c95c:	fa09 f303 	lslgt.w	r3, r9, r3
 800c960:	f1c3 0320 	rsble	r3, r3, #32
 800c964:	bfc6      	itte	gt
 800c966:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c96a:	4318      	orrgt	r0, r3
 800c96c:	fa06 f003 	lslle.w	r0, r6, r3
 800c970:	f7f3 fd38 	bl	80003e4 <__aeabi_ui2d>
 800c974:	2301      	movs	r3, #1
 800c976:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800c97a:	3c01      	subs	r4, #1
 800c97c:	9313      	str	r3, [sp, #76]	; 0x4c
 800c97e:	e770      	b.n	800c862 <_dtoa_r+0x112>
 800c980:	2301      	movs	r3, #1
 800c982:	e7b3      	b.n	800c8ec <_dtoa_r+0x19c>
 800c984:	900f      	str	r0, [sp, #60]	; 0x3c
 800c986:	e7b2      	b.n	800c8ee <_dtoa_r+0x19e>
 800c988:	9b06      	ldr	r3, [sp, #24]
 800c98a:	eba3 0309 	sub.w	r3, r3, r9
 800c98e:	9306      	str	r3, [sp, #24]
 800c990:	f1c9 0300 	rsb	r3, r9, #0
 800c994:	930a      	str	r3, [sp, #40]	; 0x28
 800c996:	2300      	movs	r3, #0
 800c998:	930e      	str	r3, [sp, #56]	; 0x38
 800c99a:	e7bf      	b.n	800c91c <_dtoa_r+0x1cc>
 800c99c:	2300      	movs	r3, #0
 800c99e:	930b      	str	r3, [sp, #44]	; 0x2c
 800c9a0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	dc59      	bgt.n	800ca5a <_dtoa_r+0x30a>
 800c9a6:	f04f 0b01 	mov.w	fp, #1
 800c9aa:	465b      	mov	r3, fp
 800c9ac:	f8cd b008 	str.w	fp, [sp, #8]
 800c9b0:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800c9b8:	6042      	str	r2, [r0, #4]
 800c9ba:	2204      	movs	r2, #4
 800c9bc:	f102 0614 	add.w	r6, r2, #20
 800c9c0:	429e      	cmp	r6, r3
 800c9c2:	6841      	ldr	r1, [r0, #4]
 800c9c4:	d94f      	bls.n	800ca66 <_dtoa_r+0x316>
 800c9c6:	4628      	mov	r0, r5
 800c9c8:	f000 fcd8 	bl	800d37c <_Balloc>
 800c9cc:	9008      	str	r0, [sp, #32]
 800c9ce:	2800      	cmp	r0, #0
 800c9d0:	d14d      	bne.n	800ca6e <_dtoa_r+0x31e>
 800c9d2:	4602      	mov	r2, r0
 800c9d4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c9d8:	4b1d      	ldr	r3, [pc, #116]	; (800ca50 <_dtoa_r+0x300>)
 800c9da:	e6cd      	b.n	800c778 <_dtoa_r+0x28>
 800c9dc:	2301      	movs	r3, #1
 800c9de:	e7de      	b.n	800c99e <_dtoa_r+0x24e>
 800c9e0:	2300      	movs	r3, #0
 800c9e2:	930b      	str	r3, [sp, #44]	; 0x2c
 800c9e4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c9e6:	eb09 0b03 	add.w	fp, r9, r3
 800c9ea:	f10b 0301 	add.w	r3, fp, #1
 800c9ee:	2b01      	cmp	r3, #1
 800c9f0:	9302      	str	r3, [sp, #8]
 800c9f2:	bfb8      	it	lt
 800c9f4:	2301      	movlt	r3, #1
 800c9f6:	e7dd      	b.n	800c9b4 <_dtoa_r+0x264>
 800c9f8:	2301      	movs	r3, #1
 800c9fa:	e7f2      	b.n	800c9e2 <_dtoa_r+0x292>
 800c9fc:	2401      	movs	r4, #1
 800c9fe:	2300      	movs	r3, #0
 800ca00:	940b      	str	r4, [sp, #44]	; 0x2c
 800ca02:	9322      	str	r3, [sp, #136]	; 0x88
 800ca04:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800ca08:	2200      	movs	r2, #0
 800ca0a:	2312      	movs	r3, #18
 800ca0c:	f8cd b008 	str.w	fp, [sp, #8]
 800ca10:	9223      	str	r2, [sp, #140]	; 0x8c
 800ca12:	e7cf      	b.n	800c9b4 <_dtoa_r+0x264>
 800ca14:	f3af 8000 	nop.w
 800ca18:	636f4361 	.word	0x636f4361
 800ca1c:	3fd287a7 	.word	0x3fd287a7
 800ca20:	8b60c8b3 	.word	0x8b60c8b3
 800ca24:	3fc68a28 	.word	0x3fc68a28
 800ca28:	509f79fb 	.word	0x509f79fb
 800ca2c:	3fd34413 	.word	0x3fd34413
 800ca30:	0800f1d9 	.word	0x0800f1d9
 800ca34:	0800f1f0 	.word	0x0800f1f0
 800ca38:	7ff00000 	.word	0x7ff00000
 800ca3c:	0800f1d5 	.word	0x0800f1d5
 800ca40:	0800f1cc 	.word	0x0800f1cc
 800ca44:	0800f1a9 	.word	0x0800f1a9
 800ca48:	3ff80000 	.word	0x3ff80000
 800ca4c:	0800f2e8 	.word	0x0800f2e8
 800ca50:	0800f24f 	.word	0x0800f24f
 800ca54:	2301      	movs	r3, #1
 800ca56:	930b      	str	r3, [sp, #44]	; 0x2c
 800ca58:	e7d4      	b.n	800ca04 <_dtoa_r+0x2b4>
 800ca5a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800ca5e:	465b      	mov	r3, fp
 800ca60:	f8cd b008 	str.w	fp, [sp, #8]
 800ca64:	e7a6      	b.n	800c9b4 <_dtoa_r+0x264>
 800ca66:	3101      	adds	r1, #1
 800ca68:	6041      	str	r1, [r0, #4]
 800ca6a:	0052      	lsls	r2, r2, #1
 800ca6c:	e7a6      	b.n	800c9bc <_dtoa_r+0x26c>
 800ca6e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ca70:	9a08      	ldr	r2, [sp, #32]
 800ca72:	601a      	str	r2, [r3, #0]
 800ca74:	9b02      	ldr	r3, [sp, #8]
 800ca76:	2b0e      	cmp	r3, #14
 800ca78:	f200 80a8 	bhi.w	800cbcc <_dtoa_r+0x47c>
 800ca7c:	2c00      	cmp	r4, #0
 800ca7e:	f000 80a5 	beq.w	800cbcc <_dtoa_r+0x47c>
 800ca82:	f1b9 0f00 	cmp.w	r9, #0
 800ca86:	dd34      	ble.n	800caf2 <_dtoa_r+0x3a2>
 800ca88:	4a9a      	ldr	r2, [pc, #616]	; (800ccf4 <_dtoa_r+0x5a4>)
 800ca8a:	f009 030f 	and.w	r3, r9, #15
 800ca8e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ca92:	f419 7f80 	tst.w	r9, #256	; 0x100
 800ca96:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ca9a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800ca9e:	ea4f 1429 	mov.w	r4, r9, asr #4
 800caa2:	d016      	beq.n	800cad2 <_dtoa_r+0x382>
 800caa4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800caa8:	4b93      	ldr	r3, [pc, #588]	; (800ccf8 <_dtoa_r+0x5a8>)
 800caaa:	2703      	movs	r7, #3
 800caac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cab0:	f7f3 fe3c 	bl	800072c <__aeabi_ddiv>
 800cab4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cab8:	f004 040f 	and.w	r4, r4, #15
 800cabc:	4e8e      	ldr	r6, [pc, #568]	; (800ccf8 <_dtoa_r+0x5a8>)
 800cabe:	b954      	cbnz	r4, 800cad6 <_dtoa_r+0x386>
 800cac0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800cac4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cac8:	f7f3 fe30 	bl	800072c <__aeabi_ddiv>
 800cacc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cad0:	e029      	b.n	800cb26 <_dtoa_r+0x3d6>
 800cad2:	2702      	movs	r7, #2
 800cad4:	e7f2      	b.n	800cabc <_dtoa_r+0x36c>
 800cad6:	07e1      	lsls	r1, r4, #31
 800cad8:	d508      	bpl.n	800caec <_dtoa_r+0x39c>
 800cada:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800cade:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cae2:	f7f3 fcf9 	bl	80004d8 <__aeabi_dmul>
 800cae6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800caea:	3701      	adds	r7, #1
 800caec:	1064      	asrs	r4, r4, #1
 800caee:	3608      	adds	r6, #8
 800caf0:	e7e5      	b.n	800cabe <_dtoa_r+0x36e>
 800caf2:	f000 80a5 	beq.w	800cc40 <_dtoa_r+0x4f0>
 800caf6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cafa:	f1c9 0400 	rsb	r4, r9, #0
 800cafe:	4b7d      	ldr	r3, [pc, #500]	; (800ccf4 <_dtoa_r+0x5a4>)
 800cb00:	f004 020f 	and.w	r2, r4, #15
 800cb04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cb08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb0c:	f7f3 fce4 	bl	80004d8 <__aeabi_dmul>
 800cb10:	2702      	movs	r7, #2
 800cb12:	2300      	movs	r3, #0
 800cb14:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cb18:	4e77      	ldr	r6, [pc, #476]	; (800ccf8 <_dtoa_r+0x5a8>)
 800cb1a:	1124      	asrs	r4, r4, #4
 800cb1c:	2c00      	cmp	r4, #0
 800cb1e:	f040 8084 	bne.w	800cc2a <_dtoa_r+0x4da>
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d1d2      	bne.n	800cacc <_dtoa_r+0x37c>
 800cb26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	f000 808b 	beq.w	800cc44 <_dtoa_r+0x4f4>
 800cb2e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800cb32:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800cb36:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	4b6f      	ldr	r3, [pc, #444]	; (800ccfc <_dtoa_r+0x5ac>)
 800cb3e:	f7f3 ff3d 	bl	80009bc <__aeabi_dcmplt>
 800cb42:	2800      	cmp	r0, #0
 800cb44:	d07e      	beq.n	800cc44 <_dtoa_r+0x4f4>
 800cb46:	9b02      	ldr	r3, [sp, #8]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d07b      	beq.n	800cc44 <_dtoa_r+0x4f4>
 800cb4c:	f1bb 0f00 	cmp.w	fp, #0
 800cb50:	dd38      	ble.n	800cbc4 <_dtoa_r+0x474>
 800cb52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800cb56:	2200      	movs	r2, #0
 800cb58:	4b69      	ldr	r3, [pc, #420]	; (800cd00 <_dtoa_r+0x5b0>)
 800cb5a:	f7f3 fcbd 	bl	80004d8 <__aeabi_dmul>
 800cb5e:	465c      	mov	r4, fp
 800cb60:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cb64:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
 800cb68:	3701      	adds	r7, #1
 800cb6a:	4638      	mov	r0, r7
 800cb6c:	f7f3 fc4a 	bl	8000404 <__aeabi_i2d>
 800cb70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cb74:	f7f3 fcb0 	bl	80004d8 <__aeabi_dmul>
 800cb78:	2200      	movs	r2, #0
 800cb7a:	4b62      	ldr	r3, [pc, #392]	; (800cd04 <_dtoa_r+0x5b4>)
 800cb7c:	f7f3 faf6 	bl	800016c <__adddf3>
 800cb80:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800cb84:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800cb88:	9611      	str	r6, [sp, #68]	; 0x44
 800cb8a:	2c00      	cmp	r4, #0
 800cb8c:	d15d      	bne.n	800cc4a <_dtoa_r+0x4fa>
 800cb8e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cb92:	2200      	movs	r2, #0
 800cb94:	4b5c      	ldr	r3, [pc, #368]	; (800cd08 <_dtoa_r+0x5b8>)
 800cb96:	f7f3 fae7 	bl	8000168 <__aeabi_dsub>
 800cb9a:	4602      	mov	r2, r0
 800cb9c:	460b      	mov	r3, r1
 800cb9e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cba2:	4633      	mov	r3, r6
 800cba4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800cba6:	f7f3 ff27 	bl	80009f8 <__aeabi_dcmpgt>
 800cbaa:	2800      	cmp	r0, #0
 800cbac:	f040 829e 	bne.w	800d0ec <_dtoa_r+0x99c>
 800cbb0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cbb4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800cbb6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800cbba:	f7f3 feff 	bl	80009bc <__aeabi_dcmplt>
 800cbbe:	2800      	cmp	r0, #0
 800cbc0:	f040 8292 	bne.w	800d0e8 <_dtoa_r+0x998>
 800cbc4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800cbc8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800cbcc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	f2c0 8153 	blt.w	800ce7a <_dtoa_r+0x72a>
 800cbd4:	f1b9 0f0e 	cmp.w	r9, #14
 800cbd8:	f300 814f 	bgt.w	800ce7a <_dtoa_r+0x72a>
 800cbdc:	4b45      	ldr	r3, [pc, #276]	; (800ccf4 <_dtoa_r+0x5a4>)
 800cbde:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800cbe2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800cbe6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800cbea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	f280 80db 	bge.w	800cda8 <_dtoa_r+0x658>
 800cbf2:	9b02      	ldr	r3, [sp, #8]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	f300 80d7 	bgt.w	800cda8 <_dtoa_r+0x658>
 800cbfa:	f040 8274 	bne.w	800d0e6 <_dtoa_r+0x996>
 800cbfe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cc02:	2200      	movs	r2, #0
 800cc04:	4b40      	ldr	r3, [pc, #256]	; (800cd08 <_dtoa_r+0x5b8>)
 800cc06:	f7f3 fc67 	bl	80004d8 <__aeabi_dmul>
 800cc0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cc0e:	f7f3 fee9 	bl	80009e4 <__aeabi_dcmpge>
 800cc12:	9c02      	ldr	r4, [sp, #8]
 800cc14:	4626      	mov	r6, r4
 800cc16:	2800      	cmp	r0, #0
 800cc18:	f040 824a 	bne.w	800d0b0 <_dtoa_r+0x960>
 800cc1c:	2331      	movs	r3, #49	; 0x31
 800cc1e:	9f08      	ldr	r7, [sp, #32]
 800cc20:	f109 0901 	add.w	r9, r9, #1
 800cc24:	f807 3b01 	strb.w	r3, [r7], #1
 800cc28:	e246      	b.n	800d0b8 <_dtoa_r+0x968>
 800cc2a:	07e2      	lsls	r2, r4, #31
 800cc2c:	d505      	bpl.n	800cc3a <_dtoa_r+0x4ea>
 800cc2e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cc32:	f7f3 fc51 	bl	80004d8 <__aeabi_dmul>
 800cc36:	2301      	movs	r3, #1
 800cc38:	3701      	adds	r7, #1
 800cc3a:	1064      	asrs	r4, r4, #1
 800cc3c:	3608      	adds	r6, #8
 800cc3e:	e76d      	b.n	800cb1c <_dtoa_r+0x3cc>
 800cc40:	2702      	movs	r7, #2
 800cc42:	e770      	b.n	800cb26 <_dtoa_r+0x3d6>
 800cc44:	46c8      	mov	r8, r9
 800cc46:	9c02      	ldr	r4, [sp, #8]
 800cc48:	e78f      	b.n	800cb6a <_dtoa_r+0x41a>
 800cc4a:	9908      	ldr	r1, [sp, #32]
 800cc4c:	4b29      	ldr	r3, [pc, #164]	; (800ccf4 <_dtoa_r+0x5a4>)
 800cc4e:	4421      	add	r1, r4
 800cc50:	9112      	str	r1, [sp, #72]	; 0x48
 800cc52:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cc54:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cc58:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800cc5c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cc60:	2900      	cmp	r1, #0
 800cc62:	d055      	beq.n	800cd10 <_dtoa_r+0x5c0>
 800cc64:	2000      	movs	r0, #0
 800cc66:	4929      	ldr	r1, [pc, #164]	; (800cd0c <_dtoa_r+0x5bc>)
 800cc68:	f7f3 fd60 	bl	800072c <__aeabi_ddiv>
 800cc6c:	463b      	mov	r3, r7
 800cc6e:	4632      	mov	r2, r6
 800cc70:	f7f3 fa7a 	bl	8000168 <__aeabi_dsub>
 800cc74:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800cc78:	9f08      	ldr	r7, [sp, #32]
 800cc7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cc7e:	f7f3 fedb 	bl	8000a38 <__aeabi_d2iz>
 800cc82:	4604      	mov	r4, r0
 800cc84:	f7f3 fbbe 	bl	8000404 <__aeabi_i2d>
 800cc88:	4602      	mov	r2, r0
 800cc8a:	460b      	mov	r3, r1
 800cc8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cc90:	f7f3 fa6a 	bl	8000168 <__aeabi_dsub>
 800cc94:	4602      	mov	r2, r0
 800cc96:	460b      	mov	r3, r1
 800cc98:	3430      	adds	r4, #48	; 0x30
 800cc9a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cc9e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800cca2:	f807 4b01 	strb.w	r4, [r7], #1
 800cca6:	f7f3 fe89 	bl	80009bc <__aeabi_dcmplt>
 800ccaa:	2800      	cmp	r0, #0
 800ccac:	d174      	bne.n	800cd98 <_dtoa_r+0x648>
 800ccae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ccb2:	2000      	movs	r0, #0
 800ccb4:	4911      	ldr	r1, [pc, #68]	; (800ccfc <_dtoa_r+0x5ac>)
 800ccb6:	f7f3 fa57 	bl	8000168 <__aeabi_dsub>
 800ccba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ccbe:	f7f3 fe7d 	bl	80009bc <__aeabi_dcmplt>
 800ccc2:	2800      	cmp	r0, #0
 800ccc4:	f040 80b6 	bne.w	800ce34 <_dtoa_r+0x6e4>
 800ccc8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ccca:	429f      	cmp	r7, r3
 800cccc:	f43f af7a 	beq.w	800cbc4 <_dtoa_r+0x474>
 800ccd0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ccd4:	2200      	movs	r2, #0
 800ccd6:	4b0a      	ldr	r3, [pc, #40]	; (800cd00 <_dtoa_r+0x5b0>)
 800ccd8:	f7f3 fbfe 	bl	80004d8 <__aeabi_dmul>
 800ccdc:	2200      	movs	r2, #0
 800ccde:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800cce2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cce6:	4b06      	ldr	r3, [pc, #24]	; (800cd00 <_dtoa_r+0x5b0>)
 800cce8:	f7f3 fbf6 	bl	80004d8 <__aeabi_dmul>
 800ccec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ccf0:	e7c3      	b.n	800cc7a <_dtoa_r+0x52a>
 800ccf2:	bf00      	nop
 800ccf4:	0800f2e8 	.word	0x0800f2e8
 800ccf8:	0800f2c0 	.word	0x0800f2c0
 800ccfc:	3ff00000 	.word	0x3ff00000
 800cd00:	40240000 	.word	0x40240000
 800cd04:	401c0000 	.word	0x401c0000
 800cd08:	40140000 	.word	0x40140000
 800cd0c:	3fe00000 	.word	0x3fe00000
 800cd10:	4630      	mov	r0, r6
 800cd12:	4639      	mov	r1, r7
 800cd14:	f7f3 fbe0 	bl	80004d8 <__aeabi_dmul>
 800cd18:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cd1a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800cd1e:	9c08      	ldr	r4, [sp, #32]
 800cd20:	9314      	str	r3, [sp, #80]	; 0x50
 800cd22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cd26:	f7f3 fe87 	bl	8000a38 <__aeabi_d2iz>
 800cd2a:	9015      	str	r0, [sp, #84]	; 0x54
 800cd2c:	f7f3 fb6a 	bl	8000404 <__aeabi_i2d>
 800cd30:	4602      	mov	r2, r0
 800cd32:	460b      	mov	r3, r1
 800cd34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cd38:	f7f3 fa16 	bl	8000168 <__aeabi_dsub>
 800cd3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cd3e:	4606      	mov	r6, r0
 800cd40:	3330      	adds	r3, #48	; 0x30
 800cd42:	f804 3b01 	strb.w	r3, [r4], #1
 800cd46:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cd48:	460f      	mov	r7, r1
 800cd4a:	429c      	cmp	r4, r3
 800cd4c:	f04f 0200 	mov.w	r2, #0
 800cd50:	d124      	bne.n	800cd9c <_dtoa_r+0x64c>
 800cd52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800cd56:	4bb3      	ldr	r3, [pc, #716]	; (800d024 <_dtoa_r+0x8d4>)
 800cd58:	f7f3 fa08 	bl	800016c <__adddf3>
 800cd5c:	4602      	mov	r2, r0
 800cd5e:	460b      	mov	r3, r1
 800cd60:	4630      	mov	r0, r6
 800cd62:	4639      	mov	r1, r7
 800cd64:	f7f3 fe48 	bl	80009f8 <__aeabi_dcmpgt>
 800cd68:	2800      	cmp	r0, #0
 800cd6a:	d162      	bne.n	800ce32 <_dtoa_r+0x6e2>
 800cd6c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800cd70:	2000      	movs	r0, #0
 800cd72:	49ac      	ldr	r1, [pc, #688]	; (800d024 <_dtoa_r+0x8d4>)
 800cd74:	f7f3 f9f8 	bl	8000168 <__aeabi_dsub>
 800cd78:	4602      	mov	r2, r0
 800cd7a:	460b      	mov	r3, r1
 800cd7c:	4630      	mov	r0, r6
 800cd7e:	4639      	mov	r1, r7
 800cd80:	f7f3 fe1c 	bl	80009bc <__aeabi_dcmplt>
 800cd84:	2800      	cmp	r0, #0
 800cd86:	f43f af1d 	beq.w	800cbc4 <_dtoa_r+0x474>
 800cd8a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800cd8c:	1e7b      	subs	r3, r7, #1
 800cd8e:	9314      	str	r3, [sp, #80]	; 0x50
 800cd90:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800cd94:	2b30      	cmp	r3, #48	; 0x30
 800cd96:	d0f8      	beq.n	800cd8a <_dtoa_r+0x63a>
 800cd98:	46c1      	mov	r9, r8
 800cd9a:	e03a      	b.n	800ce12 <_dtoa_r+0x6c2>
 800cd9c:	4ba2      	ldr	r3, [pc, #648]	; (800d028 <_dtoa_r+0x8d8>)
 800cd9e:	f7f3 fb9b 	bl	80004d8 <__aeabi_dmul>
 800cda2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cda6:	e7bc      	b.n	800cd22 <_dtoa_r+0x5d2>
 800cda8:	9f08      	ldr	r7, [sp, #32]
 800cdaa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cdae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cdb2:	f7f3 fcbb 	bl	800072c <__aeabi_ddiv>
 800cdb6:	f7f3 fe3f 	bl	8000a38 <__aeabi_d2iz>
 800cdba:	4604      	mov	r4, r0
 800cdbc:	f7f3 fb22 	bl	8000404 <__aeabi_i2d>
 800cdc0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cdc4:	f7f3 fb88 	bl	80004d8 <__aeabi_dmul>
 800cdc8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800cdcc:	460b      	mov	r3, r1
 800cdce:	4602      	mov	r2, r0
 800cdd0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cdd4:	f7f3 f9c8 	bl	8000168 <__aeabi_dsub>
 800cdd8:	f807 6b01 	strb.w	r6, [r7], #1
 800cddc:	9e08      	ldr	r6, [sp, #32]
 800cdde:	9b02      	ldr	r3, [sp, #8]
 800cde0:	1bbe      	subs	r6, r7, r6
 800cde2:	42b3      	cmp	r3, r6
 800cde4:	d13a      	bne.n	800ce5c <_dtoa_r+0x70c>
 800cde6:	4602      	mov	r2, r0
 800cde8:	460b      	mov	r3, r1
 800cdea:	f7f3 f9bf 	bl	800016c <__adddf3>
 800cdee:	4602      	mov	r2, r0
 800cdf0:	460b      	mov	r3, r1
 800cdf2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cdf6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cdfa:	f7f3 fdfd 	bl	80009f8 <__aeabi_dcmpgt>
 800cdfe:	bb58      	cbnz	r0, 800ce58 <_dtoa_r+0x708>
 800ce00:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ce04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce08:	f7f3 fdce 	bl	80009a8 <__aeabi_dcmpeq>
 800ce0c:	b108      	cbz	r0, 800ce12 <_dtoa_r+0x6c2>
 800ce0e:	07e1      	lsls	r1, r4, #31
 800ce10:	d422      	bmi.n	800ce58 <_dtoa_r+0x708>
 800ce12:	4628      	mov	r0, r5
 800ce14:	4651      	mov	r1, sl
 800ce16:	f000 faf1 	bl	800d3fc <_Bfree>
 800ce1a:	2300      	movs	r3, #0
 800ce1c:	703b      	strb	r3, [r7, #0]
 800ce1e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800ce20:	f109 0001 	add.w	r0, r9, #1
 800ce24:	6018      	str	r0, [r3, #0]
 800ce26:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	f43f acdf 	beq.w	800c7ec <_dtoa_r+0x9c>
 800ce2e:	601f      	str	r7, [r3, #0]
 800ce30:	e4dc      	b.n	800c7ec <_dtoa_r+0x9c>
 800ce32:	4627      	mov	r7, r4
 800ce34:	463b      	mov	r3, r7
 800ce36:	461f      	mov	r7, r3
 800ce38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ce3c:	2a39      	cmp	r2, #57	; 0x39
 800ce3e:	d107      	bne.n	800ce50 <_dtoa_r+0x700>
 800ce40:	9a08      	ldr	r2, [sp, #32]
 800ce42:	429a      	cmp	r2, r3
 800ce44:	d1f7      	bne.n	800ce36 <_dtoa_r+0x6e6>
 800ce46:	2230      	movs	r2, #48	; 0x30
 800ce48:	9908      	ldr	r1, [sp, #32]
 800ce4a:	f108 0801 	add.w	r8, r8, #1
 800ce4e:	700a      	strb	r2, [r1, #0]
 800ce50:	781a      	ldrb	r2, [r3, #0]
 800ce52:	3201      	adds	r2, #1
 800ce54:	701a      	strb	r2, [r3, #0]
 800ce56:	e79f      	b.n	800cd98 <_dtoa_r+0x648>
 800ce58:	46c8      	mov	r8, r9
 800ce5a:	e7eb      	b.n	800ce34 <_dtoa_r+0x6e4>
 800ce5c:	2200      	movs	r2, #0
 800ce5e:	4b72      	ldr	r3, [pc, #456]	; (800d028 <_dtoa_r+0x8d8>)
 800ce60:	f7f3 fb3a 	bl	80004d8 <__aeabi_dmul>
 800ce64:	4602      	mov	r2, r0
 800ce66:	460b      	mov	r3, r1
 800ce68:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ce6c:	2200      	movs	r2, #0
 800ce6e:	2300      	movs	r3, #0
 800ce70:	f7f3 fd9a 	bl	80009a8 <__aeabi_dcmpeq>
 800ce74:	2800      	cmp	r0, #0
 800ce76:	d098      	beq.n	800cdaa <_dtoa_r+0x65a>
 800ce78:	e7cb      	b.n	800ce12 <_dtoa_r+0x6c2>
 800ce7a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ce7c:	2a00      	cmp	r2, #0
 800ce7e:	f000 80cd 	beq.w	800d01c <_dtoa_r+0x8cc>
 800ce82:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800ce84:	2a01      	cmp	r2, #1
 800ce86:	f300 80af 	bgt.w	800cfe8 <_dtoa_r+0x898>
 800ce8a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ce8c:	2a00      	cmp	r2, #0
 800ce8e:	f000 80a7 	beq.w	800cfe0 <_dtoa_r+0x890>
 800ce92:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ce96:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ce98:	9f06      	ldr	r7, [sp, #24]
 800ce9a:	9a06      	ldr	r2, [sp, #24]
 800ce9c:	2101      	movs	r1, #1
 800ce9e:	441a      	add	r2, r3
 800cea0:	9206      	str	r2, [sp, #24]
 800cea2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cea4:	4628      	mov	r0, r5
 800cea6:	441a      	add	r2, r3
 800cea8:	9209      	str	r2, [sp, #36]	; 0x24
 800ceaa:	f000 fb61 	bl	800d570 <__i2b>
 800ceae:	4606      	mov	r6, r0
 800ceb0:	2f00      	cmp	r7, #0
 800ceb2:	dd0c      	ble.n	800cece <_dtoa_r+0x77e>
 800ceb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	dd09      	ble.n	800cece <_dtoa_r+0x77e>
 800ceba:	42bb      	cmp	r3, r7
 800cebc:	bfa8      	it	ge
 800cebe:	463b      	movge	r3, r7
 800cec0:	9a06      	ldr	r2, [sp, #24]
 800cec2:	1aff      	subs	r7, r7, r3
 800cec4:	1ad2      	subs	r2, r2, r3
 800cec6:	9206      	str	r2, [sp, #24]
 800cec8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ceca:	1ad3      	subs	r3, r2, r3
 800cecc:	9309      	str	r3, [sp, #36]	; 0x24
 800cece:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ced0:	b1f3      	cbz	r3, 800cf10 <_dtoa_r+0x7c0>
 800ced2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	f000 80a9 	beq.w	800d02c <_dtoa_r+0x8dc>
 800ceda:	2c00      	cmp	r4, #0
 800cedc:	dd10      	ble.n	800cf00 <_dtoa_r+0x7b0>
 800cede:	4631      	mov	r1, r6
 800cee0:	4622      	mov	r2, r4
 800cee2:	4628      	mov	r0, r5
 800cee4:	f000 fbfe 	bl	800d6e4 <__pow5mult>
 800cee8:	4652      	mov	r2, sl
 800ceea:	4601      	mov	r1, r0
 800ceec:	4606      	mov	r6, r0
 800ceee:	4628      	mov	r0, r5
 800cef0:	f000 fb54 	bl	800d59c <__multiply>
 800cef4:	4680      	mov	r8, r0
 800cef6:	4651      	mov	r1, sl
 800cef8:	4628      	mov	r0, r5
 800cefa:	f000 fa7f 	bl	800d3fc <_Bfree>
 800cefe:	46c2      	mov	sl, r8
 800cf00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf02:	1b1a      	subs	r2, r3, r4
 800cf04:	d004      	beq.n	800cf10 <_dtoa_r+0x7c0>
 800cf06:	4651      	mov	r1, sl
 800cf08:	4628      	mov	r0, r5
 800cf0a:	f000 fbeb 	bl	800d6e4 <__pow5mult>
 800cf0e:	4682      	mov	sl, r0
 800cf10:	2101      	movs	r1, #1
 800cf12:	4628      	mov	r0, r5
 800cf14:	f000 fb2c 	bl	800d570 <__i2b>
 800cf18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cf1a:	4604      	mov	r4, r0
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	f340 8087 	ble.w	800d030 <_dtoa_r+0x8e0>
 800cf22:	461a      	mov	r2, r3
 800cf24:	4601      	mov	r1, r0
 800cf26:	4628      	mov	r0, r5
 800cf28:	f000 fbdc 	bl	800d6e4 <__pow5mult>
 800cf2c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cf2e:	4604      	mov	r4, r0
 800cf30:	2b01      	cmp	r3, #1
 800cf32:	f340 8080 	ble.w	800d036 <_dtoa_r+0x8e6>
 800cf36:	f04f 0800 	mov.w	r8, #0
 800cf3a:	6923      	ldr	r3, [r4, #16]
 800cf3c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cf40:	6918      	ldr	r0, [r3, #16]
 800cf42:	f000 fac7 	bl	800d4d4 <__hi0bits>
 800cf46:	f1c0 0020 	rsb	r0, r0, #32
 800cf4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf4c:	4418      	add	r0, r3
 800cf4e:	f010 001f 	ands.w	r0, r0, #31
 800cf52:	f000 8092 	beq.w	800d07a <_dtoa_r+0x92a>
 800cf56:	f1c0 0320 	rsb	r3, r0, #32
 800cf5a:	2b04      	cmp	r3, #4
 800cf5c:	f340 808a 	ble.w	800d074 <_dtoa_r+0x924>
 800cf60:	f1c0 001c 	rsb	r0, r0, #28
 800cf64:	9b06      	ldr	r3, [sp, #24]
 800cf66:	4407      	add	r7, r0
 800cf68:	4403      	add	r3, r0
 800cf6a:	9306      	str	r3, [sp, #24]
 800cf6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf6e:	4403      	add	r3, r0
 800cf70:	9309      	str	r3, [sp, #36]	; 0x24
 800cf72:	9b06      	ldr	r3, [sp, #24]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	dd05      	ble.n	800cf84 <_dtoa_r+0x834>
 800cf78:	4651      	mov	r1, sl
 800cf7a:	461a      	mov	r2, r3
 800cf7c:	4628      	mov	r0, r5
 800cf7e:	f000 fc0b 	bl	800d798 <__lshift>
 800cf82:	4682      	mov	sl, r0
 800cf84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	dd05      	ble.n	800cf96 <_dtoa_r+0x846>
 800cf8a:	4621      	mov	r1, r4
 800cf8c:	461a      	mov	r2, r3
 800cf8e:	4628      	mov	r0, r5
 800cf90:	f000 fc02 	bl	800d798 <__lshift>
 800cf94:	4604      	mov	r4, r0
 800cf96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d070      	beq.n	800d07e <_dtoa_r+0x92e>
 800cf9c:	4621      	mov	r1, r4
 800cf9e:	4650      	mov	r0, sl
 800cfa0:	f000 fc66 	bl	800d870 <__mcmp>
 800cfa4:	2800      	cmp	r0, #0
 800cfa6:	da6a      	bge.n	800d07e <_dtoa_r+0x92e>
 800cfa8:	2300      	movs	r3, #0
 800cfaa:	4651      	mov	r1, sl
 800cfac:	220a      	movs	r2, #10
 800cfae:	4628      	mov	r0, r5
 800cfb0:	f000 fa46 	bl	800d440 <__multadd>
 800cfb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cfb6:	4682      	mov	sl, r0
 800cfb8:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	f000 8193 	beq.w	800d2e8 <_dtoa_r+0xb98>
 800cfc2:	4631      	mov	r1, r6
 800cfc4:	2300      	movs	r3, #0
 800cfc6:	220a      	movs	r2, #10
 800cfc8:	4628      	mov	r0, r5
 800cfca:	f000 fa39 	bl	800d440 <__multadd>
 800cfce:	f1bb 0f00 	cmp.w	fp, #0
 800cfd2:	4606      	mov	r6, r0
 800cfd4:	f300 8093 	bgt.w	800d0fe <_dtoa_r+0x9ae>
 800cfd8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cfda:	2b02      	cmp	r3, #2
 800cfdc:	dc57      	bgt.n	800d08e <_dtoa_r+0x93e>
 800cfde:	e08e      	b.n	800d0fe <_dtoa_r+0x9ae>
 800cfe0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800cfe2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cfe6:	e756      	b.n	800ce96 <_dtoa_r+0x746>
 800cfe8:	9b02      	ldr	r3, [sp, #8]
 800cfea:	1e5c      	subs	r4, r3, #1
 800cfec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cfee:	42a3      	cmp	r3, r4
 800cff0:	bfb7      	itett	lt
 800cff2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800cff4:	1b1c      	subge	r4, r3, r4
 800cff6:	1ae2      	sublt	r2, r4, r3
 800cff8:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800cffa:	bfbe      	ittt	lt
 800cffc:	940a      	strlt	r4, [sp, #40]	; 0x28
 800cffe:	189b      	addlt	r3, r3, r2
 800d000:	930e      	strlt	r3, [sp, #56]	; 0x38
 800d002:	9b02      	ldr	r3, [sp, #8]
 800d004:	bfb8      	it	lt
 800d006:	2400      	movlt	r4, #0
 800d008:	2b00      	cmp	r3, #0
 800d00a:	bfbb      	ittet	lt
 800d00c:	9b06      	ldrlt	r3, [sp, #24]
 800d00e:	9a02      	ldrlt	r2, [sp, #8]
 800d010:	9f06      	ldrge	r7, [sp, #24]
 800d012:	1a9f      	sublt	r7, r3, r2
 800d014:	bfac      	ite	ge
 800d016:	9b02      	ldrge	r3, [sp, #8]
 800d018:	2300      	movlt	r3, #0
 800d01a:	e73e      	b.n	800ce9a <_dtoa_r+0x74a>
 800d01c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d01e:	9f06      	ldr	r7, [sp, #24]
 800d020:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800d022:	e745      	b.n	800ceb0 <_dtoa_r+0x760>
 800d024:	3fe00000 	.word	0x3fe00000
 800d028:	40240000 	.word	0x40240000
 800d02c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d02e:	e76a      	b.n	800cf06 <_dtoa_r+0x7b6>
 800d030:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d032:	2b01      	cmp	r3, #1
 800d034:	dc19      	bgt.n	800d06a <_dtoa_r+0x91a>
 800d036:	9b04      	ldr	r3, [sp, #16]
 800d038:	b9bb      	cbnz	r3, 800d06a <_dtoa_r+0x91a>
 800d03a:	9b05      	ldr	r3, [sp, #20]
 800d03c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d040:	b99b      	cbnz	r3, 800d06a <_dtoa_r+0x91a>
 800d042:	9b05      	ldr	r3, [sp, #20]
 800d044:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d048:	0d1b      	lsrs	r3, r3, #20
 800d04a:	051b      	lsls	r3, r3, #20
 800d04c:	b183      	cbz	r3, 800d070 <_dtoa_r+0x920>
 800d04e:	f04f 0801 	mov.w	r8, #1
 800d052:	9b06      	ldr	r3, [sp, #24]
 800d054:	3301      	adds	r3, #1
 800d056:	9306      	str	r3, [sp, #24]
 800d058:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d05a:	3301      	adds	r3, #1
 800d05c:	9309      	str	r3, [sp, #36]	; 0x24
 800d05e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d060:	2b00      	cmp	r3, #0
 800d062:	f47f af6a 	bne.w	800cf3a <_dtoa_r+0x7ea>
 800d066:	2001      	movs	r0, #1
 800d068:	e76f      	b.n	800cf4a <_dtoa_r+0x7fa>
 800d06a:	f04f 0800 	mov.w	r8, #0
 800d06e:	e7f6      	b.n	800d05e <_dtoa_r+0x90e>
 800d070:	4698      	mov	r8, r3
 800d072:	e7f4      	b.n	800d05e <_dtoa_r+0x90e>
 800d074:	f43f af7d 	beq.w	800cf72 <_dtoa_r+0x822>
 800d078:	4618      	mov	r0, r3
 800d07a:	301c      	adds	r0, #28
 800d07c:	e772      	b.n	800cf64 <_dtoa_r+0x814>
 800d07e:	9b02      	ldr	r3, [sp, #8]
 800d080:	2b00      	cmp	r3, #0
 800d082:	dc36      	bgt.n	800d0f2 <_dtoa_r+0x9a2>
 800d084:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d086:	2b02      	cmp	r3, #2
 800d088:	dd33      	ble.n	800d0f2 <_dtoa_r+0x9a2>
 800d08a:	f8dd b008 	ldr.w	fp, [sp, #8]
 800d08e:	f1bb 0f00 	cmp.w	fp, #0
 800d092:	d10d      	bne.n	800d0b0 <_dtoa_r+0x960>
 800d094:	4621      	mov	r1, r4
 800d096:	465b      	mov	r3, fp
 800d098:	2205      	movs	r2, #5
 800d09a:	4628      	mov	r0, r5
 800d09c:	f000 f9d0 	bl	800d440 <__multadd>
 800d0a0:	4601      	mov	r1, r0
 800d0a2:	4604      	mov	r4, r0
 800d0a4:	4650      	mov	r0, sl
 800d0a6:	f000 fbe3 	bl	800d870 <__mcmp>
 800d0aa:	2800      	cmp	r0, #0
 800d0ac:	f73f adb6 	bgt.w	800cc1c <_dtoa_r+0x4cc>
 800d0b0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d0b2:	9f08      	ldr	r7, [sp, #32]
 800d0b4:	ea6f 0903 	mvn.w	r9, r3
 800d0b8:	f04f 0800 	mov.w	r8, #0
 800d0bc:	4621      	mov	r1, r4
 800d0be:	4628      	mov	r0, r5
 800d0c0:	f000 f99c 	bl	800d3fc <_Bfree>
 800d0c4:	2e00      	cmp	r6, #0
 800d0c6:	f43f aea4 	beq.w	800ce12 <_dtoa_r+0x6c2>
 800d0ca:	f1b8 0f00 	cmp.w	r8, #0
 800d0ce:	d005      	beq.n	800d0dc <_dtoa_r+0x98c>
 800d0d0:	45b0      	cmp	r8, r6
 800d0d2:	d003      	beq.n	800d0dc <_dtoa_r+0x98c>
 800d0d4:	4641      	mov	r1, r8
 800d0d6:	4628      	mov	r0, r5
 800d0d8:	f000 f990 	bl	800d3fc <_Bfree>
 800d0dc:	4631      	mov	r1, r6
 800d0de:	4628      	mov	r0, r5
 800d0e0:	f000 f98c 	bl	800d3fc <_Bfree>
 800d0e4:	e695      	b.n	800ce12 <_dtoa_r+0x6c2>
 800d0e6:	2400      	movs	r4, #0
 800d0e8:	4626      	mov	r6, r4
 800d0ea:	e7e1      	b.n	800d0b0 <_dtoa_r+0x960>
 800d0ec:	46c1      	mov	r9, r8
 800d0ee:	4626      	mov	r6, r4
 800d0f0:	e594      	b.n	800cc1c <_dtoa_r+0x4cc>
 800d0f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d0f4:	f8dd b008 	ldr.w	fp, [sp, #8]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	f000 80fc 	beq.w	800d2f6 <_dtoa_r+0xba6>
 800d0fe:	2f00      	cmp	r7, #0
 800d100:	dd05      	ble.n	800d10e <_dtoa_r+0x9be>
 800d102:	4631      	mov	r1, r6
 800d104:	463a      	mov	r2, r7
 800d106:	4628      	mov	r0, r5
 800d108:	f000 fb46 	bl	800d798 <__lshift>
 800d10c:	4606      	mov	r6, r0
 800d10e:	f1b8 0f00 	cmp.w	r8, #0
 800d112:	d05c      	beq.n	800d1ce <_dtoa_r+0xa7e>
 800d114:	4628      	mov	r0, r5
 800d116:	6871      	ldr	r1, [r6, #4]
 800d118:	f000 f930 	bl	800d37c <_Balloc>
 800d11c:	4607      	mov	r7, r0
 800d11e:	b928      	cbnz	r0, 800d12c <_dtoa_r+0x9dc>
 800d120:	4602      	mov	r2, r0
 800d122:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d126:	4b7e      	ldr	r3, [pc, #504]	; (800d320 <_dtoa_r+0xbd0>)
 800d128:	f7ff bb26 	b.w	800c778 <_dtoa_r+0x28>
 800d12c:	6932      	ldr	r2, [r6, #16]
 800d12e:	f106 010c 	add.w	r1, r6, #12
 800d132:	3202      	adds	r2, #2
 800d134:	0092      	lsls	r2, r2, #2
 800d136:	300c      	adds	r0, #12
 800d138:	f000 f912 	bl	800d360 <memcpy>
 800d13c:	2201      	movs	r2, #1
 800d13e:	4639      	mov	r1, r7
 800d140:	4628      	mov	r0, r5
 800d142:	f000 fb29 	bl	800d798 <__lshift>
 800d146:	46b0      	mov	r8, r6
 800d148:	4606      	mov	r6, r0
 800d14a:	9b08      	ldr	r3, [sp, #32]
 800d14c:	3301      	adds	r3, #1
 800d14e:	9302      	str	r3, [sp, #8]
 800d150:	9b08      	ldr	r3, [sp, #32]
 800d152:	445b      	add	r3, fp
 800d154:	930a      	str	r3, [sp, #40]	; 0x28
 800d156:	9b04      	ldr	r3, [sp, #16]
 800d158:	f003 0301 	and.w	r3, r3, #1
 800d15c:	9309      	str	r3, [sp, #36]	; 0x24
 800d15e:	9b02      	ldr	r3, [sp, #8]
 800d160:	4621      	mov	r1, r4
 800d162:	4650      	mov	r0, sl
 800d164:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800d168:	f7ff fa64 	bl	800c634 <quorem>
 800d16c:	4603      	mov	r3, r0
 800d16e:	4641      	mov	r1, r8
 800d170:	3330      	adds	r3, #48	; 0x30
 800d172:	9004      	str	r0, [sp, #16]
 800d174:	4650      	mov	r0, sl
 800d176:	930b      	str	r3, [sp, #44]	; 0x2c
 800d178:	f000 fb7a 	bl	800d870 <__mcmp>
 800d17c:	4632      	mov	r2, r6
 800d17e:	9006      	str	r0, [sp, #24]
 800d180:	4621      	mov	r1, r4
 800d182:	4628      	mov	r0, r5
 800d184:	f000 fb90 	bl	800d8a8 <__mdiff>
 800d188:	68c2      	ldr	r2, [r0, #12]
 800d18a:	4607      	mov	r7, r0
 800d18c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d18e:	bb02      	cbnz	r2, 800d1d2 <_dtoa_r+0xa82>
 800d190:	4601      	mov	r1, r0
 800d192:	4650      	mov	r0, sl
 800d194:	f000 fb6c 	bl	800d870 <__mcmp>
 800d198:	4602      	mov	r2, r0
 800d19a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d19c:	4639      	mov	r1, r7
 800d19e:	4628      	mov	r0, r5
 800d1a0:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800d1a4:	f000 f92a 	bl	800d3fc <_Bfree>
 800d1a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d1aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d1ac:	9f02      	ldr	r7, [sp, #8]
 800d1ae:	ea43 0102 	orr.w	r1, r3, r2
 800d1b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1b4:	430b      	orrs	r3, r1
 800d1b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d1b8:	d10d      	bne.n	800d1d6 <_dtoa_r+0xa86>
 800d1ba:	2b39      	cmp	r3, #57	; 0x39
 800d1bc:	d027      	beq.n	800d20e <_dtoa_r+0xabe>
 800d1be:	9a06      	ldr	r2, [sp, #24]
 800d1c0:	2a00      	cmp	r2, #0
 800d1c2:	dd01      	ble.n	800d1c8 <_dtoa_r+0xa78>
 800d1c4:	9b04      	ldr	r3, [sp, #16]
 800d1c6:	3331      	adds	r3, #49	; 0x31
 800d1c8:	f88b 3000 	strb.w	r3, [fp]
 800d1cc:	e776      	b.n	800d0bc <_dtoa_r+0x96c>
 800d1ce:	4630      	mov	r0, r6
 800d1d0:	e7b9      	b.n	800d146 <_dtoa_r+0x9f6>
 800d1d2:	2201      	movs	r2, #1
 800d1d4:	e7e2      	b.n	800d19c <_dtoa_r+0xa4c>
 800d1d6:	9906      	ldr	r1, [sp, #24]
 800d1d8:	2900      	cmp	r1, #0
 800d1da:	db04      	blt.n	800d1e6 <_dtoa_r+0xa96>
 800d1dc:	9822      	ldr	r0, [sp, #136]	; 0x88
 800d1de:	4301      	orrs	r1, r0
 800d1e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d1e2:	4301      	orrs	r1, r0
 800d1e4:	d120      	bne.n	800d228 <_dtoa_r+0xad8>
 800d1e6:	2a00      	cmp	r2, #0
 800d1e8:	ddee      	ble.n	800d1c8 <_dtoa_r+0xa78>
 800d1ea:	4651      	mov	r1, sl
 800d1ec:	2201      	movs	r2, #1
 800d1ee:	4628      	mov	r0, r5
 800d1f0:	9302      	str	r3, [sp, #8]
 800d1f2:	f000 fad1 	bl	800d798 <__lshift>
 800d1f6:	4621      	mov	r1, r4
 800d1f8:	4682      	mov	sl, r0
 800d1fa:	f000 fb39 	bl	800d870 <__mcmp>
 800d1fe:	2800      	cmp	r0, #0
 800d200:	9b02      	ldr	r3, [sp, #8]
 800d202:	dc02      	bgt.n	800d20a <_dtoa_r+0xaba>
 800d204:	d1e0      	bne.n	800d1c8 <_dtoa_r+0xa78>
 800d206:	07da      	lsls	r2, r3, #31
 800d208:	d5de      	bpl.n	800d1c8 <_dtoa_r+0xa78>
 800d20a:	2b39      	cmp	r3, #57	; 0x39
 800d20c:	d1da      	bne.n	800d1c4 <_dtoa_r+0xa74>
 800d20e:	2339      	movs	r3, #57	; 0x39
 800d210:	f88b 3000 	strb.w	r3, [fp]
 800d214:	463b      	mov	r3, r7
 800d216:	461f      	mov	r7, r3
 800d218:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800d21c:	3b01      	subs	r3, #1
 800d21e:	2a39      	cmp	r2, #57	; 0x39
 800d220:	d050      	beq.n	800d2c4 <_dtoa_r+0xb74>
 800d222:	3201      	adds	r2, #1
 800d224:	701a      	strb	r2, [r3, #0]
 800d226:	e749      	b.n	800d0bc <_dtoa_r+0x96c>
 800d228:	2a00      	cmp	r2, #0
 800d22a:	dd03      	ble.n	800d234 <_dtoa_r+0xae4>
 800d22c:	2b39      	cmp	r3, #57	; 0x39
 800d22e:	d0ee      	beq.n	800d20e <_dtoa_r+0xabe>
 800d230:	3301      	adds	r3, #1
 800d232:	e7c9      	b.n	800d1c8 <_dtoa_r+0xa78>
 800d234:	9a02      	ldr	r2, [sp, #8]
 800d236:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d238:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d23c:	428a      	cmp	r2, r1
 800d23e:	d02a      	beq.n	800d296 <_dtoa_r+0xb46>
 800d240:	4651      	mov	r1, sl
 800d242:	2300      	movs	r3, #0
 800d244:	220a      	movs	r2, #10
 800d246:	4628      	mov	r0, r5
 800d248:	f000 f8fa 	bl	800d440 <__multadd>
 800d24c:	45b0      	cmp	r8, r6
 800d24e:	4682      	mov	sl, r0
 800d250:	f04f 0300 	mov.w	r3, #0
 800d254:	f04f 020a 	mov.w	r2, #10
 800d258:	4641      	mov	r1, r8
 800d25a:	4628      	mov	r0, r5
 800d25c:	d107      	bne.n	800d26e <_dtoa_r+0xb1e>
 800d25e:	f000 f8ef 	bl	800d440 <__multadd>
 800d262:	4680      	mov	r8, r0
 800d264:	4606      	mov	r6, r0
 800d266:	9b02      	ldr	r3, [sp, #8]
 800d268:	3301      	adds	r3, #1
 800d26a:	9302      	str	r3, [sp, #8]
 800d26c:	e777      	b.n	800d15e <_dtoa_r+0xa0e>
 800d26e:	f000 f8e7 	bl	800d440 <__multadd>
 800d272:	4631      	mov	r1, r6
 800d274:	4680      	mov	r8, r0
 800d276:	2300      	movs	r3, #0
 800d278:	220a      	movs	r2, #10
 800d27a:	4628      	mov	r0, r5
 800d27c:	f000 f8e0 	bl	800d440 <__multadd>
 800d280:	4606      	mov	r6, r0
 800d282:	e7f0      	b.n	800d266 <_dtoa_r+0xb16>
 800d284:	f1bb 0f00 	cmp.w	fp, #0
 800d288:	bfcc      	ite	gt
 800d28a:	465f      	movgt	r7, fp
 800d28c:	2701      	movle	r7, #1
 800d28e:	f04f 0800 	mov.w	r8, #0
 800d292:	9a08      	ldr	r2, [sp, #32]
 800d294:	4417      	add	r7, r2
 800d296:	4651      	mov	r1, sl
 800d298:	2201      	movs	r2, #1
 800d29a:	4628      	mov	r0, r5
 800d29c:	9302      	str	r3, [sp, #8]
 800d29e:	f000 fa7b 	bl	800d798 <__lshift>
 800d2a2:	4621      	mov	r1, r4
 800d2a4:	4682      	mov	sl, r0
 800d2a6:	f000 fae3 	bl	800d870 <__mcmp>
 800d2aa:	2800      	cmp	r0, #0
 800d2ac:	dcb2      	bgt.n	800d214 <_dtoa_r+0xac4>
 800d2ae:	d102      	bne.n	800d2b6 <_dtoa_r+0xb66>
 800d2b0:	9b02      	ldr	r3, [sp, #8]
 800d2b2:	07db      	lsls	r3, r3, #31
 800d2b4:	d4ae      	bmi.n	800d214 <_dtoa_r+0xac4>
 800d2b6:	463b      	mov	r3, r7
 800d2b8:	461f      	mov	r7, r3
 800d2ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d2be:	2a30      	cmp	r2, #48	; 0x30
 800d2c0:	d0fa      	beq.n	800d2b8 <_dtoa_r+0xb68>
 800d2c2:	e6fb      	b.n	800d0bc <_dtoa_r+0x96c>
 800d2c4:	9a08      	ldr	r2, [sp, #32]
 800d2c6:	429a      	cmp	r2, r3
 800d2c8:	d1a5      	bne.n	800d216 <_dtoa_r+0xac6>
 800d2ca:	2331      	movs	r3, #49	; 0x31
 800d2cc:	f109 0901 	add.w	r9, r9, #1
 800d2d0:	7013      	strb	r3, [r2, #0]
 800d2d2:	e6f3      	b.n	800d0bc <_dtoa_r+0x96c>
 800d2d4:	4b13      	ldr	r3, [pc, #76]	; (800d324 <_dtoa_r+0xbd4>)
 800d2d6:	f7ff baa7 	b.w	800c828 <_dtoa_r+0xd8>
 800d2da:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	f47f aa80 	bne.w	800c7e2 <_dtoa_r+0x92>
 800d2e2:	4b11      	ldr	r3, [pc, #68]	; (800d328 <_dtoa_r+0xbd8>)
 800d2e4:	f7ff baa0 	b.w	800c828 <_dtoa_r+0xd8>
 800d2e8:	f1bb 0f00 	cmp.w	fp, #0
 800d2ec:	dc03      	bgt.n	800d2f6 <_dtoa_r+0xba6>
 800d2ee:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d2f0:	2b02      	cmp	r3, #2
 800d2f2:	f73f aecc 	bgt.w	800d08e <_dtoa_r+0x93e>
 800d2f6:	9f08      	ldr	r7, [sp, #32]
 800d2f8:	4621      	mov	r1, r4
 800d2fa:	4650      	mov	r0, sl
 800d2fc:	f7ff f99a 	bl	800c634 <quorem>
 800d300:	9a08      	ldr	r2, [sp, #32]
 800d302:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800d306:	f807 3b01 	strb.w	r3, [r7], #1
 800d30a:	1aba      	subs	r2, r7, r2
 800d30c:	4593      	cmp	fp, r2
 800d30e:	ddb9      	ble.n	800d284 <_dtoa_r+0xb34>
 800d310:	4651      	mov	r1, sl
 800d312:	2300      	movs	r3, #0
 800d314:	220a      	movs	r2, #10
 800d316:	4628      	mov	r0, r5
 800d318:	f000 f892 	bl	800d440 <__multadd>
 800d31c:	4682      	mov	sl, r0
 800d31e:	e7eb      	b.n	800d2f8 <_dtoa_r+0xba8>
 800d320:	0800f24f 	.word	0x0800f24f
 800d324:	0800f1a8 	.word	0x0800f1a8
 800d328:	0800f1cc 	.word	0x0800f1cc

0800d32c <_localeconv_r>:
 800d32c:	4800      	ldr	r0, [pc, #0]	; (800d330 <_localeconv_r+0x4>)
 800d32e:	4770      	bx	lr
 800d330:	2000034c 	.word	0x2000034c

0800d334 <malloc>:
 800d334:	4b02      	ldr	r3, [pc, #8]	; (800d340 <malloc+0xc>)
 800d336:	4601      	mov	r1, r0
 800d338:	6818      	ldr	r0, [r3, #0]
 800d33a:	f000 bbfb 	b.w	800db34 <_malloc_r>
 800d33e:	bf00      	nop
 800d340:	200001f8 	.word	0x200001f8

0800d344 <memchr>:
 800d344:	4603      	mov	r3, r0
 800d346:	b510      	push	{r4, lr}
 800d348:	b2c9      	uxtb	r1, r1
 800d34a:	4402      	add	r2, r0
 800d34c:	4293      	cmp	r3, r2
 800d34e:	4618      	mov	r0, r3
 800d350:	d101      	bne.n	800d356 <memchr+0x12>
 800d352:	2000      	movs	r0, #0
 800d354:	e003      	b.n	800d35e <memchr+0x1a>
 800d356:	7804      	ldrb	r4, [r0, #0]
 800d358:	3301      	adds	r3, #1
 800d35a:	428c      	cmp	r4, r1
 800d35c:	d1f6      	bne.n	800d34c <memchr+0x8>
 800d35e:	bd10      	pop	{r4, pc}

0800d360 <memcpy>:
 800d360:	440a      	add	r2, r1
 800d362:	4291      	cmp	r1, r2
 800d364:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d368:	d100      	bne.n	800d36c <memcpy+0xc>
 800d36a:	4770      	bx	lr
 800d36c:	b510      	push	{r4, lr}
 800d36e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d372:	4291      	cmp	r1, r2
 800d374:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d378:	d1f9      	bne.n	800d36e <memcpy+0xe>
 800d37a:	bd10      	pop	{r4, pc}

0800d37c <_Balloc>:
 800d37c:	b570      	push	{r4, r5, r6, lr}
 800d37e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d380:	4604      	mov	r4, r0
 800d382:	460d      	mov	r5, r1
 800d384:	b976      	cbnz	r6, 800d3a4 <_Balloc+0x28>
 800d386:	2010      	movs	r0, #16
 800d388:	f7ff ffd4 	bl	800d334 <malloc>
 800d38c:	4602      	mov	r2, r0
 800d38e:	6260      	str	r0, [r4, #36]	; 0x24
 800d390:	b920      	cbnz	r0, 800d39c <_Balloc+0x20>
 800d392:	2166      	movs	r1, #102	; 0x66
 800d394:	4b17      	ldr	r3, [pc, #92]	; (800d3f4 <_Balloc+0x78>)
 800d396:	4818      	ldr	r0, [pc, #96]	; (800d3f8 <_Balloc+0x7c>)
 800d398:	f000 fd92 	bl	800dec0 <__assert_func>
 800d39c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d3a0:	6006      	str	r6, [r0, #0]
 800d3a2:	60c6      	str	r6, [r0, #12]
 800d3a4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d3a6:	68f3      	ldr	r3, [r6, #12]
 800d3a8:	b183      	cbz	r3, 800d3cc <_Balloc+0x50>
 800d3aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d3ac:	68db      	ldr	r3, [r3, #12]
 800d3ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d3b2:	b9b8      	cbnz	r0, 800d3e4 <_Balloc+0x68>
 800d3b4:	2101      	movs	r1, #1
 800d3b6:	fa01 f605 	lsl.w	r6, r1, r5
 800d3ba:	1d72      	adds	r2, r6, #5
 800d3bc:	4620      	mov	r0, r4
 800d3be:	0092      	lsls	r2, r2, #2
 800d3c0:	f000 fb5e 	bl	800da80 <_calloc_r>
 800d3c4:	b160      	cbz	r0, 800d3e0 <_Balloc+0x64>
 800d3c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d3ca:	e00e      	b.n	800d3ea <_Balloc+0x6e>
 800d3cc:	2221      	movs	r2, #33	; 0x21
 800d3ce:	2104      	movs	r1, #4
 800d3d0:	4620      	mov	r0, r4
 800d3d2:	f000 fb55 	bl	800da80 <_calloc_r>
 800d3d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d3d8:	60f0      	str	r0, [r6, #12]
 800d3da:	68db      	ldr	r3, [r3, #12]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d1e4      	bne.n	800d3aa <_Balloc+0x2e>
 800d3e0:	2000      	movs	r0, #0
 800d3e2:	bd70      	pop	{r4, r5, r6, pc}
 800d3e4:	6802      	ldr	r2, [r0, #0]
 800d3e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d3ea:	2300      	movs	r3, #0
 800d3ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d3f0:	e7f7      	b.n	800d3e2 <_Balloc+0x66>
 800d3f2:	bf00      	nop
 800d3f4:	0800f1d9 	.word	0x0800f1d9
 800d3f8:	0800f260 	.word	0x0800f260

0800d3fc <_Bfree>:
 800d3fc:	b570      	push	{r4, r5, r6, lr}
 800d3fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d400:	4605      	mov	r5, r0
 800d402:	460c      	mov	r4, r1
 800d404:	b976      	cbnz	r6, 800d424 <_Bfree+0x28>
 800d406:	2010      	movs	r0, #16
 800d408:	f7ff ff94 	bl	800d334 <malloc>
 800d40c:	4602      	mov	r2, r0
 800d40e:	6268      	str	r0, [r5, #36]	; 0x24
 800d410:	b920      	cbnz	r0, 800d41c <_Bfree+0x20>
 800d412:	218a      	movs	r1, #138	; 0x8a
 800d414:	4b08      	ldr	r3, [pc, #32]	; (800d438 <_Bfree+0x3c>)
 800d416:	4809      	ldr	r0, [pc, #36]	; (800d43c <_Bfree+0x40>)
 800d418:	f000 fd52 	bl	800dec0 <__assert_func>
 800d41c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d420:	6006      	str	r6, [r0, #0]
 800d422:	60c6      	str	r6, [r0, #12]
 800d424:	b13c      	cbz	r4, 800d436 <_Bfree+0x3a>
 800d426:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d428:	6862      	ldr	r2, [r4, #4]
 800d42a:	68db      	ldr	r3, [r3, #12]
 800d42c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d430:	6021      	str	r1, [r4, #0]
 800d432:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d436:	bd70      	pop	{r4, r5, r6, pc}
 800d438:	0800f1d9 	.word	0x0800f1d9
 800d43c:	0800f260 	.word	0x0800f260

0800d440 <__multadd>:
 800d440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d444:	4698      	mov	r8, r3
 800d446:	460c      	mov	r4, r1
 800d448:	2300      	movs	r3, #0
 800d44a:	690e      	ldr	r6, [r1, #16]
 800d44c:	4607      	mov	r7, r0
 800d44e:	f101 0014 	add.w	r0, r1, #20
 800d452:	6805      	ldr	r5, [r0, #0]
 800d454:	3301      	adds	r3, #1
 800d456:	b2a9      	uxth	r1, r5
 800d458:	fb02 8101 	mla	r1, r2, r1, r8
 800d45c:	0c2d      	lsrs	r5, r5, #16
 800d45e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800d462:	fb02 c505 	mla	r5, r2, r5, ip
 800d466:	b289      	uxth	r1, r1
 800d468:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800d46c:	429e      	cmp	r6, r3
 800d46e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800d472:	f840 1b04 	str.w	r1, [r0], #4
 800d476:	dcec      	bgt.n	800d452 <__multadd+0x12>
 800d478:	f1b8 0f00 	cmp.w	r8, #0
 800d47c:	d022      	beq.n	800d4c4 <__multadd+0x84>
 800d47e:	68a3      	ldr	r3, [r4, #8]
 800d480:	42b3      	cmp	r3, r6
 800d482:	dc19      	bgt.n	800d4b8 <__multadd+0x78>
 800d484:	6861      	ldr	r1, [r4, #4]
 800d486:	4638      	mov	r0, r7
 800d488:	3101      	adds	r1, #1
 800d48a:	f7ff ff77 	bl	800d37c <_Balloc>
 800d48e:	4605      	mov	r5, r0
 800d490:	b928      	cbnz	r0, 800d49e <__multadd+0x5e>
 800d492:	4602      	mov	r2, r0
 800d494:	21b5      	movs	r1, #181	; 0xb5
 800d496:	4b0d      	ldr	r3, [pc, #52]	; (800d4cc <__multadd+0x8c>)
 800d498:	480d      	ldr	r0, [pc, #52]	; (800d4d0 <__multadd+0x90>)
 800d49a:	f000 fd11 	bl	800dec0 <__assert_func>
 800d49e:	6922      	ldr	r2, [r4, #16]
 800d4a0:	f104 010c 	add.w	r1, r4, #12
 800d4a4:	3202      	adds	r2, #2
 800d4a6:	0092      	lsls	r2, r2, #2
 800d4a8:	300c      	adds	r0, #12
 800d4aa:	f7ff ff59 	bl	800d360 <memcpy>
 800d4ae:	4621      	mov	r1, r4
 800d4b0:	4638      	mov	r0, r7
 800d4b2:	f7ff ffa3 	bl	800d3fc <_Bfree>
 800d4b6:	462c      	mov	r4, r5
 800d4b8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800d4bc:	3601      	adds	r6, #1
 800d4be:	f8c3 8014 	str.w	r8, [r3, #20]
 800d4c2:	6126      	str	r6, [r4, #16]
 800d4c4:	4620      	mov	r0, r4
 800d4c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4ca:	bf00      	nop
 800d4cc:	0800f24f 	.word	0x0800f24f
 800d4d0:	0800f260 	.word	0x0800f260

0800d4d4 <__hi0bits>:
 800d4d4:	0c02      	lsrs	r2, r0, #16
 800d4d6:	0412      	lsls	r2, r2, #16
 800d4d8:	4603      	mov	r3, r0
 800d4da:	b9ca      	cbnz	r2, 800d510 <__hi0bits+0x3c>
 800d4dc:	0403      	lsls	r3, r0, #16
 800d4de:	2010      	movs	r0, #16
 800d4e0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800d4e4:	bf04      	itt	eq
 800d4e6:	021b      	lsleq	r3, r3, #8
 800d4e8:	3008      	addeq	r0, #8
 800d4ea:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800d4ee:	bf04      	itt	eq
 800d4f0:	011b      	lsleq	r3, r3, #4
 800d4f2:	3004      	addeq	r0, #4
 800d4f4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800d4f8:	bf04      	itt	eq
 800d4fa:	009b      	lsleq	r3, r3, #2
 800d4fc:	3002      	addeq	r0, #2
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	db05      	blt.n	800d50e <__hi0bits+0x3a>
 800d502:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800d506:	f100 0001 	add.w	r0, r0, #1
 800d50a:	bf08      	it	eq
 800d50c:	2020      	moveq	r0, #32
 800d50e:	4770      	bx	lr
 800d510:	2000      	movs	r0, #0
 800d512:	e7e5      	b.n	800d4e0 <__hi0bits+0xc>

0800d514 <__lo0bits>:
 800d514:	6803      	ldr	r3, [r0, #0]
 800d516:	4602      	mov	r2, r0
 800d518:	f013 0007 	ands.w	r0, r3, #7
 800d51c:	d00b      	beq.n	800d536 <__lo0bits+0x22>
 800d51e:	07d9      	lsls	r1, r3, #31
 800d520:	d422      	bmi.n	800d568 <__lo0bits+0x54>
 800d522:	0798      	lsls	r0, r3, #30
 800d524:	bf49      	itett	mi
 800d526:	085b      	lsrmi	r3, r3, #1
 800d528:	089b      	lsrpl	r3, r3, #2
 800d52a:	2001      	movmi	r0, #1
 800d52c:	6013      	strmi	r3, [r2, #0]
 800d52e:	bf5c      	itt	pl
 800d530:	2002      	movpl	r0, #2
 800d532:	6013      	strpl	r3, [r2, #0]
 800d534:	4770      	bx	lr
 800d536:	b299      	uxth	r1, r3
 800d538:	b909      	cbnz	r1, 800d53e <__lo0bits+0x2a>
 800d53a:	2010      	movs	r0, #16
 800d53c:	0c1b      	lsrs	r3, r3, #16
 800d53e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d542:	bf04      	itt	eq
 800d544:	0a1b      	lsreq	r3, r3, #8
 800d546:	3008      	addeq	r0, #8
 800d548:	0719      	lsls	r1, r3, #28
 800d54a:	bf04      	itt	eq
 800d54c:	091b      	lsreq	r3, r3, #4
 800d54e:	3004      	addeq	r0, #4
 800d550:	0799      	lsls	r1, r3, #30
 800d552:	bf04      	itt	eq
 800d554:	089b      	lsreq	r3, r3, #2
 800d556:	3002      	addeq	r0, #2
 800d558:	07d9      	lsls	r1, r3, #31
 800d55a:	d403      	bmi.n	800d564 <__lo0bits+0x50>
 800d55c:	085b      	lsrs	r3, r3, #1
 800d55e:	f100 0001 	add.w	r0, r0, #1
 800d562:	d003      	beq.n	800d56c <__lo0bits+0x58>
 800d564:	6013      	str	r3, [r2, #0]
 800d566:	4770      	bx	lr
 800d568:	2000      	movs	r0, #0
 800d56a:	4770      	bx	lr
 800d56c:	2020      	movs	r0, #32
 800d56e:	4770      	bx	lr

0800d570 <__i2b>:
 800d570:	b510      	push	{r4, lr}
 800d572:	460c      	mov	r4, r1
 800d574:	2101      	movs	r1, #1
 800d576:	f7ff ff01 	bl	800d37c <_Balloc>
 800d57a:	4602      	mov	r2, r0
 800d57c:	b928      	cbnz	r0, 800d58a <__i2b+0x1a>
 800d57e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d582:	4b04      	ldr	r3, [pc, #16]	; (800d594 <__i2b+0x24>)
 800d584:	4804      	ldr	r0, [pc, #16]	; (800d598 <__i2b+0x28>)
 800d586:	f000 fc9b 	bl	800dec0 <__assert_func>
 800d58a:	2301      	movs	r3, #1
 800d58c:	6144      	str	r4, [r0, #20]
 800d58e:	6103      	str	r3, [r0, #16]
 800d590:	bd10      	pop	{r4, pc}
 800d592:	bf00      	nop
 800d594:	0800f24f 	.word	0x0800f24f
 800d598:	0800f260 	.word	0x0800f260

0800d59c <__multiply>:
 800d59c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5a0:	4614      	mov	r4, r2
 800d5a2:	690a      	ldr	r2, [r1, #16]
 800d5a4:	6923      	ldr	r3, [r4, #16]
 800d5a6:	460d      	mov	r5, r1
 800d5a8:	429a      	cmp	r2, r3
 800d5aa:	bfbe      	ittt	lt
 800d5ac:	460b      	movlt	r3, r1
 800d5ae:	4625      	movlt	r5, r4
 800d5b0:	461c      	movlt	r4, r3
 800d5b2:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800d5b6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d5ba:	68ab      	ldr	r3, [r5, #8]
 800d5bc:	6869      	ldr	r1, [r5, #4]
 800d5be:	eb0a 0709 	add.w	r7, sl, r9
 800d5c2:	42bb      	cmp	r3, r7
 800d5c4:	b085      	sub	sp, #20
 800d5c6:	bfb8      	it	lt
 800d5c8:	3101      	addlt	r1, #1
 800d5ca:	f7ff fed7 	bl	800d37c <_Balloc>
 800d5ce:	b930      	cbnz	r0, 800d5de <__multiply+0x42>
 800d5d0:	4602      	mov	r2, r0
 800d5d2:	f240 115d 	movw	r1, #349	; 0x15d
 800d5d6:	4b41      	ldr	r3, [pc, #260]	; (800d6dc <__multiply+0x140>)
 800d5d8:	4841      	ldr	r0, [pc, #260]	; (800d6e0 <__multiply+0x144>)
 800d5da:	f000 fc71 	bl	800dec0 <__assert_func>
 800d5de:	f100 0614 	add.w	r6, r0, #20
 800d5e2:	4633      	mov	r3, r6
 800d5e4:	2200      	movs	r2, #0
 800d5e6:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800d5ea:	4543      	cmp	r3, r8
 800d5ec:	d31e      	bcc.n	800d62c <__multiply+0x90>
 800d5ee:	f105 0c14 	add.w	ip, r5, #20
 800d5f2:	f104 0314 	add.w	r3, r4, #20
 800d5f6:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800d5fa:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800d5fe:	9202      	str	r2, [sp, #8]
 800d600:	ebac 0205 	sub.w	r2, ip, r5
 800d604:	3a15      	subs	r2, #21
 800d606:	f022 0203 	bic.w	r2, r2, #3
 800d60a:	3204      	adds	r2, #4
 800d60c:	f105 0115 	add.w	r1, r5, #21
 800d610:	458c      	cmp	ip, r1
 800d612:	bf38      	it	cc
 800d614:	2204      	movcc	r2, #4
 800d616:	9201      	str	r2, [sp, #4]
 800d618:	9a02      	ldr	r2, [sp, #8]
 800d61a:	9303      	str	r3, [sp, #12]
 800d61c:	429a      	cmp	r2, r3
 800d61e:	d808      	bhi.n	800d632 <__multiply+0x96>
 800d620:	2f00      	cmp	r7, #0
 800d622:	dc55      	bgt.n	800d6d0 <__multiply+0x134>
 800d624:	6107      	str	r7, [r0, #16]
 800d626:	b005      	add	sp, #20
 800d628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d62c:	f843 2b04 	str.w	r2, [r3], #4
 800d630:	e7db      	b.n	800d5ea <__multiply+0x4e>
 800d632:	f8b3 a000 	ldrh.w	sl, [r3]
 800d636:	f1ba 0f00 	cmp.w	sl, #0
 800d63a:	d020      	beq.n	800d67e <__multiply+0xe2>
 800d63c:	46b1      	mov	r9, r6
 800d63e:	2200      	movs	r2, #0
 800d640:	f105 0e14 	add.w	lr, r5, #20
 800d644:	f85e 4b04 	ldr.w	r4, [lr], #4
 800d648:	f8d9 b000 	ldr.w	fp, [r9]
 800d64c:	b2a1      	uxth	r1, r4
 800d64e:	fa1f fb8b 	uxth.w	fp, fp
 800d652:	fb0a b101 	mla	r1, sl, r1, fp
 800d656:	4411      	add	r1, r2
 800d658:	f8d9 2000 	ldr.w	r2, [r9]
 800d65c:	0c24      	lsrs	r4, r4, #16
 800d65e:	0c12      	lsrs	r2, r2, #16
 800d660:	fb0a 2404 	mla	r4, sl, r4, r2
 800d664:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800d668:	b289      	uxth	r1, r1
 800d66a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800d66e:	45f4      	cmp	ip, lr
 800d670:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800d674:	f849 1b04 	str.w	r1, [r9], #4
 800d678:	d8e4      	bhi.n	800d644 <__multiply+0xa8>
 800d67a:	9901      	ldr	r1, [sp, #4]
 800d67c:	5072      	str	r2, [r6, r1]
 800d67e:	9a03      	ldr	r2, [sp, #12]
 800d680:	3304      	adds	r3, #4
 800d682:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d686:	f1b9 0f00 	cmp.w	r9, #0
 800d68a:	d01f      	beq.n	800d6cc <__multiply+0x130>
 800d68c:	46b6      	mov	lr, r6
 800d68e:	f04f 0a00 	mov.w	sl, #0
 800d692:	6834      	ldr	r4, [r6, #0]
 800d694:	f105 0114 	add.w	r1, r5, #20
 800d698:	880a      	ldrh	r2, [r1, #0]
 800d69a:	f8be b002 	ldrh.w	fp, [lr, #2]
 800d69e:	b2a4      	uxth	r4, r4
 800d6a0:	fb09 b202 	mla	r2, r9, r2, fp
 800d6a4:	4492      	add	sl, r2
 800d6a6:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800d6aa:	f84e 4b04 	str.w	r4, [lr], #4
 800d6ae:	f851 4b04 	ldr.w	r4, [r1], #4
 800d6b2:	f8be 2000 	ldrh.w	r2, [lr]
 800d6b6:	0c24      	lsrs	r4, r4, #16
 800d6b8:	fb09 2404 	mla	r4, r9, r4, r2
 800d6bc:	458c      	cmp	ip, r1
 800d6be:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800d6c2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d6c6:	d8e7      	bhi.n	800d698 <__multiply+0xfc>
 800d6c8:	9a01      	ldr	r2, [sp, #4]
 800d6ca:	50b4      	str	r4, [r6, r2]
 800d6cc:	3604      	adds	r6, #4
 800d6ce:	e7a3      	b.n	800d618 <__multiply+0x7c>
 800d6d0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d1a5      	bne.n	800d624 <__multiply+0x88>
 800d6d8:	3f01      	subs	r7, #1
 800d6da:	e7a1      	b.n	800d620 <__multiply+0x84>
 800d6dc:	0800f24f 	.word	0x0800f24f
 800d6e0:	0800f260 	.word	0x0800f260

0800d6e4 <__pow5mult>:
 800d6e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d6e8:	4615      	mov	r5, r2
 800d6ea:	f012 0203 	ands.w	r2, r2, #3
 800d6ee:	4606      	mov	r6, r0
 800d6f0:	460f      	mov	r7, r1
 800d6f2:	d007      	beq.n	800d704 <__pow5mult+0x20>
 800d6f4:	4c25      	ldr	r4, [pc, #148]	; (800d78c <__pow5mult+0xa8>)
 800d6f6:	3a01      	subs	r2, #1
 800d6f8:	2300      	movs	r3, #0
 800d6fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d6fe:	f7ff fe9f 	bl	800d440 <__multadd>
 800d702:	4607      	mov	r7, r0
 800d704:	10ad      	asrs	r5, r5, #2
 800d706:	d03d      	beq.n	800d784 <__pow5mult+0xa0>
 800d708:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d70a:	b97c      	cbnz	r4, 800d72c <__pow5mult+0x48>
 800d70c:	2010      	movs	r0, #16
 800d70e:	f7ff fe11 	bl	800d334 <malloc>
 800d712:	4602      	mov	r2, r0
 800d714:	6270      	str	r0, [r6, #36]	; 0x24
 800d716:	b928      	cbnz	r0, 800d724 <__pow5mult+0x40>
 800d718:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d71c:	4b1c      	ldr	r3, [pc, #112]	; (800d790 <__pow5mult+0xac>)
 800d71e:	481d      	ldr	r0, [pc, #116]	; (800d794 <__pow5mult+0xb0>)
 800d720:	f000 fbce 	bl	800dec0 <__assert_func>
 800d724:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d728:	6004      	str	r4, [r0, #0]
 800d72a:	60c4      	str	r4, [r0, #12]
 800d72c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d730:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d734:	b94c      	cbnz	r4, 800d74a <__pow5mult+0x66>
 800d736:	f240 2171 	movw	r1, #625	; 0x271
 800d73a:	4630      	mov	r0, r6
 800d73c:	f7ff ff18 	bl	800d570 <__i2b>
 800d740:	2300      	movs	r3, #0
 800d742:	4604      	mov	r4, r0
 800d744:	f8c8 0008 	str.w	r0, [r8, #8]
 800d748:	6003      	str	r3, [r0, #0]
 800d74a:	f04f 0900 	mov.w	r9, #0
 800d74e:	07eb      	lsls	r3, r5, #31
 800d750:	d50a      	bpl.n	800d768 <__pow5mult+0x84>
 800d752:	4639      	mov	r1, r7
 800d754:	4622      	mov	r2, r4
 800d756:	4630      	mov	r0, r6
 800d758:	f7ff ff20 	bl	800d59c <__multiply>
 800d75c:	4680      	mov	r8, r0
 800d75e:	4639      	mov	r1, r7
 800d760:	4630      	mov	r0, r6
 800d762:	f7ff fe4b 	bl	800d3fc <_Bfree>
 800d766:	4647      	mov	r7, r8
 800d768:	106d      	asrs	r5, r5, #1
 800d76a:	d00b      	beq.n	800d784 <__pow5mult+0xa0>
 800d76c:	6820      	ldr	r0, [r4, #0]
 800d76e:	b938      	cbnz	r0, 800d780 <__pow5mult+0x9c>
 800d770:	4622      	mov	r2, r4
 800d772:	4621      	mov	r1, r4
 800d774:	4630      	mov	r0, r6
 800d776:	f7ff ff11 	bl	800d59c <__multiply>
 800d77a:	6020      	str	r0, [r4, #0]
 800d77c:	f8c0 9000 	str.w	r9, [r0]
 800d780:	4604      	mov	r4, r0
 800d782:	e7e4      	b.n	800d74e <__pow5mult+0x6a>
 800d784:	4638      	mov	r0, r7
 800d786:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d78a:	bf00      	nop
 800d78c:	0800f3b0 	.word	0x0800f3b0
 800d790:	0800f1d9 	.word	0x0800f1d9
 800d794:	0800f260 	.word	0x0800f260

0800d798 <__lshift>:
 800d798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d79c:	460c      	mov	r4, r1
 800d79e:	4607      	mov	r7, r0
 800d7a0:	4691      	mov	r9, r2
 800d7a2:	6923      	ldr	r3, [r4, #16]
 800d7a4:	6849      	ldr	r1, [r1, #4]
 800d7a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d7aa:	68a3      	ldr	r3, [r4, #8]
 800d7ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d7b0:	f108 0601 	add.w	r6, r8, #1
 800d7b4:	42b3      	cmp	r3, r6
 800d7b6:	db0b      	blt.n	800d7d0 <__lshift+0x38>
 800d7b8:	4638      	mov	r0, r7
 800d7ba:	f7ff fddf 	bl	800d37c <_Balloc>
 800d7be:	4605      	mov	r5, r0
 800d7c0:	b948      	cbnz	r0, 800d7d6 <__lshift+0x3e>
 800d7c2:	4602      	mov	r2, r0
 800d7c4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d7c8:	4b27      	ldr	r3, [pc, #156]	; (800d868 <__lshift+0xd0>)
 800d7ca:	4828      	ldr	r0, [pc, #160]	; (800d86c <__lshift+0xd4>)
 800d7cc:	f000 fb78 	bl	800dec0 <__assert_func>
 800d7d0:	3101      	adds	r1, #1
 800d7d2:	005b      	lsls	r3, r3, #1
 800d7d4:	e7ee      	b.n	800d7b4 <__lshift+0x1c>
 800d7d6:	2300      	movs	r3, #0
 800d7d8:	f100 0114 	add.w	r1, r0, #20
 800d7dc:	f100 0210 	add.w	r2, r0, #16
 800d7e0:	4618      	mov	r0, r3
 800d7e2:	4553      	cmp	r3, sl
 800d7e4:	db33      	blt.n	800d84e <__lshift+0xb6>
 800d7e6:	6920      	ldr	r0, [r4, #16]
 800d7e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d7ec:	f104 0314 	add.w	r3, r4, #20
 800d7f0:	f019 091f 	ands.w	r9, r9, #31
 800d7f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d7f8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d7fc:	d02b      	beq.n	800d856 <__lshift+0xbe>
 800d7fe:	468a      	mov	sl, r1
 800d800:	2200      	movs	r2, #0
 800d802:	f1c9 0e20 	rsb	lr, r9, #32
 800d806:	6818      	ldr	r0, [r3, #0]
 800d808:	fa00 f009 	lsl.w	r0, r0, r9
 800d80c:	4302      	orrs	r2, r0
 800d80e:	f84a 2b04 	str.w	r2, [sl], #4
 800d812:	f853 2b04 	ldr.w	r2, [r3], #4
 800d816:	459c      	cmp	ip, r3
 800d818:	fa22 f20e 	lsr.w	r2, r2, lr
 800d81c:	d8f3      	bhi.n	800d806 <__lshift+0x6e>
 800d81e:	ebac 0304 	sub.w	r3, ip, r4
 800d822:	3b15      	subs	r3, #21
 800d824:	f023 0303 	bic.w	r3, r3, #3
 800d828:	3304      	adds	r3, #4
 800d82a:	f104 0015 	add.w	r0, r4, #21
 800d82e:	4584      	cmp	ip, r0
 800d830:	bf38      	it	cc
 800d832:	2304      	movcc	r3, #4
 800d834:	50ca      	str	r2, [r1, r3]
 800d836:	b10a      	cbz	r2, 800d83c <__lshift+0xa4>
 800d838:	f108 0602 	add.w	r6, r8, #2
 800d83c:	3e01      	subs	r6, #1
 800d83e:	4638      	mov	r0, r7
 800d840:	4621      	mov	r1, r4
 800d842:	612e      	str	r6, [r5, #16]
 800d844:	f7ff fdda 	bl	800d3fc <_Bfree>
 800d848:	4628      	mov	r0, r5
 800d84a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d84e:	f842 0f04 	str.w	r0, [r2, #4]!
 800d852:	3301      	adds	r3, #1
 800d854:	e7c5      	b.n	800d7e2 <__lshift+0x4a>
 800d856:	3904      	subs	r1, #4
 800d858:	f853 2b04 	ldr.w	r2, [r3], #4
 800d85c:	459c      	cmp	ip, r3
 800d85e:	f841 2f04 	str.w	r2, [r1, #4]!
 800d862:	d8f9      	bhi.n	800d858 <__lshift+0xc0>
 800d864:	e7ea      	b.n	800d83c <__lshift+0xa4>
 800d866:	bf00      	nop
 800d868:	0800f24f 	.word	0x0800f24f
 800d86c:	0800f260 	.word	0x0800f260

0800d870 <__mcmp>:
 800d870:	4603      	mov	r3, r0
 800d872:	690a      	ldr	r2, [r1, #16]
 800d874:	6900      	ldr	r0, [r0, #16]
 800d876:	b530      	push	{r4, r5, lr}
 800d878:	1a80      	subs	r0, r0, r2
 800d87a:	d10d      	bne.n	800d898 <__mcmp+0x28>
 800d87c:	3314      	adds	r3, #20
 800d87e:	3114      	adds	r1, #20
 800d880:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d884:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d888:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d88c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d890:	4295      	cmp	r5, r2
 800d892:	d002      	beq.n	800d89a <__mcmp+0x2a>
 800d894:	d304      	bcc.n	800d8a0 <__mcmp+0x30>
 800d896:	2001      	movs	r0, #1
 800d898:	bd30      	pop	{r4, r5, pc}
 800d89a:	42a3      	cmp	r3, r4
 800d89c:	d3f4      	bcc.n	800d888 <__mcmp+0x18>
 800d89e:	e7fb      	b.n	800d898 <__mcmp+0x28>
 800d8a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d8a4:	e7f8      	b.n	800d898 <__mcmp+0x28>
	...

0800d8a8 <__mdiff>:
 800d8a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8ac:	460c      	mov	r4, r1
 800d8ae:	4606      	mov	r6, r0
 800d8b0:	4611      	mov	r1, r2
 800d8b2:	4620      	mov	r0, r4
 800d8b4:	4692      	mov	sl, r2
 800d8b6:	f7ff ffdb 	bl	800d870 <__mcmp>
 800d8ba:	1e05      	subs	r5, r0, #0
 800d8bc:	d111      	bne.n	800d8e2 <__mdiff+0x3a>
 800d8be:	4629      	mov	r1, r5
 800d8c0:	4630      	mov	r0, r6
 800d8c2:	f7ff fd5b 	bl	800d37c <_Balloc>
 800d8c6:	4602      	mov	r2, r0
 800d8c8:	b928      	cbnz	r0, 800d8d6 <__mdiff+0x2e>
 800d8ca:	f240 2132 	movw	r1, #562	; 0x232
 800d8ce:	4b3c      	ldr	r3, [pc, #240]	; (800d9c0 <__mdiff+0x118>)
 800d8d0:	483c      	ldr	r0, [pc, #240]	; (800d9c4 <__mdiff+0x11c>)
 800d8d2:	f000 faf5 	bl	800dec0 <__assert_func>
 800d8d6:	2301      	movs	r3, #1
 800d8d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d8dc:	4610      	mov	r0, r2
 800d8de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8e2:	bfa4      	itt	ge
 800d8e4:	4653      	movge	r3, sl
 800d8e6:	46a2      	movge	sl, r4
 800d8e8:	4630      	mov	r0, r6
 800d8ea:	f8da 1004 	ldr.w	r1, [sl, #4]
 800d8ee:	bfa6      	itte	ge
 800d8f0:	461c      	movge	r4, r3
 800d8f2:	2500      	movge	r5, #0
 800d8f4:	2501      	movlt	r5, #1
 800d8f6:	f7ff fd41 	bl	800d37c <_Balloc>
 800d8fa:	4602      	mov	r2, r0
 800d8fc:	b918      	cbnz	r0, 800d906 <__mdiff+0x5e>
 800d8fe:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d902:	4b2f      	ldr	r3, [pc, #188]	; (800d9c0 <__mdiff+0x118>)
 800d904:	e7e4      	b.n	800d8d0 <__mdiff+0x28>
 800d906:	f100 0814 	add.w	r8, r0, #20
 800d90a:	f8da 7010 	ldr.w	r7, [sl, #16]
 800d90e:	60c5      	str	r5, [r0, #12]
 800d910:	f04f 0c00 	mov.w	ip, #0
 800d914:	f10a 0514 	add.w	r5, sl, #20
 800d918:	f10a 0010 	add.w	r0, sl, #16
 800d91c:	46c2      	mov	sl, r8
 800d91e:	6926      	ldr	r6, [r4, #16]
 800d920:	f104 0914 	add.w	r9, r4, #20
 800d924:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800d928:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d92c:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800d930:	f859 3b04 	ldr.w	r3, [r9], #4
 800d934:	fa1f f18b 	uxth.w	r1, fp
 800d938:	4461      	add	r1, ip
 800d93a:	fa1f fc83 	uxth.w	ip, r3
 800d93e:	0c1b      	lsrs	r3, r3, #16
 800d940:	eba1 010c 	sub.w	r1, r1, ip
 800d944:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d948:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800d94c:	b289      	uxth	r1, r1
 800d94e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800d952:	454e      	cmp	r6, r9
 800d954:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800d958:	f84a 3b04 	str.w	r3, [sl], #4
 800d95c:	d8e6      	bhi.n	800d92c <__mdiff+0x84>
 800d95e:	1b33      	subs	r3, r6, r4
 800d960:	3b15      	subs	r3, #21
 800d962:	f023 0303 	bic.w	r3, r3, #3
 800d966:	3415      	adds	r4, #21
 800d968:	3304      	adds	r3, #4
 800d96a:	42a6      	cmp	r6, r4
 800d96c:	bf38      	it	cc
 800d96e:	2304      	movcc	r3, #4
 800d970:	441d      	add	r5, r3
 800d972:	4443      	add	r3, r8
 800d974:	461e      	mov	r6, r3
 800d976:	462c      	mov	r4, r5
 800d978:	4574      	cmp	r4, lr
 800d97a:	d30e      	bcc.n	800d99a <__mdiff+0xf2>
 800d97c:	f10e 0103 	add.w	r1, lr, #3
 800d980:	1b49      	subs	r1, r1, r5
 800d982:	f021 0103 	bic.w	r1, r1, #3
 800d986:	3d03      	subs	r5, #3
 800d988:	45ae      	cmp	lr, r5
 800d98a:	bf38      	it	cc
 800d98c:	2100      	movcc	r1, #0
 800d98e:	4419      	add	r1, r3
 800d990:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800d994:	b18b      	cbz	r3, 800d9ba <__mdiff+0x112>
 800d996:	6117      	str	r7, [r2, #16]
 800d998:	e7a0      	b.n	800d8dc <__mdiff+0x34>
 800d99a:	f854 8b04 	ldr.w	r8, [r4], #4
 800d99e:	fa1f f188 	uxth.w	r1, r8
 800d9a2:	4461      	add	r1, ip
 800d9a4:	1408      	asrs	r0, r1, #16
 800d9a6:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800d9aa:	b289      	uxth	r1, r1
 800d9ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d9b0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d9b4:	f846 1b04 	str.w	r1, [r6], #4
 800d9b8:	e7de      	b.n	800d978 <__mdiff+0xd0>
 800d9ba:	3f01      	subs	r7, #1
 800d9bc:	e7e8      	b.n	800d990 <__mdiff+0xe8>
 800d9be:	bf00      	nop
 800d9c0:	0800f24f 	.word	0x0800f24f
 800d9c4:	0800f260 	.word	0x0800f260

0800d9c8 <__d2b>:
 800d9c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d9cc:	2101      	movs	r1, #1
 800d9ce:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800d9d2:	4690      	mov	r8, r2
 800d9d4:	461d      	mov	r5, r3
 800d9d6:	f7ff fcd1 	bl	800d37c <_Balloc>
 800d9da:	4604      	mov	r4, r0
 800d9dc:	b930      	cbnz	r0, 800d9ec <__d2b+0x24>
 800d9de:	4602      	mov	r2, r0
 800d9e0:	f240 310a 	movw	r1, #778	; 0x30a
 800d9e4:	4b24      	ldr	r3, [pc, #144]	; (800da78 <__d2b+0xb0>)
 800d9e6:	4825      	ldr	r0, [pc, #148]	; (800da7c <__d2b+0xb4>)
 800d9e8:	f000 fa6a 	bl	800dec0 <__assert_func>
 800d9ec:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800d9f0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800d9f4:	bb2d      	cbnz	r5, 800da42 <__d2b+0x7a>
 800d9f6:	9301      	str	r3, [sp, #4]
 800d9f8:	f1b8 0300 	subs.w	r3, r8, #0
 800d9fc:	d026      	beq.n	800da4c <__d2b+0x84>
 800d9fe:	4668      	mov	r0, sp
 800da00:	9300      	str	r3, [sp, #0]
 800da02:	f7ff fd87 	bl	800d514 <__lo0bits>
 800da06:	9900      	ldr	r1, [sp, #0]
 800da08:	b1f0      	cbz	r0, 800da48 <__d2b+0x80>
 800da0a:	9a01      	ldr	r2, [sp, #4]
 800da0c:	f1c0 0320 	rsb	r3, r0, #32
 800da10:	fa02 f303 	lsl.w	r3, r2, r3
 800da14:	430b      	orrs	r3, r1
 800da16:	40c2      	lsrs	r2, r0
 800da18:	6163      	str	r3, [r4, #20]
 800da1a:	9201      	str	r2, [sp, #4]
 800da1c:	9b01      	ldr	r3, [sp, #4]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	bf14      	ite	ne
 800da22:	2102      	movne	r1, #2
 800da24:	2101      	moveq	r1, #1
 800da26:	61a3      	str	r3, [r4, #24]
 800da28:	6121      	str	r1, [r4, #16]
 800da2a:	b1c5      	cbz	r5, 800da5e <__d2b+0x96>
 800da2c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800da30:	4405      	add	r5, r0
 800da32:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800da36:	603d      	str	r5, [r7, #0]
 800da38:	6030      	str	r0, [r6, #0]
 800da3a:	4620      	mov	r0, r4
 800da3c:	b002      	add	sp, #8
 800da3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800da46:	e7d6      	b.n	800d9f6 <__d2b+0x2e>
 800da48:	6161      	str	r1, [r4, #20]
 800da4a:	e7e7      	b.n	800da1c <__d2b+0x54>
 800da4c:	a801      	add	r0, sp, #4
 800da4e:	f7ff fd61 	bl	800d514 <__lo0bits>
 800da52:	2101      	movs	r1, #1
 800da54:	9b01      	ldr	r3, [sp, #4]
 800da56:	6121      	str	r1, [r4, #16]
 800da58:	6163      	str	r3, [r4, #20]
 800da5a:	3020      	adds	r0, #32
 800da5c:	e7e5      	b.n	800da2a <__d2b+0x62>
 800da5e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800da62:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800da66:	6038      	str	r0, [r7, #0]
 800da68:	6918      	ldr	r0, [r3, #16]
 800da6a:	f7ff fd33 	bl	800d4d4 <__hi0bits>
 800da6e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800da72:	6031      	str	r1, [r6, #0]
 800da74:	e7e1      	b.n	800da3a <__d2b+0x72>
 800da76:	bf00      	nop
 800da78:	0800f24f 	.word	0x0800f24f
 800da7c:	0800f260 	.word	0x0800f260

0800da80 <_calloc_r>:
 800da80:	b538      	push	{r3, r4, r5, lr}
 800da82:	fb02 f501 	mul.w	r5, r2, r1
 800da86:	4629      	mov	r1, r5
 800da88:	f000 f854 	bl	800db34 <_malloc_r>
 800da8c:	4604      	mov	r4, r0
 800da8e:	b118      	cbz	r0, 800da98 <_calloc_r+0x18>
 800da90:	462a      	mov	r2, r5
 800da92:	2100      	movs	r1, #0
 800da94:	f7fe f946 	bl	800bd24 <memset>
 800da98:	4620      	mov	r0, r4
 800da9a:	bd38      	pop	{r3, r4, r5, pc}

0800da9c <_free_r>:
 800da9c:	b538      	push	{r3, r4, r5, lr}
 800da9e:	4605      	mov	r5, r0
 800daa0:	2900      	cmp	r1, #0
 800daa2:	d043      	beq.n	800db2c <_free_r+0x90>
 800daa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800daa8:	1f0c      	subs	r4, r1, #4
 800daaa:	2b00      	cmp	r3, #0
 800daac:	bfb8      	it	lt
 800daae:	18e4      	addlt	r4, r4, r3
 800dab0:	f000 fa62 	bl	800df78 <__malloc_lock>
 800dab4:	4a1e      	ldr	r2, [pc, #120]	; (800db30 <_free_r+0x94>)
 800dab6:	6813      	ldr	r3, [r2, #0]
 800dab8:	4610      	mov	r0, r2
 800daba:	b933      	cbnz	r3, 800daca <_free_r+0x2e>
 800dabc:	6063      	str	r3, [r4, #4]
 800dabe:	6014      	str	r4, [r2, #0]
 800dac0:	4628      	mov	r0, r5
 800dac2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dac6:	f000 ba5d 	b.w	800df84 <__malloc_unlock>
 800daca:	42a3      	cmp	r3, r4
 800dacc:	d90a      	bls.n	800dae4 <_free_r+0x48>
 800dace:	6821      	ldr	r1, [r4, #0]
 800dad0:	1862      	adds	r2, r4, r1
 800dad2:	4293      	cmp	r3, r2
 800dad4:	bf01      	itttt	eq
 800dad6:	681a      	ldreq	r2, [r3, #0]
 800dad8:	685b      	ldreq	r3, [r3, #4]
 800dada:	1852      	addeq	r2, r2, r1
 800dadc:	6022      	streq	r2, [r4, #0]
 800dade:	6063      	str	r3, [r4, #4]
 800dae0:	6004      	str	r4, [r0, #0]
 800dae2:	e7ed      	b.n	800dac0 <_free_r+0x24>
 800dae4:	461a      	mov	r2, r3
 800dae6:	685b      	ldr	r3, [r3, #4]
 800dae8:	b10b      	cbz	r3, 800daee <_free_r+0x52>
 800daea:	42a3      	cmp	r3, r4
 800daec:	d9fa      	bls.n	800dae4 <_free_r+0x48>
 800daee:	6811      	ldr	r1, [r2, #0]
 800daf0:	1850      	adds	r0, r2, r1
 800daf2:	42a0      	cmp	r0, r4
 800daf4:	d10b      	bne.n	800db0e <_free_r+0x72>
 800daf6:	6820      	ldr	r0, [r4, #0]
 800daf8:	4401      	add	r1, r0
 800dafa:	1850      	adds	r0, r2, r1
 800dafc:	4283      	cmp	r3, r0
 800dafe:	6011      	str	r1, [r2, #0]
 800db00:	d1de      	bne.n	800dac0 <_free_r+0x24>
 800db02:	6818      	ldr	r0, [r3, #0]
 800db04:	685b      	ldr	r3, [r3, #4]
 800db06:	4401      	add	r1, r0
 800db08:	6011      	str	r1, [r2, #0]
 800db0a:	6053      	str	r3, [r2, #4]
 800db0c:	e7d8      	b.n	800dac0 <_free_r+0x24>
 800db0e:	d902      	bls.n	800db16 <_free_r+0x7a>
 800db10:	230c      	movs	r3, #12
 800db12:	602b      	str	r3, [r5, #0]
 800db14:	e7d4      	b.n	800dac0 <_free_r+0x24>
 800db16:	6820      	ldr	r0, [r4, #0]
 800db18:	1821      	adds	r1, r4, r0
 800db1a:	428b      	cmp	r3, r1
 800db1c:	bf01      	itttt	eq
 800db1e:	6819      	ldreq	r1, [r3, #0]
 800db20:	685b      	ldreq	r3, [r3, #4]
 800db22:	1809      	addeq	r1, r1, r0
 800db24:	6021      	streq	r1, [r4, #0]
 800db26:	6063      	str	r3, [r4, #4]
 800db28:	6054      	str	r4, [r2, #4]
 800db2a:	e7c9      	b.n	800dac0 <_free_r+0x24>
 800db2c:	bd38      	pop	{r3, r4, r5, pc}
 800db2e:	bf00      	nop
 800db30:	20000438 	.word	0x20000438

0800db34 <_malloc_r>:
 800db34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db36:	1ccd      	adds	r5, r1, #3
 800db38:	f025 0503 	bic.w	r5, r5, #3
 800db3c:	3508      	adds	r5, #8
 800db3e:	2d0c      	cmp	r5, #12
 800db40:	bf38      	it	cc
 800db42:	250c      	movcc	r5, #12
 800db44:	2d00      	cmp	r5, #0
 800db46:	4606      	mov	r6, r0
 800db48:	db01      	blt.n	800db4e <_malloc_r+0x1a>
 800db4a:	42a9      	cmp	r1, r5
 800db4c:	d903      	bls.n	800db56 <_malloc_r+0x22>
 800db4e:	230c      	movs	r3, #12
 800db50:	6033      	str	r3, [r6, #0]
 800db52:	2000      	movs	r0, #0
 800db54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db56:	f000 fa0f 	bl	800df78 <__malloc_lock>
 800db5a:	4921      	ldr	r1, [pc, #132]	; (800dbe0 <_malloc_r+0xac>)
 800db5c:	680a      	ldr	r2, [r1, #0]
 800db5e:	4614      	mov	r4, r2
 800db60:	b99c      	cbnz	r4, 800db8a <_malloc_r+0x56>
 800db62:	4f20      	ldr	r7, [pc, #128]	; (800dbe4 <_malloc_r+0xb0>)
 800db64:	683b      	ldr	r3, [r7, #0]
 800db66:	b923      	cbnz	r3, 800db72 <_malloc_r+0x3e>
 800db68:	4621      	mov	r1, r4
 800db6a:	4630      	mov	r0, r6
 800db6c:	f000 f998 	bl	800dea0 <_sbrk_r>
 800db70:	6038      	str	r0, [r7, #0]
 800db72:	4629      	mov	r1, r5
 800db74:	4630      	mov	r0, r6
 800db76:	f000 f993 	bl	800dea0 <_sbrk_r>
 800db7a:	1c43      	adds	r3, r0, #1
 800db7c:	d123      	bne.n	800dbc6 <_malloc_r+0x92>
 800db7e:	230c      	movs	r3, #12
 800db80:	4630      	mov	r0, r6
 800db82:	6033      	str	r3, [r6, #0]
 800db84:	f000 f9fe 	bl	800df84 <__malloc_unlock>
 800db88:	e7e3      	b.n	800db52 <_malloc_r+0x1e>
 800db8a:	6823      	ldr	r3, [r4, #0]
 800db8c:	1b5b      	subs	r3, r3, r5
 800db8e:	d417      	bmi.n	800dbc0 <_malloc_r+0x8c>
 800db90:	2b0b      	cmp	r3, #11
 800db92:	d903      	bls.n	800db9c <_malloc_r+0x68>
 800db94:	6023      	str	r3, [r4, #0]
 800db96:	441c      	add	r4, r3
 800db98:	6025      	str	r5, [r4, #0]
 800db9a:	e004      	b.n	800dba6 <_malloc_r+0x72>
 800db9c:	6863      	ldr	r3, [r4, #4]
 800db9e:	42a2      	cmp	r2, r4
 800dba0:	bf0c      	ite	eq
 800dba2:	600b      	streq	r3, [r1, #0]
 800dba4:	6053      	strne	r3, [r2, #4]
 800dba6:	4630      	mov	r0, r6
 800dba8:	f000 f9ec 	bl	800df84 <__malloc_unlock>
 800dbac:	f104 000b 	add.w	r0, r4, #11
 800dbb0:	1d23      	adds	r3, r4, #4
 800dbb2:	f020 0007 	bic.w	r0, r0, #7
 800dbb6:	1ac2      	subs	r2, r0, r3
 800dbb8:	d0cc      	beq.n	800db54 <_malloc_r+0x20>
 800dbba:	1a1b      	subs	r3, r3, r0
 800dbbc:	50a3      	str	r3, [r4, r2]
 800dbbe:	e7c9      	b.n	800db54 <_malloc_r+0x20>
 800dbc0:	4622      	mov	r2, r4
 800dbc2:	6864      	ldr	r4, [r4, #4]
 800dbc4:	e7cc      	b.n	800db60 <_malloc_r+0x2c>
 800dbc6:	1cc4      	adds	r4, r0, #3
 800dbc8:	f024 0403 	bic.w	r4, r4, #3
 800dbcc:	42a0      	cmp	r0, r4
 800dbce:	d0e3      	beq.n	800db98 <_malloc_r+0x64>
 800dbd0:	1a21      	subs	r1, r4, r0
 800dbd2:	4630      	mov	r0, r6
 800dbd4:	f000 f964 	bl	800dea0 <_sbrk_r>
 800dbd8:	3001      	adds	r0, #1
 800dbda:	d1dd      	bne.n	800db98 <_malloc_r+0x64>
 800dbdc:	e7cf      	b.n	800db7e <_malloc_r+0x4a>
 800dbde:	bf00      	nop
 800dbe0:	20000438 	.word	0x20000438
 800dbe4:	2000043c 	.word	0x2000043c

0800dbe8 <__ssputs_r>:
 800dbe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dbec:	688e      	ldr	r6, [r1, #8]
 800dbee:	4682      	mov	sl, r0
 800dbf0:	429e      	cmp	r6, r3
 800dbf2:	460c      	mov	r4, r1
 800dbf4:	4690      	mov	r8, r2
 800dbf6:	461f      	mov	r7, r3
 800dbf8:	d838      	bhi.n	800dc6c <__ssputs_r+0x84>
 800dbfa:	898a      	ldrh	r2, [r1, #12]
 800dbfc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dc00:	d032      	beq.n	800dc68 <__ssputs_r+0x80>
 800dc02:	6825      	ldr	r5, [r4, #0]
 800dc04:	6909      	ldr	r1, [r1, #16]
 800dc06:	3301      	adds	r3, #1
 800dc08:	eba5 0901 	sub.w	r9, r5, r1
 800dc0c:	6965      	ldr	r5, [r4, #20]
 800dc0e:	444b      	add	r3, r9
 800dc10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dc14:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dc18:	106d      	asrs	r5, r5, #1
 800dc1a:	429d      	cmp	r5, r3
 800dc1c:	bf38      	it	cc
 800dc1e:	461d      	movcc	r5, r3
 800dc20:	0553      	lsls	r3, r2, #21
 800dc22:	d531      	bpl.n	800dc88 <__ssputs_r+0xa0>
 800dc24:	4629      	mov	r1, r5
 800dc26:	f7ff ff85 	bl	800db34 <_malloc_r>
 800dc2a:	4606      	mov	r6, r0
 800dc2c:	b950      	cbnz	r0, 800dc44 <__ssputs_r+0x5c>
 800dc2e:	230c      	movs	r3, #12
 800dc30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dc34:	f8ca 3000 	str.w	r3, [sl]
 800dc38:	89a3      	ldrh	r3, [r4, #12]
 800dc3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc3e:	81a3      	strh	r3, [r4, #12]
 800dc40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc44:	464a      	mov	r2, r9
 800dc46:	6921      	ldr	r1, [r4, #16]
 800dc48:	f7ff fb8a 	bl	800d360 <memcpy>
 800dc4c:	89a3      	ldrh	r3, [r4, #12]
 800dc4e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800dc52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc56:	81a3      	strh	r3, [r4, #12]
 800dc58:	6126      	str	r6, [r4, #16]
 800dc5a:	444e      	add	r6, r9
 800dc5c:	6026      	str	r6, [r4, #0]
 800dc5e:	463e      	mov	r6, r7
 800dc60:	6165      	str	r5, [r4, #20]
 800dc62:	eba5 0509 	sub.w	r5, r5, r9
 800dc66:	60a5      	str	r5, [r4, #8]
 800dc68:	42be      	cmp	r6, r7
 800dc6a:	d900      	bls.n	800dc6e <__ssputs_r+0x86>
 800dc6c:	463e      	mov	r6, r7
 800dc6e:	4632      	mov	r2, r6
 800dc70:	4641      	mov	r1, r8
 800dc72:	6820      	ldr	r0, [r4, #0]
 800dc74:	f000 f966 	bl	800df44 <memmove>
 800dc78:	68a3      	ldr	r3, [r4, #8]
 800dc7a:	6822      	ldr	r2, [r4, #0]
 800dc7c:	1b9b      	subs	r3, r3, r6
 800dc7e:	4432      	add	r2, r6
 800dc80:	2000      	movs	r0, #0
 800dc82:	60a3      	str	r3, [r4, #8]
 800dc84:	6022      	str	r2, [r4, #0]
 800dc86:	e7db      	b.n	800dc40 <__ssputs_r+0x58>
 800dc88:	462a      	mov	r2, r5
 800dc8a:	f000 f981 	bl	800df90 <_realloc_r>
 800dc8e:	4606      	mov	r6, r0
 800dc90:	2800      	cmp	r0, #0
 800dc92:	d1e1      	bne.n	800dc58 <__ssputs_r+0x70>
 800dc94:	4650      	mov	r0, sl
 800dc96:	6921      	ldr	r1, [r4, #16]
 800dc98:	f7ff ff00 	bl	800da9c <_free_r>
 800dc9c:	e7c7      	b.n	800dc2e <__ssputs_r+0x46>
	...

0800dca0 <_svfiprintf_r>:
 800dca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dca4:	4698      	mov	r8, r3
 800dca6:	898b      	ldrh	r3, [r1, #12]
 800dca8:	4607      	mov	r7, r0
 800dcaa:	061b      	lsls	r3, r3, #24
 800dcac:	460d      	mov	r5, r1
 800dcae:	4614      	mov	r4, r2
 800dcb0:	b09d      	sub	sp, #116	; 0x74
 800dcb2:	d50e      	bpl.n	800dcd2 <_svfiprintf_r+0x32>
 800dcb4:	690b      	ldr	r3, [r1, #16]
 800dcb6:	b963      	cbnz	r3, 800dcd2 <_svfiprintf_r+0x32>
 800dcb8:	2140      	movs	r1, #64	; 0x40
 800dcba:	f7ff ff3b 	bl	800db34 <_malloc_r>
 800dcbe:	6028      	str	r0, [r5, #0]
 800dcc0:	6128      	str	r0, [r5, #16]
 800dcc2:	b920      	cbnz	r0, 800dcce <_svfiprintf_r+0x2e>
 800dcc4:	230c      	movs	r3, #12
 800dcc6:	603b      	str	r3, [r7, #0]
 800dcc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dccc:	e0d1      	b.n	800de72 <_svfiprintf_r+0x1d2>
 800dcce:	2340      	movs	r3, #64	; 0x40
 800dcd0:	616b      	str	r3, [r5, #20]
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	9309      	str	r3, [sp, #36]	; 0x24
 800dcd6:	2320      	movs	r3, #32
 800dcd8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dcdc:	2330      	movs	r3, #48	; 0x30
 800dcde:	f04f 0901 	mov.w	r9, #1
 800dce2:	f8cd 800c 	str.w	r8, [sp, #12]
 800dce6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800de8c <_svfiprintf_r+0x1ec>
 800dcea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dcee:	4623      	mov	r3, r4
 800dcf0:	469a      	mov	sl, r3
 800dcf2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dcf6:	b10a      	cbz	r2, 800dcfc <_svfiprintf_r+0x5c>
 800dcf8:	2a25      	cmp	r2, #37	; 0x25
 800dcfa:	d1f9      	bne.n	800dcf0 <_svfiprintf_r+0x50>
 800dcfc:	ebba 0b04 	subs.w	fp, sl, r4
 800dd00:	d00b      	beq.n	800dd1a <_svfiprintf_r+0x7a>
 800dd02:	465b      	mov	r3, fp
 800dd04:	4622      	mov	r2, r4
 800dd06:	4629      	mov	r1, r5
 800dd08:	4638      	mov	r0, r7
 800dd0a:	f7ff ff6d 	bl	800dbe8 <__ssputs_r>
 800dd0e:	3001      	adds	r0, #1
 800dd10:	f000 80aa 	beq.w	800de68 <_svfiprintf_r+0x1c8>
 800dd14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dd16:	445a      	add	r2, fp
 800dd18:	9209      	str	r2, [sp, #36]	; 0x24
 800dd1a:	f89a 3000 	ldrb.w	r3, [sl]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	f000 80a2 	beq.w	800de68 <_svfiprintf_r+0x1c8>
 800dd24:	2300      	movs	r3, #0
 800dd26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dd2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dd2e:	f10a 0a01 	add.w	sl, sl, #1
 800dd32:	9304      	str	r3, [sp, #16]
 800dd34:	9307      	str	r3, [sp, #28]
 800dd36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dd3a:	931a      	str	r3, [sp, #104]	; 0x68
 800dd3c:	4654      	mov	r4, sl
 800dd3e:	2205      	movs	r2, #5
 800dd40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd44:	4851      	ldr	r0, [pc, #324]	; (800de8c <_svfiprintf_r+0x1ec>)
 800dd46:	f7ff fafd 	bl	800d344 <memchr>
 800dd4a:	9a04      	ldr	r2, [sp, #16]
 800dd4c:	b9d8      	cbnz	r0, 800dd86 <_svfiprintf_r+0xe6>
 800dd4e:	06d0      	lsls	r0, r2, #27
 800dd50:	bf44      	itt	mi
 800dd52:	2320      	movmi	r3, #32
 800dd54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dd58:	0711      	lsls	r1, r2, #28
 800dd5a:	bf44      	itt	mi
 800dd5c:	232b      	movmi	r3, #43	; 0x2b
 800dd5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dd62:	f89a 3000 	ldrb.w	r3, [sl]
 800dd66:	2b2a      	cmp	r3, #42	; 0x2a
 800dd68:	d015      	beq.n	800dd96 <_svfiprintf_r+0xf6>
 800dd6a:	4654      	mov	r4, sl
 800dd6c:	2000      	movs	r0, #0
 800dd6e:	f04f 0c0a 	mov.w	ip, #10
 800dd72:	9a07      	ldr	r2, [sp, #28]
 800dd74:	4621      	mov	r1, r4
 800dd76:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dd7a:	3b30      	subs	r3, #48	; 0x30
 800dd7c:	2b09      	cmp	r3, #9
 800dd7e:	d94e      	bls.n	800de1e <_svfiprintf_r+0x17e>
 800dd80:	b1b0      	cbz	r0, 800ddb0 <_svfiprintf_r+0x110>
 800dd82:	9207      	str	r2, [sp, #28]
 800dd84:	e014      	b.n	800ddb0 <_svfiprintf_r+0x110>
 800dd86:	eba0 0308 	sub.w	r3, r0, r8
 800dd8a:	fa09 f303 	lsl.w	r3, r9, r3
 800dd8e:	4313      	orrs	r3, r2
 800dd90:	46a2      	mov	sl, r4
 800dd92:	9304      	str	r3, [sp, #16]
 800dd94:	e7d2      	b.n	800dd3c <_svfiprintf_r+0x9c>
 800dd96:	9b03      	ldr	r3, [sp, #12]
 800dd98:	1d19      	adds	r1, r3, #4
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	9103      	str	r1, [sp, #12]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	bfbb      	ittet	lt
 800dda2:	425b      	neglt	r3, r3
 800dda4:	f042 0202 	orrlt.w	r2, r2, #2
 800dda8:	9307      	strge	r3, [sp, #28]
 800ddaa:	9307      	strlt	r3, [sp, #28]
 800ddac:	bfb8      	it	lt
 800ddae:	9204      	strlt	r2, [sp, #16]
 800ddb0:	7823      	ldrb	r3, [r4, #0]
 800ddb2:	2b2e      	cmp	r3, #46	; 0x2e
 800ddb4:	d10c      	bne.n	800ddd0 <_svfiprintf_r+0x130>
 800ddb6:	7863      	ldrb	r3, [r4, #1]
 800ddb8:	2b2a      	cmp	r3, #42	; 0x2a
 800ddba:	d135      	bne.n	800de28 <_svfiprintf_r+0x188>
 800ddbc:	9b03      	ldr	r3, [sp, #12]
 800ddbe:	3402      	adds	r4, #2
 800ddc0:	1d1a      	adds	r2, r3, #4
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	9203      	str	r2, [sp, #12]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	bfb8      	it	lt
 800ddca:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ddce:	9305      	str	r3, [sp, #20]
 800ddd0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800de9c <_svfiprintf_r+0x1fc>
 800ddd4:	2203      	movs	r2, #3
 800ddd6:	4650      	mov	r0, sl
 800ddd8:	7821      	ldrb	r1, [r4, #0]
 800ddda:	f7ff fab3 	bl	800d344 <memchr>
 800ddde:	b140      	cbz	r0, 800ddf2 <_svfiprintf_r+0x152>
 800dde0:	2340      	movs	r3, #64	; 0x40
 800dde2:	eba0 000a 	sub.w	r0, r0, sl
 800dde6:	fa03 f000 	lsl.w	r0, r3, r0
 800ddea:	9b04      	ldr	r3, [sp, #16]
 800ddec:	3401      	adds	r4, #1
 800ddee:	4303      	orrs	r3, r0
 800ddf0:	9304      	str	r3, [sp, #16]
 800ddf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ddf6:	2206      	movs	r2, #6
 800ddf8:	4825      	ldr	r0, [pc, #148]	; (800de90 <_svfiprintf_r+0x1f0>)
 800ddfa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ddfe:	f7ff faa1 	bl	800d344 <memchr>
 800de02:	2800      	cmp	r0, #0
 800de04:	d038      	beq.n	800de78 <_svfiprintf_r+0x1d8>
 800de06:	4b23      	ldr	r3, [pc, #140]	; (800de94 <_svfiprintf_r+0x1f4>)
 800de08:	bb1b      	cbnz	r3, 800de52 <_svfiprintf_r+0x1b2>
 800de0a:	9b03      	ldr	r3, [sp, #12]
 800de0c:	3307      	adds	r3, #7
 800de0e:	f023 0307 	bic.w	r3, r3, #7
 800de12:	3308      	adds	r3, #8
 800de14:	9303      	str	r3, [sp, #12]
 800de16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de18:	4433      	add	r3, r6
 800de1a:	9309      	str	r3, [sp, #36]	; 0x24
 800de1c:	e767      	b.n	800dcee <_svfiprintf_r+0x4e>
 800de1e:	460c      	mov	r4, r1
 800de20:	2001      	movs	r0, #1
 800de22:	fb0c 3202 	mla	r2, ip, r2, r3
 800de26:	e7a5      	b.n	800dd74 <_svfiprintf_r+0xd4>
 800de28:	2300      	movs	r3, #0
 800de2a:	f04f 0c0a 	mov.w	ip, #10
 800de2e:	4619      	mov	r1, r3
 800de30:	3401      	adds	r4, #1
 800de32:	9305      	str	r3, [sp, #20]
 800de34:	4620      	mov	r0, r4
 800de36:	f810 2b01 	ldrb.w	r2, [r0], #1
 800de3a:	3a30      	subs	r2, #48	; 0x30
 800de3c:	2a09      	cmp	r2, #9
 800de3e:	d903      	bls.n	800de48 <_svfiprintf_r+0x1a8>
 800de40:	2b00      	cmp	r3, #0
 800de42:	d0c5      	beq.n	800ddd0 <_svfiprintf_r+0x130>
 800de44:	9105      	str	r1, [sp, #20]
 800de46:	e7c3      	b.n	800ddd0 <_svfiprintf_r+0x130>
 800de48:	4604      	mov	r4, r0
 800de4a:	2301      	movs	r3, #1
 800de4c:	fb0c 2101 	mla	r1, ip, r1, r2
 800de50:	e7f0      	b.n	800de34 <_svfiprintf_r+0x194>
 800de52:	ab03      	add	r3, sp, #12
 800de54:	9300      	str	r3, [sp, #0]
 800de56:	462a      	mov	r2, r5
 800de58:	4638      	mov	r0, r7
 800de5a:	4b0f      	ldr	r3, [pc, #60]	; (800de98 <_svfiprintf_r+0x1f8>)
 800de5c:	a904      	add	r1, sp, #16
 800de5e:	f7fe f807 	bl	800be70 <_printf_float>
 800de62:	1c42      	adds	r2, r0, #1
 800de64:	4606      	mov	r6, r0
 800de66:	d1d6      	bne.n	800de16 <_svfiprintf_r+0x176>
 800de68:	89ab      	ldrh	r3, [r5, #12]
 800de6a:	065b      	lsls	r3, r3, #25
 800de6c:	f53f af2c 	bmi.w	800dcc8 <_svfiprintf_r+0x28>
 800de70:	9809      	ldr	r0, [sp, #36]	; 0x24
 800de72:	b01d      	add	sp, #116	; 0x74
 800de74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de78:	ab03      	add	r3, sp, #12
 800de7a:	9300      	str	r3, [sp, #0]
 800de7c:	462a      	mov	r2, r5
 800de7e:	4638      	mov	r0, r7
 800de80:	4b05      	ldr	r3, [pc, #20]	; (800de98 <_svfiprintf_r+0x1f8>)
 800de82:	a904      	add	r1, sp, #16
 800de84:	f7fe fa90 	bl	800c3a8 <_printf_i>
 800de88:	e7eb      	b.n	800de62 <_svfiprintf_r+0x1c2>
 800de8a:	bf00      	nop
 800de8c:	0800f3bc 	.word	0x0800f3bc
 800de90:	0800f3c6 	.word	0x0800f3c6
 800de94:	0800be71 	.word	0x0800be71
 800de98:	0800dbe9 	.word	0x0800dbe9
 800de9c:	0800f3c2 	.word	0x0800f3c2

0800dea0 <_sbrk_r>:
 800dea0:	b538      	push	{r3, r4, r5, lr}
 800dea2:	2300      	movs	r3, #0
 800dea4:	4d05      	ldr	r5, [pc, #20]	; (800debc <_sbrk_r+0x1c>)
 800dea6:	4604      	mov	r4, r0
 800dea8:	4608      	mov	r0, r1
 800deaa:	602b      	str	r3, [r5, #0]
 800deac:	f7f4 f990 	bl	80021d0 <_sbrk>
 800deb0:	1c43      	adds	r3, r0, #1
 800deb2:	d102      	bne.n	800deba <_sbrk_r+0x1a>
 800deb4:	682b      	ldr	r3, [r5, #0]
 800deb6:	b103      	cbz	r3, 800deba <_sbrk_r+0x1a>
 800deb8:	6023      	str	r3, [r4, #0]
 800deba:	bd38      	pop	{r3, r4, r5, pc}
 800debc:	20000f98 	.word	0x20000f98

0800dec0 <__assert_func>:
 800dec0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dec2:	4614      	mov	r4, r2
 800dec4:	461a      	mov	r2, r3
 800dec6:	4b09      	ldr	r3, [pc, #36]	; (800deec <__assert_func+0x2c>)
 800dec8:	4605      	mov	r5, r0
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	68d8      	ldr	r0, [r3, #12]
 800dece:	b14c      	cbz	r4, 800dee4 <__assert_func+0x24>
 800ded0:	4b07      	ldr	r3, [pc, #28]	; (800def0 <__assert_func+0x30>)
 800ded2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ded6:	9100      	str	r1, [sp, #0]
 800ded8:	462b      	mov	r3, r5
 800deda:	4906      	ldr	r1, [pc, #24]	; (800def4 <__assert_func+0x34>)
 800dedc:	f000 f80e 	bl	800defc <fiprintf>
 800dee0:	f000 faa2 	bl	800e428 <abort>
 800dee4:	4b04      	ldr	r3, [pc, #16]	; (800def8 <__assert_func+0x38>)
 800dee6:	461c      	mov	r4, r3
 800dee8:	e7f3      	b.n	800ded2 <__assert_func+0x12>
 800deea:	bf00      	nop
 800deec:	200001f8 	.word	0x200001f8
 800def0:	0800f3cd 	.word	0x0800f3cd
 800def4:	0800f3da 	.word	0x0800f3da
 800def8:	0800f408 	.word	0x0800f408

0800defc <fiprintf>:
 800defc:	b40e      	push	{r1, r2, r3}
 800defe:	b503      	push	{r0, r1, lr}
 800df00:	4601      	mov	r1, r0
 800df02:	ab03      	add	r3, sp, #12
 800df04:	4805      	ldr	r0, [pc, #20]	; (800df1c <fiprintf+0x20>)
 800df06:	f853 2b04 	ldr.w	r2, [r3], #4
 800df0a:	6800      	ldr	r0, [r0, #0]
 800df0c:	9301      	str	r3, [sp, #4]
 800df0e:	f000 f88d 	bl	800e02c <_vfiprintf_r>
 800df12:	b002      	add	sp, #8
 800df14:	f85d eb04 	ldr.w	lr, [sp], #4
 800df18:	b003      	add	sp, #12
 800df1a:	4770      	bx	lr
 800df1c:	200001f8 	.word	0x200001f8

0800df20 <__ascii_mbtowc>:
 800df20:	b082      	sub	sp, #8
 800df22:	b901      	cbnz	r1, 800df26 <__ascii_mbtowc+0x6>
 800df24:	a901      	add	r1, sp, #4
 800df26:	b142      	cbz	r2, 800df3a <__ascii_mbtowc+0x1a>
 800df28:	b14b      	cbz	r3, 800df3e <__ascii_mbtowc+0x1e>
 800df2a:	7813      	ldrb	r3, [r2, #0]
 800df2c:	600b      	str	r3, [r1, #0]
 800df2e:	7812      	ldrb	r2, [r2, #0]
 800df30:	1e10      	subs	r0, r2, #0
 800df32:	bf18      	it	ne
 800df34:	2001      	movne	r0, #1
 800df36:	b002      	add	sp, #8
 800df38:	4770      	bx	lr
 800df3a:	4610      	mov	r0, r2
 800df3c:	e7fb      	b.n	800df36 <__ascii_mbtowc+0x16>
 800df3e:	f06f 0001 	mvn.w	r0, #1
 800df42:	e7f8      	b.n	800df36 <__ascii_mbtowc+0x16>

0800df44 <memmove>:
 800df44:	4288      	cmp	r0, r1
 800df46:	b510      	push	{r4, lr}
 800df48:	eb01 0402 	add.w	r4, r1, r2
 800df4c:	d902      	bls.n	800df54 <memmove+0x10>
 800df4e:	4284      	cmp	r4, r0
 800df50:	4623      	mov	r3, r4
 800df52:	d807      	bhi.n	800df64 <memmove+0x20>
 800df54:	1e43      	subs	r3, r0, #1
 800df56:	42a1      	cmp	r1, r4
 800df58:	d008      	beq.n	800df6c <memmove+0x28>
 800df5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800df5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800df62:	e7f8      	b.n	800df56 <memmove+0x12>
 800df64:	4601      	mov	r1, r0
 800df66:	4402      	add	r2, r0
 800df68:	428a      	cmp	r2, r1
 800df6a:	d100      	bne.n	800df6e <memmove+0x2a>
 800df6c:	bd10      	pop	{r4, pc}
 800df6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800df72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800df76:	e7f7      	b.n	800df68 <memmove+0x24>

0800df78 <__malloc_lock>:
 800df78:	4801      	ldr	r0, [pc, #4]	; (800df80 <__malloc_lock+0x8>)
 800df7a:	f000 bc15 	b.w	800e7a8 <__retarget_lock_acquire_recursive>
 800df7e:	bf00      	nop
 800df80:	20000fa0 	.word	0x20000fa0

0800df84 <__malloc_unlock>:
 800df84:	4801      	ldr	r0, [pc, #4]	; (800df8c <__malloc_unlock+0x8>)
 800df86:	f000 bc10 	b.w	800e7aa <__retarget_lock_release_recursive>
 800df8a:	bf00      	nop
 800df8c:	20000fa0 	.word	0x20000fa0

0800df90 <_realloc_r>:
 800df90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df92:	4607      	mov	r7, r0
 800df94:	4614      	mov	r4, r2
 800df96:	460e      	mov	r6, r1
 800df98:	b921      	cbnz	r1, 800dfa4 <_realloc_r+0x14>
 800df9a:	4611      	mov	r1, r2
 800df9c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800dfa0:	f7ff bdc8 	b.w	800db34 <_malloc_r>
 800dfa4:	b922      	cbnz	r2, 800dfb0 <_realloc_r+0x20>
 800dfa6:	f7ff fd79 	bl	800da9c <_free_r>
 800dfaa:	4625      	mov	r5, r4
 800dfac:	4628      	mov	r0, r5
 800dfae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dfb0:	f000 fc60 	bl	800e874 <_malloc_usable_size_r>
 800dfb4:	42a0      	cmp	r0, r4
 800dfb6:	d20f      	bcs.n	800dfd8 <_realloc_r+0x48>
 800dfb8:	4621      	mov	r1, r4
 800dfba:	4638      	mov	r0, r7
 800dfbc:	f7ff fdba 	bl	800db34 <_malloc_r>
 800dfc0:	4605      	mov	r5, r0
 800dfc2:	2800      	cmp	r0, #0
 800dfc4:	d0f2      	beq.n	800dfac <_realloc_r+0x1c>
 800dfc6:	4631      	mov	r1, r6
 800dfc8:	4622      	mov	r2, r4
 800dfca:	f7ff f9c9 	bl	800d360 <memcpy>
 800dfce:	4631      	mov	r1, r6
 800dfd0:	4638      	mov	r0, r7
 800dfd2:	f7ff fd63 	bl	800da9c <_free_r>
 800dfd6:	e7e9      	b.n	800dfac <_realloc_r+0x1c>
 800dfd8:	4635      	mov	r5, r6
 800dfda:	e7e7      	b.n	800dfac <_realloc_r+0x1c>

0800dfdc <__sfputc_r>:
 800dfdc:	6893      	ldr	r3, [r2, #8]
 800dfde:	b410      	push	{r4}
 800dfe0:	3b01      	subs	r3, #1
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	6093      	str	r3, [r2, #8]
 800dfe6:	da07      	bge.n	800dff8 <__sfputc_r+0x1c>
 800dfe8:	6994      	ldr	r4, [r2, #24]
 800dfea:	42a3      	cmp	r3, r4
 800dfec:	db01      	blt.n	800dff2 <__sfputc_r+0x16>
 800dfee:	290a      	cmp	r1, #10
 800dff0:	d102      	bne.n	800dff8 <__sfputc_r+0x1c>
 800dff2:	bc10      	pop	{r4}
 800dff4:	f000 b94a 	b.w	800e28c <__swbuf_r>
 800dff8:	6813      	ldr	r3, [r2, #0]
 800dffa:	1c58      	adds	r0, r3, #1
 800dffc:	6010      	str	r0, [r2, #0]
 800dffe:	7019      	strb	r1, [r3, #0]
 800e000:	4608      	mov	r0, r1
 800e002:	bc10      	pop	{r4}
 800e004:	4770      	bx	lr

0800e006 <__sfputs_r>:
 800e006:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e008:	4606      	mov	r6, r0
 800e00a:	460f      	mov	r7, r1
 800e00c:	4614      	mov	r4, r2
 800e00e:	18d5      	adds	r5, r2, r3
 800e010:	42ac      	cmp	r4, r5
 800e012:	d101      	bne.n	800e018 <__sfputs_r+0x12>
 800e014:	2000      	movs	r0, #0
 800e016:	e007      	b.n	800e028 <__sfputs_r+0x22>
 800e018:	463a      	mov	r2, r7
 800e01a:	4630      	mov	r0, r6
 800e01c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e020:	f7ff ffdc 	bl	800dfdc <__sfputc_r>
 800e024:	1c43      	adds	r3, r0, #1
 800e026:	d1f3      	bne.n	800e010 <__sfputs_r+0xa>
 800e028:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e02c <_vfiprintf_r>:
 800e02c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e030:	460d      	mov	r5, r1
 800e032:	4614      	mov	r4, r2
 800e034:	4698      	mov	r8, r3
 800e036:	4606      	mov	r6, r0
 800e038:	b09d      	sub	sp, #116	; 0x74
 800e03a:	b118      	cbz	r0, 800e044 <_vfiprintf_r+0x18>
 800e03c:	6983      	ldr	r3, [r0, #24]
 800e03e:	b90b      	cbnz	r3, 800e044 <_vfiprintf_r+0x18>
 800e040:	f000 fb14 	bl	800e66c <__sinit>
 800e044:	4b89      	ldr	r3, [pc, #548]	; (800e26c <_vfiprintf_r+0x240>)
 800e046:	429d      	cmp	r5, r3
 800e048:	d11b      	bne.n	800e082 <_vfiprintf_r+0x56>
 800e04a:	6875      	ldr	r5, [r6, #4]
 800e04c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e04e:	07d9      	lsls	r1, r3, #31
 800e050:	d405      	bmi.n	800e05e <_vfiprintf_r+0x32>
 800e052:	89ab      	ldrh	r3, [r5, #12]
 800e054:	059a      	lsls	r2, r3, #22
 800e056:	d402      	bmi.n	800e05e <_vfiprintf_r+0x32>
 800e058:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e05a:	f000 fba5 	bl	800e7a8 <__retarget_lock_acquire_recursive>
 800e05e:	89ab      	ldrh	r3, [r5, #12]
 800e060:	071b      	lsls	r3, r3, #28
 800e062:	d501      	bpl.n	800e068 <_vfiprintf_r+0x3c>
 800e064:	692b      	ldr	r3, [r5, #16]
 800e066:	b9eb      	cbnz	r3, 800e0a4 <_vfiprintf_r+0x78>
 800e068:	4629      	mov	r1, r5
 800e06a:	4630      	mov	r0, r6
 800e06c:	f000 f96e 	bl	800e34c <__swsetup_r>
 800e070:	b1c0      	cbz	r0, 800e0a4 <_vfiprintf_r+0x78>
 800e072:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e074:	07dc      	lsls	r4, r3, #31
 800e076:	d50e      	bpl.n	800e096 <_vfiprintf_r+0x6a>
 800e078:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e07c:	b01d      	add	sp, #116	; 0x74
 800e07e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e082:	4b7b      	ldr	r3, [pc, #492]	; (800e270 <_vfiprintf_r+0x244>)
 800e084:	429d      	cmp	r5, r3
 800e086:	d101      	bne.n	800e08c <_vfiprintf_r+0x60>
 800e088:	68b5      	ldr	r5, [r6, #8]
 800e08a:	e7df      	b.n	800e04c <_vfiprintf_r+0x20>
 800e08c:	4b79      	ldr	r3, [pc, #484]	; (800e274 <_vfiprintf_r+0x248>)
 800e08e:	429d      	cmp	r5, r3
 800e090:	bf08      	it	eq
 800e092:	68f5      	ldreq	r5, [r6, #12]
 800e094:	e7da      	b.n	800e04c <_vfiprintf_r+0x20>
 800e096:	89ab      	ldrh	r3, [r5, #12]
 800e098:	0598      	lsls	r0, r3, #22
 800e09a:	d4ed      	bmi.n	800e078 <_vfiprintf_r+0x4c>
 800e09c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e09e:	f000 fb84 	bl	800e7aa <__retarget_lock_release_recursive>
 800e0a2:	e7e9      	b.n	800e078 <_vfiprintf_r+0x4c>
 800e0a4:	2300      	movs	r3, #0
 800e0a6:	9309      	str	r3, [sp, #36]	; 0x24
 800e0a8:	2320      	movs	r3, #32
 800e0aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e0ae:	2330      	movs	r3, #48	; 0x30
 800e0b0:	f04f 0901 	mov.w	r9, #1
 800e0b4:	f8cd 800c 	str.w	r8, [sp, #12]
 800e0b8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800e278 <_vfiprintf_r+0x24c>
 800e0bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e0c0:	4623      	mov	r3, r4
 800e0c2:	469a      	mov	sl, r3
 800e0c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e0c8:	b10a      	cbz	r2, 800e0ce <_vfiprintf_r+0xa2>
 800e0ca:	2a25      	cmp	r2, #37	; 0x25
 800e0cc:	d1f9      	bne.n	800e0c2 <_vfiprintf_r+0x96>
 800e0ce:	ebba 0b04 	subs.w	fp, sl, r4
 800e0d2:	d00b      	beq.n	800e0ec <_vfiprintf_r+0xc0>
 800e0d4:	465b      	mov	r3, fp
 800e0d6:	4622      	mov	r2, r4
 800e0d8:	4629      	mov	r1, r5
 800e0da:	4630      	mov	r0, r6
 800e0dc:	f7ff ff93 	bl	800e006 <__sfputs_r>
 800e0e0:	3001      	adds	r0, #1
 800e0e2:	f000 80aa 	beq.w	800e23a <_vfiprintf_r+0x20e>
 800e0e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e0e8:	445a      	add	r2, fp
 800e0ea:	9209      	str	r2, [sp, #36]	; 0x24
 800e0ec:	f89a 3000 	ldrb.w	r3, [sl]
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	f000 80a2 	beq.w	800e23a <_vfiprintf_r+0x20e>
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e0fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e100:	f10a 0a01 	add.w	sl, sl, #1
 800e104:	9304      	str	r3, [sp, #16]
 800e106:	9307      	str	r3, [sp, #28]
 800e108:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e10c:	931a      	str	r3, [sp, #104]	; 0x68
 800e10e:	4654      	mov	r4, sl
 800e110:	2205      	movs	r2, #5
 800e112:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e116:	4858      	ldr	r0, [pc, #352]	; (800e278 <_vfiprintf_r+0x24c>)
 800e118:	f7ff f914 	bl	800d344 <memchr>
 800e11c:	9a04      	ldr	r2, [sp, #16]
 800e11e:	b9d8      	cbnz	r0, 800e158 <_vfiprintf_r+0x12c>
 800e120:	06d1      	lsls	r1, r2, #27
 800e122:	bf44      	itt	mi
 800e124:	2320      	movmi	r3, #32
 800e126:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e12a:	0713      	lsls	r3, r2, #28
 800e12c:	bf44      	itt	mi
 800e12e:	232b      	movmi	r3, #43	; 0x2b
 800e130:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e134:	f89a 3000 	ldrb.w	r3, [sl]
 800e138:	2b2a      	cmp	r3, #42	; 0x2a
 800e13a:	d015      	beq.n	800e168 <_vfiprintf_r+0x13c>
 800e13c:	4654      	mov	r4, sl
 800e13e:	2000      	movs	r0, #0
 800e140:	f04f 0c0a 	mov.w	ip, #10
 800e144:	9a07      	ldr	r2, [sp, #28]
 800e146:	4621      	mov	r1, r4
 800e148:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e14c:	3b30      	subs	r3, #48	; 0x30
 800e14e:	2b09      	cmp	r3, #9
 800e150:	d94e      	bls.n	800e1f0 <_vfiprintf_r+0x1c4>
 800e152:	b1b0      	cbz	r0, 800e182 <_vfiprintf_r+0x156>
 800e154:	9207      	str	r2, [sp, #28]
 800e156:	e014      	b.n	800e182 <_vfiprintf_r+0x156>
 800e158:	eba0 0308 	sub.w	r3, r0, r8
 800e15c:	fa09 f303 	lsl.w	r3, r9, r3
 800e160:	4313      	orrs	r3, r2
 800e162:	46a2      	mov	sl, r4
 800e164:	9304      	str	r3, [sp, #16]
 800e166:	e7d2      	b.n	800e10e <_vfiprintf_r+0xe2>
 800e168:	9b03      	ldr	r3, [sp, #12]
 800e16a:	1d19      	adds	r1, r3, #4
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	9103      	str	r1, [sp, #12]
 800e170:	2b00      	cmp	r3, #0
 800e172:	bfbb      	ittet	lt
 800e174:	425b      	neglt	r3, r3
 800e176:	f042 0202 	orrlt.w	r2, r2, #2
 800e17a:	9307      	strge	r3, [sp, #28]
 800e17c:	9307      	strlt	r3, [sp, #28]
 800e17e:	bfb8      	it	lt
 800e180:	9204      	strlt	r2, [sp, #16]
 800e182:	7823      	ldrb	r3, [r4, #0]
 800e184:	2b2e      	cmp	r3, #46	; 0x2e
 800e186:	d10c      	bne.n	800e1a2 <_vfiprintf_r+0x176>
 800e188:	7863      	ldrb	r3, [r4, #1]
 800e18a:	2b2a      	cmp	r3, #42	; 0x2a
 800e18c:	d135      	bne.n	800e1fa <_vfiprintf_r+0x1ce>
 800e18e:	9b03      	ldr	r3, [sp, #12]
 800e190:	3402      	adds	r4, #2
 800e192:	1d1a      	adds	r2, r3, #4
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	9203      	str	r2, [sp, #12]
 800e198:	2b00      	cmp	r3, #0
 800e19a:	bfb8      	it	lt
 800e19c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e1a0:	9305      	str	r3, [sp, #20]
 800e1a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e288 <_vfiprintf_r+0x25c>
 800e1a6:	2203      	movs	r2, #3
 800e1a8:	4650      	mov	r0, sl
 800e1aa:	7821      	ldrb	r1, [r4, #0]
 800e1ac:	f7ff f8ca 	bl	800d344 <memchr>
 800e1b0:	b140      	cbz	r0, 800e1c4 <_vfiprintf_r+0x198>
 800e1b2:	2340      	movs	r3, #64	; 0x40
 800e1b4:	eba0 000a 	sub.w	r0, r0, sl
 800e1b8:	fa03 f000 	lsl.w	r0, r3, r0
 800e1bc:	9b04      	ldr	r3, [sp, #16]
 800e1be:	3401      	adds	r4, #1
 800e1c0:	4303      	orrs	r3, r0
 800e1c2:	9304      	str	r3, [sp, #16]
 800e1c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1c8:	2206      	movs	r2, #6
 800e1ca:	482c      	ldr	r0, [pc, #176]	; (800e27c <_vfiprintf_r+0x250>)
 800e1cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e1d0:	f7ff f8b8 	bl	800d344 <memchr>
 800e1d4:	2800      	cmp	r0, #0
 800e1d6:	d03f      	beq.n	800e258 <_vfiprintf_r+0x22c>
 800e1d8:	4b29      	ldr	r3, [pc, #164]	; (800e280 <_vfiprintf_r+0x254>)
 800e1da:	bb1b      	cbnz	r3, 800e224 <_vfiprintf_r+0x1f8>
 800e1dc:	9b03      	ldr	r3, [sp, #12]
 800e1de:	3307      	adds	r3, #7
 800e1e0:	f023 0307 	bic.w	r3, r3, #7
 800e1e4:	3308      	adds	r3, #8
 800e1e6:	9303      	str	r3, [sp, #12]
 800e1e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e1ea:	443b      	add	r3, r7
 800e1ec:	9309      	str	r3, [sp, #36]	; 0x24
 800e1ee:	e767      	b.n	800e0c0 <_vfiprintf_r+0x94>
 800e1f0:	460c      	mov	r4, r1
 800e1f2:	2001      	movs	r0, #1
 800e1f4:	fb0c 3202 	mla	r2, ip, r2, r3
 800e1f8:	e7a5      	b.n	800e146 <_vfiprintf_r+0x11a>
 800e1fa:	2300      	movs	r3, #0
 800e1fc:	f04f 0c0a 	mov.w	ip, #10
 800e200:	4619      	mov	r1, r3
 800e202:	3401      	adds	r4, #1
 800e204:	9305      	str	r3, [sp, #20]
 800e206:	4620      	mov	r0, r4
 800e208:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e20c:	3a30      	subs	r2, #48	; 0x30
 800e20e:	2a09      	cmp	r2, #9
 800e210:	d903      	bls.n	800e21a <_vfiprintf_r+0x1ee>
 800e212:	2b00      	cmp	r3, #0
 800e214:	d0c5      	beq.n	800e1a2 <_vfiprintf_r+0x176>
 800e216:	9105      	str	r1, [sp, #20]
 800e218:	e7c3      	b.n	800e1a2 <_vfiprintf_r+0x176>
 800e21a:	4604      	mov	r4, r0
 800e21c:	2301      	movs	r3, #1
 800e21e:	fb0c 2101 	mla	r1, ip, r1, r2
 800e222:	e7f0      	b.n	800e206 <_vfiprintf_r+0x1da>
 800e224:	ab03      	add	r3, sp, #12
 800e226:	9300      	str	r3, [sp, #0]
 800e228:	462a      	mov	r2, r5
 800e22a:	4630      	mov	r0, r6
 800e22c:	4b15      	ldr	r3, [pc, #84]	; (800e284 <_vfiprintf_r+0x258>)
 800e22e:	a904      	add	r1, sp, #16
 800e230:	f7fd fe1e 	bl	800be70 <_printf_float>
 800e234:	4607      	mov	r7, r0
 800e236:	1c78      	adds	r0, r7, #1
 800e238:	d1d6      	bne.n	800e1e8 <_vfiprintf_r+0x1bc>
 800e23a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e23c:	07d9      	lsls	r1, r3, #31
 800e23e:	d405      	bmi.n	800e24c <_vfiprintf_r+0x220>
 800e240:	89ab      	ldrh	r3, [r5, #12]
 800e242:	059a      	lsls	r2, r3, #22
 800e244:	d402      	bmi.n	800e24c <_vfiprintf_r+0x220>
 800e246:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e248:	f000 faaf 	bl	800e7aa <__retarget_lock_release_recursive>
 800e24c:	89ab      	ldrh	r3, [r5, #12]
 800e24e:	065b      	lsls	r3, r3, #25
 800e250:	f53f af12 	bmi.w	800e078 <_vfiprintf_r+0x4c>
 800e254:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e256:	e711      	b.n	800e07c <_vfiprintf_r+0x50>
 800e258:	ab03      	add	r3, sp, #12
 800e25a:	9300      	str	r3, [sp, #0]
 800e25c:	462a      	mov	r2, r5
 800e25e:	4630      	mov	r0, r6
 800e260:	4b08      	ldr	r3, [pc, #32]	; (800e284 <_vfiprintf_r+0x258>)
 800e262:	a904      	add	r1, sp, #16
 800e264:	f7fe f8a0 	bl	800c3a8 <_printf_i>
 800e268:	e7e4      	b.n	800e234 <_vfiprintf_r+0x208>
 800e26a:	bf00      	nop
 800e26c:	0800f534 	.word	0x0800f534
 800e270:	0800f554 	.word	0x0800f554
 800e274:	0800f514 	.word	0x0800f514
 800e278:	0800f3bc 	.word	0x0800f3bc
 800e27c:	0800f3c6 	.word	0x0800f3c6
 800e280:	0800be71 	.word	0x0800be71
 800e284:	0800e007 	.word	0x0800e007
 800e288:	0800f3c2 	.word	0x0800f3c2

0800e28c <__swbuf_r>:
 800e28c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e28e:	460e      	mov	r6, r1
 800e290:	4614      	mov	r4, r2
 800e292:	4605      	mov	r5, r0
 800e294:	b118      	cbz	r0, 800e29e <__swbuf_r+0x12>
 800e296:	6983      	ldr	r3, [r0, #24]
 800e298:	b90b      	cbnz	r3, 800e29e <__swbuf_r+0x12>
 800e29a:	f000 f9e7 	bl	800e66c <__sinit>
 800e29e:	4b21      	ldr	r3, [pc, #132]	; (800e324 <__swbuf_r+0x98>)
 800e2a0:	429c      	cmp	r4, r3
 800e2a2:	d12b      	bne.n	800e2fc <__swbuf_r+0x70>
 800e2a4:	686c      	ldr	r4, [r5, #4]
 800e2a6:	69a3      	ldr	r3, [r4, #24]
 800e2a8:	60a3      	str	r3, [r4, #8]
 800e2aa:	89a3      	ldrh	r3, [r4, #12]
 800e2ac:	071a      	lsls	r2, r3, #28
 800e2ae:	d52f      	bpl.n	800e310 <__swbuf_r+0x84>
 800e2b0:	6923      	ldr	r3, [r4, #16]
 800e2b2:	b36b      	cbz	r3, 800e310 <__swbuf_r+0x84>
 800e2b4:	6923      	ldr	r3, [r4, #16]
 800e2b6:	6820      	ldr	r0, [r4, #0]
 800e2b8:	b2f6      	uxtb	r6, r6
 800e2ba:	1ac0      	subs	r0, r0, r3
 800e2bc:	6963      	ldr	r3, [r4, #20]
 800e2be:	4637      	mov	r7, r6
 800e2c0:	4283      	cmp	r3, r0
 800e2c2:	dc04      	bgt.n	800e2ce <__swbuf_r+0x42>
 800e2c4:	4621      	mov	r1, r4
 800e2c6:	4628      	mov	r0, r5
 800e2c8:	f000 f93c 	bl	800e544 <_fflush_r>
 800e2cc:	bb30      	cbnz	r0, 800e31c <__swbuf_r+0x90>
 800e2ce:	68a3      	ldr	r3, [r4, #8]
 800e2d0:	3001      	adds	r0, #1
 800e2d2:	3b01      	subs	r3, #1
 800e2d4:	60a3      	str	r3, [r4, #8]
 800e2d6:	6823      	ldr	r3, [r4, #0]
 800e2d8:	1c5a      	adds	r2, r3, #1
 800e2da:	6022      	str	r2, [r4, #0]
 800e2dc:	701e      	strb	r6, [r3, #0]
 800e2de:	6963      	ldr	r3, [r4, #20]
 800e2e0:	4283      	cmp	r3, r0
 800e2e2:	d004      	beq.n	800e2ee <__swbuf_r+0x62>
 800e2e4:	89a3      	ldrh	r3, [r4, #12]
 800e2e6:	07db      	lsls	r3, r3, #31
 800e2e8:	d506      	bpl.n	800e2f8 <__swbuf_r+0x6c>
 800e2ea:	2e0a      	cmp	r6, #10
 800e2ec:	d104      	bne.n	800e2f8 <__swbuf_r+0x6c>
 800e2ee:	4621      	mov	r1, r4
 800e2f0:	4628      	mov	r0, r5
 800e2f2:	f000 f927 	bl	800e544 <_fflush_r>
 800e2f6:	b988      	cbnz	r0, 800e31c <__swbuf_r+0x90>
 800e2f8:	4638      	mov	r0, r7
 800e2fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e2fc:	4b0a      	ldr	r3, [pc, #40]	; (800e328 <__swbuf_r+0x9c>)
 800e2fe:	429c      	cmp	r4, r3
 800e300:	d101      	bne.n	800e306 <__swbuf_r+0x7a>
 800e302:	68ac      	ldr	r4, [r5, #8]
 800e304:	e7cf      	b.n	800e2a6 <__swbuf_r+0x1a>
 800e306:	4b09      	ldr	r3, [pc, #36]	; (800e32c <__swbuf_r+0xa0>)
 800e308:	429c      	cmp	r4, r3
 800e30a:	bf08      	it	eq
 800e30c:	68ec      	ldreq	r4, [r5, #12]
 800e30e:	e7ca      	b.n	800e2a6 <__swbuf_r+0x1a>
 800e310:	4621      	mov	r1, r4
 800e312:	4628      	mov	r0, r5
 800e314:	f000 f81a 	bl	800e34c <__swsetup_r>
 800e318:	2800      	cmp	r0, #0
 800e31a:	d0cb      	beq.n	800e2b4 <__swbuf_r+0x28>
 800e31c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800e320:	e7ea      	b.n	800e2f8 <__swbuf_r+0x6c>
 800e322:	bf00      	nop
 800e324:	0800f534 	.word	0x0800f534
 800e328:	0800f554 	.word	0x0800f554
 800e32c:	0800f514 	.word	0x0800f514

0800e330 <__ascii_wctomb>:
 800e330:	4603      	mov	r3, r0
 800e332:	4608      	mov	r0, r1
 800e334:	b141      	cbz	r1, 800e348 <__ascii_wctomb+0x18>
 800e336:	2aff      	cmp	r2, #255	; 0xff
 800e338:	d904      	bls.n	800e344 <__ascii_wctomb+0x14>
 800e33a:	228a      	movs	r2, #138	; 0x8a
 800e33c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e340:	601a      	str	r2, [r3, #0]
 800e342:	4770      	bx	lr
 800e344:	2001      	movs	r0, #1
 800e346:	700a      	strb	r2, [r1, #0]
 800e348:	4770      	bx	lr
	...

0800e34c <__swsetup_r>:
 800e34c:	4b32      	ldr	r3, [pc, #200]	; (800e418 <__swsetup_r+0xcc>)
 800e34e:	b570      	push	{r4, r5, r6, lr}
 800e350:	681d      	ldr	r5, [r3, #0]
 800e352:	4606      	mov	r6, r0
 800e354:	460c      	mov	r4, r1
 800e356:	b125      	cbz	r5, 800e362 <__swsetup_r+0x16>
 800e358:	69ab      	ldr	r3, [r5, #24]
 800e35a:	b913      	cbnz	r3, 800e362 <__swsetup_r+0x16>
 800e35c:	4628      	mov	r0, r5
 800e35e:	f000 f985 	bl	800e66c <__sinit>
 800e362:	4b2e      	ldr	r3, [pc, #184]	; (800e41c <__swsetup_r+0xd0>)
 800e364:	429c      	cmp	r4, r3
 800e366:	d10f      	bne.n	800e388 <__swsetup_r+0x3c>
 800e368:	686c      	ldr	r4, [r5, #4]
 800e36a:	89a3      	ldrh	r3, [r4, #12]
 800e36c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e370:	0719      	lsls	r1, r3, #28
 800e372:	d42c      	bmi.n	800e3ce <__swsetup_r+0x82>
 800e374:	06dd      	lsls	r5, r3, #27
 800e376:	d411      	bmi.n	800e39c <__swsetup_r+0x50>
 800e378:	2309      	movs	r3, #9
 800e37a:	6033      	str	r3, [r6, #0]
 800e37c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e380:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e384:	81a3      	strh	r3, [r4, #12]
 800e386:	e03e      	b.n	800e406 <__swsetup_r+0xba>
 800e388:	4b25      	ldr	r3, [pc, #148]	; (800e420 <__swsetup_r+0xd4>)
 800e38a:	429c      	cmp	r4, r3
 800e38c:	d101      	bne.n	800e392 <__swsetup_r+0x46>
 800e38e:	68ac      	ldr	r4, [r5, #8]
 800e390:	e7eb      	b.n	800e36a <__swsetup_r+0x1e>
 800e392:	4b24      	ldr	r3, [pc, #144]	; (800e424 <__swsetup_r+0xd8>)
 800e394:	429c      	cmp	r4, r3
 800e396:	bf08      	it	eq
 800e398:	68ec      	ldreq	r4, [r5, #12]
 800e39a:	e7e6      	b.n	800e36a <__swsetup_r+0x1e>
 800e39c:	0758      	lsls	r0, r3, #29
 800e39e:	d512      	bpl.n	800e3c6 <__swsetup_r+0x7a>
 800e3a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e3a2:	b141      	cbz	r1, 800e3b6 <__swsetup_r+0x6a>
 800e3a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e3a8:	4299      	cmp	r1, r3
 800e3aa:	d002      	beq.n	800e3b2 <__swsetup_r+0x66>
 800e3ac:	4630      	mov	r0, r6
 800e3ae:	f7ff fb75 	bl	800da9c <_free_r>
 800e3b2:	2300      	movs	r3, #0
 800e3b4:	6363      	str	r3, [r4, #52]	; 0x34
 800e3b6:	89a3      	ldrh	r3, [r4, #12]
 800e3b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e3bc:	81a3      	strh	r3, [r4, #12]
 800e3be:	2300      	movs	r3, #0
 800e3c0:	6063      	str	r3, [r4, #4]
 800e3c2:	6923      	ldr	r3, [r4, #16]
 800e3c4:	6023      	str	r3, [r4, #0]
 800e3c6:	89a3      	ldrh	r3, [r4, #12]
 800e3c8:	f043 0308 	orr.w	r3, r3, #8
 800e3cc:	81a3      	strh	r3, [r4, #12]
 800e3ce:	6923      	ldr	r3, [r4, #16]
 800e3d0:	b94b      	cbnz	r3, 800e3e6 <__swsetup_r+0x9a>
 800e3d2:	89a3      	ldrh	r3, [r4, #12]
 800e3d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e3d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e3dc:	d003      	beq.n	800e3e6 <__swsetup_r+0x9a>
 800e3de:	4621      	mov	r1, r4
 800e3e0:	4630      	mov	r0, r6
 800e3e2:	f000 fa07 	bl	800e7f4 <__smakebuf_r>
 800e3e6:	89a0      	ldrh	r0, [r4, #12]
 800e3e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e3ec:	f010 0301 	ands.w	r3, r0, #1
 800e3f0:	d00a      	beq.n	800e408 <__swsetup_r+0xbc>
 800e3f2:	2300      	movs	r3, #0
 800e3f4:	60a3      	str	r3, [r4, #8]
 800e3f6:	6963      	ldr	r3, [r4, #20]
 800e3f8:	425b      	negs	r3, r3
 800e3fa:	61a3      	str	r3, [r4, #24]
 800e3fc:	6923      	ldr	r3, [r4, #16]
 800e3fe:	b943      	cbnz	r3, 800e412 <__swsetup_r+0xc6>
 800e400:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e404:	d1ba      	bne.n	800e37c <__swsetup_r+0x30>
 800e406:	bd70      	pop	{r4, r5, r6, pc}
 800e408:	0781      	lsls	r1, r0, #30
 800e40a:	bf58      	it	pl
 800e40c:	6963      	ldrpl	r3, [r4, #20]
 800e40e:	60a3      	str	r3, [r4, #8]
 800e410:	e7f4      	b.n	800e3fc <__swsetup_r+0xb0>
 800e412:	2000      	movs	r0, #0
 800e414:	e7f7      	b.n	800e406 <__swsetup_r+0xba>
 800e416:	bf00      	nop
 800e418:	200001f8 	.word	0x200001f8
 800e41c:	0800f534 	.word	0x0800f534
 800e420:	0800f554 	.word	0x0800f554
 800e424:	0800f514 	.word	0x0800f514

0800e428 <abort>:
 800e428:	2006      	movs	r0, #6
 800e42a:	b508      	push	{r3, lr}
 800e42c:	f000 fa52 	bl	800e8d4 <raise>
 800e430:	2001      	movs	r0, #1
 800e432:	f7f3 fe5a 	bl	80020ea <_exit>
	...

0800e438 <__sflush_r>:
 800e438:	898a      	ldrh	r2, [r1, #12]
 800e43a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e43e:	4605      	mov	r5, r0
 800e440:	0710      	lsls	r0, r2, #28
 800e442:	460c      	mov	r4, r1
 800e444:	d458      	bmi.n	800e4f8 <__sflush_r+0xc0>
 800e446:	684b      	ldr	r3, [r1, #4]
 800e448:	2b00      	cmp	r3, #0
 800e44a:	dc05      	bgt.n	800e458 <__sflush_r+0x20>
 800e44c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e44e:	2b00      	cmp	r3, #0
 800e450:	dc02      	bgt.n	800e458 <__sflush_r+0x20>
 800e452:	2000      	movs	r0, #0
 800e454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e458:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e45a:	2e00      	cmp	r6, #0
 800e45c:	d0f9      	beq.n	800e452 <__sflush_r+0x1a>
 800e45e:	2300      	movs	r3, #0
 800e460:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e464:	682f      	ldr	r7, [r5, #0]
 800e466:	602b      	str	r3, [r5, #0]
 800e468:	d032      	beq.n	800e4d0 <__sflush_r+0x98>
 800e46a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e46c:	89a3      	ldrh	r3, [r4, #12]
 800e46e:	075a      	lsls	r2, r3, #29
 800e470:	d505      	bpl.n	800e47e <__sflush_r+0x46>
 800e472:	6863      	ldr	r3, [r4, #4]
 800e474:	1ac0      	subs	r0, r0, r3
 800e476:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e478:	b10b      	cbz	r3, 800e47e <__sflush_r+0x46>
 800e47a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e47c:	1ac0      	subs	r0, r0, r3
 800e47e:	2300      	movs	r3, #0
 800e480:	4602      	mov	r2, r0
 800e482:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e484:	4628      	mov	r0, r5
 800e486:	6a21      	ldr	r1, [r4, #32]
 800e488:	47b0      	blx	r6
 800e48a:	1c43      	adds	r3, r0, #1
 800e48c:	89a3      	ldrh	r3, [r4, #12]
 800e48e:	d106      	bne.n	800e49e <__sflush_r+0x66>
 800e490:	6829      	ldr	r1, [r5, #0]
 800e492:	291d      	cmp	r1, #29
 800e494:	d82c      	bhi.n	800e4f0 <__sflush_r+0xb8>
 800e496:	4a2a      	ldr	r2, [pc, #168]	; (800e540 <__sflush_r+0x108>)
 800e498:	40ca      	lsrs	r2, r1
 800e49a:	07d6      	lsls	r6, r2, #31
 800e49c:	d528      	bpl.n	800e4f0 <__sflush_r+0xb8>
 800e49e:	2200      	movs	r2, #0
 800e4a0:	6062      	str	r2, [r4, #4]
 800e4a2:	6922      	ldr	r2, [r4, #16]
 800e4a4:	04d9      	lsls	r1, r3, #19
 800e4a6:	6022      	str	r2, [r4, #0]
 800e4a8:	d504      	bpl.n	800e4b4 <__sflush_r+0x7c>
 800e4aa:	1c42      	adds	r2, r0, #1
 800e4ac:	d101      	bne.n	800e4b2 <__sflush_r+0x7a>
 800e4ae:	682b      	ldr	r3, [r5, #0]
 800e4b0:	b903      	cbnz	r3, 800e4b4 <__sflush_r+0x7c>
 800e4b2:	6560      	str	r0, [r4, #84]	; 0x54
 800e4b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e4b6:	602f      	str	r7, [r5, #0]
 800e4b8:	2900      	cmp	r1, #0
 800e4ba:	d0ca      	beq.n	800e452 <__sflush_r+0x1a>
 800e4bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e4c0:	4299      	cmp	r1, r3
 800e4c2:	d002      	beq.n	800e4ca <__sflush_r+0x92>
 800e4c4:	4628      	mov	r0, r5
 800e4c6:	f7ff fae9 	bl	800da9c <_free_r>
 800e4ca:	2000      	movs	r0, #0
 800e4cc:	6360      	str	r0, [r4, #52]	; 0x34
 800e4ce:	e7c1      	b.n	800e454 <__sflush_r+0x1c>
 800e4d0:	6a21      	ldr	r1, [r4, #32]
 800e4d2:	2301      	movs	r3, #1
 800e4d4:	4628      	mov	r0, r5
 800e4d6:	47b0      	blx	r6
 800e4d8:	1c41      	adds	r1, r0, #1
 800e4da:	d1c7      	bne.n	800e46c <__sflush_r+0x34>
 800e4dc:	682b      	ldr	r3, [r5, #0]
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d0c4      	beq.n	800e46c <__sflush_r+0x34>
 800e4e2:	2b1d      	cmp	r3, #29
 800e4e4:	d001      	beq.n	800e4ea <__sflush_r+0xb2>
 800e4e6:	2b16      	cmp	r3, #22
 800e4e8:	d101      	bne.n	800e4ee <__sflush_r+0xb6>
 800e4ea:	602f      	str	r7, [r5, #0]
 800e4ec:	e7b1      	b.n	800e452 <__sflush_r+0x1a>
 800e4ee:	89a3      	ldrh	r3, [r4, #12]
 800e4f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e4f4:	81a3      	strh	r3, [r4, #12]
 800e4f6:	e7ad      	b.n	800e454 <__sflush_r+0x1c>
 800e4f8:	690f      	ldr	r7, [r1, #16]
 800e4fa:	2f00      	cmp	r7, #0
 800e4fc:	d0a9      	beq.n	800e452 <__sflush_r+0x1a>
 800e4fe:	0793      	lsls	r3, r2, #30
 800e500:	bf18      	it	ne
 800e502:	2300      	movne	r3, #0
 800e504:	680e      	ldr	r6, [r1, #0]
 800e506:	bf08      	it	eq
 800e508:	694b      	ldreq	r3, [r1, #20]
 800e50a:	eba6 0807 	sub.w	r8, r6, r7
 800e50e:	600f      	str	r7, [r1, #0]
 800e510:	608b      	str	r3, [r1, #8]
 800e512:	f1b8 0f00 	cmp.w	r8, #0
 800e516:	dd9c      	ble.n	800e452 <__sflush_r+0x1a>
 800e518:	4643      	mov	r3, r8
 800e51a:	463a      	mov	r2, r7
 800e51c:	4628      	mov	r0, r5
 800e51e:	6a21      	ldr	r1, [r4, #32]
 800e520:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e522:	47b0      	blx	r6
 800e524:	2800      	cmp	r0, #0
 800e526:	dc06      	bgt.n	800e536 <__sflush_r+0xfe>
 800e528:	89a3      	ldrh	r3, [r4, #12]
 800e52a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e52e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e532:	81a3      	strh	r3, [r4, #12]
 800e534:	e78e      	b.n	800e454 <__sflush_r+0x1c>
 800e536:	4407      	add	r7, r0
 800e538:	eba8 0800 	sub.w	r8, r8, r0
 800e53c:	e7e9      	b.n	800e512 <__sflush_r+0xda>
 800e53e:	bf00      	nop
 800e540:	20400001 	.word	0x20400001

0800e544 <_fflush_r>:
 800e544:	b538      	push	{r3, r4, r5, lr}
 800e546:	690b      	ldr	r3, [r1, #16]
 800e548:	4605      	mov	r5, r0
 800e54a:	460c      	mov	r4, r1
 800e54c:	b913      	cbnz	r3, 800e554 <_fflush_r+0x10>
 800e54e:	2500      	movs	r5, #0
 800e550:	4628      	mov	r0, r5
 800e552:	bd38      	pop	{r3, r4, r5, pc}
 800e554:	b118      	cbz	r0, 800e55e <_fflush_r+0x1a>
 800e556:	6983      	ldr	r3, [r0, #24]
 800e558:	b90b      	cbnz	r3, 800e55e <_fflush_r+0x1a>
 800e55a:	f000 f887 	bl	800e66c <__sinit>
 800e55e:	4b14      	ldr	r3, [pc, #80]	; (800e5b0 <_fflush_r+0x6c>)
 800e560:	429c      	cmp	r4, r3
 800e562:	d11b      	bne.n	800e59c <_fflush_r+0x58>
 800e564:	686c      	ldr	r4, [r5, #4]
 800e566:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d0ef      	beq.n	800e54e <_fflush_r+0xa>
 800e56e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e570:	07d0      	lsls	r0, r2, #31
 800e572:	d404      	bmi.n	800e57e <_fflush_r+0x3a>
 800e574:	0599      	lsls	r1, r3, #22
 800e576:	d402      	bmi.n	800e57e <_fflush_r+0x3a>
 800e578:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e57a:	f000 f915 	bl	800e7a8 <__retarget_lock_acquire_recursive>
 800e57e:	4628      	mov	r0, r5
 800e580:	4621      	mov	r1, r4
 800e582:	f7ff ff59 	bl	800e438 <__sflush_r>
 800e586:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e588:	4605      	mov	r5, r0
 800e58a:	07da      	lsls	r2, r3, #31
 800e58c:	d4e0      	bmi.n	800e550 <_fflush_r+0xc>
 800e58e:	89a3      	ldrh	r3, [r4, #12]
 800e590:	059b      	lsls	r3, r3, #22
 800e592:	d4dd      	bmi.n	800e550 <_fflush_r+0xc>
 800e594:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e596:	f000 f908 	bl	800e7aa <__retarget_lock_release_recursive>
 800e59a:	e7d9      	b.n	800e550 <_fflush_r+0xc>
 800e59c:	4b05      	ldr	r3, [pc, #20]	; (800e5b4 <_fflush_r+0x70>)
 800e59e:	429c      	cmp	r4, r3
 800e5a0:	d101      	bne.n	800e5a6 <_fflush_r+0x62>
 800e5a2:	68ac      	ldr	r4, [r5, #8]
 800e5a4:	e7df      	b.n	800e566 <_fflush_r+0x22>
 800e5a6:	4b04      	ldr	r3, [pc, #16]	; (800e5b8 <_fflush_r+0x74>)
 800e5a8:	429c      	cmp	r4, r3
 800e5aa:	bf08      	it	eq
 800e5ac:	68ec      	ldreq	r4, [r5, #12]
 800e5ae:	e7da      	b.n	800e566 <_fflush_r+0x22>
 800e5b0:	0800f534 	.word	0x0800f534
 800e5b4:	0800f554 	.word	0x0800f554
 800e5b8:	0800f514 	.word	0x0800f514

0800e5bc <std>:
 800e5bc:	2300      	movs	r3, #0
 800e5be:	b510      	push	{r4, lr}
 800e5c0:	4604      	mov	r4, r0
 800e5c2:	e9c0 3300 	strd	r3, r3, [r0]
 800e5c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e5ca:	6083      	str	r3, [r0, #8]
 800e5cc:	8181      	strh	r1, [r0, #12]
 800e5ce:	6643      	str	r3, [r0, #100]	; 0x64
 800e5d0:	81c2      	strh	r2, [r0, #14]
 800e5d2:	6183      	str	r3, [r0, #24]
 800e5d4:	4619      	mov	r1, r3
 800e5d6:	2208      	movs	r2, #8
 800e5d8:	305c      	adds	r0, #92	; 0x5c
 800e5da:	f7fd fba3 	bl	800bd24 <memset>
 800e5de:	4b05      	ldr	r3, [pc, #20]	; (800e5f4 <std+0x38>)
 800e5e0:	6224      	str	r4, [r4, #32]
 800e5e2:	6263      	str	r3, [r4, #36]	; 0x24
 800e5e4:	4b04      	ldr	r3, [pc, #16]	; (800e5f8 <std+0x3c>)
 800e5e6:	62a3      	str	r3, [r4, #40]	; 0x28
 800e5e8:	4b04      	ldr	r3, [pc, #16]	; (800e5fc <std+0x40>)
 800e5ea:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e5ec:	4b04      	ldr	r3, [pc, #16]	; (800e600 <std+0x44>)
 800e5ee:	6323      	str	r3, [r4, #48]	; 0x30
 800e5f0:	bd10      	pop	{r4, pc}
 800e5f2:	bf00      	nop
 800e5f4:	0800e90d 	.word	0x0800e90d
 800e5f8:	0800e92f 	.word	0x0800e92f
 800e5fc:	0800e967 	.word	0x0800e967
 800e600:	0800e98b 	.word	0x0800e98b

0800e604 <_cleanup_r>:
 800e604:	4901      	ldr	r1, [pc, #4]	; (800e60c <_cleanup_r+0x8>)
 800e606:	f000 b8af 	b.w	800e768 <_fwalk_reent>
 800e60a:	bf00      	nop
 800e60c:	0800e545 	.word	0x0800e545

0800e610 <__sfmoreglue>:
 800e610:	b570      	push	{r4, r5, r6, lr}
 800e612:	2568      	movs	r5, #104	; 0x68
 800e614:	1e4a      	subs	r2, r1, #1
 800e616:	4355      	muls	r5, r2
 800e618:	460e      	mov	r6, r1
 800e61a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e61e:	f7ff fa89 	bl	800db34 <_malloc_r>
 800e622:	4604      	mov	r4, r0
 800e624:	b140      	cbz	r0, 800e638 <__sfmoreglue+0x28>
 800e626:	2100      	movs	r1, #0
 800e628:	e9c0 1600 	strd	r1, r6, [r0]
 800e62c:	300c      	adds	r0, #12
 800e62e:	60a0      	str	r0, [r4, #8]
 800e630:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e634:	f7fd fb76 	bl	800bd24 <memset>
 800e638:	4620      	mov	r0, r4
 800e63a:	bd70      	pop	{r4, r5, r6, pc}

0800e63c <__sfp_lock_acquire>:
 800e63c:	4801      	ldr	r0, [pc, #4]	; (800e644 <__sfp_lock_acquire+0x8>)
 800e63e:	f000 b8b3 	b.w	800e7a8 <__retarget_lock_acquire_recursive>
 800e642:	bf00      	nop
 800e644:	20000fa4 	.word	0x20000fa4

0800e648 <__sfp_lock_release>:
 800e648:	4801      	ldr	r0, [pc, #4]	; (800e650 <__sfp_lock_release+0x8>)
 800e64a:	f000 b8ae 	b.w	800e7aa <__retarget_lock_release_recursive>
 800e64e:	bf00      	nop
 800e650:	20000fa4 	.word	0x20000fa4

0800e654 <__sinit_lock_acquire>:
 800e654:	4801      	ldr	r0, [pc, #4]	; (800e65c <__sinit_lock_acquire+0x8>)
 800e656:	f000 b8a7 	b.w	800e7a8 <__retarget_lock_acquire_recursive>
 800e65a:	bf00      	nop
 800e65c:	20000f9f 	.word	0x20000f9f

0800e660 <__sinit_lock_release>:
 800e660:	4801      	ldr	r0, [pc, #4]	; (800e668 <__sinit_lock_release+0x8>)
 800e662:	f000 b8a2 	b.w	800e7aa <__retarget_lock_release_recursive>
 800e666:	bf00      	nop
 800e668:	20000f9f 	.word	0x20000f9f

0800e66c <__sinit>:
 800e66c:	b510      	push	{r4, lr}
 800e66e:	4604      	mov	r4, r0
 800e670:	f7ff fff0 	bl	800e654 <__sinit_lock_acquire>
 800e674:	69a3      	ldr	r3, [r4, #24]
 800e676:	b11b      	cbz	r3, 800e680 <__sinit+0x14>
 800e678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e67c:	f7ff bff0 	b.w	800e660 <__sinit_lock_release>
 800e680:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e684:	6523      	str	r3, [r4, #80]	; 0x50
 800e686:	4b13      	ldr	r3, [pc, #76]	; (800e6d4 <__sinit+0x68>)
 800e688:	4a13      	ldr	r2, [pc, #76]	; (800e6d8 <__sinit+0x6c>)
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	62a2      	str	r2, [r4, #40]	; 0x28
 800e68e:	42a3      	cmp	r3, r4
 800e690:	bf08      	it	eq
 800e692:	2301      	moveq	r3, #1
 800e694:	4620      	mov	r0, r4
 800e696:	bf08      	it	eq
 800e698:	61a3      	streq	r3, [r4, #24]
 800e69a:	f000 f81f 	bl	800e6dc <__sfp>
 800e69e:	6060      	str	r0, [r4, #4]
 800e6a0:	4620      	mov	r0, r4
 800e6a2:	f000 f81b 	bl	800e6dc <__sfp>
 800e6a6:	60a0      	str	r0, [r4, #8]
 800e6a8:	4620      	mov	r0, r4
 800e6aa:	f000 f817 	bl	800e6dc <__sfp>
 800e6ae:	2200      	movs	r2, #0
 800e6b0:	2104      	movs	r1, #4
 800e6b2:	60e0      	str	r0, [r4, #12]
 800e6b4:	6860      	ldr	r0, [r4, #4]
 800e6b6:	f7ff ff81 	bl	800e5bc <std>
 800e6ba:	2201      	movs	r2, #1
 800e6bc:	2109      	movs	r1, #9
 800e6be:	68a0      	ldr	r0, [r4, #8]
 800e6c0:	f7ff ff7c 	bl	800e5bc <std>
 800e6c4:	2202      	movs	r2, #2
 800e6c6:	2112      	movs	r1, #18
 800e6c8:	68e0      	ldr	r0, [r4, #12]
 800e6ca:	f7ff ff77 	bl	800e5bc <std>
 800e6ce:	2301      	movs	r3, #1
 800e6d0:	61a3      	str	r3, [r4, #24]
 800e6d2:	e7d1      	b.n	800e678 <__sinit+0xc>
 800e6d4:	0800f194 	.word	0x0800f194
 800e6d8:	0800e605 	.word	0x0800e605

0800e6dc <__sfp>:
 800e6dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6de:	4607      	mov	r7, r0
 800e6e0:	f7ff ffac 	bl	800e63c <__sfp_lock_acquire>
 800e6e4:	4b1e      	ldr	r3, [pc, #120]	; (800e760 <__sfp+0x84>)
 800e6e6:	681e      	ldr	r6, [r3, #0]
 800e6e8:	69b3      	ldr	r3, [r6, #24]
 800e6ea:	b913      	cbnz	r3, 800e6f2 <__sfp+0x16>
 800e6ec:	4630      	mov	r0, r6
 800e6ee:	f7ff ffbd 	bl	800e66c <__sinit>
 800e6f2:	3648      	adds	r6, #72	; 0x48
 800e6f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e6f8:	3b01      	subs	r3, #1
 800e6fa:	d503      	bpl.n	800e704 <__sfp+0x28>
 800e6fc:	6833      	ldr	r3, [r6, #0]
 800e6fe:	b30b      	cbz	r3, 800e744 <__sfp+0x68>
 800e700:	6836      	ldr	r6, [r6, #0]
 800e702:	e7f7      	b.n	800e6f4 <__sfp+0x18>
 800e704:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e708:	b9d5      	cbnz	r5, 800e740 <__sfp+0x64>
 800e70a:	4b16      	ldr	r3, [pc, #88]	; (800e764 <__sfp+0x88>)
 800e70c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e710:	60e3      	str	r3, [r4, #12]
 800e712:	6665      	str	r5, [r4, #100]	; 0x64
 800e714:	f000 f847 	bl	800e7a6 <__retarget_lock_init_recursive>
 800e718:	f7ff ff96 	bl	800e648 <__sfp_lock_release>
 800e71c:	2208      	movs	r2, #8
 800e71e:	4629      	mov	r1, r5
 800e720:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e724:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e728:	6025      	str	r5, [r4, #0]
 800e72a:	61a5      	str	r5, [r4, #24]
 800e72c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e730:	f7fd faf8 	bl	800bd24 <memset>
 800e734:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e738:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e73c:	4620      	mov	r0, r4
 800e73e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e740:	3468      	adds	r4, #104	; 0x68
 800e742:	e7d9      	b.n	800e6f8 <__sfp+0x1c>
 800e744:	2104      	movs	r1, #4
 800e746:	4638      	mov	r0, r7
 800e748:	f7ff ff62 	bl	800e610 <__sfmoreglue>
 800e74c:	4604      	mov	r4, r0
 800e74e:	6030      	str	r0, [r6, #0]
 800e750:	2800      	cmp	r0, #0
 800e752:	d1d5      	bne.n	800e700 <__sfp+0x24>
 800e754:	f7ff ff78 	bl	800e648 <__sfp_lock_release>
 800e758:	230c      	movs	r3, #12
 800e75a:	603b      	str	r3, [r7, #0]
 800e75c:	e7ee      	b.n	800e73c <__sfp+0x60>
 800e75e:	bf00      	nop
 800e760:	0800f194 	.word	0x0800f194
 800e764:	ffff0001 	.word	0xffff0001

0800e768 <_fwalk_reent>:
 800e768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e76c:	4606      	mov	r6, r0
 800e76e:	4688      	mov	r8, r1
 800e770:	2700      	movs	r7, #0
 800e772:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e776:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e77a:	f1b9 0901 	subs.w	r9, r9, #1
 800e77e:	d505      	bpl.n	800e78c <_fwalk_reent+0x24>
 800e780:	6824      	ldr	r4, [r4, #0]
 800e782:	2c00      	cmp	r4, #0
 800e784:	d1f7      	bne.n	800e776 <_fwalk_reent+0xe>
 800e786:	4638      	mov	r0, r7
 800e788:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e78c:	89ab      	ldrh	r3, [r5, #12]
 800e78e:	2b01      	cmp	r3, #1
 800e790:	d907      	bls.n	800e7a2 <_fwalk_reent+0x3a>
 800e792:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e796:	3301      	adds	r3, #1
 800e798:	d003      	beq.n	800e7a2 <_fwalk_reent+0x3a>
 800e79a:	4629      	mov	r1, r5
 800e79c:	4630      	mov	r0, r6
 800e79e:	47c0      	blx	r8
 800e7a0:	4307      	orrs	r7, r0
 800e7a2:	3568      	adds	r5, #104	; 0x68
 800e7a4:	e7e9      	b.n	800e77a <_fwalk_reent+0x12>

0800e7a6 <__retarget_lock_init_recursive>:
 800e7a6:	4770      	bx	lr

0800e7a8 <__retarget_lock_acquire_recursive>:
 800e7a8:	4770      	bx	lr

0800e7aa <__retarget_lock_release_recursive>:
 800e7aa:	4770      	bx	lr

0800e7ac <__swhatbuf_r>:
 800e7ac:	b570      	push	{r4, r5, r6, lr}
 800e7ae:	460e      	mov	r6, r1
 800e7b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7b4:	4614      	mov	r4, r2
 800e7b6:	2900      	cmp	r1, #0
 800e7b8:	461d      	mov	r5, r3
 800e7ba:	b096      	sub	sp, #88	; 0x58
 800e7bc:	da07      	bge.n	800e7ce <__swhatbuf_r+0x22>
 800e7be:	2300      	movs	r3, #0
 800e7c0:	602b      	str	r3, [r5, #0]
 800e7c2:	89b3      	ldrh	r3, [r6, #12]
 800e7c4:	061a      	lsls	r2, r3, #24
 800e7c6:	d410      	bmi.n	800e7ea <__swhatbuf_r+0x3e>
 800e7c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e7cc:	e00e      	b.n	800e7ec <__swhatbuf_r+0x40>
 800e7ce:	466a      	mov	r2, sp
 800e7d0:	f000 f902 	bl	800e9d8 <_fstat_r>
 800e7d4:	2800      	cmp	r0, #0
 800e7d6:	dbf2      	blt.n	800e7be <__swhatbuf_r+0x12>
 800e7d8:	9a01      	ldr	r2, [sp, #4]
 800e7da:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e7de:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e7e2:	425a      	negs	r2, r3
 800e7e4:	415a      	adcs	r2, r3
 800e7e6:	602a      	str	r2, [r5, #0]
 800e7e8:	e7ee      	b.n	800e7c8 <__swhatbuf_r+0x1c>
 800e7ea:	2340      	movs	r3, #64	; 0x40
 800e7ec:	2000      	movs	r0, #0
 800e7ee:	6023      	str	r3, [r4, #0]
 800e7f0:	b016      	add	sp, #88	; 0x58
 800e7f2:	bd70      	pop	{r4, r5, r6, pc}

0800e7f4 <__smakebuf_r>:
 800e7f4:	898b      	ldrh	r3, [r1, #12]
 800e7f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e7f8:	079d      	lsls	r5, r3, #30
 800e7fa:	4606      	mov	r6, r0
 800e7fc:	460c      	mov	r4, r1
 800e7fe:	d507      	bpl.n	800e810 <__smakebuf_r+0x1c>
 800e800:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e804:	6023      	str	r3, [r4, #0]
 800e806:	6123      	str	r3, [r4, #16]
 800e808:	2301      	movs	r3, #1
 800e80a:	6163      	str	r3, [r4, #20]
 800e80c:	b002      	add	sp, #8
 800e80e:	bd70      	pop	{r4, r5, r6, pc}
 800e810:	466a      	mov	r2, sp
 800e812:	ab01      	add	r3, sp, #4
 800e814:	f7ff ffca 	bl	800e7ac <__swhatbuf_r>
 800e818:	9900      	ldr	r1, [sp, #0]
 800e81a:	4605      	mov	r5, r0
 800e81c:	4630      	mov	r0, r6
 800e81e:	f7ff f989 	bl	800db34 <_malloc_r>
 800e822:	b948      	cbnz	r0, 800e838 <__smakebuf_r+0x44>
 800e824:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e828:	059a      	lsls	r2, r3, #22
 800e82a:	d4ef      	bmi.n	800e80c <__smakebuf_r+0x18>
 800e82c:	f023 0303 	bic.w	r3, r3, #3
 800e830:	f043 0302 	orr.w	r3, r3, #2
 800e834:	81a3      	strh	r3, [r4, #12]
 800e836:	e7e3      	b.n	800e800 <__smakebuf_r+0xc>
 800e838:	4b0d      	ldr	r3, [pc, #52]	; (800e870 <__smakebuf_r+0x7c>)
 800e83a:	62b3      	str	r3, [r6, #40]	; 0x28
 800e83c:	89a3      	ldrh	r3, [r4, #12]
 800e83e:	6020      	str	r0, [r4, #0]
 800e840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e844:	81a3      	strh	r3, [r4, #12]
 800e846:	9b00      	ldr	r3, [sp, #0]
 800e848:	6120      	str	r0, [r4, #16]
 800e84a:	6163      	str	r3, [r4, #20]
 800e84c:	9b01      	ldr	r3, [sp, #4]
 800e84e:	b15b      	cbz	r3, 800e868 <__smakebuf_r+0x74>
 800e850:	4630      	mov	r0, r6
 800e852:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e856:	f000 f8d1 	bl	800e9fc <_isatty_r>
 800e85a:	b128      	cbz	r0, 800e868 <__smakebuf_r+0x74>
 800e85c:	89a3      	ldrh	r3, [r4, #12]
 800e85e:	f023 0303 	bic.w	r3, r3, #3
 800e862:	f043 0301 	orr.w	r3, r3, #1
 800e866:	81a3      	strh	r3, [r4, #12]
 800e868:	89a0      	ldrh	r0, [r4, #12]
 800e86a:	4305      	orrs	r5, r0
 800e86c:	81a5      	strh	r5, [r4, #12]
 800e86e:	e7cd      	b.n	800e80c <__smakebuf_r+0x18>
 800e870:	0800e605 	.word	0x0800e605

0800e874 <_malloc_usable_size_r>:
 800e874:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e878:	1f18      	subs	r0, r3, #4
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	bfbc      	itt	lt
 800e87e:	580b      	ldrlt	r3, [r1, r0]
 800e880:	18c0      	addlt	r0, r0, r3
 800e882:	4770      	bx	lr

0800e884 <_raise_r>:
 800e884:	291f      	cmp	r1, #31
 800e886:	b538      	push	{r3, r4, r5, lr}
 800e888:	4604      	mov	r4, r0
 800e88a:	460d      	mov	r5, r1
 800e88c:	d904      	bls.n	800e898 <_raise_r+0x14>
 800e88e:	2316      	movs	r3, #22
 800e890:	6003      	str	r3, [r0, #0]
 800e892:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e896:	bd38      	pop	{r3, r4, r5, pc}
 800e898:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e89a:	b112      	cbz	r2, 800e8a2 <_raise_r+0x1e>
 800e89c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e8a0:	b94b      	cbnz	r3, 800e8b6 <_raise_r+0x32>
 800e8a2:	4620      	mov	r0, r4
 800e8a4:	f000 f830 	bl	800e908 <_getpid_r>
 800e8a8:	462a      	mov	r2, r5
 800e8aa:	4601      	mov	r1, r0
 800e8ac:	4620      	mov	r0, r4
 800e8ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e8b2:	f000 b817 	b.w	800e8e4 <_kill_r>
 800e8b6:	2b01      	cmp	r3, #1
 800e8b8:	d00a      	beq.n	800e8d0 <_raise_r+0x4c>
 800e8ba:	1c59      	adds	r1, r3, #1
 800e8bc:	d103      	bne.n	800e8c6 <_raise_r+0x42>
 800e8be:	2316      	movs	r3, #22
 800e8c0:	6003      	str	r3, [r0, #0]
 800e8c2:	2001      	movs	r0, #1
 800e8c4:	e7e7      	b.n	800e896 <_raise_r+0x12>
 800e8c6:	2400      	movs	r4, #0
 800e8c8:	4628      	mov	r0, r5
 800e8ca:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e8ce:	4798      	blx	r3
 800e8d0:	2000      	movs	r0, #0
 800e8d2:	e7e0      	b.n	800e896 <_raise_r+0x12>

0800e8d4 <raise>:
 800e8d4:	4b02      	ldr	r3, [pc, #8]	; (800e8e0 <raise+0xc>)
 800e8d6:	4601      	mov	r1, r0
 800e8d8:	6818      	ldr	r0, [r3, #0]
 800e8da:	f7ff bfd3 	b.w	800e884 <_raise_r>
 800e8de:	bf00      	nop
 800e8e0:	200001f8 	.word	0x200001f8

0800e8e4 <_kill_r>:
 800e8e4:	b538      	push	{r3, r4, r5, lr}
 800e8e6:	2300      	movs	r3, #0
 800e8e8:	4d06      	ldr	r5, [pc, #24]	; (800e904 <_kill_r+0x20>)
 800e8ea:	4604      	mov	r4, r0
 800e8ec:	4608      	mov	r0, r1
 800e8ee:	4611      	mov	r1, r2
 800e8f0:	602b      	str	r3, [r5, #0]
 800e8f2:	f7f3 fbea 	bl	80020ca <_kill>
 800e8f6:	1c43      	adds	r3, r0, #1
 800e8f8:	d102      	bne.n	800e900 <_kill_r+0x1c>
 800e8fa:	682b      	ldr	r3, [r5, #0]
 800e8fc:	b103      	cbz	r3, 800e900 <_kill_r+0x1c>
 800e8fe:	6023      	str	r3, [r4, #0]
 800e900:	bd38      	pop	{r3, r4, r5, pc}
 800e902:	bf00      	nop
 800e904:	20000f98 	.word	0x20000f98

0800e908 <_getpid_r>:
 800e908:	f7f3 bbd8 	b.w	80020bc <_getpid>

0800e90c <__sread>:
 800e90c:	b510      	push	{r4, lr}
 800e90e:	460c      	mov	r4, r1
 800e910:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e914:	f000 f894 	bl	800ea40 <_read_r>
 800e918:	2800      	cmp	r0, #0
 800e91a:	bfab      	itete	ge
 800e91c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e91e:	89a3      	ldrhlt	r3, [r4, #12]
 800e920:	181b      	addge	r3, r3, r0
 800e922:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e926:	bfac      	ite	ge
 800e928:	6563      	strge	r3, [r4, #84]	; 0x54
 800e92a:	81a3      	strhlt	r3, [r4, #12]
 800e92c:	bd10      	pop	{r4, pc}

0800e92e <__swrite>:
 800e92e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e932:	461f      	mov	r7, r3
 800e934:	898b      	ldrh	r3, [r1, #12]
 800e936:	4605      	mov	r5, r0
 800e938:	05db      	lsls	r3, r3, #23
 800e93a:	460c      	mov	r4, r1
 800e93c:	4616      	mov	r6, r2
 800e93e:	d505      	bpl.n	800e94c <__swrite+0x1e>
 800e940:	2302      	movs	r3, #2
 800e942:	2200      	movs	r2, #0
 800e944:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e948:	f000 f868 	bl	800ea1c <_lseek_r>
 800e94c:	89a3      	ldrh	r3, [r4, #12]
 800e94e:	4632      	mov	r2, r6
 800e950:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e954:	81a3      	strh	r3, [r4, #12]
 800e956:	4628      	mov	r0, r5
 800e958:	463b      	mov	r3, r7
 800e95a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e95e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e962:	f000 b817 	b.w	800e994 <_write_r>

0800e966 <__sseek>:
 800e966:	b510      	push	{r4, lr}
 800e968:	460c      	mov	r4, r1
 800e96a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e96e:	f000 f855 	bl	800ea1c <_lseek_r>
 800e972:	1c43      	adds	r3, r0, #1
 800e974:	89a3      	ldrh	r3, [r4, #12]
 800e976:	bf15      	itete	ne
 800e978:	6560      	strne	r0, [r4, #84]	; 0x54
 800e97a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e97e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e982:	81a3      	strheq	r3, [r4, #12]
 800e984:	bf18      	it	ne
 800e986:	81a3      	strhne	r3, [r4, #12]
 800e988:	bd10      	pop	{r4, pc}

0800e98a <__sclose>:
 800e98a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e98e:	f000 b813 	b.w	800e9b8 <_close_r>
	...

0800e994 <_write_r>:
 800e994:	b538      	push	{r3, r4, r5, lr}
 800e996:	4604      	mov	r4, r0
 800e998:	4608      	mov	r0, r1
 800e99a:	4611      	mov	r1, r2
 800e99c:	2200      	movs	r2, #0
 800e99e:	4d05      	ldr	r5, [pc, #20]	; (800e9b4 <_write_r+0x20>)
 800e9a0:	602a      	str	r2, [r5, #0]
 800e9a2:	461a      	mov	r2, r3
 800e9a4:	f7f3 fbc8 	bl	8002138 <_write>
 800e9a8:	1c43      	adds	r3, r0, #1
 800e9aa:	d102      	bne.n	800e9b2 <_write_r+0x1e>
 800e9ac:	682b      	ldr	r3, [r5, #0]
 800e9ae:	b103      	cbz	r3, 800e9b2 <_write_r+0x1e>
 800e9b0:	6023      	str	r3, [r4, #0]
 800e9b2:	bd38      	pop	{r3, r4, r5, pc}
 800e9b4:	20000f98 	.word	0x20000f98

0800e9b8 <_close_r>:
 800e9b8:	b538      	push	{r3, r4, r5, lr}
 800e9ba:	2300      	movs	r3, #0
 800e9bc:	4d05      	ldr	r5, [pc, #20]	; (800e9d4 <_close_r+0x1c>)
 800e9be:	4604      	mov	r4, r0
 800e9c0:	4608      	mov	r0, r1
 800e9c2:	602b      	str	r3, [r5, #0]
 800e9c4:	f7f3 fbd4 	bl	8002170 <_close>
 800e9c8:	1c43      	adds	r3, r0, #1
 800e9ca:	d102      	bne.n	800e9d2 <_close_r+0x1a>
 800e9cc:	682b      	ldr	r3, [r5, #0]
 800e9ce:	b103      	cbz	r3, 800e9d2 <_close_r+0x1a>
 800e9d0:	6023      	str	r3, [r4, #0]
 800e9d2:	bd38      	pop	{r3, r4, r5, pc}
 800e9d4:	20000f98 	.word	0x20000f98

0800e9d8 <_fstat_r>:
 800e9d8:	b538      	push	{r3, r4, r5, lr}
 800e9da:	2300      	movs	r3, #0
 800e9dc:	4d06      	ldr	r5, [pc, #24]	; (800e9f8 <_fstat_r+0x20>)
 800e9de:	4604      	mov	r4, r0
 800e9e0:	4608      	mov	r0, r1
 800e9e2:	4611      	mov	r1, r2
 800e9e4:	602b      	str	r3, [r5, #0]
 800e9e6:	f7f3 fbce 	bl	8002186 <_fstat>
 800e9ea:	1c43      	adds	r3, r0, #1
 800e9ec:	d102      	bne.n	800e9f4 <_fstat_r+0x1c>
 800e9ee:	682b      	ldr	r3, [r5, #0]
 800e9f0:	b103      	cbz	r3, 800e9f4 <_fstat_r+0x1c>
 800e9f2:	6023      	str	r3, [r4, #0]
 800e9f4:	bd38      	pop	{r3, r4, r5, pc}
 800e9f6:	bf00      	nop
 800e9f8:	20000f98 	.word	0x20000f98

0800e9fc <_isatty_r>:
 800e9fc:	b538      	push	{r3, r4, r5, lr}
 800e9fe:	2300      	movs	r3, #0
 800ea00:	4d05      	ldr	r5, [pc, #20]	; (800ea18 <_isatty_r+0x1c>)
 800ea02:	4604      	mov	r4, r0
 800ea04:	4608      	mov	r0, r1
 800ea06:	602b      	str	r3, [r5, #0]
 800ea08:	f7f3 fbcc 	bl	80021a4 <_isatty>
 800ea0c:	1c43      	adds	r3, r0, #1
 800ea0e:	d102      	bne.n	800ea16 <_isatty_r+0x1a>
 800ea10:	682b      	ldr	r3, [r5, #0]
 800ea12:	b103      	cbz	r3, 800ea16 <_isatty_r+0x1a>
 800ea14:	6023      	str	r3, [r4, #0]
 800ea16:	bd38      	pop	{r3, r4, r5, pc}
 800ea18:	20000f98 	.word	0x20000f98

0800ea1c <_lseek_r>:
 800ea1c:	b538      	push	{r3, r4, r5, lr}
 800ea1e:	4604      	mov	r4, r0
 800ea20:	4608      	mov	r0, r1
 800ea22:	4611      	mov	r1, r2
 800ea24:	2200      	movs	r2, #0
 800ea26:	4d05      	ldr	r5, [pc, #20]	; (800ea3c <_lseek_r+0x20>)
 800ea28:	602a      	str	r2, [r5, #0]
 800ea2a:	461a      	mov	r2, r3
 800ea2c:	f7f3 fbc4 	bl	80021b8 <_lseek>
 800ea30:	1c43      	adds	r3, r0, #1
 800ea32:	d102      	bne.n	800ea3a <_lseek_r+0x1e>
 800ea34:	682b      	ldr	r3, [r5, #0]
 800ea36:	b103      	cbz	r3, 800ea3a <_lseek_r+0x1e>
 800ea38:	6023      	str	r3, [r4, #0]
 800ea3a:	bd38      	pop	{r3, r4, r5, pc}
 800ea3c:	20000f98 	.word	0x20000f98

0800ea40 <_read_r>:
 800ea40:	b538      	push	{r3, r4, r5, lr}
 800ea42:	4604      	mov	r4, r0
 800ea44:	4608      	mov	r0, r1
 800ea46:	4611      	mov	r1, r2
 800ea48:	2200      	movs	r2, #0
 800ea4a:	4d05      	ldr	r5, [pc, #20]	; (800ea60 <_read_r+0x20>)
 800ea4c:	602a      	str	r2, [r5, #0]
 800ea4e:	461a      	mov	r2, r3
 800ea50:	f7f3 fb55 	bl	80020fe <_read>
 800ea54:	1c43      	adds	r3, r0, #1
 800ea56:	d102      	bne.n	800ea5e <_read_r+0x1e>
 800ea58:	682b      	ldr	r3, [r5, #0]
 800ea5a:	b103      	cbz	r3, 800ea5e <_read_r+0x1e>
 800ea5c:	6023      	str	r3, [r4, #0]
 800ea5e:	bd38      	pop	{r3, r4, r5, pc}
 800ea60:	20000f98 	.word	0x20000f98
 800ea64:	00000000 	.word	0x00000000

0800ea68 <atan>:
 800ea68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea6c:	4bb6      	ldr	r3, [pc, #728]	; (800ed48 <atan+0x2e0>)
 800ea6e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800ea72:	429e      	cmp	r6, r3
 800ea74:	4604      	mov	r4, r0
 800ea76:	460d      	mov	r5, r1
 800ea78:	468b      	mov	fp, r1
 800ea7a:	dd17      	ble.n	800eaac <atan+0x44>
 800ea7c:	4bb3      	ldr	r3, [pc, #716]	; (800ed4c <atan+0x2e4>)
 800ea7e:	429e      	cmp	r6, r3
 800ea80:	dc01      	bgt.n	800ea86 <atan+0x1e>
 800ea82:	d109      	bne.n	800ea98 <atan+0x30>
 800ea84:	b140      	cbz	r0, 800ea98 <atan+0x30>
 800ea86:	4622      	mov	r2, r4
 800ea88:	462b      	mov	r3, r5
 800ea8a:	4620      	mov	r0, r4
 800ea8c:	4629      	mov	r1, r5
 800ea8e:	f7f1 fb6d 	bl	800016c <__adddf3>
 800ea92:	4604      	mov	r4, r0
 800ea94:	460d      	mov	r5, r1
 800ea96:	e005      	b.n	800eaa4 <atan+0x3c>
 800ea98:	f1bb 0f00 	cmp.w	fp, #0
 800ea9c:	4cac      	ldr	r4, [pc, #688]	; (800ed50 <atan+0x2e8>)
 800ea9e:	f300 8121 	bgt.w	800ece4 <atan+0x27c>
 800eaa2:	4dac      	ldr	r5, [pc, #688]	; (800ed54 <atan+0x2ec>)
 800eaa4:	4620      	mov	r0, r4
 800eaa6:	4629      	mov	r1, r5
 800eaa8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eaac:	4baa      	ldr	r3, [pc, #680]	; (800ed58 <atan+0x2f0>)
 800eaae:	429e      	cmp	r6, r3
 800eab0:	dc11      	bgt.n	800ead6 <atan+0x6e>
 800eab2:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800eab6:	429e      	cmp	r6, r3
 800eab8:	dc0a      	bgt.n	800ead0 <atan+0x68>
 800eaba:	a38b      	add	r3, pc, #556	; (adr r3, 800ece8 <atan+0x280>)
 800eabc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eac0:	f7f1 fb54 	bl	800016c <__adddf3>
 800eac4:	2200      	movs	r2, #0
 800eac6:	4ba5      	ldr	r3, [pc, #660]	; (800ed5c <atan+0x2f4>)
 800eac8:	f7f1 ff96 	bl	80009f8 <__aeabi_dcmpgt>
 800eacc:	2800      	cmp	r0, #0
 800eace:	d1e9      	bne.n	800eaa4 <atan+0x3c>
 800ead0:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800ead4:	e027      	b.n	800eb26 <atan+0xbe>
 800ead6:	f000 f951 	bl	800ed7c <fabs>
 800eada:	4ba1      	ldr	r3, [pc, #644]	; (800ed60 <atan+0x2f8>)
 800eadc:	4604      	mov	r4, r0
 800eade:	429e      	cmp	r6, r3
 800eae0:	460d      	mov	r5, r1
 800eae2:	f300 80b8 	bgt.w	800ec56 <atan+0x1ee>
 800eae6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800eaea:	429e      	cmp	r6, r3
 800eaec:	f300 809c 	bgt.w	800ec28 <atan+0x1c0>
 800eaf0:	4602      	mov	r2, r0
 800eaf2:	460b      	mov	r3, r1
 800eaf4:	f7f1 fb3a 	bl	800016c <__adddf3>
 800eaf8:	2200      	movs	r2, #0
 800eafa:	4b98      	ldr	r3, [pc, #608]	; (800ed5c <atan+0x2f4>)
 800eafc:	f7f1 fb34 	bl	8000168 <__aeabi_dsub>
 800eb00:	2200      	movs	r2, #0
 800eb02:	4606      	mov	r6, r0
 800eb04:	460f      	mov	r7, r1
 800eb06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800eb0a:	4620      	mov	r0, r4
 800eb0c:	4629      	mov	r1, r5
 800eb0e:	f7f1 fb2d 	bl	800016c <__adddf3>
 800eb12:	4602      	mov	r2, r0
 800eb14:	460b      	mov	r3, r1
 800eb16:	4630      	mov	r0, r6
 800eb18:	4639      	mov	r1, r7
 800eb1a:	f7f1 fe07 	bl	800072c <__aeabi_ddiv>
 800eb1e:	f04f 0a00 	mov.w	sl, #0
 800eb22:	4604      	mov	r4, r0
 800eb24:	460d      	mov	r5, r1
 800eb26:	4622      	mov	r2, r4
 800eb28:	462b      	mov	r3, r5
 800eb2a:	4620      	mov	r0, r4
 800eb2c:	4629      	mov	r1, r5
 800eb2e:	f7f1 fcd3 	bl	80004d8 <__aeabi_dmul>
 800eb32:	4602      	mov	r2, r0
 800eb34:	460b      	mov	r3, r1
 800eb36:	4680      	mov	r8, r0
 800eb38:	4689      	mov	r9, r1
 800eb3a:	f7f1 fccd 	bl	80004d8 <__aeabi_dmul>
 800eb3e:	a36c      	add	r3, pc, #432	; (adr r3, 800ecf0 <atan+0x288>)
 800eb40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb44:	4606      	mov	r6, r0
 800eb46:	460f      	mov	r7, r1
 800eb48:	f7f1 fcc6 	bl	80004d8 <__aeabi_dmul>
 800eb4c:	a36a      	add	r3, pc, #424	; (adr r3, 800ecf8 <atan+0x290>)
 800eb4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb52:	f7f1 fb0b 	bl	800016c <__adddf3>
 800eb56:	4632      	mov	r2, r6
 800eb58:	463b      	mov	r3, r7
 800eb5a:	f7f1 fcbd 	bl	80004d8 <__aeabi_dmul>
 800eb5e:	a368      	add	r3, pc, #416	; (adr r3, 800ed00 <atan+0x298>)
 800eb60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb64:	f7f1 fb02 	bl	800016c <__adddf3>
 800eb68:	4632      	mov	r2, r6
 800eb6a:	463b      	mov	r3, r7
 800eb6c:	f7f1 fcb4 	bl	80004d8 <__aeabi_dmul>
 800eb70:	a365      	add	r3, pc, #404	; (adr r3, 800ed08 <atan+0x2a0>)
 800eb72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb76:	f7f1 faf9 	bl	800016c <__adddf3>
 800eb7a:	4632      	mov	r2, r6
 800eb7c:	463b      	mov	r3, r7
 800eb7e:	f7f1 fcab 	bl	80004d8 <__aeabi_dmul>
 800eb82:	a363      	add	r3, pc, #396	; (adr r3, 800ed10 <atan+0x2a8>)
 800eb84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb88:	f7f1 faf0 	bl	800016c <__adddf3>
 800eb8c:	4632      	mov	r2, r6
 800eb8e:	463b      	mov	r3, r7
 800eb90:	f7f1 fca2 	bl	80004d8 <__aeabi_dmul>
 800eb94:	a360      	add	r3, pc, #384	; (adr r3, 800ed18 <atan+0x2b0>)
 800eb96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb9a:	f7f1 fae7 	bl	800016c <__adddf3>
 800eb9e:	4642      	mov	r2, r8
 800eba0:	464b      	mov	r3, r9
 800eba2:	f7f1 fc99 	bl	80004d8 <__aeabi_dmul>
 800eba6:	a35e      	add	r3, pc, #376	; (adr r3, 800ed20 <atan+0x2b8>)
 800eba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebac:	4680      	mov	r8, r0
 800ebae:	4689      	mov	r9, r1
 800ebb0:	4630      	mov	r0, r6
 800ebb2:	4639      	mov	r1, r7
 800ebb4:	f7f1 fc90 	bl	80004d8 <__aeabi_dmul>
 800ebb8:	a35b      	add	r3, pc, #364	; (adr r3, 800ed28 <atan+0x2c0>)
 800ebba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebbe:	f7f1 fad3 	bl	8000168 <__aeabi_dsub>
 800ebc2:	4632      	mov	r2, r6
 800ebc4:	463b      	mov	r3, r7
 800ebc6:	f7f1 fc87 	bl	80004d8 <__aeabi_dmul>
 800ebca:	a359      	add	r3, pc, #356	; (adr r3, 800ed30 <atan+0x2c8>)
 800ebcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebd0:	f7f1 faca 	bl	8000168 <__aeabi_dsub>
 800ebd4:	4632      	mov	r2, r6
 800ebd6:	463b      	mov	r3, r7
 800ebd8:	f7f1 fc7e 	bl	80004d8 <__aeabi_dmul>
 800ebdc:	a356      	add	r3, pc, #344	; (adr r3, 800ed38 <atan+0x2d0>)
 800ebde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebe2:	f7f1 fac1 	bl	8000168 <__aeabi_dsub>
 800ebe6:	4632      	mov	r2, r6
 800ebe8:	463b      	mov	r3, r7
 800ebea:	f7f1 fc75 	bl	80004d8 <__aeabi_dmul>
 800ebee:	a354      	add	r3, pc, #336	; (adr r3, 800ed40 <atan+0x2d8>)
 800ebf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebf4:	f7f1 fab8 	bl	8000168 <__aeabi_dsub>
 800ebf8:	4632      	mov	r2, r6
 800ebfa:	463b      	mov	r3, r7
 800ebfc:	f7f1 fc6c 	bl	80004d8 <__aeabi_dmul>
 800ec00:	4602      	mov	r2, r0
 800ec02:	460b      	mov	r3, r1
 800ec04:	4640      	mov	r0, r8
 800ec06:	4649      	mov	r1, r9
 800ec08:	f7f1 fab0 	bl	800016c <__adddf3>
 800ec0c:	4622      	mov	r2, r4
 800ec0e:	462b      	mov	r3, r5
 800ec10:	f7f1 fc62 	bl	80004d8 <__aeabi_dmul>
 800ec14:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800ec18:	4602      	mov	r2, r0
 800ec1a:	460b      	mov	r3, r1
 800ec1c:	d144      	bne.n	800eca8 <atan+0x240>
 800ec1e:	4620      	mov	r0, r4
 800ec20:	4629      	mov	r1, r5
 800ec22:	f7f1 faa1 	bl	8000168 <__aeabi_dsub>
 800ec26:	e734      	b.n	800ea92 <atan+0x2a>
 800ec28:	2200      	movs	r2, #0
 800ec2a:	4b4c      	ldr	r3, [pc, #304]	; (800ed5c <atan+0x2f4>)
 800ec2c:	f7f1 fa9c 	bl	8000168 <__aeabi_dsub>
 800ec30:	2200      	movs	r2, #0
 800ec32:	4606      	mov	r6, r0
 800ec34:	460f      	mov	r7, r1
 800ec36:	4620      	mov	r0, r4
 800ec38:	4629      	mov	r1, r5
 800ec3a:	4b48      	ldr	r3, [pc, #288]	; (800ed5c <atan+0x2f4>)
 800ec3c:	f7f1 fa96 	bl	800016c <__adddf3>
 800ec40:	4602      	mov	r2, r0
 800ec42:	460b      	mov	r3, r1
 800ec44:	4630      	mov	r0, r6
 800ec46:	4639      	mov	r1, r7
 800ec48:	f7f1 fd70 	bl	800072c <__aeabi_ddiv>
 800ec4c:	f04f 0a01 	mov.w	sl, #1
 800ec50:	4604      	mov	r4, r0
 800ec52:	460d      	mov	r5, r1
 800ec54:	e767      	b.n	800eb26 <atan+0xbe>
 800ec56:	4b43      	ldr	r3, [pc, #268]	; (800ed64 <atan+0x2fc>)
 800ec58:	429e      	cmp	r6, r3
 800ec5a:	da1a      	bge.n	800ec92 <atan+0x22a>
 800ec5c:	2200      	movs	r2, #0
 800ec5e:	4b42      	ldr	r3, [pc, #264]	; (800ed68 <atan+0x300>)
 800ec60:	f7f1 fa82 	bl	8000168 <__aeabi_dsub>
 800ec64:	2200      	movs	r2, #0
 800ec66:	4606      	mov	r6, r0
 800ec68:	460f      	mov	r7, r1
 800ec6a:	4620      	mov	r0, r4
 800ec6c:	4629      	mov	r1, r5
 800ec6e:	4b3e      	ldr	r3, [pc, #248]	; (800ed68 <atan+0x300>)
 800ec70:	f7f1 fc32 	bl	80004d8 <__aeabi_dmul>
 800ec74:	2200      	movs	r2, #0
 800ec76:	4b39      	ldr	r3, [pc, #228]	; (800ed5c <atan+0x2f4>)
 800ec78:	f7f1 fa78 	bl	800016c <__adddf3>
 800ec7c:	4602      	mov	r2, r0
 800ec7e:	460b      	mov	r3, r1
 800ec80:	4630      	mov	r0, r6
 800ec82:	4639      	mov	r1, r7
 800ec84:	f7f1 fd52 	bl	800072c <__aeabi_ddiv>
 800ec88:	f04f 0a02 	mov.w	sl, #2
 800ec8c:	4604      	mov	r4, r0
 800ec8e:	460d      	mov	r5, r1
 800ec90:	e749      	b.n	800eb26 <atan+0xbe>
 800ec92:	4602      	mov	r2, r0
 800ec94:	460b      	mov	r3, r1
 800ec96:	2000      	movs	r0, #0
 800ec98:	4934      	ldr	r1, [pc, #208]	; (800ed6c <atan+0x304>)
 800ec9a:	f7f1 fd47 	bl	800072c <__aeabi_ddiv>
 800ec9e:	f04f 0a03 	mov.w	sl, #3
 800eca2:	4604      	mov	r4, r0
 800eca4:	460d      	mov	r5, r1
 800eca6:	e73e      	b.n	800eb26 <atan+0xbe>
 800eca8:	4b31      	ldr	r3, [pc, #196]	; (800ed70 <atan+0x308>)
 800ecaa:	4e32      	ldr	r6, [pc, #200]	; (800ed74 <atan+0x30c>)
 800ecac:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800ecb0:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800ecb4:	e9da 2300 	ldrd	r2, r3, [sl]
 800ecb8:	f7f1 fa56 	bl	8000168 <__aeabi_dsub>
 800ecbc:	4622      	mov	r2, r4
 800ecbe:	462b      	mov	r3, r5
 800ecc0:	f7f1 fa52 	bl	8000168 <__aeabi_dsub>
 800ecc4:	4602      	mov	r2, r0
 800ecc6:	460b      	mov	r3, r1
 800ecc8:	e9d6 0100 	ldrd	r0, r1, [r6]
 800eccc:	f7f1 fa4c 	bl	8000168 <__aeabi_dsub>
 800ecd0:	f1bb 0f00 	cmp.w	fp, #0
 800ecd4:	4604      	mov	r4, r0
 800ecd6:	460d      	mov	r5, r1
 800ecd8:	f6bf aee4 	bge.w	800eaa4 <atan+0x3c>
 800ecdc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ece0:	461d      	mov	r5, r3
 800ece2:	e6df      	b.n	800eaa4 <atan+0x3c>
 800ece4:	4d24      	ldr	r5, [pc, #144]	; (800ed78 <atan+0x310>)
 800ece6:	e6dd      	b.n	800eaa4 <atan+0x3c>
 800ece8:	8800759c 	.word	0x8800759c
 800ecec:	7e37e43c 	.word	0x7e37e43c
 800ecf0:	e322da11 	.word	0xe322da11
 800ecf4:	3f90ad3a 	.word	0x3f90ad3a
 800ecf8:	24760deb 	.word	0x24760deb
 800ecfc:	3fa97b4b 	.word	0x3fa97b4b
 800ed00:	a0d03d51 	.word	0xa0d03d51
 800ed04:	3fb10d66 	.word	0x3fb10d66
 800ed08:	c54c206e 	.word	0xc54c206e
 800ed0c:	3fb745cd 	.word	0x3fb745cd
 800ed10:	920083ff 	.word	0x920083ff
 800ed14:	3fc24924 	.word	0x3fc24924
 800ed18:	5555550d 	.word	0x5555550d
 800ed1c:	3fd55555 	.word	0x3fd55555
 800ed20:	2c6a6c2f 	.word	0x2c6a6c2f
 800ed24:	bfa2b444 	.word	0xbfa2b444
 800ed28:	52defd9a 	.word	0x52defd9a
 800ed2c:	3fadde2d 	.word	0x3fadde2d
 800ed30:	af749a6d 	.word	0xaf749a6d
 800ed34:	3fb3b0f2 	.word	0x3fb3b0f2
 800ed38:	fe231671 	.word	0xfe231671
 800ed3c:	3fbc71c6 	.word	0x3fbc71c6
 800ed40:	9998ebc4 	.word	0x9998ebc4
 800ed44:	3fc99999 	.word	0x3fc99999
 800ed48:	440fffff 	.word	0x440fffff
 800ed4c:	7ff00000 	.word	0x7ff00000
 800ed50:	54442d18 	.word	0x54442d18
 800ed54:	bff921fb 	.word	0xbff921fb
 800ed58:	3fdbffff 	.word	0x3fdbffff
 800ed5c:	3ff00000 	.word	0x3ff00000
 800ed60:	3ff2ffff 	.word	0x3ff2ffff
 800ed64:	40038000 	.word	0x40038000
 800ed68:	3ff80000 	.word	0x3ff80000
 800ed6c:	bff00000 	.word	0xbff00000
 800ed70:	0800f598 	.word	0x0800f598
 800ed74:	0800f578 	.word	0x0800f578
 800ed78:	3ff921fb 	.word	0x3ff921fb

0800ed7c <fabs>:
 800ed7c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800ed80:	4770      	bx	lr

0800ed82 <atan2>:
 800ed82:	f000 b82d 	b.w	800ede0 <__ieee754_atan2>
	...

0800ed88 <sqrt>:
 800ed88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed8a:	4606      	mov	r6, r0
 800ed8c:	460f      	mov	r7, r1
 800ed8e:	f000 f8f9 	bl	800ef84 <__ieee754_sqrt>
 800ed92:	4b12      	ldr	r3, [pc, #72]	; (800eddc <sqrt+0x54>)
 800ed94:	4604      	mov	r4, r0
 800ed96:	f993 3000 	ldrsb.w	r3, [r3]
 800ed9a:	460d      	mov	r5, r1
 800ed9c:	3301      	adds	r3, #1
 800ed9e:	d019      	beq.n	800edd4 <sqrt+0x4c>
 800eda0:	4632      	mov	r2, r6
 800eda2:	463b      	mov	r3, r7
 800eda4:	4630      	mov	r0, r6
 800eda6:	4639      	mov	r1, r7
 800eda8:	f7f1 fe30 	bl	8000a0c <__aeabi_dcmpun>
 800edac:	b990      	cbnz	r0, 800edd4 <sqrt+0x4c>
 800edae:	2200      	movs	r2, #0
 800edb0:	2300      	movs	r3, #0
 800edb2:	4630      	mov	r0, r6
 800edb4:	4639      	mov	r1, r7
 800edb6:	f7f1 fe01 	bl	80009bc <__aeabi_dcmplt>
 800edba:	b158      	cbz	r0, 800edd4 <sqrt+0x4c>
 800edbc:	f7fc ff88 	bl	800bcd0 <__errno>
 800edc0:	2321      	movs	r3, #33	; 0x21
 800edc2:	2200      	movs	r2, #0
 800edc4:	6003      	str	r3, [r0, #0]
 800edc6:	2300      	movs	r3, #0
 800edc8:	4610      	mov	r0, r2
 800edca:	4619      	mov	r1, r3
 800edcc:	f7f1 fcae 	bl	800072c <__aeabi_ddiv>
 800edd0:	4604      	mov	r4, r0
 800edd2:	460d      	mov	r5, r1
 800edd4:	4620      	mov	r0, r4
 800edd6:	4629      	mov	r1, r5
 800edd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800edda:	bf00      	nop
 800eddc:	200003c8 	.word	0x200003c8

0800ede0 <__ieee754_atan2>:
 800ede0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ede4:	4692      	mov	sl, r2
 800ede6:	4699      	mov	r9, r3
 800ede8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800edec:	461f      	mov	r7, r3
 800edee:	f1ca 0300 	rsb	r3, sl, #0
 800edf2:	f8df e18c 	ldr.w	lr, [pc, #396]	; 800ef80 <__ieee754_atan2+0x1a0>
 800edf6:	ea43 030a 	orr.w	r3, r3, sl
 800edfa:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800edfe:	4573      	cmp	r3, lr
 800ee00:	4604      	mov	r4, r0
 800ee02:	460d      	mov	r5, r1
 800ee04:	d808      	bhi.n	800ee18 <__ieee754_atan2+0x38>
 800ee06:	4246      	negs	r6, r0
 800ee08:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ee0c:	4306      	orrs	r6, r0
 800ee0e:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 800ee12:	4576      	cmp	r6, lr
 800ee14:	468c      	mov	ip, r1
 800ee16:	d908      	bls.n	800ee2a <__ieee754_atan2+0x4a>
 800ee18:	4652      	mov	r2, sl
 800ee1a:	464b      	mov	r3, r9
 800ee1c:	4620      	mov	r0, r4
 800ee1e:	4629      	mov	r1, r5
 800ee20:	f7f1 f9a4 	bl	800016c <__adddf3>
 800ee24:	4604      	mov	r4, r0
 800ee26:	460d      	mov	r5, r1
 800ee28:	e019      	b.n	800ee5e <__ieee754_atan2+0x7e>
 800ee2a:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 800ee2e:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 800ee32:	ea56 060a 	orrs.w	r6, r6, sl
 800ee36:	d103      	bne.n	800ee40 <__ieee754_atan2+0x60>
 800ee38:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee3c:	f7ff be14 	b.w	800ea68 <atan>
 800ee40:	17be      	asrs	r6, r7, #30
 800ee42:	f006 0602 	and.w	r6, r6, #2
 800ee46:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800ee4a:	ea53 0100 	orrs.w	r1, r3, r0
 800ee4e:	d10a      	bne.n	800ee66 <__ieee754_atan2+0x86>
 800ee50:	2e02      	cmp	r6, #2
 800ee52:	d067      	beq.n	800ef24 <__ieee754_atan2+0x144>
 800ee54:	2e03      	cmp	r6, #3
 800ee56:	d102      	bne.n	800ee5e <__ieee754_atan2+0x7e>
 800ee58:	a53b      	add	r5, pc, #236	; (adr r5, 800ef48 <__ieee754_atan2+0x168>)
 800ee5a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ee5e:	4620      	mov	r0, r4
 800ee60:	4629      	mov	r1, r5
 800ee62:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee66:	ea52 010a 	orrs.w	r1, r2, sl
 800ee6a:	d106      	bne.n	800ee7a <__ieee754_atan2+0x9a>
 800ee6c:	f1bc 0f00 	cmp.w	ip, #0
 800ee70:	da63      	bge.n	800ef3a <__ieee754_atan2+0x15a>
 800ee72:	a537      	add	r5, pc, #220	; (adr r5, 800ef50 <__ieee754_atan2+0x170>)
 800ee74:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ee78:	e7f1      	b.n	800ee5e <__ieee754_atan2+0x7e>
 800ee7a:	4572      	cmp	r2, lr
 800ee7c:	d10f      	bne.n	800ee9e <__ieee754_atan2+0xbe>
 800ee7e:	4293      	cmp	r3, r2
 800ee80:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 800ee84:	d107      	bne.n	800ee96 <__ieee754_atan2+0xb6>
 800ee86:	2e02      	cmp	r6, #2
 800ee88:	d850      	bhi.n	800ef2c <__ieee754_atan2+0x14c>
 800ee8a:	4b3b      	ldr	r3, [pc, #236]	; (800ef78 <__ieee754_atan2+0x198>)
 800ee8c:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800ee90:	e9d6 4500 	ldrd	r4, r5, [r6]
 800ee94:	e7e3      	b.n	800ee5e <__ieee754_atan2+0x7e>
 800ee96:	2e02      	cmp	r6, #2
 800ee98:	d84c      	bhi.n	800ef34 <__ieee754_atan2+0x154>
 800ee9a:	4b38      	ldr	r3, [pc, #224]	; (800ef7c <__ieee754_atan2+0x19c>)
 800ee9c:	e7f6      	b.n	800ee8c <__ieee754_atan2+0xac>
 800ee9e:	4573      	cmp	r3, lr
 800eea0:	d0e4      	beq.n	800ee6c <__ieee754_atan2+0x8c>
 800eea2:	1a9b      	subs	r3, r3, r2
 800eea4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800eea8:	ea4f 5223 	mov.w	r2, r3, asr #20
 800eeac:	da20      	bge.n	800eef0 <__ieee754_atan2+0x110>
 800eeae:	2f00      	cmp	r7, #0
 800eeb0:	da01      	bge.n	800eeb6 <__ieee754_atan2+0xd6>
 800eeb2:	323c      	adds	r2, #60	; 0x3c
 800eeb4:	db20      	blt.n	800eef8 <__ieee754_atan2+0x118>
 800eeb6:	4652      	mov	r2, sl
 800eeb8:	464b      	mov	r3, r9
 800eeba:	4620      	mov	r0, r4
 800eebc:	4629      	mov	r1, r5
 800eebe:	f7f1 fc35 	bl	800072c <__aeabi_ddiv>
 800eec2:	f7ff ff5b 	bl	800ed7c <fabs>
 800eec6:	f7ff fdcf 	bl	800ea68 <atan>
 800eeca:	4604      	mov	r4, r0
 800eecc:	460d      	mov	r5, r1
 800eece:	2e01      	cmp	r6, #1
 800eed0:	d015      	beq.n	800eefe <__ieee754_atan2+0x11e>
 800eed2:	2e02      	cmp	r6, #2
 800eed4:	d017      	beq.n	800ef06 <__ieee754_atan2+0x126>
 800eed6:	2e00      	cmp	r6, #0
 800eed8:	d0c1      	beq.n	800ee5e <__ieee754_atan2+0x7e>
 800eeda:	a31f      	add	r3, pc, #124	; (adr r3, 800ef58 <__ieee754_atan2+0x178>)
 800eedc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eee0:	4620      	mov	r0, r4
 800eee2:	4629      	mov	r1, r5
 800eee4:	f7f1 f940 	bl	8000168 <__aeabi_dsub>
 800eee8:	a31d      	add	r3, pc, #116	; (adr r3, 800ef60 <__ieee754_atan2+0x180>)
 800eeea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eeee:	e016      	b.n	800ef1e <__ieee754_atan2+0x13e>
 800eef0:	a51d      	add	r5, pc, #116	; (adr r5, 800ef68 <__ieee754_atan2+0x188>)
 800eef2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800eef6:	e7ea      	b.n	800eece <__ieee754_atan2+0xee>
 800eef8:	2400      	movs	r4, #0
 800eefa:	2500      	movs	r5, #0
 800eefc:	e7e7      	b.n	800eece <__ieee754_atan2+0xee>
 800eefe:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800ef02:	461d      	mov	r5, r3
 800ef04:	e7ab      	b.n	800ee5e <__ieee754_atan2+0x7e>
 800ef06:	a314      	add	r3, pc, #80	; (adr r3, 800ef58 <__ieee754_atan2+0x178>)
 800ef08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef0c:	4620      	mov	r0, r4
 800ef0e:	4629      	mov	r1, r5
 800ef10:	f7f1 f92a 	bl	8000168 <__aeabi_dsub>
 800ef14:	4602      	mov	r2, r0
 800ef16:	460b      	mov	r3, r1
 800ef18:	a111      	add	r1, pc, #68	; (adr r1, 800ef60 <__ieee754_atan2+0x180>)
 800ef1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ef1e:	f7f1 f923 	bl	8000168 <__aeabi_dsub>
 800ef22:	e77f      	b.n	800ee24 <__ieee754_atan2+0x44>
 800ef24:	a50e      	add	r5, pc, #56	; (adr r5, 800ef60 <__ieee754_atan2+0x180>)
 800ef26:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ef2a:	e798      	b.n	800ee5e <__ieee754_atan2+0x7e>
 800ef2c:	a510      	add	r5, pc, #64	; (adr r5, 800ef70 <__ieee754_atan2+0x190>)
 800ef2e:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ef32:	e794      	b.n	800ee5e <__ieee754_atan2+0x7e>
 800ef34:	2400      	movs	r4, #0
 800ef36:	2500      	movs	r5, #0
 800ef38:	e791      	b.n	800ee5e <__ieee754_atan2+0x7e>
 800ef3a:	a50b      	add	r5, pc, #44	; (adr r5, 800ef68 <__ieee754_atan2+0x188>)
 800ef3c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ef40:	e78d      	b.n	800ee5e <__ieee754_atan2+0x7e>
 800ef42:	bf00      	nop
 800ef44:	f3af 8000 	nop.w
 800ef48:	54442d18 	.word	0x54442d18
 800ef4c:	c00921fb 	.word	0xc00921fb
 800ef50:	54442d18 	.word	0x54442d18
 800ef54:	bff921fb 	.word	0xbff921fb
 800ef58:	33145c07 	.word	0x33145c07
 800ef5c:	3ca1a626 	.word	0x3ca1a626
 800ef60:	54442d18 	.word	0x54442d18
 800ef64:	400921fb 	.word	0x400921fb
 800ef68:	54442d18 	.word	0x54442d18
 800ef6c:	3ff921fb 	.word	0x3ff921fb
 800ef70:	54442d18 	.word	0x54442d18
 800ef74:	3fe921fb 	.word	0x3fe921fb
 800ef78:	0800f5b8 	.word	0x0800f5b8
 800ef7c:	0800f5d0 	.word	0x0800f5d0
 800ef80:	7ff00000 	.word	0x7ff00000

0800ef84 <__ieee754_sqrt>:
 800ef84:	f8df c150 	ldr.w	ip, [pc, #336]	; 800f0d8 <__ieee754_sqrt+0x154>
 800ef88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef8c:	ea3c 0c01 	bics.w	ip, ip, r1
 800ef90:	460b      	mov	r3, r1
 800ef92:	4606      	mov	r6, r0
 800ef94:	460d      	mov	r5, r1
 800ef96:	460a      	mov	r2, r1
 800ef98:	4607      	mov	r7, r0
 800ef9a:	4604      	mov	r4, r0
 800ef9c:	d10e      	bne.n	800efbc <__ieee754_sqrt+0x38>
 800ef9e:	4602      	mov	r2, r0
 800efa0:	f7f1 fa9a 	bl	80004d8 <__aeabi_dmul>
 800efa4:	4602      	mov	r2, r0
 800efa6:	460b      	mov	r3, r1
 800efa8:	4630      	mov	r0, r6
 800efaa:	4629      	mov	r1, r5
 800efac:	f7f1 f8de 	bl	800016c <__adddf3>
 800efb0:	4606      	mov	r6, r0
 800efb2:	460d      	mov	r5, r1
 800efb4:	4630      	mov	r0, r6
 800efb6:	4629      	mov	r1, r5
 800efb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efbc:	2900      	cmp	r1, #0
 800efbe:	dc0d      	bgt.n	800efdc <__ieee754_sqrt+0x58>
 800efc0:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800efc4:	ea5c 0707 	orrs.w	r7, ip, r7
 800efc8:	d0f4      	beq.n	800efb4 <__ieee754_sqrt+0x30>
 800efca:	b139      	cbz	r1, 800efdc <__ieee754_sqrt+0x58>
 800efcc:	4602      	mov	r2, r0
 800efce:	f7f1 f8cb 	bl	8000168 <__aeabi_dsub>
 800efd2:	4602      	mov	r2, r0
 800efd4:	460b      	mov	r3, r1
 800efd6:	f7f1 fba9 	bl	800072c <__aeabi_ddiv>
 800efda:	e7e9      	b.n	800efb0 <__ieee754_sqrt+0x2c>
 800efdc:	1512      	asrs	r2, r2, #20
 800efde:	d074      	beq.n	800f0ca <__ieee754_sqrt+0x146>
 800efe0:	2000      	movs	r0, #0
 800efe2:	07d5      	lsls	r5, r2, #31
 800efe4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800efe8:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 800efec:	bf5e      	ittt	pl
 800efee:	0fe3      	lsrpl	r3, r4, #31
 800eff0:	0064      	lslpl	r4, r4, #1
 800eff2:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 800eff6:	0fe3      	lsrs	r3, r4, #31
 800eff8:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800effc:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800f000:	2516      	movs	r5, #22
 800f002:	4601      	mov	r1, r0
 800f004:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800f008:	1076      	asrs	r6, r6, #1
 800f00a:	0064      	lsls	r4, r4, #1
 800f00c:	188f      	adds	r7, r1, r2
 800f00e:	429f      	cmp	r7, r3
 800f010:	bfde      	ittt	le
 800f012:	1bdb      	suble	r3, r3, r7
 800f014:	18b9      	addle	r1, r7, r2
 800f016:	1880      	addle	r0, r0, r2
 800f018:	005b      	lsls	r3, r3, #1
 800f01a:	3d01      	subs	r5, #1
 800f01c:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800f020:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800f024:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800f028:	d1f0      	bne.n	800f00c <__ieee754_sqrt+0x88>
 800f02a:	462a      	mov	r2, r5
 800f02c:	f04f 0e20 	mov.w	lr, #32
 800f030:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800f034:	428b      	cmp	r3, r1
 800f036:	eb07 0c05 	add.w	ip, r7, r5
 800f03a:	dc02      	bgt.n	800f042 <__ieee754_sqrt+0xbe>
 800f03c:	d113      	bne.n	800f066 <__ieee754_sqrt+0xe2>
 800f03e:	45a4      	cmp	ip, r4
 800f040:	d811      	bhi.n	800f066 <__ieee754_sqrt+0xe2>
 800f042:	f1bc 0f00 	cmp.w	ip, #0
 800f046:	eb0c 0507 	add.w	r5, ip, r7
 800f04a:	da43      	bge.n	800f0d4 <__ieee754_sqrt+0x150>
 800f04c:	2d00      	cmp	r5, #0
 800f04e:	db41      	blt.n	800f0d4 <__ieee754_sqrt+0x150>
 800f050:	f101 0801 	add.w	r8, r1, #1
 800f054:	1a5b      	subs	r3, r3, r1
 800f056:	4641      	mov	r1, r8
 800f058:	45a4      	cmp	ip, r4
 800f05a:	bf88      	it	hi
 800f05c:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 800f060:	eba4 040c 	sub.w	r4, r4, ip
 800f064:	443a      	add	r2, r7
 800f066:	005b      	lsls	r3, r3, #1
 800f068:	f1be 0e01 	subs.w	lr, lr, #1
 800f06c:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800f070:	ea4f 0757 	mov.w	r7, r7, lsr #1
 800f074:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800f078:	d1dc      	bne.n	800f034 <__ieee754_sqrt+0xb0>
 800f07a:	4323      	orrs	r3, r4
 800f07c:	d006      	beq.n	800f08c <__ieee754_sqrt+0x108>
 800f07e:	1c54      	adds	r4, r2, #1
 800f080:	bf0b      	itete	eq
 800f082:	4672      	moveq	r2, lr
 800f084:	3201      	addne	r2, #1
 800f086:	3001      	addeq	r0, #1
 800f088:	f022 0201 	bicne.w	r2, r2, #1
 800f08c:	1043      	asrs	r3, r0, #1
 800f08e:	07c1      	lsls	r1, r0, #31
 800f090:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800f094:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800f098:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800f09c:	bf48      	it	mi
 800f09e:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800f0a2:	4610      	mov	r0, r2
 800f0a4:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800f0a8:	e782      	b.n	800efb0 <__ieee754_sqrt+0x2c>
 800f0aa:	0ae3      	lsrs	r3, r4, #11
 800f0ac:	3915      	subs	r1, #21
 800f0ae:	0564      	lsls	r4, r4, #21
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d0fa      	beq.n	800f0aa <__ieee754_sqrt+0x126>
 800f0b4:	02de      	lsls	r6, r3, #11
 800f0b6:	d50a      	bpl.n	800f0ce <__ieee754_sqrt+0x14a>
 800f0b8:	f1c2 0020 	rsb	r0, r2, #32
 800f0bc:	fa24 f000 	lsr.w	r0, r4, r0
 800f0c0:	1e55      	subs	r5, r2, #1
 800f0c2:	4094      	lsls	r4, r2
 800f0c4:	4303      	orrs	r3, r0
 800f0c6:	1b4a      	subs	r2, r1, r5
 800f0c8:	e78a      	b.n	800efe0 <__ieee754_sqrt+0x5c>
 800f0ca:	4611      	mov	r1, r2
 800f0cc:	e7f0      	b.n	800f0b0 <__ieee754_sqrt+0x12c>
 800f0ce:	005b      	lsls	r3, r3, #1
 800f0d0:	3201      	adds	r2, #1
 800f0d2:	e7ef      	b.n	800f0b4 <__ieee754_sqrt+0x130>
 800f0d4:	4688      	mov	r8, r1
 800f0d6:	e7bd      	b.n	800f054 <__ieee754_sqrt+0xd0>
 800f0d8:	7ff00000 	.word	0x7ff00000

0800f0dc <_init>:
 800f0dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0de:	bf00      	nop
 800f0e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f0e2:	bc08      	pop	{r3}
 800f0e4:	469e      	mov	lr, r3
 800f0e6:	4770      	bx	lr

0800f0e8 <_fini>:
 800f0e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0ea:	bf00      	nop
 800f0ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f0ee:	bc08      	pop	{r3}
 800f0f0:	469e      	mov	lr, r3
 800f0f2:	4770      	bx	lr
