
stm32hid.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b74  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08007c80  08007c80  00017c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007cfc  08007cfc  00020164  2**0
                  CONTENTS
  4 .ARM          00000000  08007cfc  08007cfc  00020164  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007cfc  08007cfc  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007cfc  08007cfc  00017cfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d00  08007d00  00017d00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  08007d04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000084c  20000164  08007e68  00020164  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009b0  08007e68  000209b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 12 .debug_info   000126be  00000000  00000000  0002018d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002eb1  00000000  00000000  0003284b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b98  00000000  00000000  00035700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a40  00000000  00000000  00036298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019da4  00000000  00000000  00036cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f164  00000000  00000000  00050a7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089d65  00000000  00000000  0005fbe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e9945  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d0c  00000000  00000000  000e9998  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000164 	.word	0x20000164
 8000128:	00000000 	.word	0x00000000
 800012c:	08007c68 	.word	0x08007c68

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000168 	.word	0x20000168
 8000148:	08007c68 	.word	0x08007c68

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fa9c 	bl	800068c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f846 	bl	80001e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f91e 	bl	8000398 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800015c:	f007 f99e 	bl	800749c <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8000160:	f000 f89e 	bl	80002a0 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000164:	f000 f8da 	bl	800031c <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1);
 8000168:	4818      	ldr	r0, [pc, #96]	; (80001cc <main+0x80>)
 800016a:	f000 ff41 	bl	8000ff0 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2);
 800016e:	4818      	ldr	r0, [pc, #96]	; (80001d0 <main+0x84>)
 8000170:	f000 ff3e 	bl	8000ff0 <HAL_ADCEx_Calibration_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

      HAL_ADC_Start(&hadc1);
 8000174:	4815      	ldr	r0, [pc, #84]	; (80001cc <main+0x80>)
 8000176:	f000 fbe7 	bl	8000948 <HAL_ADC_Start>
      HAL_ADC_Start(&hadc2);
 800017a:	4815      	ldr	r0, [pc, #84]	; (80001d0 <main+0x84>)
 800017c:	f000 fbe4 	bl	8000948 <HAL_ADC_Start>
     // Poll ADC1 Peripheral & TimeOut = 1mSec
      HAL_ADC_PollForConversion(&hadc1, 1);
 8000180:	2101      	movs	r1, #1
 8000182:	4812      	ldr	r0, [pc, #72]	; (80001cc <main+0x80>)
 8000184:	f000 fc8e 	bl	8000aa4 <HAL_ADC_PollForConversion>
      HAL_ADC_PollForConversion(&hadc2, 1);
 8000188:	2101      	movs	r1, #1
 800018a:	4811      	ldr	r0, [pc, #68]	; (80001d0 <main+0x84>)
 800018c:	f000 fc8a 	bl	8000aa4 <HAL_ADC_PollForConversion>
     // Read The ADC Conversion Result & Map It To PWM DutyCycle
      AD_RES1 = HAL_ADC_GetValue(&hadc1);
 8000190:	480e      	ldr	r0, [pc, #56]	; (80001cc <main+0x80>)
 8000192:	f000 fd8d 	bl	8000cb0 <HAL_ADC_GetValue>
 8000196:	4603      	mov	r3, r0
 8000198:	b29a      	uxth	r2, r3
 800019a:	4b0e      	ldr	r3, [pc, #56]	; (80001d4 <main+0x88>)
 800019c:	801a      	strh	r2, [r3, #0]
      AD_RES2 = HAL_ADC_GetValue(&hadc2);
 800019e:	480c      	ldr	r0, [pc, #48]	; (80001d0 <main+0x84>)
 80001a0:	f000 fd86 	bl	8000cb0 <HAL_ADC_GetValue>
 80001a4:	4603      	mov	r3, r0
 80001a6:	b29a      	uxth	r2, r3
 80001a8:	4b0b      	ldr	r3, [pc, #44]	; (80001d8 <main+0x8c>)
 80001aa:	801a      	strh	r2, [r3, #0]


      if(interrupt_happened)
 80001ac:	4b0b      	ldr	r3, [pc, #44]	; (80001dc <main+0x90>)
 80001ae:	781b      	ldrb	r3, [r3, #0]
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d007      	beq.n	80001c4 <main+0x78>
      {
    	  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_12);
 80001b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001b8:	4809      	ldr	r0, [pc, #36]	; (80001e0 <main+0x94>)
 80001ba:	f001 fa6f 	bl	800169c <HAL_GPIO_TogglePin>
    	  interrupt_happened = 0;
 80001be:	4b07      	ldr	r3, [pc, #28]	; (80001dc <main+0x90>)
 80001c0:	2200      	movs	r2, #0
 80001c2:	701a      	strb	r2, [r3, #0]
//			  USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof(keyboardhid));
//
//			  pressed = HAL_GetTick();
//		  }
//	  }
	  HAL_Delay(5);
 80001c4:	2005      	movs	r0, #5
 80001c6:	f000 fac3 	bl	8000750 <HAL_Delay>
      HAL_ADC_Start(&hadc1);
 80001ca:	e7d3      	b.n	8000174 <main+0x28>
 80001cc:	200001cc 	.word	0x200001cc
 80001d0:	2000019c 	.word	0x2000019c
 80001d4:	20000182 	.word	0x20000182
 80001d8:	20000184 	.word	0x20000184
 80001dc:	20000180 	.word	0x20000180
 80001e0:	40010c00 	.word	0x40010c00

080001e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b094      	sub	sp, #80	; 0x50
 80001e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001ee:	2228      	movs	r2, #40	; 0x28
 80001f0:	2100      	movs	r1, #0
 80001f2:	4618      	mov	r0, r3
 80001f4:	f007 fd30 	bl	8007c58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001f8:	f107 0314 	add.w	r3, r7, #20
 80001fc:	2200      	movs	r2, #0
 80001fe:	601a      	str	r2, [r3, #0]
 8000200:	605a      	str	r2, [r3, #4]
 8000202:	609a      	str	r2, [r3, #8]
 8000204:	60da      	str	r2, [r3, #12]
 8000206:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000208:	1d3b      	adds	r3, r7, #4
 800020a:	2200      	movs	r2, #0
 800020c:	601a      	str	r2, [r3, #0]
 800020e:	605a      	str	r2, [r3, #4]
 8000210:	609a      	str	r2, [r3, #8]
 8000212:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000214:	2301      	movs	r3, #1
 8000216:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000218:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800021c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800021e:	2300      	movs	r3, #0
 8000220:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000222:	2301      	movs	r3, #1
 8000224:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000226:	2302      	movs	r3, #2
 8000228:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800022a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800022e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000230:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000234:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000236:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800023a:	4618      	mov	r0, r3
 800023c:	f002 ff0e 	bl	800305c <HAL_RCC_OscConfig>
 8000240:	4603      	mov	r3, r0
 8000242:	2b00      	cmp	r3, #0
 8000244:	d001      	beq.n	800024a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000246:	f000 f91d 	bl	8000484 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800024a:	230f      	movs	r3, #15
 800024c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800024e:	2302      	movs	r3, #2
 8000250:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000252:	2300      	movs	r3, #0
 8000254:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000256:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800025a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800025c:	2300      	movs	r3, #0
 800025e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000260:	f107 0314 	add.w	r3, r7, #20
 8000264:	2101      	movs	r1, #1
 8000266:	4618      	mov	r0, r3
 8000268:	f003 f978 	bl	800355c <HAL_RCC_ClockConfig>
 800026c:	4603      	mov	r3, r0
 800026e:	2b00      	cmp	r3, #0
 8000270:	d001      	beq.n	8000276 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000272:	f000 f907 	bl	8000484 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000276:	2312      	movs	r3, #18
 8000278:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 800027a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800027e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000280:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000284:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000286:	1d3b      	adds	r3, r7, #4
 8000288:	4618      	mov	r0, r3
 800028a:	f003 faed 	bl	8003868 <HAL_RCCEx_PeriphCLKConfig>
 800028e:	4603      	mov	r3, r0
 8000290:	2b00      	cmp	r3, #0
 8000292:	d001      	beq.n	8000298 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000294:	f000 f8f6 	bl	8000484 <Error_Handler>
  }
}
 8000298:	bf00      	nop
 800029a:	3750      	adds	r7, #80	; 0x50
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}

080002a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b084      	sub	sp, #16
 80002a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002a6:	1d3b      	adds	r3, r7, #4
 80002a8:	2200      	movs	r2, #0
 80002aa:	601a      	str	r2, [r3, #0]
 80002ac:	605a      	str	r2, [r3, #4]
 80002ae:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80002b0:	4b18      	ldr	r3, [pc, #96]	; (8000314 <MX_ADC1_Init+0x74>)
 80002b2:	4a19      	ldr	r2, [pc, #100]	; (8000318 <MX_ADC1_Init+0x78>)
 80002b4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002b6:	4b17      	ldr	r3, [pc, #92]	; (8000314 <MX_ADC1_Init+0x74>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80002bc:	4b15      	ldr	r3, [pc, #84]	; (8000314 <MX_ADC1_Init+0x74>)
 80002be:	2200      	movs	r2, #0
 80002c0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002c2:	4b14      	ldr	r3, [pc, #80]	; (8000314 <MX_ADC1_Init+0x74>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002c8:	4b12      	ldr	r3, [pc, #72]	; (8000314 <MX_ADC1_Init+0x74>)
 80002ca:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80002ce:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002d0:	4b10      	ldr	r3, [pc, #64]	; (8000314 <MX_ADC1_Init+0x74>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80002d6:	4b0f      	ldr	r3, [pc, #60]	; (8000314 <MX_ADC1_Init+0x74>)
 80002d8:	2201      	movs	r2, #1
 80002da:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002dc:	480d      	ldr	r0, [pc, #52]	; (8000314 <MX_ADC1_Init+0x74>)
 80002de:	f000 fa5b 	bl	8000798 <HAL_ADC_Init>
 80002e2:	4603      	mov	r3, r0
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d001      	beq.n	80002ec <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80002e8:	f000 f8cc 	bl	8000484 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80002ec:	2307      	movs	r3, #7
 80002ee:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002f0:	2301      	movs	r3, #1
 80002f2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80002f4:	2300      	movs	r3, #0
 80002f6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002f8:	1d3b      	adds	r3, r7, #4
 80002fa:	4619      	mov	r1, r3
 80002fc:	4805      	ldr	r0, [pc, #20]	; (8000314 <MX_ADC1_Init+0x74>)
 80002fe:	f000 fce3 	bl	8000cc8 <HAL_ADC_ConfigChannel>
 8000302:	4603      	mov	r3, r0
 8000304:	2b00      	cmp	r3, #0
 8000306:	d001      	beq.n	800030c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000308:	f000 f8bc 	bl	8000484 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800030c:	bf00      	nop
 800030e:	3710      	adds	r7, #16
 8000310:	46bd      	mov	sp, r7
 8000312:	bd80      	pop	{r7, pc}
 8000314:	200001cc 	.word	0x200001cc
 8000318:	40012400 	.word	0x40012400

0800031c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b084      	sub	sp, #16
 8000320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000322:	1d3b      	adds	r3, r7, #4
 8000324:	2200      	movs	r2, #0
 8000326:	601a      	str	r2, [r3, #0]
 8000328:	605a      	str	r2, [r3, #4]
 800032a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 800032c:	4b18      	ldr	r3, [pc, #96]	; (8000390 <MX_ADC2_Init+0x74>)
 800032e:	4a19      	ldr	r2, [pc, #100]	; (8000394 <MX_ADC2_Init+0x78>)
 8000330:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000332:	4b17      	ldr	r3, [pc, #92]	; (8000390 <MX_ADC2_Init+0x74>)
 8000334:	2200      	movs	r2, #0
 8000336:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000338:	4b15      	ldr	r3, [pc, #84]	; (8000390 <MX_ADC2_Init+0x74>)
 800033a:	2200      	movs	r2, #0
 800033c:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800033e:	4b14      	ldr	r3, [pc, #80]	; (8000390 <MX_ADC2_Init+0x74>)
 8000340:	2200      	movs	r2, #0
 8000342:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000344:	4b12      	ldr	r3, [pc, #72]	; (8000390 <MX_ADC2_Init+0x74>)
 8000346:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800034a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800034c:	4b10      	ldr	r3, [pc, #64]	; (8000390 <MX_ADC2_Init+0x74>)
 800034e:	2200      	movs	r2, #0
 8000350:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000352:	4b0f      	ldr	r3, [pc, #60]	; (8000390 <MX_ADC2_Init+0x74>)
 8000354:	2201      	movs	r2, #1
 8000356:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000358:	480d      	ldr	r0, [pc, #52]	; (8000390 <MX_ADC2_Init+0x74>)
 800035a:	f000 fa1d 	bl	8000798 <HAL_ADC_Init>
 800035e:	4603      	mov	r3, r0
 8000360:	2b00      	cmp	r3, #0
 8000362:	d001      	beq.n	8000368 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000364:	f000 f88e 	bl	8000484 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000368:	2306      	movs	r3, #6
 800036a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800036c:	2301      	movs	r3, #1
 800036e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000370:	2300      	movs	r3, #0
 8000372:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000374:	1d3b      	adds	r3, r7, #4
 8000376:	4619      	mov	r1, r3
 8000378:	4805      	ldr	r0, [pc, #20]	; (8000390 <MX_ADC2_Init+0x74>)
 800037a:	f000 fca5 	bl	8000cc8 <HAL_ADC_ConfigChannel>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d001      	beq.n	8000388 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000384:	f000 f87e 	bl	8000484 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000388:	bf00      	nop
 800038a:	3710      	adds	r7, #16
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}
 8000390:	2000019c 	.word	0x2000019c
 8000394:	40012800 	.word	0x40012800

08000398 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b088      	sub	sp, #32
 800039c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800039e:	f107 0310 	add.w	r3, r7, #16
 80003a2:	2200      	movs	r2, #0
 80003a4:	601a      	str	r2, [r3, #0]
 80003a6:	605a      	str	r2, [r3, #4]
 80003a8:	609a      	str	r2, [r3, #8]
 80003aa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003ac:	4b28      	ldr	r3, [pc, #160]	; (8000450 <MX_GPIO_Init+0xb8>)
 80003ae:	699b      	ldr	r3, [r3, #24]
 80003b0:	4a27      	ldr	r2, [pc, #156]	; (8000450 <MX_GPIO_Init+0xb8>)
 80003b2:	f043 0320 	orr.w	r3, r3, #32
 80003b6:	6193      	str	r3, [r2, #24]
 80003b8:	4b25      	ldr	r3, [pc, #148]	; (8000450 <MX_GPIO_Init+0xb8>)
 80003ba:	699b      	ldr	r3, [r3, #24]
 80003bc:	f003 0320 	and.w	r3, r3, #32
 80003c0:	60fb      	str	r3, [r7, #12]
 80003c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003c4:	4b22      	ldr	r3, [pc, #136]	; (8000450 <MX_GPIO_Init+0xb8>)
 80003c6:	699b      	ldr	r3, [r3, #24]
 80003c8:	4a21      	ldr	r2, [pc, #132]	; (8000450 <MX_GPIO_Init+0xb8>)
 80003ca:	f043 0304 	orr.w	r3, r3, #4
 80003ce:	6193      	str	r3, [r2, #24]
 80003d0:	4b1f      	ldr	r3, [pc, #124]	; (8000450 <MX_GPIO_Init+0xb8>)
 80003d2:	699b      	ldr	r3, [r3, #24]
 80003d4:	f003 0304 	and.w	r3, r3, #4
 80003d8:	60bb      	str	r3, [r7, #8]
 80003da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003dc:	4b1c      	ldr	r3, [pc, #112]	; (8000450 <MX_GPIO_Init+0xb8>)
 80003de:	699b      	ldr	r3, [r3, #24]
 80003e0:	4a1b      	ldr	r2, [pc, #108]	; (8000450 <MX_GPIO_Init+0xb8>)
 80003e2:	f043 0308 	orr.w	r3, r3, #8
 80003e6:	6193      	str	r3, [r2, #24]
 80003e8:	4b19      	ldr	r3, [pc, #100]	; (8000450 <MX_GPIO_Init+0xb8>)
 80003ea:	699b      	ldr	r3, [r3, #24]
 80003ec:	f003 0308 	and.w	r3, r3, #8
 80003f0:	607b      	str	r3, [r7, #4]
 80003f2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80003f4:	2200      	movs	r2, #0
 80003f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003fa:	4816      	ldr	r0, [pc, #88]	; (8000454 <MX_GPIO_Init+0xbc>)
 80003fc:	f001 f936 	bl	800166c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000400:	2320      	movs	r3, #32
 8000402:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000404:	4b14      	ldr	r3, [pc, #80]	; (8000458 <MX_GPIO_Init+0xc0>)
 8000406:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000408:	2301      	movs	r3, #1
 800040a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800040c:	f107 0310 	add.w	r3, r7, #16
 8000410:	4619      	mov	r1, r3
 8000412:	4812      	ldr	r0, [pc, #72]	; (800045c <MX_GPIO_Init+0xc4>)
 8000414:	f000 ffa6 	bl	8001364 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000418:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800041c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800041e:	2301      	movs	r3, #1
 8000420:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000422:	2300      	movs	r3, #0
 8000424:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000426:	2302      	movs	r3, #2
 8000428:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800042a:	f107 0310 	add.w	r3, r7, #16
 800042e:	4619      	mov	r1, r3
 8000430:	4808      	ldr	r0, [pc, #32]	; (8000454 <MX_GPIO_Init+0xbc>)
 8000432:	f000 ff97 	bl	8001364 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000436:	2200      	movs	r2, #0
 8000438:	2100      	movs	r1, #0
 800043a:	2017      	movs	r0, #23
 800043c:	f000 ff5b 	bl	80012f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000440:	2017      	movs	r0, #23
 8000442:	f000 ff74 	bl	800132e <HAL_NVIC_EnableIRQ>

}
 8000446:	bf00      	nop
 8000448:	3720      	adds	r7, #32
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}
 800044e:	bf00      	nop
 8000450:	40021000 	.word	0x40021000
 8000454:	40010c00 	.word	0x40010c00
 8000458:	10110000 	.word	0x10110000
 800045c:	40010800 	.word	0x40010800

08000460 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000460:	b480      	push	{r7}
 8000462:	b083      	sub	sp, #12
 8000464:	af00      	add	r7, sp, #0
 8000466:	4603      	mov	r3, r0
 8000468:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_5) // If The INT Source Is EXTI Line9 (A9 Pin)
 800046a:	88fb      	ldrh	r3, [r7, #6]
 800046c:	2b20      	cmp	r3, #32
 800046e:	d102      	bne.n	8000476 <HAL_GPIO_EXTI_Callback+0x16>
    {
    	interrupt_happened = 1;
 8000470:	4b03      	ldr	r3, [pc, #12]	; (8000480 <HAL_GPIO_EXTI_Callback+0x20>)
 8000472:	2201      	movs	r2, #1
 8000474:	701a      	strb	r2, [r3, #0]
    }
}
 8000476:	bf00      	nop
 8000478:	370c      	adds	r7, #12
 800047a:	46bd      	mov	sp, r7
 800047c:	bc80      	pop	{r7}
 800047e:	4770      	bx	lr
 8000480:	20000180 	.word	0x20000180

08000484 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000488:	b672      	cpsid	i
}
 800048a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800048c:	e7fe      	b.n	800048c <Error_Handler+0x8>
	...

08000490 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000490:	b480      	push	{r7}
 8000492:	b085      	sub	sp, #20
 8000494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000496:	4b15      	ldr	r3, [pc, #84]	; (80004ec <HAL_MspInit+0x5c>)
 8000498:	699b      	ldr	r3, [r3, #24]
 800049a:	4a14      	ldr	r2, [pc, #80]	; (80004ec <HAL_MspInit+0x5c>)
 800049c:	f043 0301 	orr.w	r3, r3, #1
 80004a0:	6193      	str	r3, [r2, #24]
 80004a2:	4b12      	ldr	r3, [pc, #72]	; (80004ec <HAL_MspInit+0x5c>)
 80004a4:	699b      	ldr	r3, [r3, #24]
 80004a6:	f003 0301 	and.w	r3, r3, #1
 80004aa:	60bb      	str	r3, [r7, #8]
 80004ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ae:	4b0f      	ldr	r3, [pc, #60]	; (80004ec <HAL_MspInit+0x5c>)
 80004b0:	69db      	ldr	r3, [r3, #28]
 80004b2:	4a0e      	ldr	r2, [pc, #56]	; (80004ec <HAL_MspInit+0x5c>)
 80004b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004b8:	61d3      	str	r3, [r2, #28]
 80004ba:	4b0c      	ldr	r3, [pc, #48]	; (80004ec <HAL_MspInit+0x5c>)
 80004bc:	69db      	ldr	r3, [r3, #28]
 80004be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004c2:	607b      	str	r3, [r7, #4]
 80004c4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004c6:	4b0a      	ldr	r3, [pc, #40]	; (80004f0 <HAL_MspInit+0x60>)
 80004c8:	685b      	ldr	r3, [r3, #4]
 80004ca:	60fb      	str	r3, [r7, #12]
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004d2:	60fb      	str	r3, [r7, #12]
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004da:	60fb      	str	r3, [r7, #12]
 80004dc:	4a04      	ldr	r2, [pc, #16]	; (80004f0 <HAL_MspInit+0x60>)
 80004de:	68fb      	ldr	r3, [r7, #12]
 80004e0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004e2:	bf00      	nop
 80004e4:	3714      	adds	r7, #20
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bc80      	pop	{r7}
 80004ea:	4770      	bx	lr
 80004ec:	40021000 	.word	0x40021000
 80004f0:	40010000 	.word	0x40010000

080004f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b08a      	sub	sp, #40	; 0x28
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004fc:	f107 0318 	add.w	r3, r7, #24
 8000500:	2200      	movs	r2, #0
 8000502:	601a      	str	r2, [r3, #0]
 8000504:	605a      	str	r2, [r3, #4]
 8000506:	609a      	str	r2, [r3, #8]
 8000508:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	4a28      	ldr	r2, [pc, #160]	; (80005b0 <HAL_ADC_MspInit+0xbc>)
 8000510:	4293      	cmp	r3, r2
 8000512:	d122      	bne.n	800055a <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000514:	4b27      	ldr	r3, [pc, #156]	; (80005b4 <HAL_ADC_MspInit+0xc0>)
 8000516:	699b      	ldr	r3, [r3, #24]
 8000518:	4a26      	ldr	r2, [pc, #152]	; (80005b4 <HAL_ADC_MspInit+0xc0>)
 800051a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800051e:	6193      	str	r3, [r2, #24]
 8000520:	4b24      	ldr	r3, [pc, #144]	; (80005b4 <HAL_ADC_MspInit+0xc0>)
 8000522:	699b      	ldr	r3, [r3, #24]
 8000524:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000528:	617b      	str	r3, [r7, #20]
 800052a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800052c:	4b21      	ldr	r3, [pc, #132]	; (80005b4 <HAL_ADC_MspInit+0xc0>)
 800052e:	699b      	ldr	r3, [r3, #24]
 8000530:	4a20      	ldr	r2, [pc, #128]	; (80005b4 <HAL_ADC_MspInit+0xc0>)
 8000532:	f043 0304 	orr.w	r3, r3, #4
 8000536:	6193      	str	r3, [r2, #24]
 8000538:	4b1e      	ldr	r3, [pc, #120]	; (80005b4 <HAL_ADC_MspInit+0xc0>)
 800053a:	699b      	ldr	r3, [r3, #24]
 800053c:	f003 0304 	and.w	r3, r3, #4
 8000540:	613b      	str	r3, [r7, #16]
 8000542:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000544:	2380      	movs	r3, #128	; 0x80
 8000546:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000548:	2303      	movs	r3, #3
 800054a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800054c:	f107 0318 	add.w	r3, r7, #24
 8000550:	4619      	mov	r1, r3
 8000552:	4819      	ldr	r0, [pc, #100]	; (80005b8 <HAL_ADC_MspInit+0xc4>)
 8000554:	f000 ff06 	bl	8001364 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000558:	e026      	b.n	80005a8 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	4a17      	ldr	r2, [pc, #92]	; (80005bc <HAL_ADC_MspInit+0xc8>)
 8000560:	4293      	cmp	r3, r2
 8000562:	d121      	bne.n	80005a8 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000564:	4b13      	ldr	r3, [pc, #76]	; (80005b4 <HAL_ADC_MspInit+0xc0>)
 8000566:	699b      	ldr	r3, [r3, #24]
 8000568:	4a12      	ldr	r2, [pc, #72]	; (80005b4 <HAL_ADC_MspInit+0xc0>)
 800056a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800056e:	6193      	str	r3, [r2, #24]
 8000570:	4b10      	ldr	r3, [pc, #64]	; (80005b4 <HAL_ADC_MspInit+0xc0>)
 8000572:	699b      	ldr	r3, [r3, #24]
 8000574:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000578:	60fb      	str	r3, [r7, #12]
 800057a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800057c:	4b0d      	ldr	r3, [pc, #52]	; (80005b4 <HAL_ADC_MspInit+0xc0>)
 800057e:	699b      	ldr	r3, [r3, #24]
 8000580:	4a0c      	ldr	r2, [pc, #48]	; (80005b4 <HAL_ADC_MspInit+0xc0>)
 8000582:	f043 0304 	orr.w	r3, r3, #4
 8000586:	6193      	str	r3, [r2, #24]
 8000588:	4b0a      	ldr	r3, [pc, #40]	; (80005b4 <HAL_ADC_MspInit+0xc0>)
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	f003 0304 	and.w	r3, r3, #4
 8000590:	60bb      	str	r3, [r7, #8]
 8000592:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000594:	2340      	movs	r3, #64	; 0x40
 8000596:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000598:	2303      	movs	r3, #3
 800059a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800059c:	f107 0318 	add.w	r3, r7, #24
 80005a0:	4619      	mov	r1, r3
 80005a2:	4805      	ldr	r0, [pc, #20]	; (80005b8 <HAL_ADC_MspInit+0xc4>)
 80005a4:	f000 fede 	bl	8001364 <HAL_GPIO_Init>
}
 80005a8:	bf00      	nop
 80005aa:	3728      	adds	r7, #40	; 0x28
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	40012400 	.word	0x40012400
 80005b4:	40021000 	.word	0x40021000
 80005b8:	40010800 	.word	0x40010800
 80005bc:	40012800 	.word	0x40012800

080005c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005c4:	e7fe      	b.n	80005c4 <NMI_Handler+0x4>

080005c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005c6:	b480      	push	{r7}
 80005c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005ca:	e7fe      	b.n	80005ca <HardFault_Handler+0x4>

080005cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005d0:	e7fe      	b.n	80005d0 <MemManage_Handler+0x4>

080005d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005d2:	b480      	push	{r7}
 80005d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005d6:	e7fe      	b.n	80005d6 <BusFault_Handler+0x4>

080005d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005dc:	e7fe      	b.n	80005dc <UsageFault_Handler+0x4>

080005de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005de:	b480      	push	{r7}
 80005e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005e2:	bf00      	nop
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bc80      	pop	{r7}
 80005e8:	4770      	bx	lr

080005ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005ea:	b480      	push	{r7}
 80005ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005ee:	bf00      	nop
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bc80      	pop	{r7}
 80005f4:	4770      	bx	lr

080005f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005f6:	b480      	push	{r7}
 80005f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005fa:	bf00      	nop
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bc80      	pop	{r7}
 8000600:	4770      	bx	lr

08000602 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000602:	b580      	push	{r7, lr}
 8000604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000606:	f000 f887 	bl	8000718 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800060a:	bf00      	nop
 800060c:	bd80      	pop	{r7, pc}
	...

08000610 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000614:	4802      	ldr	r0, [pc, #8]	; (8000620 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000616:	f001 f9a4 	bl	8001962 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800061a:	bf00      	nop
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	200006c4 	.word	0x200006c4

08000624 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000628:	2020      	movs	r0, #32
 800062a:	f001 f851 	bl	80016d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800062e:	bf00      	nop
 8000630:	bd80      	pop	{r7, pc}

08000632 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000632:	b480      	push	{r7}
 8000634:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000636:	bf00      	nop
 8000638:	46bd      	mov	sp, r7
 800063a:	bc80      	pop	{r7}
 800063c:	4770      	bx	lr
	...

08000640 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000640:	480c      	ldr	r0, [pc, #48]	; (8000674 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000642:	490d      	ldr	r1, [pc, #52]	; (8000678 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000644:	4a0d      	ldr	r2, [pc, #52]	; (800067c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000646:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000648:	e002      	b.n	8000650 <LoopCopyDataInit>

0800064a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800064a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800064c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800064e:	3304      	adds	r3, #4

08000650 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000650:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000652:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000654:	d3f9      	bcc.n	800064a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000656:	4a0a      	ldr	r2, [pc, #40]	; (8000680 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000658:	4c0a      	ldr	r4, [pc, #40]	; (8000684 <LoopFillZerobss+0x22>)
  movs r3, #0
 800065a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800065c:	e001      	b.n	8000662 <LoopFillZerobss>

0800065e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800065e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000660:	3204      	adds	r2, #4

08000662 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000662:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000664:	d3fb      	bcc.n	800065e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000666:	f7ff ffe4 	bl	8000632 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800066a:	f007 fad1 	bl	8007c10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800066e:	f7ff fd6d 	bl	800014c <main>
  bx lr
 8000672:	4770      	bx	lr
  ldr r0, =_sdata
 8000674:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000678:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 800067c:	08007d04 	.word	0x08007d04
  ldr r2, =_sbss
 8000680:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 8000684:	200009b0 	.word	0x200009b0

08000688 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000688:	e7fe      	b.n	8000688 <ADC1_2_IRQHandler>
	...

0800068c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000690:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <HAL_Init+0x28>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a07      	ldr	r2, [pc, #28]	; (80006b4 <HAL_Init+0x28>)
 8000696:	f043 0310 	orr.w	r3, r3, #16
 800069a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800069c:	2003      	movs	r0, #3
 800069e:	f000 fe1f 	bl	80012e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006a2:	2000      	movs	r0, #0
 80006a4:	f000 f808 	bl	80006b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006a8:	f7ff fef2 	bl	8000490 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006ac:	2300      	movs	r3, #0
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40022000 	.word	0x40022000

080006b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006c0:	4b12      	ldr	r3, [pc, #72]	; (800070c <HAL_InitTick+0x54>)
 80006c2:	681a      	ldr	r2, [r3, #0]
 80006c4:	4b12      	ldr	r3, [pc, #72]	; (8000710 <HAL_InitTick+0x58>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	4619      	mov	r1, r3
 80006ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80006d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80006d6:	4618      	mov	r0, r3
 80006d8:	f000 fe37 	bl	800134a <HAL_SYSTICK_Config>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006e2:	2301      	movs	r3, #1
 80006e4:	e00e      	b.n	8000704 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	2b0f      	cmp	r3, #15
 80006ea:	d80a      	bhi.n	8000702 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006ec:	2200      	movs	r2, #0
 80006ee:	6879      	ldr	r1, [r7, #4]
 80006f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80006f4:	f000 fdff 	bl	80012f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006f8:	4a06      	ldr	r2, [pc, #24]	; (8000714 <HAL_InitTick+0x5c>)
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006fe:	2300      	movs	r3, #0
 8000700:	e000      	b.n	8000704 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000702:	2301      	movs	r3, #1
}
 8000704:	4618      	mov	r0, r3
 8000706:	3708      	adds	r7, #8
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	20000000 	.word	0x20000000
 8000710:	20000008 	.word	0x20000008
 8000714:	20000004 	.word	0x20000004

08000718 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800071c:	4b05      	ldr	r3, [pc, #20]	; (8000734 <HAL_IncTick+0x1c>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	461a      	mov	r2, r3
 8000722:	4b05      	ldr	r3, [pc, #20]	; (8000738 <HAL_IncTick+0x20>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4413      	add	r3, r2
 8000728:	4a03      	ldr	r2, [pc, #12]	; (8000738 <HAL_IncTick+0x20>)
 800072a:	6013      	str	r3, [r2, #0]
}
 800072c:	bf00      	nop
 800072e:	46bd      	mov	sp, r7
 8000730:	bc80      	pop	{r7}
 8000732:	4770      	bx	lr
 8000734:	20000008 	.word	0x20000008
 8000738:	200001fc 	.word	0x200001fc

0800073c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  return uwTick;
 8000740:	4b02      	ldr	r3, [pc, #8]	; (800074c <HAL_GetTick+0x10>)
 8000742:	681b      	ldr	r3, [r3, #0]
}
 8000744:	4618      	mov	r0, r3
 8000746:	46bd      	mov	sp, r7
 8000748:	bc80      	pop	{r7}
 800074a:	4770      	bx	lr
 800074c:	200001fc 	.word	0x200001fc

08000750 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000758:	f7ff fff0 	bl	800073c <HAL_GetTick>
 800075c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000768:	d005      	beq.n	8000776 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800076a:	4b0a      	ldr	r3, [pc, #40]	; (8000794 <HAL_Delay+0x44>)
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	461a      	mov	r2, r3
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	4413      	add	r3, r2
 8000774:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000776:	bf00      	nop
 8000778:	f7ff ffe0 	bl	800073c <HAL_GetTick>
 800077c:	4602      	mov	r2, r0
 800077e:	68bb      	ldr	r3, [r7, #8]
 8000780:	1ad3      	subs	r3, r2, r3
 8000782:	68fa      	ldr	r2, [r7, #12]
 8000784:	429a      	cmp	r2, r3
 8000786:	d8f7      	bhi.n	8000778 <HAL_Delay+0x28>
  {
  }
}
 8000788:	bf00      	nop
 800078a:	bf00      	nop
 800078c:	3710      	adds	r7, #16
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000008 	.word	0x20000008

08000798 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b086      	sub	sp, #24
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80007a0:	2300      	movs	r3, #0
 80007a2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80007a4:	2300      	movs	r3, #0
 80007a6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80007a8:	2300      	movs	r3, #0
 80007aa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80007ac:	2300      	movs	r3, #0
 80007ae:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d101      	bne.n	80007ba <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80007b6:	2301      	movs	r3, #1
 80007b8:	e0be      	b.n	8000938 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	689b      	ldr	r3, [r3, #8]
 80007be:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d109      	bne.n	80007dc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	2200      	movs	r2, #0
 80007cc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	2200      	movs	r2, #0
 80007d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80007d6:	6878      	ldr	r0, [r7, #4]
 80007d8:	f7ff fe8c 	bl	80004f4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80007dc:	6878      	ldr	r0, [r7, #4]
 80007de:	f000 fbc5 	bl	8000f6c <ADC_ConversionStop_Disable>
 80007e2:	4603      	mov	r3, r0
 80007e4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007ea:	f003 0310 	and.w	r3, r3, #16
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	f040 8099 	bne.w	8000926 <HAL_ADC_Init+0x18e>
 80007f4:	7dfb      	ldrb	r3, [r7, #23]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	f040 8095 	bne.w	8000926 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000800:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000804:	f023 0302 	bic.w	r3, r3, #2
 8000808:	f043 0202 	orr.w	r2, r3, #2
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000818:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	7b1b      	ldrb	r3, [r3, #12]
 800081e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000820:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000822:	68ba      	ldr	r2, [r7, #8]
 8000824:	4313      	orrs	r3, r2
 8000826:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	689b      	ldr	r3, [r3, #8]
 800082c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000830:	d003      	beq.n	800083a <HAL_ADC_Init+0xa2>
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	689b      	ldr	r3, [r3, #8]
 8000836:	2b01      	cmp	r3, #1
 8000838:	d102      	bne.n	8000840 <HAL_ADC_Init+0xa8>
 800083a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800083e:	e000      	b.n	8000842 <HAL_ADC_Init+0xaa>
 8000840:	2300      	movs	r3, #0
 8000842:	693a      	ldr	r2, [r7, #16]
 8000844:	4313      	orrs	r3, r2
 8000846:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	7d1b      	ldrb	r3, [r3, #20]
 800084c:	2b01      	cmp	r3, #1
 800084e:	d119      	bne.n	8000884 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	7b1b      	ldrb	r3, [r3, #12]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d109      	bne.n	800086c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	699b      	ldr	r3, [r3, #24]
 800085c:	3b01      	subs	r3, #1
 800085e:	035a      	lsls	r2, r3, #13
 8000860:	693b      	ldr	r3, [r7, #16]
 8000862:	4313      	orrs	r3, r2
 8000864:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000868:	613b      	str	r3, [r7, #16]
 800086a:	e00b      	b.n	8000884 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000870:	f043 0220 	orr.w	r2, r3, #32
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800087c:	f043 0201 	orr.w	r2, r3, #1
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	685b      	ldr	r3, [r3, #4]
 800088a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	693a      	ldr	r2, [r7, #16]
 8000894:	430a      	orrs	r2, r1
 8000896:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	689a      	ldr	r2, [r3, #8]
 800089e:	4b28      	ldr	r3, [pc, #160]	; (8000940 <HAL_ADC_Init+0x1a8>)
 80008a0:	4013      	ands	r3, r2
 80008a2:	687a      	ldr	r2, [r7, #4]
 80008a4:	6812      	ldr	r2, [r2, #0]
 80008a6:	68b9      	ldr	r1, [r7, #8]
 80008a8:	430b      	orrs	r3, r1
 80008aa:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	689b      	ldr	r3, [r3, #8]
 80008b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80008b4:	d003      	beq.n	80008be <HAL_ADC_Init+0x126>
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	689b      	ldr	r3, [r3, #8]
 80008ba:	2b01      	cmp	r3, #1
 80008bc:	d104      	bne.n	80008c8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	691b      	ldr	r3, [r3, #16]
 80008c2:	3b01      	subs	r3, #1
 80008c4:	051b      	lsls	r3, r3, #20
 80008c6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008ce:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	68fa      	ldr	r2, [r7, #12]
 80008d8:	430a      	orrs	r2, r1
 80008da:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	689a      	ldr	r2, [r3, #8]
 80008e2:	4b18      	ldr	r3, [pc, #96]	; (8000944 <HAL_ADC_Init+0x1ac>)
 80008e4:	4013      	ands	r3, r2
 80008e6:	68ba      	ldr	r2, [r7, #8]
 80008e8:	429a      	cmp	r2, r3
 80008ea:	d10b      	bne.n	8000904 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	2200      	movs	r2, #0
 80008f0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008f6:	f023 0303 	bic.w	r3, r3, #3
 80008fa:	f043 0201 	orr.w	r2, r3, #1
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000902:	e018      	b.n	8000936 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000908:	f023 0312 	bic.w	r3, r3, #18
 800090c:	f043 0210 	orr.w	r2, r3, #16
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000918:	f043 0201 	orr.w	r2, r3, #1
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000920:	2301      	movs	r3, #1
 8000922:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000924:	e007      	b.n	8000936 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800092a:	f043 0210 	orr.w	r2, r3, #16
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000932:	2301      	movs	r3, #1
 8000934:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000936:	7dfb      	ldrb	r3, [r7, #23]
}
 8000938:	4618      	mov	r0, r3
 800093a:	3718      	adds	r7, #24
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	ffe1f7fd 	.word	0xffe1f7fd
 8000944:	ff1f0efe 	.word	0xff1f0efe

08000948 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000950:	2300      	movs	r3, #0
 8000952:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800095a:	2b01      	cmp	r3, #1
 800095c:	d101      	bne.n	8000962 <HAL_ADC_Start+0x1a>
 800095e:	2302      	movs	r3, #2
 8000960:	e098      	b.n	8000a94 <HAL_ADC_Start+0x14c>
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	2201      	movs	r2, #1
 8000966:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800096a:	6878      	ldr	r0, [r7, #4]
 800096c:	f000 faa4 	bl	8000eb8 <ADC_Enable>
 8000970:	4603      	mov	r3, r0
 8000972:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000974:	7bfb      	ldrb	r3, [r7, #15]
 8000976:	2b00      	cmp	r3, #0
 8000978:	f040 8087 	bne.w	8000a8a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000980:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000984:	f023 0301 	bic.w	r3, r3, #1
 8000988:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a41      	ldr	r2, [pc, #260]	; (8000a9c <HAL_ADC_Start+0x154>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d105      	bne.n	80009a6 <HAL_ADC_Start+0x5e>
 800099a:	4b41      	ldr	r3, [pc, #260]	; (8000aa0 <HAL_ADC_Start+0x158>)
 800099c:	685b      	ldr	r3, [r3, #4]
 800099e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d115      	bne.n	80009d2 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009aa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	685b      	ldr	r3, [r3, #4]
 80009b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d026      	beq.n	8000a0e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009c4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80009c8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80009d0:	e01d      	b.n	8000a0e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009d6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4a2f      	ldr	r2, [pc, #188]	; (8000aa0 <HAL_ADC_Start+0x158>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d004      	beq.n	80009f2 <HAL_ADC_Start+0xaa>
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a2b      	ldr	r2, [pc, #172]	; (8000a9c <HAL_ADC_Start+0x154>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d10d      	bne.n	8000a0e <HAL_ADC_Start+0xc6>
 80009f2:	4b2b      	ldr	r3, [pc, #172]	; (8000aa0 <HAL_ADC_Start+0x158>)
 80009f4:	685b      	ldr	r3, [r3, #4]
 80009f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d007      	beq.n	8000a0e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a02:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000a06:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d006      	beq.n	8000a28 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a1e:	f023 0206 	bic.w	r2, r3, #6
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a26:	e002      	b.n	8000a2e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	2200      	movs	r2, #0
 8000a32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	f06f 0202 	mvn.w	r2, #2
 8000a3e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	689b      	ldr	r3, [r3, #8]
 8000a46:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000a4a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000a4e:	d113      	bne.n	8000a78 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000a54:	4a11      	ldr	r2, [pc, #68]	; (8000a9c <HAL_ADC_Start+0x154>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d105      	bne.n	8000a66 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000a5a:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <HAL_ADC_Start+0x158>)
 8000a5c:	685b      	ldr	r3, [r3, #4]
 8000a5e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d108      	bne.n	8000a78 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	689a      	ldr	r2, [r3, #8]
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000a74:	609a      	str	r2, [r3, #8]
 8000a76:	e00c      	b.n	8000a92 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	689a      	ldr	r2, [r3, #8]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	e003      	b.n	8000a92 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	3710      	adds	r7, #16
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40012800 	.word	0x40012800
 8000aa0:	40012400 	.word	0x40012400

08000aa4 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000aa4:	b590      	push	{r4, r7, lr}
 8000aa6:	b087      	sub	sp, #28
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000aba:	f7ff fe3f 	bl	800073c <HAL_GetTick>
 8000abe:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	689b      	ldr	r3, [r3, #8]
 8000ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d00b      	beq.n	8000ae6 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ad2:	f043 0220 	orr.w	r2, r3, #32
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	2200      	movs	r2, #0
 8000ade:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	e0d3      	b.n	8000c8e <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d131      	bne.n	8000b58 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000afa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d12a      	bne.n	8000b58 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000b02:	e021      	b.n	8000b48 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b0a:	d01d      	beq.n	8000b48 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d007      	beq.n	8000b22 <HAL_ADC_PollForConversion+0x7e>
 8000b12:	f7ff fe13 	bl	800073c <HAL_GetTick>
 8000b16:	4602      	mov	r2, r0
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	1ad3      	subs	r3, r2, r3
 8000b1c:	683a      	ldr	r2, [r7, #0]
 8000b1e:	429a      	cmp	r2, r3
 8000b20:	d212      	bcs.n	8000b48 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f003 0302 	and.w	r3, r3, #2
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d10b      	bne.n	8000b48 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b34:	f043 0204 	orr.w	r2, r3, #4
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	2200      	movs	r2, #0
 8000b40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8000b44:	2303      	movs	r3, #3
 8000b46:	e0a2      	b.n	8000c8e <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f003 0302 	and.w	r3, r3, #2
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d0d6      	beq.n	8000b04 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000b56:	e070      	b.n	8000c3a <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000b58:	4b4f      	ldr	r3, [pc, #316]	; (8000c98 <HAL_ADC_PollForConversion+0x1f4>)
 8000b5a:	681c      	ldr	r4, [r3, #0]
 8000b5c:	2002      	movs	r0, #2
 8000b5e:	f002 ff39 	bl	80039d4 <HAL_RCCEx_GetPeriphCLKFreq>
 8000b62:	4603      	mov	r3, r0
 8000b64:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	6919      	ldr	r1, [r3, #16]
 8000b6e:	4b4b      	ldr	r3, [pc, #300]	; (8000c9c <HAL_ADC_PollForConversion+0x1f8>)
 8000b70:	400b      	ands	r3, r1
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d118      	bne.n	8000ba8 <HAL_ADC_PollForConversion+0x104>
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	68d9      	ldr	r1, [r3, #12]
 8000b7c:	4b48      	ldr	r3, [pc, #288]	; (8000ca0 <HAL_ADC_PollForConversion+0x1fc>)
 8000b7e:	400b      	ands	r3, r1
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d111      	bne.n	8000ba8 <HAL_ADC_PollForConversion+0x104>
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	6919      	ldr	r1, [r3, #16]
 8000b8a:	4b46      	ldr	r3, [pc, #280]	; (8000ca4 <HAL_ADC_PollForConversion+0x200>)
 8000b8c:	400b      	ands	r3, r1
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d108      	bne.n	8000ba4 <HAL_ADC_PollForConversion+0x100>
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	68d9      	ldr	r1, [r3, #12]
 8000b98:	4b43      	ldr	r3, [pc, #268]	; (8000ca8 <HAL_ADC_PollForConversion+0x204>)
 8000b9a:	400b      	ands	r3, r1
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d101      	bne.n	8000ba4 <HAL_ADC_PollForConversion+0x100>
 8000ba0:	2314      	movs	r3, #20
 8000ba2:	e020      	b.n	8000be6 <HAL_ADC_PollForConversion+0x142>
 8000ba4:	2329      	movs	r3, #41	; 0x29
 8000ba6:	e01e      	b.n	8000be6 <HAL_ADC_PollForConversion+0x142>
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	6919      	ldr	r1, [r3, #16]
 8000bae:	4b3d      	ldr	r3, [pc, #244]	; (8000ca4 <HAL_ADC_PollForConversion+0x200>)
 8000bb0:	400b      	ands	r3, r1
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d106      	bne.n	8000bc4 <HAL_ADC_PollForConversion+0x120>
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	68d9      	ldr	r1, [r3, #12]
 8000bbc:	4b3a      	ldr	r3, [pc, #232]	; (8000ca8 <HAL_ADC_PollForConversion+0x204>)
 8000bbe:	400b      	ands	r3, r1
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d00d      	beq.n	8000be0 <HAL_ADC_PollForConversion+0x13c>
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	6919      	ldr	r1, [r3, #16]
 8000bca:	4b38      	ldr	r3, [pc, #224]	; (8000cac <HAL_ADC_PollForConversion+0x208>)
 8000bcc:	400b      	ands	r3, r1
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d108      	bne.n	8000be4 <HAL_ADC_PollForConversion+0x140>
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	68d9      	ldr	r1, [r3, #12]
 8000bd8:	4b34      	ldr	r3, [pc, #208]	; (8000cac <HAL_ADC_PollForConversion+0x208>)
 8000bda:	400b      	ands	r3, r1
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d101      	bne.n	8000be4 <HAL_ADC_PollForConversion+0x140>
 8000be0:	2354      	movs	r3, #84	; 0x54
 8000be2:	e000      	b.n	8000be6 <HAL_ADC_PollForConversion+0x142>
 8000be4:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000be6:	fb02 f303 	mul.w	r3, r2, r3
 8000bea:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000bec:	e021      	b.n	8000c32 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000bf4:	d01a      	beq.n	8000c2c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d007      	beq.n	8000c0c <HAL_ADC_PollForConversion+0x168>
 8000bfc:	f7ff fd9e 	bl	800073c <HAL_GetTick>
 8000c00:	4602      	mov	r2, r0
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	1ad3      	subs	r3, r2, r3
 8000c06:	683a      	ldr	r2, [r7, #0]
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	d20f      	bcs.n	8000c2c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	d90b      	bls.n	8000c2c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c18:	f043 0204 	orr.w	r2, r3, #4
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2200      	movs	r2, #0
 8000c24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8000c28:	2303      	movs	r3, #3
 8000c2a:	e030      	b.n	8000c8e <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	3301      	adds	r3, #1
 8000c30:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	693a      	ldr	r2, [r7, #16]
 8000c36:	429a      	cmp	r2, r3
 8000c38:	d8d9      	bhi.n	8000bee <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f06f 0212 	mvn.w	r2, #18
 8000c42:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c48:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	689b      	ldr	r3, [r3, #8]
 8000c56:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000c5a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000c5e:	d115      	bne.n	8000c8c <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d111      	bne.n	8000c8c <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c6c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d105      	bne.n	8000c8c <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c84:	f043 0201 	orr.w	r2, r3, #1
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000c8c:	2300      	movs	r3, #0
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	371c      	adds	r7, #28
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd90      	pop	{r4, r7, pc}
 8000c96:	bf00      	nop
 8000c98:	20000000 	.word	0x20000000
 8000c9c:	24924924 	.word	0x24924924
 8000ca0:	00924924 	.word	0x00924924
 8000ca4:	12492492 	.word	0x12492492
 8000ca8:	00492492 	.word	0x00492492
 8000cac:	00249249 	.word	0x00249249

08000cb0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	370c      	adds	r7, #12
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bc80      	pop	{r7}
 8000cc6:	4770      	bx	lr

08000cc8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000cc8:	b480      	push	{r7}
 8000cca:	b085      	sub	sp, #20
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d101      	bne.n	8000ce8 <HAL_ADC_ConfigChannel+0x20>
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	e0dc      	b.n	8000ea2 <HAL_ADC_ConfigChannel+0x1da>
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2201      	movs	r2, #1
 8000cec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	2b06      	cmp	r3, #6
 8000cf6:	d81c      	bhi.n	8000d32 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	685a      	ldr	r2, [r3, #4]
 8000d02:	4613      	mov	r3, r2
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	4413      	add	r3, r2
 8000d08:	3b05      	subs	r3, #5
 8000d0a:	221f      	movs	r2, #31
 8000d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d10:	43db      	mvns	r3, r3
 8000d12:	4019      	ands	r1, r3
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	6818      	ldr	r0, [r3, #0]
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	685a      	ldr	r2, [r3, #4]
 8000d1c:	4613      	mov	r3, r2
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	4413      	add	r3, r2
 8000d22:	3b05      	subs	r3, #5
 8000d24:	fa00 f203 	lsl.w	r2, r0, r3
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	430a      	orrs	r2, r1
 8000d2e:	635a      	str	r2, [r3, #52]	; 0x34
 8000d30:	e03c      	b.n	8000dac <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	2b0c      	cmp	r3, #12
 8000d38:	d81c      	bhi.n	8000d74 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685a      	ldr	r2, [r3, #4]
 8000d44:	4613      	mov	r3, r2
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	4413      	add	r3, r2
 8000d4a:	3b23      	subs	r3, #35	; 0x23
 8000d4c:	221f      	movs	r2, #31
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	43db      	mvns	r3, r3
 8000d54:	4019      	ands	r1, r3
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	6818      	ldr	r0, [r3, #0]
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	685a      	ldr	r2, [r3, #4]
 8000d5e:	4613      	mov	r3, r2
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	4413      	add	r3, r2
 8000d64:	3b23      	subs	r3, #35	; 0x23
 8000d66:	fa00 f203 	lsl.w	r2, r0, r3
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	430a      	orrs	r2, r1
 8000d70:	631a      	str	r2, [r3, #48]	; 0x30
 8000d72:	e01b      	b.n	8000dac <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	685a      	ldr	r2, [r3, #4]
 8000d7e:	4613      	mov	r3, r2
 8000d80:	009b      	lsls	r3, r3, #2
 8000d82:	4413      	add	r3, r2
 8000d84:	3b41      	subs	r3, #65	; 0x41
 8000d86:	221f      	movs	r2, #31
 8000d88:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8c:	43db      	mvns	r3, r3
 8000d8e:	4019      	ands	r1, r3
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	6818      	ldr	r0, [r3, #0]
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	685a      	ldr	r2, [r3, #4]
 8000d98:	4613      	mov	r3, r2
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	4413      	add	r3, r2
 8000d9e:	3b41      	subs	r3, #65	; 0x41
 8000da0:	fa00 f203 	lsl.w	r2, r0, r3
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	430a      	orrs	r2, r1
 8000daa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2b09      	cmp	r3, #9
 8000db2:	d91c      	bls.n	8000dee <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	68d9      	ldr	r1, [r3, #12]
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	4413      	add	r3, r2
 8000dc4:	3b1e      	subs	r3, #30
 8000dc6:	2207      	movs	r2, #7
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	43db      	mvns	r3, r3
 8000dce:	4019      	ands	r1, r3
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	6898      	ldr	r0, [r3, #8]
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	4613      	mov	r3, r2
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	4413      	add	r3, r2
 8000dde:	3b1e      	subs	r3, #30
 8000de0:	fa00 f203 	lsl.w	r2, r0, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	430a      	orrs	r2, r1
 8000dea:	60da      	str	r2, [r3, #12]
 8000dec:	e019      	b.n	8000e22 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	6919      	ldr	r1, [r3, #16]
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	4613      	mov	r3, r2
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	4413      	add	r3, r2
 8000dfe:	2207      	movs	r2, #7
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	43db      	mvns	r3, r3
 8000e06:	4019      	ands	r1, r3
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	6898      	ldr	r0, [r3, #8]
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	4613      	mov	r3, r2
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	4413      	add	r3, r2
 8000e16:	fa00 f203 	lsl.w	r2, r0, r3
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	430a      	orrs	r2, r1
 8000e20:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	2b10      	cmp	r3, #16
 8000e28:	d003      	beq.n	8000e32 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000e2e:	2b11      	cmp	r3, #17
 8000e30:	d132      	bne.n	8000e98 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a1d      	ldr	r2, [pc, #116]	; (8000eac <HAL_ADC_ConfigChannel+0x1e4>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d125      	bne.n	8000e88 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	689b      	ldr	r3, [r3, #8]
 8000e42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d126      	bne.n	8000e98 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	689a      	ldr	r2, [r3, #8]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000e58:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	2b10      	cmp	r3, #16
 8000e60:	d11a      	bne.n	8000e98 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000e62:	4b13      	ldr	r3, [pc, #76]	; (8000eb0 <HAL_ADC_ConfigChannel+0x1e8>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a13      	ldr	r2, [pc, #76]	; (8000eb4 <HAL_ADC_ConfigChannel+0x1ec>)
 8000e68:	fba2 2303 	umull	r2, r3, r2, r3
 8000e6c:	0c9a      	lsrs	r2, r3, #18
 8000e6e:	4613      	mov	r3, r2
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	4413      	add	r3, r2
 8000e74:	005b      	lsls	r3, r3, #1
 8000e76:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e78:	e002      	b.n	8000e80 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d1f9      	bne.n	8000e7a <HAL_ADC_ConfigChannel+0x1b2>
 8000e86:	e007      	b.n	8000e98 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e8c:	f043 0220 	orr.w	r2, r3, #32
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000e94:	2301      	movs	r3, #1
 8000e96:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3714      	adds	r7, #20
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bc80      	pop	{r7}
 8000eaa:	4770      	bx	lr
 8000eac:	40012400 	.word	0x40012400
 8000eb0:	20000000 	.word	0x20000000
 8000eb4:	431bde83 	.word	0x431bde83

08000eb8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	689b      	ldr	r3, [r3, #8]
 8000ece:	f003 0301 	and.w	r3, r3, #1
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d040      	beq.n	8000f58 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	689a      	ldr	r2, [r3, #8]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f042 0201 	orr.w	r2, r2, #1
 8000ee4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000ee6:	4b1f      	ldr	r3, [pc, #124]	; (8000f64 <ADC_Enable+0xac>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a1f      	ldr	r2, [pc, #124]	; (8000f68 <ADC_Enable+0xb0>)
 8000eec:	fba2 2303 	umull	r2, r3, r2, r3
 8000ef0:	0c9b      	lsrs	r3, r3, #18
 8000ef2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000ef4:	e002      	b.n	8000efc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	3b01      	subs	r3, #1
 8000efa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d1f9      	bne.n	8000ef6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000f02:	f7ff fc1b 	bl	800073c <HAL_GetTick>
 8000f06:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000f08:	e01f      	b.n	8000f4a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000f0a:	f7ff fc17 	bl	800073c <HAL_GetTick>
 8000f0e:	4602      	mov	r2, r0
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	1ad3      	subs	r3, r2, r3
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	d918      	bls.n	8000f4a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	689b      	ldr	r3, [r3, #8]
 8000f1e:	f003 0301 	and.w	r3, r3, #1
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d011      	beq.n	8000f4a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f2a:	f043 0210 	orr.w	r2, r3, #16
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f36:	f043 0201 	orr.w	r2, r3, #1
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2200      	movs	r2, #0
 8000f42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
 8000f48:	e007      	b.n	8000f5a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	f003 0301 	and.w	r3, r3, #1
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d1d8      	bne.n	8000f0a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000f58:	2300      	movs	r3, #0
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3710      	adds	r7, #16
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20000000 	.word	0x20000000
 8000f68:	431bde83 	.word	0x431bde83

08000f6c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000f74:	2300      	movs	r3, #0
 8000f76:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	f003 0301 	and.w	r3, r3, #1
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d12e      	bne.n	8000fe4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	689a      	ldr	r2, [r3, #8]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f022 0201 	bic.w	r2, r2, #1
 8000f94:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000f96:	f7ff fbd1 	bl	800073c <HAL_GetTick>
 8000f9a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000f9c:	e01b      	b.n	8000fd6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000f9e:	f7ff fbcd 	bl	800073c <HAL_GetTick>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	1ad3      	subs	r3, r2, r3
 8000fa8:	2b02      	cmp	r3, #2
 8000faa:	d914      	bls.n	8000fd6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	689b      	ldr	r3, [r3, #8]
 8000fb2:	f003 0301 	and.w	r3, r3, #1
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d10d      	bne.n	8000fd6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fbe:	f043 0210 	orr.w	r2, r3, #16
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fca:	f043 0201 	orr.w	r2, r3, #1
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e007      	b.n	8000fe6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	689b      	ldr	r3, [r3, #8]
 8000fdc:	f003 0301 	and.w	r3, r3, #1
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d0dc      	beq.n	8000f9e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000fe4:	2300      	movs	r3, #0
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3710      	adds	r7, #16
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
	...

08000ff0 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8000ff0:	b590      	push	{r4, r7, lr}
 8000ff2:	b087      	sub	sp, #28
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001006:	2b01      	cmp	r3, #1
 8001008:	d101      	bne.n	800100e <HAL_ADCEx_Calibration_Start+0x1e>
 800100a:	2302      	movs	r3, #2
 800100c:	e095      	b.n	800113a <HAL_ADCEx_Calibration_Start+0x14a>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2201      	movs	r2, #1
 8001012:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f7ff ffa8 	bl	8000f6c <ADC_ConversionStop_Disable>
 800101c:	4603      	mov	r3, r0
 800101e:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001020:	7dfb      	ldrb	r3, [r7, #23]
 8001022:	2b00      	cmp	r3, #0
 8001024:	f040 8084 	bne.w	8001130 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800102c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001030:	f023 0302 	bic.w	r3, r3, #2
 8001034:	f043 0202 	orr.w	r2, r3, #2
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800103c:	4b41      	ldr	r3, [pc, #260]	; (8001144 <HAL_ADCEx_Calibration_Start+0x154>)
 800103e:	681c      	ldr	r4, [r3, #0]
 8001040:	2002      	movs	r0, #2
 8001042:	f002 fcc7 	bl	80039d4 <HAL_RCCEx_GetPeriphCLKFreq>
 8001046:	4603      	mov	r3, r0
 8001048:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800104c:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 800104e:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001050:	e002      	b.n	8001058 <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	3b01      	subs	r3, #1
 8001056:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d1f9      	bne.n	8001052 <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f7ff ff2a 	bl	8000eb8 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	689a      	ldr	r2, [r3, #8]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f042 0208 	orr.w	r2, r2, #8
 8001072:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001074:	f7ff fb62 	bl	800073c <HAL_GetTick>
 8001078:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800107a:	e01b      	b.n	80010b4 <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800107c:	f7ff fb5e 	bl	800073c <HAL_GetTick>
 8001080:	4602      	mov	r2, r0
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	2b0a      	cmp	r3, #10
 8001088:	d914      	bls.n	80010b4 <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	f003 0308 	and.w	r3, r3, #8
 8001094:	2b00      	cmp	r3, #0
 8001096:	d00d      	beq.n	80010b4 <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800109c:	f023 0312 	bic.w	r3, r3, #18
 80010a0:	f043 0210 	orr.w	r2, r3, #16
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2200      	movs	r2, #0
 80010ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80010b0:	2301      	movs	r3, #1
 80010b2:	e042      	b.n	800113a <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	f003 0308 	and.w	r3, r3, #8
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d1dc      	bne.n	800107c <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	689a      	ldr	r2, [r3, #8]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f042 0204 	orr.w	r2, r2, #4
 80010d0:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80010d2:	f7ff fb33 	bl	800073c <HAL_GetTick>
 80010d6:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80010d8:	e01b      	b.n	8001112 <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80010da:	f7ff fb2f 	bl	800073c <HAL_GetTick>
 80010de:	4602      	mov	r2, r0
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	1ad3      	subs	r3, r2, r3
 80010e4:	2b0a      	cmp	r3, #10
 80010e6:	d914      	bls.n	8001112 <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	f003 0304 	and.w	r3, r3, #4
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d00d      	beq.n	8001112 <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010fa:	f023 0312 	bic.w	r3, r3, #18
 80010fe:	f043 0210 	orr.w	r2, r3, #16
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2200      	movs	r2, #0
 800110a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e013      	b.n	800113a <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	f003 0304 	and.w	r3, r3, #4
 800111c:	2b00      	cmp	r3, #0
 800111e:	d1dc      	bne.n	80010da <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001124:	f023 0303 	bic.w	r3, r3, #3
 8001128:	f043 0201 	orr.w	r2, r3, #1
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2200      	movs	r2, #0
 8001134:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001138:	7dfb      	ldrb	r3, [r7, #23]
}
 800113a:	4618      	mov	r0, r3
 800113c:	371c      	adds	r7, #28
 800113e:	46bd      	mov	sp, r7
 8001140:	bd90      	pop	{r4, r7, pc}
 8001142:	bf00      	nop
 8001144:	20000000 	.word	0x20000000

08001148 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f003 0307 	and.w	r3, r3, #7
 8001156:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001158:	4b0c      	ldr	r3, [pc, #48]	; (800118c <__NVIC_SetPriorityGrouping+0x44>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800115e:	68ba      	ldr	r2, [r7, #8]
 8001160:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001164:	4013      	ands	r3, r2
 8001166:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001170:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001174:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001178:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800117a:	4a04      	ldr	r2, [pc, #16]	; (800118c <__NVIC_SetPriorityGrouping+0x44>)
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	60d3      	str	r3, [r2, #12]
}
 8001180:	bf00      	nop
 8001182:	3714      	adds	r7, #20
 8001184:	46bd      	mov	sp, r7
 8001186:	bc80      	pop	{r7}
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	e000ed00 	.word	0xe000ed00

08001190 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001194:	4b04      	ldr	r3, [pc, #16]	; (80011a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	0a1b      	lsrs	r3, r3, #8
 800119a:	f003 0307 	and.w	r3, r3, #7
}
 800119e:	4618      	mov	r0, r3
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bc80      	pop	{r7}
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	db0b      	blt.n	80011d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	f003 021f 	and.w	r2, r3, #31
 80011c4:	4906      	ldr	r1, [pc, #24]	; (80011e0 <__NVIC_EnableIRQ+0x34>)
 80011c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ca:	095b      	lsrs	r3, r3, #5
 80011cc:	2001      	movs	r0, #1
 80011ce:	fa00 f202 	lsl.w	r2, r0, r2
 80011d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011d6:	bf00      	nop
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	bc80      	pop	{r7}
 80011de:	4770      	bx	lr
 80011e0:	e000e100 	.word	0xe000e100

080011e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	6039      	str	r1, [r7, #0]
 80011ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	db0a      	blt.n	800120e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	b2da      	uxtb	r2, r3
 80011fc:	490c      	ldr	r1, [pc, #48]	; (8001230 <__NVIC_SetPriority+0x4c>)
 80011fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001202:	0112      	lsls	r2, r2, #4
 8001204:	b2d2      	uxtb	r2, r2
 8001206:	440b      	add	r3, r1
 8001208:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800120c:	e00a      	b.n	8001224 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	b2da      	uxtb	r2, r3
 8001212:	4908      	ldr	r1, [pc, #32]	; (8001234 <__NVIC_SetPriority+0x50>)
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	f003 030f 	and.w	r3, r3, #15
 800121a:	3b04      	subs	r3, #4
 800121c:	0112      	lsls	r2, r2, #4
 800121e:	b2d2      	uxtb	r2, r2
 8001220:	440b      	add	r3, r1
 8001222:	761a      	strb	r2, [r3, #24]
}
 8001224:	bf00      	nop
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	bc80      	pop	{r7}
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	e000e100 	.word	0xe000e100
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001238:	b480      	push	{r7}
 800123a:	b089      	sub	sp, #36	; 0x24
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	f003 0307 	and.w	r3, r3, #7
 800124a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	f1c3 0307 	rsb	r3, r3, #7
 8001252:	2b04      	cmp	r3, #4
 8001254:	bf28      	it	cs
 8001256:	2304      	movcs	r3, #4
 8001258:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	3304      	adds	r3, #4
 800125e:	2b06      	cmp	r3, #6
 8001260:	d902      	bls.n	8001268 <NVIC_EncodePriority+0x30>
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	3b03      	subs	r3, #3
 8001266:	e000      	b.n	800126a <NVIC_EncodePriority+0x32>
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800126c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	43da      	mvns	r2, r3
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	401a      	ands	r2, r3
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001280:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	fa01 f303 	lsl.w	r3, r1, r3
 800128a:	43d9      	mvns	r1, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001290:	4313      	orrs	r3, r2
         );
}
 8001292:	4618      	mov	r0, r3
 8001294:	3724      	adds	r7, #36	; 0x24
 8001296:	46bd      	mov	sp, r7
 8001298:	bc80      	pop	{r7}
 800129a:	4770      	bx	lr

0800129c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	3b01      	subs	r3, #1
 80012a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012ac:	d301      	bcc.n	80012b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ae:	2301      	movs	r3, #1
 80012b0:	e00f      	b.n	80012d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012b2:	4a0a      	ldr	r2, [pc, #40]	; (80012dc <SysTick_Config+0x40>)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	3b01      	subs	r3, #1
 80012b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ba:	210f      	movs	r1, #15
 80012bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012c0:	f7ff ff90 	bl	80011e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012c4:	4b05      	ldr	r3, [pc, #20]	; (80012dc <SysTick_Config+0x40>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ca:	4b04      	ldr	r3, [pc, #16]	; (80012dc <SysTick_Config+0x40>)
 80012cc:	2207      	movs	r2, #7
 80012ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	e000e010 	.word	0xe000e010

080012e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f7ff ff2d 	bl	8001148 <__NVIC_SetPriorityGrouping>
}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b086      	sub	sp, #24
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	4603      	mov	r3, r0
 80012fe:	60b9      	str	r1, [r7, #8]
 8001300:	607a      	str	r2, [r7, #4]
 8001302:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001304:	2300      	movs	r3, #0
 8001306:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001308:	f7ff ff42 	bl	8001190 <__NVIC_GetPriorityGrouping>
 800130c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	68b9      	ldr	r1, [r7, #8]
 8001312:	6978      	ldr	r0, [r7, #20]
 8001314:	f7ff ff90 	bl	8001238 <NVIC_EncodePriority>
 8001318:	4602      	mov	r2, r0
 800131a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800131e:	4611      	mov	r1, r2
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff ff5f 	bl	80011e4 <__NVIC_SetPriority>
}
 8001326:	bf00      	nop
 8001328:	3718      	adds	r7, #24
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b082      	sub	sp, #8
 8001332:	af00      	add	r7, sp, #0
 8001334:	4603      	mov	r3, r0
 8001336:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001338:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff ff35 	bl	80011ac <__NVIC_EnableIRQ>
}
 8001342:	bf00      	nop
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b082      	sub	sp, #8
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f7ff ffa2 	bl	800129c <SysTick_Config>
 8001358:	4603      	mov	r3, r0
}
 800135a:	4618      	mov	r0, r3
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
	...

08001364 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001364:	b480      	push	{r7}
 8001366:	b08b      	sub	sp, #44	; 0x2c
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800136e:	2300      	movs	r3, #0
 8001370:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001372:	2300      	movs	r3, #0
 8001374:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001376:	e169      	b.n	800164c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001378:	2201      	movs	r2, #1
 800137a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	69fa      	ldr	r2, [r7, #28]
 8001388:	4013      	ands	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	429a      	cmp	r2, r3
 8001392:	f040 8158 	bne.w	8001646 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	4a9a      	ldr	r2, [pc, #616]	; (8001604 <HAL_GPIO_Init+0x2a0>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d05e      	beq.n	800145e <HAL_GPIO_Init+0xfa>
 80013a0:	4a98      	ldr	r2, [pc, #608]	; (8001604 <HAL_GPIO_Init+0x2a0>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d875      	bhi.n	8001492 <HAL_GPIO_Init+0x12e>
 80013a6:	4a98      	ldr	r2, [pc, #608]	; (8001608 <HAL_GPIO_Init+0x2a4>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d058      	beq.n	800145e <HAL_GPIO_Init+0xfa>
 80013ac:	4a96      	ldr	r2, [pc, #600]	; (8001608 <HAL_GPIO_Init+0x2a4>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d86f      	bhi.n	8001492 <HAL_GPIO_Init+0x12e>
 80013b2:	4a96      	ldr	r2, [pc, #600]	; (800160c <HAL_GPIO_Init+0x2a8>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d052      	beq.n	800145e <HAL_GPIO_Init+0xfa>
 80013b8:	4a94      	ldr	r2, [pc, #592]	; (800160c <HAL_GPIO_Init+0x2a8>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d869      	bhi.n	8001492 <HAL_GPIO_Init+0x12e>
 80013be:	4a94      	ldr	r2, [pc, #592]	; (8001610 <HAL_GPIO_Init+0x2ac>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d04c      	beq.n	800145e <HAL_GPIO_Init+0xfa>
 80013c4:	4a92      	ldr	r2, [pc, #584]	; (8001610 <HAL_GPIO_Init+0x2ac>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d863      	bhi.n	8001492 <HAL_GPIO_Init+0x12e>
 80013ca:	4a92      	ldr	r2, [pc, #584]	; (8001614 <HAL_GPIO_Init+0x2b0>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d046      	beq.n	800145e <HAL_GPIO_Init+0xfa>
 80013d0:	4a90      	ldr	r2, [pc, #576]	; (8001614 <HAL_GPIO_Init+0x2b0>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d85d      	bhi.n	8001492 <HAL_GPIO_Init+0x12e>
 80013d6:	2b12      	cmp	r3, #18
 80013d8:	d82a      	bhi.n	8001430 <HAL_GPIO_Init+0xcc>
 80013da:	2b12      	cmp	r3, #18
 80013dc:	d859      	bhi.n	8001492 <HAL_GPIO_Init+0x12e>
 80013de:	a201      	add	r2, pc, #4	; (adr r2, 80013e4 <HAL_GPIO_Init+0x80>)
 80013e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013e4:	0800145f 	.word	0x0800145f
 80013e8:	08001439 	.word	0x08001439
 80013ec:	0800144b 	.word	0x0800144b
 80013f0:	0800148d 	.word	0x0800148d
 80013f4:	08001493 	.word	0x08001493
 80013f8:	08001493 	.word	0x08001493
 80013fc:	08001493 	.word	0x08001493
 8001400:	08001493 	.word	0x08001493
 8001404:	08001493 	.word	0x08001493
 8001408:	08001493 	.word	0x08001493
 800140c:	08001493 	.word	0x08001493
 8001410:	08001493 	.word	0x08001493
 8001414:	08001493 	.word	0x08001493
 8001418:	08001493 	.word	0x08001493
 800141c:	08001493 	.word	0x08001493
 8001420:	08001493 	.word	0x08001493
 8001424:	08001493 	.word	0x08001493
 8001428:	08001441 	.word	0x08001441
 800142c:	08001455 	.word	0x08001455
 8001430:	4a79      	ldr	r2, [pc, #484]	; (8001618 <HAL_GPIO_Init+0x2b4>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d013      	beq.n	800145e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001436:	e02c      	b.n	8001492 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	623b      	str	r3, [r7, #32]
          break;
 800143e:	e029      	b.n	8001494 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	3304      	adds	r3, #4
 8001446:	623b      	str	r3, [r7, #32]
          break;
 8001448:	e024      	b.n	8001494 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	68db      	ldr	r3, [r3, #12]
 800144e:	3308      	adds	r3, #8
 8001450:	623b      	str	r3, [r7, #32]
          break;
 8001452:	e01f      	b.n	8001494 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	330c      	adds	r3, #12
 800145a:	623b      	str	r3, [r7, #32]
          break;
 800145c:	e01a      	b.n	8001494 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d102      	bne.n	800146c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001466:	2304      	movs	r3, #4
 8001468:	623b      	str	r3, [r7, #32]
          break;
 800146a:	e013      	b.n	8001494 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	2b01      	cmp	r3, #1
 8001472:	d105      	bne.n	8001480 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001474:	2308      	movs	r3, #8
 8001476:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	69fa      	ldr	r2, [r7, #28]
 800147c:	611a      	str	r2, [r3, #16]
          break;
 800147e:	e009      	b.n	8001494 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001480:	2308      	movs	r3, #8
 8001482:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	69fa      	ldr	r2, [r7, #28]
 8001488:	615a      	str	r2, [r3, #20]
          break;
 800148a:	e003      	b.n	8001494 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800148c:	2300      	movs	r3, #0
 800148e:	623b      	str	r3, [r7, #32]
          break;
 8001490:	e000      	b.n	8001494 <HAL_GPIO_Init+0x130>
          break;
 8001492:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	2bff      	cmp	r3, #255	; 0xff
 8001498:	d801      	bhi.n	800149e <HAL_GPIO_Init+0x13a>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	e001      	b.n	80014a2 <HAL_GPIO_Init+0x13e>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	3304      	adds	r3, #4
 80014a2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	2bff      	cmp	r3, #255	; 0xff
 80014a8:	d802      	bhi.n	80014b0 <HAL_GPIO_Init+0x14c>
 80014aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	e002      	b.n	80014b6 <HAL_GPIO_Init+0x152>
 80014b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b2:	3b08      	subs	r3, #8
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	210f      	movs	r1, #15
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	fa01 f303 	lsl.w	r3, r1, r3
 80014c4:	43db      	mvns	r3, r3
 80014c6:	401a      	ands	r2, r3
 80014c8:	6a39      	ldr	r1, [r7, #32]
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	fa01 f303 	lsl.w	r3, r1, r3
 80014d0:	431a      	orrs	r2, r3
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	f000 80b1 	beq.w	8001646 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014e4:	4b4d      	ldr	r3, [pc, #308]	; (800161c <HAL_GPIO_Init+0x2b8>)
 80014e6:	699b      	ldr	r3, [r3, #24]
 80014e8:	4a4c      	ldr	r2, [pc, #304]	; (800161c <HAL_GPIO_Init+0x2b8>)
 80014ea:	f043 0301 	orr.w	r3, r3, #1
 80014ee:	6193      	str	r3, [r2, #24]
 80014f0:	4b4a      	ldr	r3, [pc, #296]	; (800161c <HAL_GPIO_Init+0x2b8>)
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	f003 0301 	and.w	r3, r3, #1
 80014f8:	60bb      	str	r3, [r7, #8]
 80014fa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014fc:	4a48      	ldr	r2, [pc, #288]	; (8001620 <HAL_GPIO_Init+0x2bc>)
 80014fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001500:	089b      	lsrs	r3, r3, #2
 8001502:	3302      	adds	r3, #2
 8001504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001508:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800150a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150c:	f003 0303 	and.w	r3, r3, #3
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	220f      	movs	r2, #15
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	43db      	mvns	r3, r3
 800151a:	68fa      	ldr	r2, [r7, #12]
 800151c:	4013      	ands	r3, r2
 800151e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	4a40      	ldr	r2, [pc, #256]	; (8001624 <HAL_GPIO_Init+0x2c0>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d013      	beq.n	8001550 <HAL_GPIO_Init+0x1ec>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	4a3f      	ldr	r2, [pc, #252]	; (8001628 <HAL_GPIO_Init+0x2c4>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d00d      	beq.n	800154c <HAL_GPIO_Init+0x1e8>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	4a3e      	ldr	r2, [pc, #248]	; (800162c <HAL_GPIO_Init+0x2c8>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d007      	beq.n	8001548 <HAL_GPIO_Init+0x1e4>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	4a3d      	ldr	r2, [pc, #244]	; (8001630 <HAL_GPIO_Init+0x2cc>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d101      	bne.n	8001544 <HAL_GPIO_Init+0x1e0>
 8001540:	2303      	movs	r3, #3
 8001542:	e006      	b.n	8001552 <HAL_GPIO_Init+0x1ee>
 8001544:	2304      	movs	r3, #4
 8001546:	e004      	b.n	8001552 <HAL_GPIO_Init+0x1ee>
 8001548:	2302      	movs	r3, #2
 800154a:	e002      	b.n	8001552 <HAL_GPIO_Init+0x1ee>
 800154c:	2301      	movs	r3, #1
 800154e:	e000      	b.n	8001552 <HAL_GPIO_Init+0x1ee>
 8001550:	2300      	movs	r3, #0
 8001552:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001554:	f002 0203 	and.w	r2, r2, #3
 8001558:	0092      	lsls	r2, r2, #2
 800155a:	4093      	lsls	r3, r2
 800155c:	68fa      	ldr	r2, [r7, #12]
 800155e:	4313      	orrs	r3, r2
 8001560:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001562:	492f      	ldr	r1, [pc, #188]	; (8001620 <HAL_GPIO_Init+0x2bc>)
 8001564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001566:	089b      	lsrs	r3, r3, #2
 8001568:	3302      	adds	r3, #2
 800156a:	68fa      	ldr	r2, [r7, #12]
 800156c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001578:	2b00      	cmp	r3, #0
 800157a:	d006      	beq.n	800158a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800157c:	4b2d      	ldr	r3, [pc, #180]	; (8001634 <HAL_GPIO_Init+0x2d0>)
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	492c      	ldr	r1, [pc, #176]	; (8001634 <HAL_GPIO_Init+0x2d0>)
 8001582:	69bb      	ldr	r3, [r7, #24]
 8001584:	4313      	orrs	r3, r2
 8001586:	600b      	str	r3, [r1, #0]
 8001588:	e006      	b.n	8001598 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800158a:	4b2a      	ldr	r3, [pc, #168]	; (8001634 <HAL_GPIO_Init+0x2d0>)
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	69bb      	ldr	r3, [r7, #24]
 8001590:	43db      	mvns	r3, r3
 8001592:	4928      	ldr	r1, [pc, #160]	; (8001634 <HAL_GPIO_Init+0x2d0>)
 8001594:	4013      	ands	r3, r2
 8001596:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d006      	beq.n	80015b2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015a4:	4b23      	ldr	r3, [pc, #140]	; (8001634 <HAL_GPIO_Init+0x2d0>)
 80015a6:	685a      	ldr	r2, [r3, #4]
 80015a8:	4922      	ldr	r1, [pc, #136]	; (8001634 <HAL_GPIO_Init+0x2d0>)
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	604b      	str	r3, [r1, #4]
 80015b0:	e006      	b.n	80015c0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015b2:	4b20      	ldr	r3, [pc, #128]	; (8001634 <HAL_GPIO_Init+0x2d0>)
 80015b4:	685a      	ldr	r2, [r3, #4]
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	43db      	mvns	r3, r3
 80015ba:	491e      	ldr	r1, [pc, #120]	; (8001634 <HAL_GPIO_Init+0x2d0>)
 80015bc:	4013      	ands	r3, r2
 80015be:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d006      	beq.n	80015da <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015cc:	4b19      	ldr	r3, [pc, #100]	; (8001634 <HAL_GPIO_Init+0x2d0>)
 80015ce:	689a      	ldr	r2, [r3, #8]
 80015d0:	4918      	ldr	r1, [pc, #96]	; (8001634 <HAL_GPIO_Init+0x2d0>)
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	608b      	str	r3, [r1, #8]
 80015d8:	e006      	b.n	80015e8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015da:	4b16      	ldr	r3, [pc, #88]	; (8001634 <HAL_GPIO_Init+0x2d0>)
 80015dc:	689a      	ldr	r2, [r3, #8]
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	43db      	mvns	r3, r3
 80015e2:	4914      	ldr	r1, [pc, #80]	; (8001634 <HAL_GPIO_Init+0x2d0>)
 80015e4:	4013      	ands	r3, r2
 80015e6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d021      	beq.n	8001638 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015f4:	4b0f      	ldr	r3, [pc, #60]	; (8001634 <HAL_GPIO_Init+0x2d0>)
 80015f6:	68da      	ldr	r2, [r3, #12]
 80015f8:	490e      	ldr	r1, [pc, #56]	; (8001634 <HAL_GPIO_Init+0x2d0>)
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	60cb      	str	r3, [r1, #12]
 8001600:	e021      	b.n	8001646 <HAL_GPIO_Init+0x2e2>
 8001602:	bf00      	nop
 8001604:	10320000 	.word	0x10320000
 8001608:	10310000 	.word	0x10310000
 800160c:	10220000 	.word	0x10220000
 8001610:	10210000 	.word	0x10210000
 8001614:	10120000 	.word	0x10120000
 8001618:	10110000 	.word	0x10110000
 800161c:	40021000 	.word	0x40021000
 8001620:	40010000 	.word	0x40010000
 8001624:	40010800 	.word	0x40010800
 8001628:	40010c00 	.word	0x40010c00
 800162c:	40011000 	.word	0x40011000
 8001630:	40011400 	.word	0x40011400
 8001634:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001638:	4b0b      	ldr	r3, [pc, #44]	; (8001668 <HAL_GPIO_Init+0x304>)
 800163a:	68da      	ldr	r2, [r3, #12]
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	43db      	mvns	r3, r3
 8001640:	4909      	ldr	r1, [pc, #36]	; (8001668 <HAL_GPIO_Init+0x304>)
 8001642:	4013      	ands	r3, r2
 8001644:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001648:	3301      	adds	r3, #1
 800164a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001652:	fa22 f303 	lsr.w	r3, r2, r3
 8001656:	2b00      	cmp	r3, #0
 8001658:	f47f ae8e 	bne.w	8001378 <HAL_GPIO_Init+0x14>
  }
}
 800165c:	bf00      	nop
 800165e:	bf00      	nop
 8001660:	372c      	adds	r7, #44	; 0x2c
 8001662:	46bd      	mov	sp, r7
 8001664:	bc80      	pop	{r7}
 8001666:	4770      	bx	lr
 8001668:	40010400 	.word	0x40010400

0800166c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	460b      	mov	r3, r1
 8001676:	807b      	strh	r3, [r7, #2]
 8001678:	4613      	mov	r3, r2
 800167a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800167c:	787b      	ldrb	r3, [r7, #1]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d003      	beq.n	800168a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001682:	887a      	ldrh	r2, [r7, #2]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001688:	e003      	b.n	8001692 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800168a:	887b      	ldrh	r3, [r7, #2]
 800168c:	041a      	lsls	r2, r3, #16
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	611a      	str	r2, [r3, #16]
}
 8001692:	bf00      	nop
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	bc80      	pop	{r7}
 800169a:	4770      	bx	lr

0800169c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800169c:	b480      	push	{r7}
 800169e:	b085      	sub	sp, #20
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	460b      	mov	r3, r1
 80016a6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016ae:	887a      	ldrh	r2, [r7, #2]
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	4013      	ands	r3, r2
 80016b4:	041a      	lsls	r2, r3, #16
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	43d9      	mvns	r1, r3
 80016ba:	887b      	ldrh	r3, [r7, #2]
 80016bc:	400b      	ands	r3, r1
 80016be:	431a      	orrs	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	611a      	str	r2, [r3, #16]
}
 80016c4:	bf00      	nop
 80016c6:	3714      	adds	r7, #20
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bc80      	pop	{r7}
 80016cc:	4770      	bx	lr
	...

080016d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80016da:	4b08      	ldr	r3, [pc, #32]	; (80016fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016dc:	695a      	ldr	r2, [r3, #20]
 80016de:	88fb      	ldrh	r3, [r7, #6]
 80016e0:	4013      	ands	r3, r2
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d006      	beq.n	80016f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80016e6:	4a05      	ldr	r2, [pc, #20]	; (80016fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016e8:	88fb      	ldrh	r3, [r7, #6]
 80016ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80016ec:	88fb      	ldrh	r3, [r7, #6]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7fe feb6 	bl	8000460 <HAL_GPIO_EXTI_Callback>
  }
}
 80016f4:	bf00      	nop
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40010400 	.word	0x40010400

08001700 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001700:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001702:	b08b      	sub	sp, #44	; 0x2c
 8001704:	af06      	add	r7, sp, #24
 8001706:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d101      	bne.n	8001712 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e0fd      	b.n	800190e <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001718:	b2db      	uxtb	r3, r3
 800171a:	2b00      	cmp	r3, #0
 800171c:	d106      	bne.n	800172c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f005 ffec 	bl	8007704 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2203      	movs	r2, #3
 8001730:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4618      	mov	r0, r3
 800173a:	f002 fa35 	bl	8003ba8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	603b      	str	r3, [r7, #0]
 8001744:	687e      	ldr	r6, [r7, #4]
 8001746:	466d      	mov	r5, sp
 8001748:	f106 0410 	add.w	r4, r6, #16
 800174c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800174e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001750:	6823      	ldr	r3, [r4, #0]
 8001752:	602b      	str	r3, [r5, #0]
 8001754:	1d33      	adds	r3, r6, #4
 8001756:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001758:	6838      	ldr	r0, [r7, #0]
 800175a:	f002 f9ff 	bl	8003b5c <USB_CoreInit>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d005      	beq.n	8001770 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2202      	movs	r2, #2
 8001768:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e0ce      	b.n	800190e <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2100      	movs	r1, #0
 8001776:	4618      	mov	r0, r3
 8001778:	f002 fa30 	bl	8003bdc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800177c:	2300      	movs	r3, #0
 800177e:	73fb      	strb	r3, [r7, #15]
 8001780:	e04c      	b.n	800181c <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001782:	7bfb      	ldrb	r3, [r7, #15]
 8001784:	6879      	ldr	r1, [r7, #4]
 8001786:	1c5a      	adds	r2, r3, #1
 8001788:	4613      	mov	r3, r2
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	4413      	add	r3, r2
 800178e:	00db      	lsls	r3, r3, #3
 8001790:	440b      	add	r3, r1
 8001792:	3301      	adds	r3, #1
 8001794:	2201      	movs	r2, #1
 8001796:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001798:	7bfb      	ldrb	r3, [r7, #15]
 800179a:	6879      	ldr	r1, [r7, #4]
 800179c:	1c5a      	adds	r2, r3, #1
 800179e:	4613      	mov	r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	4413      	add	r3, r2
 80017a4:	00db      	lsls	r3, r3, #3
 80017a6:	440b      	add	r3, r1
 80017a8:	7bfa      	ldrb	r2, [r7, #15]
 80017aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80017ac:	7bfa      	ldrb	r2, [r7, #15]
 80017ae:	7bfb      	ldrb	r3, [r7, #15]
 80017b0:	b298      	uxth	r0, r3
 80017b2:	6879      	ldr	r1, [r7, #4]
 80017b4:	4613      	mov	r3, r2
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	4413      	add	r3, r2
 80017ba:	00db      	lsls	r3, r3, #3
 80017bc:	440b      	add	r3, r1
 80017be:	3336      	adds	r3, #54	; 0x36
 80017c0:	4602      	mov	r2, r0
 80017c2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80017c4:	7bfb      	ldrb	r3, [r7, #15]
 80017c6:	6879      	ldr	r1, [r7, #4]
 80017c8:	1c5a      	adds	r2, r3, #1
 80017ca:	4613      	mov	r3, r2
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	4413      	add	r3, r2
 80017d0:	00db      	lsls	r3, r3, #3
 80017d2:	440b      	add	r3, r1
 80017d4:	3303      	adds	r3, #3
 80017d6:	2200      	movs	r2, #0
 80017d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80017da:	7bfa      	ldrb	r2, [r7, #15]
 80017dc:	6879      	ldr	r1, [r7, #4]
 80017de:	4613      	mov	r3, r2
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	4413      	add	r3, r2
 80017e4:	00db      	lsls	r3, r3, #3
 80017e6:	440b      	add	r3, r1
 80017e8:	3338      	adds	r3, #56	; 0x38
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80017ee:	7bfa      	ldrb	r2, [r7, #15]
 80017f0:	6879      	ldr	r1, [r7, #4]
 80017f2:	4613      	mov	r3, r2
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	4413      	add	r3, r2
 80017f8:	00db      	lsls	r3, r3, #3
 80017fa:	440b      	add	r3, r1
 80017fc:	333c      	adds	r3, #60	; 0x3c
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001802:	7bfa      	ldrb	r2, [r7, #15]
 8001804:	6879      	ldr	r1, [r7, #4]
 8001806:	4613      	mov	r3, r2
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	4413      	add	r3, r2
 800180c:	00db      	lsls	r3, r3, #3
 800180e:	440b      	add	r3, r1
 8001810:	3340      	adds	r3, #64	; 0x40
 8001812:	2200      	movs	r2, #0
 8001814:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001816:	7bfb      	ldrb	r3, [r7, #15]
 8001818:	3301      	adds	r3, #1
 800181a:	73fb      	strb	r3, [r7, #15]
 800181c:	7bfa      	ldrb	r2, [r7, #15]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	429a      	cmp	r2, r3
 8001824:	d3ad      	bcc.n	8001782 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001826:	2300      	movs	r3, #0
 8001828:	73fb      	strb	r3, [r7, #15]
 800182a:	e044      	b.n	80018b6 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800182c:	7bfa      	ldrb	r2, [r7, #15]
 800182e:	6879      	ldr	r1, [r7, #4]
 8001830:	4613      	mov	r3, r2
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	4413      	add	r3, r2
 8001836:	00db      	lsls	r3, r3, #3
 8001838:	440b      	add	r3, r1
 800183a:	f203 1369 	addw	r3, r3, #361	; 0x169
 800183e:	2200      	movs	r2, #0
 8001840:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001842:	7bfa      	ldrb	r2, [r7, #15]
 8001844:	6879      	ldr	r1, [r7, #4]
 8001846:	4613      	mov	r3, r2
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	4413      	add	r3, r2
 800184c:	00db      	lsls	r3, r3, #3
 800184e:	440b      	add	r3, r1
 8001850:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001854:	7bfa      	ldrb	r2, [r7, #15]
 8001856:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001858:	7bfa      	ldrb	r2, [r7, #15]
 800185a:	6879      	ldr	r1, [r7, #4]
 800185c:	4613      	mov	r3, r2
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	4413      	add	r3, r2
 8001862:	00db      	lsls	r3, r3, #3
 8001864:	440b      	add	r3, r1
 8001866:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800186a:	2200      	movs	r2, #0
 800186c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800186e:	7bfa      	ldrb	r2, [r7, #15]
 8001870:	6879      	ldr	r1, [r7, #4]
 8001872:	4613      	mov	r3, r2
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	4413      	add	r3, r2
 8001878:	00db      	lsls	r3, r3, #3
 800187a:	440b      	add	r3, r1
 800187c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001884:	7bfa      	ldrb	r2, [r7, #15]
 8001886:	6879      	ldr	r1, [r7, #4]
 8001888:	4613      	mov	r3, r2
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	4413      	add	r3, r2
 800188e:	00db      	lsls	r3, r3, #3
 8001890:	440b      	add	r3, r1
 8001892:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001896:	2200      	movs	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800189a:	7bfa      	ldrb	r2, [r7, #15]
 800189c:	6879      	ldr	r1, [r7, #4]
 800189e:	4613      	mov	r3, r2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	4413      	add	r3, r2
 80018a4:	00db      	lsls	r3, r3, #3
 80018a6:	440b      	add	r3, r1
 80018a8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018b0:	7bfb      	ldrb	r3, [r7, #15]
 80018b2:	3301      	adds	r3, #1
 80018b4:	73fb      	strb	r3, [r7, #15]
 80018b6:	7bfa      	ldrb	r2, [r7, #15]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d3b5      	bcc.n	800182c <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	603b      	str	r3, [r7, #0]
 80018c6:	687e      	ldr	r6, [r7, #4]
 80018c8:	466d      	mov	r5, sp
 80018ca:	f106 0410 	add.w	r4, r6, #16
 80018ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018d2:	6823      	ldr	r3, [r4, #0]
 80018d4:	602b      	str	r3, [r5, #0]
 80018d6:	1d33      	adds	r3, r6, #4
 80018d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018da:	6838      	ldr	r0, [r7, #0]
 80018dc:	f002 f98a 	bl	8003bf4 <USB_DevInit>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d005      	beq.n	80018f2 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2202      	movs	r2, #2
 80018ea:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e00d      	b.n	800190e <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2200      	movs	r2, #0
 80018f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2201      	movs	r2, #1
 80018fe:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4618      	mov	r0, r3
 8001908:	f004 fafb 	bl	8005f02 <USB_DevDisconnect>

  return HAL_OK;
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	3714      	adds	r7, #20
 8001912:	46bd      	mov	sp, r7
 8001914:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001916 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	b082      	sub	sp, #8
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001924:	2b01      	cmp	r3, #1
 8001926:	d101      	bne.n	800192c <HAL_PCD_Start+0x16>
 8001928:	2302      	movs	r3, #2
 800192a:	e016      	b.n	800195a <HAL_PCD_Start+0x44>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2201      	movs	r2, #1
 8001930:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4618      	mov	r0, r3
 800193a:	f002 f91f 	bl	8003b7c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800193e:	2101      	movs	r1, #1
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f006 f92e 	bl	8007ba2 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4618      	mov	r0, r3
 800194c:	f004 facf 	bl	8005eee <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2200      	movs	r2, #0
 8001954:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b088      	sub	sp, #32
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4618      	mov	r0, r3
 8001970:	f004 fad1 	bl	8005f16 <USB_ReadInterrupts>
 8001974:	4603      	mov	r3, r0
 8001976:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800197a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800197e:	d102      	bne.n	8001986 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f000 fb4a 	bl	800201a <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4618      	mov	r0, r3
 800198c:	f004 fac3 	bl	8005f16 <USB_ReadInterrupts>
 8001990:	4603      	mov	r3, r0
 8001992:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001996:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800199a:	d112      	bne.n	80019c2 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019a4:	b29a      	uxth	r2, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019ae:	b292      	uxth	r2, r2
 80019b0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f005 ff20 	bl	80077fa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80019ba:	2100      	movs	r1, #0
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f000 f925 	bl	8001c0c <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f004 faa5 	bl	8005f16 <USB_ReadInterrupts>
 80019cc:	4603      	mov	r3, r0
 80019ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80019d6:	d10b      	bne.n	80019f0 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019e0:	b29a      	uxth	r2, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80019ea:	b292      	uxth	r2, r2
 80019ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f004 fa8e 	bl	8005f16 <USB_ReadInterrupts>
 80019fa:	4603      	mov	r3, r0
 80019fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a04:	d10b      	bne.n	8001a1e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a0e:	b29a      	uxth	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a18:	b292      	uxth	r2, r2
 8001a1a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4618      	mov	r0, r3
 8001a24:	f004 fa77 	bl	8005f16 <USB_ReadInterrupts>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a32:	d126      	bne.n	8001a82 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001a3c:	b29a      	uxth	r2, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f022 0204 	bic.w	r2, r2, #4
 8001a46:	b292      	uxth	r2, r2
 8001a48:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001a54:	b29a      	uxth	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f022 0208 	bic.w	r2, r2, #8
 8001a5e:	b292      	uxth	r2, r2
 8001a60:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f005 ff01 	bl	800786c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a72:	b29a      	uxth	r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001a7c:	b292      	uxth	r2, r2
 8001a7e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f004 fa45 	bl	8005f16 <USB_ReadInterrupts>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a96:	f040 8084 	bne.w	8001ba2 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	77fb      	strb	r3, [r7, #31]
 8001a9e:	e011      	b.n	8001ac4 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	7ffb      	ldrb	r3, [r7, #31]
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	441a      	add	r2, r3
 8001aac:	7ffb      	ldrb	r3, [r7, #31]
 8001aae:	8812      	ldrh	r2, [r2, #0]
 8001ab0:	b292      	uxth	r2, r2
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	f107 0120 	add.w	r1, r7, #32
 8001ab8:	440b      	add	r3, r1
 8001aba:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001abe:	7ffb      	ldrb	r3, [r7, #31]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	77fb      	strb	r3, [r7, #31]
 8001ac4:	7ffb      	ldrb	r3, [r7, #31]
 8001ac6:	2b07      	cmp	r3, #7
 8001ac8:	d9ea      	bls.n	8001aa0 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ad2:	b29a      	uxth	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f042 0201 	orr.w	r2, r2, #1
 8001adc:	b292      	uxth	r2, r2
 8001ade:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001aea:	b29a      	uxth	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f022 0201 	bic.w	r2, r2, #1
 8001af4:	b292      	uxth	r2, r2
 8001af6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001afa:	bf00      	nop
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d0f6      	beq.n	8001afc <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b16:	b29a      	uxth	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b20:	b292      	uxth	r2, r2
 8001b22:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001b26:	2300      	movs	r3, #0
 8001b28:	77fb      	strb	r3, [r7, #31]
 8001b2a:	e010      	b.n	8001b4e <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001b2c:	7ffb      	ldrb	r3, [r7, #31]
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	6812      	ldr	r2, [r2, #0]
 8001b32:	4611      	mov	r1, r2
 8001b34:	7ffa      	ldrb	r2, [r7, #31]
 8001b36:	0092      	lsls	r2, r2, #2
 8001b38:	440a      	add	r2, r1
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	f107 0120 	add.w	r1, r7, #32
 8001b40:	440b      	add	r3, r1
 8001b42:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001b46:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001b48:	7ffb      	ldrb	r3, [r7, #31]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	77fb      	strb	r3, [r7, #31]
 8001b4e:	7ffb      	ldrb	r3, [r7, #31]
 8001b50:	2b07      	cmp	r3, #7
 8001b52:	d9eb      	bls.n	8001b2c <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b5c:	b29a      	uxth	r2, r3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f042 0208 	orr.w	r2, r2, #8
 8001b66:	b292      	uxth	r2, r2
 8001b68:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b74:	b29a      	uxth	r2, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b7e:	b292      	uxth	r2, r2
 8001b80:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b8c:	b29a      	uxth	r2, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f042 0204 	orr.w	r2, r2, #4
 8001b96:	b292      	uxth	r2, r2
 8001b98:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f005 fe4b 	bl	8007838 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f004 f9b5 	bl	8005f16 <USB_ReadInterrupts>
 8001bac:	4603      	mov	r3, r0
 8001bae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bb6:	d10e      	bne.n	8001bd6 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bc0:	b29a      	uxth	r2, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001bca:	b292      	uxth	r2, r2
 8001bcc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f005 fe04 	bl	80077de <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f004 f99b 	bl	8005f16 <USB_ReadInterrupts>
 8001be0:	4603      	mov	r3, r0
 8001be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001be6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bea:	d10b      	bne.n	8001c04 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bf4:	b29a      	uxth	r2, r3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bfe:	b292      	uxth	r2, r2
 8001c00:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001c04:	bf00      	nop
 8001c06:	3720      	adds	r7, #32
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	460b      	mov	r3, r1
 8001c16:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d101      	bne.n	8001c26 <HAL_PCD_SetAddress+0x1a>
 8001c22:	2302      	movs	r3, #2
 8001c24:	e013      	b.n	8001c4e <HAL_PCD_SetAddress+0x42>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2201      	movs	r2, #1
 8001c2a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	78fa      	ldrb	r2, [r7, #3]
 8001c32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	78fa      	ldrb	r2, [r7, #3]
 8001c3c:	4611      	mov	r1, r2
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f004 f942 	bl	8005ec8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b084      	sub	sp, #16
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
 8001c5e:	4608      	mov	r0, r1
 8001c60:	4611      	mov	r1, r2
 8001c62:	461a      	mov	r2, r3
 8001c64:	4603      	mov	r3, r0
 8001c66:	70fb      	strb	r3, [r7, #3]
 8001c68:	460b      	mov	r3, r1
 8001c6a:	803b      	strh	r3, [r7, #0]
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001c70:	2300      	movs	r3, #0
 8001c72:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	da0e      	bge.n	8001c9a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c7c:	78fb      	ldrb	r3, [r7, #3]
 8001c7e:	f003 0307 	and.w	r3, r3, #7
 8001c82:	1c5a      	adds	r2, r3, #1
 8001c84:	4613      	mov	r3, r2
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	4413      	add	r3, r2
 8001c8a:	00db      	lsls	r3, r3, #3
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	4413      	add	r3, r2
 8001c90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2201      	movs	r2, #1
 8001c96:	705a      	strb	r2, [r3, #1]
 8001c98:	e00e      	b.n	8001cb8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c9a:	78fb      	ldrb	r3, [r7, #3]
 8001c9c:	f003 0207 	and.w	r2, r3, #7
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	4413      	add	r3, r2
 8001ca6:	00db      	lsls	r3, r3, #3
 8001ca8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	4413      	add	r3, r2
 8001cb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001cb8:	78fb      	ldrb	r3, [r7, #3]
 8001cba:	f003 0307 	and.w	r3, r3, #7
 8001cbe:	b2da      	uxtb	r2, r3
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001cc4:	883a      	ldrh	r2, [r7, #0]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	78ba      	ldrb	r2, [r7, #2]
 8001cce:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	785b      	ldrb	r3, [r3, #1]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d004      	beq.n	8001ce2 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	b29a      	uxth	r2, r3
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001ce2:	78bb      	ldrb	r3, [r7, #2]
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d102      	bne.n	8001cee <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2200      	movs	r2, #0
 8001cec:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d101      	bne.n	8001cfc <HAL_PCD_EP_Open+0xa6>
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	e00e      	b.n	8001d1a <HAL_PCD_EP_Open+0xc4>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	68f9      	ldr	r1, [r7, #12]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f001 ff92 	bl	8003c34 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2200      	movs	r2, #0
 8001d14:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001d18:	7afb      	ldrb	r3, [r7, #11]
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3710      	adds	r7, #16
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b084      	sub	sp, #16
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	da0e      	bge.n	8001d54 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d36:	78fb      	ldrb	r3, [r7, #3]
 8001d38:	f003 0307 	and.w	r3, r3, #7
 8001d3c:	1c5a      	adds	r2, r3, #1
 8001d3e:	4613      	mov	r3, r2
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	4413      	add	r3, r2
 8001d44:	00db      	lsls	r3, r3, #3
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	4413      	add	r3, r2
 8001d4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	705a      	strb	r2, [r3, #1]
 8001d52:	e00e      	b.n	8001d72 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d54:	78fb      	ldrb	r3, [r7, #3]
 8001d56:	f003 0207 	and.w	r2, r3, #7
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	4413      	add	r3, r2
 8001d60:	00db      	lsls	r3, r3, #3
 8001d62:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	4413      	add	r3, r2
 8001d6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001d72:	78fb      	ldrb	r3, [r7, #3]
 8001d74:	f003 0307 	and.w	r3, r3, #7
 8001d78:	b2da      	uxtb	r2, r3
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d101      	bne.n	8001d8c <HAL_PCD_EP_Close+0x6a>
 8001d88:	2302      	movs	r3, #2
 8001d8a:	e00e      	b.n	8001daa <HAL_PCD_EP_Close+0x88>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	68f9      	ldr	r1, [r7, #12]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f002 fab4 	bl	8004308 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3710      	adds	r7, #16
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b086      	sub	sp, #24
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	60f8      	str	r0, [r7, #12]
 8001dba:	607a      	str	r2, [r7, #4]
 8001dbc:	603b      	str	r3, [r7, #0]
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dc2:	7afb      	ldrb	r3, [r7, #11]
 8001dc4:	f003 0207 	and.w	r2, r3, #7
 8001dc8:	4613      	mov	r3, r2
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	4413      	add	r3, r2
 8001dce:	00db      	lsls	r3, r3, #3
 8001dd0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001dd4:	68fa      	ldr	r2, [r7, #12]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	683a      	ldr	r2, [r7, #0]
 8001de4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	2200      	movs	r2, #0
 8001dea:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	2200      	movs	r2, #0
 8001df0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001df2:	7afb      	ldrb	r3, [r7, #11]
 8001df4:	f003 0307 	and.w	r3, r3, #7
 8001df8:	b2da      	uxtb	r2, r3
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001dfe:	7afb      	ldrb	r3, [r7, #11]
 8001e00:	f003 0307 	and.w	r3, r3, #7
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d106      	bne.n	8001e16 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	6979      	ldr	r1, [r7, #20]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f002 fc66 	bl	80046e0 <USB_EPStartXfer>
 8001e14:	e005      	b.n	8001e22 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	6979      	ldr	r1, [r7, #20]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f002 fc5f 	bl	80046e0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001e22:	2300      	movs	r3, #0
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3718      	adds	r7, #24
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	607a      	str	r2, [r7, #4]
 8001e36:	603b      	str	r3, [r7, #0]
 8001e38:	460b      	mov	r3, r1
 8001e3a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e3c:	7afb      	ldrb	r3, [r7, #11]
 8001e3e:	f003 0307 	and.w	r3, r3, #7
 8001e42:	1c5a      	adds	r2, r3, #1
 8001e44:	4613      	mov	r3, r2
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	4413      	add	r3, r2
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	68fa      	ldr	r2, [r7, #12]
 8001e4e:	4413      	add	r3, r2
 8001e50:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	683a      	ldr	r2, [r7, #0]
 8001e5c:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	2201      	movs	r2, #1
 8001e62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	683a      	ldr	r2, [r7, #0]
 8001e6a:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	2201      	movs	r2, #1
 8001e76:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e78:	7afb      	ldrb	r3, [r7, #11]
 8001e7a:	f003 0307 	and.w	r3, r3, #7
 8001e7e:	b2da      	uxtb	r2, r3
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e84:	7afb      	ldrb	r3, [r7, #11]
 8001e86:	f003 0307 	and.w	r3, r3, #7
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d106      	bne.n	8001e9c <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	6979      	ldr	r1, [r7, #20]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f002 fc23 	bl	80046e0 <USB_EPStartXfer>
 8001e9a:	e005      	b.n	8001ea8 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	6979      	ldr	r1, [r7, #20]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f002 fc1c 	bl	80046e0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3718      	adds	r7, #24
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b084      	sub	sp, #16
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
 8001eba:	460b      	mov	r3, r1
 8001ebc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001ebe:	78fb      	ldrb	r3, [r7, #3]
 8001ec0:	f003 0207 	and.w	r2, r3, #7
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d901      	bls.n	8001ed0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e04c      	b.n	8001f6a <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ed0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	da0e      	bge.n	8001ef6 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ed8:	78fb      	ldrb	r3, [r7, #3]
 8001eda:	f003 0307 	and.w	r3, r3, #7
 8001ede:	1c5a      	adds	r2, r3, #1
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	4413      	add	r3, r2
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	4413      	add	r3, r2
 8001eec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	705a      	strb	r2, [r3, #1]
 8001ef4:	e00c      	b.n	8001f10 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001ef6:	78fa      	ldrb	r2, [r7, #3]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	4413      	add	r3, r2
 8001efe:	00db      	lsls	r3, r3, #3
 8001f00:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	4413      	add	r3, r2
 8001f08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2201      	movs	r2, #1
 8001f14:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f16:	78fb      	ldrb	r3, [r7, #3]
 8001f18:	f003 0307 	and.w	r3, r3, #7
 8001f1c:	b2da      	uxtb	r2, r3
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d101      	bne.n	8001f30 <HAL_PCD_EP_SetStall+0x7e>
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	e01c      	b.n	8001f6a <HAL_PCD_EP_SetStall+0xb8>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	68f9      	ldr	r1, [r7, #12]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f003 fec5 	bl	8005cce <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f44:	78fb      	ldrb	r3, [r7, #3]
 8001f46:	f003 0307 	and.w	r3, r3, #7
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d108      	bne.n	8001f60 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001f58:	4619      	mov	r1, r3
 8001f5a:	4610      	mov	r0, r2
 8001f5c:	f003 ffea 	bl	8005f34 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b084      	sub	sp, #16
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001f7e:	78fb      	ldrb	r3, [r7, #3]
 8001f80:	f003 020f 	and.w	r2, r3, #15
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d901      	bls.n	8001f90 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e040      	b.n	8002012 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	da0e      	bge.n	8001fb6 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f98:	78fb      	ldrb	r3, [r7, #3]
 8001f9a:	f003 0307 	and.w	r3, r3, #7
 8001f9e:	1c5a      	adds	r2, r3, #1
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	4413      	add	r3, r2
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	4413      	add	r3, r2
 8001fac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	705a      	strb	r2, [r3, #1]
 8001fb4:	e00e      	b.n	8001fd4 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fb6:	78fb      	ldrb	r3, [r7, #3]
 8001fb8:	f003 0207 	and.w	r2, r3, #7
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	4413      	add	r3, r2
 8001fc2:	00db      	lsls	r3, r3, #3
 8001fc4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	4413      	add	r3, r2
 8001fcc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fda:	78fb      	ldrb	r3, [r7, #3]
 8001fdc:	f003 0307 	and.w	r3, r3, #7
 8001fe0:	b2da      	uxtb	r2, r3
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d101      	bne.n	8001ff4 <HAL_PCD_EP_ClrStall+0x82>
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	e00e      	b.n	8002012 <HAL_PCD_EP_ClrStall+0xa0>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	68f9      	ldr	r1, [r7, #12]
 8002002:	4618      	mov	r0, r3
 8002004:	f003 feb3 	bl	8005d6e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3710      	adds	r7, #16
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800201a:	b580      	push	{r7, lr}
 800201c:	b08e      	sub	sp, #56	; 0x38
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002022:	e2ec      	b.n	80025fe <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800202c:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800202e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002030:	b2db      	uxtb	r3, r3
 8002032:	f003 030f 	and.w	r3, r3, #15
 8002036:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800203a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800203e:	2b00      	cmp	r3, #0
 8002040:	f040 8161 	bne.w	8002306 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002044:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002046:	f003 0310 	and.w	r3, r3, #16
 800204a:	2b00      	cmp	r3, #0
 800204c:	d152      	bne.n	80020f4 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	881b      	ldrh	r3, [r3, #0]
 8002054:	b29b      	uxth	r3, r3
 8002056:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800205a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800205e:	81fb      	strh	r3, [r7, #14]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	89fb      	ldrh	r3, [r7, #14]
 8002066:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800206a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800206e:	b29b      	uxth	r3, r3
 8002070:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	3328      	adds	r3, #40	; 0x28
 8002076:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002080:	b29b      	uxth	r3, r3
 8002082:	461a      	mov	r2, r3
 8002084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	00db      	lsls	r3, r3, #3
 800208a:	4413      	add	r3, r2
 800208c:	3302      	adds	r3, #2
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	6812      	ldr	r2, [r2, #0]
 8002094:	4413      	add	r3, r2
 8002096:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800209a:	881b      	ldrh	r3, [r3, #0]
 800209c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80020a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80020a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a6:	695a      	ldr	r2, [r3, #20]
 80020a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020aa:	69db      	ldr	r3, [r3, #28]
 80020ac:	441a      	add	r2, r3
 80020ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80020b2:	2100      	movs	r1, #0
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f005 fb78 	bl	80077aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	f000 829b 	beq.w	80025fe <PCD_EP_ISR_Handler+0x5e4>
 80020c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	f040 8296 	bne.w	80025fe <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80020de:	b2da      	uxtb	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	b292      	uxth	r2, r2
 80020e6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80020f2:	e284      	b.n	80025fe <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80020fa:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	881b      	ldrh	r3, [r3, #0]
 8002102:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002104:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002106:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800210a:	2b00      	cmp	r3, #0
 800210c:	d034      	beq.n	8002178 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002116:	b29b      	uxth	r3, r3
 8002118:	461a      	mov	r2, r3
 800211a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	4413      	add	r3, r2
 8002122:	3306      	adds	r3, #6
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	6812      	ldr	r2, [r2, #0]
 800212a:	4413      	add	r3, r2
 800212c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002130:	881b      	ldrh	r3, [r3, #0]
 8002132:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002138:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6818      	ldr	r0, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002146:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800214c:	b29b      	uxth	r3, r3
 800214e:	f003 ff41 	bl	8005fd4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	881b      	ldrh	r3, [r3, #0]
 8002158:	b29a      	uxth	r2, r3
 800215a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800215e:	4013      	ands	r3, r2
 8002160:	823b      	strh	r3, [r7, #16]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	8a3a      	ldrh	r2, [r7, #16]
 8002168:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800216c:	b292      	uxth	r2, r2
 800216e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f005 faed 	bl	8007750 <HAL_PCD_SetupStageCallback>
 8002176:	e242      	b.n	80025fe <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002178:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800217c:	2b00      	cmp	r3, #0
 800217e:	f280 823e 	bge.w	80025fe <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	881b      	ldrh	r3, [r3, #0]
 8002188:	b29a      	uxth	r2, r3
 800218a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800218e:	4013      	ands	r3, r2
 8002190:	83bb      	strh	r3, [r7, #28]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	8bba      	ldrh	r2, [r7, #28]
 8002198:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800219c:	b292      	uxth	r2, r2
 800219e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	461a      	mov	r2, r3
 80021ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	00db      	lsls	r3, r3, #3
 80021b2:	4413      	add	r3, r2
 80021b4:	3306      	adds	r3, #6
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	6812      	ldr	r2, [r2, #0]
 80021bc:	4413      	add	r3, r2
 80021be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021c2:	881b      	ldrh	r3, [r3, #0]
 80021c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80021c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ca:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80021cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ce:	69db      	ldr	r3, [r3, #28]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d019      	beq.n	8002208 <PCD_EP_ISR_Handler+0x1ee>
 80021d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d6:	695b      	ldr	r3, [r3, #20]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d015      	beq.n	8002208 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6818      	ldr	r0, [r3, #0]
 80021e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e2:	6959      	ldr	r1, [r3, #20]
 80021e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80021e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ea:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	f003 fef1 	bl	8005fd4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80021f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f4:	695a      	ldr	r2, [r3, #20]
 80021f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f8:	69db      	ldr	r3, [r3, #28]
 80021fa:	441a      	add	r2, r3
 80021fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fe:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002200:	2100      	movs	r1, #0
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f005 fab6 	bl	8007774 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	881b      	ldrh	r3, [r3, #0]
 800220e:	b29b      	uxth	r3, r3
 8002210:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002214:	2b00      	cmp	r3, #0
 8002216:	f040 81f2 	bne.w	80025fe <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	61bb      	str	r3, [r7, #24]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002228:	b29b      	uxth	r3, r3
 800222a:	461a      	mov	r2, r3
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	4413      	add	r3, r2
 8002230:	61bb      	str	r3, [r7, #24]
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002238:	617b      	str	r3, [r7, #20]
 800223a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d112      	bne.n	8002268 <PCD_EP_ISR_Handler+0x24e>
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	881b      	ldrh	r3, [r3, #0]
 8002246:	b29b      	uxth	r3, r3
 8002248:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800224c:	b29a      	uxth	r2, r3
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	801a      	strh	r2, [r3, #0]
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	881b      	ldrh	r3, [r3, #0]
 8002256:	b29b      	uxth	r3, r3
 8002258:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800225c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002260:	b29a      	uxth	r2, r3
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	801a      	strh	r2, [r3, #0]
 8002266:	e02f      	b.n	80022c8 <PCD_EP_ISR_Handler+0x2ae>
 8002268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226a:	691b      	ldr	r3, [r3, #16]
 800226c:	2b3e      	cmp	r3, #62	; 0x3e
 800226e:	d813      	bhi.n	8002298 <PCD_EP_ISR_Handler+0x27e>
 8002270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002272:	691b      	ldr	r3, [r3, #16]
 8002274:	085b      	lsrs	r3, r3, #1
 8002276:	633b      	str	r3, [r7, #48]	; 0x30
 8002278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227a:	691b      	ldr	r3, [r3, #16]
 800227c:	f003 0301 	and.w	r3, r3, #1
 8002280:	2b00      	cmp	r3, #0
 8002282:	d002      	beq.n	800228a <PCD_EP_ISR_Handler+0x270>
 8002284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002286:	3301      	adds	r3, #1
 8002288:	633b      	str	r3, [r7, #48]	; 0x30
 800228a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800228c:	b29b      	uxth	r3, r3
 800228e:	029b      	lsls	r3, r3, #10
 8002290:	b29a      	uxth	r2, r3
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	801a      	strh	r2, [r3, #0]
 8002296:	e017      	b.n	80022c8 <PCD_EP_ISR_Handler+0x2ae>
 8002298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229a:	691b      	ldr	r3, [r3, #16]
 800229c:	095b      	lsrs	r3, r3, #5
 800229e:	633b      	str	r3, [r7, #48]	; 0x30
 80022a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a2:	691b      	ldr	r3, [r3, #16]
 80022a4:	f003 031f 	and.w	r3, r3, #31
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d102      	bne.n	80022b2 <PCD_EP_ISR_Handler+0x298>
 80022ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ae:	3b01      	subs	r3, #1
 80022b0:	633b      	str	r3, [r7, #48]	; 0x30
 80022b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	029b      	lsls	r3, r3, #10
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022c2:	b29a      	uxth	r2, r3
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	881b      	ldrh	r3, [r3, #0]
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022d8:	827b      	strh	r3, [r7, #18]
 80022da:	8a7b      	ldrh	r3, [r7, #18]
 80022dc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80022e0:	827b      	strh	r3, [r7, #18]
 80022e2:	8a7b      	ldrh	r3, [r7, #18]
 80022e4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80022e8:	827b      	strh	r3, [r7, #18]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	8a7b      	ldrh	r3, [r7, #18]
 80022f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002300:	b29b      	uxth	r3, r3
 8002302:	8013      	strh	r3, [r2, #0]
 8002304:	e17b      	b.n	80025fe <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	461a      	mov	r2, r3
 800230c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	4413      	add	r3, r2
 8002314:	881b      	ldrh	r3, [r3, #0]
 8002316:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002318:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800231c:	2b00      	cmp	r3, #0
 800231e:	f280 80ea 	bge.w	80024f6 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	461a      	mov	r2, r3
 8002328:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	4413      	add	r3, r2
 8002330:	881b      	ldrh	r3, [r3, #0]
 8002332:	b29a      	uxth	r2, r3
 8002334:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002338:	4013      	ands	r3, r2
 800233a:	853b      	strh	r3, [r7, #40]	; 0x28
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	461a      	mov	r2, r3
 8002342:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	4413      	add	r3, r2
 800234a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800234c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002350:	b292      	uxth	r2, r2
 8002352:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002354:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002358:	4613      	mov	r3, r2
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	4413      	add	r3, r2
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	4413      	add	r3, r2
 8002368:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800236a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236c:	7b1b      	ldrb	r3, [r3, #12]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d122      	bne.n	80023b8 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800237a:	b29b      	uxth	r3, r3
 800237c:	461a      	mov	r2, r3
 800237e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	00db      	lsls	r3, r3, #3
 8002384:	4413      	add	r3, r2
 8002386:	3306      	adds	r3, #6
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	6812      	ldr	r2, [r2, #0]
 800238e:	4413      	add	r3, r2
 8002390:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002394:	881b      	ldrh	r3, [r3, #0]
 8002396:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800239a:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800239c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800239e:	2b00      	cmp	r3, #0
 80023a0:	f000 8087 	beq.w	80024b2 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6818      	ldr	r0, [r3, #0]
 80023a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023aa:	6959      	ldr	r1, [r3, #20]
 80023ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ae:	88da      	ldrh	r2, [r3, #6]
 80023b0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80023b2:	f003 fe0f 	bl	8005fd4 <USB_ReadPMA>
 80023b6:	e07c      	b.n	80024b2 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80023b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ba:	78db      	ldrb	r3, [r3, #3]
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d108      	bne.n	80023d2 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80023c0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80023c2:	461a      	mov	r2, r3
 80023c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f000 f927 	bl	800261a <HAL_PCD_EP_DB_Receive>
 80023cc:	4603      	mov	r3, r0
 80023ce:	86fb      	strh	r3, [r7, #54]	; 0x36
 80023d0:	e06f      	b.n	80024b2 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	461a      	mov	r2, r3
 80023d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	4413      	add	r3, r2
 80023e0:	881b      	ldrh	r3, [r3, #0]
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023ec:	847b      	strh	r3, [r7, #34]	; 0x22
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	461a      	mov	r2, r3
 80023f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	441a      	add	r2, r3
 80023fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80023fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002402:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002406:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800240a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800240e:	b29b      	uxth	r3, r3
 8002410:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	461a      	mov	r2, r3
 8002418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	4413      	add	r3, r2
 8002420:	881b      	ldrh	r3, [r3, #0]
 8002422:	b29b      	uxth	r3, r3
 8002424:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d021      	beq.n	8002470 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002434:	b29b      	uxth	r3, r3
 8002436:	461a      	mov	r2, r3
 8002438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	00db      	lsls	r3, r3, #3
 800243e:	4413      	add	r3, r2
 8002440:	3302      	adds	r3, #2
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	6812      	ldr	r2, [r2, #0]
 8002448:	4413      	add	r3, r2
 800244a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800244e:	881b      	ldrh	r3, [r3, #0]
 8002450:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002454:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002456:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002458:	2b00      	cmp	r3, #0
 800245a:	d02a      	beq.n	80024b2 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6818      	ldr	r0, [r3, #0]
 8002460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002462:	6959      	ldr	r1, [r3, #20]
 8002464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002466:	891a      	ldrh	r2, [r3, #8]
 8002468:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800246a:	f003 fdb3 	bl	8005fd4 <USB_ReadPMA>
 800246e:	e020      	b.n	80024b2 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002478:	b29b      	uxth	r3, r3
 800247a:	461a      	mov	r2, r3
 800247c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	00db      	lsls	r3, r3, #3
 8002482:	4413      	add	r3, r2
 8002484:	3306      	adds	r3, #6
 8002486:	005b      	lsls	r3, r3, #1
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	6812      	ldr	r2, [r2, #0]
 800248c:	4413      	add	r3, r2
 800248e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002492:	881b      	ldrh	r3, [r3, #0]
 8002494:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002498:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800249a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800249c:	2b00      	cmp	r3, #0
 800249e:	d008      	beq.n	80024b2 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6818      	ldr	r0, [r3, #0]
 80024a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a6:	6959      	ldr	r1, [r3, #20]
 80024a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024aa:	895a      	ldrh	r2, [r3, #10]
 80024ac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80024ae:	f003 fd91 	bl	8005fd4 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80024b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b4:	69da      	ldr	r2, [r3, #28]
 80024b6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80024b8:	441a      	add	r2, r3
 80024ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024bc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80024be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c0:	695a      	ldr	r2, [r3, #20]
 80024c2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80024c4:	441a      	add	r2, r3
 80024c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c8:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80024ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024cc:	699b      	ldr	r3, [r3, #24]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d004      	beq.n	80024dc <PCD_EP_ISR_Handler+0x4c2>
 80024d2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80024d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d6:	691b      	ldr	r3, [r3, #16]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d206      	bcs.n	80024ea <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80024dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	4619      	mov	r1, r3
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f005 f946 	bl	8007774 <HAL_PCD_DataOutStageCallback>
 80024e8:	e005      	b.n	80024f6 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024f0:	4618      	mov	r0, r3
 80024f2:	f002 f8f5 	bl	80046e0 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80024f6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80024f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d07e      	beq.n	80025fe <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8002500:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002504:	1c5a      	adds	r2, r3, #1
 8002506:	4613      	mov	r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	4413      	add	r3, r2
 800250c:	00db      	lsls	r3, r3, #3
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	4413      	add	r3, r2
 8002512:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	461a      	mov	r2, r3
 800251a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	4413      	add	r3, r2
 8002522:	881b      	ldrh	r3, [r3, #0]
 8002524:	b29b      	uxth	r3, r3
 8002526:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800252a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800252e:	843b      	strh	r3, [r7, #32]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	461a      	mov	r2, r3
 8002536:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	441a      	add	r2, r3
 800253e:	8c3b      	ldrh	r3, [r7, #32]
 8002540:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002544:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002548:	b29b      	uxth	r3, r3
 800254a:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800254c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254e:	78db      	ldrb	r3, [r3, #3]
 8002550:	2b03      	cmp	r3, #3
 8002552:	d00c      	beq.n	800256e <PCD_EP_ISR_Handler+0x554>
 8002554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002556:	78db      	ldrb	r3, [r3, #3]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d008      	beq.n	800256e <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800255c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255e:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002560:	2b02      	cmp	r3, #2
 8002562:	d146      	bne.n	80025f2 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002564:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800256a:	2b00      	cmp	r3, #0
 800256c:	d141      	bne.n	80025f2 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002576:	b29b      	uxth	r3, r3
 8002578:	461a      	mov	r2, r3
 800257a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	00db      	lsls	r3, r3, #3
 8002580:	4413      	add	r3, r2
 8002582:	3302      	adds	r3, #2
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	6812      	ldr	r2, [r2, #0]
 800258a:	4413      	add	r3, r2
 800258c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002590:	881b      	ldrh	r3, [r3, #0]
 8002592:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002596:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259a:	699a      	ldr	r2, [r3, #24]
 800259c:	8bfb      	ldrh	r3, [r7, #30]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d906      	bls.n	80025b0 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80025a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a4:	699a      	ldr	r2, [r3, #24]
 80025a6:	8bfb      	ldrh	r3, [r7, #30]
 80025a8:	1ad2      	subs	r2, r2, r3
 80025aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ac:	619a      	str	r2, [r3, #24]
 80025ae:	e002      	b.n	80025b6 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80025b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b2:	2200      	movs	r2, #0
 80025b4:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80025b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b8:	699b      	ldr	r3, [r3, #24]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d106      	bne.n	80025cc <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80025be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	4619      	mov	r1, r3
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f005 f8f0 	bl	80077aa <HAL_PCD_DataInStageCallback>
 80025ca:	e018      	b.n	80025fe <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80025cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ce:	695a      	ldr	r2, [r3, #20]
 80025d0:	8bfb      	ldrh	r3, [r7, #30]
 80025d2:	441a      	add	r2, r3
 80025d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d6:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80025d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025da:	69da      	ldr	r2, [r3, #28]
 80025dc:	8bfb      	ldrh	r3, [r7, #30]
 80025de:	441a      	add	r2, r3
 80025e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e2:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025ea:	4618      	mov	r0, r3
 80025ec:	f002 f878 	bl	80046e0 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80025f0:	e005      	b.n	80025fe <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80025f2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80025f4:	461a      	mov	r2, r3
 80025f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f000 f91b 	bl	8002834 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002606:	b29b      	uxth	r3, r3
 8002608:	b21b      	sxth	r3, r3
 800260a:	2b00      	cmp	r3, #0
 800260c:	f6ff ad0a 	blt.w	8002024 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3738      	adds	r7, #56	; 0x38
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800261a:	b580      	push	{r7, lr}
 800261c:	b088      	sub	sp, #32
 800261e:	af00      	add	r7, sp, #0
 8002620:	60f8      	str	r0, [r7, #12]
 8002622:	60b9      	str	r1, [r7, #8]
 8002624:	4613      	mov	r3, r2
 8002626:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002628:	88fb      	ldrh	r3, [r7, #6]
 800262a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d07e      	beq.n	8002730 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800263a:	b29b      	uxth	r3, r3
 800263c:	461a      	mov	r2, r3
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	00db      	lsls	r3, r3, #3
 8002644:	4413      	add	r3, r2
 8002646:	3302      	adds	r3, #2
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	68fa      	ldr	r2, [r7, #12]
 800264c:	6812      	ldr	r2, [r2, #0]
 800264e:	4413      	add	r3, r2
 8002650:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002654:	881b      	ldrh	r3, [r3, #0]
 8002656:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800265a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	699a      	ldr	r2, [r3, #24]
 8002660:	8b7b      	ldrh	r3, [r7, #26]
 8002662:	429a      	cmp	r2, r3
 8002664:	d306      	bcc.n	8002674 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	699a      	ldr	r2, [r3, #24]
 800266a:	8b7b      	ldrh	r3, [r7, #26]
 800266c:	1ad2      	subs	r2, r2, r3
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	619a      	str	r2, [r3, #24]
 8002672:	e002      	b.n	800267a <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	2200      	movs	r2, #0
 8002678:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	699b      	ldr	r3, [r3, #24]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d123      	bne.n	80026ca <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	461a      	mov	r2, r3
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	4413      	add	r3, r2
 8002690:	881b      	ldrh	r3, [r3, #0]
 8002692:	b29b      	uxth	r3, r3
 8002694:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002698:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800269c:	833b      	strh	r3, [r7, #24]
 800269e:	8b3b      	ldrh	r3, [r7, #24]
 80026a0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80026a4:	833b      	strh	r3, [r7, #24]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	461a      	mov	r2, r3
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	441a      	add	r2, r3
 80026b4:	8b3b      	ldrh	r3, [r7, #24]
 80026b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80026ca:	88fb      	ldrh	r3, [r7, #6]
 80026cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d01f      	beq.n	8002714 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	461a      	mov	r2, r3
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	4413      	add	r3, r2
 80026e2:	881b      	ldrh	r3, [r3, #0]
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026ee:	82fb      	strh	r3, [r7, #22]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	461a      	mov	r2, r3
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	441a      	add	r2, r3
 80026fe:	8afb      	ldrh	r3, [r7, #22]
 8002700:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002704:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002708:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800270c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002710:	b29b      	uxth	r3, r3
 8002712:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002714:	8b7b      	ldrh	r3, [r7, #26]
 8002716:	2b00      	cmp	r3, #0
 8002718:	f000 8087 	beq.w	800282a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6818      	ldr	r0, [r3, #0]
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	6959      	ldr	r1, [r3, #20]
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	891a      	ldrh	r2, [r3, #8]
 8002728:	8b7b      	ldrh	r3, [r7, #26]
 800272a:	f003 fc53 	bl	8005fd4 <USB_ReadPMA>
 800272e:	e07c      	b.n	800282a <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002738:	b29b      	uxth	r3, r3
 800273a:	461a      	mov	r2, r3
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	00db      	lsls	r3, r3, #3
 8002742:	4413      	add	r3, r2
 8002744:	3306      	adds	r3, #6
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	68fa      	ldr	r2, [r7, #12]
 800274a:	6812      	ldr	r2, [r2, #0]
 800274c:	4413      	add	r3, r2
 800274e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002752:	881b      	ldrh	r3, [r3, #0]
 8002754:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002758:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	699a      	ldr	r2, [r3, #24]
 800275e:	8b7b      	ldrh	r3, [r7, #26]
 8002760:	429a      	cmp	r2, r3
 8002762:	d306      	bcc.n	8002772 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	699a      	ldr	r2, [r3, #24]
 8002768:	8b7b      	ldrh	r3, [r7, #26]
 800276a:	1ad2      	subs	r2, r2, r3
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	619a      	str	r2, [r3, #24]
 8002770:	e002      	b.n	8002778 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	2200      	movs	r2, #0
 8002776:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d123      	bne.n	80027c8 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	461a      	mov	r2, r3
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	4413      	add	r3, r2
 800278e:	881b      	ldrh	r3, [r3, #0]
 8002790:	b29b      	uxth	r3, r3
 8002792:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800279a:	83fb      	strh	r3, [r7, #30]
 800279c:	8bfb      	ldrh	r3, [r7, #30]
 800279e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80027a2:	83fb      	strh	r3, [r7, #30]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	461a      	mov	r2, r3
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	441a      	add	r2, r3
 80027b2:	8bfb      	ldrh	r3, [r7, #30]
 80027b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80027c8:	88fb      	ldrh	r3, [r7, #6]
 80027ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d11f      	bne.n	8002812 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	461a      	mov	r2, r3
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	4413      	add	r3, r2
 80027e0:	881b      	ldrh	r3, [r3, #0]
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027ec:	83bb      	strh	r3, [r7, #28]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	461a      	mov	r2, r3
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	441a      	add	r2, r3
 80027fc:	8bbb      	ldrh	r3, [r7, #28]
 80027fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002802:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002806:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800280a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800280e:	b29b      	uxth	r3, r3
 8002810:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002812:	8b7b      	ldrh	r3, [r7, #26]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d008      	beq.n	800282a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6818      	ldr	r0, [r3, #0]
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	6959      	ldr	r1, [r3, #20]
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	895a      	ldrh	r2, [r3, #10]
 8002824:	8b7b      	ldrh	r3, [r7, #26]
 8002826:	f003 fbd5 	bl	8005fd4 <USB_ReadPMA>
    }
  }

  return count;
 800282a:	8b7b      	ldrh	r3, [r7, #26]
}
 800282c:	4618      	mov	r0, r3
 800282e:	3720      	adds	r7, #32
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b0a2      	sub	sp, #136	; 0x88
 8002838:	af00      	add	r7, sp, #0
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	60b9      	str	r1, [r7, #8]
 800283e:	4613      	mov	r3, r2
 8002840:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002842:	88fb      	ldrh	r3, [r7, #6]
 8002844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002848:	2b00      	cmp	r3, #0
 800284a:	f000 81c7 	beq.w	8002bdc <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002856:	b29b      	uxth	r3, r3
 8002858:	461a      	mov	r2, r3
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	00db      	lsls	r3, r3, #3
 8002860:	4413      	add	r3, r2
 8002862:	3302      	adds	r3, #2
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	6812      	ldr	r2, [r2, #0]
 800286a:	4413      	add	r3, r2
 800286c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002870:	881b      	ldrh	r3, [r3, #0]
 8002872:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002876:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	699a      	ldr	r2, [r3, #24]
 800287e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002882:	429a      	cmp	r2, r3
 8002884:	d907      	bls.n	8002896 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	699a      	ldr	r2, [r3, #24]
 800288a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800288e:	1ad2      	subs	r2, r2, r3
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	619a      	str	r2, [r3, #24]
 8002894:	e002      	b.n	800289c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	2200      	movs	r2, #0
 800289a:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	699b      	ldr	r3, [r3, #24]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f040 80b9 	bne.w	8002a18 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	785b      	ldrb	r3, [r3, #1]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d126      	bne.n	80028fc <HAL_PCD_EP_DB_Transmit+0xc8>
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028bc:	b29b      	uxth	r3, r3
 80028be:	461a      	mov	r2, r3
 80028c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c2:	4413      	add	r3, r2
 80028c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	011a      	lsls	r2, r3, #4
 80028cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ce:	4413      	add	r3, r2
 80028d0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80028d4:	627b      	str	r3, [r7, #36]	; 0x24
 80028d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d8:	881b      	ldrh	r3, [r3, #0]
 80028da:	b29b      	uxth	r3, r3
 80028dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80028e0:	b29a      	uxth	r2, r3
 80028e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e4:	801a      	strh	r2, [r3, #0]
 80028e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e8:	881b      	ldrh	r3, [r3, #0]
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f8:	801a      	strh	r2, [r3, #0]
 80028fa:	e01a      	b.n	8002932 <HAL_PCD_EP_DB_Transmit+0xfe>
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	785b      	ldrb	r3, [r3, #1]
 8002900:	2b01      	cmp	r3, #1
 8002902:	d116      	bne.n	8002932 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	633b      	str	r3, [r7, #48]	; 0x30
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002912:	b29b      	uxth	r3, r3
 8002914:	461a      	mov	r2, r3
 8002916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002918:	4413      	add	r3, r2
 800291a:	633b      	str	r3, [r7, #48]	; 0x30
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	011a      	lsls	r2, r3, #4
 8002922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002924:	4413      	add	r3, r2
 8002926:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800292a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800292c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800292e:	2200      	movs	r2, #0
 8002930:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	623b      	str	r3, [r7, #32]
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	785b      	ldrb	r3, [r3, #1]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d126      	bne.n	800298e <HAL_PCD_EP_DB_Transmit+0x15a>
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	61bb      	str	r3, [r7, #24]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800294e:	b29b      	uxth	r3, r3
 8002950:	461a      	mov	r2, r3
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	4413      	add	r3, r2
 8002956:	61bb      	str	r3, [r7, #24]
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	011a      	lsls	r2, r3, #4
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	4413      	add	r3, r2
 8002962:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002966:	617b      	str	r3, [r7, #20]
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	881b      	ldrh	r3, [r3, #0]
 800296c:	b29b      	uxth	r3, r3
 800296e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002972:	b29a      	uxth	r2, r3
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	801a      	strh	r2, [r3, #0]
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	881b      	ldrh	r3, [r3, #0]
 800297c:	b29b      	uxth	r3, r3
 800297e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002982:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002986:	b29a      	uxth	r2, r3
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	801a      	strh	r2, [r3, #0]
 800298c:	e017      	b.n	80029be <HAL_PCD_EP_DB_Transmit+0x18a>
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	785b      	ldrb	r3, [r3, #1]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d113      	bne.n	80029be <HAL_PCD_EP_DB_Transmit+0x18a>
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800299e:	b29b      	uxth	r3, r3
 80029a0:	461a      	mov	r2, r3
 80029a2:	6a3b      	ldr	r3, [r7, #32]
 80029a4:	4413      	add	r3, r2
 80029a6:	623b      	str	r3, [r7, #32]
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	011a      	lsls	r2, r3, #4
 80029ae:	6a3b      	ldr	r3, [r7, #32]
 80029b0:	4413      	add	r3, r2
 80029b2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80029b6:	61fb      	str	r3, [r7, #28]
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	2200      	movs	r2, #0
 80029bc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	4619      	mov	r1, r3
 80029c4:	68f8      	ldr	r0, [r7, #12]
 80029c6:	f004 fef0 	bl	80077aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80029ca:	88fb      	ldrh	r3, [r7, #6]
 80029cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	f000 82d4 	beq.w	8002f7e <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	461a      	mov	r2, r3
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	4413      	add	r3, r2
 80029e4:	881b      	ldrh	r3, [r3, #0]
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029f0:	827b      	strh	r3, [r7, #18]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	461a      	mov	r2, r3
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	441a      	add	r2, r3
 8002a00:	8a7b      	ldrh	r3, [r7, #18]
 8002a02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a0a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	8013      	strh	r3, [r2, #0]
 8002a16:	e2b2      	b.n	8002f7e <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002a18:	88fb      	ldrh	r3, [r7, #6]
 8002a1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d021      	beq.n	8002a66 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	461a      	mov	r2, r3
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	4413      	add	r3, r2
 8002a30:	881b      	ldrh	r3, [r3, #0]
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a3c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	461a      	mov	r2, r3
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	441a      	add	r2, r3
 8002a4e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002a52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a5a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	f040 8286 	bne.w	8002f7e <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	695a      	ldr	r2, [r3, #20]
 8002a76:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a7a:	441a      	add	r2, r3
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	69da      	ldr	r2, [r3, #28]
 8002a84:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a88:	441a      	add	r2, r3
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	6a1a      	ldr	r2, [r3, #32]
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d309      	bcc.n	8002aae <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	6a1a      	ldr	r2, [r3, #32]
 8002aa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002aa6:	1ad2      	subs	r2, r2, r3
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	621a      	str	r2, [r3, #32]
 8002aac:	e015      	b.n	8002ada <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	6a1b      	ldr	r3, [r3, #32]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d107      	bne.n	8002ac6 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8002ab6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002aba:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002ac4:	e009      	b.n	8002ada <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	6a1b      	ldr	r3, [r3, #32]
 8002ad2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	785b      	ldrb	r3, [r3, #1]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d155      	bne.n	8002b8e <HAL_PCD_EP_DB_Transmit+0x35a>
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	461a      	mov	r2, r3
 8002af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002af6:	4413      	add	r3, r2
 8002af8:	63bb      	str	r3, [r7, #56]	; 0x38
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	011a      	lsls	r2, r3, #4
 8002b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b02:	4413      	add	r3, r2
 8002b04:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002b08:	637b      	str	r3, [r7, #52]	; 0x34
 8002b0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d112      	bne.n	8002b36 <HAL_PCD_EP_DB_Transmit+0x302>
 8002b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b12:	881b      	ldrh	r3, [r3, #0]
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002b1a:	b29a      	uxth	r2, r3
 8002b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b1e:	801a      	strh	r2, [r3, #0]
 8002b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b22:	881b      	ldrh	r3, [r3, #0]
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b2e:	b29a      	uxth	r2, r3
 8002b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b32:	801a      	strh	r2, [r3, #0]
 8002b34:	e047      	b.n	8002bc6 <HAL_PCD_EP_DB_Transmit+0x392>
 8002b36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b38:	2b3e      	cmp	r3, #62	; 0x3e
 8002b3a:	d811      	bhi.n	8002b60 <HAL_PCD_EP_DB_Transmit+0x32c>
 8002b3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b3e:	085b      	lsrs	r3, r3, #1
 8002b40:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b44:	f003 0301 	and.w	r3, r3, #1
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d002      	beq.n	8002b52 <HAL_PCD_EP_DB_Transmit+0x31e>
 8002b4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b4e:	3301      	adds	r3, #1
 8002b50:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	029b      	lsls	r3, r3, #10
 8002b58:	b29a      	uxth	r2, r3
 8002b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b5c:	801a      	strh	r2, [r3, #0]
 8002b5e:	e032      	b.n	8002bc6 <HAL_PCD_EP_DB_Transmit+0x392>
 8002b60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b62:	095b      	lsrs	r3, r3, #5
 8002b64:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b68:	f003 031f 	and.w	r3, r3, #31
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d102      	bne.n	8002b76 <HAL_PCD_EP_DB_Transmit+0x342>
 8002b70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b72:	3b01      	subs	r3, #1
 8002b74:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	029b      	lsls	r3, r3, #10
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b86:	b29a      	uxth	r2, r3
 8002b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b8a:	801a      	strh	r2, [r3, #0]
 8002b8c:	e01b      	b.n	8002bc6 <HAL_PCD_EP_DB_Transmit+0x392>
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	785b      	ldrb	r3, [r3, #1]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d117      	bne.n	8002bc6 <HAL_PCD_EP_DB_Transmit+0x392>
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	643b      	str	r3, [r7, #64]	; 0x40
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002baa:	4413      	add	r3, r2
 8002bac:	643b      	str	r3, [r7, #64]	; 0x40
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	011a      	lsls	r2, r3, #4
 8002bb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bb6:	4413      	add	r3, r2
 8002bb8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bc4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6818      	ldr	r0, [r3, #0]
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	6959      	ldr	r1, [r3, #20]
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	891a      	ldrh	r2, [r3, #8]
 8002bd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	f003 f9b8 	bl	8005f4a <USB_WritePMA>
 8002bda:	e1d0      	b.n	8002f7e <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	461a      	mov	r2, r3
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	00db      	lsls	r3, r3, #3
 8002bee:	4413      	add	r3, r2
 8002bf0:	3306      	adds	r3, #6
 8002bf2:	005b      	lsls	r3, r3, #1
 8002bf4:	68fa      	ldr	r2, [r7, #12]
 8002bf6:	6812      	ldr	r2, [r2, #0]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002bfe:	881b      	ldrh	r3, [r3, #0]
 8002c00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c04:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	699a      	ldr	r2, [r3, #24]
 8002c0c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d307      	bcc.n	8002c24 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	699a      	ldr	r2, [r3, #24]
 8002c18:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c1c:	1ad2      	subs	r2, r2, r3
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	619a      	str	r2, [r3, #24]
 8002c22:	e002      	b.n	8002c2a <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	2200      	movs	r2, #0
 8002c28:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	f040 80c4 	bne.w	8002dbc <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	785b      	ldrb	r3, [r3, #1]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d126      	bne.n	8002c8a <HAL_PCD_EP_DB_Transmit+0x456>
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c50:	4413      	add	r3, r2
 8002c52:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	011a      	lsls	r2, r3, #4
 8002c5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c5c:	4413      	add	r3, r2
 8002c5e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002c62:	66bb      	str	r3, [r7, #104]	; 0x68
 8002c64:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c66:	881b      	ldrh	r3, [r3, #0]
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002c6e:	b29a      	uxth	r2, r3
 8002c70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c72:	801a      	strh	r2, [r3, #0]
 8002c74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c76:	881b      	ldrh	r3, [r3, #0]
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c82:	b29a      	uxth	r2, r3
 8002c84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c86:	801a      	strh	r2, [r3, #0]
 8002c88:	e01a      	b.n	8002cc0 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	785b      	ldrb	r3, [r3, #1]
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d116      	bne.n	8002cc0 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	677b      	str	r3, [r7, #116]	; 0x74
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ca6:	4413      	add	r3, r2
 8002ca8:	677b      	str	r3, [r7, #116]	; 0x74
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	011a      	lsls	r2, r3, #4
 8002cb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cb2:	4413      	add	r3, r2
 8002cb4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002cb8:	673b      	str	r3, [r7, #112]	; 0x70
 8002cba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	67bb      	str	r3, [r7, #120]	; 0x78
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	785b      	ldrb	r3, [r3, #1]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d12f      	bne.n	8002d2e <HAL_PCD_EP_DB_Transmit+0x4fa>
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ce6:	4413      	add	r3, r2
 8002ce8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	011a      	lsls	r2, r3, #4
 8002cf2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002cf6:	4413      	add	r3, r2
 8002cf8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002cfc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002d00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d04:	881b      	ldrh	r3, [r3, #0]
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d0c:	b29a      	uxth	r2, r3
 8002d0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d12:	801a      	strh	r2, [r3, #0]
 8002d14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d18:	881b      	ldrh	r3, [r3, #0]
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d2a:	801a      	strh	r2, [r3, #0]
 8002d2c:	e017      	b.n	8002d5e <HAL_PCD_EP_DB_Transmit+0x52a>
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	785b      	ldrb	r3, [r3, #1]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d113      	bne.n	8002d5e <HAL_PCD_EP_DB_Transmit+0x52a>
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	461a      	mov	r2, r3
 8002d42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d44:	4413      	add	r3, r2
 8002d46:	67bb      	str	r3, [r7, #120]	; 0x78
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	011a      	lsls	r2, r3, #4
 8002d4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d50:	4413      	add	r3, r2
 8002d52:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002d56:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002d58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	4619      	mov	r1, r3
 8002d64:	68f8      	ldr	r0, [r7, #12]
 8002d66:	f004 fd20 	bl	80077aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002d6a:	88fb      	ldrh	r3, [r7, #6]
 8002d6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	f040 8104 	bne.w	8002f7e <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	4413      	add	r3, r2
 8002d84:	881b      	ldrh	r3, [r3, #0]
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d90:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	461a      	mov	r2, r3
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	441a      	add	r2, r3
 8002da2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002da6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002daa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002dae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002db2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	8013      	strh	r3, [r2, #0]
 8002dba:	e0e0      	b.n	8002f7e <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002dbc:	88fb      	ldrh	r3, [r7, #6]
 8002dbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d121      	bne.n	8002e0a <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	461a      	mov	r2, r3
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	4413      	add	r3, r2
 8002dd4:	881b      	ldrh	r3, [r3, #0]
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ddc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002de0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	461a      	mov	r2, r3
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	441a      	add	r2, r3
 8002df2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002df6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002dfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002dfe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	f040 80b4 	bne.w	8002f7e <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	695a      	ldr	r2, [r3, #20]
 8002e1a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e1e:	441a      	add	r2, r3
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	69da      	ldr	r2, [r3, #28]
 8002e28:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e2c:	441a      	add	r2, r3
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	6a1a      	ldr	r2, [r3, #32]
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d309      	bcc.n	8002e52 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	6a1a      	ldr	r2, [r3, #32]
 8002e48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e4a:	1ad2      	subs	r2, r2, r3
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	621a      	str	r2, [r3, #32]
 8002e50:	e015      	b.n	8002e7e <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	6a1b      	ldr	r3, [r3, #32]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d107      	bne.n	8002e6a <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8002e5a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e5e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002e68:	e009      	b.n	8002e7e <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	6a1b      	ldr	r3, [r3, #32]
 8002e6e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	2200      	movs	r2, #0
 8002e74:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	667b      	str	r3, [r7, #100]	; 0x64
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	785b      	ldrb	r3, [r3, #1]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d155      	bne.n	8002f38 <HAL_PCD_EP_DB_Transmit+0x704>
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ea0:	4413      	add	r3, r2
 8002ea2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	011a      	lsls	r2, r3, #4
 8002eaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002eac:	4413      	add	r3, r2
 8002eae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002eb2:	65bb      	str	r3, [r7, #88]	; 0x58
 8002eb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d112      	bne.n	8002ee0 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002eba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ebc:	881b      	ldrh	r3, [r3, #0]
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002ec4:	b29a      	uxth	r2, r3
 8002ec6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ec8:	801a      	strh	r2, [r3, #0]
 8002eca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ecc:	881b      	ldrh	r3, [r3, #0]
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ed4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ed8:	b29a      	uxth	r2, r3
 8002eda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002edc:	801a      	strh	r2, [r3, #0]
 8002ede:	e044      	b.n	8002f6a <HAL_PCD_EP_DB_Transmit+0x736>
 8002ee0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ee2:	2b3e      	cmp	r3, #62	; 0x3e
 8002ee4:	d811      	bhi.n	8002f0a <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002ee6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ee8:	085b      	lsrs	r3, r3, #1
 8002eea:	657b      	str	r3, [r7, #84]	; 0x54
 8002eec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002eee:	f003 0301 	and.w	r3, r3, #1
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d002      	beq.n	8002efc <HAL_PCD_EP_DB_Transmit+0x6c8>
 8002ef6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ef8:	3301      	adds	r3, #1
 8002efa:	657b      	str	r3, [r7, #84]	; 0x54
 8002efc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	029b      	lsls	r3, r3, #10
 8002f02:	b29a      	uxth	r2, r3
 8002f04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f06:	801a      	strh	r2, [r3, #0]
 8002f08:	e02f      	b.n	8002f6a <HAL_PCD_EP_DB_Transmit+0x736>
 8002f0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f0c:	095b      	lsrs	r3, r3, #5
 8002f0e:	657b      	str	r3, [r7, #84]	; 0x54
 8002f10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f12:	f003 031f 	and.w	r3, r3, #31
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d102      	bne.n	8002f20 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8002f1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f1c:	3b01      	subs	r3, #1
 8002f1e:	657b      	str	r3, [r7, #84]	; 0x54
 8002f20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	029b      	lsls	r3, r3, #10
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f30:	b29a      	uxth	r2, r3
 8002f32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f34:	801a      	strh	r2, [r3, #0]
 8002f36:	e018      	b.n	8002f6a <HAL_PCD_EP_DB_Transmit+0x736>
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	785b      	ldrb	r3, [r3, #1]
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d114      	bne.n	8002f6a <HAL_PCD_EP_DB_Transmit+0x736>
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f4e:	4413      	add	r3, r2
 8002f50:	667b      	str	r3, [r7, #100]	; 0x64
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	011a      	lsls	r2, r3, #4
 8002f58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f5a:	4413      	add	r3, r2
 8002f5c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002f60:	663b      	str	r3, [r7, #96]	; 0x60
 8002f62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f64:	b29a      	uxth	r2, r3
 8002f66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f68:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6818      	ldr	r0, [r3, #0]
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	6959      	ldr	r1, [r3, #20]
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	895a      	ldrh	r2, [r3, #10]
 8002f76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	f002 ffe6 	bl	8005f4a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	461a      	mov	r2, r3
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	4413      	add	r3, r2
 8002f8c:	881b      	ldrh	r3, [r3, #0]
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f98:	823b      	strh	r3, [r7, #16]
 8002f9a:	8a3b      	ldrh	r3, [r7, #16]
 8002f9c:	f083 0310 	eor.w	r3, r3, #16
 8002fa0:	823b      	strh	r3, [r7, #16]
 8002fa2:	8a3b      	ldrh	r3, [r7, #16]
 8002fa4:	f083 0320 	eor.w	r3, r3, #32
 8002fa8:	823b      	strh	r3, [r7, #16]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	461a      	mov	r2, r3
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	441a      	add	r2, r3
 8002fb8:	8a3b      	ldrh	r3, [r7, #16]
 8002fba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3788      	adds	r7, #136	; 0x88
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b087      	sub	sp, #28
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	607b      	str	r3, [r7, #4]
 8002fe2:	460b      	mov	r3, r1
 8002fe4:	817b      	strh	r3, [r7, #10]
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002fea:	897b      	ldrh	r3, [r7, #10]
 8002fec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d00b      	beq.n	800300e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ff6:	897b      	ldrh	r3, [r7, #10]
 8002ff8:	f003 0307 	and.w	r3, r3, #7
 8002ffc:	1c5a      	adds	r2, r3, #1
 8002ffe:	4613      	mov	r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	4413      	add	r3, r2
 8003004:	00db      	lsls	r3, r3, #3
 8003006:	68fa      	ldr	r2, [r7, #12]
 8003008:	4413      	add	r3, r2
 800300a:	617b      	str	r3, [r7, #20]
 800300c:	e009      	b.n	8003022 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800300e:	897a      	ldrh	r2, [r7, #10]
 8003010:	4613      	mov	r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	4413      	add	r3, r2
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800301c:	68fa      	ldr	r2, [r7, #12]
 800301e:	4413      	add	r3, r2
 8003020:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003022:	893b      	ldrh	r3, [r7, #8]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d107      	bne.n	8003038 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	2200      	movs	r2, #0
 800302c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	b29a      	uxth	r2, r3
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	80da      	strh	r2, [r3, #6]
 8003036:	e00b      	b.n	8003050 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	2201      	movs	r2, #1
 800303c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	b29a      	uxth	r2, r3
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	0c1b      	lsrs	r3, r3, #16
 800304a:	b29a      	uxth	r2, r3
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	371c      	adds	r7, #28
 8003056:	46bd      	mov	sp, r7
 8003058:	bc80      	pop	{r7}
 800305a:	4770      	bx	lr

0800305c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b086      	sub	sp, #24
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d101      	bne.n	800306e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e26c      	b.n	8003548 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	2b00      	cmp	r3, #0
 8003078:	f000 8087 	beq.w	800318a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800307c:	4b92      	ldr	r3, [pc, #584]	; (80032c8 <HAL_RCC_OscConfig+0x26c>)
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f003 030c 	and.w	r3, r3, #12
 8003084:	2b04      	cmp	r3, #4
 8003086:	d00c      	beq.n	80030a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003088:	4b8f      	ldr	r3, [pc, #572]	; (80032c8 <HAL_RCC_OscConfig+0x26c>)
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f003 030c 	and.w	r3, r3, #12
 8003090:	2b08      	cmp	r3, #8
 8003092:	d112      	bne.n	80030ba <HAL_RCC_OscConfig+0x5e>
 8003094:	4b8c      	ldr	r3, [pc, #560]	; (80032c8 <HAL_RCC_OscConfig+0x26c>)
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800309c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030a0:	d10b      	bne.n	80030ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030a2:	4b89      	ldr	r3, [pc, #548]	; (80032c8 <HAL_RCC_OscConfig+0x26c>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d06c      	beq.n	8003188 <HAL_RCC_OscConfig+0x12c>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d168      	bne.n	8003188 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e246      	b.n	8003548 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030c2:	d106      	bne.n	80030d2 <HAL_RCC_OscConfig+0x76>
 80030c4:	4b80      	ldr	r3, [pc, #512]	; (80032c8 <HAL_RCC_OscConfig+0x26c>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a7f      	ldr	r2, [pc, #508]	; (80032c8 <HAL_RCC_OscConfig+0x26c>)
 80030ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030ce:	6013      	str	r3, [r2, #0]
 80030d0:	e02e      	b.n	8003130 <HAL_RCC_OscConfig+0xd4>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d10c      	bne.n	80030f4 <HAL_RCC_OscConfig+0x98>
 80030da:	4b7b      	ldr	r3, [pc, #492]	; (80032c8 <HAL_RCC_OscConfig+0x26c>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a7a      	ldr	r2, [pc, #488]	; (80032c8 <HAL_RCC_OscConfig+0x26c>)
 80030e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030e4:	6013      	str	r3, [r2, #0]
 80030e6:	4b78      	ldr	r3, [pc, #480]	; (80032c8 <HAL_RCC_OscConfig+0x26c>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a77      	ldr	r2, [pc, #476]	; (80032c8 <HAL_RCC_OscConfig+0x26c>)
 80030ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030f0:	6013      	str	r3, [r2, #0]
 80030f2:	e01d      	b.n	8003130 <HAL_RCC_OscConfig+0xd4>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030fc:	d10c      	bne.n	8003118 <HAL_RCC_OscConfig+0xbc>
 80030fe:	4b72      	ldr	r3, [pc, #456]	; (80032c8 <HAL_RCC_OscConfig+0x26c>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a71      	ldr	r2, [pc, #452]	; (80032c8 <HAL_RCC_OscConfig+0x26c>)
 8003104:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003108:	6013      	str	r3, [r2, #0]
 800310a:	4b6f      	ldr	r3, [pc, #444]	; (80032c8 <HAL_RCC_OscConfig+0x26c>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a6e      	ldr	r2, [pc, #440]	; (80032c8 <HAL_RCC_OscConfig+0x26c>)
 8003110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003114:	6013      	str	r3, [r2, #0]
 8003116:	e00b      	b.n	8003130 <HAL_RCC_OscConfig+0xd4>
 8003118:	4b6b      	ldr	r3, [pc, #428]	; (80032c8 <HAL_RCC_OscConfig+0x26c>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a6a      	ldr	r2, [pc, #424]	; (80032c8 <HAL_RCC_OscConfig+0x26c>)
 800311e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003122:	6013      	str	r3, [r2, #0]
 8003124:	4b68      	ldr	r3, [pc, #416]	; (80032c8 <HAL_RCC_OscConfig+0x26c>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a67      	ldr	r2, [pc, #412]	; (80032c8 <HAL_RCC_OscConfig+0x26c>)
 800312a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800312e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d013      	beq.n	8003160 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003138:	f7fd fb00 	bl	800073c <HAL_GetTick>
 800313c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800313e:	e008      	b.n	8003152 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003140:	f7fd fafc 	bl	800073c <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b64      	cmp	r3, #100	; 0x64
 800314c:	d901      	bls.n	8003152 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e1fa      	b.n	8003548 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003152:	4b5d      	ldr	r3, [pc, #372]	; (80032c8 <HAL_RCC_OscConfig+0x26c>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d0f0      	beq.n	8003140 <HAL_RCC_OscConfig+0xe4>
 800315e:	e014      	b.n	800318a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003160:	f7fd faec 	bl	800073c <HAL_GetTick>
 8003164:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003166:	e008      	b.n	800317a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003168:	f7fd fae8 	bl	800073c <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b64      	cmp	r3, #100	; 0x64
 8003174:	d901      	bls.n	800317a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e1e6      	b.n	8003548 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800317a:	4b53      	ldr	r3, [pc, #332]	; (80032c8 <HAL_RCC_OscConfig+0x26c>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d1f0      	bne.n	8003168 <HAL_RCC_OscConfig+0x10c>
 8003186:	e000      	b.n	800318a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003188:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0302 	and.w	r3, r3, #2
 8003192:	2b00      	cmp	r3, #0
 8003194:	d063      	beq.n	800325e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003196:	4b4c      	ldr	r3, [pc, #304]	; (80032c8 <HAL_RCC_OscConfig+0x26c>)
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f003 030c 	and.w	r3, r3, #12
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d00b      	beq.n	80031ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80031a2:	4b49      	ldr	r3, [pc, #292]	; (80032c8 <HAL_RCC_OscConfig+0x26c>)
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f003 030c 	and.w	r3, r3, #12
 80031aa:	2b08      	cmp	r3, #8
 80031ac:	d11c      	bne.n	80031e8 <HAL_RCC_OscConfig+0x18c>
 80031ae:	4b46      	ldr	r3, [pc, #280]	; (80032c8 <HAL_RCC_OscConfig+0x26c>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d116      	bne.n	80031e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ba:	4b43      	ldr	r3, [pc, #268]	; (80032c8 <HAL_RCC_OscConfig+0x26c>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d005      	beq.n	80031d2 <HAL_RCC_OscConfig+0x176>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d001      	beq.n	80031d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e1ba      	b.n	8003548 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031d2:	4b3d      	ldr	r3, [pc, #244]	; (80032c8 <HAL_RCC_OscConfig+0x26c>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	00db      	lsls	r3, r3, #3
 80031e0:	4939      	ldr	r1, [pc, #228]	; (80032c8 <HAL_RCC_OscConfig+0x26c>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031e6:	e03a      	b.n	800325e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	691b      	ldr	r3, [r3, #16]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d020      	beq.n	8003232 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031f0:	4b36      	ldr	r3, [pc, #216]	; (80032cc <HAL_RCC_OscConfig+0x270>)
 80031f2:	2201      	movs	r2, #1
 80031f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f6:	f7fd faa1 	bl	800073c <HAL_GetTick>
 80031fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031fc:	e008      	b.n	8003210 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031fe:	f7fd fa9d 	bl	800073c <HAL_GetTick>
 8003202:	4602      	mov	r2, r0
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	2b02      	cmp	r3, #2
 800320a:	d901      	bls.n	8003210 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e19b      	b.n	8003548 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003210:	4b2d      	ldr	r3, [pc, #180]	; (80032c8 <HAL_RCC_OscConfig+0x26c>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0302 	and.w	r3, r3, #2
 8003218:	2b00      	cmp	r3, #0
 800321a:	d0f0      	beq.n	80031fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800321c:	4b2a      	ldr	r3, [pc, #168]	; (80032c8 <HAL_RCC_OscConfig+0x26c>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	695b      	ldr	r3, [r3, #20]
 8003228:	00db      	lsls	r3, r3, #3
 800322a:	4927      	ldr	r1, [pc, #156]	; (80032c8 <HAL_RCC_OscConfig+0x26c>)
 800322c:	4313      	orrs	r3, r2
 800322e:	600b      	str	r3, [r1, #0]
 8003230:	e015      	b.n	800325e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003232:	4b26      	ldr	r3, [pc, #152]	; (80032cc <HAL_RCC_OscConfig+0x270>)
 8003234:	2200      	movs	r2, #0
 8003236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003238:	f7fd fa80 	bl	800073c <HAL_GetTick>
 800323c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800323e:	e008      	b.n	8003252 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003240:	f7fd fa7c 	bl	800073c <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b02      	cmp	r3, #2
 800324c:	d901      	bls.n	8003252 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e17a      	b.n	8003548 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003252:	4b1d      	ldr	r3, [pc, #116]	; (80032c8 <HAL_RCC_OscConfig+0x26c>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1f0      	bne.n	8003240 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0308 	and.w	r3, r3, #8
 8003266:	2b00      	cmp	r3, #0
 8003268:	d03a      	beq.n	80032e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	699b      	ldr	r3, [r3, #24]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d019      	beq.n	80032a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003272:	4b17      	ldr	r3, [pc, #92]	; (80032d0 <HAL_RCC_OscConfig+0x274>)
 8003274:	2201      	movs	r2, #1
 8003276:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003278:	f7fd fa60 	bl	800073c <HAL_GetTick>
 800327c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800327e:	e008      	b.n	8003292 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003280:	f7fd fa5c 	bl	800073c <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	2b02      	cmp	r3, #2
 800328c:	d901      	bls.n	8003292 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e15a      	b.n	8003548 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003292:	4b0d      	ldr	r3, [pc, #52]	; (80032c8 <HAL_RCC_OscConfig+0x26c>)
 8003294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d0f0      	beq.n	8003280 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800329e:	2001      	movs	r0, #1
 80032a0:	f000 fac4 	bl	800382c <RCC_Delay>
 80032a4:	e01c      	b.n	80032e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032a6:	4b0a      	ldr	r3, [pc, #40]	; (80032d0 <HAL_RCC_OscConfig+0x274>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032ac:	f7fd fa46 	bl	800073c <HAL_GetTick>
 80032b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032b2:	e00f      	b.n	80032d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032b4:	f7fd fa42 	bl	800073c <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d908      	bls.n	80032d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e140      	b.n	8003548 <HAL_RCC_OscConfig+0x4ec>
 80032c6:	bf00      	nop
 80032c8:	40021000 	.word	0x40021000
 80032cc:	42420000 	.word	0x42420000
 80032d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032d4:	4b9e      	ldr	r3, [pc, #632]	; (8003550 <HAL_RCC_OscConfig+0x4f4>)
 80032d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1e9      	bne.n	80032b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0304 	and.w	r3, r3, #4
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f000 80a6 	beq.w	800343a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032ee:	2300      	movs	r3, #0
 80032f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032f2:	4b97      	ldr	r3, [pc, #604]	; (8003550 <HAL_RCC_OscConfig+0x4f4>)
 80032f4:	69db      	ldr	r3, [r3, #28]
 80032f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d10d      	bne.n	800331a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032fe:	4b94      	ldr	r3, [pc, #592]	; (8003550 <HAL_RCC_OscConfig+0x4f4>)
 8003300:	69db      	ldr	r3, [r3, #28]
 8003302:	4a93      	ldr	r2, [pc, #588]	; (8003550 <HAL_RCC_OscConfig+0x4f4>)
 8003304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003308:	61d3      	str	r3, [r2, #28]
 800330a:	4b91      	ldr	r3, [pc, #580]	; (8003550 <HAL_RCC_OscConfig+0x4f4>)
 800330c:	69db      	ldr	r3, [r3, #28]
 800330e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003312:	60bb      	str	r3, [r7, #8]
 8003314:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003316:	2301      	movs	r3, #1
 8003318:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800331a:	4b8e      	ldr	r3, [pc, #568]	; (8003554 <HAL_RCC_OscConfig+0x4f8>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003322:	2b00      	cmp	r3, #0
 8003324:	d118      	bne.n	8003358 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003326:	4b8b      	ldr	r3, [pc, #556]	; (8003554 <HAL_RCC_OscConfig+0x4f8>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a8a      	ldr	r2, [pc, #552]	; (8003554 <HAL_RCC_OscConfig+0x4f8>)
 800332c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003330:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003332:	f7fd fa03 	bl	800073c <HAL_GetTick>
 8003336:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003338:	e008      	b.n	800334c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800333a:	f7fd f9ff 	bl	800073c <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	2b64      	cmp	r3, #100	; 0x64
 8003346:	d901      	bls.n	800334c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	e0fd      	b.n	8003548 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800334c:	4b81      	ldr	r3, [pc, #516]	; (8003554 <HAL_RCC_OscConfig+0x4f8>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003354:	2b00      	cmp	r3, #0
 8003356:	d0f0      	beq.n	800333a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d106      	bne.n	800336e <HAL_RCC_OscConfig+0x312>
 8003360:	4b7b      	ldr	r3, [pc, #492]	; (8003550 <HAL_RCC_OscConfig+0x4f4>)
 8003362:	6a1b      	ldr	r3, [r3, #32]
 8003364:	4a7a      	ldr	r2, [pc, #488]	; (8003550 <HAL_RCC_OscConfig+0x4f4>)
 8003366:	f043 0301 	orr.w	r3, r3, #1
 800336a:	6213      	str	r3, [r2, #32]
 800336c:	e02d      	b.n	80033ca <HAL_RCC_OscConfig+0x36e>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d10c      	bne.n	8003390 <HAL_RCC_OscConfig+0x334>
 8003376:	4b76      	ldr	r3, [pc, #472]	; (8003550 <HAL_RCC_OscConfig+0x4f4>)
 8003378:	6a1b      	ldr	r3, [r3, #32]
 800337a:	4a75      	ldr	r2, [pc, #468]	; (8003550 <HAL_RCC_OscConfig+0x4f4>)
 800337c:	f023 0301 	bic.w	r3, r3, #1
 8003380:	6213      	str	r3, [r2, #32]
 8003382:	4b73      	ldr	r3, [pc, #460]	; (8003550 <HAL_RCC_OscConfig+0x4f4>)
 8003384:	6a1b      	ldr	r3, [r3, #32]
 8003386:	4a72      	ldr	r2, [pc, #456]	; (8003550 <HAL_RCC_OscConfig+0x4f4>)
 8003388:	f023 0304 	bic.w	r3, r3, #4
 800338c:	6213      	str	r3, [r2, #32]
 800338e:	e01c      	b.n	80033ca <HAL_RCC_OscConfig+0x36e>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	2b05      	cmp	r3, #5
 8003396:	d10c      	bne.n	80033b2 <HAL_RCC_OscConfig+0x356>
 8003398:	4b6d      	ldr	r3, [pc, #436]	; (8003550 <HAL_RCC_OscConfig+0x4f4>)
 800339a:	6a1b      	ldr	r3, [r3, #32]
 800339c:	4a6c      	ldr	r2, [pc, #432]	; (8003550 <HAL_RCC_OscConfig+0x4f4>)
 800339e:	f043 0304 	orr.w	r3, r3, #4
 80033a2:	6213      	str	r3, [r2, #32]
 80033a4:	4b6a      	ldr	r3, [pc, #424]	; (8003550 <HAL_RCC_OscConfig+0x4f4>)
 80033a6:	6a1b      	ldr	r3, [r3, #32]
 80033a8:	4a69      	ldr	r2, [pc, #420]	; (8003550 <HAL_RCC_OscConfig+0x4f4>)
 80033aa:	f043 0301 	orr.w	r3, r3, #1
 80033ae:	6213      	str	r3, [r2, #32]
 80033b0:	e00b      	b.n	80033ca <HAL_RCC_OscConfig+0x36e>
 80033b2:	4b67      	ldr	r3, [pc, #412]	; (8003550 <HAL_RCC_OscConfig+0x4f4>)
 80033b4:	6a1b      	ldr	r3, [r3, #32]
 80033b6:	4a66      	ldr	r2, [pc, #408]	; (8003550 <HAL_RCC_OscConfig+0x4f4>)
 80033b8:	f023 0301 	bic.w	r3, r3, #1
 80033bc:	6213      	str	r3, [r2, #32]
 80033be:	4b64      	ldr	r3, [pc, #400]	; (8003550 <HAL_RCC_OscConfig+0x4f4>)
 80033c0:	6a1b      	ldr	r3, [r3, #32]
 80033c2:	4a63      	ldr	r2, [pc, #396]	; (8003550 <HAL_RCC_OscConfig+0x4f4>)
 80033c4:	f023 0304 	bic.w	r3, r3, #4
 80033c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d015      	beq.n	80033fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033d2:	f7fd f9b3 	bl	800073c <HAL_GetTick>
 80033d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033d8:	e00a      	b.n	80033f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033da:	f7fd f9af 	bl	800073c <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d901      	bls.n	80033f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80033ec:	2303      	movs	r3, #3
 80033ee:	e0ab      	b.n	8003548 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033f0:	4b57      	ldr	r3, [pc, #348]	; (8003550 <HAL_RCC_OscConfig+0x4f4>)
 80033f2:	6a1b      	ldr	r3, [r3, #32]
 80033f4:	f003 0302 	and.w	r3, r3, #2
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d0ee      	beq.n	80033da <HAL_RCC_OscConfig+0x37e>
 80033fc:	e014      	b.n	8003428 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033fe:	f7fd f99d 	bl	800073c <HAL_GetTick>
 8003402:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003404:	e00a      	b.n	800341c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003406:	f7fd f999 	bl	800073c <HAL_GetTick>
 800340a:	4602      	mov	r2, r0
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	f241 3288 	movw	r2, #5000	; 0x1388
 8003414:	4293      	cmp	r3, r2
 8003416:	d901      	bls.n	800341c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e095      	b.n	8003548 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800341c:	4b4c      	ldr	r3, [pc, #304]	; (8003550 <HAL_RCC_OscConfig+0x4f4>)
 800341e:	6a1b      	ldr	r3, [r3, #32]
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	2b00      	cmp	r3, #0
 8003426:	d1ee      	bne.n	8003406 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003428:	7dfb      	ldrb	r3, [r7, #23]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d105      	bne.n	800343a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800342e:	4b48      	ldr	r3, [pc, #288]	; (8003550 <HAL_RCC_OscConfig+0x4f4>)
 8003430:	69db      	ldr	r3, [r3, #28]
 8003432:	4a47      	ldr	r2, [pc, #284]	; (8003550 <HAL_RCC_OscConfig+0x4f4>)
 8003434:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003438:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	69db      	ldr	r3, [r3, #28]
 800343e:	2b00      	cmp	r3, #0
 8003440:	f000 8081 	beq.w	8003546 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003444:	4b42      	ldr	r3, [pc, #264]	; (8003550 <HAL_RCC_OscConfig+0x4f4>)
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f003 030c 	and.w	r3, r3, #12
 800344c:	2b08      	cmp	r3, #8
 800344e:	d061      	beq.n	8003514 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	69db      	ldr	r3, [r3, #28]
 8003454:	2b02      	cmp	r3, #2
 8003456:	d146      	bne.n	80034e6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003458:	4b3f      	ldr	r3, [pc, #252]	; (8003558 <HAL_RCC_OscConfig+0x4fc>)
 800345a:	2200      	movs	r2, #0
 800345c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800345e:	f7fd f96d 	bl	800073c <HAL_GetTick>
 8003462:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003464:	e008      	b.n	8003478 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003466:	f7fd f969 	bl	800073c <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	2b02      	cmp	r3, #2
 8003472:	d901      	bls.n	8003478 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e067      	b.n	8003548 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003478:	4b35      	ldr	r3, [pc, #212]	; (8003550 <HAL_RCC_OscConfig+0x4f4>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d1f0      	bne.n	8003466 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a1b      	ldr	r3, [r3, #32]
 8003488:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800348c:	d108      	bne.n	80034a0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800348e:	4b30      	ldr	r3, [pc, #192]	; (8003550 <HAL_RCC_OscConfig+0x4f4>)
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	492d      	ldr	r1, [pc, #180]	; (8003550 <HAL_RCC_OscConfig+0x4f4>)
 800349c:	4313      	orrs	r3, r2
 800349e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034a0:	4b2b      	ldr	r3, [pc, #172]	; (8003550 <HAL_RCC_OscConfig+0x4f4>)
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a19      	ldr	r1, [r3, #32]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b0:	430b      	orrs	r3, r1
 80034b2:	4927      	ldr	r1, [pc, #156]	; (8003550 <HAL_RCC_OscConfig+0x4f4>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034b8:	4b27      	ldr	r3, [pc, #156]	; (8003558 <HAL_RCC_OscConfig+0x4fc>)
 80034ba:	2201      	movs	r2, #1
 80034bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034be:	f7fd f93d 	bl	800073c <HAL_GetTick>
 80034c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034c4:	e008      	b.n	80034d8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034c6:	f7fd f939 	bl	800073c <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d901      	bls.n	80034d8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e037      	b.n	8003548 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034d8:	4b1d      	ldr	r3, [pc, #116]	; (8003550 <HAL_RCC_OscConfig+0x4f4>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d0f0      	beq.n	80034c6 <HAL_RCC_OscConfig+0x46a>
 80034e4:	e02f      	b.n	8003546 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034e6:	4b1c      	ldr	r3, [pc, #112]	; (8003558 <HAL_RCC_OscConfig+0x4fc>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ec:	f7fd f926 	bl	800073c <HAL_GetTick>
 80034f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034f2:	e008      	b.n	8003506 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034f4:	f7fd f922 	bl	800073c <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d901      	bls.n	8003506 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e020      	b.n	8003548 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003506:	4b12      	ldr	r3, [pc, #72]	; (8003550 <HAL_RCC_OscConfig+0x4f4>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1f0      	bne.n	80034f4 <HAL_RCC_OscConfig+0x498>
 8003512:	e018      	b.n	8003546 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	69db      	ldr	r3, [r3, #28]
 8003518:	2b01      	cmp	r3, #1
 800351a:	d101      	bne.n	8003520 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e013      	b.n	8003548 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003520:	4b0b      	ldr	r3, [pc, #44]	; (8003550 <HAL_RCC_OscConfig+0x4f4>)
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a1b      	ldr	r3, [r3, #32]
 8003530:	429a      	cmp	r2, r3
 8003532:	d106      	bne.n	8003542 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800353e:	429a      	cmp	r2, r3
 8003540:	d001      	beq.n	8003546 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e000      	b.n	8003548 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003546:	2300      	movs	r3, #0
}
 8003548:	4618      	mov	r0, r3
 800354a:	3718      	adds	r7, #24
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}
 8003550:	40021000 	.word	0x40021000
 8003554:	40007000 	.word	0x40007000
 8003558:	42420060 	.word	0x42420060

0800355c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d101      	bne.n	8003570 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e0d0      	b.n	8003712 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003570:	4b6a      	ldr	r3, [pc, #424]	; (800371c <HAL_RCC_ClockConfig+0x1c0>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0307 	and.w	r3, r3, #7
 8003578:	683a      	ldr	r2, [r7, #0]
 800357a:	429a      	cmp	r2, r3
 800357c:	d910      	bls.n	80035a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800357e:	4b67      	ldr	r3, [pc, #412]	; (800371c <HAL_RCC_ClockConfig+0x1c0>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f023 0207 	bic.w	r2, r3, #7
 8003586:	4965      	ldr	r1, [pc, #404]	; (800371c <HAL_RCC_ClockConfig+0x1c0>)
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	4313      	orrs	r3, r2
 800358c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800358e:	4b63      	ldr	r3, [pc, #396]	; (800371c <HAL_RCC_ClockConfig+0x1c0>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0307 	and.w	r3, r3, #7
 8003596:	683a      	ldr	r2, [r7, #0]
 8003598:	429a      	cmp	r2, r3
 800359a:	d001      	beq.n	80035a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e0b8      	b.n	8003712 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0302 	and.w	r3, r3, #2
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d020      	beq.n	80035ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0304 	and.w	r3, r3, #4
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d005      	beq.n	80035c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035b8:	4b59      	ldr	r3, [pc, #356]	; (8003720 <HAL_RCC_ClockConfig+0x1c4>)
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	4a58      	ldr	r2, [pc, #352]	; (8003720 <HAL_RCC_ClockConfig+0x1c4>)
 80035be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80035c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0308 	and.w	r3, r3, #8
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d005      	beq.n	80035dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035d0:	4b53      	ldr	r3, [pc, #332]	; (8003720 <HAL_RCC_ClockConfig+0x1c4>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	4a52      	ldr	r2, [pc, #328]	; (8003720 <HAL_RCC_ClockConfig+0x1c4>)
 80035d6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80035da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035dc:	4b50      	ldr	r3, [pc, #320]	; (8003720 <HAL_RCC_ClockConfig+0x1c4>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	494d      	ldr	r1, [pc, #308]	; (8003720 <HAL_RCC_ClockConfig+0x1c4>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d040      	beq.n	800367c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d107      	bne.n	8003612 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003602:	4b47      	ldr	r3, [pc, #284]	; (8003720 <HAL_RCC_ClockConfig+0x1c4>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d115      	bne.n	800363a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e07f      	b.n	8003712 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	2b02      	cmp	r3, #2
 8003618:	d107      	bne.n	800362a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800361a:	4b41      	ldr	r3, [pc, #260]	; (8003720 <HAL_RCC_ClockConfig+0x1c4>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d109      	bne.n	800363a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e073      	b.n	8003712 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800362a:	4b3d      	ldr	r3, [pc, #244]	; (8003720 <HAL_RCC_ClockConfig+0x1c4>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0302 	and.w	r3, r3, #2
 8003632:	2b00      	cmp	r3, #0
 8003634:	d101      	bne.n	800363a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e06b      	b.n	8003712 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800363a:	4b39      	ldr	r3, [pc, #228]	; (8003720 <HAL_RCC_ClockConfig+0x1c4>)
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f023 0203 	bic.w	r2, r3, #3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	4936      	ldr	r1, [pc, #216]	; (8003720 <HAL_RCC_ClockConfig+0x1c4>)
 8003648:	4313      	orrs	r3, r2
 800364a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800364c:	f7fd f876 	bl	800073c <HAL_GetTick>
 8003650:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003652:	e00a      	b.n	800366a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003654:	f7fd f872 	bl	800073c <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003662:	4293      	cmp	r3, r2
 8003664:	d901      	bls.n	800366a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e053      	b.n	8003712 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800366a:	4b2d      	ldr	r3, [pc, #180]	; (8003720 <HAL_RCC_ClockConfig+0x1c4>)
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f003 020c 	and.w	r2, r3, #12
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	429a      	cmp	r2, r3
 800367a:	d1eb      	bne.n	8003654 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800367c:	4b27      	ldr	r3, [pc, #156]	; (800371c <HAL_RCC_ClockConfig+0x1c0>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0307 	and.w	r3, r3, #7
 8003684:	683a      	ldr	r2, [r7, #0]
 8003686:	429a      	cmp	r2, r3
 8003688:	d210      	bcs.n	80036ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800368a:	4b24      	ldr	r3, [pc, #144]	; (800371c <HAL_RCC_ClockConfig+0x1c0>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f023 0207 	bic.w	r2, r3, #7
 8003692:	4922      	ldr	r1, [pc, #136]	; (800371c <HAL_RCC_ClockConfig+0x1c0>)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	4313      	orrs	r3, r2
 8003698:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800369a:	4b20      	ldr	r3, [pc, #128]	; (800371c <HAL_RCC_ClockConfig+0x1c0>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0307 	and.w	r3, r3, #7
 80036a2:	683a      	ldr	r2, [r7, #0]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d001      	beq.n	80036ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e032      	b.n	8003712 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0304 	and.w	r3, r3, #4
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d008      	beq.n	80036ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036b8:	4b19      	ldr	r3, [pc, #100]	; (8003720 <HAL_RCC_ClockConfig+0x1c4>)
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	4916      	ldr	r1, [pc, #88]	; (8003720 <HAL_RCC_ClockConfig+0x1c4>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0308 	and.w	r3, r3, #8
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d009      	beq.n	80036ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80036d6:	4b12      	ldr	r3, [pc, #72]	; (8003720 <HAL_RCC_ClockConfig+0x1c4>)
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	00db      	lsls	r3, r3, #3
 80036e4:	490e      	ldr	r1, [pc, #56]	; (8003720 <HAL_RCC_ClockConfig+0x1c4>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80036ea:	f000 f821 	bl	8003730 <HAL_RCC_GetSysClockFreq>
 80036ee:	4602      	mov	r2, r0
 80036f0:	4b0b      	ldr	r3, [pc, #44]	; (8003720 <HAL_RCC_ClockConfig+0x1c4>)
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	091b      	lsrs	r3, r3, #4
 80036f6:	f003 030f 	and.w	r3, r3, #15
 80036fa:	490a      	ldr	r1, [pc, #40]	; (8003724 <HAL_RCC_ClockConfig+0x1c8>)
 80036fc:	5ccb      	ldrb	r3, [r1, r3]
 80036fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003702:	4a09      	ldr	r2, [pc, #36]	; (8003728 <HAL_RCC_ClockConfig+0x1cc>)
 8003704:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003706:	4b09      	ldr	r3, [pc, #36]	; (800372c <HAL_RCC_ClockConfig+0x1d0>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4618      	mov	r0, r3
 800370c:	f7fc ffd4 	bl	80006b8 <HAL_InitTick>

  return HAL_OK;
 8003710:	2300      	movs	r3, #0
}
 8003712:	4618      	mov	r0, r3
 8003714:	3710      	adds	r7, #16
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	40022000 	.word	0x40022000
 8003720:	40021000 	.word	0x40021000
 8003724:	08007ce4 	.word	0x08007ce4
 8003728:	20000000 	.word	0x20000000
 800372c:	20000004 	.word	0x20000004

08003730 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003730:	b490      	push	{r4, r7}
 8003732:	b08a      	sub	sp, #40	; 0x28
 8003734:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003736:	4b2a      	ldr	r3, [pc, #168]	; (80037e0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003738:	1d3c      	adds	r4, r7, #4
 800373a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800373c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003740:	f240 2301 	movw	r3, #513	; 0x201
 8003744:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003746:	2300      	movs	r3, #0
 8003748:	61fb      	str	r3, [r7, #28]
 800374a:	2300      	movs	r3, #0
 800374c:	61bb      	str	r3, [r7, #24]
 800374e:	2300      	movs	r3, #0
 8003750:	627b      	str	r3, [r7, #36]	; 0x24
 8003752:	2300      	movs	r3, #0
 8003754:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003756:	2300      	movs	r3, #0
 8003758:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800375a:	4b22      	ldr	r3, [pc, #136]	; (80037e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	f003 030c 	and.w	r3, r3, #12
 8003766:	2b04      	cmp	r3, #4
 8003768:	d002      	beq.n	8003770 <HAL_RCC_GetSysClockFreq+0x40>
 800376a:	2b08      	cmp	r3, #8
 800376c:	d003      	beq.n	8003776 <HAL_RCC_GetSysClockFreq+0x46>
 800376e:	e02d      	b.n	80037cc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003770:	4b1d      	ldr	r3, [pc, #116]	; (80037e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003772:	623b      	str	r3, [r7, #32]
      break;
 8003774:	e02d      	b.n	80037d2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	0c9b      	lsrs	r3, r3, #18
 800377a:	f003 030f 	and.w	r3, r3, #15
 800377e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003782:	4413      	add	r3, r2
 8003784:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003788:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d013      	beq.n	80037bc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003794:	4b13      	ldr	r3, [pc, #76]	; (80037e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	0c5b      	lsrs	r3, r3, #17
 800379a:	f003 0301 	and.w	r3, r3, #1
 800379e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80037a2:	4413      	add	r3, r2
 80037a4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80037a8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	4a0e      	ldr	r2, [pc, #56]	; (80037e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037ae:	fb02 f203 	mul.w	r2, r2, r3
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037b8:	627b      	str	r3, [r7, #36]	; 0x24
 80037ba:	e004      	b.n	80037c6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	4a0b      	ldr	r2, [pc, #44]	; (80037ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80037c0:	fb02 f303 	mul.w	r3, r2, r3
 80037c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80037c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c8:	623b      	str	r3, [r7, #32]
      break;
 80037ca:	e002      	b.n	80037d2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80037cc:	4b06      	ldr	r3, [pc, #24]	; (80037e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037ce:	623b      	str	r3, [r7, #32]
      break;
 80037d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037d2:	6a3b      	ldr	r3, [r7, #32]
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3728      	adds	r7, #40	; 0x28
 80037d8:	46bd      	mov	sp, r7
 80037da:	bc90      	pop	{r4, r7}
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	08007c80 	.word	0x08007c80
 80037e4:	40021000 	.word	0x40021000
 80037e8:	007a1200 	.word	0x007a1200
 80037ec:	003d0900 	.word	0x003d0900

080037f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037f0:	b480      	push	{r7}
 80037f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037f4:	4b02      	ldr	r3, [pc, #8]	; (8003800 <HAL_RCC_GetHCLKFreq+0x10>)
 80037f6:	681b      	ldr	r3, [r3, #0]
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bc80      	pop	{r7}
 80037fe:	4770      	bx	lr
 8003800:	20000000 	.word	0x20000000

08003804 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003808:	f7ff fff2 	bl	80037f0 <HAL_RCC_GetHCLKFreq>
 800380c:	4602      	mov	r2, r0
 800380e:	4b05      	ldr	r3, [pc, #20]	; (8003824 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	0adb      	lsrs	r3, r3, #11
 8003814:	f003 0307 	and.w	r3, r3, #7
 8003818:	4903      	ldr	r1, [pc, #12]	; (8003828 <HAL_RCC_GetPCLK2Freq+0x24>)
 800381a:	5ccb      	ldrb	r3, [r1, r3]
 800381c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003820:	4618      	mov	r0, r3
 8003822:	bd80      	pop	{r7, pc}
 8003824:	40021000 	.word	0x40021000
 8003828:	08007cf4 	.word	0x08007cf4

0800382c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800382c:	b480      	push	{r7}
 800382e:	b085      	sub	sp, #20
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003834:	4b0a      	ldr	r3, [pc, #40]	; (8003860 <RCC_Delay+0x34>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a0a      	ldr	r2, [pc, #40]	; (8003864 <RCC_Delay+0x38>)
 800383a:	fba2 2303 	umull	r2, r3, r2, r3
 800383e:	0a5b      	lsrs	r3, r3, #9
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	fb02 f303 	mul.w	r3, r2, r3
 8003846:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003848:	bf00      	nop
  }
  while (Delay --);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	1e5a      	subs	r2, r3, #1
 800384e:	60fa      	str	r2, [r7, #12]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d1f9      	bne.n	8003848 <RCC_Delay+0x1c>
}
 8003854:	bf00      	nop
 8003856:	bf00      	nop
 8003858:	3714      	adds	r7, #20
 800385a:	46bd      	mov	sp, r7
 800385c:	bc80      	pop	{r7}
 800385e:	4770      	bx	lr
 8003860:	20000000 	.word	0x20000000
 8003864:	10624dd3 	.word	0x10624dd3

08003868 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b086      	sub	sp, #24
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003870:	2300      	movs	r3, #0
 8003872:	613b      	str	r3, [r7, #16]
 8003874:	2300      	movs	r3, #0
 8003876:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0301 	and.w	r3, r3, #1
 8003880:	2b00      	cmp	r3, #0
 8003882:	d07d      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003884:	2300      	movs	r3, #0
 8003886:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003888:	4b4f      	ldr	r3, [pc, #316]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800388a:	69db      	ldr	r3, [r3, #28]
 800388c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d10d      	bne.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003894:	4b4c      	ldr	r3, [pc, #304]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003896:	69db      	ldr	r3, [r3, #28]
 8003898:	4a4b      	ldr	r2, [pc, #300]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800389a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800389e:	61d3      	str	r3, [r2, #28]
 80038a0:	4b49      	ldr	r3, [pc, #292]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038a2:	69db      	ldr	r3, [r3, #28]
 80038a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038a8:	60bb      	str	r3, [r7, #8]
 80038aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038ac:	2301      	movs	r3, #1
 80038ae:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038b0:	4b46      	ldr	r3, [pc, #280]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d118      	bne.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038bc:	4b43      	ldr	r3, [pc, #268]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a42      	ldr	r2, [pc, #264]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038c8:	f7fc ff38 	bl	800073c <HAL_GetTick>
 80038cc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038ce:	e008      	b.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038d0:	f7fc ff34 	bl	800073c <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	2b64      	cmp	r3, #100	; 0x64
 80038dc:	d901      	bls.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e06d      	b.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038e2:	4b3a      	ldr	r3, [pc, #232]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d0f0      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80038ee:	4b36      	ldr	r3, [pc, #216]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038f0:	6a1b      	ldr	r3, [r3, #32]
 80038f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038f6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d02e      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003906:	68fa      	ldr	r2, [r7, #12]
 8003908:	429a      	cmp	r2, r3
 800390a:	d027      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800390c:	4b2e      	ldr	r3, [pc, #184]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800390e:	6a1b      	ldr	r3, [r3, #32]
 8003910:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003914:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003916:	4b2e      	ldr	r3, [pc, #184]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003918:	2201      	movs	r2, #1
 800391a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800391c:	4b2c      	ldr	r3, [pc, #176]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800391e:	2200      	movs	r2, #0
 8003920:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003922:	4a29      	ldr	r2, [pc, #164]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f003 0301 	and.w	r3, r3, #1
 800392e:	2b00      	cmp	r3, #0
 8003930:	d014      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003932:	f7fc ff03 	bl	800073c <HAL_GetTick>
 8003936:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003938:	e00a      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800393a:	f7fc feff 	bl	800073c <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	f241 3288 	movw	r2, #5000	; 0x1388
 8003948:	4293      	cmp	r3, r2
 800394a:	d901      	bls.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	e036      	b.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003950:	4b1d      	ldr	r3, [pc, #116]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003952:	6a1b      	ldr	r3, [r3, #32]
 8003954:	f003 0302 	and.w	r3, r3, #2
 8003958:	2b00      	cmp	r3, #0
 800395a:	d0ee      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800395c:	4b1a      	ldr	r3, [pc, #104]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800395e:	6a1b      	ldr	r3, [r3, #32]
 8003960:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	4917      	ldr	r1, [pc, #92]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800396a:	4313      	orrs	r3, r2
 800396c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800396e:	7dfb      	ldrb	r3, [r7, #23]
 8003970:	2b01      	cmp	r3, #1
 8003972:	d105      	bne.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003974:	4b14      	ldr	r3, [pc, #80]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003976:	69db      	ldr	r3, [r3, #28]
 8003978:	4a13      	ldr	r2, [pc, #76]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800397a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800397e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0302 	and.w	r3, r3, #2
 8003988:	2b00      	cmp	r3, #0
 800398a:	d008      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800398c:	4b0e      	ldr	r3, [pc, #56]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	490b      	ldr	r1, [pc, #44]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800399a:	4313      	orrs	r3, r2
 800399c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0310 	and.w	r3, r3, #16
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d008      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80039aa:	4b07      	ldr	r3, [pc, #28]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	4904      	ldr	r1, [pc, #16]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3718      	adds	r7, #24
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	40021000 	.word	0x40021000
 80039cc:	40007000 	.word	0x40007000
 80039d0:	42420440 	.word	0x42420440

080039d4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80039d4:	b590      	push	{r4, r7, lr}
 80039d6:	b08d      	sub	sp, #52	; 0x34
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80039dc:	4b5a      	ldr	r3, [pc, #360]	; (8003b48 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80039de:	f107 040c 	add.w	r4, r7, #12
 80039e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80039e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80039e8:	f240 2301 	movw	r3, #513	; 0x201
 80039ec:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80039ee:	2300      	movs	r3, #0
 80039f0:	627b      	str	r3, [r7, #36]	; 0x24
 80039f2:	2300      	movs	r3, #0
 80039f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039f6:	2300      	movs	r3, #0
 80039f8:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80039fa:	2300      	movs	r3, #0
 80039fc:	61fb      	str	r3, [r7, #28]
 80039fe:	2300      	movs	r3, #0
 8003a00:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2b10      	cmp	r3, #16
 8003a06:	d00a      	beq.n	8003a1e <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2b10      	cmp	r3, #16
 8003a0c:	f200 8091 	bhi.w	8003b32 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d04c      	beq.n	8003ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d07c      	beq.n	8003b16 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003a1c:	e089      	b.n	8003b32 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 8003a1e:	4b4b      	ldr	r3, [pc, #300]	; (8003b4c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003a24:	4b49      	ldr	r3, [pc, #292]	; (8003b4c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f000 8082 	beq.w	8003b36 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	0c9b      	lsrs	r3, r3, #18
 8003a36:	f003 030f 	and.w	r3, r3, #15
 8003a3a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003a3e:	4413      	add	r3, r2
 8003a40:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003a44:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d018      	beq.n	8003a82 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a50:	4b3e      	ldr	r3, [pc, #248]	; (8003b4c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	0c5b      	lsrs	r3, r3, #17
 8003a56:	f003 0301 	and.w	r3, r3, #1
 8003a5a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003a5e:	4413      	add	r3, r2
 8003a60:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003a64:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d00d      	beq.n	8003a8c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003a70:	4a37      	ldr	r2, [pc, #220]	; (8003b50 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8003a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a74:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a78:	6a3b      	ldr	r3, [r7, #32]
 8003a7a:	fb02 f303 	mul.w	r3, r2, r3
 8003a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a80:	e004      	b.n	8003a8c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a82:	6a3b      	ldr	r3, [r7, #32]
 8003a84:	4a33      	ldr	r2, [pc, #204]	; (8003b54 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8003a86:	fb02 f303 	mul.w	r3, r2, r3
 8003a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003a8c:	4b2f      	ldr	r3, [pc, #188]	; (8003b4c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a98:	d102      	bne.n	8003aa0 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8003a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a9c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003a9e:	e04a      	b.n	8003b36 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8003aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aa2:	005b      	lsls	r3, r3, #1
 8003aa4:	4a2c      	ldr	r2, [pc, #176]	; (8003b58 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8003aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aaa:	085b      	lsrs	r3, r3, #1
 8003aac:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003aae:	e042      	b.n	8003b36 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8003ab0:	4b26      	ldr	r3, [pc, #152]	; (8003b4c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003ab2:	6a1b      	ldr	r3, [r3, #32]
 8003ab4:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003abc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ac0:	d108      	bne.n	8003ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	f003 0302 	and.w	r3, r3, #2
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d003      	beq.n	8003ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8003acc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ad0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ad2:	e01f      	b.n	8003b14 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ada:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ade:	d109      	bne.n	8003af4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8003ae0:	4b1a      	ldr	r3, [pc, #104]	; (8003b4c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae4:	f003 0302 	and.w	r3, r3, #2
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d003      	beq.n	8003af4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8003aec:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003af0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003af2:	e00f      	b.n	8003b14 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003afa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003afe:	d11c      	bne.n	8003b3a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8003b00:	4b12      	ldr	r3, [pc, #72]	; (8003b4c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d016      	beq.n	8003b3a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8003b0c:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003b10:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003b12:	e012      	b.n	8003b3a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8003b14:	e011      	b.n	8003b3a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003b16:	f7ff fe75 	bl	8003804 <HAL_RCC_GetPCLK2Freq>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	4b0b      	ldr	r3, [pc, #44]	; (8003b4c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	0b9b      	lsrs	r3, r3, #14
 8003b22:	f003 0303 	and.w	r3, r3, #3
 8003b26:	3301      	adds	r3, #1
 8003b28:	005b      	lsls	r3, r3, #1
 8003b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b2e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003b30:	e004      	b.n	8003b3c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8003b32:	bf00      	nop
 8003b34:	e002      	b.n	8003b3c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8003b36:	bf00      	nop
 8003b38:	e000      	b.n	8003b3c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8003b3a:	bf00      	nop
    }
  }
  return (frequency);
 8003b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3734      	adds	r7, #52	; 0x34
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd90      	pop	{r4, r7, pc}
 8003b46:	bf00      	nop
 8003b48:	08007c90 	.word	0x08007c90
 8003b4c:	40021000 	.word	0x40021000
 8003b50:	007a1200 	.word	0x007a1200
 8003b54:	003d0900 	.word	0x003d0900
 8003b58:	aaaaaaab 	.word	0xaaaaaaab

08003b5c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003b5c:	b084      	sub	sp, #16
 8003b5e:	b480      	push	{r7}
 8003b60:	b083      	sub	sp, #12
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
 8003b66:	f107 0014 	add.w	r0, r7, #20
 8003b6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003b6e:	2300      	movs	r3, #0
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bc80      	pop	{r7}
 8003b78:	b004      	add	sp, #16
 8003b7a:	4770      	bx	lr

08003b7c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b085      	sub	sp, #20
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003b8c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003b90:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	b29a      	uxth	r2, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3714      	adds	r7, #20
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bc80      	pop	{r7}
 8003ba6:	4770      	bx	lr

08003ba8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b085      	sub	sp, #20
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003bb0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003bb4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003bbc:	b29a      	uxth	r2, r3
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	43db      	mvns	r3, r3
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	b29a      	uxth	r2, r3
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3714      	adds	r7, #20
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bc80      	pop	{r7}
 8003bda:	4770      	bx	lr

08003bdc <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	460b      	mov	r3, r1
 8003be6:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	370c      	adds	r7, #12
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bc80      	pop	{r7}
 8003bf2:	4770      	bx	lr

08003bf4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003bf4:	b084      	sub	sp, #16
 8003bf6:	b480      	push	{r7}
 8003bf8:	b083      	sub	sp, #12
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
 8003bfe:	f107 0014 	add.w	r0, r7, #20
 8003c02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2201      	movs	r2, #1
 8003c0a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003c26:	2300      	movs	r3, #0
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bc80      	pop	{r7}
 8003c30:	b004      	add	sp, #16
 8003c32:	4770      	bx	lr

08003c34 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b09b      	sub	sp, #108	; 0x6c
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	4413      	add	r3, r2
 8003c4e:	881b      	ldrh	r3, [r3, #0]
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c5a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	78db      	ldrb	r3, [r3, #3]
 8003c62:	2b03      	cmp	r3, #3
 8003c64:	d81f      	bhi.n	8003ca6 <USB_ActivateEndpoint+0x72>
 8003c66:	a201      	add	r2, pc, #4	; (adr r2, 8003c6c <USB_ActivateEndpoint+0x38>)
 8003c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c6c:	08003c7d 	.word	0x08003c7d
 8003c70:	08003c99 	.word	0x08003c99
 8003c74:	08003caf 	.word	0x08003caf
 8003c78:	08003c8b 	.word	0x08003c8b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003c7c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003c80:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c84:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003c88:	e012      	b.n	8003cb0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003c8a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003c8e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003c92:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003c96:	e00b      	b.n	8003cb0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003c98:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003c9c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ca0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003ca4:	e004      	b.n	8003cb0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8003cac:	e000      	b.n	8003cb0 <USB_ActivateEndpoint+0x7c>
      break;
 8003cae:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	441a      	add	r2, r3
 8003cba:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003cbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	4413      	add	r3, r2
 8003cdc:	881b      	ldrh	r3, [r3, #0]
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ce4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ce8:	b29a      	uxth	r2, r3
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	441a      	add	r2, r3
 8003d00:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003d04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	7b1b      	ldrb	r3, [r3, #12]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	f040 8149 	bne.w	8003fb4 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	785b      	ldrb	r3, [r3, #1]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	f000 8084 	beq.w	8003e34 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	617b      	str	r3, [r7, #20]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	461a      	mov	r2, r3
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	4413      	add	r3, r2
 8003d3e:	617b      	str	r3, [r7, #20]
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	011a      	lsls	r2, r3, #4
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	4413      	add	r3, r2
 8003d4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d4e:	613b      	str	r3, [r7, #16]
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	88db      	ldrh	r3, [r3, #6]
 8003d54:	085b      	lsrs	r3, r3, #1
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	005b      	lsls	r3, r3, #1
 8003d5a:	b29a      	uxth	r2, r3
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	4413      	add	r3, r2
 8003d6a:	881b      	ldrh	r3, [r3, #0]
 8003d6c:	81fb      	strh	r3, [r7, #14]
 8003d6e:	89fb      	ldrh	r3, [r7, #14]
 8003d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d01b      	beq.n	8003db0 <USB_ActivateEndpoint+0x17c>
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	4413      	add	r3, r2
 8003d82:	881b      	ldrh	r3, [r3, #0]
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d8e:	81bb      	strh	r3, [r7, #12]
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	441a      	add	r2, r3
 8003d9a:	89bb      	ldrh	r3, [r7, #12]
 8003d9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003da0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003da4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003da8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	78db      	ldrb	r3, [r3, #3]
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d020      	beq.n	8003dfa <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	4413      	add	r3, r2
 8003dc2:	881b      	ldrh	r3, [r3, #0]
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dce:	813b      	strh	r3, [r7, #8]
 8003dd0:	893b      	ldrh	r3, [r7, #8]
 8003dd2:	f083 0320 	eor.w	r3, r3, #32
 8003dd6:	813b      	strh	r3, [r7, #8]
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	441a      	add	r2, r3
 8003de2:	893b      	ldrh	r3, [r7, #8]
 8003de4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003de8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003dec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003df0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	8013      	strh	r3, [r2, #0]
 8003df8:	e27f      	b.n	80042fa <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	4413      	add	r3, r2
 8003e04:	881b      	ldrh	r3, [r3, #0]
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e10:	817b      	strh	r3, [r7, #10]
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	441a      	add	r2, r3
 8003e1c:	897b      	ldrh	r3, [r7, #10]
 8003e1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	8013      	strh	r3, [r2, #0]
 8003e32:	e262      	b.n	80042fa <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	461a      	mov	r2, r3
 8003e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e44:	4413      	add	r3, r2
 8003e46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	011a      	lsls	r2, r3, #4
 8003e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e50:	4413      	add	r3, r2
 8003e52:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003e56:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	88db      	ldrh	r3, [r3, #6]
 8003e5c:	085b      	lsrs	r3, r3, #1
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	005b      	lsls	r3, r3, #1
 8003e62:	b29a      	uxth	r2, r3
 8003e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e66:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	627b      	str	r3, [r7, #36]	; 0x24
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	461a      	mov	r2, r3
 8003e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e78:	4413      	add	r3, r2
 8003e7a:	627b      	str	r3, [r7, #36]	; 0x24
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	011a      	lsls	r2, r3, #4
 8003e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e84:	4413      	add	r3, r2
 8003e86:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003e8a:	623b      	str	r3, [r7, #32]
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	691b      	ldr	r3, [r3, #16]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d112      	bne.n	8003eba <USB_ActivateEndpoint+0x286>
 8003e94:	6a3b      	ldr	r3, [r7, #32]
 8003e96:	881b      	ldrh	r3, [r3, #0]
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003e9e:	b29a      	uxth	r2, r3
 8003ea0:	6a3b      	ldr	r3, [r7, #32]
 8003ea2:	801a      	strh	r2, [r3, #0]
 8003ea4:	6a3b      	ldr	r3, [r7, #32]
 8003ea6:	881b      	ldrh	r3, [r3, #0]
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003eae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003eb2:	b29a      	uxth	r2, r3
 8003eb4:	6a3b      	ldr	r3, [r7, #32]
 8003eb6:	801a      	strh	r2, [r3, #0]
 8003eb8:	e02f      	b.n	8003f1a <USB_ActivateEndpoint+0x2e6>
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	2b3e      	cmp	r3, #62	; 0x3e
 8003ec0:	d813      	bhi.n	8003eea <USB_ActivateEndpoint+0x2b6>
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	085b      	lsrs	r3, r3, #1
 8003ec8:	663b      	str	r3, [r7, #96]	; 0x60
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d002      	beq.n	8003edc <USB_ActivateEndpoint+0x2a8>
 8003ed6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ed8:	3301      	adds	r3, #1
 8003eda:	663b      	str	r3, [r7, #96]	; 0x60
 8003edc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	029b      	lsls	r3, r3, #10
 8003ee2:	b29a      	uxth	r2, r3
 8003ee4:	6a3b      	ldr	r3, [r7, #32]
 8003ee6:	801a      	strh	r2, [r3, #0]
 8003ee8:	e017      	b.n	8003f1a <USB_ActivateEndpoint+0x2e6>
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	095b      	lsrs	r3, r3, #5
 8003ef0:	663b      	str	r3, [r7, #96]	; 0x60
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	f003 031f 	and.w	r3, r3, #31
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d102      	bne.n	8003f04 <USB_ActivateEndpoint+0x2d0>
 8003efe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f00:	3b01      	subs	r3, #1
 8003f02:	663b      	str	r3, [r7, #96]	; 0x60
 8003f04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	029b      	lsls	r3, r3, #10
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f14:	b29a      	uxth	r2, r3
 8003f16:	6a3b      	ldr	r3, [r7, #32]
 8003f18:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	4413      	add	r3, r2
 8003f24:	881b      	ldrh	r3, [r3, #0]
 8003f26:	83fb      	strh	r3, [r7, #30]
 8003f28:	8bfb      	ldrh	r3, [r7, #30]
 8003f2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d01b      	beq.n	8003f6a <USB_ActivateEndpoint+0x336>
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	4413      	add	r3, r2
 8003f3c:	881b      	ldrh	r3, [r3, #0]
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f48:	83bb      	strh	r3, [r7, #28]
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	441a      	add	r2, r3
 8003f54:	8bbb      	ldrh	r3, [r7, #28]
 8003f56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f5e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	4413      	add	r3, r2
 8003f74:	881b      	ldrh	r3, [r3, #0]
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f80:	837b      	strh	r3, [r7, #26]
 8003f82:	8b7b      	ldrh	r3, [r7, #26]
 8003f84:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003f88:	837b      	strh	r3, [r7, #26]
 8003f8a:	8b7b      	ldrh	r3, [r7, #26]
 8003f8c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003f90:	837b      	strh	r3, [r7, #26]
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	441a      	add	r2, r3
 8003f9c:	8b7b      	ldrh	r3, [r7, #26]
 8003f9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fa2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003faa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	8013      	strh	r3, [r2, #0]
 8003fb2:	e1a2      	b.n	80042fa <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	4413      	add	r3, r2
 8003fbe:	881b      	ldrh	r3, [r3, #0]
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fca:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	441a      	add	r2, r3
 8003fd8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003fdc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fe0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fe4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003fe8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	65bb      	str	r3, [r7, #88]	; 0x58
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004000:	4413      	add	r3, r2
 8004002:	65bb      	str	r3, [r7, #88]	; 0x58
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	011a      	lsls	r2, r3, #4
 800400a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800400c:	4413      	add	r3, r2
 800400e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004012:	657b      	str	r3, [r7, #84]	; 0x54
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	891b      	ldrh	r3, [r3, #8]
 8004018:	085b      	lsrs	r3, r3, #1
 800401a:	b29b      	uxth	r3, r3
 800401c:	005b      	lsls	r3, r3, #1
 800401e:	b29a      	uxth	r2, r3
 8004020:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004022:	801a      	strh	r2, [r3, #0]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	653b      	str	r3, [r7, #80]	; 0x50
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800402e:	b29b      	uxth	r3, r3
 8004030:	461a      	mov	r2, r3
 8004032:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004034:	4413      	add	r3, r2
 8004036:	653b      	str	r3, [r7, #80]	; 0x50
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	011a      	lsls	r2, r3, #4
 800403e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004040:	4413      	add	r3, r2
 8004042:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004046:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	895b      	ldrh	r3, [r3, #10]
 800404c:	085b      	lsrs	r3, r3, #1
 800404e:	b29b      	uxth	r3, r3
 8004050:	005b      	lsls	r3, r3, #1
 8004052:	b29a      	uxth	r2, r3
 8004054:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004056:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	785b      	ldrb	r3, [r3, #1]
 800405c:	2b00      	cmp	r3, #0
 800405e:	f040 8091 	bne.w	8004184 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	4413      	add	r3, r2
 800406c:	881b      	ldrh	r3, [r3, #0]
 800406e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004070:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004072:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d01b      	beq.n	80040b2 <USB_ActivateEndpoint+0x47e>
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	4413      	add	r3, r2
 8004084:	881b      	ldrh	r3, [r3, #0]
 8004086:	b29b      	uxth	r3, r3
 8004088:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800408c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004090:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	441a      	add	r2, r3
 800409c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800409e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	4413      	add	r3, r2
 80040bc:	881b      	ldrh	r3, [r3, #0]
 80040be:	873b      	strh	r3, [r7, #56]	; 0x38
 80040c0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80040c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d01b      	beq.n	8004102 <USB_ActivateEndpoint+0x4ce>
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	4413      	add	r3, r2
 80040d4:	881b      	ldrh	r3, [r3, #0]
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040e0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	441a      	add	r2, r3
 80040ec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80040ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040fa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80040fe:	b29b      	uxth	r3, r3
 8004100:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	4413      	add	r3, r2
 800410c:	881b      	ldrh	r3, [r3, #0]
 800410e:	b29b      	uxth	r3, r3
 8004110:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004114:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004118:	86bb      	strh	r3, [r7, #52]	; 0x34
 800411a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800411c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004120:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004122:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004124:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004128:	86bb      	strh	r3, [r7, #52]	; 0x34
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	441a      	add	r2, r3
 8004134:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004136:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800413a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800413e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004142:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004146:	b29b      	uxth	r3, r3
 8004148:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	4413      	add	r3, r2
 8004154:	881b      	ldrh	r3, [r3, #0]
 8004156:	b29b      	uxth	r3, r3
 8004158:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800415c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004160:	867b      	strh	r3, [r7, #50]	; 0x32
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	441a      	add	r2, r3
 800416c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800416e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004172:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004176:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800417a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800417e:	b29b      	uxth	r3, r3
 8004180:	8013      	strh	r3, [r2, #0]
 8004182:	e0ba      	b.n	80042fa <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	4413      	add	r3, r2
 800418e:	881b      	ldrh	r3, [r3, #0]
 8004190:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004194:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004198:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d01d      	beq.n	80041dc <USB_ActivateEndpoint+0x5a8>
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	4413      	add	r3, r2
 80041aa:	881b      	ldrh	r3, [r3, #0]
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041b6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	441a      	add	r2, r3
 80041c4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80041c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041d8:	b29b      	uxth	r3, r3
 80041da:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	4413      	add	r3, r2
 80041e6:	881b      	ldrh	r3, [r3, #0]
 80041e8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80041ec:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80041f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d01d      	beq.n	8004234 <USB_ActivateEndpoint+0x600>
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	4413      	add	r3, r2
 8004202:	881b      	ldrh	r3, [r3, #0]
 8004204:	b29b      	uxth	r3, r3
 8004206:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800420a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800420e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	441a      	add	r2, r3
 800421c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004220:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004224:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004228:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800422c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004230:	b29b      	uxth	r3, r3
 8004232:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	78db      	ldrb	r3, [r3, #3]
 8004238:	2b01      	cmp	r3, #1
 800423a:	d024      	beq.n	8004286 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	781b      	ldrb	r3, [r3, #0]
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	4413      	add	r3, r2
 8004246:	881b      	ldrh	r3, [r3, #0]
 8004248:	b29b      	uxth	r3, r3
 800424a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800424e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004252:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004256:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800425a:	f083 0320 	eor.w	r3, r3, #32
 800425e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	441a      	add	r2, r3
 800426c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004270:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004274:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004278:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800427c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004280:	b29b      	uxth	r3, r3
 8004282:	8013      	strh	r3, [r2, #0]
 8004284:	e01d      	b.n	80042c2 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	781b      	ldrb	r3, [r3, #0]
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	4413      	add	r3, r2
 8004290:	881b      	ldrh	r3, [r3, #0]
 8004292:	b29b      	uxth	r3, r3
 8004294:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004298:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800429c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	441a      	add	r2, r3
 80042aa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80042ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042be:	b29b      	uxth	r3, r3
 80042c0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	4413      	add	r3, r2
 80042cc:	881b      	ldrh	r3, [r3, #0]
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042d8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	441a      	add	r2, r3
 80042e4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80042e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80042fa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80042fe:	4618      	mov	r0, r3
 8004300:	376c      	adds	r7, #108	; 0x6c
 8004302:	46bd      	mov	sp, r7
 8004304:	bc80      	pop	{r7}
 8004306:	4770      	bx	lr

08004308 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004308:	b480      	push	{r7}
 800430a:	b08d      	sub	sp, #52	; 0x34
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	7b1b      	ldrb	r3, [r3, #12]
 8004316:	2b00      	cmp	r3, #0
 8004318:	f040 808e 	bne.w	8004438 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	785b      	ldrb	r3, [r3, #1]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d044      	beq.n	80043ae <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	4413      	add	r3, r2
 800432e:	881b      	ldrh	r3, [r3, #0]
 8004330:	81bb      	strh	r3, [r7, #12]
 8004332:	89bb      	ldrh	r3, [r7, #12]
 8004334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004338:	2b00      	cmp	r3, #0
 800433a:	d01b      	beq.n	8004374 <USB_DeactivateEndpoint+0x6c>
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	4413      	add	r3, r2
 8004346:	881b      	ldrh	r3, [r3, #0]
 8004348:	b29b      	uxth	r3, r3
 800434a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800434e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004352:	817b      	strh	r3, [r7, #10]
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	781b      	ldrb	r3, [r3, #0]
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	441a      	add	r2, r3
 800435e:	897b      	ldrh	r3, [r7, #10]
 8004360:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004364:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004368:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800436c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004370:	b29b      	uxth	r3, r3
 8004372:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	4413      	add	r3, r2
 800437e:	881b      	ldrh	r3, [r3, #0]
 8004380:	b29b      	uxth	r3, r3
 8004382:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004386:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800438a:	813b      	strh	r3, [r7, #8]
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	441a      	add	r2, r3
 8004396:	893b      	ldrh	r3, [r7, #8]
 8004398:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800439c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	8013      	strh	r3, [r2, #0]
 80043ac:	e192      	b.n	80046d4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	4413      	add	r3, r2
 80043b8:	881b      	ldrh	r3, [r3, #0]
 80043ba:	827b      	strh	r3, [r7, #18]
 80043bc:	8a7b      	ldrh	r3, [r7, #18]
 80043be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d01b      	beq.n	80043fe <USB_DeactivateEndpoint+0xf6>
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	4413      	add	r3, r2
 80043d0:	881b      	ldrh	r3, [r3, #0]
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043dc:	823b      	strh	r3, [r7, #16]
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	441a      	add	r2, r3
 80043e8:	8a3b      	ldrh	r3, [r7, #16]
 80043ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80043f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	4413      	add	r3, r2
 8004408:	881b      	ldrh	r3, [r3, #0]
 800440a:	b29b      	uxth	r3, r3
 800440c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004410:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004414:	81fb      	strh	r3, [r7, #14]
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	441a      	add	r2, r3
 8004420:	89fb      	ldrh	r3, [r7, #14]
 8004422:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004426:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800442a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800442e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004432:	b29b      	uxth	r3, r3
 8004434:	8013      	strh	r3, [r2, #0]
 8004436:	e14d      	b.n	80046d4 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	785b      	ldrb	r3, [r3, #1]
 800443c:	2b00      	cmp	r3, #0
 800443e:	f040 80a5 	bne.w	800458c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	4413      	add	r3, r2
 800444c:	881b      	ldrh	r3, [r3, #0]
 800444e:	843b      	strh	r3, [r7, #32]
 8004450:	8c3b      	ldrh	r3, [r7, #32]
 8004452:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d01b      	beq.n	8004492 <USB_DeactivateEndpoint+0x18a>
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	781b      	ldrb	r3, [r3, #0]
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	4413      	add	r3, r2
 8004464:	881b      	ldrh	r3, [r3, #0]
 8004466:	b29b      	uxth	r3, r3
 8004468:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800446c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004470:	83fb      	strh	r3, [r7, #30]
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	441a      	add	r2, r3
 800447c:	8bfb      	ldrh	r3, [r7, #30]
 800447e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004482:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004486:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800448a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800448e:	b29b      	uxth	r3, r3
 8004490:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	781b      	ldrb	r3, [r3, #0]
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	4413      	add	r3, r2
 800449c:	881b      	ldrh	r3, [r3, #0]
 800449e:	83bb      	strh	r3, [r7, #28]
 80044a0:	8bbb      	ldrh	r3, [r7, #28]
 80044a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d01b      	beq.n	80044e2 <USB_DeactivateEndpoint+0x1da>
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	4413      	add	r3, r2
 80044b4:	881b      	ldrh	r3, [r3, #0]
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044c0:	837b      	strh	r3, [r7, #26]
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	441a      	add	r2, r3
 80044cc:	8b7b      	ldrh	r3, [r7, #26]
 80044ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044da:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80044de:	b29b      	uxth	r3, r3
 80044e0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	4413      	add	r3, r2
 80044ec:	881b      	ldrh	r3, [r3, #0]
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044f8:	833b      	strh	r3, [r7, #24]
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	441a      	add	r2, r3
 8004504:	8b3b      	ldrh	r3, [r7, #24]
 8004506:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800450a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800450e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004512:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004516:	b29b      	uxth	r3, r3
 8004518:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	4413      	add	r3, r2
 8004524:	881b      	ldrh	r3, [r3, #0]
 8004526:	b29b      	uxth	r3, r3
 8004528:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800452c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004530:	82fb      	strh	r3, [r7, #22]
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	441a      	add	r2, r3
 800453c:	8afb      	ldrh	r3, [r7, #22]
 800453e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004542:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004546:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800454a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800454e:	b29b      	uxth	r3, r3
 8004550:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	4413      	add	r3, r2
 800455c:	881b      	ldrh	r3, [r3, #0]
 800455e:	b29b      	uxth	r3, r3
 8004560:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004564:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004568:	82bb      	strh	r3, [r7, #20]
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	441a      	add	r2, r3
 8004574:	8abb      	ldrh	r3, [r7, #20]
 8004576:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800457a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800457e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004582:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004586:	b29b      	uxth	r3, r3
 8004588:	8013      	strh	r3, [r2, #0]
 800458a:	e0a3      	b.n	80046d4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	4413      	add	r3, r2
 8004596:	881b      	ldrh	r3, [r3, #0]
 8004598:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800459a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800459c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d01b      	beq.n	80045dc <USB_DeactivateEndpoint+0x2d4>
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	4413      	add	r3, r2
 80045ae:	881b      	ldrh	r3, [r3, #0]
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ba:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	441a      	add	r2, r3
 80045c6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80045c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80045d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045d8:	b29b      	uxth	r3, r3
 80045da:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	4413      	add	r3, r2
 80045e6:	881b      	ldrh	r3, [r3, #0]
 80045e8:	857b      	strh	r3, [r7, #42]	; 0x2a
 80045ea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80045ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d01b      	beq.n	800462c <USB_DeactivateEndpoint+0x324>
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	4413      	add	r3, r2
 80045fe:	881b      	ldrh	r3, [r3, #0]
 8004600:	b29b      	uxth	r3, r3
 8004602:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800460a:	853b      	strh	r3, [r7, #40]	; 0x28
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	441a      	add	r2, r3
 8004616:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004618:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800461c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004620:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004624:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004628:	b29b      	uxth	r3, r3
 800462a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	4413      	add	r3, r2
 8004636:	881b      	ldrh	r3, [r3, #0]
 8004638:	b29b      	uxth	r3, r3
 800463a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800463e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004642:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	441a      	add	r2, r3
 800464e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004650:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004654:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004658:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800465c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004660:	b29b      	uxth	r3, r3
 8004662:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	4413      	add	r3, r2
 800466e:	881b      	ldrh	r3, [r3, #0]
 8004670:	b29b      	uxth	r3, r3
 8004672:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004676:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800467a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	441a      	add	r2, r3
 8004686:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004688:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800468c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004690:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004698:	b29b      	uxth	r3, r3
 800469a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	4413      	add	r3, r2
 80046a6:	881b      	ldrh	r3, [r3, #0]
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046b2:	847b      	strh	r3, [r7, #34]	; 0x22
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	441a      	add	r2, r3
 80046be:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80046c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80046d4:	2300      	movs	r3, #0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3734      	adds	r7, #52	; 0x34
 80046da:	46bd      	mov	sp, r7
 80046dc:	bc80      	pop	{r7}
 80046de:	4770      	bx	lr

080046e0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b0cc      	sub	sp, #304	; 0x130
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	1d3b      	adds	r3, r7, #4
 80046e8:	6018      	str	r0, [r3, #0]
 80046ea:	463b      	mov	r3, r7
 80046ec:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80046ee:	463b      	mov	r3, r7
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	785b      	ldrb	r3, [r3, #1]
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	f040 872e 	bne.w	8005556 <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80046fa:	463b      	mov	r3, r7
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	699a      	ldr	r2, [r3, #24]
 8004700:	463b      	mov	r3, r7
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	429a      	cmp	r2, r3
 8004708:	d905      	bls.n	8004716 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800470a:	463b      	mov	r3, r7
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004714:	e004      	b.n	8004720 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004716:	463b      	mov	r3, r7
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	699b      	ldr	r3, [r3, #24]
 800471c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004720:	463b      	mov	r3, r7
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	7b1b      	ldrb	r3, [r3, #12]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d134      	bne.n	8004794 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800472a:	463b      	mov	r3, r7
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	6959      	ldr	r1, [r3, #20]
 8004730:	463b      	mov	r3, r7
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	88da      	ldrh	r2, [r3, #6]
 8004736:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800473a:	b29b      	uxth	r3, r3
 800473c:	1d38      	adds	r0, r7, #4
 800473e:	6800      	ldr	r0, [r0, #0]
 8004740:	f001 fc03 	bl	8005f4a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004744:	f107 0310 	add.w	r3, r7, #16
 8004748:	1d3a      	adds	r2, r7, #4
 800474a:	6812      	ldr	r2, [r2, #0]
 800474c:	601a      	str	r2, [r3, #0]
 800474e:	1d3b      	adds	r3, r7, #4
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004756:	b29b      	uxth	r3, r3
 8004758:	4619      	mov	r1, r3
 800475a:	f107 0310 	add.w	r3, r7, #16
 800475e:	f107 0210 	add.w	r2, r7, #16
 8004762:	6812      	ldr	r2, [r2, #0]
 8004764:	440a      	add	r2, r1
 8004766:	601a      	str	r2, [r3, #0]
 8004768:	463b      	mov	r3, r7
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	011a      	lsls	r2, r3, #4
 8004770:	f107 0310 	add.w	r3, r7, #16
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4413      	add	r3, r2
 8004778:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800477c:	f107 030c 	add.w	r3, r7, #12
 8004780:	601a      	str	r2, [r3, #0]
 8004782:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004786:	b29a      	uxth	r2, r3
 8004788:	f107 030c 	add.w	r3, r7, #12
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	801a      	strh	r2, [r3, #0]
 8004790:	f000 beac 	b.w	80054ec <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004794:	463b      	mov	r3, r7
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	78db      	ldrb	r3, [r3, #3]
 800479a:	2b02      	cmp	r3, #2
 800479c:	f040 838c 	bne.w	8004eb8 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80047a0:	463b      	mov	r3, r7
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	6a1a      	ldr	r2, [r3, #32]
 80047a6:	463b      	mov	r3, r7
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	691b      	ldr	r3, [r3, #16]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	f240 8330 	bls.w	8004e12 <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80047b2:	1d3b      	adds	r3, r7, #4
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	463b      	mov	r3, r7
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	4413      	add	r3, r2
 80047c0:	881b      	ldrh	r3, [r3, #0]
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047cc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80047d0:	1d3b      	adds	r3, r7, #4
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	463b      	mov	r3, r7
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	441a      	add	r2, r3
 80047de:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80047e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047ea:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80047ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80047f6:	463b      	mov	r3, r7
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	6a1a      	ldr	r2, [r3, #32]
 80047fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004800:	1ad2      	subs	r2, r2, r3
 8004802:	463b      	mov	r3, r7
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004808:	1d3b      	adds	r3, r7, #4
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	463b      	mov	r3, r7
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	4413      	add	r3, r2
 8004816:	881b      	ldrh	r3, [r3, #0]
 8004818:	b29b      	uxth	r3, r3
 800481a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800481e:	2b00      	cmp	r3, #0
 8004820:	f000 819e 	beq.w	8004b60 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004824:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004828:	1d3a      	adds	r2, r7, #4
 800482a:	6812      	ldr	r2, [r2, #0]
 800482c:	601a      	str	r2, [r3, #0]
 800482e:	463b      	mov	r3, r7
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	785b      	ldrb	r3, [r3, #1]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d17a      	bne.n	800492e <USB_EPStartXfer+0x24e>
 8004838:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800483c:	1d3a      	adds	r2, r7, #4
 800483e:	6812      	ldr	r2, [r2, #0]
 8004840:	601a      	str	r2, [r3, #0]
 8004842:	1d3b      	adds	r3, r7, #4
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800484a:	b29b      	uxth	r3, r3
 800484c:	4619      	mov	r1, r3
 800484e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004852:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004856:	6812      	ldr	r2, [r2, #0]
 8004858:	440a      	add	r2, r1
 800485a:	601a      	str	r2, [r3, #0]
 800485c:	463b      	mov	r3, r7
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	011a      	lsls	r2, r3, #4
 8004864:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4413      	add	r3, r2
 800486c:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004870:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004874:	601a      	str	r2, [r3, #0]
 8004876:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800487a:	2b00      	cmp	r3, #0
 800487c:	d11a      	bne.n	80048b4 <USB_EPStartXfer+0x1d4>
 800487e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	881b      	ldrh	r3, [r3, #0]
 8004886:	b29b      	uxth	r3, r3
 8004888:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800488c:	b29a      	uxth	r2, r3
 800488e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	801a      	strh	r2, [r3, #0]
 8004896:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	881b      	ldrh	r3, [r3, #0]
 800489e:	b29b      	uxth	r3, r3
 80048a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048a8:	b29a      	uxth	r2, r3
 80048aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	801a      	strh	r2, [r3, #0]
 80048b2:	e062      	b.n	800497a <USB_EPStartXfer+0x29a>
 80048b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048b8:	2b3e      	cmp	r3, #62	; 0x3e
 80048ba:	d819      	bhi.n	80048f0 <USB_EPStartXfer+0x210>
 80048bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048c0:	085b      	lsrs	r3, r3, #1
 80048c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80048c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048ca:	f003 0301 	and.w	r3, r3, #1
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d004      	beq.n	80048dc <USB_EPStartXfer+0x1fc>
 80048d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80048d6:	3301      	adds	r3, #1
 80048d8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80048dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	029b      	lsls	r3, r3, #10
 80048e4:	b29a      	uxth	r2, r3
 80048e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	801a      	strh	r2, [r3, #0]
 80048ee:	e044      	b.n	800497a <USB_EPStartXfer+0x29a>
 80048f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048f4:	095b      	lsrs	r3, r3, #5
 80048f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80048fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048fe:	f003 031f 	and.w	r3, r3, #31
 8004902:	2b00      	cmp	r3, #0
 8004904:	d104      	bne.n	8004910 <USB_EPStartXfer+0x230>
 8004906:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800490a:	3b01      	subs	r3, #1
 800490c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004910:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004914:	b29b      	uxth	r3, r3
 8004916:	029b      	lsls	r3, r3, #10
 8004918:	b29b      	uxth	r3, r3
 800491a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800491e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004922:	b29a      	uxth	r2, r3
 8004924:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	801a      	strh	r2, [r3, #0]
 800492c:	e025      	b.n	800497a <USB_EPStartXfer+0x29a>
 800492e:	463b      	mov	r3, r7
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	785b      	ldrb	r3, [r3, #1]
 8004934:	2b01      	cmp	r3, #1
 8004936:	d120      	bne.n	800497a <USB_EPStartXfer+0x29a>
 8004938:	1d3b      	adds	r3, r7, #4
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004940:	b29b      	uxth	r3, r3
 8004942:	4619      	mov	r1, r3
 8004944:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004948:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800494c:	6812      	ldr	r2, [r2, #0]
 800494e:	440a      	add	r2, r1
 8004950:	601a      	str	r2, [r3, #0]
 8004952:	463b      	mov	r3, r7
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	011a      	lsls	r2, r3, #4
 800495a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4413      	add	r3, r2
 8004962:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004966:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800496a:	601a      	str	r2, [r3, #0]
 800496c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004970:	b29a      	uxth	r2, r3
 8004972:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800497a:	463b      	mov	r3, r7
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	895b      	ldrh	r3, [r3, #10]
 8004980:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004984:	463b      	mov	r3, r7
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	6959      	ldr	r1, [r3, #20]
 800498a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800498e:	b29b      	uxth	r3, r3
 8004990:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004994:	1d38      	adds	r0, r7, #4
 8004996:	6800      	ldr	r0, [r0, #0]
 8004998:	f001 fad7 	bl	8005f4a <USB_WritePMA>
            ep->xfer_buff += len;
 800499c:	463b      	mov	r3, r7
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	695a      	ldr	r2, [r3, #20]
 80049a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049a6:	441a      	add	r2, r3
 80049a8:	463b      	mov	r3, r7
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80049ae:	463b      	mov	r3, r7
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	6a1a      	ldr	r2, [r3, #32]
 80049b4:	463b      	mov	r3, r7
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	691b      	ldr	r3, [r3, #16]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d909      	bls.n	80049d2 <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 80049be:	463b      	mov	r3, r7
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	6a1a      	ldr	r2, [r3, #32]
 80049c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049c8:	1ad2      	subs	r2, r2, r3
 80049ca:	463b      	mov	r3, r7
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	621a      	str	r2, [r3, #32]
 80049d0:	e008      	b.n	80049e4 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 80049d2:	463b      	mov	r3, r7
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	6a1b      	ldr	r3, [r3, #32]
 80049d8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80049dc:	463b      	mov	r3, r7
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2200      	movs	r2, #0
 80049e2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80049e4:	463b      	mov	r3, r7
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	785b      	ldrb	r3, [r3, #1]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d17a      	bne.n	8004ae4 <USB_EPStartXfer+0x404>
 80049ee:	f107 0318 	add.w	r3, r7, #24
 80049f2:	1d3a      	adds	r2, r7, #4
 80049f4:	6812      	ldr	r2, [r2, #0]
 80049f6:	601a      	str	r2, [r3, #0]
 80049f8:	1d3b      	adds	r3, r7, #4
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	4619      	mov	r1, r3
 8004a04:	f107 0318 	add.w	r3, r7, #24
 8004a08:	f107 0218 	add.w	r2, r7, #24
 8004a0c:	6812      	ldr	r2, [r2, #0]
 8004a0e:	440a      	add	r2, r1
 8004a10:	601a      	str	r2, [r3, #0]
 8004a12:	463b      	mov	r3, r7
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	011a      	lsls	r2, r3, #4
 8004a1a:	f107 0318 	add.w	r3, r7, #24
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4413      	add	r3, r2
 8004a22:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004a26:	f107 0314 	add.w	r3, r7, #20
 8004a2a:	601a      	str	r2, [r3, #0]
 8004a2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d11a      	bne.n	8004a6a <USB_EPStartXfer+0x38a>
 8004a34:	f107 0314 	add.w	r3, r7, #20
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	881b      	ldrh	r3, [r3, #0]
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004a42:	b29a      	uxth	r2, r3
 8004a44:	f107 0314 	add.w	r3, r7, #20
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	801a      	strh	r2, [r3, #0]
 8004a4c:	f107 0314 	add.w	r3, r7, #20
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	881b      	ldrh	r3, [r3, #0]
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a5e:	b29a      	uxth	r2, r3
 8004a60:	f107 0314 	add.w	r3, r7, #20
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	801a      	strh	r2, [r3, #0]
 8004a68:	e067      	b.n	8004b3a <USB_EPStartXfer+0x45a>
 8004a6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a6e:	2b3e      	cmp	r3, #62	; 0x3e
 8004a70:	d819      	bhi.n	8004aa6 <USB_EPStartXfer+0x3c6>
 8004a72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a76:	085b      	lsrs	r3, r3, #1
 8004a78:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004a7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a80:	f003 0301 	and.w	r3, r3, #1
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d004      	beq.n	8004a92 <USB_EPStartXfer+0x3b2>
 8004a88:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004a8c:	3301      	adds	r3, #1
 8004a8e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004a92:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	029b      	lsls	r3, r3, #10
 8004a9a:	b29a      	uxth	r2, r3
 8004a9c:	f107 0314 	add.w	r3, r7, #20
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	801a      	strh	r2, [r3, #0]
 8004aa4:	e049      	b.n	8004b3a <USB_EPStartXfer+0x45a>
 8004aa6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004aaa:	095b      	lsrs	r3, r3, #5
 8004aac:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004ab0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ab4:	f003 031f 	and.w	r3, r3, #31
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d104      	bne.n	8004ac6 <USB_EPStartXfer+0x3e6>
 8004abc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004ac0:	3b01      	subs	r3, #1
 8004ac2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004ac6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	029b      	lsls	r3, r3, #10
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ad4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ad8:	b29a      	uxth	r2, r3
 8004ada:	f107 0314 	add.w	r3, r7, #20
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	801a      	strh	r2, [r3, #0]
 8004ae2:	e02a      	b.n	8004b3a <USB_EPStartXfer+0x45a>
 8004ae4:	463b      	mov	r3, r7
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	785b      	ldrb	r3, [r3, #1]
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d125      	bne.n	8004b3a <USB_EPStartXfer+0x45a>
 8004aee:	f107 0320 	add.w	r3, r7, #32
 8004af2:	1d3a      	adds	r2, r7, #4
 8004af4:	6812      	ldr	r2, [r2, #0]
 8004af6:	601a      	str	r2, [r3, #0]
 8004af8:	1d3b      	adds	r3, r7, #4
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	4619      	mov	r1, r3
 8004b04:	f107 0320 	add.w	r3, r7, #32
 8004b08:	f107 0220 	add.w	r2, r7, #32
 8004b0c:	6812      	ldr	r2, [r2, #0]
 8004b0e:	440a      	add	r2, r1
 8004b10:	601a      	str	r2, [r3, #0]
 8004b12:	463b      	mov	r3, r7
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	011a      	lsls	r2, r3, #4
 8004b1a:	f107 0320 	add.w	r3, r7, #32
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4413      	add	r3, r2
 8004b22:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004b26:	f107 031c 	add.w	r3, r7, #28
 8004b2a:	601a      	str	r2, [r3, #0]
 8004b2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b30:	b29a      	uxth	r2, r3
 8004b32:	f107 031c 	add.w	r3, r7, #28
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004b3a:	463b      	mov	r3, r7
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	891b      	ldrh	r3, [r3, #8]
 8004b40:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004b44:	463b      	mov	r3, r7
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	6959      	ldr	r1, [r3, #20]
 8004b4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004b54:	1d38      	adds	r0, r7, #4
 8004b56:	6800      	ldr	r0, [r0, #0]
 8004b58:	f001 f9f7 	bl	8005f4a <USB_WritePMA>
 8004b5c:	f000 bcc6 	b.w	80054ec <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004b60:	463b      	mov	r3, r7
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	785b      	ldrb	r3, [r3, #1]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d164      	bne.n	8004c34 <USB_EPStartXfer+0x554>
 8004b6a:	1d3b      	adds	r3, r7, #4
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b70:	1d3b      	adds	r3, r7, #4
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b7e:	4413      	add	r3, r2
 8004b80:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b82:	463b      	mov	r3, r7
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	011a      	lsls	r2, r3, #4
 8004b8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b8c:	4413      	add	r3, r2
 8004b8e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004b92:	647b      	str	r3, [r7, #68]	; 0x44
 8004b94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d112      	bne.n	8004bc2 <USB_EPStartXfer+0x4e2>
 8004b9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b9e:	881b      	ldrh	r3, [r3, #0]
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ba6:	b29a      	uxth	r2, r3
 8004ba8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004baa:	801a      	strh	r2, [r3, #0]
 8004bac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bae:	881b      	ldrh	r3, [r3, #0]
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bba:	b29a      	uxth	r2, r3
 8004bbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bbe:	801a      	strh	r2, [r3, #0]
 8004bc0:	e057      	b.n	8004c72 <USB_EPStartXfer+0x592>
 8004bc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bc6:	2b3e      	cmp	r3, #62	; 0x3e
 8004bc8:	d817      	bhi.n	8004bfa <USB_EPStartXfer+0x51a>
 8004bca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bce:	085b      	lsrs	r3, r3, #1
 8004bd0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004bd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bd8:	f003 0301 	and.w	r3, r3, #1
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d004      	beq.n	8004bea <USB_EPStartXfer+0x50a>
 8004be0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004be4:	3301      	adds	r3, #1
 8004be6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004bea:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	029b      	lsls	r3, r3, #10
 8004bf2:	b29a      	uxth	r2, r3
 8004bf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bf6:	801a      	strh	r2, [r3, #0]
 8004bf8:	e03b      	b.n	8004c72 <USB_EPStartXfer+0x592>
 8004bfa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bfe:	095b      	lsrs	r3, r3, #5
 8004c00:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004c04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c08:	f003 031f 	and.w	r3, r3, #31
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d104      	bne.n	8004c1a <USB_EPStartXfer+0x53a>
 8004c10:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004c14:	3b01      	subs	r3, #1
 8004c16:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004c1a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	029b      	lsls	r3, r3, #10
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c2c:	b29a      	uxth	r2, r3
 8004c2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c30:	801a      	strh	r2, [r3, #0]
 8004c32:	e01e      	b.n	8004c72 <USB_EPStartXfer+0x592>
 8004c34:	463b      	mov	r3, r7
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	785b      	ldrb	r3, [r3, #1]
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d119      	bne.n	8004c72 <USB_EPStartXfer+0x592>
 8004c3e:	1d3b      	adds	r3, r7, #4
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	653b      	str	r3, [r7, #80]	; 0x50
 8004c44:	1d3b      	adds	r3, r7, #4
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	461a      	mov	r2, r3
 8004c50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c52:	4413      	add	r3, r2
 8004c54:	653b      	str	r3, [r7, #80]	; 0x50
 8004c56:	463b      	mov	r3, r7
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	011a      	lsls	r2, r3, #4
 8004c5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c60:	4413      	add	r3, r2
 8004c62:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004c66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c6c:	b29a      	uxth	r2, r3
 8004c6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c70:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004c72:	463b      	mov	r3, r7
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	891b      	ldrh	r3, [r3, #8]
 8004c78:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004c7c:	463b      	mov	r3, r7
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	6959      	ldr	r1, [r3, #20]
 8004c82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004c8c:	1d38      	adds	r0, r7, #4
 8004c8e:	6800      	ldr	r0, [r0, #0]
 8004c90:	f001 f95b 	bl	8005f4a <USB_WritePMA>
            ep->xfer_buff += len;
 8004c94:	463b      	mov	r3, r7
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	695a      	ldr	r2, [r3, #20]
 8004c9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c9e:	441a      	add	r2, r3
 8004ca0:	463b      	mov	r3, r7
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004ca6:	463b      	mov	r3, r7
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	6a1a      	ldr	r2, [r3, #32]
 8004cac:	463b      	mov	r3, r7
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d909      	bls.n	8004cca <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 8004cb6:	463b      	mov	r3, r7
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	6a1a      	ldr	r2, [r3, #32]
 8004cbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cc0:	1ad2      	subs	r2, r2, r3
 8004cc2:	463b      	mov	r3, r7
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	621a      	str	r2, [r3, #32]
 8004cc8:	e008      	b.n	8004cdc <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8004cca:	463b      	mov	r3, r7
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	6a1b      	ldr	r3, [r3, #32]
 8004cd0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8004cd4:	463b      	mov	r3, r7
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004cdc:	1d3b      	adds	r3, r7, #4
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	643b      	str	r3, [r7, #64]	; 0x40
 8004ce2:	463b      	mov	r3, r7
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	785b      	ldrb	r3, [r3, #1]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d164      	bne.n	8004db6 <USB_EPStartXfer+0x6d6>
 8004cec:	1d3b      	adds	r3, r7, #4
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	63bb      	str	r3, [r7, #56]	; 0x38
 8004cf2:	1d3b      	adds	r3, r7, #4
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d00:	4413      	add	r3, r2
 8004d02:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d04:	463b      	mov	r3, r7
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	011a      	lsls	r2, r3, #4
 8004d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d0e:	4413      	add	r3, r2
 8004d10:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004d14:	637b      	str	r3, [r7, #52]	; 0x34
 8004d16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d112      	bne.n	8004d44 <USB_EPStartXfer+0x664>
 8004d1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d20:	881b      	ldrh	r3, [r3, #0]
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004d28:	b29a      	uxth	r2, r3
 8004d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d2c:	801a      	strh	r2, [r3, #0]
 8004d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d30:	881b      	ldrh	r3, [r3, #0]
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d3c:	b29a      	uxth	r2, r3
 8004d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d40:	801a      	strh	r2, [r3, #0]
 8004d42:	e054      	b.n	8004dee <USB_EPStartXfer+0x70e>
 8004d44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d48:	2b3e      	cmp	r3, #62	; 0x3e
 8004d4a:	d817      	bhi.n	8004d7c <USB_EPStartXfer+0x69c>
 8004d4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d50:	085b      	lsrs	r3, r3, #1
 8004d52:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004d56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d5a:	f003 0301 	and.w	r3, r3, #1
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d004      	beq.n	8004d6c <USB_EPStartXfer+0x68c>
 8004d62:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004d66:	3301      	adds	r3, #1
 8004d68:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004d6c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	029b      	lsls	r3, r3, #10
 8004d74:	b29a      	uxth	r2, r3
 8004d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d78:	801a      	strh	r2, [r3, #0]
 8004d7a:	e038      	b.n	8004dee <USB_EPStartXfer+0x70e>
 8004d7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d80:	095b      	lsrs	r3, r3, #5
 8004d82:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004d86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d8a:	f003 031f 	and.w	r3, r3, #31
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d104      	bne.n	8004d9c <USB_EPStartXfer+0x6bc>
 8004d92:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004d96:	3b01      	subs	r3, #1
 8004d98:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004d9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	029b      	lsls	r3, r3, #10
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004daa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dae:	b29a      	uxth	r2, r3
 8004db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004db2:	801a      	strh	r2, [r3, #0]
 8004db4:	e01b      	b.n	8004dee <USB_EPStartXfer+0x70e>
 8004db6:	463b      	mov	r3, r7
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	785b      	ldrb	r3, [r3, #1]
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d116      	bne.n	8004dee <USB_EPStartXfer+0x70e>
 8004dc0:	1d3b      	adds	r3, r7, #4
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	461a      	mov	r2, r3
 8004dcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dce:	4413      	add	r3, r2
 8004dd0:	643b      	str	r3, [r7, #64]	; 0x40
 8004dd2:	463b      	mov	r3, r7
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	011a      	lsls	r2, r3, #4
 8004dda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ddc:	4413      	add	r3, r2
 8004dde:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004de2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004de4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004de8:	b29a      	uxth	r2, r3
 8004dea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004dee:	463b      	mov	r3, r7
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	895b      	ldrh	r3, [r3, #10]
 8004df4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004df8:	463b      	mov	r3, r7
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	6959      	ldr	r1, [r3, #20]
 8004dfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004e08:	1d38      	adds	r0, r7, #4
 8004e0a:	6800      	ldr	r0, [r0, #0]
 8004e0c:	f001 f89d 	bl	8005f4a <USB_WritePMA>
 8004e10:	e36c      	b.n	80054ec <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004e12:	463b      	mov	r3, r7
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	6a1b      	ldr	r3, [r3, #32]
 8004e18:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8004e1c:	1d3b      	adds	r3, r7, #4
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	463b      	mov	r3, r7
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	4413      	add	r3, r2
 8004e2a:	881b      	ldrh	r3, [r3, #0]
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004e32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e36:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004e3a:	1d3b      	adds	r3, r7, #4
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	463b      	mov	r3, r7
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	441a      	add	r2, r3
 8004e48:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004e4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004e60:	1d3b      	adds	r3, r7, #4
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e66:	1d3b      	adds	r3, r7, #4
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	461a      	mov	r2, r3
 8004e72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e74:	4413      	add	r3, r2
 8004e76:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e78:	463b      	mov	r3, r7
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	011a      	lsls	r2, r3, #4
 8004e80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e82:	4413      	add	r3, r2
 8004e84:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004e88:	65bb      	str	r3, [r7, #88]	; 0x58
 8004e8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e8e:	b29a      	uxth	r2, r3
 8004e90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e92:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004e94:	463b      	mov	r3, r7
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	891b      	ldrh	r3, [r3, #8]
 8004e9a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004e9e:	463b      	mov	r3, r7
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	6959      	ldr	r1, [r3, #20]
 8004ea4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004eae:	1d38      	adds	r0, r7, #4
 8004eb0:	6800      	ldr	r0, [r0, #0]
 8004eb2:	f001 f84a 	bl	8005f4a <USB_WritePMA>
 8004eb6:	e319      	b.n	80054ec <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8004eb8:	1d3b      	adds	r3, r7, #4
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	463b      	mov	r3, r7
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	781b      	ldrb	r3, [r3, #0]
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	4413      	add	r3, r2
 8004ec6:	881b      	ldrh	r3, [r3, #0]
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ed2:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8004ed6:	1d3b      	adds	r3, r7, #4
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	463b      	mov	r3, r7
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	781b      	ldrb	r3, [r3, #0]
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	441a      	add	r2, r3
 8004ee4:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8004ee8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004eec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ef0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004ef4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8004efc:	463b      	mov	r3, r7
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	6a1a      	ldr	r2, [r3, #32]
 8004f02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f06:	1ad2      	subs	r2, r2, r3
 8004f08:	463b      	mov	r3, r7
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004f0e:	1d3b      	adds	r3, r7, #4
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	463b      	mov	r3, r7
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	4413      	add	r3, r2
 8004f1c:	881b      	ldrh	r3, [r3, #0]
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	f000 8162 	beq.w	80051ee <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004f2a:	1d3b      	adds	r3, r7, #4
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004f32:	463b      	mov	r3, r7
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	785b      	ldrb	r3, [r3, #1]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d164      	bne.n	8005006 <USB_EPStartXfer+0x926>
 8004f3c:	1d3b      	adds	r3, r7, #4
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	67bb      	str	r3, [r7, #120]	; 0x78
 8004f42:	1d3b      	adds	r3, r7, #4
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	461a      	mov	r2, r3
 8004f4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f50:	4413      	add	r3, r2
 8004f52:	67bb      	str	r3, [r7, #120]	; 0x78
 8004f54:	463b      	mov	r3, r7
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	011a      	lsls	r2, r3, #4
 8004f5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f5e:	4413      	add	r3, r2
 8004f60:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004f64:	677b      	str	r3, [r7, #116]	; 0x74
 8004f66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d112      	bne.n	8004f94 <USB_EPStartXfer+0x8b4>
 8004f6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f70:	881b      	ldrh	r3, [r3, #0]
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f78:	b29a      	uxth	r2, r3
 8004f7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f7c:	801a      	strh	r2, [r3, #0]
 8004f7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f80:	881b      	ldrh	r3, [r3, #0]
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f8c:	b29a      	uxth	r2, r3
 8004f8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f90:	801a      	strh	r2, [r3, #0]
 8004f92:	e057      	b.n	8005044 <USB_EPStartXfer+0x964>
 8004f94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f98:	2b3e      	cmp	r3, #62	; 0x3e
 8004f9a:	d817      	bhi.n	8004fcc <USB_EPStartXfer+0x8ec>
 8004f9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fa0:	085b      	lsrs	r3, r3, #1
 8004fa2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004fa6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004faa:	f003 0301 	and.w	r3, r3, #1
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d004      	beq.n	8004fbc <USB_EPStartXfer+0x8dc>
 8004fb2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004fb6:	3301      	adds	r3, #1
 8004fb8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004fbc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	029b      	lsls	r3, r3, #10
 8004fc4:	b29a      	uxth	r2, r3
 8004fc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fc8:	801a      	strh	r2, [r3, #0]
 8004fca:	e03b      	b.n	8005044 <USB_EPStartXfer+0x964>
 8004fcc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fd0:	095b      	lsrs	r3, r3, #5
 8004fd2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004fd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fda:	f003 031f 	and.w	r3, r3, #31
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d104      	bne.n	8004fec <USB_EPStartXfer+0x90c>
 8004fe2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004fe6:	3b01      	subs	r3, #1
 8004fe8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004fec:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	029b      	lsls	r3, r3, #10
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ffa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ffe:	b29a      	uxth	r2, r3
 8005000:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005002:	801a      	strh	r2, [r3, #0]
 8005004:	e01e      	b.n	8005044 <USB_EPStartXfer+0x964>
 8005006:	463b      	mov	r3, r7
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	785b      	ldrb	r3, [r3, #1]
 800500c:	2b01      	cmp	r3, #1
 800500e:	d119      	bne.n	8005044 <USB_EPStartXfer+0x964>
 8005010:	1d3b      	adds	r3, r7, #4
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005018:	b29b      	uxth	r3, r3
 800501a:	461a      	mov	r2, r3
 800501c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005020:	4413      	add	r3, r2
 8005022:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005026:	463b      	mov	r3, r7
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	011a      	lsls	r2, r3, #4
 800502e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005032:	4413      	add	r3, r2
 8005034:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005038:	67fb      	str	r3, [r7, #124]	; 0x7c
 800503a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800503e:	b29a      	uxth	r2, r3
 8005040:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005042:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005044:	463b      	mov	r3, r7
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	895b      	ldrh	r3, [r3, #10]
 800504a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800504e:	463b      	mov	r3, r7
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	6959      	ldr	r1, [r3, #20]
 8005054:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005058:	b29b      	uxth	r3, r3
 800505a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800505e:	1d38      	adds	r0, r7, #4
 8005060:	6800      	ldr	r0, [r0, #0]
 8005062:	f000 ff72 	bl	8005f4a <USB_WritePMA>
          ep->xfer_buff += len;
 8005066:	463b      	mov	r3, r7
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	695a      	ldr	r2, [r3, #20]
 800506c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005070:	441a      	add	r2, r3
 8005072:	463b      	mov	r3, r7
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005078:	463b      	mov	r3, r7
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	6a1a      	ldr	r2, [r3, #32]
 800507e:	463b      	mov	r3, r7
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	691b      	ldr	r3, [r3, #16]
 8005084:	429a      	cmp	r2, r3
 8005086:	d909      	bls.n	800509c <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8005088:	463b      	mov	r3, r7
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	6a1a      	ldr	r2, [r3, #32]
 800508e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005092:	1ad2      	subs	r2, r2, r3
 8005094:	463b      	mov	r3, r7
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	621a      	str	r2, [r3, #32]
 800509a:	e008      	b.n	80050ae <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 800509c:	463b      	mov	r3, r7
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	6a1b      	ldr	r3, [r3, #32]
 80050a2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80050a6:	463b      	mov	r3, r7
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	2200      	movs	r2, #0
 80050ac:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80050ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	f000 821a 	beq.w	80054ec <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80050b8:	463b      	mov	r3, r7
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	785b      	ldrb	r3, [r3, #1]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d164      	bne.n	800518c <USB_EPStartXfer+0xaac>
 80050c2:	1d3b      	adds	r3, r7, #4
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80050c8:	1d3b      	adds	r3, r7, #4
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	461a      	mov	r2, r3
 80050d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80050d6:	4413      	add	r3, r2
 80050d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80050da:	463b      	mov	r3, r7
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	011a      	lsls	r2, r3, #4
 80050e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80050e4:	4413      	add	r3, r2
 80050e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80050ea:	667b      	str	r3, [r7, #100]	; 0x64
 80050ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d112      	bne.n	800511a <USB_EPStartXfer+0xa3a>
 80050f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050f6:	881b      	ldrh	r3, [r3, #0]
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80050fe:	b29a      	uxth	r2, r3
 8005100:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005102:	801a      	strh	r2, [r3, #0]
 8005104:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005106:	881b      	ldrh	r3, [r3, #0]
 8005108:	b29b      	uxth	r3, r3
 800510a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800510e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005112:	b29a      	uxth	r2, r3
 8005114:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005116:	801a      	strh	r2, [r3, #0]
 8005118:	e057      	b.n	80051ca <USB_EPStartXfer+0xaea>
 800511a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800511e:	2b3e      	cmp	r3, #62	; 0x3e
 8005120:	d817      	bhi.n	8005152 <USB_EPStartXfer+0xa72>
 8005122:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005126:	085b      	lsrs	r3, r3, #1
 8005128:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800512c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005130:	f003 0301 	and.w	r3, r3, #1
 8005134:	2b00      	cmp	r3, #0
 8005136:	d004      	beq.n	8005142 <USB_EPStartXfer+0xa62>
 8005138:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800513c:	3301      	adds	r3, #1
 800513e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005142:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005146:	b29b      	uxth	r3, r3
 8005148:	029b      	lsls	r3, r3, #10
 800514a:	b29a      	uxth	r2, r3
 800514c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800514e:	801a      	strh	r2, [r3, #0]
 8005150:	e03b      	b.n	80051ca <USB_EPStartXfer+0xaea>
 8005152:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005156:	095b      	lsrs	r3, r3, #5
 8005158:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800515c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005160:	f003 031f 	and.w	r3, r3, #31
 8005164:	2b00      	cmp	r3, #0
 8005166:	d104      	bne.n	8005172 <USB_EPStartXfer+0xa92>
 8005168:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800516c:	3b01      	subs	r3, #1
 800516e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005172:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005176:	b29b      	uxth	r3, r3
 8005178:	029b      	lsls	r3, r3, #10
 800517a:	b29b      	uxth	r3, r3
 800517c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005180:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005184:	b29a      	uxth	r2, r3
 8005186:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005188:	801a      	strh	r2, [r3, #0]
 800518a:	e01e      	b.n	80051ca <USB_EPStartXfer+0xaea>
 800518c:	463b      	mov	r3, r7
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	785b      	ldrb	r3, [r3, #1]
 8005192:	2b01      	cmp	r3, #1
 8005194:	d119      	bne.n	80051ca <USB_EPStartXfer+0xaea>
 8005196:	1d3b      	adds	r3, r7, #4
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	673b      	str	r3, [r7, #112]	; 0x70
 800519c:	1d3b      	adds	r3, r7, #4
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	461a      	mov	r2, r3
 80051a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80051aa:	4413      	add	r3, r2
 80051ac:	673b      	str	r3, [r7, #112]	; 0x70
 80051ae:	463b      	mov	r3, r7
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	011a      	lsls	r2, r3, #4
 80051b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80051b8:	4413      	add	r3, r2
 80051ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80051be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80051c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051c4:	b29a      	uxth	r2, r3
 80051c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051c8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80051ca:	463b      	mov	r3, r7
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	891b      	ldrh	r3, [r3, #8]
 80051d0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80051d4:	463b      	mov	r3, r7
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	6959      	ldr	r1, [r3, #20]
 80051da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051de:	b29b      	uxth	r3, r3
 80051e0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80051e4:	1d38      	adds	r0, r7, #4
 80051e6:	6800      	ldr	r0, [r0, #0]
 80051e8:	f000 feaf 	bl	8005f4a <USB_WritePMA>
 80051ec:	e17e      	b.n	80054ec <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80051ee:	463b      	mov	r3, r7
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	785b      	ldrb	r3, [r3, #1]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d16f      	bne.n	80052d8 <USB_EPStartXfer+0xbf8>
 80051f8:	1d3b      	adds	r3, r7, #4
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005200:	1d3b      	adds	r3, r7, #4
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005208:	b29b      	uxth	r3, r3
 800520a:	461a      	mov	r2, r3
 800520c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005210:	4413      	add	r3, r2
 8005212:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005216:	463b      	mov	r3, r7
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	011a      	lsls	r2, r3, #4
 800521e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005222:	4413      	add	r3, r2
 8005224:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005228:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800522c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005230:	2b00      	cmp	r3, #0
 8005232:	d116      	bne.n	8005262 <USB_EPStartXfer+0xb82>
 8005234:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005238:	881b      	ldrh	r3, [r3, #0]
 800523a:	b29b      	uxth	r3, r3
 800523c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005240:	b29a      	uxth	r2, r3
 8005242:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005246:	801a      	strh	r2, [r3, #0]
 8005248:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800524c:	881b      	ldrh	r3, [r3, #0]
 800524e:	b29b      	uxth	r3, r3
 8005250:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005254:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005258:	b29a      	uxth	r2, r3
 800525a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800525e:	801a      	strh	r2, [r3, #0]
 8005260:	e05f      	b.n	8005322 <USB_EPStartXfer+0xc42>
 8005262:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005266:	2b3e      	cmp	r3, #62	; 0x3e
 8005268:	d818      	bhi.n	800529c <USB_EPStartXfer+0xbbc>
 800526a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800526e:	085b      	lsrs	r3, r3, #1
 8005270:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005274:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005278:	f003 0301 	and.w	r3, r3, #1
 800527c:	2b00      	cmp	r3, #0
 800527e:	d004      	beq.n	800528a <USB_EPStartXfer+0xbaa>
 8005280:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005284:	3301      	adds	r3, #1
 8005286:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800528a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800528e:	b29b      	uxth	r3, r3
 8005290:	029b      	lsls	r3, r3, #10
 8005292:	b29a      	uxth	r2, r3
 8005294:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005298:	801a      	strh	r2, [r3, #0]
 800529a:	e042      	b.n	8005322 <USB_EPStartXfer+0xc42>
 800529c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052a0:	095b      	lsrs	r3, r3, #5
 80052a2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80052a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052aa:	f003 031f 	and.w	r3, r3, #31
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d104      	bne.n	80052bc <USB_EPStartXfer+0xbdc>
 80052b2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80052b6:	3b01      	subs	r3, #1
 80052b8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80052bc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	029b      	lsls	r3, r3, #10
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052ce:	b29a      	uxth	r2, r3
 80052d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80052d4:	801a      	strh	r2, [r3, #0]
 80052d6:	e024      	b.n	8005322 <USB_EPStartXfer+0xc42>
 80052d8:	463b      	mov	r3, r7
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	785b      	ldrb	r3, [r3, #1]
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d11f      	bne.n	8005322 <USB_EPStartXfer+0xc42>
 80052e2:	1d3b      	adds	r3, r7, #4
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80052ea:	1d3b      	adds	r3, r7, #4
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	461a      	mov	r2, r3
 80052f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80052fa:	4413      	add	r3, r2
 80052fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005300:	463b      	mov	r3, r7
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	781b      	ldrb	r3, [r3, #0]
 8005306:	011a      	lsls	r2, r3, #4
 8005308:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800530c:	4413      	add	r3, r2
 800530e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005312:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005316:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800531a:	b29a      	uxth	r2, r3
 800531c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005320:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005322:	463b      	mov	r3, r7
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	891b      	ldrh	r3, [r3, #8]
 8005328:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800532c:	463b      	mov	r3, r7
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	6959      	ldr	r1, [r3, #20]
 8005332:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005336:	b29b      	uxth	r3, r3
 8005338:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800533c:	1d38      	adds	r0, r7, #4
 800533e:	6800      	ldr	r0, [r0, #0]
 8005340:	f000 fe03 	bl	8005f4a <USB_WritePMA>
          ep->xfer_buff += len;
 8005344:	463b      	mov	r3, r7
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	695a      	ldr	r2, [r3, #20]
 800534a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800534e:	441a      	add	r2, r3
 8005350:	463b      	mov	r3, r7
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005356:	463b      	mov	r3, r7
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	6a1a      	ldr	r2, [r3, #32]
 800535c:	463b      	mov	r3, r7
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	429a      	cmp	r2, r3
 8005364:	d909      	bls.n	800537a <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 8005366:	463b      	mov	r3, r7
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	6a1a      	ldr	r2, [r3, #32]
 800536c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005370:	1ad2      	subs	r2, r2, r3
 8005372:	463b      	mov	r3, r7
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	621a      	str	r2, [r3, #32]
 8005378:	e008      	b.n	800538c <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 800537a:	463b      	mov	r3, r7
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	6a1b      	ldr	r3, [r3, #32]
 8005380:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005384:	463b      	mov	r3, r7
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	2200      	movs	r2, #0
 800538a:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800538c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005390:	2b00      	cmp	r3, #0
 8005392:	f000 80ab 	beq.w	80054ec <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005396:	1d3b      	adds	r3, r7, #4
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800539e:	463b      	mov	r3, r7
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	785b      	ldrb	r3, [r3, #1]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d16f      	bne.n	8005488 <USB_EPStartXfer+0xda8>
 80053a8:	1d3b      	adds	r3, r7, #4
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80053b0:	1d3b      	adds	r3, r7, #4
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	461a      	mov	r2, r3
 80053bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80053c0:	4413      	add	r3, r2
 80053c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80053c6:	463b      	mov	r3, r7
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	011a      	lsls	r2, r3, #4
 80053ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80053d2:	4413      	add	r3, r2
 80053d4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80053d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80053dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d116      	bne.n	8005412 <USB_EPStartXfer+0xd32>
 80053e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80053e8:	881b      	ldrh	r3, [r3, #0]
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80053f0:	b29a      	uxth	r2, r3
 80053f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80053f6:	801a      	strh	r2, [r3, #0]
 80053f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80053fc:	881b      	ldrh	r3, [r3, #0]
 80053fe:	b29b      	uxth	r3, r3
 8005400:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005404:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005408:	b29a      	uxth	r2, r3
 800540a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800540e:	801a      	strh	r2, [r3, #0]
 8005410:	e05b      	b.n	80054ca <USB_EPStartXfer+0xdea>
 8005412:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005416:	2b3e      	cmp	r3, #62	; 0x3e
 8005418:	d818      	bhi.n	800544c <USB_EPStartXfer+0xd6c>
 800541a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800541e:	085b      	lsrs	r3, r3, #1
 8005420:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005424:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005428:	f003 0301 	and.w	r3, r3, #1
 800542c:	2b00      	cmp	r3, #0
 800542e:	d004      	beq.n	800543a <USB_EPStartXfer+0xd5a>
 8005430:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005434:	3301      	adds	r3, #1
 8005436:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800543a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800543e:	b29b      	uxth	r3, r3
 8005440:	029b      	lsls	r3, r3, #10
 8005442:	b29a      	uxth	r2, r3
 8005444:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005448:	801a      	strh	r2, [r3, #0]
 800544a:	e03e      	b.n	80054ca <USB_EPStartXfer+0xdea>
 800544c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005450:	095b      	lsrs	r3, r3, #5
 8005452:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005456:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800545a:	f003 031f 	and.w	r3, r3, #31
 800545e:	2b00      	cmp	r3, #0
 8005460:	d104      	bne.n	800546c <USB_EPStartXfer+0xd8c>
 8005462:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005466:	3b01      	subs	r3, #1
 8005468:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800546c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005470:	b29b      	uxth	r3, r3
 8005472:	029b      	lsls	r3, r3, #10
 8005474:	b29b      	uxth	r3, r3
 8005476:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800547a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800547e:	b29a      	uxth	r2, r3
 8005480:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005484:	801a      	strh	r2, [r3, #0]
 8005486:	e020      	b.n	80054ca <USB_EPStartXfer+0xdea>
 8005488:	463b      	mov	r3, r7
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	785b      	ldrb	r3, [r3, #1]
 800548e:	2b01      	cmp	r3, #1
 8005490:	d11b      	bne.n	80054ca <USB_EPStartXfer+0xdea>
 8005492:	1d3b      	adds	r3, r7, #4
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800549a:	b29b      	uxth	r3, r3
 800549c:	461a      	mov	r2, r3
 800549e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80054a2:	4413      	add	r3, r2
 80054a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80054a8:	463b      	mov	r3, r7
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	011a      	lsls	r2, r3, #4
 80054b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80054b4:	4413      	add	r3, r2
 80054b6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80054ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80054be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054c2:	b29a      	uxth	r2, r3
 80054c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80054c8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80054ca:	463b      	mov	r3, r7
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	895b      	ldrh	r3, [r3, #10]
 80054d0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80054d4:	463b      	mov	r3, r7
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	6959      	ldr	r1, [r3, #20]
 80054da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054de:	b29b      	uxth	r3, r3
 80054e0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80054e4:	1d38      	adds	r0, r7, #4
 80054e6:	6800      	ldr	r0, [r0, #0]
 80054e8:	f000 fd2f 	bl	8005f4a <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80054ec:	1d3b      	adds	r3, r7, #4
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	463b      	mov	r3, r7
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	009b      	lsls	r3, r3, #2
 80054f8:	4413      	add	r3, r2
 80054fa:	881b      	ldrh	r3, [r3, #0]
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	f107 020a 	add.w	r2, r7, #10
 8005502:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005506:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800550a:	8013      	strh	r3, [r2, #0]
 800550c:	f107 030a 	add.w	r3, r7, #10
 8005510:	f107 020a 	add.w	r2, r7, #10
 8005514:	8812      	ldrh	r2, [r2, #0]
 8005516:	f082 0210 	eor.w	r2, r2, #16
 800551a:	801a      	strh	r2, [r3, #0]
 800551c:	f107 030a 	add.w	r3, r7, #10
 8005520:	f107 020a 	add.w	r2, r7, #10
 8005524:	8812      	ldrh	r2, [r2, #0]
 8005526:	f082 0220 	eor.w	r2, r2, #32
 800552a:	801a      	strh	r2, [r3, #0]
 800552c:	1d3b      	adds	r3, r7, #4
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	463b      	mov	r3, r7
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	441a      	add	r2, r3
 800553a:	f107 030a 	add.w	r3, r7, #10
 800553e:	881b      	ldrh	r3, [r3, #0]
 8005540:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005544:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005548:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800554c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005550:	b29b      	uxth	r3, r3
 8005552:	8013      	strh	r3, [r2, #0]
 8005554:	e3b5      	b.n	8005cc2 <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005556:	463b      	mov	r3, r7
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	7b1b      	ldrb	r3, [r3, #12]
 800555c:	2b00      	cmp	r3, #0
 800555e:	f040 8090 	bne.w	8005682 <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005562:	463b      	mov	r3, r7
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	699a      	ldr	r2, [r3, #24]
 8005568:	463b      	mov	r3, r7
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	691b      	ldr	r3, [r3, #16]
 800556e:	429a      	cmp	r2, r3
 8005570:	d90e      	bls.n	8005590 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 8005572:	463b      	mov	r3, r7
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	691b      	ldr	r3, [r3, #16]
 8005578:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 800557c:	463b      	mov	r3, r7
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	699a      	ldr	r2, [r3, #24]
 8005582:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005586:	1ad2      	subs	r2, r2, r3
 8005588:	463b      	mov	r3, r7
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	619a      	str	r2, [r3, #24]
 800558e:	e008      	b.n	80055a2 <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 8005590:	463b      	mov	r3, r7
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	699b      	ldr	r3, [r3, #24]
 8005596:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 800559a:	463b      	mov	r3, r7
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	2200      	movs	r2, #0
 80055a0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80055a2:	1d3b      	adds	r3, r7, #4
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80055aa:	1d3b      	adds	r3, r7, #4
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	461a      	mov	r2, r3
 80055b6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80055ba:	4413      	add	r3, r2
 80055bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80055c0:	463b      	mov	r3, r7
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	011a      	lsls	r2, r3, #4
 80055c8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80055cc:	4413      	add	r3, r2
 80055ce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80055d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80055d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d116      	bne.n	800560c <USB_EPStartXfer+0xf2c>
 80055de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80055e2:	881b      	ldrh	r3, [r3, #0]
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80055ea:	b29a      	uxth	r2, r3
 80055ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80055f0:	801a      	strh	r2, [r3, #0]
 80055f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80055f6:	881b      	ldrh	r3, [r3, #0]
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005602:	b29a      	uxth	r2, r3
 8005604:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005608:	801a      	strh	r2, [r3, #0]
 800560a:	e32c      	b.n	8005c66 <USB_EPStartXfer+0x1586>
 800560c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005610:	2b3e      	cmp	r3, #62	; 0x3e
 8005612:	d818      	bhi.n	8005646 <USB_EPStartXfer+0xf66>
 8005614:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005618:	085b      	lsrs	r3, r3, #1
 800561a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800561e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005622:	f003 0301 	and.w	r3, r3, #1
 8005626:	2b00      	cmp	r3, #0
 8005628:	d004      	beq.n	8005634 <USB_EPStartXfer+0xf54>
 800562a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800562e:	3301      	adds	r3, #1
 8005630:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005634:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005638:	b29b      	uxth	r3, r3
 800563a:	029b      	lsls	r3, r3, #10
 800563c:	b29a      	uxth	r2, r3
 800563e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005642:	801a      	strh	r2, [r3, #0]
 8005644:	e30f      	b.n	8005c66 <USB_EPStartXfer+0x1586>
 8005646:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800564a:	095b      	lsrs	r3, r3, #5
 800564c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005650:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005654:	f003 031f 	and.w	r3, r3, #31
 8005658:	2b00      	cmp	r3, #0
 800565a:	d104      	bne.n	8005666 <USB_EPStartXfer+0xf86>
 800565c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005660:	3b01      	subs	r3, #1
 8005662:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005666:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800566a:	b29b      	uxth	r3, r3
 800566c:	029b      	lsls	r3, r3, #10
 800566e:	b29b      	uxth	r3, r3
 8005670:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005674:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005678:	b29a      	uxth	r2, r3
 800567a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800567e:	801a      	strh	r2, [r3, #0]
 8005680:	e2f1      	b.n	8005c66 <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005682:	463b      	mov	r3, r7
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	78db      	ldrb	r3, [r3, #3]
 8005688:	2b02      	cmp	r3, #2
 800568a:	f040 818f 	bne.w	80059ac <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800568e:	463b      	mov	r3, r7
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	785b      	ldrb	r3, [r3, #1]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d175      	bne.n	8005784 <USB_EPStartXfer+0x10a4>
 8005698:	1d3b      	adds	r3, r7, #4
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80056a0:	1d3b      	adds	r3, r7, #4
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	461a      	mov	r2, r3
 80056ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80056b0:	4413      	add	r3, r2
 80056b2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80056b6:	463b      	mov	r3, r7
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	011a      	lsls	r2, r3, #4
 80056be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80056c2:	4413      	add	r3, r2
 80056c4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80056c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80056cc:	463b      	mov	r3, r7
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d116      	bne.n	8005704 <USB_EPStartXfer+0x1024>
 80056d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80056da:	881b      	ldrh	r3, [r3, #0]
 80056dc:	b29b      	uxth	r3, r3
 80056de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80056e2:	b29a      	uxth	r2, r3
 80056e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80056e8:	801a      	strh	r2, [r3, #0]
 80056ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80056ee:	881b      	ldrh	r3, [r3, #0]
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056fa:	b29a      	uxth	r2, r3
 80056fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005700:	801a      	strh	r2, [r3, #0]
 8005702:	e065      	b.n	80057d0 <USB_EPStartXfer+0x10f0>
 8005704:	463b      	mov	r3, r7
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	2b3e      	cmp	r3, #62	; 0x3e
 800570c:	d81a      	bhi.n	8005744 <USB_EPStartXfer+0x1064>
 800570e:	463b      	mov	r3, r7
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	691b      	ldr	r3, [r3, #16]
 8005714:	085b      	lsrs	r3, r3, #1
 8005716:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800571a:	463b      	mov	r3, r7
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	691b      	ldr	r3, [r3, #16]
 8005720:	f003 0301 	and.w	r3, r3, #1
 8005724:	2b00      	cmp	r3, #0
 8005726:	d004      	beq.n	8005732 <USB_EPStartXfer+0x1052>
 8005728:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800572c:	3301      	adds	r3, #1
 800572e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005732:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005736:	b29b      	uxth	r3, r3
 8005738:	029b      	lsls	r3, r3, #10
 800573a:	b29a      	uxth	r2, r3
 800573c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005740:	801a      	strh	r2, [r3, #0]
 8005742:	e045      	b.n	80057d0 <USB_EPStartXfer+0x10f0>
 8005744:	463b      	mov	r3, r7
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	095b      	lsrs	r3, r3, #5
 800574c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005750:	463b      	mov	r3, r7
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	f003 031f 	and.w	r3, r3, #31
 800575a:	2b00      	cmp	r3, #0
 800575c:	d104      	bne.n	8005768 <USB_EPStartXfer+0x1088>
 800575e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005762:	3b01      	subs	r3, #1
 8005764:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005768:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800576c:	b29b      	uxth	r3, r3
 800576e:	029b      	lsls	r3, r3, #10
 8005770:	b29b      	uxth	r3, r3
 8005772:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005776:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800577a:	b29a      	uxth	r2, r3
 800577c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005780:	801a      	strh	r2, [r3, #0]
 8005782:	e025      	b.n	80057d0 <USB_EPStartXfer+0x10f0>
 8005784:	463b      	mov	r3, r7
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	785b      	ldrb	r3, [r3, #1]
 800578a:	2b01      	cmp	r3, #1
 800578c:	d120      	bne.n	80057d0 <USB_EPStartXfer+0x10f0>
 800578e:	1d3b      	adds	r3, r7, #4
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005796:	1d3b      	adds	r3, r7, #4
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800579e:	b29b      	uxth	r3, r3
 80057a0:	461a      	mov	r2, r3
 80057a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80057a6:	4413      	add	r3, r2
 80057a8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80057ac:	463b      	mov	r3, r7
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	781b      	ldrb	r3, [r3, #0]
 80057b2:	011a      	lsls	r2, r3, #4
 80057b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80057b8:	4413      	add	r3, r2
 80057ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80057be:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80057c2:	463b      	mov	r3, r7
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	691b      	ldr	r3, [r3, #16]
 80057c8:	b29a      	uxth	r2, r3
 80057ca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80057ce:	801a      	strh	r2, [r3, #0]
 80057d0:	1d3b      	adds	r3, r7, #4
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80057d8:	463b      	mov	r3, r7
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	785b      	ldrb	r3, [r3, #1]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d175      	bne.n	80058ce <USB_EPStartXfer+0x11ee>
 80057e2:	1d3b      	adds	r3, r7, #4
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80057ea:	1d3b      	adds	r3, r7, #4
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	461a      	mov	r2, r3
 80057f6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80057fa:	4413      	add	r3, r2
 80057fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005800:	463b      	mov	r3, r7
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	011a      	lsls	r2, r3, #4
 8005808:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800580c:	4413      	add	r3, r2
 800580e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005812:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005816:	463b      	mov	r3, r7
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	691b      	ldr	r3, [r3, #16]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d116      	bne.n	800584e <USB_EPStartXfer+0x116e>
 8005820:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005824:	881b      	ldrh	r3, [r3, #0]
 8005826:	b29b      	uxth	r3, r3
 8005828:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800582c:	b29a      	uxth	r2, r3
 800582e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005832:	801a      	strh	r2, [r3, #0]
 8005834:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005838:	881b      	ldrh	r3, [r3, #0]
 800583a:	b29b      	uxth	r3, r3
 800583c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005840:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005844:	b29a      	uxth	r2, r3
 8005846:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800584a:	801a      	strh	r2, [r3, #0]
 800584c:	e061      	b.n	8005912 <USB_EPStartXfer+0x1232>
 800584e:	463b      	mov	r3, r7
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	691b      	ldr	r3, [r3, #16]
 8005854:	2b3e      	cmp	r3, #62	; 0x3e
 8005856:	d81a      	bhi.n	800588e <USB_EPStartXfer+0x11ae>
 8005858:	463b      	mov	r3, r7
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	691b      	ldr	r3, [r3, #16]
 800585e:	085b      	lsrs	r3, r3, #1
 8005860:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005864:	463b      	mov	r3, r7
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	f003 0301 	and.w	r3, r3, #1
 800586e:	2b00      	cmp	r3, #0
 8005870:	d004      	beq.n	800587c <USB_EPStartXfer+0x119c>
 8005872:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005876:	3301      	adds	r3, #1
 8005878:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800587c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005880:	b29b      	uxth	r3, r3
 8005882:	029b      	lsls	r3, r3, #10
 8005884:	b29a      	uxth	r2, r3
 8005886:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800588a:	801a      	strh	r2, [r3, #0]
 800588c:	e041      	b.n	8005912 <USB_EPStartXfer+0x1232>
 800588e:	463b      	mov	r3, r7
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	691b      	ldr	r3, [r3, #16]
 8005894:	095b      	lsrs	r3, r3, #5
 8005896:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800589a:	463b      	mov	r3, r7
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	691b      	ldr	r3, [r3, #16]
 80058a0:	f003 031f 	and.w	r3, r3, #31
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d104      	bne.n	80058b2 <USB_EPStartXfer+0x11d2>
 80058a8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80058ac:	3b01      	subs	r3, #1
 80058ae:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80058b2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	029b      	lsls	r3, r3, #10
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058c4:	b29a      	uxth	r2, r3
 80058c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80058ca:	801a      	strh	r2, [r3, #0]
 80058cc:	e021      	b.n	8005912 <USB_EPStartXfer+0x1232>
 80058ce:	463b      	mov	r3, r7
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	785b      	ldrb	r3, [r3, #1]
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d11c      	bne.n	8005912 <USB_EPStartXfer+0x1232>
 80058d8:	1d3b      	adds	r3, r7, #4
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	461a      	mov	r2, r3
 80058e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80058e8:	4413      	add	r3, r2
 80058ea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80058ee:	463b      	mov	r3, r7
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	011a      	lsls	r2, r3, #4
 80058f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80058fa:	4413      	add	r3, r2
 80058fc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005900:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005904:	463b      	mov	r3, r7
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	b29a      	uxth	r2, r3
 800590c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005910:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005912:	463b      	mov	r3, r7
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	69db      	ldr	r3, [r3, #28]
 8005918:	2b00      	cmp	r3, #0
 800591a:	f000 81a4 	beq.w	8005c66 <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800591e:	1d3b      	adds	r3, r7, #4
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	463b      	mov	r3, r7
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	4413      	add	r3, r2
 800592c:	881b      	ldrh	r3, [r3, #0]
 800592e:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005932:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005936:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800593a:	2b00      	cmp	r3, #0
 800593c:	d005      	beq.n	800594a <USB_EPStartXfer+0x126a>
 800593e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005946:	2b00      	cmp	r3, #0
 8005948:	d10d      	bne.n	8005966 <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800594a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800594e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005952:	2b00      	cmp	r3, #0
 8005954:	f040 8187 	bne.w	8005c66 <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005958:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800595c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005960:	2b00      	cmp	r3, #0
 8005962:	f040 8180 	bne.w	8005c66 <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005966:	1d3b      	adds	r3, r7, #4
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	463b      	mov	r3, r7
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	009b      	lsls	r3, r3, #2
 8005972:	4413      	add	r3, r2
 8005974:	881b      	ldrh	r3, [r3, #0]
 8005976:	b29b      	uxth	r3, r3
 8005978:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800597c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005980:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8005984:	1d3b      	adds	r3, r7, #4
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	463b      	mov	r3, r7
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	441a      	add	r2, r3
 8005992:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8005996:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800599a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800599e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	8013      	strh	r3, [r2, #0]
 80059aa:	e15c      	b.n	8005c66 <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80059ac:	463b      	mov	r3, r7
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	78db      	ldrb	r3, [r3, #3]
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	f040 8155 	bne.w	8005c62 <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80059b8:	463b      	mov	r3, r7
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	699a      	ldr	r2, [r3, #24]
 80059be:	463b      	mov	r3, r7
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	691b      	ldr	r3, [r3, #16]
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d90e      	bls.n	80059e6 <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 80059c8:	463b      	mov	r3, r7
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	691b      	ldr	r3, [r3, #16]
 80059ce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 80059d2:	463b      	mov	r3, r7
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	699a      	ldr	r2, [r3, #24]
 80059d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059dc:	1ad2      	subs	r2, r2, r3
 80059de:	463b      	mov	r3, r7
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	619a      	str	r2, [r3, #24]
 80059e4:	e008      	b.n	80059f8 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 80059e6:	463b      	mov	r3, r7
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	699b      	ldr	r3, [r3, #24]
 80059ec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80059f0:	463b      	mov	r3, r7
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	2200      	movs	r2, #0
 80059f6:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80059f8:	463b      	mov	r3, r7
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	785b      	ldrb	r3, [r3, #1]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d16f      	bne.n	8005ae2 <USB_EPStartXfer+0x1402>
 8005a02:	1d3b      	adds	r3, r7, #4
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005a0a:	1d3b      	adds	r3, r7, #4
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	461a      	mov	r2, r3
 8005a16:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005a1a:	4413      	add	r3, r2
 8005a1c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005a20:	463b      	mov	r3, r7
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	781b      	ldrb	r3, [r3, #0]
 8005a26:	011a      	lsls	r2, r3, #4
 8005a28:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005a2c:	4413      	add	r3, r2
 8005a2e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a32:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005a36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d116      	bne.n	8005a6c <USB_EPStartXfer+0x138c>
 8005a3e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005a42:	881b      	ldrh	r3, [r3, #0]
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a4a:	b29a      	uxth	r2, r3
 8005a4c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005a50:	801a      	strh	r2, [r3, #0]
 8005a52:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005a56:	881b      	ldrh	r3, [r3, #0]
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a62:	b29a      	uxth	r2, r3
 8005a64:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005a68:	801a      	strh	r2, [r3, #0]
 8005a6a:	e05f      	b.n	8005b2c <USB_EPStartXfer+0x144c>
 8005a6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a70:	2b3e      	cmp	r3, #62	; 0x3e
 8005a72:	d818      	bhi.n	8005aa6 <USB_EPStartXfer+0x13c6>
 8005a74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a78:	085b      	lsrs	r3, r3, #1
 8005a7a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005a7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a82:	f003 0301 	and.w	r3, r3, #1
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d004      	beq.n	8005a94 <USB_EPStartXfer+0x13b4>
 8005a8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a8e:	3301      	adds	r3, #1
 8005a90:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005a94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	029b      	lsls	r3, r3, #10
 8005a9c:	b29a      	uxth	r2, r3
 8005a9e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005aa2:	801a      	strh	r2, [r3, #0]
 8005aa4:	e042      	b.n	8005b2c <USB_EPStartXfer+0x144c>
 8005aa6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005aaa:	095b      	lsrs	r3, r3, #5
 8005aac:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005ab0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ab4:	f003 031f 	and.w	r3, r3, #31
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d104      	bne.n	8005ac6 <USB_EPStartXfer+0x13e6>
 8005abc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ac0:	3b01      	subs	r3, #1
 8005ac2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005ac6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	029b      	lsls	r3, r3, #10
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ad4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ad8:	b29a      	uxth	r2, r3
 8005ada:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005ade:	801a      	strh	r2, [r3, #0]
 8005ae0:	e024      	b.n	8005b2c <USB_EPStartXfer+0x144c>
 8005ae2:	463b      	mov	r3, r7
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	785b      	ldrb	r3, [r3, #1]
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d11f      	bne.n	8005b2c <USB_EPStartXfer+0x144c>
 8005aec:	1d3b      	adds	r3, r7, #4
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005af4:	1d3b      	adds	r3, r7, #4
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	461a      	mov	r2, r3
 8005b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b04:	4413      	add	r3, r2
 8005b06:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005b0a:	463b      	mov	r3, r7
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	011a      	lsls	r2, r3, #4
 8005b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b16:	4413      	add	r3, r2
 8005b18:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b1c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005b20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b24:	b29a      	uxth	r2, r3
 8005b26:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005b2a:	801a      	strh	r2, [r3, #0]
 8005b2c:	1d3b      	adds	r3, r7, #4
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005b34:	463b      	mov	r3, r7
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	785b      	ldrb	r3, [r3, #1]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d16f      	bne.n	8005c1e <USB_EPStartXfer+0x153e>
 8005b3e:	1d3b      	adds	r3, r7, #4
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005b46:	1d3b      	adds	r3, r7, #4
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	461a      	mov	r2, r3
 8005b52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b56:	4413      	add	r3, r2
 8005b58:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005b5c:	463b      	mov	r3, r7
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	781b      	ldrb	r3, [r3, #0]
 8005b62:	011a      	lsls	r2, r3, #4
 8005b64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b68:	4413      	add	r3, r2
 8005b6a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b6e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005b72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d116      	bne.n	8005ba8 <USB_EPStartXfer+0x14c8>
 8005b7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b7e:	881b      	ldrh	r3, [r3, #0]
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b86:	b29a      	uxth	r2, r3
 8005b88:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b8c:	801a      	strh	r2, [r3, #0]
 8005b8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b92:	881b      	ldrh	r3, [r3, #0]
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b9e:	b29a      	uxth	r2, r3
 8005ba0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ba4:	801a      	strh	r2, [r3, #0]
 8005ba6:	e05e      	b.n	8005c66 <USB_EPStartXfer+0x1586>
 8005ba8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bac:	2b3e      	cmp	r3, #62	; 0x3e
 8005bae:	d818      	bhi.n	8005be2 <USB_EPStartXfer+0x1502>
 8005bb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bb4:	085b      	lsrs	r3, r3, #1
 8005bb6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005bba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bbe:	f003 0301 	and.w	r3, r3, #1
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d004      	beq.n	8005bd0 <USB_EPStartXfer+0x14f0>
 8005bc6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005bca:	3301      	adds	r3, #1
 8005bcc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005bd0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	029b      	lsls	r3, r3, #10
 8005bd8:	b29a      	uxth	r2, r3
 8005bda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005bde:	801a      	strh	r2, [r3, #0]
 8005be0:	e041      	b.n	8005c66 <USB_EPStartXfer+0x1586>
 8005be2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005be6:	095b      	lsrs	r3, r3, #5
 8005be8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005bec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bf0:	f003 031f 	and.w	r3, r3, #31
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d104      	bne.n	8005c02 <USB_EPStartXfer+0x1522>
 8005bf8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005bfc:	3b01      	subs	r3, #1
 8005bfe:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005c02:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	029b      	lsls	r3, r3, #10
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c14:	b29a      	uxth	r2, r3
 8005c16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c1a:	801a      	strh	r2, [r3, #0]
 8005c1c:	e023      	b.n	8005c66 <USB_EPStartXfer+0x1586>
 8005c1e:	463b      	mov	r3, r7
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	785b      	ldrb	r3, [r3, #1]
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d11e      	bne.n	8005c66 <USB_EPStartXfer+0x1586>
 8005c28:	1d3b      	adds	r3, r7, #4
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	461a      	mov	r2, r3
 8005c34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c38:	4413      	add	r3, r2
 8005c3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005c3e:	463b      	mov	r3, r7
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	011a      	lsls	r2, r3, #4
 8005c46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c4a:	4413      	add	r3, r2
 8005c4c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005c54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c58:	b29a      	uxth	r2, r3
 8005c5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c5e:	801a      	strh	r2, [r3, #0]
 8005c60:	e001      	b.n	8005c66 <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	e02e      	b.n	8005cc4 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005c66:	1d3b      	adds	r3, r7, #4
 8005c68:	681a      	ldr	r2, [r3, #0]
 8005c6a:	463b      	mov	r3, r7
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	4413      	add	r3, r2
 8005c74:	881b      	ldrh	r3, [r3, #0]
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c80:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005c84:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005c88:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005c8c:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005c90:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005c94:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005c98:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005c9c:	1d3b      	adds	r3, r7, #4
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	463b      	mov	r3, r7
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	781b      	ldrb	r3, [r3, #0]
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	441a      	add	r2, r3
 8005caa:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005cae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005cc2:	2300      	movs	r3, #0
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}

08005cce <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005cce:	b480      	push	{r7}
 8005cd0:	b085      	sub	sp, #20
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	6078      	str	r0, [r7, #4]
 8005cd6:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	785b      	ldrb	r3, [r3, #1]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d020      	beq.n	8005d22 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	4413      	add	r3, r2
 8005cea:	881b      	ldrh	r3, [r3, #0]
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cf2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cf6:	81bb      	strh	r3, [r7, #12]
 8005cf8:	89bb      	ldrh	r3, [r7, #12]
 8005cfa:	f083 0310 	eor.w	r3, r3, #16
 8005cfe:	81bb      	strh	r3, [r7, #12]
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	441a      	add	r2, r3
 8005d0a:	89bb      	ldrh	r3, [r7, #12]
 8005d0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	8013      	strh	r3, [r2, #0]
 8005d20:	e01f      	b.n	8005d62 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	009b      	lsls	r3, r3, #2
 8005d2a:	4413      	add	r3, r2
 8005d2c:	881b      	ldrh	r3, [r3, #0]
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d38:	81fb      	strh	r3, [r7, #14]
 8005d3a:	89fb      	ldrh	r3, [r7, #14]
 8005d3c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005d40:	81fb      	strh	r3, [r7, #14]
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	009b      	lsls	r3, r3, #2
 8005d4a:	441a      	add	r2, r3
 8005d4c:	89fb      	ldrh	r3, [r7, #14]
 8005d4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005d62:	2300      	movs	r3, #0
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	3714      	adds	r7, #20
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bc80      	pop	{r7}
 8005d6c:	4770      	bx	lr

08005d6e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005d6e:	b480      	push	{r7}
 8005d70:	b087      	sub	sp, #28
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
 8005d76:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	7b1b      	ldrb	r3, [r3, #12]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	f040 809d 	bne.w	8005ebc <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	785b      	ldrb	r3, [r3, #1]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d04c      	beq.n	8005e24 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	781b      	ldrb	r3, [r3, #0]
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	4413      	add	r3, r2
 8005d94:	881b      	ldrh	r3, [r3, #0]
 8005d96:	823b      	strh	r3, [r7, #16]
 8005d98:	8a3b      	ldrh	r3, [r7, #16]
 8005d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d01b      	beq.n	8005dda <USB_EPClearStall+0x6c>
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	009b      	lsls	r3, r3, #2
 8005daa:	4413      	add	r3, r2
 8005dac:	881b      	ldrh	r3, [r3, #0]
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005db4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005db8:	81fb      	strh	r3, [r7, #14]
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	441a      	add	r2, r3
 8005dc4:	89fb      	ldrh	r3, [r7, #14]
 8005dc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dd2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	78db      	ldrb	r3, [r3, #3]
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d06c      	beq.n	8005ebc <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	4413      	add	r3, r2
 8005dec:	881b      	ldrh	r3, [r3, #0]
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005df4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005df8:	81bb      	strh	r3, [r7, #12]
 8005dfa:	89bb      	ldrh	r3, [r7, #12]
 8005dfc:	f083 0320 	eor.w	r3, r3, #32
 8005e00:	81bb      	strh	r3, [r7, #12]
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	441a      	add	r2, r3
 8005e0c:	89bb      	ldrh	r3, [r7, #12]
 8005e0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	8013      	strh	r3, [r2, #0]
 8005e22:	e04b      	b.n	8005ebc <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	009b      	lsls	r3, r3, #2
 8005e2c:	4413      	add	r3, r2
 8005e2e:	881b      	ldrh	r3, [r3, #0]
 8005e30:	82fb      	strh	r3, [r7, #22]
 8005e32:	8afb      	ldrh	r3, [r7, #22]
 8005e34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d01b      	beq.n	8005e74 <USB_EPClearStall+0x106>
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	4413      	add	r3, r2
 8005e46:	881b      	ldrh	r3, [r3, #0]
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e52:	82bb      	strh	r3, [r7, #20]
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	441a      	add	r2, r3
 8005e5e:	8abb      	ldrh	r3, [r7, #20]
 8005e60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005e74:	687a      	ldr	r2, [r7, #4]
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	4413      	add	r3, r2
 8005e7e:	881b      	ldrh	r3, [r3, #0]
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e8a:	827b      	strh	r3, [r7, #18]
 8005e8c:	8a7b      	ldrh	r3, [r7, #18]
 8005e8e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005e92:	827b      	strh	r3, [r7, #18]
 8005e94:	8a7b      	ldrh	r3, [r7, #18]
 8005e96:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005e9a:	827b      	strh	r3, [r7, #18]
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	441a      	add	r2, r3
 8005ea6:	8a7b      	ldrh	r3, [r7, #18]
 8005ea8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005eac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005eb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005eb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005ebc:	2300      	movs	r3, #0
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	371c      	adds	r7, #28
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bc80      	pop	{r7}
 8005ec6:	4770      	bx	lr

08005ec8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b083      	sub	sp, #12
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	460b      	mov	r3, r1
 8005ed2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005ed4:	78fb      	ldrb	r3, [r7, #3]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d103      	bne.n	8005ee2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2280      	movs	r2, #128	; 0x80
 8005ede:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005ee2:	2300      	movs	r3, #0
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	370c      	adds	r7, #12
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bc80      	pop	{r7}
 8005eec:	4770      	bx	lr

08005eee <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005eee:	b480      	push	{r7}
 8005ef0:	b083      	sub	sp, #12
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005ef6:	2300      	movs	r3, #0
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	370c      	adds	r7, #12
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bc80      	pop	{r7}
 8005f00:	4770      	bx	lr

08005f02 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005f02:	b480      	push	{r7}
 8005f04:	b083      	sub	sp, #12
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005f0a:	2300      	movs	r3, #0
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	370c      	adds	r7, #12
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bc80      	pop	{r7}
 8005f14:	4770      	bx	lr

08005f16 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8005f16:	b480      	push	{r7}
 8005f18:	b085      	sub	sp, #20
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005f28:	68fb      	ldr	r3, [r7, #12]
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3714      	adds	r7, #20
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bc80      	pop	{r7}
 8005f32:	4770      	bx	lr

08005f34 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b083      	sub	sp, #12
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005f3e:	2300      	movs	r3, #0
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	370c      	adds	r7, #12
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bc80      	pop	{r7}
 8005f48:	4770      	bx	lr

08005f4a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005f4a:	b480      	push	{r7}
 8005f4c:	b08d      	sub	sp, #52	; 0x34
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	60f8      	str	r0, [r7, #12]
 8005f52:	60b9      	str	r1, [r7, #8]
 8005f54:	4611      	mov	r1, r2
 8005f56:	461a      	mov	r2, r3
 8005f58:	460b      	mov	r3, r1
 8005f5a:	80fb      	strh	r3, [r7, #6]
 8005f5c:	4613      	mov	r3, r2
 8005f5e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005f60:	88bb      	ldrh	r3, [r7, #4]
 8005f62:	3301      	adds	r3, #1
 8005f64:	085b      	lsrs	r3, r3, #1
 8005f66:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005f70:	88fb      	ldrh	r3, [r7, #6]
 8005f72:	005a      	lsls	r2, r3, #1
 8005f74:	69fb      	ldr	r3, [r7, #28]
 8005f76:	4413      	add	r3, r2
 8005f78:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f7c:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8005f7e:	6a3b      	ldr	r3, [r7, #32]
 8005f80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f82:	e01e      	b.n	8005fc2 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8005f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8005f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8c:	3301      	adds	r3, #1
 8005f8e:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8005f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	021b      	lsls	r3, r3, #8
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	69bb      	ldr	r3, [r7, #24]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	b29a      	uxth	r2, r3
 8005fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fac:	3302      	adds	r3, #2
 8005fae:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8005fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb2:	3302      	adds	r3, #2
 8005fb4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8005fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb8:	3301      	adds	r3, #1
 8005fba:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8005fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fbe:	3b01      	subs	r3, #1
 8005fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d1dd      	bne.n	8005f84 <USB_WritePMA+0x3a>
  }
}
 8005fc8:	bf00      	nop
 8005fca:	bf00      	nop
 8005fcc:	3734      	adds	r7, #52	; 0x34
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bc80      	pop	{r7}
 8005fd2:	4770      	bx	lr

08005fd4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b08b      	sub	sp, #44	; 0x2c
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	60f8      	str	r0, [r7, #12]
 8005fdc:	60b9      	str	r1, [r7, #8]
 8005fde:	4611      	mov	r1, r2
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	460b      	mov	r3, r1
 8005fe4:	80fb      	strh	r3, [r7, #6]
 8005fe6:	4613      	mov	r3, r2
 8005fe8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005fea:	88bb      	ldrh	r3, [r7, #4]
 8005fec:	085b      	lsrs	r3, r3, #1
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005ffa:	88fb      	ldrh	r3, [r7, #6]
 8005ffc:	005a      	lsls	r2, r3, #1
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	4413      	add	r3, r2
 8006002:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006006:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006008:	69bb      	ldr	r3, [r7, #24]
 800600a:	627b      	str	r3, [r7, #36]	; 0x24
 800600c:	e01b      	b.n	8006046 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800600e:	6a3b      	ldr	r3, [r7, #32]
 8006010:	881b      	ldrh	r3, [r3, #0]
 8006012:	b29b      	uxth	r3, r3
 8006014:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006016:	6a3b      	ldr	r3, [r7, #32]
 8006018:	3302      	adds	r3, #2
 800601a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	b2da      	uxtb	r2, r3
 8006020:	69fb      	ldr	r3, [r7, #28]
 8006022:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	3301      	adds	r3, #1
 8006028:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	0a1b      	lsrs	r3, r3, #8
 800602e:	b2da      	uxtb	r2, r3
 8006030:	69fb      	ldr	r3, [r7, #28]
 8006032:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006034:	69fb      	ldr	r3, [r7, #28]
 8006036:	3301      	adds	r3, #1
 8006038:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800603a:	6a3b      	ldr	r3, [r7, #32]
 800603c:	3302      	adds	r3, #2
 800603e:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006042:	3b01      	subs	r3, #1
 8006044:	627b      	str	r3, [r7, #36]	; 0x24
 8006046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006048:	2b00      	cmp	r3, #0
 800604a:	d1e0      	bne.n	800600e <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800604c:	88bb      	ldrh	r3, [r7, #4]
 800604e:	f003 0301 	and.w	r3, r3, #1
 8006052:	b29b      	uxth	r3, r3
 8006054:	2b00      	cmp	r3, #0
 8006056:	d007      	beq.n	8006068 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006058:	6a3b      	ldr	r3, [r7, #32]
 800605a:	881b      	ldrh	r3, [r3, #0]
 800605c:	b29b      	uxth	r3, r3
 800605e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	b2da      	uxtb	r2, r3
 8006064:	69fb      	ldr	r3, [r7, #28]
 8006066:	701a      	strb	r2, [r3, #0]
  }
}
 8006068:	bf00      	nop
 800606a:	372c      	adds	r7, #44	; 0x2c
 800606c:	46bd      	mov	sp, r7
 800606e:	bc80      	pop	{r7}
 8006070:	4770      	bx	lr

08006072 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006072:	b580      	push	{r7, lr}
 8006074:	b082      	sub	sp, #8
 8006076:	af00      	add	r7, sp, #0
 8006078:	6078      	str	r0, [r7, #4]
 800607a:	460b      	mov	r3, r1
 800607c:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800607e:	2304      	movs	r3, #4
 8006080:	2203      	movs	r2, #3
 8006082:	2181      	movs	r1, #129	; 0x81
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f001 fc62 	bl	800794e <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2201      	movs	r2, #1
 800608e:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8006090:	2010      	movs	r0, #16
 8006092:	f001 fd71 	bl	8007b78 <USBD_static_malloc>
 8006096:	4602      	mov	r2, r0
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d101      	bne.n	80060ac <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 80060a8:	2302      	movs	r3, #2
 80060aa:	e005      	b.n	80060b8 <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060b2:	2200      	movs	r2, #0
 80060b4:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 80060b6:	2300      	movs	r3, #0
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3708      	adds	r7, #8
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}

080060c0 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b082      	sub	sp, #8
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	460b      	mov	r3, r1
 80060ca:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 80060cc:	2181      	movs	r1, #129	; 0x81
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f001 fc63 	bl	800799a <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2200      	movs	r2, #0
 80060d8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d009      	beq.n	80060f8 <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060ea:	4618      	mov	r0, r3
 80060ec:	f001 fd50 	bl	8007b90 <USBD_static_free>
    pdev->pClassData = NULL;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 80060f8:	2300      	movs	r3, #0
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3708      	adds	r7, #8
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
	...

08006104 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b088      	sub	sp, #32
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006114:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8006116:	2300      	movs	r3, #0
 8006118:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 800611a:	2300      	movs	r3, #0
 800611c:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800611e:	2300      	movs	r3, #0
 8006120:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8006122:	2300      	movs	r3, #0
 8006124:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	781b      	ldrb	r3, [r3, #0]
 800612a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800612e:	2b00      	cmp	r3, #0
 8006130:	d045      	beq.n	80061be <USBD_HID_Setup+0xba>
 8006132:	2b20      	cmp	r3, #32
 8006134:	f040 80d3 	bne.w	80062de <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	785b      	ldrb	r3, [r3, #1]
 800613c:	3b02      	subs	r3, #2
 800613e:	2b09      	cmp	r3, #9
 8006140:	d835      	bhi.n	80061ae <USBD_HID_Setup+0xaa>
 8006142:	a201      	add	r2, pc, #4	; (adr r2, 8006148 <USBD_HID_Setup+0x44>)
 8006144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006148:	0800619f 	.word	0x0800619f
 800614c:	0800617f 	.word	0x0800617f
 8006150:	080061af 	.word	0x080061af
 8006154:	080061af 	.word	0x080061af
 8006158:	080061af 	.word	0x080061af
 800615c:	080061af 	.word	0x080061af
 8006160:	080061af 	.word	0x080061af
 8006164:	080061af 	.word	0x080061af
 8006168:	0800618d 	.word	0x0800618d
 800616c:	08006171 	.word	0x08006171
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	885b      	ldrh	r3, [r3, #2]
 8006174:	b2db      	uxtb	r3, r3
 8006176:	461a      	mov	r2, r3
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	601a      	str	r2, [r3, #0]
          break;
 800617c:	e01e      	b.n	80061bc <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	2201      	movs	r2, #1
 8006182:	4619      	mov	r1, r3
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f001 f922 	bl	80073ce <USBD_CtlSendData>
          break;
 800618a:	e017      	b.n	80061bc <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	885b      	ldrh	r3, [r3, #2]
 8006190:	0a1b      	lsrs	r3, r3, #8
 8006192:	b29b      	uxth	r3, r3
 8006194:	b2db      	uxtb	r3, r3
 8006196:	461a      	mov	r2, r3
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	605a      	str	r2, [r3, #4]
          break;
 800619c:	e00e      	b.n	80061bc <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	3304      	adds	r3, #4
 80061a2:	2201      	movs	r2, #1
 80061a4:	4619      	mov	r1, r3
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f001 f911 	bl	80073ce <USBD_CtlSendData>
          break;
 80061ac:	e006      	b.n	80061bc <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 80061ae:	6839      	ldr	r1, [r7, #0]
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f001 f8a2 	bl	80072fa <USBD_CtlError>
          ret = USBD_FAIL;
 80061b6:	2302      	movs	r3, #2
 80061b8:	75fb      	strb	r3, [r7, #23]
          break;
 80061ba:	bf00      	nop
      }
      break;
 80061bc:	e096      	b.n	80062ec <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	785b      	ldrb	r3, [r3, #1]
 80061c2:	2b0b      	cmp	r3, #11
 80061c4:	f200 8083 	bhi.w	80062ce <USBD_HID_Setup+0x1ca>
 80061c8:	a201      	add	r2, pc, #4	; (adr r2, 80061d0 <USBD_HID_Setup+0xcc>)
 80061ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ce:	bf00      	nop
 80061d0:	08006201 	.word	0x08006201
 80061d4:	080062cf 	.word	0x080062cf
 80061d8:	080062cf 	.word	0x080062cf
 80061dc:	080062cf 	.word	0x080062cf
 80061e0:	080062cf 	.word	0x080062cf
 80061e4:	080062cf 	.word	0x080062cf
 80061e8:	08006229 	.word	0x08006229
 80061ec:	080062cf 	.word	0x080062cf
 80061f0:	080062cf 	.word	0x080062cf
 80061f4:	080062cf 	.word	0x080062cf
 80061f8:	08006281 	.word	0x08006281
 80061fc:	080062a9 	.word	0x080062a9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006206:	2b03      	cmp	r3, #3
 8006208:	d107      	bne.n	800621a <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800620a:	f107 030e 	add.w	r3, r7, #14
 800620e:	2202      	movs	r2, #2
 8006210:	4619      	mov	r1, r3
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f001 f8db 	bl	80073ce <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006218:	e060      	b.n	80062dc <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800621a:	6839      	ldr	r1, [r7, #0]
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f001 f86c 	bl	80072fa <USBD_CtlError>
            ret = USBD_FAIL;
 8006222:	2302      	movs	r3, #2
 8006224:	75fb      	strb	r3, [r7, #23]
          break;
 8006226:	e059      	b.n	80062dc <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	885b      	ldrh	r3, [r3, #2]
 800622c:	0a1b      	lsrs	r3, r3, #8
 800622e:	b29b      	uxth	r3, r3
 8006230:	2b22      	cmp	r3, #34	; 0x22
 8006232:	d108      	bne.n	8006246 <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	88db      	ldrh	r3, [r3, #6]
 8006238:	2b4a      	cmp	r3, #74	; 0x4a
 800623a:	bf28      	it	cs
 800623c:	234a      	movcs	r3, #74	; 0x4a
 800623e:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 8006240:	4b2d      	ldr	r3, [pc, #180]	; (80062f8 <USBD_HID_Setup+0x1f4>)
 8006242:	61bb      	str	r3, [r7, #24]
 8006244:	e015      	b.n	8006272 <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	885b      	ldrh	r3, [r3, #2]
 800624a:	0a1b      	lsrs	r3, r3, #8
 800624c:	b29b      	uxth	r3, r3
 800624e:	2b21      	cmp	r3, #33	; 0x21
 8006250:	d108      	bne.n	8006264 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 8006252:	4b2a      	ldr	r3, [pc, #168]	; (80062fc <USBD_HID_Setup+0x1f8>)
 8006254:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	88db      	ldrh	r3, [r3, #6]
 800625a:	2b09      	cmp	r3, #9
 800625c:	bf28      	it	cs
 800625e:	2309      	movcs	r3, #9
 8006260:	83fb      	strh	r3, [r7, #30]
 8006262:	e006      	b.n	8006272 <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8006264:	6839      	ldr	r1, [r7, #0]
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f001 f847 	bl	80072fa <USBD_CtlError>
            ret = USBD_FAIL;
 800626c:	2302      	movs	r3, #2
 800626e:	75fb      	strb	r3, [r7, #23]
            break;
 8006270:	e034      	b.n	80062dc <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 8006272:	8bfb      	ldrh	r3, [r7, #30]
 8006274:	461a      	mov	r2, r3
 8006276:	69b9      	ldr	r1, [r7, #24]
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f001 f8a8 	bl	80073ce <USBD_CtlSendData>
          break;
 800627e:	e02d      	b.n	80062dc <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006286:	2b03      	cmp	r3, #3
 8006288:	d107      	bne.n	800629a <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	3308      	adds	r3, #8
 800628e:	2201      	movs	r2, #1
 8006290:	4619      	mov	r1, r3
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f001 f89b 	bl	80073ce <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006298:	e020      	b.n	80062dc <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800629a:	6839      	ldr	r1, [r7, #0]
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f001 f82c 	bl	80072fa <USBD_CtlError>
            ret = USBD_FAIL;
 80062a2:	2302      	movs	r3, #2
 80062a4:	75fb      	strb	r3, [r7, #23]
          break;
 80062a6:	e019      	b.n	80062dc <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062ae:	2b03      	cmp	r3, #3
 80062b0:	d106      	bne.n	80062c0 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	885b      	ldrh	r3, [r3, #2]
 80062b6:	b2db      	uxtb	r3, r3
 80062b8:	461a      	mov	r2, r3
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80062be:	e00d      	b.n	80062dc <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 80062c0:	6839      	ldr	r1, [r7, #0]
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f001 f819 	bl	80072fa <USBD_CtlError>
            ret = USBD_FAIL;
 80062c8:	2302      	movs	r3, #2
 80062ca:	75fb      	strb	r3, [r7, #23]
          break;
 80062cc:	e006      	b.n	80062dc <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 80062ce:	6839      	ldr	r1, [r7, #0]
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f001 f812 	bl	80072fa <USBD_CtlError>
          ret = USBD_FAIL;
 80062d6:	2302      	movs	r3, #2
 80062d8:	75fb      	strb	r3, [r7, #23]
          break;
 80062da:	bf00      	nop
      }
      break;
 80062dc:	e006      	b.n	80062ec <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 80062de:	6839      	ldr	r1, [r7, #0]
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f001 f80a 	bl	80072fa <USBD_CtlError>
      ret = USBD_FAIL;
 80062e6:	2302      	movs	r3, #2
 80062e8:	75fb      	strb	r3, [r7, #23]
      break;
 80062ea:	bf00      	nop
  }

  return ret;
 80062ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3720      	adds	r7, #32
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	bf00      	nop
 80062f8:	200000c8 	.word	0x200000c8
 80062fc:	200000b0 	.word	0x200000b0

08006300 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8006300:	b480      	push	{r7}
 8006302:	b083      	sub	sp, #12
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2222      	movs	r2, #34	; 0x22
 800630c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 800630e:	4b03      	ldr	r3, [pc, #12]	; (800631c <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8006310:	4618      	mov	r0, r3
 8006312:	370c      	adds	r7, #12
 8006314:	46bd      	mov	sp, r7
 8006316:	bc80      	pop	{r7}
 8006318:	4770      	bx	lr
 800631a:	bf00      	nop
 800631c:	20000044 	.word	0x20000044

08006320 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8006320:	b480      	push	{r7}
 8006322:	b083      	sub	sp, #12
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2222      	movs	r2, #34	; 0x22
 800632c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 800632e:	4b03      	ldr	r3, [pc, #12]	; (800633c <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8006330:	4618      	mov	r0, r3
 8006332:	370c      	adds	r7, #12
 8006334:	46bd      	mov	sp, r7
 8006336:	bc80      	pop	{r7}
 8006338:	4770      	bx	lr
 800633a:	bf00      	nop
 800633c:	20000068 	.word	0x20000068

08006340 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006340:	b480      	push	{r7}
 8006342:	b083      	sub	sp, #12
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2222      	movs	r2, #34	; 0x22
 800634c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 800634e:	4b03      	ldr	r3, [pc, #12]	; (800635c <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8006350:	4618      	mov	r0, r3
 8006352:	370c      	adds	r7, #12
 8006354:	46bd      	mov	sp, r7
 8006356:	bc80      	pop	{r7}
 8006358:	4770      	bx	lr
 800635a:	bf00      	nop
 800635c:	2000008c 	.word	0x2000008c

08006360 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8006360:	b480      	push	{r7}
 8006362:	b083      	sub	sp, #12
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	460b      	mov	r3, r1
 800636a:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006372:	2200      	movs	r2, #0
 8006374:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 8006376:	2300      	movs	r3, #0
}
 8006378:	4618      	mov	r0, r3
 800637a:	370c      	adds	r7, #12
 800637c:	46bd      	mov	sp, r7
 800637e:	bc80      	pop	{r7}
 8006380:	4770      	bx	lr
	...

08006384 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	220a      	movs	r2, #10
 8006390:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8006392:	4b03      	ldr	r3, [pc, #12]	; (80063a0 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8006394:	4618      	mov	r0, r3
 8006396:	370c      	adds	r7, #12
 8006398:	46bd      	mov	sp, r7
 800639a:	bc80      	pop	{r7}
 800639c:	4770      	bx	lr
 800639e:	bf00      	nop
 80063a0:	200000bc 	.word	0x200000bc

080063a4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b084      	sub	sp, #16
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	60f8      	str	r0, [r7, #12]
 80063ac:	60b9      	str	r1, [r7, #8]
 80063ae:	4613      	mov	r3, r2
 80063b0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d101      	bne.n	80063bc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80063b8:	2302      	movs	r3, #2
 80063ba:	e01a      	b.n	80063f2 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d003      	beq.n	80063ce <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2200      	movs	r2, #0
 80063ca:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d003      	beq.n	80063dc <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	68ba      	ldr	r2, [r7, #8]
 80063d8:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2201      	movs	r2, #1
 80063e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	79fa      	ldrb	r2, [r7, #7]
 80063e8:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80063ea:	68f8      	ldr	r0, [r7, #12]
 80063ec:	f001 fa4c 	bl	8007888 <USBD_LL_Init>

  return USBD_OK;
 80063f0:	2300      	movs	r3, #0
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3710      	adds	r7, #16
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}

080063fa <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80063fa:	b480      	push	{r7}
 80063fc:	b085      	sub	sp, #20
 80063fe:	af00      	add	r7, sp, #0
 8006400:	6078      	str	r0, [r7, #4]
 8006402:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006404:	2300      	movs	r3, #0
 8006406:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d006      	beq.n	800641c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	683a      	ldr	r2, [r7, #0]
 8006412:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006416:	2300      	movs	r3, #0
 8006418:	73fb      	strb	r3, [r7, #15]
 800641a:	e001      	b.n	8006420 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800641c:	2302      	movs	r3, #2
 800641e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006420:	7bfb      	ldrb	r3, [r7, #15]
}
 8006422:	4618      	mov	r0, r3
 8006424:	3714      	adds	r7, #20
 8006426:	46bd      	mov	sp, r7
 8006428:	bc80      	pop	{r7}
 800642a:	4770      	bx	lr

0800642c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b082      	sub	sp, #8
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f001 fa6f 	bl	8007918 <USBD_LL_Start>

  return USBD_OK;
 800643a:	2300      	movs	r3, #0
}
 800643c:	4618      	mov	r0, r3
 800643e:	3708      	adds	r7, #8
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}

08006444 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006444:	b480      	push	{r7}
 8006446:	b083      	sub	sp, #12
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800644c:	2300      	movs	r3, #0
}
 800644e:	4618      	mov	r0, r3
 8006450:	370c      	adds	r7, #12
 8006452:	46bd      	mov	sp, r7
 8006454:	bc80      	pop	{r7}
 8006456:	4770      	bx	lr

08006458 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b084      	sub	sp, #16
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	460b      	mov	r3, r1
 8006462:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006464:	2302      	movs	r3, #2
 8006466:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800646e:	2b00      	cmp	r3, #0
 8006470:	d00c      	beq.n	800648c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	78fa      	ldrb	r2, [r7, #3]
 800647c:	4611      	mov	r1, r2
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	4798      	blx	r3
 8006482:	4603      	mov	r3, r0
 8006484:	2b00      	cmp	r3, #0
 8006486:	d101      	bne.n	800648c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006488:	2300      	movs	r3, #0
 800648a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800648c:	7bfb      	ldrb	r3, [r7, #15]
}
 800648e:	4618      	mov	r0, r3
 8006490:	3710      	adds	r7, #16
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}

08006496 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006496:	b580      	push	{r7, lr}
 8006498:	b082      	sub	sp, #8
 800649a:	af00      	add	r7, sp, #0
 800649c:	6078      	str	r0, [r7, #4]
 800649e:	460b      	mov	r3, r1
 80064a0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	78fa      	ldrb	r2, [r7, #3]
 80064ac:	4611      	mov	r1, r2
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	4798      	blx	r3

  return USBD_OK;
 80064b2:	2300      	movs	r3, #0
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3708      	adds	r7, #8
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}

080064bc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b082      	sub	sp, #8
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80064cc:	6839      	ldr	r1, [r7, #0]
 80064ce:	4618      	mov	r0, r3
 80064d0:	f000 fed7 	bl	8007282 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80064e2:	461a      	mov	r2, r3
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80064f0:	f003 031f 	and.w	r3, r3, #31
 80064f4:	2b02      	cmp	r3, #2
 80064f6:	d016      	beq.n	8006526 <USBD_LL_SetupStage+0x6a>
 80064f8:	2b02      	cmp	r3, #2
 80064fa:	d81c      	bhi.n	8006536 <USBD_LL_SetupStage+0x7a>
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d002      	beq.n	8006506 <USBD_LL_SetupStage+0x4a>
 8006500:	2b01      	cmp	r3, #1
 8006502:	d008      	beq.n	8006516 <USBD_LL_SetupStage+0x5a>
 8006504:	e017      	b.n	8006536 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800650c:	4619      	mov	r1, r3
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 f9ca 	bl	80068a8 <USBD_StdDevReq>
      break;
 8006514:	e01a      	b.n	800654c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800651c:	4619      	mov	r1, r3
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f000 fa2c 	bl	800697c <USBD_StdItfReq>
      break;
 8006524:	e012      	b.n	800654c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800652c:	4619      	mov	r1, r3
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f000 fa6c 	bl	8006a0c <USBD_StdEPReq>
      break;
 8006534:	e00a      	b.n	800654c <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800653c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006540:	b2db      	uxtb	r3, r3
 8006542:	4619      	mov	r1, r3
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f001 fa47 	bl	80079d8 <USBD_LL_StallEP>
      break;
 800654a:	bf00      	nop
  }

  return USBD_OK;
 800654c:	2300      	movs	r3, #0
}
 800654e:	4618      	mov	r0, r3
 8006550:	3708      	adds	r7, #8
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}

08006556 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006556:	b580      	push	{r7, lr}
 8006558:	b086      	sub	sp, #24
 800655a:	af00      	add	r7, sp, #0
 800655c:	60f8      	str	r0, [r7, #12]
 800655e:	460b      	mov	r3, r1
 8006560:	607a      	str	r2, [r7, #4]
 8006562:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006564:	7afb      	ldrb	r3, [r7, #11]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d14b      	bne.n	8006602 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006570:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006578:	2b03      	cmp	r3, #3
 800657a:	d134      	bne.n	80065e6 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	68da      	ldr	r2, [r3, #12]
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	691b      	ldr	r3, [r3, #16]
 8006584:	429a      	cmp	r2, r3
 8006586:	d919      	bls.n	80065bc <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	68da      	ldr	r2, [r3, #12]
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	691b      	ldr	r3, [r3, #16]
 8006590:	1ad2      	subs	r2, r2, r3
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	68da      	ldr	r2, [r3, #12]
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800659e:	429a      	cmp	r2, r3
 80065a0:	d203      	bcs.n	80065aa <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	e002      	b.n	80065b0 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	461a      	mov	r2, r3
 80065b2:	6879      	ldr	r1, [r7, #4]
 80065b4:	68f8      	ldr	r0, [r7, #12]
 80065b6:	f000 ff38 	bl	800742a <USBD_CtlContinueRx>
 80065ba:	e038      	b.n	800662e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065c2:	691b      	ldr	r3, [r3, #16]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d00a      	beq.n	80065de <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80065ce:	2b03      	cmp	r3, #3
 80065d0:	d105      	bne.n	80065de <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065d8:	691b      	ldr	r3, [r3, #16]
 80065da:	68f8      	ldr	r0, [r7, #12]
 80065dc:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80065de:	68f8      	ldr	r0, [r7, #12]
 80065e0:	f000 ff35 	bl	800744e <USBD_CtlSendStatus>
 80065e4:	e023      	b.n	800662e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80065ec:	2b05      	cmp	r3, #5
 80065ee:	d11e      	bne.n	800662e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2200      	movs	r2, #0
 80065f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80065f8:	2100      	movs	r1, #0
 80065fa:	68f8      	ldr	r0, [r7, #12]
 80065fc:	f001 f9ec 	bl	80079d8 <USBD_LL_StallEP>
 8006600:	e015      	b.n	800662e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006608:	699b      	ldr	r3, [r3, #24]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d00d      	beq.n	800662a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006614:	2b03      	cmp	r3, #3
 8006616:	d108      	bne.n	800662a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800661e:	699b      	ldr	r3, [r3, #24]
 8006620:	7afa      	ldrb	r2, [r7, #11]
 8006622:	4611      	mov	r1, r2
 8006624:	68f8      	ldr	r0, [r7, #12]
 8006626:	4798      	blx	r3
 8006628:	e001      	b.n	800662e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800662a:	2302      	movs	r3, #2
 800662c:	e000      	b.n	8006630 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800662e:	2300      	movs	r3, #0
}
 8006630:	4618      	mov	r0, r3
 8006632:	3718      	adds	r7, #24
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}

08006638 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b086      	sub	sp, #24
 800663c:	af00      	add	r7, sp, #0
 800663e:	60f8      	str	r0, [r7, #12]
 8006640:	460b      	mov	r3, r1
 8006642:	607a      	str	r2, [r7, #4]
 8006644:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006646:	7afb      	ldrb	r3, [r7, #11]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d17f      	bne.n	800674c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	3314      	adds	r3, #20
 8006650:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006658:	2b02      	cmp	r3, #2
 800665a:	d15c      	bne.n	8006716 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	68da      	ldr	r2, [r3, #12]
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	691b      	ldr	r3, [r3, #16]
 8006664:	429a      	cmp	r2, r3
 8006666:	d915      	bls.n	8006694 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	68da      	ldr	r2, [r3, #12]
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	691b      	ldr	r3, [r3, #16]
 8006670:	1ad2      	subs	r2, r2, r3
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	b29b      	uxth	r3, r3
 800667c:	461a      	mov	r2, r3
 800667e:	6879      	ldr	r1, [r7, #4]
 8006680:	68f8      	ldr	r0, [r7, #12]
 8006682:	f000 fec0 	bl	8007406 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006686:	2300      	movs	r3, #0
 8006688:	2200      	movs	r2, #0
 800668a:	2100      	movs	r1, #0
 800668c:	68f8      	ldr	r0, [r7, #12]
 800668e:	f001 fa4f 	bl	8007b30 <USBD_LL_PrepareReceive>
 8006692:	e04e      	b.n	8006732 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	697a      	ldr	r2, [r7, #20]
 800669a:	6912      	ldr	r2, [r2, #16]
 800669c:	fbb3 f1f2 	udiv	r1, r3, r2
 80066a0:	fb02 f201 	mul.w	r2, r2, r1
 80066a4:	1a9b      	subs	r3, r3, r2
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d11c      	bne.n	80066e4 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	689a      	ldr	r2, [r3, #8]
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d316      	bcc.n	80066e4 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	689a      	ldr	r2, [r3, #8]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d20f      	bcs.n	80066e4 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80066c4:	2200      	movs	r2, #0
 80066c6:	2100      	movs	r1, #0
 80066c8:	68f8      	ldr	r0, [r7, #12]
 80066ca:	f000 fe9c 	bl	8007406 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2200      	movs	r2, #0
 80066d2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80066d6:	2300      	movs	r3, #0
 80066d8:	2200      	movs	r2, #0
 80066da:	2100      	movs	r1, #0
 80066dc:	68f8      	ldr	r0, [r7, #12]
 80066de:	f001 fa27 	bl	8007b30 <USBD_LL_PrepareReceive>
 80066e2:	e026      	b.n	8006732 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066ea:	68db      	ldr	r3, [r3, #12]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d00a      	beq.n	8006706 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80066f6:	2b03      	cmp	r3, #3
 80066f8:	d105      	bne.n	8006706 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006700:	68db      	ldr	r3, [r3, #12]
 8006702:	68f8      	ldr	r0, [r7, #12]
 8006704:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006706:	2180      	movs	r1, #128	; 0x80
 8006708:	68f8      	ldr	r0, [r7, #12]
 800670a:	f001 f965 	bl	80079d8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800670e:	68f8      	ldr	r0, [r7, #12]
 8006710:	f000 feb0 	bl	8007474 <USBD_CtlReceiveStatus>
 8006714:	e00d      	b.n	8006732 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800671c:	2b04      	cmp	r3, #4
 800671e:	d004      	beq.n	800672a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006726:	2b00      	cmp	r3, #0
 8006728:	d103      	bne.n	8006732 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800672a:	2180      	movs	r1, #128	; 0x80
 800672c:	68f8      	ldr	r0, [r7, #12]
 800672e:	f001 f953 	bl	80079d8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006738:	2b01      	cmp	r3, #1
 800673a:	d11d      	bne.n	8006778 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800673c:	68f8      	ldr	r0, [r7, #12]
 800673e:	f7ff fe81 	bl	8006444 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2200      	movs	r2, #0
 8006746:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800674a:	e015      	b.n	8006778 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006752:	695b      	ldr	r3, [r3, #20]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d00d      	beq.n	8006774 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800675e:	2b03      	cmp	r3, #3
 8006760:	d108      	bne.n	8006774 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006768:	695b      	ldr	r3, [r3, #20]
 800676a:	7afa      	ldrb	r2, [r7, #11]
 800676c:	4611      	mov	r1, r2
 800676e:	68f8      	ldr	r0, [r7, #12]
 8006770:	4798      	blx	r3
 8006772:	e001      	b.n	8006778 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006774:	2302      	movs	r3, #2
 8006776:	e000      	b.n	800677a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006778:	2300      	movs	r3, #0
}
 800677a:	4618      	mov	r0, r3
 800677c:	3718      	adds	r7, #24
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}

08006782 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006782:	b580      	push	{r7, lr}
 8006784:	b082      	sub	sp, #8
 8006786:	af00      	add	r7, sp, #0
 8006788:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800678a:	2340      	movs	r3, #64	; 0x40
 800678c:	2200      	movs	r2, #0
 800678e:	2100      	movs	r1, #0
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f001 f8dc 	bl	800794e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2201      	movs	r2, #1
 800679a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2240      	movs	r2, #64	; 0x40
 80067a2:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80067a6:	2340      	movs	r3, #64	; 0x40
 80067a8:	2200      	movs	r2, #0
 80067aa:	2180      	movs	r1, #128	; 0x80
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f001 f8ce 	bl	800794e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2201      	movs	r2, #1
 80067b6:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2240      	movs	r2, #64	; 0x40
 80067bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2201      	movs	r2, #1
 80067c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2200      	movs	r2, #0
 80067ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2200      	movs	r2, #0
 80067d8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d009      	beq.n	80067fa <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	687a      	ldr	r2, [r7, #4]
 80067f0:	6852      	ldr	r2, [r2, #4]
 80067f2:	b2d2      	uxtb	r2, r2
 80067f4:	4611      	mov	r1, r2
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	4798      	blx	r3
  }

  return USBD_OK;
 80067fa:	2300      	movs	r3, #0
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3708      	adds	r7, #8
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}

08006804 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006804:	b480      	push	{r7}
 8006806:	b083      	sub	sp, #12
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	460b      	mov	r3, r1
 800680e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	78fa      	ldrb	r2, [r7, #3]
 8006814:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006816:	2300      	movs	r3, #0
}
 8006818:	4618      	mov	r0, r3
 800681a:	370c      	adds	r7, #12
 800681c:	46bd      	mov	sp, r7
 800681e:	bc80      	pop	{r7}
 8006820:	4770      	bx	lr

08006822 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006822:	b480      	push	{r7}
 8006824:	b083      	sub	sp, #12
 8006826:	af00      	add	r7, sp, #0
 8006828:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2204      	movs	r2, #4
 800683a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800683e:	2300      	movs	r3, #0
}
 8006840:	4618      	mov	r0, r3
 8006842:	370c      	adds	r7, #12
 8006844:	46bd      	mov	sp, r7
 8006846:	bc80      	pop	{r7}
 8006848:	4770      	bx	lr

0800684a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800684a:	b480      	push	{r7}
 800684c:	b083      	sub	sp, #12
 800684e:	af00      	add	r7, sp, #0
 8006850:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006858:	2b04      	cmp	r3, #4
 800685a:	d105      	bne.n	8006868 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006868:	2300      	movs	r3, #0
}
 800686a:	4618      	mov	r0, r3
 800686c:	370c      	adds	r7, #12
 800686e:	46bd      	mov	sp, r7
 8006870:	bc80      	pop	{r7}
 8006872:	4770      	bx	lr

08006874 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b082      	sub	sp, #8
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006882:	2b03      	cmp	r3, #3
 8006884:	d10b      	bne.n	800689e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800688c:	69db      	ldr	r3, [r3, #28]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d005      	beq.n	800689e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006898:	69db      	ldr	r3, [r3, #28]
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800689e:	2300      	movs	r3, #0
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3708      	adds	r7, #8
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}

080068a8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b084      	sub	sp, #16
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
 80068b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80068b2:	2300      	movs	r3, #0
 80068b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80068be:	2b40      	cmp	r3, #64	; 0x40
 80068c0:	d005      	beq.n	80068ce <USBD_StdDevReq+0x26>
 80068c2:	2b40      	cmp	r3, #64	; 0x40
 80068c4:	d84f      	bhi.n	8006966 <USBD_StdDevReq+0xbe>
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d009      	beq.n	80068de <USBD_StdDevReq+0x36>
 80068ca:	2b20      	cmp	r3, #32
 80068cc:	d14b      	bne.n	8006966 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068d4:	689b      	ldr	r3, [r3, #8]
 80068d6:	6839      	ldr	r1, [r7, #0]
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	4798      	blx	r3
      break;
 80068dc:	e048      	b.n	8006970 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	785b      	ldrb	r3, [r3, #1]
 80068e2:	2b09      	cmp	r3, #9
 80068e4:	d839      	bhi.n	800695a <USBD_StdDevReq+0xb2>
 80068e6:	a201      	add	r2, pc, #4	; (adr r2, 80068ec <USBD_StdDevReq+0x44>)
 80068e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ec:	0800693d 	.word	0x0800693d
 80068f0:	08006951 	.word	0x08006951
 80068f4:	0800695b 	.word	0x0800695b
 80068f8:	08006947 	.word	0x08006947
 80068fc:	0800695b 	.word	0x0800695b
 8006900:	0800691f 	.word	0x0800691f
 8006904:	08006915 	.word	0x08006915
 8006908:	0800695b 	.word	0x0800695b
 800690c:	08006933 	.word	0x08006933
 8006910:	08006929 	.word	0x08006929
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006914:	6839      	ldr	r1, [r7, #0]
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 f9dc 	bl	8006cd4 <USBD_GetDescriptor>
          break;
 800691c:	e022      	b.n	8006964 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800691e:	6839      	ldr	r1, [r7, #0]
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f000 fb3f 	bl	8006fa4 <USBD_SetAddress>
          break;
 8006926:	e01d      	b.n	8006964 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006928:	6839      	ldr	r1, [r7, #0]
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f000 fb7e 	bl	800702c <USBD_SetConfig>
          break;
 8006930:	e018      	b.n	8006964 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006932:	6839      	ldr	r1, [r7, #0]
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f000 fc07 	bl	8007148 <USBD_GetConfig>
          break;
 800693a:	e013      	b.n	8006964 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800693c:	6839      	ldr	r1, [r7, #0]
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 fc37 	bl	80071b2 <USBD_GetStatus>
          break;
 8006944:	e00e      	b.n	8006964 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006946:	6839      	ldr	r1, [r7, #0]
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f000 fc65 	bl	8007218 <USBD_SetFeature>
          break;
 800694e:	e009      	b.n	8006964 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006950:	6839      	ldr	r1, [r7, #0]
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f000 fc74 	bl	8007240 <USBD_ClrFeature>
          break;
 8006958:	e004      	b.n	8006964 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800695a:	6839      	ldr	r1, [r7, #0]
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f000 fccc 	bl	80072fa <USBD_CtlError>
          break;
 8006962:	bf00      	nop
      }
      break;
 8006964:	e004      	b.n	8006970 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006966:	6839      	ldr	r1, [r7, #0]
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f000 fcc6 	bl	80072fa <USBD_CtlError>
      break;
 800696e:	bf00      	nop
  }

  return ret;
 8006970:	7bfb      	ldrb	r3, [r7, #15]
}
 8006972:	4618      	mov	r0, r3
 8006974:	3710      	adds	r7, #16
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}
 800697a:	bf00      	nop

0800697c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b084      	sub	sp, #16
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006986:	2300      	movs	r3, #0
 8006988:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006992:	2b40      	cmp	r3, #64	; 0x40
 8006994:	d005      	beq.n	80069a2 <USBD_StdItfReq+0x26>
 8006996:	2b40      	cmp	r3, #64	; 0x40
 8006998:	d82e      	bhi.n	80069f8 <USBD_StdItfReq+0x7c>
 800699a:	2b00      	cmp	r3, #0
 800699c:	d001      	beq.n	80069a2 <USBD_StdItfReq+0x26>
 800699e:	2b20      	cmp	r3, #32
 80069a0:	d12a      	bne.n	80069f8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069a8:	3b01      	subs	r3, #1
 80069aa:	2b02      	cmp	r3, #2
 80069ac:	d81d      	bhi.n	80069ea <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	889b      	ldrh	r3, [r3, #4]
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	d813      	bhi.n	80069e0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069be:	689b      	ldr	r3, [r3, #8]
 80069c0:	6839      	ldr	r1, [r7, #0]
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	4798      	blx	r3
 80069c6:	4603      	mov	r3, r0
 80069c8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	88db      	ldrh	r3, [r3, #6]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d110      	bne.n	80069f4 <USBD_StdItfReq+0x78>
 80069d2:	7bfb      	ldrb	r3, [r7, #15]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d10d      	bne.n	80069f4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f000 fd38 	bl	800744e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80069de:	e009      	b.n	80069f4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80069e0:	6839      	ldr	r1, [r7, #0]
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 fc89 	bl	80072fa <USBD_CtlError>
          break;
 80069e8:	e004      	b.n	80069f4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80069ea:	6839      	ldr	r1, [r7, #0]
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f000 fc84 	bl	80072fa <USBD_CtlError>
          break;
 80069f2:	e000      	b.n	80069f6 <USBD_StdItfReq+0x7a>
          break;
 80069f4:	bf00      	nop
      }
      break;
 80069f6:	e004      	b.n	8006a02 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80069f8:	6839      	ldr	r1, [r7, #0]
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f000 fc7d 	bl	80072fa <USBD_CtlError>
      break;
 8006a00:	bf00      	nop
  }

  return USBD_OK;
 8006a02:	2300      	movs	r3, #0
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	3710      	adds	r7, #16
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}

08006a0c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b084      	sub	sp, #16
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006a16:	2300      	movs	r3, #0
 8006a18:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	889b      	ldrh	r3, [r3, #4]
 8006a1e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	781b      	ldrb	r3, [r3, #0]
 8006a24:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a28:	2b40      	cmp	r3, #64	; 0x40
 8006a2a:	d007      	beq.n	8006a3c <USBD_StdEPReq+0x30>
 8006a2c:	2b40      	cmp	r3, #64	; 0x40
 8006a2e:	f200 8146 	bhi.w	8006cbe <USBD_StdEPReq+0x2b2>
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d00a      	beq.n	8006a4c <USBD_StdEPReq+0x40>
 8006a36:	2b20      	cmp	r3, #32
 8006a38:	f040 8141 	bne.w	8006cbe <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	6839      	ldr	r1, [r7, #0]
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	4798      	blx	r3
      break;
 8006a4a:	e13d      	b.n	8006cc8 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	781b      	ldrb	r3, [r3, #0]
 8006a50:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a54:	2b20      	cmp	r3, #32
 8006a56:	d10a      	bne.n	8006a6e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	6839      	ldr	r1, [r7, #0]
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	4798      	blx	r3
 8006a66:	4603      	mov	r3, r0
 8006a68:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006a6a:	7bfb      	ldrb	r3, [r7, #15]
 8006a6c:	e12d      	b.n	8006cca <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	785b      	ldrb	r3, [r3, #1]
 8006a72:	2b03      	cmp	r3, #3
 8006a74:	d007      	beq.n	8006a86 <USBD_StdEPReq+0x7a>
 8006a76:	2b03      	cmp	r3, #3
 8006a78:	f300 811b 	bgt.w	8006cb2 <USBD_StdEPReq+0x2a6>
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d072      	beq.n	8006b66 <USBD_StdEPReq+0x15a>
 8006a80:	2b01      	cmp	r3, #1
 8006a82:	d03a      	beq.n	8006afa <USBD_StdEPReq+0xee>
 8006a84:	e115      	b.n	8006cb2 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a8c:	2b02      	cmp	r3, #2
 8006a8e:	d002      	beq.n	8006a96 <USBD_StdEPReq+0x8a>
 8006a90:	2b03      	cmp	r3, #3
 8006a92:	d015      	beq.n	8006ac0 <USBD_StdEPReq+0xb4>
 8006a94:	e02b      	b.n	8006aee <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006a96:	7bbb      	ldrb	r3, [r7, #14]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d00c      	beq.n	8006ab6 <USBD_StdEPReq+0xaa>
 8006a9c:	7bbb      	ldrb	r3, [r7, #14]
 8006a9e:	2b80      	cmp	r3, #128	; 0x80
 8006aa0:	d009      	beq.n	8006ab6 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006aa2:	7bbb      	ldrb	r3, [r7, #14]
 8006aa4:	4619      	mov	r1, r3
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 ff96 	bl	80079d8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006aac:	2180      	movs	r1, #128	; 0x80
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 ff92 	bl	80079d8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006ab4:	e020      	b.n	8006af8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8006ab6:	6839      	ldr	r1, [r7, #0]
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f000 fc1e 	bl	80072fa <USBD_CtlError>
              break;
 8006abe:	e01b      	b.n	8006af8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	885b      	ldrh	r3, [r3, #2]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d10e      	bne.n	8006ae6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8006ac8:	7bbb      	ldrb	r3, [r7, #14]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d00b      	beq.n	8006ae6 <USBD_StdEPReq+0xda>
 8006ace:	7bbb      	ldrb	r3, [r7, #14]
 8006ad0:	2b80      	cmp	r3, #128	; 0x80
 8006ad2:	d008      	beq.n	8006ae6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	88db      	ldrh	r3, [r3, #6]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d104      	bne.n	8006ae6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006adc:	7bbb      	ldrb	r3, [r7, #14]
 8006ade:	4619      	mov	r1, r3
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f000 ff79 	bl	80079d8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 fcb1 	bl	800744e <USBD_CtlSendStatus>

              break;
 8006aec:	e004      	b.n	8006af8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8006aee:	6839      	ldr	r1, [r7, #0]
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f000 fc02 	bl	80072fa <USBD_CtlError>
              break;
 8006af6:	bf00      	nop
          }
          break;
 8006af8:	e0e0      	b.n	8006cbc <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b00:	2b02      	cmp	r3, #2
 8006b02:	d002      	beq.n	8006b0a <USBD_StdEPReq+0xfe>
 8006b04:	2b03      	cmp	r3, #3
 8006b06:	d015      	beq.n	8006b34 <USBD_StdEPReq+0x128>
 8006b08:	e026      	b.n	8006b58 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b0a:	7bbb      	ldrb	r3, [r7, #14]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d00c      	beq.n	8006b2a <USBD_StdEPReq+0x11e>
 8006b10:	7bbb      	ldrb	r3, [r7, #14]
 8006b12:	2b80      	cmp	r3, #128	; 0x80
 8006b14:	d009      	beq.n	8006b2a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006b16:	7bbb      	ldrb	r3, [r7, #14]
 8006b18:	4619      	mov	r1, r3
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f000 ff5c 	bl	80079d8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006b20:	2180      	movs	r1, #128	; 0x80
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f000 ff58 	bl	80079d8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006b28:	e01c      	b.n	8006b64 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8006b2a:	6839      	ldr	r1, [r7, #0]
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f000 fbe4 	bl	80072fa <USBD_CtlError>
              break;
 8006b32:	e017      	b.n	8006b64 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	885b      	ldrh	r3, [r3, #2]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d112      	bne.n	8006b62 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006b3c:	7bbb      	ldrb	r3, [r7, #14]
 8006b3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d004      	beq.n	8006b50 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006b46:	7bbb      	ldrb	r3, [r7, #14]
 8006b48:	4619      	mov	r1, r3
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f000 ff63 	bl	8007a16 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f000 fc7c 	bl	800744e <USBD_CtlSendStatus>
              }
              break;
 8006b56:	e004      	b.n	8006b62 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8006b58:	6839      	ldr	r1, [r7, #0]
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f000 fbcd 	bl	80072fa <USBD_CtlError>
              break;
 8006b60:	e000      	b.n	8006b64 <USBD_StdEPReq+0x158>
              break;
 8006b62:	bf00      	nop
          }
          break;
 8006b64:	e0aa      	b.n	8006cbc <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b6c:	2b02      	cmp	r3, #2
 8006b6e:	d002      	beq.n	8006b76 <USBD_StdEPReq+0x16a>
 8006b70:	2b03      	cmp	r3, #3
 8006b72:	d032      	beq.n	8006bda <USBD_StdEPReq+0x1ce>
 8006b74:	e097      	b.n	8006ca6 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b76:	7bbb      	ldrb	r3, [r7, #14]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d007      	beq.n	8006b8c <USBD_StdEPReq+0x180>
 8006b7c:	7bbb      	ldrb	r3, [r7, #14]
 8006b7e:	2b80      	cmp	r3, #128	; 0x80
 8006b80:	d004      	beq.n	8006b8c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8006b82:	6839      	ldr	r1, [r7, #0]
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f000 fbb8 	bl	80072fa <USBD_CtlError>
                break;
 8006b8a:	e091      	b.n	8006cb0 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	da0b      	bge.n	8006bac <USBD_StdEPReq+0x1a0>
 8006b94:	7bbb      	ldrb	r3, [r7, #14]
 8006b96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b9a:	4613      	mov	r3, r2
 8006b9c:	009b      	lsls	r3, r3, #2
 8006b9e:	4413      	add	r3, r2
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	3310      	adds	r3, #16
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	4413      	add	r3, r2
 8006ba8:	3304      	adds	r3, #4
 8006baa:	e00b      	b.n	8006bc4 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006bac:	7bbb      	ldrb	r3, [r7, #14]
 8006bae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006bb2:	4613      	mov	r3, r2
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	4413      	add	r3, r2
 8006bb8:	009b      	lsls	r3, r3, #2
 8006bba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	4413      	add	r3, r2
 8006bc2:	3304      	adds	r3, #4
 8006bc4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	2202      	movs	r2, #2
 8006bd0:	4619      	mov	r1, r3
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 fbfb 	bl	80073ce <USBD_CtlSendData>
              break;
 8006bd8:	e06a      	b.n	8006cb0 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006bda:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	da11      	bge.n	8006c06 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006be2:	7bbb      	ldrb	r3, [r7, #14]
 8006be4:	f003 020f 	and.w	r2, r3, #15
 8006be8:	6879      	ldr	r1, [r7, #4]
 8006bea:	4613      	mov	r3, r2
 8006bec:	009b      	lsls	r3, r3, #2
 8006bee:	4413      	add	r3, r2
 8006bf0:	009b      	lsls	r3, r3, #2
 8006bf2:	440b      	add	r3, r1
 8006bf4:	3318      	adds	r3, #24
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d117      	bne.n	8006c2c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006bfc:	6839      	ldr	r1, [r7, #0]
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f000 fb7b 	bl	80072fa <USBD_CtlError>
                  break;
 8006c04:	e054      	b.n	8006cb0 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006c06:	7bbb      	ldrb	r3, [r7, #14]
 8006c08:	f003 020f 	and.w	r2, r3, #15
 8006c0c:	6879      	ldr	r1, [r7, #4]
 8006c0e:	4613      	mov	r3, r2
 8006c10:	009b      	lsls	r3, r3, #2
 8006c12:	4413      	add	r3, r2
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	440b      	add	r3, r1
 8006c18:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d104      	bne.n	8006c2c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006c22:	6839      	ldr	r1, [r7, #0]
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f000 fb68 	bl	80072fa <USBD_CtlError>
                  break;
 8006c2a:	e041      	b.n	8006cb0 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	da0b      	bge.n	8006c4c <USBD_StdEPReq+0x240>
 8006c34:	7bbb      	ldrb	r3, [r7, #14]
 8006c36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006c3a:	4613      	mov	r3, r2
 8006c3c:	009b      	lsls	r3, r3, #2
 8006c3e:	4413      	add	r3, r2
 8006c40:	009b      	lsls	r3, r3, #2
 8006c42:	3310      	adds	r3, #16
 8006c44:	687a      	ldr	r2, [r7, #4]
 8006c46:	4413      	add	r3, r2
 8006c48:	3304      	adds	r3, #4
 8006c4a:	e00b      	b.n	8006c64 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006c4c:	7bbb      	ldrb	r3, [r7, #14]
 8006c4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c52:	4613      	mov	r3, r2
 8006c54:	009b      	lsls	r3, r3, #2
 8006c56:	4413      	add	r3, r2
 8006c58:	009b      	lsls	r3, r3, #2
 8006c5a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006c5e:	687a      	ldr	r2, [r7, #4]
 8006c60:	4413      	add	r3, r2
 8006c62:	3304      	adds	r3, #4
 8006c64:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006c66:	7bbb      	ldrb	r3, [r7, #14]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d002      	beq.n	8006c72 <USBD_StdEPReq+0x266>
 8006c6c:	7bbb      	ldrb	r3, [r7, #14]
 8006c6e:	2b80      	cmp	r3, #128	; 0x80
 8006c70:	d103      	bne.n	8006c7a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	2200      	movs	r2, #0
 8006c76:	601a      	str	r2, [r3, #0]
 8006c78:	e00e      	b.n	8006c98 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006c7a:	7bbb      	ldrb	r3, [r7, #14]
 8006c7c:	4619      	mov	r1, r3
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 fee8 	bl	8007a54 <USBD_LL_IsStallEP>
 8006c84:	4603      	mov	r3, r0
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d003      	beq.n	8006c92 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	601a      	str	r2, [r3, #0]
 8006c90:	e002      	b.n	8006c98 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	2200      	movs	r2, #0
 8006c96:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	2202      	movs	r2, #2
 8006c9c:	4619      	mov	r1, r3
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f000 fb95 	bl	80073ce <USBD_CtlSendData>
              break;
 8006ca4:	e004      	b.n	8006cb0 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8006ca6:	6839      	ldr	r1, [r7, #0]
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f000 fb26 	bl	80072fa <USBD_CtlError>
              break;
 8006cae:	bf00      	nop
          }
          break;
 8006cb0:	e004      	b.n	8006cbc <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8006cb2:	6839      	ldr	r1, [r7, #0]
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f000 fb20 	bl	80072fa <USBD_CtlError>
          break;
 8006cba:	bf00      	nop
      }
      break;
 8006cbc:	e004      	b.n	8006cc8 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8006cbe:	6839      	ldr	r1, [r7, #0]
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f000 fb1a 	bl	80072fa <USBD_CtlError>
      break;
 8006cc6:	bf00      	nop
  }

  return ret;
 8006cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3710      	adds	r7, #16
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
	...

08006cd4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b084      	sub	sp, #16
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	885b      	ldrh	r3, [r3, #2]
 8006cee:	0a1b      	lsrs	r3, r3, #8
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	3b01      	subs	r3, #1
 8006cf4:	2b06      	cmp	r3, #6
 8006cf6:	f200 8128 	bhi.w	8006f4a <USBD_GetDescriptor+0x276>
 8006cfa:	a201      	add	r2, pc, #4	; (adr r2, 8006d00 <USBD_GetDescriptor+0x2c>)
 8006cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d00:	08006d1d 	.word	0x08006d1d
 8006d04:	08006d35 	.word	0x08006d35
 8006d08:	08006d75 	.word	0x08006d75
 8006d0c:	08006f4b 	.word	0x08006f4b
 8006d10:	08006f4b 	.word	0x08006f4b
 8006d14:	08006eeb 	.word	0x08006eeb
 8006d18:	08006f17 	.word	0x08006f17
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	687a      	ldr	r2, [r7, #4]
 8006d26:	7c12      	ldrb	r2, [r2, #16]
 8006d28:	f107 0108 	add.w	r1, r7, #8
 8006d2c:	4610      	mov	r0, r2
 8006d2e:	4798      	blx	r3
 8006d30:	60f8      	str	r0, [r7, #12]
      break;
 8006d32:	e112      	b.n	8006f5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	7c1b      	ldrb	r3, [r3, #16]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d10d      	bne.n	8006d58 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d44:	f107 0208 	add.w	r2, r7, #8
 8006d48:	4610      	mov	r0, r2
 8006d4a:	4798      	blx	r3
 8006d4c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	3301      	adds	r3, #1
 8006d52:	2202      	movs	r2, #2
 8006d54:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006d56:	e100      	b.n	8006f5a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d60:	f107 0208 	add.w	r2, r7, #8
 8006d64:	4610      	mov	r0, r2
 8006d66:	4798      	blx	r3
 8006d68:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	3301      	adds	r3, #1
 8006d6e:	2202      	movs	r2, #2
 8006d70:	701a      	strb	r2, [r3, #0]
      break;
 8006d72:	e0f2      	b.n	8006f5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	885b      	ldrh	r3, [r3, #2]
 8006d78:	b2db      	uxtb	r3, r3
 8006d7a:	2b05      	cmp	r3, #5
 8006d7c:	f200 80ac 	bhi.w	8006ed8 <USBD_GetDescriptor+0x204>
 8006d80:	a201      	add	r2, pc, #4	; (adr r2, 8006d88 <USBD_GetDescriptor+0xb4>)
 8006d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d86:	bf00      	nop
 8006d88:	08006da1 	.word	0x08006da1
 8006d8c:	08006dd5 	.word	0x08006dd5
 8006d90:	08006e09 	.word	0x08006e09
 8006d94:	08006e3d 	.word	0x08006e3d
 8006d98:	08006e71 	.word	0x08006e71
 8006d9c:	08006ea5 	.word	0x08006ea5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d00b      	beq.n	8006dc4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	7c12      	ldrb	r2, [r2, #16]
 8006db8:	f107 0108 	add.w	r1, r7, #8
 8006dbc:	4610      	mov	r0, r2
 8006dbe:	4798      	blx	r3
 8006dc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006dc2:	e091      	b.n	8006ee8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006dc4:	6839      	ldr	r1, [r7, #0]
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f000 fa97 	bl	80072fa <USBD_CtlError>
            err++;
 8006dcc:	7afb      	ldrb	r3, [r7, #11]
 8006dce:	3301      	adds	r3, #1
 8006dd0:	72fb      	strb	r3, [r7, #11]
          break;
 8006dd2:	e089      	b.n	8006ee8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006dda:	689b      	ldr	r3, [r3, #8]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d00b      	beq.n	8006df8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	687a      	ldr	r2, [r7, #4]
 8006dea:	7c12      	ldrb	r2, [r2, #16]
 8006dec:	f107 0108 	add.w	r1, r7, #8
 8006df0:	4610      	mov	r0, r2
 8006df2:	4798      	blx	r3
 8006df4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006df6:	e077      	b.n	8006ee8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006df8:	6839      	ldr	r1, [r7, #0]
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 fa7d 	bl	80072fa <USBD_CtlError>
            err++;
 8006e00:	7afb      	ldrb	r3, [r7, #11]
 8006e02:	3301      	adds	r3, #1
 8006e04:	72fb      	strb	r3, [r7, #11]
          break;
 8006e06:	e06f      	b.n	8006ee8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006e0e:	68db      	ldr	r3, [r3, #12]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d00b      	beq.n	8006e2c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006e1a:	68db      	ldr	r3, [r3, #12]
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	7c12      	ldrb	r2, [r2, #16]
 8006e20:	f107 0108 	add.w	r1, r7, #8
 8006e24:	4610      	mov	r0, r2
 8006e26:	4798      	blx	r3
 8006e28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e2a:	e05d      	b.n	8006ee8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e2c:	6839      	ldr	r1, [r7, #0]
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f000 fa63 	bl	80072fa <USBD_CtlError>
            err++;
 8006e34:	7afb      	ldrb	r3, [r7, #11]
 8006e36:	3301      	adds	r3, #1
 8006e38:	72fb      	strb	r3, [r7, #11]
          break;
 8006e3a:	e055      	b.n	8006ee8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006e42:	691b      	ldr	r3, [r3, #16]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d00b      	beq.n	8006e60 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006e4e:	691b      	ldr	r3, [r3, #16]
 8006e50:	687a      	ldr	r2, [r7, #4]
 8006e52:	7c12      	ldrb	r2, [r2, #16]
 8006e54:	f107 0108 	add.w	r1, r7, #8
 8006e58:	4610      	mov	r0, r2
 8006e5a:	4798      	blx	r3
 8006e5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e5e:	e043      	b.n	8006ee8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e60:	6839      	ldr	r1, [r7, #0]
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f000 fa49 	bl	80072fa <USBD_CtlError>
            err++;
 8006e68:	7afb      	ldrb	r3, [r7, #11]
 8006e6a:	3301      	adds	r3, #1
 8006e6c:	72fb      	strb	r3, [r7, #11]
          break;
 8006e6e:	e03b      	b.n	8006ee8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006e76:	695b      	ldr	r3, [r3, #20]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d00b      	beq.n	8006e94 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006e82:	695b      	ldr	r3, [r3, #20]
 8006e84:	687a      	ldr	r2, [r7, #4]
 8006e86:	7c12      	ldrb	r2, [r2, #16]
 8006e88:	f107 0108 	add.w	r1, r7, #8
 8006e8c:	4610      	mov	r0, r2
 8006e8e:	4798      	blx	r3
 8006e90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e92:	e029      	b.n	8006ee8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e94:	6839      	ldr	r1, [r7, #0]
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f000 fa2f 	bl	80072fa <USBD_CtlError>
            err++;
 8006e9c:	7afb      	ldrb	r3, [r7, #11]
 8006e9e:	3301      	adds	r3, #1
 8006ea0:	72fb      	strb	r3, [r7, #11]
          break;
 8006ea2:	e021      	b.n	8006ee8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006eaa:	699b      	ldr	r3, [r3, #24]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d00b      	beq.n	8006ec8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006eb6:	699b      	ldr	r3, [r3, #24]
 8006eb8:	687a      	ldr	r2, [r7, #4]
 8006eba:	7c12      	ldrb	r2, [r2, #16]
 8006ebc:	f107 0108 	add.w	r1, r7, #8
 8006ec0:	4610      	mov	r0, r2
 8006ec2:	4798      	blx	r3
 8006ec4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ec6:	e00f      	b.n	8006ee8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ec8:	6839      	ldr	r1, [r7, #0]
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 fa15 	bl	80072fa <USBD_CtlError>
            err++;
 8006ed0:	7afb      	ldrb	r3, [r7, #11]
 8006ed2:	3301      	adds	r3, #1
 8006ed4:	72fb      	strb	r3, [r7, #11]
          break;
 8006ed6:	e007      	b.n	8006ee8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006ed8:	6839      	ldr	r1, [r7, #0]
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f000 fa0d 	bl	80072fa <USBD_CtlError>
          err++;
 8006ee0:	7afb      	ldrb	r3, [r7, #11]
 8006ee2:	3301      	adds	r3, #1
 8006ee4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8006ee6:	e038      	b.n	8006f5a <USBD_GetDescriptor+0x286>
 8006ee8:	e037      	b.n	8006f5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	7c1b      	ldrb	r3, [r3, #16]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d109      	bne.n	8006f06 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006efa:	f107 0208 	add.w	r2, r7, #8
 8006efe:	4610      	mov	r0, r2
 8006f00:	4798      	blx	r3
 8006f02:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006f04:	e029      	b.n	8006f5a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006f06:	6839      	ldr	r1, [r7, #0]
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f000 f9f6 	bl	80072fa <USBD_CtlError>
        err++;
 8006f0e:	7afb      	ldrb	r3, [r7, #11]
 8006f10:	3301      	adds	r3, #1
 8006f12:	72fb      	strb	r3, [r7, #11]
      break;
 8006f14:	e021      	b.n	8006f5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	7c1b      	ldrb	r3, [r3, #16]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d10d      	bne.n	8006f3a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f26:	f107 0208 	add.w	r2, r7, #8
 8006f2a:	4610      	mov	r0, r2
 8006f2c:	4798      	blx	r3
 8006f2e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	3301      	adds	r3, #1
 8006f34:	2207      	movs	r2, #7
 8006f36:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006f38:	e00f      	b.n	8006f5a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006f3a:	6839      	ldr	r1, [r7, #0]
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f000 f9dc 	bl	80072fa <USBD_CtlError>
        err++;
 8006f42:	7afb      	ldrb	r3, [r7, #11]
 8006f44:	3301      	adds	r3, #1
 8006f46:	72fb      	strb	r3, [r7, #11]
      break;
 8006f48:	e007      	b.n	8006f5a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006f4a:	6839      	ldr	r1, [r7, #0]
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f000 f9d4 	bl	80072fa <USBD_CtlError>
      err++;
 8006f52:	7afb      	ldrb	r3, [r7, #11]
 8006f54:	3301      	adds	r3, #1
 8006f56:	72fb      	strb	r3, [r7, #11]
      break;
 8006f58:	bf00      	nop
  }

  if (err != 0U)
 8006f5a:	7afb      	ldrb	r3, [r7, #11]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d11c      	bne.n	8006f9a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006f60:	893b      	ldrh	r3, [r7, #8]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d011      	beq.n	8006f8a <USBD_GetDescriptor+0x2b6>
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	88db      	ldrh	r3, [r3, #6]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d00d      	beq.n	8006f8a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	88da      	ldrh	r2, [r3, #6]
 8006f72:	893b      	ldrh	r3, [r7, #8]
 8006f74:	4293      	cmp	r3, r2
 8006f76:	bf28      	it	cs
 8006f78:	4613      	movcs	r3, r2
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006f7e:	893b      	ldrh	r3, [r7, #8]
 8006f80:	461a      	mov	r2, r3
 8006f82:	68f9      	ldr	r1, [r7, #12]
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f000 fa22 	bl	80073ce <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	88db      	ldrh	r3, [r3, #6]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d104      	bne.n	8006f9c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f000 fa5b 	bl	800744e <USBD_CtlSendStatus>
 8006f98:	e000      	b.n	8006f9c <USBD_GetDescriptor+0x2c8>
    return;
 8006f9a:	bf00      	nop
    }
  }
}
 8006f9c:	3710      	adds	r7, #16
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}
 8006fa2:	bf00      	nop

08006fa4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b084      	sub	sp, #16
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	889b      	ldrh	r3, [r3, #4]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d130      	bne.n	8007018 <USBD_SetAddress+0x74>
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	88db      	ldrh	r3, [r3, #6]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d12c      	bne.n	8007018 <USBD_SetAddress+0x74>
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	885b      	ldrh	r3, [r3, #2]
 8006fc2:	2b7f      	cmp	r3, #127	; 0x7f
 8006fc4:	d828      	bhi.n	8007018 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	885b      	ldrh	r3, [r3, #2]
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fd0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fd8:	2b03      	cmp	r3, #3
 8006fda:	d104      	bne.n	8006fe6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006fdc:	6839      	ldr	r1, [r7, #0]
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f000 f98b 	bl	80072fa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fe4:	e01d      	b.n	8007022 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	7bfa      	ldrb	r2, [r7, #15]
 8006fea:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006fee:	7bfb      	ldrb	r3, [r7, #15]
 8006ff0:	4619      	mov	r1, r3
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 fd5a 	bl	8007aac <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f000 fa28 	bl	800744e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006ffe:	7bfb      	ldrb	r3, [r7, #15]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d004      	beq.n	800700e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2202      	movs	r2, #2
 8007008:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800700c:	e009      	b.n	8007022 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2201      	movs	r2, #1
 8007012:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007016:	e004      	b.n	8007022 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007018:	6839      	ldr	r1, [r7, #0]
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f000 f96d 	bl	80072fa <USBD_CtlError>
  }
}
 8007020:	bf00      	nop
 8007022:	bf00      	nop
 8007024:	3710      	adds	r7, #16
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}
	...

0800702c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b082      	sub	sp, #8
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
 8007034:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	885b      	ldrh	r3, [r3, #2]
 800703a:	b2da      	uxtb	r2, r3
 800703c:	4b41      	ldr	r3, [pc, #260]	; (8007144 <USBD_SetConfig+0x118>)
 800703e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007040:	4b40      	ldr	r3, [pc, #256]	; (8007144 <USBD_SetConfig+0x118>)
 8007042:	781b      	ldrb	r3, [r3, #0]
 8007044:	2b01      	cmp	r3, #1
 8007046:	d904      	bls.n	8007052 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007048:	6839      	ldr	r1, [r7, #0]
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f000 f955 	bl	80072fa <USBD_CtlError>
 8007050:	e075      	b.n	800713e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007058:	2b02      	cmp	r3, #2
 800705a:	d002      	beq.n	8007062 <USBD_SetConfig+0x36>
 800705c:	2b03      	cmp	r3, #3
 800705e:	d023      	beq.n	80070a8 <USBD_SetConfig+0x7c>
 8007060:	e062      	b.n	8007128 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007062:	4b38      	ldr	r3, [pc, #224]	; (8007144 <USBD_SetConfig+0x118>)
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d01a      	beq.n	80070a0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800706a:	4b36      	ldr	r3, [pc, #216]	; (8007144 <USBD_SetConfig+0x118>)
 800706c:	781b      	ldrb	r3, [r3, #0]
 800706e:	461a      	mov	r2, r3
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2203      	movs	r2, #3
 8007078:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800707c:	4b31      	ldr	r3, [pc, #196]	; (8007144 <USBD_SetConfig+0x118>)
 800707e:	781b      	ldrb	r3, [r3, #0]
 8007080:	4619      	mov	r1, r3
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f7ff f9e8 	bl	8006458 <USBD_SetClassConfig>
 8007088:	4603      	mov	r3, r0
 800708a:	2b02      	cmp	r3, #2
 800708c:	d104      	bne.n	8007098 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800708e:	6839      	ldr	r1, [r7, #0]
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f000 f932 	bl	80072fa <USBD_CtlError>
            return;
 8007096:	e052      	b.n	800713e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f000 f9d8 	bl	800744e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800709e:	e04e      	b.n	800713e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f000 f9d4 	bl	800744e <USBD_CtlSendStatus>
        break;
 80070a6:	e04a      	b.n	800713e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80070a8:	4b26      	ldr	r3, [pc, #152]	; (8007144 <USBD_SetConfig+0x118>)
 80070aa:	781b      	ldrb	r3, [r3, #0]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d112      	bne.n	80070d6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2202      	movs	r2, #2
 80070b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80070b8:	4b22      	ldr	r3, [pc, #136]	; (8007144 <USBD_SetConfig+0x118>)
 80070ba:	781b      	ldrb	r3, [r3, #0]
 80070bc:	461a      	mov	r2, r3
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80070c2:	4b20      	ldr	r3, [pc, #128]	; (8007144 <USBD_SetConfig+0x118>)
 80070c4:	781b      	ldrb	r3, [r3, #0]
 80070c6:	4619      	mov	r1, r3
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f7ff f9e4 	bl	8006496 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f000 f9bd 	bl	800744e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80070d4:	e033      	b.n	800713e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80070d6:	4b1b      	ldr	r3, [pc, #108]	; (8007144 <USBD_SetConfig+0x118>)
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	461a      	mov	r2, r3
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d01d      	beq.n	8007120 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	b2db      	uxtb	r3, r3
 80070ea:	4619      	mov	r1, r3
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f7ff f9d2 	bl	8006496 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80070f2:	4b14      	ldr	r3, [pc, #80]	; (8007144 <USBD_SetConfig+0x118>)
 80070f4:	781b      	ldrb	r3, [r3, #0]
 80070f6:	461a      	mov	r2, r3
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80070fc:	4b11      	ldr	r3, [pc, #68]	; (8007144 <USBD_SetConfig+0x118>)
 80070fe:	781b      	ldrb	r3, [r3, #0]
 8007100:	4619      	mov	r1, r3
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f7ff f9a8 	bl	8006458 <USBD_SetClassConfig>
 8007108:	4603      	mov	r3, r0
 800710a:	2b02      	cmp	r3, #2
 800710c:	d104      	bne.n	8007118 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800710e:	6839      	ldr	r1, [r7, #0]
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f000 f8f2 	bl	80072fa <USBD_CtlError>
            return;
 8007116:	e012      	b.n	800713e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f000 f998 	bl	800744e <USBD_CtlSendStatus>
        break;
 800711e:	e00e      	b.n	800713e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f000 f994 	bl	800744e <USBD_CtlSendStatus>
        break;
 8007126:	e00a      	b.n	800713e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007128:	6839      	ldr	r1, [r7, #0]
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f000 f8e5 	bl	80072fa <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007130:	4b04      	ldr	r3, [pc, #16]	; (8007144 <USBD_SetConfig+0x118>)
 8007132:	781b      	ldrb	r3, [r3, #0]
 8007134:	4619      	mov	r1, r3
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f7ff f9ad 	bl	8006496 <USBD_ClrClassConfig>
        break;
 800713c:	bf00      	nop
    }
  }
}
 800713e:	3708      	adds	r7, #8
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}
 8007144:	20000186 	.word	0x20000186

08007148 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b082      	sub	sp, #8
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	88db      	ldrh	r3, [r3, #6]
 8007156:	2b01      	cmp	r3, #1
 8007158:	d004      	beq.n	8007164 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800715a:	6839      	ldr	r1, [r7, #0]
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f000 f8cc 	bl	80072fa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007162:	e022      	b.n	80071aa <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800716a:	2b02      	cmp	r3, #2
 800716c:	dc02      	bgt.n	8007174 <USBD_GetConfig+0x2c>
 800716e:	2b00      	cmp	r3, #0
 8007170:	dc03      	bgt.n	800717a <USBD_GetConfig+0x32>
 8007172:	e015      	b.n	80071a0 <USBD_GetConfig+0x58>
 8007174:	2b03      	cmp	r3, #3
 8007176:	d00b      	beq.n	8007190 <USBD_GetConfig+0x48>
 8007178:	e012      	b.n	80071a0 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2200      	movs	r2, #0
 800717e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	3308      	adds	r3, #8
 8007184:	2201      	movs	r2, #1
 8007186:	4619      	mov	r1, r3
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f000 f920 	bl	80073ce <USBD_CtlSendData>
        break;
 800718e:	e00c      	b.n	80071aa <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	3304      	adds	r3, #4
 8007194:	2201      	movs	r2, #1
 8007196:	4619      	mov	r1, r3
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f000 f918 	bl	80073ce <USBD_CtlSendData>
        break;
 800719e:	e004      	b.n	80071aa <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80071a0:	6839      	ldr	r1, [r7, #0]
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f000 f8a9 	bl	80072fa <USBD_CtlError>
        break;
 80071a8:	bf00      	nop
}
 80071aa:	bf00      	nop
 80071ac:	3708      	adds	r7, #8
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}

080071b2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071b2:	b580      	push	{r7, lr}
 80071b4:	b082      	sub	sp, #8
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	6078      	str	r0, [r7, #4]
 80071ba:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071c2:	3b01      	subs	r3, #1
 80071c4:	2b02      	cmp	r3, #2
 80071c6:	d81e      	bhi.n	8007206 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	88db      	ldrh	r3, [r3, #6]
 80071cc:	2b02      	cmp	r3, #2
 80071ce:	d004      	beq.n	80071da <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80071d0:	6839      	ldr	r1, [r7, #0]
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 f891 	bl	80072fa <USBD_CtlError>
        break;
 80071d8:	e01a      	b.n	8007210 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2201      	movs	r2, #1
 80071de:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d005      	beq.n	80071f6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	68db      	ldr	r3, [r3, #12]
 80071ee:	f043 0202 	orr.w	r2, r3, #2
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	330c      	adds	r3, #12
 80071fa:	2202      	movs	r2, #2
 80071fc:	4619      	mov	r1, r3
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f000 f8e5 	bl	80073ce <USBD_CtlSendData>
      break;
 8007204:	e004      	b.n	8007210 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007206:	6839      	ldr	r1, [r7, #0]
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f000 f876 	bl	80072fa <USBD_CtlError>
      break;
 800720e:	bf00      	nop
  }
}
 8007210:	bf00      	nop
 8007212:	3708      	adds	r7, #8
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}

08007218 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b082      	sub	sp, #8
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	885b      	ldrh	r3, [r3, #2]
 8007226:	2b01      	cmp	r3, #1
 8007228:	d106      	bne.n	8007238 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2201      	movs	r2, #1
 800722e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f000 f90b 	bl	800744e <USBD_CtlSendStatus>
  }
}
 8007238:	bf00      	nop
 800723a:	3708      	adds	r7, #8
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}

08007240 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b082      	sub	sp, #8
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007250:	3b01      	subs	r3, #1
 8007252:	2b02      	cmp	r3, #2
 8007254:	d80b      	bhi.n	800726e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	885b      	ldrh	r3, [r3, #2]
 800725a:	2b01      	cmp	r3, #1
 800725c:	d10c      	bne.n	8007278 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f000 f8f1 	bl	800744e <USBD_CtlSendStatus>
      }
      break;
 800726c:	e004      	b.n	8007278 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800726e:	6839      	ldr	r1, [r7, #0]
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f000 f842 	bl	80072fa <USBD_CtlError>
      break;
 8007276:	e000      	b.n	800727a <USBD_ClrFeature+0x3a>
      break;
 8007278:	bf00      	nop
  }
}
 800727a:	bf00      	nop
 800727c:	3708      	adds	r7, #8
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}

08007282 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007282:	b480      	push	{r7}
 8007284:	b083      	sub	sp, #12
 8007286:	af00      	add	r7, sp, #0
 8007288:	6078      	str	r0, [r7, #4]
 800728a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	781a      	ldrb	r2, [r3, #0]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	785a      	ldrb	r2, [r3, #1]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	3302      	adds	r3, #2
 80072a0:	781b      	ldrb	r3, [r3, #0]
 80072a2:	b29a      	uxth	r2, r3
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	3303      	adds	r3, #3
 80072a8:	781b      	ldrb	r3, [r3, #0]
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	021b      	lsls	r3, r3, #8
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	4413      	add	r3, r2
 80072b2:	b29a      	uxth	r2, r3
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	3304      	adds	r3, #4
 80072bc:	781b      	ldrb	r3, [r3, #0]
 80072be:	b29a      	uxth	r2, r3
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	3305      	adds	r3, #5
 80072c4:	781b      	ldrb	r3, [r3, #0]
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	021b      	lsls	r3, r3, #8
 80072ca:	b29b      	uxth	r3, r3
 80072cc:	4413      	add	r3, r2
 80072ce:	b29a      	uxth	r2, r3
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	3306      	adds	r3, #6
 80072d8:	781b      	ldrb	r3, [r3, #0]
 80072da:	b29a      	uxth	r2, r3
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	3307      	adds	r3, #7
 80072e0:	781b      	ldrb	r3, [r3, #0]
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	021b      	lsls	r3, r3, #8
 80072e6:	b29b      	uxth	r3, r3
 80072e8:	4413      	add	r3, r2
 80072ea:	b29a      	uxth	r2, r3
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	80da      	strh	r2, [r3, #6]

}
 80072f0:	bf00      	nop
 80072f2:	370c      	adds	r7, #12
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bc80      	pop	{r7}
 80072f8:	4770      	bx	lr

080072fa <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80072fa:	b580      	push	{r7, lr}
 80072fc:	b082      	sub	sp, #8
 80072fe:	af00      	add	r7, sp, #0
 8007300:	6078      	str	r0, [r7, #4]
 8007302:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007304:	2180      	movs	r1, #128	; 0x80
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 fb66 	bl	80079d8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800730c:	2100      	movs	r1, #0
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 fb62 	bl	80079d8 <USBD_LL_StallEP>
}
 8007314:	bf00      	nop
 8007316:	3708      	adds	r7, #8
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}

0800731c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b086      	sub	sp, #24
 8007320:	af00      	add	r7, sp, #0
 8007322:	60f8      	str	r0, [r7, #12]
 8007324:	60b9      	str	r1, [r7, #8]
 8007326:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007328:	2300      	movs	r3, #0
 800732a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d032      	beq.n	8007398 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007332:	68f8      	ldr	r0, [r7, #12]
 8007334:	f000 f834 	bl	80073a0 <USBD_GetLen>
 8007338:	4603      	mov	r3, r0
 800733a:	3301      	adds	r3, #1
 800733c:	b29b      	uxth	r3, r3
 800733e:	005b      	lsls	r3, r3, #1
 8007340:	b29a      	uxth	r2, r3
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007346:	7dfb      	ldrb	r3, [r7, #23]
 8007348:	1c5a      	adds	r2, r3, #1
 800734a:	75fa      	strb	r2, [r7, #23]
 800734c:	461a      	mov	r2, r3
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	4413      	add	r3, r2
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	7812      	ldrb	r2, [r2, #0]
 8007356:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007358:	7dfb      	ldrb	r3, [r7, #23]
 800735a:	1c5a      	adds	r2, r3, #1
 800735c:	75fa      	strb	r2, [r7, #23]
 800735e:	461a      	mov	r2, r3
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	4413      	add	r3, r2
 8007364:	2203      	movs	r2, #3
 8007366:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007368:	e012      	b.n	8007390 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	1c5a      	adds	r2, r3, #1
 800736e:	60fa      	str	r2, [r7, #12]
 8007370:	7dfa      	ldrb	r2, [r7, #23]
 8007372:	1c51      	adds	r1, r2, #1
 8007374:	75f9      	strb	r1, [r7, #23]
 8007376:	4611      	mov	r1, r2
 8007378:	68ba      	ldr	r2, [r7, #8]
 800737a:	440a      	add	r2, r1
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007380:	7dfb      	ldrb	r3, [r7, #23]
 8007382:	1c5a      	adds	r2, r3, #1
 8007384:	75fa      	strb	r2, [r7, #23]
 8007386:	461a      	mov	r2, r3
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	4413      	add	r3, r2
 800738c:	2200      	movs	r2, #0
 800738e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	781b      	ldrb	r3, [r3, #0]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d1e8      	bne.n	800736a <USBD_GetString+0x4e>
    }
  }
}
 8007398:	bf00      	nop
 800739a:	3718      	adds	r7, #24
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}

080073a0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b085      	sub	sp, #20
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80073a8:	2300      	movs	r3, #0
 80073aa:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80073ac:	e005      	b.n	80073ba <USBD_GetLen+0x1a>
  {
    len++;
 80073ae:	7bfb      	ldrb	r3, [r7, #15]
 80073b0:	3301      	adds	r3, #1
 80073b2:	73fb      	strb	r3, [r7, #15]
    buf++;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	3301      	adds	r3, #1
 80073b8:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d1f5      	bne.n	80073ae <USBD_GetLen+0xe>
  }

  return len;
 80073c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	3714      	adds	r7, #20
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bc80      	pop	{r7}
 80073cc:	4770      	bx	lr

080073ce <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80073ce:	b580      	push	{r7, lr}
 80073d0:	b084      	sub	sp, #16
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	60f8      	str	r0, [r7, #12]
 80073d6:	60b9      	str	r1, [r7, #8]
 80073d8:	4613      	mov	r3, r2
 80073da:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2202      	movs	r2, #2
 80073e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80073e4:	88fa      	ldrh	r2, [r7, #6]
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80073ea:	88fa      	ldrh	r2, [r7, #6]
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80073f0:	88fb      	ldrh	r3, [r7, #6]
 80073f2:	68ba      	ldr	r2, [r7, #8]
 80073f4:	2100      	movs	r1, #0
 80073f6:	68f8      	ldr	r0, [r7, #12]
 80073f8:	f000 fb77 	bl	8007aea <USBD_LL_Transmit>

  return USBD_OK;
 80073fc:	2300      	movs	r3, #0
}
 80073fe:	4618      	mov	r0, r3
 8007400:	3710      	adds	r7, #16
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}

08007406 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007406:	b580      	push	{r7, lr}
 8007408:	b084      	sub	sp, #16
 800740a:	af00      	add	r7, sp, #0
 800740c:	60f8      	str	r0, [r7, #12]
 800740e:	60b9      	str	r1, [r7, #8]
 8007410:	4613      	mov	r3, r2
 8007412:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007414:	88fb      	ldrh	r3, [r7, #6]
 8007416:	68ba      	ldr	r2, [r7, #8]
 8007418:	2100      	movs	r1, #0
 800741a:	68f8      	ldr	r0, [r7, #12]
 800741c:	f000 fb65 	bl	8007aea <USBD_LL_Transmit>

  return USBD_OK;
 8007420:	2300      	movs	r3, #0
}
 8007422:	4618      	mov	r0, r3
 8007424:	3710      	adds	r7, #16
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}

0800742a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800742a:	b580      	push	{r7, lr}
 800742c:	b084      	sub	sp, #16
 800742e:	af00      	add	r7, sp, #0
 8007430:	60f8      	str	r0, [r7, #12]
 8007432:	60b9      	str	r1, [r7, #8]
 8007434:	4613      	mov	r3, r2
 8007436:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007438:	88fb      	ldrh	r3, [r7, #6]
 800743a:	68ba      	ldr	r2, [r7, #8]
 800743c:	2100      	movs	r1, #0
 800743e:	68f8      	ldr	r0, [r7, #12]
 8007440:	f000 fb76 	bl	8007b30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007444:	2300      	movs	r3, #0
}
 8007446:	4618      	mov	r0, r3
 8007448:	3710      	adds	r7, #16
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}

0800744e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800744e:	b580      	push	{r7, lr}
 8007450:	b082      	sub	sp, #8
 8007452:	af00      	add	r7, sp, #0
 8007454:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2204      	movs	r2, #4
 800745a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800745e:	2300      	movs	r3, #0
 8007460:	2200      	movs	r2, #0
 8007462:	2100      	movs	r1, #0
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f000 fb40 	bl	8007aea <USBD_LL_Transmit>

  return USBD_OK;
 800746a:	2300      	movs	r3, #0
}
 800746c:	4618      	mov	r0, r3
 800746e:	3708      	adds	r7, #8
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}

08007474 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b082      	sub	sp, #8
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2205      	movs	r2, #5
 8007480:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007484:	2300      	movs	r3, #0
 8007486:	2200      	movs	r2, #0
 8007488:	2100      	movs	r1, #0
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f000 fb50 	bl	8007b30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007490:	2300      	movs	r3, #0
}
 8007492:	4618      	mov	r0, r3
 8007494:	3708      	adds	r7, #8
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}
	...

0800749c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80074a0:	2200      	movs	r2, #0
 80074a2:	490e      	ldr	r1, [pc, #56]	; (80074dc <MX_USB_DEVICE_Init+0x40>)
 80074a4:	480e      	ldr	r0, [pc, #56]	; (80074e0 <MX_USB_DEVICE_Init+0x44>)
 80074a6:	f7fe ff7d 	bl	80063a4 <USBD_Init>
 80074aa:	4603      	mov	r3, r0
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d001      	beq.n	80074b4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80074b0:	f7f8 ffe8 	bl	8000484 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 80074b4:	490b      	ldr	r1, [pc, #44]	; (80074e4 <MX_USB_DEVICE_Init+0x48>)
 80074b6:	480a      	ldr	r0, [pc, #40]	; (80074e0 <MX_USB_DEVICE_Init+0x44>)
 80074b8:	f7fe ff9f 	bl	80063fa <USBD_RegisterClass>
 80074bc:	4603      	mov	r3, r0
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d001      	beq.n	80074c6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80074c2:	f7f8 ffdf 	bl	8000484 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80074c6:	4806      	ldr	r0, [pc, #24]	; (80074e0 <MX_USB_DEVICE_Init+0x44>)
 80074c8:	f7fe ffb0 	bl	800642c <USBD_Start>
 80074cc:	4603      	mov	r3, r0
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d001      	beq.n	80074d6 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 80074d2:	f7f8 ffd7 	bl	8000484 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80074d6:	bf00      	nop
 80074d8:	bd80      	pop	{r7, pc}
 80074da:	bf00      	nop
 80074dc:	20000114 	.word	0x20000114
 80074e0:	20000200 	.word	0x20000200
 80074e4:	2000000c 	.word	0x2000000c

080074e8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b083      	sub	sp, #12
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	4603      	mov	r3, r0
 80074f0:	6039      	str	r1, [r7, #0]
 80074f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	2212      	movs	r2, #18
 80074f8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80074fa:	4b03      	ldr	r3, [pc, #12]	; (8007508 <USBD_FS_DeviceDescriptor+0x20>)
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	370c      	adds	r7, #12
 8007500:	46bd      	mov	sp, r7
 8007502:	bc80      	pop	{r7}
 8007504:	4770      	bx	lr
 8007506:	bf00      	nop
 8007508:	20000130 	.word	0x20000130

0800750c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800750c:	b480      	push	{r7}
 800750e:	b083      	sub	sp, #12
 8007510:	af00      	add	r7, sp, #0
 8007512:	4603      	mov	r3, r0
 8007514:	6039      	str	r1, [r7, #0]
 8007516:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	2204      	movs	r2, #4
 800751c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800751e:	4b03      	ldr	r3, [pc, #12]	; (800752c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007520:	4618      	mov	r0, r3
 8007522:	370c      	adds	r7, #12
 8007524:	46bd      	mov	sp, r7
 8007526:	bc80      	pop	{r7}
 8007528:	4770      	bx	lr
 800752a:	bf00      	nop
 800752c:	20000144 	.word	0x20000144

08007530 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b082      	sub	sp, #8
 8007534:	af00      	add	r7, sp, #0
 8007536:	4603      	mov	r3, r0
 8007538:	6039      	str	r1, [r7, #0]
 800753a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800753c:	79fb      	ldrb	r3, [r7, #7]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d105      	bne.n	800754e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007542:	683a      	ldr	r2, [r7, #0]
 8007544:	4907      	ldr	r1, [pc, #28]	; (8007564 <USBD_FS_ProductStrDescriptor+0x34>)
 8007546:	4808      	ldr	r0, [pc, #32]	; (8007568 <USBD_FS_ProductStrDescriptor+0x38>)
 8007548:	f7ff fee8 	bl	800731c <USBD_GetString>
 800754c:	e004      	b.n	8007558 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800754e:	683a      	ldr	r2, [r7, #0]
 8007550:	4904      	ldr	r1, [pc, #16]	; (8007564 <USBD_FS_ProductStrDescriptor+0x34>)
 8007552:	4805      	ldr	r0, [pc, #20]	; (8007568 <USBD_FS_ProductStrDescriptor+0x38>)
 8007554:	f7ff fee2 	bl	800731c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007558:	4b02      	ldr	r3, [pc, #8]	; (8007564 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800755a:	4618      	mov	r0, r3
 800755c:	3708      	adds	r7, #8
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}
 8007562:	bf00      	nop
 8007564:	200004c4 	.word	0x200004c4
 8007568:	08007ca0 	.word	0x08007ca0

0800756c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b082      	sub	sp, #8
 8007570:	af00      	add	r7, sp, #0
 8007572:	4603      	mov	r3, r0
 8007574:	6039      	str	r1, [r7, #0]
 8007576:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007578:	683a      	ldr	r2, [r7, #0]
 800757a:	4904      	ldr	r1, [pc, #16]	; (800758c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800757c:	4804      	ldr	r0, [pc, #16]	; (8007590 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800757e:	f7ff fecd 	bl	800731c <USBD_GetString>
  return USBD_StrDesc;
 8007582:	4b02      	ldr	r3, [pc, #8]	; (800758c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007584:	4618      	mov	r0, r3
 8007586:	3708      	adds	r7, #8
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}
 800758c:	200004c4 	.word	0x200004c4
 8007590:	08007cb4 	.word	0x08007cb4

08007594 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b082      	sub	sp, #8
 8007598:	af00      	add	r7, sp, #0
 800759a:	4603      	mov	r3, r0
 800759c:	6039      	str	r1, [r7, #0]
 800759e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	221a      	movs	r2, #26
 80075a4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80075a6:	f000 f843 	bl	8007630 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80075aa:	4b02      	ldr	r3, [pc, #8]	; (80075b4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3708      	adds	r7, #8
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}
 80075b4:	20000148 	.word	0x20000148

080075b8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b082      	sub	sp, #8
 80075bc:	af00      	add	r7, sp, #0
 80075be:	4603      	mov	r3, r0
 80075c0:	6039      	str	r1, [r7, #0]
 80075c2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80075c4:	79fb      	ldrb	r3, [r7, #7]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d105      	bne.n	80075d6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80075ca:	683a      	ldr	r2, [r7, #0]
 80075cc:	4907      	ldr	r1, [pc, #28]	; (80075ec <USBD_FS_ConfigStrDescriptor+0x34>)
 80075ce:	4808      	ldr	r0, [pc, #32]	; (80075f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80075d0:	f7ff fea4 	bl	800731c <USBD_GetString>
 80075d4:	e004      	b.n	80075e0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80075d6:	683a      	ldr	r2, [r7, #0]
 80075d8:	4904      	ldr	r1, [pc, #16]	; (80075ec <USBD_FS_ConfigStrDescriptor+0x34>)
 80075da:	4805      	ldr	r0, [pc, #20]	; (80075f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80075dc:	f7ff fe9e 	bl	800731c <USBD_GetString>
  }
  return USBD_StrDesc;
 80075e0:	4b02      	ldr	r3, [pc, #8]	; (80075ec <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3708      	adds	r7, #8
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}
 80075ea:	bf00      	nop
 80075ec:	200004c4 	.word	0x200004c4
 80075f0:	08007cc8 	.word	0x08007cc8

080075f4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b082      	sub	sp, #8
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	4603      	mov	r3, r0
 80075fc:	6039      	str	r1, [r7, #0]
 80075fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007600:	79fb      	ldrb	r3, [r7, #7]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d105      	bne.n	8007612 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007606:	683a      	ldr	r2, [r7, #0]
 8007608:	4907      	ldr	r1, [pc, #28]	; (8007628 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800760a:	4808      	ldr	r0, [pc, #32]	; (800762c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800760c:	f7ff fe86 	bl	800731c <USBD_GetString>
 8007610:	e004      	b.n	800761c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007612:	683a      	ldr	r2, [r7, #0]
 8007614:	4904      	ldr	r1, [pc, #16]	; (8007628 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007616:	4805      	ldr	r0, [pc, #20]	; (800762c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007618:	f7ff fe80 	bl	800731c <USBD_GetString>
  }
  return USBD_StrDesc;
 800761c:	4b02      	ldr	r3, [pc, #8]	; (8007628 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800761e:	4618      	mov	r0, r3
 8007620:	3708      	adds	r7, #8
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}
 8007626:	bf00      	nop
 8007628:	200004c4 	.word	0x200004c4
 800762c:	08007cd4 	.word	0x08007cd4

08007630 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b084      	sub	sp, #16
 8007634:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007636:	4b0f      	ldr	r3, [pc, #60]	; (8007674 <Get_SerialNum+0x44>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800763c:	4b0e      	ldr	r3, [pc, #56]	; (8007678 <Get_SerialNum+0x48>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007642:	4b0e      	ldr	r3, [pc, #56]	; (800767c <Get_SerialNum+0x4c>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007648:	68fa      	ldr	r2, [r7, #12]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	4413      	add	r3, r2
 800764e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d009      	beq.n	800766a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007656:	2208      	movs	r2, #8
 8007658:	4909      	ldr	r1, [pc, #36]	; (8007680 <Get_SerialNum+0x50>)
 800765a:	68f8      	ldr	r0, [r7, #12]
 800765c:	f000 f814 	bl	8007688 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007660:	2204      	movs	r2, #4
 8007662:	4908      	ldr	r1, [pc, #32]	; (8007684 <Get_SerialNum+0x54>)
 8007664:	68b8      	ldr	r0, [r7, #8]
 8007666:	f000 f80f 	bl	8007688 <IntToUnicode>
  }
}
 800766a:	bf00      	nop
 800766c:	3710      	adds	r7, #16
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}
 8007672:	bf00      	nop
 8007674:	1ffff7e8 	.word	0x1ffff7e8
 8007678:	1ffff7ec 	.word	0x1ffff7ec
 800767c:	1ffff7f0 	.word	0x1ffff7f0
 8007680:	2000014a 	.word	0x2000014a
 8007684:	2000015a 	.word	0x2000015a

08007688 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007688:	b480      	push	{r7}
 800768a:	b087      	sub	sp, #28
 800768c:	af00      	add	r7, sp, #0
 800768e:	60f8      	str	r0, [r7, #12]
 8007690:	60b9      	str	r1, [r7, #8]
 8007692:	4613      	mov	r3, r2
 8007694:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007696:	2300      	movs	r3, #0
 8007698:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800769a:	2300      	movs	r3, #0
 800769c:	75fb      	strb	r3, [r7, #23]
 800769e:	e027      	b.n	80076f0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	0f1b      	lsrs	r3, r3, #28
 80076a4:	2b09      	cmp	r3, #9
 80076a6:	d80b      	bhi.n	80076c0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	0f1b      	lsrs	r3, r3, #28
 80076ac:	b2da      	uxtb	r2, r3
 80076ae:	7dfb      	ldrb	r3, [r7, #23]
 80076b0:	005b      	lsls	r3, r3, #1
 80076b2:	4619      	mov	r1, r3
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	440b      	add	r3, r1
 80076b8:	3230      	adds	r2, #48	; 0x30
 80076ba:	b2d2      	uxtb	r2, r2
 80076bc:	701a      	strb	r2, [r3, #0]
 80076be:	e00a      	b.n	80076d6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	0f1b      	lsrs	r3, r3, #28
 80076c4:	b2da      	uxtb	r2, r3
 80076c6:	7dfb      	ldrb	r3, [r7, #23]
 80076c8:	005b      	lsls	r3, r3, #1
 80076ca:	4619      	mov	r1, r3
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	440b      	add	r3, r1
 80076d0:	3237      	adds	r2, #55	; 0x37
 80076d2:	b2d2      	uxtb	r2, r2
 80076d4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	011b      	lsls	r3, r3, #4
 80076da:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80076dc:	7dfb      	ldrb	r3, [r7, #23]
 80076de:	005b      	lsls	r3, r3, #1
 80076e0:	3301      	adds	r3, #1
 80076e2:	68ba      	ldr	r2, [r7, #8]
 80076e4:	4413      	add	r3, r2
 80076e6:	2200      	movs	r2, #0
 80076e8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80076ea:	7dfb      	ldrb	r3, [r7, #23]
 80076ec:	3301      	adds	r3, #1
 80076ee:	75fb      	strb	r3, [r7, #23]
 80076f0:	7dfa      	ldrb	r2, [r7, #23]
 80076f2:	79fb      	ldrb	r3, [r7, #7]
 80076f4:	429a      	cmp	r2, r3
 80076f6:	d3d3      	bcc.n	80076a0 <IntToUnicode+0x18>
  }
}
 80076f8:	bf00      	nop
 80076fa:	bf00      	nop
 80076fc:	371c      	adds	r7, #28
 80076fe:	46bd      	mov	sp, r7
 8007700:	bc80      	pop	{r7}
 8007702:	4770      	bx	lr

08007704 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b084      	sub	sp, #16
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a0d      	ldr	r2, [pc, #52]	; (8007748 <HAL_PCD_MspInit+0x44>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d113      	bne.n	800773e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007716:	4b0d      	ldr	r3, [pc, #52]	; (800774c <HAL_PCD_MspInit+0x48>)
 8007718:	69db      	ldr	r3, [r3, #28]
 800771a:	4a0c      	ldr	r2, [pc, #48]	; (800774c <HAL_PCD_MspInit+0x48>)
 800771c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007720:	61d3      	str	r3, [r2, #28]
 8007722:	4b0a      	ldr	r3, [pc, #40]	; (800774c <HAL_PCD_MspInit+0x48>)
 8007724:	69db      	ldr	r3, [r3, #28]
 8007726:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800772a:	60fb      	str	r3, [r7, #12]
 800772c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800772e:	2200      	movs	r2, #0
 8007730:	2100      	movs	r1, #0
 8007732:	2014      	movs	r0, #20
 8007734:	f7f9 fddf 	bl	80012f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007738:	2014      	movs	r0, #20
 800773a:	f7f9 fdf8 	bl	800132e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800773e:	bf00      	nop
 8007740:	3710      	adds	r7, #16
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}
 8007746:	bf00      	nop
 8007748:	40005c00 	.word	0x40005c00
 800774c:	40021000 	.word	0x40021000

08007750 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b082      	sub	sp, #8
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007764:	4619      	mov	r1, r3
 8007766:	4610      	mov	r0, r2
 8007768:	f7fe fea8 	bl	80064bc <USBD_LL_SetupStage>
}
 800776c:	bf00      	nop
 800776e:	3708      	adds	r7, #8
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}

08007774 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b082      	sub	sp, #8
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	460b      	mov	r3, r1
 800777e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007786:	78fa      	ldrb	r2, [r7, #3]
 8007788:	6879      	ldr	r1, [r7, #4]
 800778a:	4613      	mov	r3, r2
 800778c:	009b      	lsls	r3, r3, #2
 800778e:	4413      	add	r3, r2
 8007790:	00db      	lsls	r3, r3, #3
 8007792:	440b      	add	r3, r1
 8007794:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007798:	681a      	ldr	r2, [r3, #0]
 800779a:	78fb      	ldrb	r3, [r7, #3]
 800779c:	4619      	mov	r1, r3
 800779e:	f7fe feda 	bl	8006556 <USBD_LL_DataOutStage>
}
 80077a2:	bf00      	nop
 80077a4:	3708      	adds	r7, #8
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}

080077aa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077aa:	b580      	push	{r7, lr}
 80077ac:	b082      	sub	sp, #8
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	6078      	str	r0, [r7, #4]
 80077b2:	460b      	mov	r3, r1
 80077b4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80077bc:	78fa      	ldrb	r2, [r7, #3]
 80077be:	6879      	ldr	r1, [r7, #4]
 80077c0:	4613      	mov	r3, r2
 80077c2:	009b      	lsls	r3, r3, #2
 80077c4:	4413      	add	r3, r2
 80077c6:	00db      	lsls	r3, r3, #3
 80077c8:	440b      	add	r3, r1
 80077ca:	333c      	adds	r3, #60	; 0x3c
 80077cc:	681a      	ldr	r2, [r3, #0]
 80077ce:	78fb      	ldrb	r3, [r7, #3]
 80077d0:	4619      	mov	r1, r3
 80077d2:	f7fe ff31 	bl	8006638 <USBD_LL_DataInStage>
}
 80077d6:	bf00      	nop
 80077d8:	3708      	adds	r7, #8
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}

080077de <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077de:	b580      	push	{r7, lr}
 80077e0:	b082      	sub	sp, #8
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80077ec:	4618      	mov	r0, r3
 80077ee:	f7ff f841 	bl	8006874 <USBD_LL_SOF>
}
 80077f2:	bf00      	nop
 80077f4:	3708      	adds	r7, #8
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}

080077fa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077fa:	b580      	push	{r7, lr}
 80077fc:	b084      	sub	sp, #16
 80077fe:	af00      	add	r7, sp, #0
 8007800:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007802:	2301      	movs	r3, #1
 8007804:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	689b      	ldr	r3, [r3, #8]
 800780a:	2b02      	cmp	r3, #2
 800780c:	d001      	beq.n	8007812 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800780e:	f7f8 fe39 	bl	8000484 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007818:	7bfa      	ldrb	r2, [r7, #15]
 800781a:	4611      	mov	r1, r2
 800781c:	4618      	mov	r0, r3
 800781e:	f7fe fff1 	bl	8006804 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007828:	4618      	mov	r0, r3
 800782a:	f7fe ffaa 	bl	8006782 <USBD_LL_Reset>
}
 800782e:	bf00      	nop
 8007830:	3710      	adds	r7, #16
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}
	...

08007838 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b082      	sub	sp, #8
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007846:	4618      	mov	r0, r3
 8007848:	f7fe ffeb 	bl	8006822 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	699b      	ldr	r3, [r3, #24]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d005      	beq.n	8007860 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007854:	4b04      	ldr	r3, [pc, #16]	; (8007868 <HAL_PCD_SuspendCallback+0x30>)
 8007856:	691b      	ldr	r3, [r3, #16]
 8007858:	4a03      	ldr	r2, [pc, #12]	; (8007868 <HAL_PCD_SuspendCallback+0x30>)
 800785a:	f043 0306 	orr.w	r3, r3, #6
 800785e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007860:	bf00      	nop
 8007862:	3708      	adds	r7, #8
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}
 8007868:	e000ed00 	.word	0xe000ed00

0800786c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b082      	sub	sp, #8
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800787a:	4618      	mov	r0, r3
 800787c:	f7fe ffe5 	bl	800684a <USBD_LL_Resume>
}
 8007880:	bf00      	nop
 8007882:	3708      	adds	r7, #8
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}

08007888 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b082      	sub	sp, #8
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007890:	4a1f      	ldr	r2, [pc, #124]	; (8007910 <USBD_LL_Init+0x88>)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	4a1d      	ldr	r2, [pc, #116]	; (8007910 <USBD_LL_Init+0x88>)
 800789c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80078a0:	4b1b      	ldr	r3, [pc, #108]	; (8007910 <USBD_LL_Init+0x88>)
 80078a2:	4a1c      	ldr	r2, [pc, #112]	; (8007914 <USBD_LL_Init+0x8c>)
 80078a4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80078a6:	4b1a      	ldr	r3, [pc, #104]	; (8007910 <USBD_LL_Init+0x88>)
 80078a8:	2208      	movs	r2, #8
 80078aa:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80078ac:	4b18      	ldr	r3, [pc, #96]	; (8007910 <USBD_LL_Init+0x88>)
 80078ae:	2202      	movs	r2, #2
 80078b0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80078b2:	4b17      	ldr	r3, [pc, #92]	; (8007910 <USBD_LL_Init+0x88>)
 80078b4:	2200      	movs	r2, #0
 80078b6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80078b8:	4b15      	ldr	r3, [pc, #84]	; (8007910 <USBD_LL_Init+0x88>)
 80078ba:	2200      	movs	r2, #0
 80078bc:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80078be:	4b14      	ldr	r3, [pc, #80]	; (8007910 <USBD_LL_Init+0x88>)
 80078c0:	2200      	movs	r2, #0
 80078c2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80078c4:	4812      	ldr	r0, [pc, #72]	; (8007910 <USBD_LL_Init+0x88>)
 80078c6:	f7f9 ff1b 	bl	8001700 <HAL_PCD_Init>
 80078ca:	4603      	mov	r3, r0
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d001      	beq.n	80078d4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80078d0:	f7f8 fdd8 	bl	8000484 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80078da:	2318      	movs	r3, #24
 80078dc:	2200      	movs	r2, #0
 80078de:	2100      	movs	r1, #0
 80078e0:	f7fb fb7a 	bl	8002fd8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80078ea:	2358      	movs	r3, #88	; 0x58
 80078ec:	2200      	movs	r2, #0
 80078ee:	2180      	movs	r1, #128	; 0x80
 80078f0:	f7fb fb72 	bl	8002fd8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80078fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80078fe:	2200      	movs	r2, #0
 8007900:	2181      	movs	r1, #129	; 0x81
 8007902:	f7fb fb69 	bl	8002fd8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 8007906:	2300      	movs	r3, #0
}
 8007908:	4618      	mov	r0, r3
 800790a:	3708      	adds	r7, #8
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}
 8007910:	200006c4 	.word	0x200006c4
 8007914:	40005c00 	.word	0x40005c00

08007918 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b084      	sub	sp, #16
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007920:	2300      	movs	r3, #0
 8007922:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007924:	2300      	movs	r3, #0
 8007926:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800792e:	4618      	mov	r0, r3
 8007930:	f7f9 fff1 	bl	8001916 <HAL_PCD_Start>
 8007934:	4603      	mov	r3, r0
 8007936:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007938:	7bfb      	ldrb	r3, [r7, #15]
 800793a:	4618      	mov	r0, r3
 800793c:	f000 f93c 	bl	8007bb8 <USBD_Get_USB_Status>
 8007940:	4603      	mov	r3, r0
 8007942:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007944:	7bbb      	ldrb	r3, [r7, #14]
}
 8007946:	4618      	mov	r0, r3
 8007948:	3710      	adds	r7, #16
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}

0800794e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800794e:	b580      	push	{r7, lr}
 8007950:	b084      	sub	sp, #16
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
 8007956:	4608      	mov	r0, r1
 8007958:	4611      	mov	r1, r2
 800795a:	461a      	mov	r2, r3
 800795c:	4603      	mov	r3, r0
 800795e:	70fb      	strb	r3, [r7, #3]
 8007960:	460b      	mov	r3, r1
 8007962:	70bb      	strb	r3, [r7, #2]
 8007964:	4613      	mov	r3, r2
 8007966:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007968:	2300      	movs	r3, #0
 800796a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800796c:	2300      	movs	r3, #0
 800796e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007976:	78bb      	ldrb	r3, [r7, #2]
 8007978:	883a      	ldrh	r2, [r7, #0]
 800797a:	78f9      	ldrb	r1, [r7, #3]
 800797c:	f7fa f96b 	bl	8001c56 <HAL_PCD_EP_Open>
 8007980:	4603      	mov	r3, r0
 8007982:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007984:	7bfb      	ldrb	r3, [r7, #15]
 8007986:	4618      	mov	r0, r3
 8007988:	f000 f916 	bl	8007bb8 <USBD_Get_USB_Status>
 800798c:	4603      	mov	r3, r0
 800798e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007990:	7bbb      	ldrb	r3, [r7, #14]
}
 8007992:	4618      	mov	r0, r3
 8007994:	3710      	adds	r7, #16
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}

0800799a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800799a:	b580      	push	{r7, lr}
 800799c:	b084      	sub	sp, #16
 800799e:	af00      	add	r7, sp, #0
 80079a0:	6078      	str	r0, [r7, #4]
 80079a2:	460b      	mov	r3, r1
 80079a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079a6:	2300      	movs	r3, #0
 80079a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079aa:	2300      	movs	r3, #0
 80079ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80079b4:	78fa      	ldrb	r2, [r7, #3]
 80079b6:	4611      	mov	r1, r2
 80079b8:	4618      	mov	r0, r3
 80079ba:	f7fa f9b2 	bl	8001d22 <HAL_PCD_EP_Close>
 80079be:	4603      	mov	r3, r0
 80079c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079c2:	7bfb      	ldrb	r3, [r7, #15]
 80079c4:	4618      	mov	r0, r3
 80079c6:	f000 f8f7 	bl	8007bb8 <USBD_Get_USB_Status>
 80079ca:	4603      	mov	r3, r0
 80079cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	3710      	adds	r7, #16
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}

080079d8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b084      	sub	sp, #16
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
 80079e0:	460b      	mov	r3, r1
 80079e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079e4:	2300      	movs	r3, #0
 80079e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079e8:	2300      	movs	r3, #0
 80079ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80079f2:	78fa      	ldrb	r2, [r7, #3]
 80079f4:	4611      	mov	r1, r2
 80079f6:	4618      	mov	r0, r3
 80079f8:	f7fa fa5b 	bl	8001eb2 <HAL_PCD_EP_SetStall>
 80079fc:	4603      	mov	r3, r0
 80079fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a00:	7bfb      	ldrb	r3, [r7, #15]
 8007a02:	4618      	mov	r0, r3
 8007a04:	f000 f8d8 	bl	8007bb8 <USBD_Get_USB_Status>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3710      	adds	r7, #16
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}

08007a16 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a16:	b580      	push	{r7, lr}
 8007a18:	b084      	sub	sp, #16
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	6078      	str	r0, [r7, #4]
 8007a1e:	460b      	mov	r3, r1
 8007a20:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a22:	2300      	movs	r3, #0
 8007a24:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a26:	2300      	movs	r3, #0
 8007a28:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a30:	78fa      	ldrb	r2, [r7, #3]
 8007a32:	4611      	mov	r1, r2
 8007a34:	4618      	mov	r0, r3
 8007a36:	f7fa fa9c 	bl	8001f72 <HAL_PCD_EP_ClrStall>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a3e:	7bfb      	ldrb	r3, [r7, #15]
 8007a40:	4618      	mov	r0, r3
 8007a42:	f000 f8b9 	bl	8007bb8 <USBD_Get_USB_Status>
 8007a46:	4603      	mov	r3, r0
 8007a48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a4a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	3710      	adds	r7, #16
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}

08007a54 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b085      	sub	sp, #20
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	460b      	mov	r3, r1
 8007a5e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a66:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007a68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	da0c      	bge.n	8007a8a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007a70:	78fb      	ldrb	r3, [r7, #3]
 8007a72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a76:	68f9      	ldr	r1, [r7, #12]
 8007a78:	1c5a      	adds	r2, r3, #1
 8007a7a:	4613      	mov	r3, r2
 8007a7c:	009b      	lsls	r3, r3, #2
 8007a7e:	4413      	add	r3, r2
 8007a80:	00db      	lsls	r3, r3, #3
 8007a82:	440b      	add	r3, r1
 8007a84:	3302      	adds	r3, #2
 8007a86:	781b      	ldrb	r3, [r3, #0]
 8007a88:	e00b      	b.n	8007aa2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007a8a:	78fb      	ldrb	r3, [r7, #3]
 8007a8c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a90:	68f9      	ldr	r1, [r7, #12]
 8007a92:	4613      	mov	r3, r2
 8007a94:	009b      	lsls	r3, r3, #2
 8007a96:	4413      	add	r3, r2
 8007a98:	00db      	lsls	r3, r3, #3
 8007a9a:	440b      	add	r3, r1
 8007a9c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8007aa0:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3714      	adds	r7, #20
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bc80      	pop	{r7}
 8007aaa:	4770      	bx	lr

08007aac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b084      	sub	sp, #16
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	460b      	mov	r3, r1
 8007ab6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007abc:	2300      	movs	r3, #0
 8007abe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ac6:	78fa      	ldrb	r2, [r7, #3]
 8007ac8:	4611      	mov	r1, r2
 8007aca:	4618      	mov	r0, r3
 8007acc:	f7fa f89e 	bl	8001c0c <HAL_PCD_SetAddress>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ad4:	7bfb      	ldrb	r3, [r7, #15]
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f000 f86e 	bl	8007bb8 <USBD_Get_USB_Status>
 8007adc:	4603      	mov	r3, r0
 8007ade:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ae0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3710      	adds	r7, #16
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}

08007aea <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007aea:	b580      	push	{r7, lr}
 8007aec:	b086      	sub	sp, #24
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	60f8      	str	r0, [r7, #12]
 8007af2:	607a      	str	r2, [r7, #4]
 8007af4:	461a      	mov	r2, r3
 8007af6:	460b      	mov	r3, r1
 8007af8:	72fb      	strb	r3, [r7, #11]
 8007afa:	4613      	mov	r3, r2
 8007afc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007afe:	2300      	movs	r3, #0
 8007b00:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b02:	2300      	movs	r3, #0
 8007b04:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007b0c:	893b      	ldrh	r3, [r7, #8]
 8007b0e:	7af9      	ldrb	r1, [r7, #11]
 8007b10:	687a      	ldr	r2, [r7, #4]
 8007b12:	f7fa f98b 	bl	8001e2c <HAL_PCD_EP_Transmit>
 8007b16:	4603      	mov	r3, r0
 8007b18:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b1a:	7dfb      	ldrb	r3, [r7, #23]
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f000 f84b 	bl	8007bb8 <USBD_Get_USB_Status>
 8007b22:	4603      	mov	r3, r0
 8007b24:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007b26:	7dbb      	ldrb	r3, [r7, #22]
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3718      	adds	r7, #24
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}

08007b30 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b086      	sub	sp, #24
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	60f8      	str	r0, [r7, #12]
 8007b38:	607a      	str	r2, [r7, #4]
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	460b      	mov	r3, r1
 8007b3e:	72fb      	strb	r3, [r7, #11]
 8007b40:	4613      	mov	r3, r2
 8007b42:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b44:	2300      	movs	r3, #0
 8007b46:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007b52:	893b      	ldrh	r3, [r7, #8]
 8007b54:	7af9      	ldrb	r1, [r7, #11]
 8007b56:	687a      	ldr	r2, [r7, #4]
 8007b58:	f7fa f92b 	bl	8001db2 <HAL_PCD_EP_Receive>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b60:	7dfb      	ldrb	r3, [r7, #23]
 8007b62:	4618      	mov	r0, r3
 8007b64:	f000 f828 	bl	8007bb8 <USBD_Get_USB_Status>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007b6c:	7dbb      	ldrb	r3, [r7, #22]
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3718      	adds	r7, #24
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}
	...

08007b78 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b083      	sub	sp, #12
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007b80:	4b02      	ldr	r3, [pc, #8]	; (8007b8c <USBD_static_malloc+0x14>)
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	370c      	adds	r7, #12
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bc80      	pop	{r7}
 8007b8a:	4770      	bx	lr
 8007b8c:	20000188 	.word	0x20000188

08007b90 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007b90:	b480      	push	{r7}
 8007b92:	b083      	sub	sp, #12
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]

}
 8007b98:	bf00      	nop
 8007b9a:	370c      	adds	r7, #12
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bc80      	pop	{r7}
 8007ba0:	4770      	bx	lr

08007ba2 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ba2:	b480      	push	{r7}
 8007ba4:	b083      	sub	sp, #12
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	6078      	str	r0, [r7, #4]
 8007baa:	460b      	mov	r3, r1
 8007bac:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8007bae:	bf00      	nop
 8007bb0:	370c      	adds	r7, #12
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bc80      	pop	{r7}
 8007bb6:	4770      	bx	lr

08007bb8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b085      	sub	sp, #20
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007bc6:	79fb      	ldrb	r3, [r7, #7]
 8007bc8:	2b03      	cmp	r3, #3
 8007bca:	d817      	bhi.n	8007bfc <USBD_Get_USB_Status+0x44>
 8007bcc:	a201      	add	r2, pc, #4	; (adr r2, 8007bd4 <USBD_Get_USB_Status+0x1c>)
 8007bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bd2:	bf00      	nop
 8007bd4:	08007be5 	.word	0x08007be5
 8007bd8:	08007beb 	.word	0x08007beb
 8007bdc:	08007bf1 	.word	0x08007bf1
 8007be0:	08007bf7 	.word	0x08007bf7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007be4:	2300      	movs	r3, #0
 8007be6:	73fb      	strb	r3, [r7, #15]
    break;
 8007be8:	e00b      	b.n	8007c02 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007bea:	2302      	movs	r3, #2
 8007bec:	73fb      	strb	r3, [r7, #15]
    break;
 8007bee:	e008      	b.n	8007c02 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	73fb      	strb	r3, [r7, #15]
    break;
 8007bf4:	e005      	b.n	8007c02 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007bf6:	2302      	movs	r3, #2
 8007bf8:	73fb      	strb	r3, [r7, #15]
    break;
 8007bfa:	e002      	b.n	8007c02 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007bfc:	2302      	movs	r3, #2
 8007bfe:	73fb      	strb	r3, [r7, #15]
    break;
 8007c00:	bf00      	nop
  }
  return usb_status;
 8007c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	3714      	adds	r7, #20
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bc80      	pop	{r7}
 8007c0c:	4770      	bx	lr
 8007c0e:	bf00      	nop

08007c10 <__libc_init_array>:
 8007c10:	b570      	push	{r4, r5, r6, lr}
 8007c12:	2600      	movs	r6, #0
 8007c14:	4d0c      	ldr	r5, [pc, #48]	; (8007c48 <__libc_init_array+0x38>)
 8007c16:	4c0d      	ldr	r4, [pc, #52]	; (8007c4c <__libc_init_array+0x3c>)
 8007c18:	1b64      	subs	r4, r4, r5
 8007c1a:	10a4      	asrs	r4, r4, #2
 8007c1c:	42a6      	cmp	r6, r4
 8007c1e:	d109      	bne.n	8007c34 <__libc_init_array+0x24>
 8007c20:	f000 f822 	bl	8007c68 <_init>
 8007c24:	2600      	movs	r6, #0
 8007c26:	4d0a      	ldr	r5, [pc, #40]	; (8007c50 <__libc_init_array+0x40>)
 8007c28:	4c0a      	ldr	r4, [pc, #40]	; (8007c54 <__libc_init_array+0x44>)
 8007c2a:	1b64      	subs	r4, r4, r5
 8007c2c:	10a4      	asrs	r4, r4, #2
 8007c2e:	42a6      	cmp	r6, r4
 8007c30:	d105      	bne.n	8007c3e <__libc_init_array+0x2e>
 8007c32:	bd70      	pop	{r4, r5, r6, pc}
 8007c34:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c38:	4798      	blx	r3
 8007c3a:	3601      	adds	r6, #1
 8007c3c:	e7ee      	b.n	8007c1c <__libc_init_array+0xc>
 8007c3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c42:	4798      	blx	r3
 8007c44:	3601      	adds	r6, #1
 8007c46:	e7f2      	b.n	8007c2e <__libc_init_array+0x1e>
 8007c48:	08007cfc 	.word	0x08007cfc
 8007c4c:	08007cfc 	.word	0x08007cfc
 8007c50:	08007cfc 	.word	0x08007cfc
 8007c54:	08007d00 	.word	0x08007d00

08007c58 <memset>:
 8007c58:	4603      	mov	r3, r0
 8007c5a:	4402      	add	r2, r0
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d100      	bne.n	8007c62 <memset+0xa>
 8007c60:	4770      	bx	lr
 8007c62:	f803 1b01 	strb.w	r1, [r3], #1
 8007c66:	e7f9      	b.n	8007c5c <memset+0x4>

08007c68 <_init>:
 8007c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c6a:	bf00      	nop
 8007c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c6e:	bc08      	pop	{r3}
 8007c70:	469e      	mov	lr, r3
 8007c72:	4770      	bx	lr

08007c74 <_fini>:
 8007c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c76:	bf00      	nop
 8007c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c7a:	bc08      	pop	{r3}
 8007c7c:	469e      	mov	lr, r3
 8007c7e:	4770      	bx	lr
