
stm32hid.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c28  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08007d34  08007d34  00017d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007db0  08007db0  00020164  2**0
                  CONTENTS
  4 .ARM          00000000  08007db0  08007db0  00020164  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007db0  08007db0  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007db0  08007db0  00017db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007db4  08007db4  00017db4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  08007db8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000850  20000164  08007f1c  00020164  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009b4  08007f1c  000209b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001273d  00000000  00000000  0002018d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ecb  00000000  00000000  000328ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb0  00000000  00000000  00035798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a58  00000000  00000000  00036348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019da4  00000000  00000000  00036da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f1d5  00000000  00000000  00050b44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089dd0  00000000  00000000  0005fd19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e9ae9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d60  00000000  00000000  000e9b3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000164 	.word	0x20000164
 8000128:	00000000 	.word	0x00000000
 800012c:	08007d1c 	.word	0x08007d1c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000168 	.word	0x20000168
 8000148:	08007d1c 	.word	0x08007d1c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 faf6 	bl	8000740 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f846 	bl	80001e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f91e 	bl	8000398 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800015c:	f007 f9f8 	bl	8007550 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8000160:	f000 f89e 	bl	80002a0 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000164:	f000 f8da 	bl	800031c <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1);
 8000168:	4818      	ldr	r0, [pc, #96]	; (80001cc <main+0x80>)
 800016a:	f000 ff9b 	bl	80010a4 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2);
 800016e:	4818      	ldr	r0, [pc, #96]	; (80001d0 <main+0x84>)
 8000170:	f000 ff98 	bl	80010a4 <HAL_ADCEx_Calibration_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

      HAL_ADC_Start(&hadc1);
 8000174:	4815      	ldr	r0, [pc, #84]	; (80001cc <main+0x80>)
 8000176:	f000 fc41 	bl	80009fc <HAL_ADC_Start>
      HAL_ADC_Start(&hadc2);
 800017a:	4815      	ldr	r0, [pc, #84]	; (80001d0 <main+0x84>)
 800017c:	f000 fc3e 	bl	80009fc <HAL_ADC_Start>
     // Poll ADC1 Peripheral & TimeOut = 1mSec
      HAL_ADC_PollForConversion(&hadc1, 1);
 8000180:	2101      	movs	r1, #1
 8000182:	4812      	ldr	r0, [pc, #72]	; (80001cc <main+0x80>)
 8000184:	f000 fce8 	bl	8000b58 <HAL_ADC_PollForConversion>
      HAL_ADC_PollForConversion(&hadc2, 1);
 8000188:	2101      	movs	r1, #1
 800018a:	4811      	ldr	r0, [pc, #68]	; (80001d0 <main+0x84>)
 800018c:	f000 fce4 	bl	8000b58 <HAL_ADC_PollForConversion>
     // Read The ADC Conversion Result & Map It To PWM DutyCycle
      AD_RES1 = HAL_ADC_GetValue(&hadc1);
 8000190:	480e      	ldr	r0, [pc, #56]	; (80001cc <main+0x80>)
 8000192:	f000 fde7 	bl	8000d64 <HAL_ADC_GetValue>
 8000196:	4603      	mov	r3, r0
 8000198:	b29a      	uxth	r2, r3
 800019a:	4b0e      	ldr	r3, [pc, #56]	; (80001d4 <main+0x88>)
 800019c:	801a      	strh	r2, [r3, #0]
      AD_RES2 = HAL_ADC_GetValue(&hadc2);
 800019e:	480c      	ldr	r0, [pc, #48]	; (80001d0 <main+0x84>)
 80001a0:	f000 fde0 	bl	8000d64 <HAL_ADC_GetValue>
 80001a4:	4603      	mov	r3, r0
 80001a6:	b29a      	uxth	r2, r3
 80001a8:	4b0b      	ldr	r3, [pc, #44]	; (80001d8 <main+0x8c>)
 80001aa:	801a      	strh	r2, [r3, #0]


      if(interrupt_happened)
 80001ac:	4b0b      	ldr	r3, [pc, #44]	; (80001dc <main+0x90>)
 80001ae:	781b      	ldrb	r3, [r3, #0]
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d007      	beq.n	80001c4 <main+0x78>
      {
    	  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_12);
 80001b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001b8:	4809      	ldr	r0, [pc, #36]	; (80001e0 <main+0x94>)
 80001ba:	f001 fac9 	bl	8001750 <HAL_GPIO_TogglePin>
    	  interrupt_happened = 0;
 80001be:	4b07      	ldr	r3, [pc, #28]	; (80001dc <main+0x90>)
 80001c0:	2200      	movs	r2, #0
 80001c2:	701a      	strb	r2, [r3, #0]
//			  USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof(keyboardhid));
//
//			  pressed = HAL_GetTick();
//		  }
//	  }
	  HAL_Delay(5);
 80001c4:	2005      	movs	r0, #5
 80001c6:	f000 fb1d 	bl	8000804 <HAL_Delay>
      HAL_ADC_Start(&hadc1);
 80001ca:	e7d3      	b.n	8000174 <main+0x28>
 80001cc:	200001d0 	.word	0x200001d0
 80001d0:	200001a0 	.word	0x200001a0
 80001d4:	20000186 	.word	0x20000186
 80001d8:	20000188 	.word	0x20000188
 80001dc:	20000180 	.word	0x20000180
 80001e0:	40010c00 	.word	0x40010c00

080001e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b094      	sub	sp, #80	; 0x50
 80001e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001ee:	2228      	movs	r2, #40	; 0x28
 80001f0:	2100      	movs	r1, #0
 80001f2:	4618      	mov	r0, r3
 80001f4:	f007 fd8a 	bl	8007d0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001f8:	f107 0314 	add.w	r3, r7, #20
 80001fc:	2200      	movs	r2, #0
 80001fe:	601a      	str	r2, [r3, #0]
 8000200:	605a      	str	r2, [r3, #4]
 8000202:	609a      	str	r2, [r3, #8]
 8000204:	60da      	str	r2, [r3, #12]
 8000206:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000208:	1d3b      	adds	r3, r7, #4
 800020a:	2200      	movs	r2, #0
 800020c:	601a      	str	r2, [r3, #0]
 800020e:	605a      	str	r2, [r3, #4]
 8000210:	609a      	str	r2, [r3, #8]
 8000212:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000214:	2301      	movs	r3, #1
 8000216:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000218:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800021c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800021e:	2300      	movs	r3, #0
 8000220:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000222:	2301      	movs	r3, #1
 8000224:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000226:	2302      	movs	r3, #2
 8000228:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800022a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800022e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000230:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000234:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000236:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800023a:	4618      	mov	r0, r3
 800023c:	f002 ff68 	bl	8003110 <HAL_RCC_OscConfig>
 8000240:	4603      	mov	r3, r0
 8000242:	2b00      	cmp	r3, #0
 8000244:	d001      	beq.n	800024a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000246:	f000 f961 	bl	800050c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800024a:	230f      	movs	r3, #15
 800024c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800024e:	2302      	movs	r3, #2
 8000250:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000252:	2300      	movs	r3, #0
 8000254:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000256:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800025a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800025c:	2300      	movs	r3, #0
 800025e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000260:	f107 0314 	add.w	r3, r7, #20
 8000264:	2101      	movs	r1, #1
 8000266:	4618      	mov	r0, r3
 8000268:	f003 f9d2 	bl	8003610 <HAL_RCC_ClockConfig>
 800026c:	4603      	mov	r3, r0
 800026e:	2b00      	cmp	r3, #0
 8000270:	d001      	beq.n	8000276 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000272:	f000 f94b 	bl	800050c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000276:	2312      	movs	r3, #18
 8000278:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 800027a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800027e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000280:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000284:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000286:	1d3b      	adds	r3, r7, #4
 8000288:	4618      	mov	r0, r3
 800028a:	f003 fb47 	bl	800391c <HAL_RCCEx_PeriphCLKConfig>
 800028e:	4603      	mov	r3, r0
 8000290:	2b00      	cmp	r3, #0
 8000292:	d001      	beq.n	8000298 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000294:	f000 f93a 	bl	800050c <Error_Handler>
  }
}
 8000298:	bf00      	nop
 800029a:	3750      	adds	r7, #80	; 0x50
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}

080002a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b084      	sub	sp, #16
 80002a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002a6:	1d3b      	adds	r3, r7, #4
 80002a8:	2200      	movs	r2, #0
 80002aa:	601a      	str	r2, [r3, #0]
 80002ac:	605a      	str	r2, [r3, #4]
 80002ae:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80002b0:	4b18      	ldr	r3, [pc, #96]	; (8000314 <MX_ADC1_Init+0x74>)
 80002b2:	4a19      	ldr	r2, [pc, #100]	; (8000318 <MX_ADC1_Init+0x78>)
 80002b4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002b6:	4b17      	ldr	r3, [pc, #92]	; (8000314 <MX_ADC1_Init+0x74>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80002bc:	4b15      	ldr	r3, [pc, #84]	; (8000314 <MX_ADC1_Init+0x74>)
 80002be:	2200      	movs	r2, #0
 80002c0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002c2:	4b14      	ldr	r3, [pc, #80]	; (8000314 <MX_ADC1_Init+0x74>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002c8:	4b12      	ldr	r3, [pc, #72]	; (8000314 <MX_ADC1_Init+0x74>)
 80002ca:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80002ce:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002d0:	4b10      	ldr	r3, [pc, #64]	; (8000314 <MX_ADC1_Init+0x74>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80002d6:	4b0f      	ldr	r3, [pc, #60]	; (8000314 <MX_ADC1_Init+0x74>)
 80002d8:	2201      	movs	r2, #1
 80002da:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002dc:	480d      	ldr	r0, [pc, #52]	; (8000314 <MX_ADC1_Init+0x74>)
 80002de:	f000 fab5 	bl	800084c <HAL_ADC_Init>
 80002e2:	4603      	mov	r3, r0
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d001      	beq.n	80002ec <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80002e8:	f000 f910 	bl	800050c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80002ec:	2307      	movs	r3, #7
 80002ee:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002f0:	2301      	movs	r3, #1
 80002f2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80002f4:	2300      	movs	r3, #0
 80002f6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002f8:	1d3b      	adds	r3, r7, #4
 80002fa:	4619      	mov	r1, r3
 80002fc:	4805      	ldr	r0, [pc, #20]	; (8000314 <MX_ADC1_Init+0x74>)
 80002fe:	f000 fd3d 	bl	8000d7c <HAL_ADC_ConfigChannel>
 8000302:	4603      	mov	r3, r0
 8000304:	2b00      	cmp	r3, #0
 8000306:	d001      	beq.n	800030c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000308:	f000 f900 	bl	800050c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800030c:	bf00      	nop
 800030e:	3710      	adds	r7, #16
 8000310:	46bd      	mov	sp, r7
 8000312:	bd80      	pop	{r7, pc}
 8000314:	200001d0 	.word	0x200001d0
 8000318:	40012400 	.word	0x40012400

0800031c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b084      	sub	sp, #16
 8000320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000322:	1d3b      	adds	r3, r7, #4
 8000324:	2200      	movs	r2, #0
 8000326:	601a      	str	r2, [r3, #0]
 8000328:	605a      	str	r2, [r3, #4]
 800032a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 800032c:	4b18      	ldr	r3, [pc, #96]	; (8000390 <MX_ADC2_Init+0x74>)
 800032e:	4a19      	ldr	r2, [pc, #100]	; (8000394 <MX_ADC2_Init+0x78>)
 8000330:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000332:	4b17      	ldr	r3, [pc, #92]	; (8000390 <MX_ADC2_Init+0x74>)
 8000334:	2200      	movs	r2, #0
 8000336:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000338:	4b15      	ldr	r3, [pc, #84]	; (8000390 <MX_ADC2_Init+0x74>)
 800033a:	2200      	movs	r2, #0
 800033c:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800033e:	4b14      	ldr	r3, [pc, #80]	; (8000390 <MX_ADC2_Init+0x74>)
 8000340:	2200      	movs	r2, #0
 8000342:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000344:	4b12      	ldr	r3, [pc, #72]	; (8000390 <MX_ADC2_Init+0x74>)
 8000346:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800034a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800034c:	4b10      	ldr	r3, [pc, #64]	; (8000390 <MX_ADC2_Init+0x74>)
 800034e:	2200      	movs	r2, #0
 8000350:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000352:	4b0f      	ldr	r3, [pc, #60]	; (8000390 <MX_ADC2_Init+0x74>)
 8000354:	2201      	movs	r2, #1
 8000356:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000358:	480d      	ldr	r0, [pc, #52]	; (8000390 <MX_ADC2_Init+0x74>)
 800035a:	f000 fa77 	bl	800084c <HAL_ADC_Init>
 800035e:	4603      	mov	r3, r0
 8000360:	2b00      	cmp	r3, #0
 8000362:	d001      	beq.n	8000368 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000364:	f000 f8d2 	bl	800050c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000368:	2306      	movs	r3, #6
 800036a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800036c:	2301      	movs	r3, #1
 800036e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000370:	2300      	movs	r3, #0
 8000372:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000374:	1d3b      	adds	r3, r7, #4
 8000376:	4619      	mov	r1, r3
 8000378:	4805      	ldr	r0, [pc, #20]	; (8000390 <MX_ADC2_Init+0x74>)
 800037a:	f000 fcff 	bl	8000d7c <HAL_ADC_ConfigChannel>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d001      	beq.n	8000388 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000384:	f000 f8c2 	bl	800050c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000388:	bf00      	nop
 800038a:	3710      	adds	r7, #16
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}
 8000390:	200001a0 	.word	0x200001a0
 8000394:	40012800 	.word	0x40012800

08000398 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b088      	sub	sp, #32
 800039c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800039e:	f107 0310 	add.w	r3, r7, #16
 80003a2:	2200      	movs	r2, #0
 80003a4:	601a      	str	r2, [r3, #0]
 80003a6:	605a      	str	r2, [r3, #4]
 80003a8:	609a      	str	r2, [r3, #8]
 80003aa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003ac:	4b3a      	ldr	r3, [pc, #232]	; (8000498 <MX_GPIO_Init+0x100>)
 80003ae:	699b      	ldr	r3, [r3, #24]
 80003b0:	4a39      	ldr	r2, [pc, #228]	; (8000498 <MX_GPIO_Init+0x100>)
 80003b2:	f043 0320 	orr.w	r3, r3, #32
 80003b6:	6193      	str	r3, [r2, #24]
 80003b8:	4b37      	ldr	r3, [pc, #220]	; (8000498 <MX_GPIO_Init+0x100>)
 80003ba:	699b      	ldr	r3, [r3, #24]
 80003bc:	f003 0320 	and.w	r3, r3, #32
 80003c0:	60fb      	str	r3, [r7, #12]
 80003c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003c4:	4b34      	ldr	r3, [pc, #208]	; (8000498 <MX_GPIO_Init+0x100>)
 80003c6:	699b      	ldr	r3, [r3, #24]
 80003c8:	4a33      	ldr	r2, [pc, #204]	; (8000498 <MX_GPIO_Init+0x100>)
 80003ca:	f043 0304 	orr.w	r3, r3, #4
 80003ce:	6193      	str	r3, [r2, #24]
 80003d0:	4b31      	ldr	r3, [pc, #196]	; (8000498 <MX_GPIO_Init+0x100>)
 80003d2:	699b      	ldr	r3, [r3, #24]
 80003d4:	f003 0304 	and.w	r3, r3, #4
 80003d8:	60bb      	str	r3, [r7, #8]
 80003da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003dc:	4b2e      	ldr	r3, [pc, #184]	; (8000498 <MX_GPIO_Init+0x100>)
 80003de:	699b      	ldr	r3, [r3, #24]
 80003e0:	4a2d      	ldr	r2, [pc, #180]	; (8000498 <MX_GPIO_Init+0x100>)
 80003e2:	f043 0308 	orr.w	r3, r3, #8
 80003e6:	6193      	str	r3, [r2, #24]
 80003e8:	4b2b      	ldr	r3, [pc, #172]	; (8000498 <MX_GPIO_Init+0x100>)
 80003ea:	699b      	ldr	r3, [r3, #24]
 80003ec:	f003 0308 	and.w	r3, r3, #8
 80003f0:	607b      	str	r3, [r7, #4]
 80003f2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80003f4:	2200      	movs	r2, #0
 80003f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003fa:	4828      	ldr	r0, [pc, #160]	; (800049c <MX_GPIO_Init+0x104>)
 80003fc:	f001 f990 	bl	8001720 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000400:	2302      	movs	r3, #2
 8000402:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000404:	4b26      	ldr	r3, [pc, #152]	; (80004a0 <MX_GPIO_Init+0x108>)
 8000406:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000408:	2300      	movs	r3, #0
 800040a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800040c:	f107 0310 	add.w	r3, r7, #16
 8000410:	4619      	mov	r1, r3
 8000412:	4824      	ldr	r0, [pc, #144]	; (80004a4 <MX_GPIO_Init+0x10c>)
 8000414:	f001 f800 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000418:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800041c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800041e:	2301      	movs	r3, #1
 8000420:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000422:	2300      	movs	r3, #0
 8000424:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000426:	2302      	movs	r3, #2
 8000428:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800042a:	f107 0310 	add.w	r3, r7, #16
 800042e:	4619      	mov	r1, r3
 8000430:	481a      	ldr	r0, [pc, #104]	; (800049c <MX_GPIO_Init+0x104>)
 8000432:	f000 fff1 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8000436:	23b8      	movs	r3, #184	; 0xb8
 8000438:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800043a:	4b19      	ldr	r3, [pc, #100]	; (80004a0 <MX_GPIO_Init+0x108>)
 800043c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800043e:	2301      	movs	r3, #1
 8000440:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000442:	f107 0310 	add.w	r3, r7, #16
 8000446:	4619      	mov	r1, r3
 8000448:	4814      	ldr	r0, [pc, #80]	; (800049c <MX_GPIO_Init+0x104>)
 800044a:	f000 ffe5 	bl	8001418 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800044e:	2200      	movs	r2, #0
 8000450:	2100      	movs	r1, #0
 8000452:	2007      	movs	r0, #7
 8000454:	f000 ffa9 	bl	80013aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000458:	2007      	movs	r0, #7
 800045a:	f000 ffc2 	bl	80013e2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800045e:	2200      	movs	r2, #0
 8000460:	2100      	movs	r1, #0
 8000462:	2009      	movs	r0, #9
 8000464:	f000 ffa1 	bl	80013aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000468:	2009      	movs	r0, #9
 800046a:	f000 ffba 	bl	80013e2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800046e:	2200      	movs	r2, #0
 8000470:	2100      	movs	r1, #0
 8000472:	200a      	movs	r0, #10
 8000474:	f000 ff99 	bl	80013aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000478:	200a      	movs	r0, #10
 800047a:	f000 ffb2 	bl	80013e2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800047e:	2200      	movs	r2, #0
 8000480:	2100      	movs	r1, #0
 8000482:	2017      	movs	r0, #23
 8000484:	f000 ff91 	bl	80013aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000488:	2017      	movs	r0, #23
 800048a:	f000 ffaa 	bl	80013e2 <HAL_NVIC_EnableIRQ>

}
 800048e:	bf00      	nop
 8000490:	3720      	adds	r7, #32
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	40021000 	.word	0x40021000
 800049c:	40010c00 	.word	0x40010c00
 80004a0:	10110000 	.word	0x10110000
 80004a4:	40010800 	.word	0x40010800

080004a8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80004a8:	b480      	push	{r7}
 80004aa:	b083      	sub	sp, #12
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	4603      	mov	r3, r0
 80004b0:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_1) // If The INT Source Is EXTI Line9 (A9 Pin)
 80004b2:	88fb      	ldrh	r3, [r7, #6]
 80004b4:	2b02      	cmp	r3, #2
 80004b6:	d102      	bne.n	80004be <HAL_GPIO_EXTI_Callback+0x16>
    {
    	interrupt_happened = 1;
 80004b8:	4b0f      	ldr	r3, [pc, #60]	; (80004f8 <HAL_GPIO_EXTI_Callback+0x50>)
 80004ba:	2201      	movs	r2, #1
 80004bc:	701a      	strb	r2, [r3, #0]
    }
    if(GPIO_Pin == GPIO_PIN_3) // If The INT Source Is EXTI Line9 (A9 Pin)
 80004be:	88fb      	ldrh	r3, [r7, #6]
 80004c0:	2b08      	cmp	r3, #8
 80004c2:	d102      	bne.n	80004ca <HAL_GPIO_EXTI_Callback+0x22>
    {
    	push_button_4 = 1;
 80004c4:	4b0d      	ldr	r3, [pc, #52]	; (80004fc <HAL_GPIO_EXTI_Callback+0x54>)
 80004c6:	2201      	movs	r2, #1
 80004c8:	701a      	strb	r2, [r3, #0]
    }
    if(GPIO_Pin == GPIO_PIN_4) // If The INT Source Is EXTI Line9 (A9 Pin)
 80004ca:	88fb      	ldrh	r3, [r7, #6]
 80004cc:	2b10      	cmp	r3, #16
 80004ce:	d102      	bne.n	80004d6 <HAL_GPIO_EXTI_Callback+0x2e>
    {
    	push_button_3 = 1;
 80004d0:	4b0b      	ldr	r3, [pc, #44]	; (8000500 <HAL_GPIO_EXTI_Callback+0x58>)
 80004d2:	2201      	movs	r2, #1
 80004d4:	701a      	strb	r2, [r3, #0]
    }
    if(GPIO_Pin == GPIO_PIN_5) // If The INT Source Is EXTI Line9 (A9 Pin)
 80004d6:	88fb      	ldrh	r3, [r7, #6]
 80004d8:	2b20      	cmp	r3, #32
 80004da:	d102      	bne.n	80004e2 <HAL_GPIO_EXTI_Callback+0x3a>
    {
    	push_button_2 = 1;
 80004dc:	4b09      	ldr	r3, [pc, #36]	; (8000504 <HAL_GPIO_EXTI_Callback+0x5c>)
 80004de:	2201      	movs	r2, #1
 80004e0:	701a      	strb	r2, [r3, #0]
    }
    if(GPIO_Pin == GPIO_PIN_7) // If The INT Source Is EXTI Line9 (A9 Pin)
 80004e2:	88fb      	ldrh	r3, [r7, #6]
 80004e4:	2b80      	cmp	r3, #128	; 0x80
 80004e6:	d102      	bne.n	80004ee <HAL_GPIO_EXTI_Callback+0x46>
    {
    	push_button_1 = 1;
 80004e8:	4b07      	ldr	r3, [pc, #28]	; (8000508 <HAL_GPIO_EXTI_Callback+0x60>)
 80004ea:	2201      	movs	r2, #1
 80004ec:	701a      	strb	r2, [r3, #0]
    }

}
 80004ee:	bf00      	nop
 80004f0:	370c      	adds	r7, #12
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bc80      	pop	{r7}
 80004f6:	4770      	bx	lr
 80004f8:	20000180 	.word	0x20000180
 80004fc:	20000184 	.word	0x20000184
 8000500:	20000183 	.word	0x20000183
 8000504:	20000182 	.word	0x20000182
 8000508:	20000181 	.word	0x20000181

0800050c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000510:	b672      	cpsid	i
}
 8000512:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000514:	e7fe      	b.n	8000514 <Error_Handler+0x8>
	...

08000518 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000518:	b480      	push	{r7}
 800051a:	b085      	sub	sp, #20
 800051c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800051e:	4b15      	ldr	r3, [pc, #84]	; (8000574 <HAL_MspInit+0x5c>)
 8000520:	699b      	ldr	r3, [r3, #24]
 8000522:	4a14      	ldr	r2, [pc, #80]	; (8000574 <HAL_MspInit+0x5c>)
 8000524:	f043 0301 	orr.w	r3, r3, #1
 8000528:	6193      	str	r3, [r2, #24]
 800052a:	4b12      	ldr	r3, [pc, #72]	; (8000574 <HAL_MspInit+0x5c>)
 800052c:	699b      	ldr	r3, [r3, #24]
 800052e:	f003 0301 	and.w	r3, r3, #1
 8000532:	60bb      	str	r3, [r7, #8]
 8000534:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000536:	4b0f      	ldr	r3, [pc, #60]	; (8000574 <HAL_MspInit+0x5c>)
 8000538:	69db      	ldr	r3, [r3, #28]
 800053a:	4a0e      	ldr	r2, [pc, #56]	; (8000574 <HAL_MspInit+0x5c>)
 800053c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000540:	61d3      	str	r3, [r2, #28]
 8000542:	4b0c      	ldr	r3, [pc, #48]	; (8000574 <HAL_MspInit+0x5c>)
 8000544:	69db      	ldr	r3, [r3, #28]
 8000546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800054e:	4b0a      	ldr	r3, [pc, #40]	; (8000578 <HAL_MspInit+0x60>)
 8000550:	685b      	ldr	r3, [r3, #4]
 8000552:	60fb      	str	r3, [r7, #12]
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800055a:	60fb      	str	r3, [r7, #12]
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000562:	60fb      	str	r3, [r7, #12]
 8000564:	4a04      	ldr	r2, [pc, #16]	; (8000578 <HAL_MspInit+0x60>)
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800056a:	bf00      	nop
 800056c:	3714      	adds	r7, #20
 800056e:	46bd      	mov	sp, r7
 8000570:	bc80      	pop	{r7}
 8000572:	4770      	bx	lr
 8000574:	40021000 	.word	0x40021000
 8000578:	40010000 	.word	0x40010000

0800057c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b08a      	sub	sp, #40	; 0x28
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000584:	f107 0318 	add.w	r3, r7, #24
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]
 800058e:	609a      	str	r2, [r3, #8]
 8000590:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4a28      	ldr	r2, [pc, #160]	; (8000638 <HAL_ADC_MspInit+0xbc>)
 8000598:	4293      	cmp	r3, r2
 800059a:	d122      	bne.n	80005e2 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800059c:	4b27      	ldr	r3, [pc, #156]	; (800063c <HAL_ADC_MspInit+0xc0>)
 800059e:	699b      	ldr	r3, [r3, #24]
 80005a0:	4a26      	ldr	r2, [pc, #152]	; (800063c <HAL_ADC_MspInit+0xc0>)
 80005a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005a6:	6193      	str	r3, [r2, #24]
 80005a8:	4b24      	ldr	r3, [pc, #144]	; (800063c <HAL_ADC_MspInit+0xc0>)
 80005aa:	699b      	ldr	r3, [r3, #24]
 80005ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80005b0:	617b      	str	r3, [r7, #20]
 80005b2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b4:	4b21      	ldr	r3, [pc, #132]	; (800063c <HAL_ADC_MspInit+0xc0>)
 80005b6:	699b      	ldr	r3, [r3, #24]
 80005b8:	4a20      	ldr	r2, [pc, #128]	; (800063c <HAL_ADC_MspInit+0xc0>)
 80005ba:	f043 0304 	orr.w	r3, r3, #4
 80005be:	6193      	str	r3, [r2, #24]
 80005c0:	4b1e      	ldr	r3, [pc, #120]	; (800063c <HAL_ADC_MspInit+0xc0>)
 80005c2:	699b      	ldr	r3, [r3, #24]
 80005c4:	f003 0304 	and.w	r3, r3, #4
 80005c8:	613b      	str	r3, [r7, #16]
 80005ca:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80005cc:	2380      	movs	r3, #128	; 0x80
 80005ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005d0:	2303      	movs	r3, #3
 80005d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d4:	f107 0318 	add.w	r3, r7, #24
 80005d8:	4619      	mov	r1, r3
 80005da:	4819      	ldr	r0, [pc, #100]	; (8000640 <HAL_ADC_MspInit+0xc4>)
 80005dc:	f000 ff1c 	bl	8001418 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80005e0:	e026      	b.n	8000630 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4a17      	ldr	r2, [pc, #92]	; (8000644 <HAL_ADC_MspInit+0xc8>)
 80005e8:	4293      	cmp	r3, r2
 80005ea:	d121      	bne.n	8000630 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80005ec:	4b13      	ldr	r3, [pc, #76]	; (800063c <HAL_ADC_MspInit+0xc0>)
 80005ee:	699b      	ldr	r3, [r3, #24]
 80005f0:	4a12      	ldr	r2, [pc, #72]	; (800063c <HAL_ADC_MspInit+0xc0>)
 80005f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005f6:	6193      	str	r3, [r2, #24]
 80005f8:	4b10      	ldr	r3, [pc, #64]	; (800063c <HAL_ADC_MspInit+0xc0>)
 80005fa:	699b      	ldr	r3, [r3, #24]
 80005fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000600:	60fb      	str	r3, [r7, #12]
 8000602:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000604:	4b0d      	ldr	r3, [pc, #52]	; (800063c <HAL_ADC_MspInit+0xc0>)
 8000606:	699b      	ldr	r3, [r3, #24]
 8000608:	4a0c      	ldr	r2, [pc, #48]	; (800063c <HAL_ADC_MspInit+0xc0>)
 800060a:	f043 0304 	orr.w	r3, r3, #4
 800060e:	6193      	str	r3, [r2, #24]
 8000610:	4b0a      	ldr	r3, [pc, #40]	; (800063c <HAL_ADC_MspInit+0xc0>)
 8000612:	699b      	ldr	r3, [r3, #24]
 8000614:	f003 0304 	and.w	r3, r3, #4
 8000618:	60bb      	str	r3, [r7, #8]
 800061a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800061c:	2340      	movs	r3, #64	; 0x40
 800061e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000620:	2303      	movs	r3, #3
 8000622:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000624:	f107 0318 	add.w	r3, r7, #24
 8000628:	4619      	mov	r1, r3
 800062a:	4805      	ldr	r0, [pc, #20]	; (8000640 <HAL_ADC_MspInit+0xc4>)
 800062c:	f000 fef4 	bl	8001418 <HAL_GPIO_Init>
}
 8000630:	bf00      	nop
 8000632:	3728      	adds	r7, #40	; 0x28
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	40012400 	.word	0x40012400
 800063c:	40021000 	.word	0x40021000
 8000640:	40010800 	.word	0x40010800
 8000644:	40012800 	.word	0x40012800

08000648 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800064c:	e7fe      	b.n	800064c <NMI_Handler+0x4>

0800064e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800064e:	b480      	push	{r7}
 8000650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000652:	e7fe      	b.n	8000652 <HardFault_Handler+0x4>

08000654 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000658:	e7fe      	b.n	8000658 <MemManage_Handler+0x4>

0800065a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800065a:	b480      	push	{r7}
 800065c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800065e:	e7fe      	b.n	800065e <BusFault_Handler+0x4>

08000660 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000664:	e7fe      	b.n	8000664 <UsageFault_Handler+0x4>

08000666 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000666:	b480      	push	{r7}
 8000668:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800066a:	bf00      	nop
 800066c:	46bd      	mov	sp, r7
 800066e:	bc80      	pop	{r7}
 8000670:	4770      	bx	lr

08000672 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000672:	b480      	push	{r7}
 8000674:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000676:	bf00      	nop
 8000678:	46bd      	mov	sp, r7
 800067a:	bc80      	pop	{r7}
 800067c:	4770      	bx	lr

0800067e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800067e:	b480      	push	{r7}
 8000680:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000682:	bf00      	nop
 8000684:	46bd      	mov	sp, r7
 8000686:	bc80      	pop	{r7}
 8000688:	4770      	bx	lr

0800068a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800068a:	b580      	push	{r7, lr}
 800068c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800068e:	f000 f89d 	bl	80007cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}

08000696 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000696:	b580      	push	{r7, lr}
 8000698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800069a:	2002      	movs	r0, #2
 800069c:	f001 f872 	bl	8001784 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80006a0:	bf00      	nop
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80006a8:	2008      	movs	r0, #8
 80006aa:	f001 f86b 	bl	8001784 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}

080006b2 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80006b2:	b580      	push	{r7, lr}
 80006b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80006b6:	2010      	movs	r0, #16
 80006b8:	f001 f864 	bl	8001784 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80006bc:	bf00      	nop
 80006be:	bd80      	pop	{r7, pc}

080006c0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80006c4:	4802      	ldr	r0, [pc, #8]	; (80006d0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80006c6:	f001 f9a6 	bl	8001a16 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	200006c8 	.word	0x200006c8

080006d4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80006d8:	2020      	movs	r0, #32
 80006da:	f001 f853 	bl	8001784 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80006de:	2080      	movs	r0, #128	; 0x80
 80006e0:	f001 f850 	bl	8001784 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80006e4:	bf00      	nop
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006ec:	bf00      	nop
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bc80      	pop	{r7}
 80006f2:	4770      	bx	lr

080006f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006f4:	480c      	ldr	r0, [pc, #48]	; (8000728 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80006f6:	490d      	ldr	r1, [pc, #52]	; (800072c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80006f8:	4a0d      	ldr	r2, [pc, #52]	; (8000730 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80006fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006fc:	e002      	b.n	8000704 <LoopCopyDataInit>

080006fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000700:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000702:	3304      	adds	r3, #4

08000704 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000704:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000706:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000708:	d3f9      	bcc.n	80006fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800070a:	4a0a      	ldr	r2, [pc, #40]	; (8000734 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800070c:	4c0a      	ldr	r4, [pc, #40]	; (8000738 <LoopFillZerobss+0x22>)
  movs r3, #0
 800070e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000710:	e001      	b.n	8000716 <LoopFillZerobss>

08000712 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000712:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000714:	3204      	adds	r2, #4

08000716 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000716:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000718:	d3fb      	bcc.n	8000712 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800071a:	f7ff ffe5 	bl	80006e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800071e:	f007 fad1 	bl	8007cc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000722:	f7ff fd13 	bl	800014c <main>
  bx lr
 8000726:	4770      	bx	lr
  ldr r0, =_sdata
 8000728:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800072c:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 8000730:	08007db8 	.word	0x08007db8
  ldr r2, =_sbss
 8000734:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 8000738:	200009b4 	.word	0x200009b4

0800073c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800073c:	e7fe      	b.n	800073c <ADC1_2_IRQHandler>
	...

08000740 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000744:	4b08      	ldr	r3, [pc, #32]	; (8000768 <HAL_Init+0x28>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a07      	ldr	r2, [pc, #28]	; (8000768 <HAL_Init+0x28>)
 800074a:	f043 0310 	orr.w	r3, r3, #16
 800074e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000750:	2003      	movs	r0, #3
 8000752:	f000 fe1f 	bl	8001394 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000756:	2000      	movs	r0, #0
 8000758:	f000 f808 	bl	800076c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800075c:	f7ff fedc 	bl	8000518 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000760:	2300      	movs	r3, #0
}
 8000762:	4618      	mov	r0, r3
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40022000 	.word	0x40022000

0800076c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000774:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <HAL_InitTick+0x54>)
 8000776:	681a      	ldr	r2, [r3, #0]
 8000778:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <HAL_InitTick+0x58>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	4619      	mov	r1, r3
 800077e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000782:	fbb3 f3f1 	udiv	r3, r3, r1
 8000786:	fbb2 f3f3 	udiv	r3, r2, r3
 800078a:	4618      	mov	r0, r3
 800078c:	f000 fe37 	bl	80013fe <HAL_SYSTICK_Config>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000796:	2301      	movs	r3, #1
 8000798:	e00e      	b.n	80007b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	2b0f      	cmp	r3, #15
 800079e:	d80a      	bhi.n	80007b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007a0:	2200      	movs	r2, #0
 80007a2:	6879      	ldr	r1, [r7, #4]
 80007a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007a8:	f000 fdff 	bl	80013aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007ac:	4a06      	ldr	r2, [pc, #24]	; (80007c8 <HAL_InitTick+0x5c>)
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007b2:	2300      	movs	r3, #0
 80007b4:	e000      	b.n	80007b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007b6:	2301      	movs	r3, #1
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	3708      	adds	r7, #8
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20000000 	.word	0x20000000
 80007c4:	20000008 	.word	0x20000008
 80007c8:	20000004 	.word	0x20000004

080007cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007d0:	4b05      	ldr	r3, [pc, #20]	; (80007e8 <HAL_IncTick+0x1c>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	461a      	mov	r2, r3
 80007d6:	4b05      	ldr	r3, [pc, #20]	; (80007ec <HAL_IncTick+0x20>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4413      	add	r3, r2
 80007dc:	4a03      	ldr	r2, [pc, #12]	; (80007ec <HAL_IncTick+0x20>)
 80007de:	6013      	str	r3, [r2, #0]
}
 80007e0:	bf00      	nop
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bc80      	pop	{r7}
 80007e6:	4770      	bx	lr
 80007e8:	20000008 	.word	0x20000008
 80007ec:	20000200 	.word	0x20000200

080007f0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  return uwTick;
 80007f4:	4b02      	ldr	r3, [pc, #8]	; (8000800 <HAL_GetTick+0x10>)
 80007f6:	681b      	ldr	r3, [r3, #0]
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bc80      	pop	{r7}
 80007fe:	4770      	bx	lr
 8000800:	20000200 	.word	0x20000200

08000804 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800080c:	f7ff fff0 	bl	80007f0 <HAL_GetTick>
 8000810:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800081c:	d005      	beq.n	800082a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800081e:	4b0a      	ldr	r3, [pc, #40]	; (8000848 <HAL_Delay+0x44>)
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	461a      	mov	r2, r3
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	4413      	add	r3, r2
 8000828:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800082a:	bf00      	nop
 800082c:	f7ff ffe0 	bl	80007f0 <HAL_GetTick>
 8000830:	4602      	mov	r2, r0
 8000832:	68bb      	ldr	r3, [r7, #8]
 8000834:	1ad3      	subs	r3, r2, r3
 8000836:	68fa      	ldr	r2, [r7, #12]
 8000838:	429a      	cmp	r2, r3
 800083a:	d8f7      	bhi.n	800082c <HAL_Delay+0x28>
  {
  }
}
 800083c:	bf00      	nop
 800083e:	bf00      	nop
 8000840:	3710      	adds	r7, #16
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20000008 	.word	0x20000008

0800084c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b086      	sub	sp, #24
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000854:	2300      	movs	r3, #0
 8000856:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000858:	2300      	movs	r3, #0
 800085a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800085c:	2300      	movs	r3, #0
 800085e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000860:	2300      	movs	r3, #0
 8000862:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d101      	bne.n	800086e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800086a:	2301      	movs	r3, #1
 800086c:	e0be      	b.n	80009ec <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	689b      	ldr	r3, [r3, #8]
 8000872:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000878:	2b00      	cmp	r3, #0
 800087a:	d109      	bne.n	8000890 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2200      	movs	r2, #0
 8000880:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	2200      	movs	r2, #0
 8000886:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800088a:	6878      	ldr	r0, [r7, #4]
 800088c:	f7ff fe76 	bl	800057c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000890:	6878      	ldr	r0, [r7, #4]
 8000892:	f000 fbc5 	bl	8001020 <ADC_ConversionStop_Disable>
 8000896:	4603      	mov	r3, r0
 8000898:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800089e:	f003 0310 	and.w	r3, r3, #16
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	f040 8099 	bne.w	80009da <HAL_ADC_Init+0x18e>
 80008a8:	7dfb      	ldrb	r3, [r7, #23]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	f040 8095 	bne.w	80009da <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008b4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80008b8:	f023 0302 	bic.w	r3, r3, #2
 80008bc:	f043 0202 	orr.w	r2, r3, #2
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80008cc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	7b1b      	ldrb	r3, [r3, #12]
 80008d2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80008d4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80008d6:	68ba      	ldr	r2, [r7, #8]
 80008d8:	4313      	orrs	r3, r2
 80008da:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	689b      	ldr	r3, [r3, #8]
 80008e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80008e4:	d003      	beq.n	80008ee <HAL_ADC_Init+0xa2>
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	689b      	ldr	r3, [r3, #8]
 80008ea:	2b01      	cmp	r3, #1
 80008ec:	d102      	bne.n	80008f4 <HAL_ADC_Init+0xa8>
 80008ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008f2:	e000      	b.n	80008f6 <HAL_ADC_Init+0xaa>
 80008f4:	2300      	movs	r3, #0
 80008f6:	693a      	ldr	r2, [r7, #16]
 80008f8:	4313      	orrs	r3, r2
 80008fa:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	7d1b      	ldrb	r3, [r3, #20]
 8000900:	2b01      	cmp	r3, #1
 8000902:	d119      	bne.n	8000938 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	7b1b      	ldrb	r3, [r3, #12]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d109      	bne.n	8000920 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	699b      	ldr	r3, [r3, #24]
 8000910:	3b01      	subs	r3, #1
 8000912:	035a      	lsls	r2, r3, #13
 8000914:	693b      	ldr	r3, [r7, #16]
 8000916:	4313      	orrs	r3, r2
 8000918:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800091c:	613b      	str	r3, [r7, #16]
 800091e:	e00b      	b.n	8000938 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000924:	f043 0220 	orr.w	r2, r3, #32
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000930:	f043 0201 	orr.w	r2, r3, #1
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	693a      	ldr	r2, [r7, #16]
 8000948:	430a      	orrs	r2, r1
 800094a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	689a      	ldr	r2, [r3, #8]
 8000952:	4b28      	ldr	r3, [pc, #160]	; (80009f4 <HAL_ADC_Init+0x1a8>)
 8000954:	4013      	ands	r3, r2
 8000956:	687a      	ldr	r2, [r7, #4]
 8000958:	6812      	ldr	r2, [r2, #0]
 800095a:	68b9      	ldr	r1, [r7, #8]
 800095c:	430b      	orrs	r3, r1
 800095e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	689b      	ldr	r3, [r3, #8]
 8000964:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000968:	d003      	beq.n	8000972 <HAL_ADC_Init+0x126>
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	689b      	ldr	r3, [r3, #8]
 800096e:	2b01      	cmp	r3, #1
 8000970:	d104      	bne.n	800097c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	691b      	ldr	r3, [r3, #16]
 8000976:	3b01      	subs	r3, #1
 8000978:	051b      	lsls	r3, r3, #20
 800097a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000982:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	68fa      	ldr	r2, [r7, #12]
 800098c:	430a      	orrs	r2, r1
 800098e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	689a      	ldr	r2, [r3, #8]
 8000996:	4b18      	ldr	r3, [pc, #96]	; (80009f8 <HAL_ADC_Init+0x1ac>)
 8000998:	4013      	ands	r3, r2
 800099a:	68ba      	ldr	r2, [r7, #8]
 800099c:	429a      	cmp	r2, r3
 800099e:	d10b      	bne.n	80009b8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	2200      	movs	r2, #0
 80009a4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009aa:	f023 0303 	bic.w	r3, r3, #3
 80009ae:	f043 0201 	orr.w	r2, r3, #1
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80009b6:	e018      	b.n	80009ea <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009bc:	f023 0312 	bic.w	r3, r3, #18
 80009c0:	f043 0210 	orr.w	r2, r3, #16
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009cc:	f043 0201 	orr.w	r2, r3, #1
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80009d4:	2301      	movs	r3, #1
 80009d6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80009d8:	e007      	b.n	80009ea <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009de:	f043 0210 	orr.w	r2, r3, #16
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80009e6:	2301      	movs	r3, #1
 80009e8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80009ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	3718      	adds	r7, #24
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	ffe1f7fd 	.word	0xffe1f7fd
 80009f8:	ff1f0efe 	.word	0xff1f0efe

080009fc <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b084      	sub	sp, #16
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a04:	2300      	movs	r3, #0
 8000a06:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000a0e:	2b01      	cmp	r3, #1
 8000a10:	d101      	bne.n	8000a16 <HAL_ADC_Start+0x1a>
 8000a12:	2302      	movs	r3, #2
 8000a14:	e098      	b.n	8000b48 <HAL_ADC_Start+0x14c>
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	2201      	movs	r2, #1
 8000a1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000a1e:	6878      	ldr	r0, [r7, #4]
 8000a20:	f000 faa4 	bl	8000f6c <ADC_Enable>
 8000a24:	4603      	mov	r3, r0
 8000a26:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000a28:	7bfb      	ldrb	r3, [r7, #15]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	f040 8087 	bne.w	8000b3e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000a38:	f023 0301 	bic.w	r3, r3, #1
 8000a3c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a41      	ldr	r2, [pc, #260]	; (8000b50 <HAL_ADC_Start+0x154>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d105      	bne.n	8000a5a <HAL_ADC_Start+0x5e>
 8000a4e:	4b41      	ldr	r3, [pc, #260]	; (8000b54 <HAL_ADC_Start+0x158>)
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d115      	bne.n	8000a86 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a5e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d026      	beq.n	8000ac2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a78:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000a7c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000a84:	e01d      	b.n	8000ac2 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a8a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a2f      	ldr	r2, [pc, #188]	; (8000b54 <HAL_ADC_Start+0x158>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d004      	beq.n	8000aa6 <HAL_ADC_Start+0xaa>
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a2b      	ldr	r2, [pc, #172]	; (8000b50 <HAL_ADC_Start+0x154>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d10d      	bne.n	8000ac2 <HAL_ADC_Start+0xc6>
 8000aa6:	4b2b      	ldr	r3, [pc, #172]	; (8000b54 <HAL_ADC_Start+0x158>)
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d007      	beq.n	8000ac2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ab6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000aba:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ac6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d006      	beq.n	8000adc <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ad2:	f023 0206 	bic.w	r2, r3, #6
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ada:	e002      	b.n	8000ae2 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2200      	movs	r2, #0
 8000ae0:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	f06f 0202 	mvn.w	r2, #2
 8000af2:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	689b      	ldr	r3, [r3, #8]
 8000afa:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000afe:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000b02:	d113      	bne.n	8000b2c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000b08:	4a11      	ldr	r2, [pc, #68]	; (8000b50 <HAL_ADC_Start+0x154>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d105      	bne.n	8000b1a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000b0e:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <HAL_ADC_Start+0x158>)
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d108      	bne.n	8000b2c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	689a      	ldr	r2, [r3, #8]
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000b28:	609a      	str	r2, [r3, #8]
 8000b2a:	e00c      	b.n	8000b46 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	689a      	ldr	r2, [r3, #8]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	e003      	b.n	8000b46 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	2200      	movs	r2, #0
 8000b42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	3710      	adds	r7, #16
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40012800 	.word	0x40012800
 8000b54:	40012400 	.word	0x40012400

08000b58 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000b58:	b590      	push	{r4, r7, lr}
 8000b5a:	b087      	sub	sp, #28
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000b62:	2300      	movs	r3, #0
 8000b64:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000b66:	2300      	movs	r3, #0
 8000b68:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000b6e:	f7ff fe3f 	bl	80007f0 <HAL_GetTick>
 8000b72:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	689b      	ldr	r3, [r3, #8]
 8000b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d00b      	beq.n	8000b9a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b86:	f043 0220 	orr.w	r2, r3, #32
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	2200      	movs	r2, #0
 8000b92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8000b96:	2301      	movs	r3, #1
 8000b98:	e0d3      	b.n	8000d42 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d131      	bne.n	8000c0c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bae:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d12a      	bne.n	8000c0c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000bb6:	e021      	b.n	8000bfc <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000bbe:	d01d      	beq.n	8000bfc <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d007      	beq.n	8000bd6 <HAL_ADC_PollForConversion+0x7e>
 8000bc6:	f7ff fe13 	bl	80007f0 <HAL_GetTick>
 8000bca:	4602      	mov	r2, r0
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	1ad3      	subs	r3, r2, r3
 8000bd0:	683a      	ldr	r2, [r7, #0]
 8000bd2:	429a      	cmp	r2, r3
 8000bd4:	d212      	bcs.n	8000bfc <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f003 0302 	and.w	r3, r3, #2
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d10b      	bne.n	8000bfc <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000be8:	f043 0204 	orr.w	r2, r3, #4
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8000bf8:	2303      	movs	r3, #3
 8000bfa:	e0a2      	b.n	8000d42 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f003 0302 	and.w	r3, r3, #2
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d0d6      	beq.n	8000bb8 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000c0a:	e070      	b.n	8000cee <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000c0c:	4b4f      	ldr	r3, [pc, #316]	; (8000d4c <HAL_ADC_PollForConversion+0x1f4>)
 8000c0e:	681c      	ldr	r4, [r3, #0]
 8000c10:	2002      	movs	r0, #2
 8000c12:	f002 ff39 	bl	8003a88 <HAL_RCCEx_GetPeriphCLKFreq>
 8000c16:	4603      	mov	r3, r0
 8000c18:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	6919      	ldr	r1, [r3, #16]
 8000c22:	4b4b      	ldr	r3, [pc, #300]	; (8000d50 <HAL_ADC_PollForConversion+0x1f8>)
 8000c24:	400b      	ands	r3, r1
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d118      	bne.n	8000c5c <HAL_ADC_PollForConversion+0x104>
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	68d9      	ldr	r1, [r3, #12]
 8000c30:	4b48      	ldr	r3, [pc, #288]	; (8000d54 <HAL_ADC_PollForConversion+0x1fc>)
 8000c32:	400b      	ands	r3, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d111      	bne.n	8000c5c <HAL_ADC_PollForConversion+0x104>
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	6919      	ldr	r1, [r3, #16]
 8000c3e:	4b46      	ldr	r3, [pc, #280]	; (8000d58 <HAL_ADC_PollForConversion+0x200>)
 8000c40:	400b      	ands	r3, r1
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d108      	bne.n	8000c58 <HAL_ADC_PollForConversion+0x100>
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	68d9      	ldr	r1, [r3, #12]
 8000c4c:	4b43      	ldr	r3, [pc, #268]	; (8000d5c <HAL_ADC_PollForConversion+0x204>)
 8000c4e:	400b      	ands	r3, r1
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d101      	bne.n	8000c58 <HAL_ADC_PollForConversion+0x100>
 8000c54:	2314      	movs	r3, #20
 8000c56:	e020      	b.n	8000c9a <HAL_ADC_PollForConversion+0x142>
 8000c58:	2329      	movs	r3, #41	; 0x29
 8000c5a:	e01e      	b.n	8000c9a <HAL_ADC_PollForConversion+0x142>
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	6919      	ldr	r1, [r3, #16]
 8000c62:	4b3d      	ldr	r3, [pc, #244]	; (8000d58 <HAL_ADC_PollForConversion+0x200>)
 8000c64:	400b      	ands	r3, r1
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d106      	bne.n	8000c78 <HAL_ADC_PollForConversion+0x120>
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	68d9      	ldr	r1, [r3, #12]
 8000c70:	4b3a      	ldr	r3, [pc, #232]	; (8000d5c <HAL_ADC_PollForConversion+0x204>)
 8000c72:	400b      	ands	r3, r1
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d00d      	beq.n	8000c94 <HAL_ADC_PollForConversion+0x13c>
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	6919      	ldr	r1, [r3, #16]
 8000c7e:	4b38      	ldr	r3, [pc, #224]	; (8000d60 <HAL_ADC_PollForConversion+0x208>)
 8000c80:	400b      	ands	r3, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d108      	bne.n	8000c98 <HAL_ADC_PollForConversion+0x140>
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	68d9      	ldr	r1, [r3, #12]
 8000c8c:	4b34      	ldr	r3, [pc, #208]	; (8000d60 <HAL_ADC_PollForConversion+0x208>)
 8000c8e:	400b      	ands	r3, r1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d101      	bne.n	8000c98 <HAL_ADC_PollForConversion+0x140>
 8000c94:	2354      	movs	r3, #84	; 0x54
 8000c96:	e000      	b.n	8000c9a <HAL_ADC_PollForConversion+0x142>
 8000c98:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000c9a:	fb02 f303 	mul.w	r3, r2, r3
 8000c9e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000ca0:	e021      	b.n	8000ce6 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ca8:	d01a      	beq.n	8000ce0 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d007      	beq.n	8000cc0 <HAL_ADC_PollForConversion+0x168>
 8000cb0:	f7ff fd9e 	bl	80007f0 <HAL_GetTick>
 8000cb4:	4602      	mov	r2, r0
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	1ad3      	subs	r3, r2, r3
 8000cba:	683a      	ldr	r2, [r7, #0]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d20f      	bcs.n	8000ce0 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d90b      	bls.n	8000ce0 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ccc:	f043 0204 	orr.w	r2, r3, #4
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8000cdc:	2303      	movs	r3, #3
 8000cde:	e030      	b.n	8000d42 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	693a      	ldr	r2, [r7, #16]
 8000cea:	429a      	cmp	r2, r3
 8000cec:	d8d9      	bhi.n	8000ca2 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f06f 0212 	mvn.w	r2, #18
 8000cf6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cfc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	689b      	ldr	r3, [r3, #8]
 8000d0a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000d0e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000d12:	d115      	bne.n	8000d40 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d111      	bne.n	8000d40 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d20:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d105      	bne.n	8000d40 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d38:	f043 0201 	orr.w	r2, r3, #1
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000d40:	2300      	movs	r3, #0
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	371c      	adds	r7, #28
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd90      	pop	{r4, r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20000000 	.word	0x20000000
 8000d50:	24924924 	.word	0x24924924
 8000d54:	00924924 	.word	0x00924924
 8000d58:	12492492 	.word	0x12492492
 8000d5c:	00492492 	.word	0x00492492
 8000d60:	00249249 	.word	0x00249249

08000d64 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	370c      	adds	r7, #12
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bc80      	pop	{r7}
 8000d7a:	4770      	bx	lr

08000d7c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d86:	2300      	movs	r3, #0
 8000d88:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d101      	bne.n	8000d9c <HAL_ADC_ConfigChannel+0x20>
 8000d98:	2302      	movs	r3, #2
 8000d9a:	e0dc      	b.n	8000f56 <HAL_ADC_ConfigChannel+0x1da>
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2201      	movs	r2, #1
 8000da0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	2b06      	cmp	r3, #6
 8000daa:	d81c      	bhi.n	8000de6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685a      	ldr	r2, [r3, #4]
 8000db6:	4613      	mov	r3, r2
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	4413      	add	r3, r2
 8000dbc:	3b05      	subs	r3, #5
 8000dbe:	221f      	movs	r2, #31
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	43db      	mvns	r3, r3
 8000dc6:	4019      	ands	r1, r3
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	6818      	ldr	r0, [r3, #0]
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685a      	ldr	r2, [r3, #4]
 8000dd0:	4613      	mov	r3, r2
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	4413      	add	r3, r2
 8000dd6:	3b05      	subs	r3, #5
 8000dd8:	fa00 f203 	lsl.w	r2, r0, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	430a      	orrs	r2, r1
 8000de2:	635a      	str	r2, [r3, #52]	; 0x34
 8000de4:	e03c      	b.n	8000e60 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	2b0c      	cmp	r3, #12
 8000dec:	d81c      	bhi.n	8000e28 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685a      	ldr	r2, [r3, #4]
 8000df8:	4613      	mov	r3, r2
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	4413      	add	r3, r2
 8000dfe:	3b23      	subs	r3, #35	; 0x23
 8000e00:	221f      	movs	r2, #31
 8000e02:	fa02 f303 	lsl.w	r3, r2, r3
 8000e06:	43db      	mvns	r3, r3
 8000e08:	4019      	ands	r1, r3
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	6818      	ldr	r0, [r3, #0]
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	685a      	ldr	r2, [r3, #4]
 8000e12:	4613      	mov	r3, r2
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	4413      	add	r3, r2
 8000e18:	3b23      	subs	r3, #35	; 0x23
 8000e1a:	fa00 f203 	lsl.w	r2, r0, r3
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	430a      	orrs	r2, r1
 8000e24:	631a      	str	r2, [r3, #48]	; 0x30
 8000e26:	e01b      	b.n	8000e60 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685a      	ldr	r2, [r3, #4]
 8000e32:	4613      	mov	r3, r2
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	4413      	add	r3, r2
 8000e38:	3b41      	subs	r3, #65	; 0x41
 8000e3a:	221f      	movs	r2, #31
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	43db      	mvns	r3, r3
 8000e42:	4019      	ands	r1, r3
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	6818      	ldr	r0, [r3, #0]
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685a      	ldr	r2, [r3, #4]
 8000e4c:	4613      	mov	r3, r2
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	4413      	add	r3, r2
 8000e52:	3b41      	subs	r3, #65	; 0x41
 8000e54:	fa00 f203 	lsl.w	r2, r0, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	430a      	orrs	r2, r1
 8000e5e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	2b09      	cmp	r3, #9
 8000e66:	d91c      	bls.n	8000ea2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	68d9      	ldr	r1, [r3, #12]
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	4613      	mov	r3, r2
 8000e74:	005b      	lsls	r3, r3, #1
 8000e76:	4413      	add	r3, r2
 8000e78:	3b1e      	subs	r3, #30
 8000e7a:	2207      	movs	r2, #7
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	43db      	mvns	r3, r3
 8000e82:	4019      	ands	r1, r3
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	6898      	ldr	r0, [r3, #8]
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	4613      	mov	r3, r2
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	4413      	add	r3, r2
 8000e92:	3b1e      	subs	r3, #30
 8000e94:	fa00 f203 	lsl.w	r2, r0, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	430a      	orrs	r2, r1
 8000e9e:	60da      	str	r2, [r3, #12]
 8000ea0:	e019      	b.n	8000ed6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	6919      	ldr	r1, [r3, #16]
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	4613      	mov	r3, r2
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	4413      	add	r3, r2
 8000eb2:	2207      	movs	r2, #7
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	4019      	ands	r1, r3
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	6898      	ldr	r0, [r3, #8]
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	4613      	mov	r3, r2
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	4413      	add	r3, r2
 8000eca:	fa00 f203 	lsl.w	r2, r0, r3
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	430a      	orrs	r2, r1
 8000ed4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2b10      	cmp	r3, #16
 8000edc:	d003      	beq.n	8000ee6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000ee2:	2b11      	cmp	r3, #17
 8000ee4:	d132      	bne.n	8000f4c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a1d      	ldr	r2, [pc, #116]	; (8000f60 <HAL_ADC_ConfigChannel+0x1e4>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d125      	bne.n	8000f3c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d126      	bne.n	8000f4c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	689a      	ldr	r2, [r3, #8]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000f0c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	2b10      	cmp	r3, #16
 8000f14:	d11a      	bne.n	8000f4c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000f16:	4b13      	ldr	r3, [pc, #76]	; (8000f64 <HAL_ADC_ConfigChannel+0x1e8>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a13      	ldr	r2, [pc, #76]	; (8000f68 <HAL_ADC_ConfigChannel+0x1ec>)
 8000f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f20:	0c9a      	lsrs	r2, r3, #18
 8000f22:	4613      	mov	r3, r2
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	4413      	add	r3, r2
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f2c:	e002      	b.n	8000f34 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	3b01      	subs	r3, #1
 8000f32:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d1f9      	bne.n	8000f2e <HAL_ADC_ConfigChannel+0x1b2>
 8000f3a:	e007      	b.n	8000f4c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f40:	f043 0220 	orr.w	r2, r3, #32
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2200      	movs	r2, #0
 8000f50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3714      	adds	r7, #20
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bc80      	pop	{r7}
 8000f5e:	4770      	bx	lr
 8000f60:	40012400 	.word	0x40012400
 8000f64:	20000000 	.word	0x20000000
 8000f68:	431bde83 	.word	0x431bde83

08000f6c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000f74:	2300      	movs	r3, #0
 8000f76:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d040      	beq.n	800100c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	689a      	ldr	r2, [r3, #8]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f042 0201 	orr.w	r2, r2, #1
 8000f98:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f9a:	4b1f      	ldr	r3, [pc, #124]	; (8001018 <ADC_Enable+0xac>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a1f      	ldr	r2, [pc, #124]	; (800101c <ADC_Enable+0xb0>)
 8000fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8000fa4:	0c9b      	lsrs	r3, r3, #18
 8000fa6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000fa8:	e002      	b.n	8000fb0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	3b01      	subs	r3, #1
 8000fae:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d1f9      	bne.n	8000faa <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000fb6:	f7ff fc1b 	bl	80007f0 <HAL_GetTick>
 8000fba:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000fbc:	e01f      	b.n	8000ffe <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000fbe:	f7ff fc17 	bl	80007f0 <HAL_GetTick>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	1ad3      	subs	r3, r2, r3
 8000fc8:	2b02      	cmp	r3, #2
 8000fca:	d918      	bls.n	8000ffe <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d011      	beq.n	8000ffe <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fde:	f043 0210 	orr.w	r2, r3, #16
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fea:	f043 0201 	orr.w	r2, r3, #1
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e007      	b.n	800100e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	f003 0301 	and.w	r3, r3, #1
 8001008:	2b01      	cmp	r3, #1
 800100a:	d1d8      	bne.n	8000fbe <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800100c:	2300      	movs	r3, #0
}
 800100e:	4618      	mov	r0, r3
 8001010:	3710      	adds	r7, #16
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	20000000 	.word	0x20000000
 800101c:	431bde83 	.word	0x431bde83

08001020 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001028:	2300      	movs	r3, #0
 800102a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	2b01      	cmp	r3, #1
 8001038:	d12e      	bne.n	8001098 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	689a      	ldr	r2, [r3, #8]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f022 0201 	bic.w	r2, r2, #1
 8001048:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800104a:	f7ff fbd1 	bl	80007f0 <HAL_GetTick>
 800104e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001050:	e01b      	b.n	800108a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001052:	f7ff fbcd 	bl	80007f0 <HAL_GetTick>
 8001056:	4602      	mov	r2, r0
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	1ad3      	subs	r3, r2, r3
 800105c:	2b02      	cmp	r3, #2
 800105e:	d914      	bls.n	800108a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	2b01      	cmp	r3, #1
 800106c:	d10d      	bne.n	800108a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001072:	f043 0210 	orr.w	r2, r3, #16
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800107e:	f043 0201 	orr.w	r2, r3, #1
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e007      	b.n	800109a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	f003 0301 	and.w	r3, r3, #1
 8001094:	2b01      	cmp	r3, #1
 8001096:	d0dc      	beq.n	8001052 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001098:	2300      	movs	r3, #0
}
 800109a:	4618      	mov	r0, r3
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
	...

080010a4 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80010a4:	b590      	push	{r4, r7, lr}
 80010a6:	b087      	sub	sp, #28
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010ac:	2300      	movs	r3, #0
 80010ae:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80010b0:	2300      	movs	r3, #0
 80010b2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d101      	bne.n	80010c2 <HAL_ADCEx_Calibration_Start+0x1e>
 80010be:	2302      	movs	r3, #2
 80010c0:	e095      	b.n	80011ee <HAL_ADCEx_Calibration_Start+0x14a>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2201      	movs	r2, #1
 80010c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f7ff ffa8 	bl	8001020 <ADC_ConversionStop_Disable>
 80010d0:	4603      	mov	r3, r0
 80010d2:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80010d4:	7dfb      	ldrb	r3, [r7, #23]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	f040 8084 	bne.w	80011e4 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010e0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010e4:	f023 0302 	bic.w	r3, r3, #2
 80010e8:	f043 0202 	orr.w	r2, r3, #2
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80010f0:	4b41      	ldr	r3, [pc, #260]	; (80011f8 <HAL_ADCEx_Calibration_Start+0x154>)
 80010f2:	681c      	ldr	r4, [r3, #0]
 80010f4:	2002      	movs	r0, #2
 80010f6:	f002 fcc7 	bl	8003a88 <HAL_RCCEx_GetPeriphCLKFreq>
 80010fa:	4603      	mov	r3, r0
 80010fc:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001100:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001102:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001104:	e002      	b.n	800110c <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	3b01      	subs	r3, #1
 800110a:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d1f9      	bne.n	8001106 <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f7ff ff2a 	bl	8000f6c <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	689a      	ldr	r2, [r3, #8]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f042 0208 	orr.w	r2, r2, #8
 8001126:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001128:	f7ff fb62 	bl	80007f0 <HAL_GetTick>
 800112c:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800112e:	e01b      	b.n	8001168 <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001130:	f7ff fb5e 	bl	80007f0 <HAL_GetTick>
 8001134:	4602      	mov	r2, r0
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	2b0a      	cmp	r3, #10
 800113c:	d914      	bls.n	8001168 <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	f003 0308 	and.w	r3, r3, #8
 8001148:	2b00      	cmp	r3, #0
 800114a:	d00d      	beq.n	8001168 <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001150:	f023 0312 	bic.w	r3, r3, #18
 8001154:	f043 0210 	orr.w	r2, r3, #16
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2200      	movs	r2, #0
 8001160:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001164:	2301      	movs	r3, #1
 8001166:	e042      	b.n	80011ee <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	f003 0308 	and.w	r3, r3, #8
 8001172:	2b00      	cmp	r3, #0
 8001174:	d1dc      	bne.n	8001130 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	689a      	ldr	r2, [r3, #8]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f042 0204 	orr.w	r2, r2, #4
 8001184:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001186:	f7ff fb33 	bl	80007f0 <HAL_GetTick>
 800118a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800118c:	e01b      	b.n	80011c6 <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800118e:	f7ff fb2f 	bl	80007f0 <HAL_GetTick>
 8001192:	4602      	mov	r2, r0
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	2b0a      	cmp	r3, #10
 800119a:	d914      	bls.n	80011c6 <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	f003 0304 	and.w	r3, r3, #4
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d00d      	beq.n	80011c6 <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ae:	f023 0312 	bic.w	r3, r3, #18
 80011b2:	f043 0210 	orr.w	r2, r3, #16
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2200      	movs	r2, #0
 80011be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e013      	b.n	80011ee <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	f003 0304 	and.w	r3, r3, #4
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d1dc      	bne.n	800118e <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011d8:	f023 0303 	bic.w	r3, r3, #3
 80011dc:	f043 0201 	orr.w	r2, r3, #1
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2200      	movs	r2, #0
 80011e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80011ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	371c      	adds	r7, #28
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd90      	pop	{r4, r7, pc}
 80011f6:	bf00      	nop
 80011f8:	20000000 	.word	0x20000000

080011fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f003 0307 	and.w	r3, r3, #7
 800120a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800120c:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <__NVIC_SetPriorityGrouping+0x44>)
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001212:	68ba      	ldr	r2, [r7, #8]
 8001214:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001218:	4013      	ands	r3, r2
 800121a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001224:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001228:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800122c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800122e:	4a04      	ldr	r2, [pc, #16]	; (8001240 <__NVIC_SetPriorityGrouping+0x44>)
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	60d3      	str	r3, [r2, #12]
}
 8001234:	bf00      	nop
 8001236:	3714      	adds	r7, #20
 8001238:	46bd      	mov	sp, r7
 800123a:	bc80      	pop	{r7}
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	e000ed00 	.word	0xe000ed00

08001244 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001248:	4b04      	ldr	r3, [pc, #16]	; (800125c <__NVIC_GetPriorityGrouping+0x18>)
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	0a1b      	lsrs	r3, r3, #8
 800124e:	f003 0307 	and.w	r3, r3, #7
}
 8001252:	4618      	mov	r0, r3
 8001254:	46bd      	mov	sp, r7
 8001256:	bc80      	pop	{r7}
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	e000ed00 	.word	0xe000ed00

08001260 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800126a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126e:	2b00      	cmp	r3, #0
 8001270:	db0b      	blt.n	800128a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	f003 021f 	and.w	r2, r3, #31
 8001278:	4906      	ldr	r1, [pc, #24]	; (8001294 <__NVIC_EnableIRQ+0x34>)
 800127a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127e:	095b      	lsrs	r3, r3, #5
 8001280:	2001      	movs	r0, #1
 8001282:	fa00 f202 	lsl.w	r2, r0, r2
 8001286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800128a:	bf00      	nop
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	bc80      	pop	{r7}
 8001292:	4770      	bx	lr
 8001294:	e000e100 	.word	0xe000e100

08001298 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	6039      	str	r1, [r7, #0]
 80012a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	db0a      	blt.n	80012c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	b2da      	uxtb	r2, r3
 80012b0:	490c      	ldr	r1, [pc, #48]	; (80012e4 <__NVIC_SetPriority+0x4c>)
 80012b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b6:	0112      	lsls	r2, r2, #4
 80012b8:	b2d2      	uxtb	r2, r2
 80012ba:	440b      	add	r3, r1
 80012bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012c0:	e00a      	b.n	80012d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	b2da      	uxtb	r2, r3
 80012c6:	4908      	ldr	r1, [pc, #32]	; (80012e8 <__NVIC_SetPriority+0x50>)
 80012c8:	79fb      	ldrb	r3, [r7, #7]
 80012ca:	f003 030f 	and.w	r3, r3, #15
 80012ce:	3b04      	subs	r3, #4
 80012d0:	0112      	lsls	r2, r2, #4
 80012d2:	b2d2      	uxtb	r2, r2
 80012d4:	440b      	add	r3, r1
 80012d6:	761a      	strb	r2, [r3, #24]
}
 80012d8:	bf00      	nop
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	bc80      	pop	{r7}
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	e000e100 	.word	0xe000e100
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b089      	sub	sp, #36	; 0x24
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	60f8      	str	r0, [r7, #12]
 80012f4:	60b9      	str	r1, [r7, #8]
 80012f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	f003 0307 	and.w	r3, r3, #7
 80012fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	f1c3 0307 	rsb	r3, r3, #7
 8001306:	2b04      	cmp	r3, #4
 8001308:	bf28      	it	cs
 800130a:	2304      	movcs	r3, #4
 800130c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	3304      	adds	r3, #4
 8001312:	2b06      	cmp	r3, #6
 8001314:	d902      	bls.n	800131c <NVIC_EncodePriority+0x30>
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	3b03      	subs	r3, #3
 800131a:	e000      	b.n	800131e <NVIC_EncodePriority+0x32>
 800131c:	2300      	movs	r3, #0
 800131e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001320:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	43da      	mvns	r2, r3
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	401a      	ands	r2, r3
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001334:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	fa01 f303 	lsl.w	r3, r1, r3
 800133e:	43d9      	mvns	r1, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001344:	4313      	orrs	r3, r2
         );
}
 8001346:	4618      	mov	r0, r3
 8001348:	3724      	adds	r7, #36	; 0x24
 800134a:	46bd      	mov	sp, r7
 800134c:	bc80      	pop	{r7}
 800134e:	4770      	bx	lr

08001350 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	3b01      	subs	r3, #1
 800135c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001360:	d301      	bcc.n	8001366 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001362:	2301      	movs	r3, #1
 8001364:	e00f      	b.n	8001386 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001366:	4a0a      	ldr	r2, [pc, #40]	; (8001390 <SysTick_Config+0x40>)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	3b01      	subs	r3, #1
 800136c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800136e:	210f      	movs	r1, #15
 8001370:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001374:	f7ff ff90 	bl	8001298 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001378:	4b05      	ldr	r3, [pc, #20]	; (8001390 <SysTick_Config+0x40>)
 800137a:	2200      	movs	r2, #0
 800137c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800137e:	4b04      	ldr	r3, [pc, #16]	; (8001390 <SysTick_Config+0x40>)
 8001380:	2207      	movs	r2, #7
 8001382:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001384:	2300      	movs	r3, #0
}
 8001386:	4618      	mov	r0, r3
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	e000e010 	.word	0xe000e010

08001394 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f7ff ff2d 	bl	80011fc <__NVIC_SetPriorityGrouping>
}
 80013a2:	bf00      	nop
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b086      	sub	sp, #24
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	4603      	mov	r3, r0
 80013b2:	60b9      	str	r1, [r7, #8]
 80013b4:	607a      	str	r2, [r7, #4]
 80013b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013b8:	2300      	movs	r3, #0
 80013ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013bc:	f7ff ff42 	bl	8001244 <__NVIC_GetPriorityGrouping>
 80013c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	68b9      	ldr	r1, [r7, #8]
 80013c6:	6978      	ldr	r0, [r7, #20]
 80013c8:	f7ff ff90 	bl	80012ec <NVIC_EncodePriority>
 80013cc:	4602      	mov	r2, r0
 80013ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013d2:	4611      	mov	r1, r2
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff ff5f 	bl	8001298 <__NVIC_SetPriority>
}
 80013da:	bf00      	nop
 80013dc:	3718      	adds	r7, #24
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b082      	sub	sp, #8
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	4603      	mov	r3, r0
 80013ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff ff35 	bl	8001260 <__NVIC_EnableIRQ>
}
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b082      	sub	sp, #8
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f7ff ffa2 	bl	8001350 <SysTick_Config>
 800140c:	4603      	mov	r3, r0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
	...

08001418 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001418:	b480      	push	{r7}
 800141a:	b08b      	sub	sp, #44	; 0x2c
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001422:	2300      	movs	r3, #0
 8001424:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001426:	2300      	movs	r3, #0
 8001428:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800142a:	e169      	b.n	8001700 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800142c:	2201      	movs	r2, #1
 800142e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	69fa      	ldr	r2, [r7, #28]
 800143c:	4013      	ands	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	429a      	cmp	r2, r3
 8001446:	f040 8158 	bne.w	80016fa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	4a9a      	ldr	r2, [pc, #616]	; (80016b8 <HAL_GPIO_Init+0x2a0>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d05e      	beq.n	8001512 <HAL_GPIO_Init+0xfa>
 8001454:	4a98      	ldr	r2, [pc, #608]	; (80016b8 <HAL_GPIO_Init+0x2a0>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d875      	bhi.n	8001546 <HAL_GPIO_Init+0x12e>
 800145a:	4a98      	ldr	r2, [pc, #608]	; (80016bc <HAL_GPIO_Init+0x2a4>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d058      	beq.n	8001512 <HAL_GPIO_Init+0xfa>
 8001460:	4a96      	ldr	r2, [pc, #600]	; (80016bc <HAL_GPIO_Init+0x2a4>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d86f      	bhi.n	8001546 <HAL_GPIO_Init+0x12e>
 8001466:	4a96      	ldr	r2, [pc, #600]	; (80016c0 <HAL_GPIO_Init+0x2a8>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d052      	beq.n	8001512 <HAL_GPIO_Init+0xfa>
 800146c:	4a94      	ldr	r2, [pc, #592]	; (80016c0 <HAL_GPIO_Init+0x2a8>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d869      	bhi.n	8001546 <HAL_GPIO_Init+0x12e>
 8001472:	4a94      	ldr	r2, [pc, #592]	; (80016c4 <HAL_GPIO_Init+0x2ac>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d04c      	beq.n	8001512 <HAL_GPIO_Init+0xfa>
 8001478:	4a92      	ldr	r2, [pc, #584]	; (80016c4 <HAL_GPIO_Init+0x2ac>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d863      	bhi.n	8001546 <HAL_GPIO_Init+0x12e>
 800147e:	4a92      	ldr	r2, [pc, #584]	; (80016c8 <HAL_GPIO_Init+0x2b0>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d046      	beq.n	8001512 <HAL_GPIO_Init+0xfa>
 8001484:	4a90      	ldr	r2, [pc, #576]	; (80016c8 <HAL_GPIO_Init+0x2b0>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d85d      	bhi.n	8001546 <HAL_GPIO_Init+0x12e>
 800148a:	2b12      	cmp	r3, #18
 800148c:	d82a      	bhi.n	80014e4 <HAL_GPIO_Init+0xcc>
 800148e:	2b12      	cmp	r3, #18
 8001490:	d859      	bhi.n	8001546 <HAL_GPIO_Init+0x12e>
 8001492:	a201      	add	r2, pc, #4	; (adr r2, 8001498 <HAL_GPIO_Init+0x80>)
 8001494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001498:	08001513 	.word	0x08001513
 800149c:	080014ed 	.word	0x080014ed
 80014a0:	080014ff 	.word	0x080014ff
 80014a4:	08001541 	.word	0x08001541
 80014a8:	08001547 	.word	0x08001547
 80014ac:	08001547 	.word	0x08001547
 80014b0:	08001547 	.word	0x08001547
 80014b4:	08001547 	.word	0x08001547
 80014b8:	08001547 	.word	0x08001547
 80014bc:	08001547 	.word	0x08001547
 80014c0:	08001547 	.word	0x08001547
 80014c4:	08001547 	.word	0x08001547
 80014c8:	08001547 	.word	0x08001547
 80014cc:	08001547 	.word	0x08001547
 80014d0:	08001547 	.word	0x08001547
 80014d4:	08001547 	.word	0x08001547
 80014d8:	08001547 	.word	0x08001547
 80014dc:	080014f5 	.word	0x080014f5
 80014e0:	08001509 	.word	0x08001509
 80014e4:	4a79      	ldr	r2, [pc, #484]	; (80016cc <HAL_GPIO_Init+0x2b4>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d013      	beq.n	8001512 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014ea:	e02c      	b.n	8001546 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	623b      	str	r3, [r7, #32]
          break;
 80014f2:	e029      	b.n	8001548 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	3304      	adds	r3, #4
 80014fa:	623b      	str	r3, [r7, #32]
          break;
 80014fc:	e024      	b.n	8001548 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	68db      	ldr	r3, [r3, #12]
 8001502:	3308      	adds	r3, #8
 8001504:	623b      	str	r3, [r7, #32]
          break;
 8001506:	e01f      	b.n	8001548 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	330c      	adds	r3, #12
 800150e:	623b      	str	r3, [r7, #32]
          break;
 8001510:	e01a      	b.n	8001548 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d102      	bne.n	8001520 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800151a:	2304      	movs	r3, #4
 800151c:	623b      	str	r3, [r7, #32]
          break;
 800151e:	e013      	b.n	8001548 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	2b01      	cmp	r3, #1
 8001526:	d105      	bne.n	8001534 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001528:	2308      	movs	r3, #8
 800152a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	69fa      	ldr	r2, [r7, #28]
 8001530:	611a      	str	r2, [r3, #16]
          break;
 8001532:	e009      	b.n	8001548 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001534:	2308      	movs	r3, #8
 8001536:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	69fa      	ldr	r2, [r7, #28]
 800153c:	615a      	str	r2, [r3, #20]
          break;
 800153e:	e003      	b.n	8001548 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001540:	2300      	movs	r3, #0
 8001542:	623b      	str	r3, [r7, #32]
          break;
 8001544:	e000      	b.n	8001548 <HAL_GPIO_Init+0x130>
          break;
 8001546:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	2bff      	cmp	r3, #255	; 0xff
 800154c:	d801      	bhi.n	8001552 <HAL_GPIO_Init+0x13a>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	e001      	b.n	8001556 <HAL_GPIO_Init+0x13e>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	3304      	adds	r3, #4
 8001556:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	2bff      	cmp	r3, #255	; 0xff
 800155c:	d802      	bhi.n	8001564 <HAL_GPIO_Init+0x14c>
 800155e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	e002      	b.n	800156a <HAL_GPIO_Init+0x152>
 8001564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001566:	3b08      	subs	r3, #8
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	210f      	movs	r1, #15
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	fa01 f303 	lsl.w	r3, r1, r3
 8001578:	43db      	mvns	r3, r3
 800157a:	401a      	ands	r2, r3
 800157c:	6a39      	ldr	r1, [r7, #32]
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	fa01 f303 	lsl.w	r3, r1, r3
 8001584:	431a      	orrs	r2, r3
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001592:	2b00      	cmp	r3, #0
 8001594:	f000 80b1 	beq.w	80016fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001598:	4b4d      	ldr	r3, [pc, #308]	; (80016d0 <HAL_GPIO_Init+0x2b8>)
 800159a:	699b      	ldr	r3, [r3, #24]
 800159c:	4a4c      	ldr	r2, [pc, #304]	; (80016d0 <HAL_GPIO_Init+0x2b8>)
 800159e:	f043 0301 	orr.w	r3, r3, #1
 80015a2:	6193      	str	r3, [r2, #24]
 80015a4:	4b4a      	ldr	r3, [pc, #296]	; (80016d0 <HAL_GPIO_Init+0x2b8>)
 80015a6:	699b      	ldr	r3, [r3, #24]
 80015a8:	f003 0301 	and.w	r3, r3, #1
 80015ac:	60bb      	str	r3, [r7, #8]
 80015ae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015b0:	4a48      	ldr	r2, [pc, #288]	; (80016d4 <HAL_GPIO_Init+0x2bc>)
 80015b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b4:	089b      	lsrs	r3, r3, #2
 80015b6:	3302      	adds	r3, #2
 80015b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015bc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c0:	f003 0303 	and.w	r3, r3, #3
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	220f      	movs	r2, #15
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	43db      	mvns	r3, r3
 80015ce:	68fa      	ldr	r2, [r7, #12]
 80015d0:	4013      	ands	r3, r2
 80015d2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	4a40      	ldr	r2, [pc, #256]	; (80016d8 <HAL_GPIO_Init+0x2c0>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d013      	beq.n	8001604 <HAL_GPIO_Init+0x1ec>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	4a3f      	ldr	r2, [pc, #252]	; (80016dc <HAL_GPIO_Init+0x2c4>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d00d      	beq.n	8001600 <HAL_GPIO_Init+0x1e8>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	4a3e      	ldr	r2, [pc, #248]	; (80016e0 <HAL_GPIO_Init+0x2c8>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d007      	beq.n	80015fc <HAL_GPIO_Init+0x1e4>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4a3d      	ldr	r2, [pc, #244]	; (80016e4 <HAL_GPIO_Init+0x2cc>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d101      	bne.n	80015f8 <HAL_GPIO_Init+0x1e0>
 80015f4:	2303      	movs	r3, #3
 80015f6:	e006      	b.n	8001606 <HAL_GPIO_Init+0x1ee>
 80015f8:	2304      	movs	r3, #4
 80015fa:	e004      	b.n	8001606 <HAL_GPIO_Init+0x1ee>
 80015fc:	2302      	movs	r3, #2
 80015fe:	e002      	b.n	8001606 <HAL_GPIO_Init+0x1ee>
 8001600:	2301      	movs	r3, #1
 8001602:	e000      	b.n	8001606 <HAL_GPIO_Init+0x1ee>
 8001604:	2300      	movs	r3, #0
 8001606:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001608:	f002 0203 	and.w	r2, r2, #3
 800160c:	0092      	lsls	r2, r2, #2
 800160e:	4093      	lsls	r3, r2
 8001610:	68fa      	ldr	r2, [r7, #12]
 8001612:	4313      	orrs	r3, r2
 8001614:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001616:	492f      	ldr	r1, [pc, #188]	; (80016d4 <HAL_GPIO_Init+0x2bc>)
 8001618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161a:	089b      	lsrs	r3, r3, #2
 800161c:	3302      	adds	r3, #2
 800161e:	68fa      	ldr	r2, [r7, #12]
 8001620:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800162c:	2b00      	cmp	r3, #0
 800162e:	d006      	beq.n	800163e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001630:	4b2d      	ldr	r3, [pc, #180]	; (80016e8 <HAL_GPIO_Init+0x2d0>)
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	492c      	ldr	r1, [pc, #176]	; (80016e8 <HAL_GPIO_Init+0x2d0>)
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	4313      	orrs	r3, r2
 800163a:	600b      	str	r3, [r1, #0]
 800163c:	e006      	b.n	800164c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800163e:	4b2a      	ldr	r3, [pc, #168]	; (80016e8 <HAL_GPIO_Init+0x2d0>)
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	43db      	mvns	r3, r3
 8001646:	4928      	ldr	r1, [pc, #160]	; (80016e8 <HAL_GPIO_Init+0x2d0>)
 8001648:	4013      	ands	r3, r2
 800164a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d006      	beq.n	8001666 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001658:	4b23      	ldr	r3, [pc, #140]	; (80016e8 <HAL_GPIO_Init+0x2d0>)
 800165a:	685a      	ldr	r2, [r3, #4]
 800165c:	4922      	ldr	r1, [pc, #136]	; (80016e8 <HAL_GPIO_Init+0x2d0>)
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	4313      	orrs	r3, r2
 8001662:	604b      	str	r3, [r1, #4]
 8001664:	e006      	b.n	8001674 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001666:	4b20      	ldr	r3, [pc, #128]	; (80016e8 <HAL_GPIO_Init+0x2d0>)
 8001668:	685a      	ldr	r2, [r3, #4]
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	43db      	mvns	r3, r3
 800166e:	491e      	ldr	r1, [pc, #120]	; (80016e8 <HAL_GPIO_Init+0x2d0>)
 8001670:	4013      	ands	r3, r2
 8001672:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d006      	beq.n	800168e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001680:	4b19      	ldr	r3, [pc, #100]	; (80016e8 <HAL_GPIO_Init+0x2d0>)
 8001682:	689a      	ldr	r2, [r3, #8]
 8001684:	4918      	ldr	r1, [pc, #96]	; (80016e8 <HAL_GPIO_Init+0x2d0>)
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	4313      	orrs	r3, r2
 800168a:	608b      	str	r3, [r1, #8]
 800168c:	e006      	b.n	800169c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800168e:	4b16      	ldr	r3, [pc, #88]	; (80016e8 <HAL_GPIO_Init+0x2d0>)
 8001690:	689a      	ldr	r2, [r3, #8]
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	43db      	mvns	r3, r3
 8001696:	4914      	ldr	r1, [pc, #80]	; (80016e8 <HAL_GPIO_Init+0x2d0>)
 8001698:	4013      	ands	r3, r2
 800169a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d021      	beq.n	80016ec <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016a8:	4b0f      	ldr	r3, [pc, #60]	; (80016e8 <HAL_GPIO_Init+0x2d0>)
 80016aa:	68da      	ldr	r2, [r3, #12]
 80016ac:	490e      	ldr	r1, [pc, #56]	; (80016e8 <HAL_GPIO_Init+0x2d0>)
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	60cb      	str	r3, [r1, #12]
 80016b4:	e021      	b.n	80016fa <HAL_GPIO_Init+0x2e2>
 80016b6:	bf00      	nop
 80016b8:	10320000 	.word	0x10320000
 80016bc:	10310000 	.word	0x10310000
 80016c0:	10220000 	.word	0x10220000
 80016c4:	10210000 	.word	0x10210000
 80016c8:	10120000 	.word	0x10120000
 80016cc:	10110000 	.word	0x10110000
 80016d0:	40021000 	.word	0x40021000
 80016d4:	40010000 	.word	0x40010000
 80016d8:	40010800 	.word	0x40010800
 80016dc:	40010c00 	.word	0x40010c00
 80016e0:	40011000 	.word	0x40011000
 80016e4:	40011400 	.word	0x40011400
 80016e8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016ec:	4b0b      	ldr	r3, [pc, #44]	; (800171c <HAL_GPIO_Init+0x304>)
 80016ee:	68da      	ldr	r2, [r3, #12]
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	43db      	mvns	r3, r3
 80016f4:	4909      	ldr	r1, [pc, #36]	; (800171c <HAL_GPIO_Init+0x304>)
 80016f6:	4013      	ands	r3, r2
 80016f8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80016fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fc:	3301      	adds	r3, #1
 80016fe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001706:	fa22 f303 	lsr.w	r3, r2, r3
 800170a:	2b00      	cmp	r3, #0
 800170c:	f47f ae8e 	bne.w	800142c <HAL_GPIO_Init+0x14>
  }
}
 8001710:	bf00      	nop
 8001712:	bf00      	nop
 8001714:	372c      	adds	r7, #44	; 0x2c
 8001716:	46bd      	mov	sp, r7
 8001718:	bc80      	pop	{r7}
 800171a:	4770      	bx	lr
 800171c:	40010400 	.word	0x40010400

08001720 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	460b      	mov	r3, r1
 800172a:	807b      	strh	r3, [r7, #2]
 800172c:	4613      	mov	r3, r2
 800172e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001730:	787b      	ldrb	r3, [r7, #1]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d003      	beq.n	800173e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001736:	887a      	ldrh	r2, [r7, #2]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800173c:	e003      	b.n	8001746 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800173e:	887b      	ldrh	r3, [r7, #2]
 8001740:	041a      	lsls	r2, r3, #16
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	611a      	str	r2, [r3, #16]
}
 8001746:	bf00      	nop
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	bc80      	pop	{r7}
 800174e:	4770      	bx	lr

08001750 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	460b      	mov	r3, r1
 800175a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001762:	887a      	ldrh	r2, [r7, #2]
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	4013      	ands	r3, r2
 8001768:	041a      	lsls	r2, r3, #16
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	43d9      	mvns	r1, r3
 800176e:	887b      	ldrh	r3, [r7, #2]
 8001770:	400b      	ands	r3, r1
 8001772:	431a      	orrs	r2, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	611a      	str	r2, [r3, #16]
}
 8001778:	bf00      	nop
 800177a:	3714      	adds	r7, #20
 800177c:	46bd      	mov	sp, r7
 800177e:	bc80      	pop	{r7}
 8001780:	4770      	bx	lr
	...

08001784 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800178e:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001790:	695a      	ldr	r2, [r3, #20]
 8001792:	88fb      	ldrh	r3, [r7, #6]
 8001794:	4013      	ands	r3, r2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d006      	beq.n	80017a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800179a:	4a05      	ldr	r2, [pc, #20]	; (80017b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800179c:	88fb      	ldrh	r3, [r7, #6]
 800179e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017a0:	88fb      	ldrh	r3, [r7, #6]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7fe fe80 	bl	80004a8 <HAL_GPIO_EXTI_Callback>
  }
}
 80017a8:	bf00      	nop
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	40010400 	.word	0x40010400

080017b4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80017b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017b6:	b08b      	sub	sp, #44	; 0x2c
 80017b8:	af06      	add	r7, sp, #24
 80017ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d101      	bne.n	80017c6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e0fd      	b.n	80019c2 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d106      	bne.n	80017e0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2200      	movs	r2, #0
 80017d6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f005 ffec 	bl	80077b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2203      	movs	r2, #3
 80017e4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f002 fa35 	bl	8003c5c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	603b      	str	r3, [r7, #0]
 80017f8:	687e      	ldr	r6, [r7, #4]
 80017fa:	466d      	mov	r5, sp
 80017fc:	f106 0410 	add.w	r4, r6, #16
 8001800:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001802:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001804:	6823      	ldr	r3, [r4, #0]
 8001806:	602b      	str	r3, [r5, #0]
 8001808:	1d33      	adds	r3, r6, #4
 800180a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800180c:	6838      	ldr	r0, [r7, #0]
 800180e:	f002 f9ff 	bl	8003c10 <USB_CoreInit>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d005      	beq.n	8001824 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2202      	movs	r2, #2
 800181c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e0ce      	b.n	80019c2 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2100      	movs	r1, #0
 800182a:	4618      	mov	r0, r3
 800182c:	f002 fa30 	bl	8003c90 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001830:	2300      	movs	r3, #0
 8001832:	73fb      	strb	r3, [r7, #15]
 8001834:	e04c      	b.n	80018d0 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001836:	7bfb      	ldrb	r3, [r7, #15]
 8001838:	6879      	ldr	r1, [r7, #4]
 800183a:	1c5a      	adds	r2, r3, #1
 800183c:	4613      	mov	r3, r2
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	4413      	add	r3, r2
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	440b      	add	r3, r1
 8001846:	3301      	adds	r3, #1
 8001848:	2201      	movs	r2, #1
 800184a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800184c:	7bfb      	ldrb	r3, [r7, #15]
 800184e:	6879      	ldr	r1, [r7, #4]
 8001850:	1c5a      	adds	r2, r3, #1
 8001852:	4613      	mov	r3, r2
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	4413      	add	r3, r2
 8001858:	00db      	lsls	r3, r3, #3
 800185a:	440b      	add	r3, r1
 800185c:	7bfa      	ldrb	r2, [r7, #15]
 800185e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001860:	7bfa      	ldrb	r2, [r7, #15]
 8001862:	7bfb      	ldrb	r3, [r7, #15]
 8001864:	b298      	uxth	r0, r3
 8001866:	6879      	ldr	r1, [r7, #4]
 8001868:	4613      	mov	r3, r2
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	4413      	add	r3, r2
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	440b      	add	r3, r1
 8001872:	3336      	adds	r3, #54	; 0x36
 8001874:	4602      	mov	r2, r0
 8001876:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001878:	7bfb      	ldrb	r3, [r7, #15]
 800187a:	6879      	ldr	r1, [r7, #4]
 800187c:	1c5a      	adds	r2, r3, #1
 800187e:	4613      	mov	r3, r2
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	4413      	add	r3, r2
 8001884:	00db      	lsls	r3, r3, #3
 8001886:	440b      	add	r3, r1
 8001888:	3303      	adds	r3, #3
 800188a:	2200      	movs	r2, #0
 800188c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800188e:	7bfa      	ldrb	r2, [r7, #15]
 8001890:	6879      	ldr	r1, [r7, #4]
 8001892:	4613      	mov	r3, r2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	4413      	add	r3, r2
 8001898:	00db      	lsls	r3, r3, #3
 800189a:	440b      	add	r3, r1
 800189c:	3338      	adds	r3, #56	; 0x38
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80018a2:	7bfa      	ldrb	r2, [r7, #15]
 80018a4:	6879      	ldr	r1, [r7, #4]
 80018a6:	4613      	mov	r3, r2
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	4413      	add	r3, r2
 80018ac:	00db      	lsls	r3, r3, #3
 80018ae:	440b      	add	r3, r1
 80018b0:	333c      	adds	r3, #60	; 0x3c
 80018b2:	2200      	movs	r2, #0
 80018b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80018b6:	7bfa      	ldrb	r2, [r7, #15]
 80018b8:	6879      	ldr	r1, [r7, #4]
 80018ba:	4613      	mov	r3, r2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	4413      	add	r3, r2
 80018c0:	00db      	lsls	r3, r3, #3
 80018c2:	440b      	add	r3, r1
 80018c4:	3340      	adds	r3, #64	; 0x40
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018ca:	7bfb      	ldrb	r3, [r7, #15]
 80018cc:	3301      	adds	r3, #1
 80018ce:	73fb      	strb	r3, [r7, #15]
 80018d0:	7bfa      	ldrb	r2, [r7, #15]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d3ad      	bcc.n	8001836 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018da:	2300      	movs	r3, #0
 80018dc:	73fb      	strb	r3, [r7, #15]
 80018de:	e044      	b.n	800196a <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80018e0:	7bfa      	ldrb	r2, [r7, #15]
 80018e2:	6879      	ldr	r1, [r7, #4]
 80018e4:	4613      	mov	r3, r2
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	4413      	add	r3, r2
 80018ea:	00db      	lsls	r3, r3, #3
 80018ec:	440b      	add	r3, r1
 80018ee:	f203 1369 	addw	r3, r3, #361	; 0x169
 80018f2:	2200      	movs	r2, #0
 80018f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80018f6:	7bfa      	ldrb	r2, [r7, #15]
 80018f8:	6879      	ldr	r1, [r7, #4]
 80018fa:	4613      	mov	r3, r2
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	4413      	add	r3, r2
 8001900:	00db      	lsls	r3, r3, #3
 8001902:	440b      	add	r3, r1
 8001904:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001908:	7bfa      	ldrb	r2, [r7, #15]
 800190a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800190c:	7bfa      	ldrb	r2, [r7, #15]
 800190e:	6879      	ldr	r1, [r7, #4]
 8001910:	4613      	mov	r3, r2
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	4413      	add	r3, r2
 8001916:	00db      	lsls	r3, r3, #3
 8001918:	440b      	add	r3, r1
 800191a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800191e:	2200      	movs	r2, #0
 8001920:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001922:	7bfa      	ldrb	r2, [r7, #15]
 8001924:	6879      	ldr	r1, [r7, #4]
 8001926:	4613      	mov	r3, r2
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	4413      	add	r3, r2
 800192c:	00db      	lsls	r3, r3, #3
 800192e:	440b      	add	r3, r1
 8001930:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001938:	7bfa      	ldrb	r2, [r7, #15]
 800193a:	6879      	ldr	r1, [r7, #4]
 800193c:	4613      	mov	r3, r2
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	4413      	add	r3, r2
 8001942:	00db      	lsls	r3, r3, #3
 8001944:	440b      	add	r3, r1
 8001946:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800194a:	2200      	movs	r2, #0
 800194c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800194e:	7bfa      	ldrb	r2, [r7, #15]
 8001950:	6879      	ldr	r1, [r7, #4]
 8001952:	4613      	mov	r3, r2
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	4413      	add	r3, r2
 8001958:	00db      	lsls	r3, r3, #3
 800195a:	440b      	add	r3, r1
 800195c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001964:	7bfb      	ldrb	r3, [r7, #15]
 8001966:	3301      	adds	r3, #1
 8001968:	73fb      	strb	r3, [r7, #15]
 800196a:	7bfa      	ldrb	r2, [r7, #15]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	429a      	cmp	r2, r3
 8001972:	d3b5      	bcc.n	80018e0 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	603b      	str	r3, [r7, #0]
 800197a:	687e      	ldr	r6, [r7, #4]
 800197c:	466d      	mov	r5, sp
 800197e:	f106 0410 	add.w	r4, r6, #16
 8001982:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001984:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001986:	6823      	ldr	r3, [r4, #0]
 8001988:	602b      	str	r3, [r5, #0]
 800198a:	1d33      	adds	r3, r6, #4
 800198c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800198e:	6838      	ldr	r0, [r7, #0]
 8001990:	f002 f98a 	bl	8003ca8 <USB_DevInit>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d005      	beq.n	80019a6 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2202      	movs	r2, #2
 800199e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e00d      	b.n	80019c2 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2200      	movs	r2, #0
 80019aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2201      	movs	r2, #1
 80019b2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f004 fafb 	bl	8005fb6 <USB_DevDisconnect>

  return HAL_OK;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3714      	adds	r7, #20
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080019ca <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b082      	sub	sp, #8
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d101      	bne.n	80019e0 <HAL_PCD_Start+0x16>
 80019dc:	2302      	movs	r3, #2
 80019de:	e016      	b.n	8001a0e <HAL_PCD_Start+0x44>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2201      	movs	r2, #1
 80019e4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f002 f91f 	bl	8003c30 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80019f2:	2101      	movs	r1, #1
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f006 f92e 	bl	8007c56 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f004 facf 	bl	8005fa2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b088      	sub	sp, #32
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4618      	mov	r0, r3
 8001a24:	f004 fad1 	bl	8005fca <USB_ReadInterrupts>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a32:	d102      	bne.n	8001a3a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f000 fb4a 	bl	80020ce <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f004 fac3 	bl	8005fca <USB_ReadInterrupts>
 8001a44:	4603      	mov	r3, r0
 8001a46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a4e:	d112      	bne.n	8001a76 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a58:	b29a      	uxth	r2, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a62:	b292      	uxth	r2, r2
 8001a64:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f005 ff20 	bl	80078ae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001a6e:	2100      	movs	r1, #0
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f000 f925 	bl	8001cc0 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f004 faa5 	bl	8005fca <USB_ReadInterrupts>
 8001a80:	4603      	mov	r3, r0
 8001a82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001a8a:	d10b      	bne.n	8001aa4 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a94:	b29a      	uxth	r2, r3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001a9e:	b292      	uxth	r2, r2
 8001aa0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f004 fa8e 	bl	8005fca <USB_ReadInterrupts>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ab4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ab8:	d10b      	bne.n	8001ad2 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001acc:	b292      	uxth	r2, r2
 8001ace:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f004 fa77 	bl	8005fca <USB_ReadInterrupts>
 8001adc:	4603      	mov	r3, r0
 8001ade:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ae2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ae6:	d126      	bne.n	8001b36 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001af0:	b29a      	uxth	r2, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f022 0204 	bic.w	r2, r2, #4
 8001afa:	b292      	uxth	r2, r2
 8001afc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b08:	b29a      	uxth	r2, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f022 0208 	bic.w	r2, r2, #8
 8001b12:	b292      	uxth	r2, r2
 8001b14:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f005 ff01 	bl	8007920 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b26:	b29a      	uxth	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001b30:	b292      	uxth	r2, r2
 8001b32:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f004 fa45 	bl	8005fca <USB_ReadInterrupts>
 8001b40:	4603      	mov	r3, r0
 8001b42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b4a:	f040 8084 	bne.w	8001c56 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001b4e:	2300      	movs	r3, #0
 8001b50:	77fb      	strb	r3, [r7, #31]
 8001b52:	e011      	b.n	8001b78 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	461a      	mov	r2, r3
 8001b5a:	7ffb      	ldrb	r3, [r7, #31]
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	441a      	add	r2, r3
 8001b60:	7ffb      	ldrb	r3, [r7, #31]
 8001b62:	8812      	ldrh	r2, [r2, #0]
 8001b64:	b292      	uxth	r2, r2
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	f107 0120 	add.w	r1, r7, #32
 8001b6c:	440b      	add	r3, r1
 8001b6e:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001b72:	7ffb      	ldrb	r3, [r7, #31]
 8001b74:	3301      	adds	r3, #1
 8001b76:	77fb      	strb	r3, [r7, #31]
 8001b78:	7ffb      	ldrb	r3, [r7, #31]
 8001b7a:	2b07      	cmp	r3, #7
 8001b7c:	d9ea      	bls.n	8001b54 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b86:	b29a      	uxth	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f042 0201 	orr.w	r2, r2, #1
 8001b90:	b292      	uxth	r2, r2
 8001b92:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b9e:	b29a      	uxth	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f022 0201 	bic.w	r2, r2, #1
 8001ba8:	b292      	uxth	r2, r2
 8001baa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001bae:	bf00      	nop
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d0f6      	beq.n	8001bb0 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bca:	b29a      	uxth	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bd4:	b292      	uxth	r2, r2
 8001bd6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001bda:	2300      	movs	r3, #0
 8001bdc:	77fb      	strb	r3, [r7, #31]
 8001bde:	e010      	b.n	8001c02 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001be0:	7ffb      	ldrb	r3, [r7, #31]
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	6812      	ldr	r2, [r2, #0]
 8001be6:	4611      	mov	r1, r2
 8001be8:	7ffa      	ldrb	r2, [r7, #31]
 8001bea:	0092      	lsls	r2, r2, #2
 8001bec:	440a      	add	r2, r1
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	f107 0120 	add.w	r1, r7, #32
 8001bf4:	440b      	add	r3, r1
 8001bf6:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001bfa:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001bfc:	7ffb      	ldrb	r3, [r7, #31]
 8001bfe:	3301      	adds	r3, #1
 8001c00:	77fb      	strb	r3, [r7, #31]
 8001c02:	7ffb      	ldrb	r3, [r7, #31]
 8001c04:	2b07      	cmp	r3, #7
 8001c06:	d9eb      	bls.n	8001be0 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c10:	b29a      	uxth	r2, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f042 0208 	orr.w	r2, r2, #8
 8001c1a:	b292      	uxth	r2, r2
 8001c1c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c28:	b29a      	uxth	r2, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c32:	b292      	uxth	r2, r2
 8001c34:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c40:	b29a      	uxth	r2, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f042 0204 	orr.w	r2, r2, #4
 8001c4a:	b292      	uxth	r2, r2
 8001c4c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f005 fe4b 	bl	80078ec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f004 f9b5 	bl	8005fca <USB_ReadInterrupts>
 8001c60:	4603      	mov	r3, r0
 8001c62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c6a:	d10e      	bne.n	8001c8a <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c74:	b29a      	uxth	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001c7e:	b292      	uxth	r2, r2
 8001c80:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f005 fe04 	bl	8007892 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f004 f99b 	bl	8005fca <USB_ReadInterrupts>
 8001c94:	4603      	mov	r3, r0
 8001c96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c9e:	d10b      	bne.n	8001cb8 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ca8:	b29a      	uxth	r2, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001cb2:	b292      	uxth	r2, r2
 8001cb4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001cb8:	bf00      	nop
 8001cba:	3720      	adds	r7, #32
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	460b      	mov	r3, r1
 8001cca:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d101      	bne.n	8001cda <HAL_PCD_SetAddress+0x1a>
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	e013      	b.n	8001d02 <HAL_PCD_SetAddress+0x42>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2201      	movs	r2, #1
 8001cde:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	78fa      	ldrb	r2, [r7, #3]
 8001ce6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	78fa      	ldrb	r2, [r7, #3]
 8001cf0:	4611      	mov	r1, r2
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f004 f942 	bl	8005f7c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b084      	sub	sp, #16
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
 8001d12:	4608      	mov	r0, r1
 8001d14:	4611      	mov	r1, r2
 8001d16:	461a      	mov	r2, r3
 8001d18:	4603      	mov	r3, r0
 8001d1a:	70fb      	strb	r3, [r7, #3]
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	803b      	strh	r3, [r7, #0]
 8001d20:	4613      	mov	r3, r2
 8001d22:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001d24:	2300      	movs	r3, #0
 8001d26:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	da0e      	bge.n	8001d4e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d30:	78fb      	ldrb	r3, [r7, #3]
 8001d32:	f003 0307 	and.w	r3, r3, #7
 8001d36:	1c5a      	adds	r2, r3, #1
 8001d38:	4613      	mov	r3, r2
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	4413      	add	r3, r2
 8001d3e:	00db      	lsls	r3, r3, #3
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	4413      	add	r3, r2
 8001d44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2201      	movs	r2, #1
 8001d4a:	705a      	strb	r2, [r3, #1]
 8001d4c:	e00e      	b.n	8001d6c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d4e:	78fb      	ldrb	r3, [r7, #3]
 8001d50:	f003 0207 	and.w	r2, r3, #7
 8001d54:	4613      	mov	r3, r2
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	4413      	add	r3, r2
 8001d5a:	00db      	lsls	r3, r3, #3
 8001d5c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	4413      	add	r3, r2
 8001d64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001d6c:	78fb      	ldrb	r3, [r7, #3]
 8001d6e:	f003 0307 	and.w	r3, r3, #7
 8001d72:	b2da      	uxtb	r2, r3
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001d78:	883a      	ldrh	r2, [r7, #0]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	78ba      	ldrb	r2, [r7, #2]
 8001d82:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	785b      	ldrb	r3, [r3, #1]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d004      	beq.n	8001d96 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	b29a      	uxth	r2, r3
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001d96:	78bb      	ldrb	r3, [r7, #2]
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d102      	bne.n	8001da2 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d101      	bne.n	8001db0 <HAL_PCD_EP_Open+0xa6>
 8001dac:	2302      	movs	r3, #2
 8001dae:	e00e      	b.n	8001dce <HAL_PCD_EP_Open+0xc4>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	68f9      	ldr	r1, [r7, #12]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f001 ff92 	bl	8003ce8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001dcc:	7afb      	ldrb	r3, [r7, #11]
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3710      	adds	r7, #16
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b084      	sub	sp, #16
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
 8001dde:	460b      	mov	r3, r1
 8001de0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001de2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	da0e      	bge.n	8001e08 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dea:	78fb      	ldrb	r3, [r7, #3]
 8001dec:	f003 0307 	and.w	r3, r3, #7
 8001df0:	1c5a      	adds	r2, r3, #1
 8001df2:	4613      	mov	r3, r2
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	4413      	add	r3, r2
 8001df8:	00db      	lsls	r3, r3, #3
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2201      	movs	r2, #1
 8001e04:	705a      	strb	r2, [r3, #1]
 8001e06:	e00e      	b.n	8001e26 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e08:	78fb      	ldrb	r3, [r7, #3]
 8001e0a:	f003 0207 	and.w	r2, r3, #7
 8001e0e:	4613      	mov	r3, r2
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	4413      	add	r3, r2
 8001e14:	00db      	lsls	r3, r3, #3
 8001e16:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2200      	movs	r2, #0
 8001e24:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001e26:	78fb      	ldrb	r3, [r7, #3]
 8001e28:	f003 0307 	and.w	r3, r3, #7
 8001e2c:	b2da      	uxtb	r2, r3
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d101      	bne.n	8001e40 <HAL_PCD_EP_Close+0x6a>
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	e00e      	b.n	8001e5e <HAL_PCD_EP_Close+0x88>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	68f9      	ldr	r1, [r7, #12]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f002 fab4 	bl	80043bc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3710      	adds	r7, #16
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b086      	sub	sp, #24
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	60f8      	str	r0, [r7, #12]
 8001e6e:	607a      	str	r2, [r7, #4]
 8001e70:	603b      	str	r3, [r7, #0]
 8001e72:	460b      	mov	r3, r1
 8001e74:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e76:	7afb      	ldrb	r3, [r7, #11]
 8001e78:	f003 0207 	and.w	r2, r3, #7
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	4413      	add	r3, r2
 8001e82:	00db      	lsls	r3, r3, #3
 8001e84:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e88:	68fa      	ldr	r2, [r7, #12]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	683a      	ldr	r2, [r7, #0]
 8001e98:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ea6:	7afb      	ldrb	r3, [r7, #11]
 8001ea8:	f003 0307 	and.w	r3, r3, #7
 8001eac:	b2da      	uxtb	r2, r3
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001eb2:	7afb      	ldrb	r3, [r7, #11]
 8001eb4:	f003 0307 	and.w	r3, r3, #7
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d106      	bne.n	8001eca <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	6979      	ldr	r1, [r7, #20]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f002 fc66 	bl	8004794 <USB_EPStartXfer>
 8001ec8:	e005      	b.n	8001ed6 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	6979      	ldr	r1, [r7, #20]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f002 fc5f 	bl	8004794 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3718      	adds	r7, #24
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b086      	sub	sp, #24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	607a      	str	r2, [r7, #4]
 8001eea:	603b      	str	r3, [r7, #0]
 8001eec:	460b      	mov	r3, r1
 8001eee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ef0:	7afb      	ldrb	r3, [r7, #11]
 8001ef2:	f003 0307 	and.w	r3, r3, #7
 8001ef6:	1c5a      	adds	r2, r3, #1
 8001ef8:	4613      	mov	r3, r2
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	4413      	add	r3, r2
 8001efe:	00db      	lsls	r3, r3, #3
 8001f00:	68fa      	ldr	r2, [r7, #12]
 8001f02:	4413      	add	r3, r2
 8001f04:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	683a      	ldr	r2, [r7, #0]
 8001f10:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	2201      	movs	r2, #1
 8001f16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	683a      	ldr	r2, [r7, #0]
 8001f1e:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	2200      	movs	r2, #0
 8001f24:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f2c:	7afb      	ldrb	r3, [r7, #11]
 8001f2e:	f003 0307 	and.w	r3, r3, #7
 8001f32:	b2da      	uxtb	r2, r3
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f38:	7afb      	ldrb	r3, [r7, #11]
 8001f3a:	f003 0307 	and.w	r3, r3, #7
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d106      	bne.n	8001f50 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	6979      	ldr	r1, [r7, #20]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f002 fc23 	bl	8004794 <USB_EPStartXfer>
 8001f4e:	e005      	b.n	8001f5c <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	6979      	ldr	r1, [r7, #20]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f002 fc1c 	bl	8004794 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3718      	adds	r7, #24
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b084      	sub	sp, #16
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
 8001f6e:	460b      	mov	r3, r1
 8001f70:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001f72:	78fb      	ldrb	r3, [r7, #3]
 8001f74:	f003 0207 	and.w	r2, r3, #7
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d901      	bls.n	8001f84 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e04c      	b.n	800201e <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	da0e      	bge.n	8001faa <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f8c:	78fb      	ldrb	r3, [r7, #3]
 8001f8e:	f003 0307 	and.w	r3, r3, #7
 8001f92:	1c5a      	adds	r2, r3, #1
 8001f94:	4613      	mov	r3, r2
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	4413      	add	r3, r2
 8001f9a:	00db      	lsls	r3, r3, #3
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	705a      	strb	r2, [r3, #1]
 8001fa8:	e00c      	b.n	8001fc4 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001faa:	78fa      	ldrb	r2, [r7, #3]
 8001fac:	4613      	mov	r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	4413      	add	r3, r2
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	4413      	add	r3, r2
 8001fbc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fca:	78fb      	ldrb	r3, [r7, #3]
 8001fcc:	f003 0307 	and.w	r3, r3, #7
 8001fd0:	b2da      	uxtb	r2, r3
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d101      	bne.n	8001fe4 <HAL_PCD_EP_SetStall+0x7e>
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	e01c      	b.n	800201e <HAL_PCD_EP_SetStall+0xb8>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	68f9      	ldr	r1, [r7, #12]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f003 fec5 	bl	8005d82 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ff8:	78fb      	ldrb	r3, [r7, #3]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d108      	bne.n	8002014 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800200c:	4619      	mov	r1, r3
 800200e:	4610      	mov	r0, r2
 8002010:	f003 ffea 	bl	8005fe8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3710      	adds	r7, #16
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b084      	sub	sp, #16
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
 800202e:	460b      	mov	r3, r1
 8002030:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002032:	78fb      	ldrb	r3, [r7, #3]
 8002034:	f003 020f 	and.w	r2, r3, #15
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	429a      	cmp	r2, r3
 800203e:	d901      	bls.n	8002044 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e040      	b.n	80020c6 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002044:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002048:	2b00      	cmp	r3, #0
 800204a:	da0e      	bge.n	800206a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800204c:	78fb      	ldrb	r3, [r7, #3]
 800204e:	f003 0307 	and.w	r3, r3, #7
 8002052:	1c5a      	adds	r2, r3, #1
 8002054:	4613      	mov	r3, r2
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	4413      	add	r3, r2
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	4413      	add	r3, r2
 8002060:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2201      	movs	r2, #1
 8002066:	705a      	strb	r2, [r3, #1]
 8002068:	e00e      	b.n	8002088 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800206a:	78fb      	ldrb	r3, [r7, #3]
 800206c:	f003 0207 	and.w	r2, r3, #7
 8002070:	4613      	mov	r3, r2
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	4413      	add	r3, r2
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	4413      	add	r3, r2
 8002080:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2200      	movs	r2, #0
 8002086:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2200      	movs	r2, #0
 800208c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800208e:	78fb      	ldrb	r3, [r7, #3]
 8002090:	f003 0307 	and.w	r3, r3, #7
 8002094:	b2da      	uxtb	r2, r3
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d101      	bne.n	80020a8 <HAL_PCD_EP_ClrStall+0x82>
 80020a4:	2302      	movs	r3, #2
 80020a6:	e00e      	b.n	80020c6 <HAL_PCD_EP_ClrStall+0xa0>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	68f9      	ldr	r1, [r7, #12]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f003 feb3 	bl	8005e22 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3710      	adds	r7, #16
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b08e      	sub	sp, #56	; 0x38
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80020d6:	e2ec      	b.n	80026b2 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020e0:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80020e2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	f003 030f 	and.w	r3, r3, #15
 80020ea:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80020ee:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	f040 8161 	bne.w	80023ba <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80020f8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80020fa:	f003 0310 	and.w	r3, r3, #16
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d152      	bne.n	80021a8 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	881b      	ldrh	r3, [r3, #0]
 8002108:	b29b      	uxth	r3, r3
 800210a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800210e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002112:	81fb      	strh	r3, [r7, #14]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	89fb      	ldrh	r3, [r7, #14]
 800211a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800211e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002122:	b29b      	uxth	r3, r3
 8002124:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	3328      	adds	r3, #40	; 0x28
 800212a:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002134:	b29b      	uxth	r3, r3
 8002136:	461a      	mov	r2, r3
 8002138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	00db      	lsls	r3, r3, #3
 800213e:	4413      	add	r3, r2
 8002140:	3302      	adds	r3, #2
 8002142:	005b      	lsls	r3, r3, #1
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	6812      	ldr	r2, [r2, #0]
 8002148:	4413      	add	r3, r2
 800214a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800214e:	881b      	ldrh	r3, [r3, #0]
 8002150:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002156:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215a:	695a      	ldr	r2, [r3, #20]
 800215c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215e:	69db      	ldr	r3, [r3, #28]
 8002160:	441a      	add	r2, r3
 8002162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002164:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002166:	2100      	movs	r1, #0
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f005 fb78 	bl	800785e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2b00      	cmp	r3, #0
 8002178:	f000 829b 	beq.w	80026b2 <PCD_EP_ISR_Handler+0x5e4>
 800217c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	2b00      	cmp	r3, #0
 8002182:	f040 8296 	bne.w	80026b2 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800218c:	b2db      	uxtb	r3, r3
 800218e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002192:	b2da      	uxtb	r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	b292      	uxth	r2, r2
 800219a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80021a6:	e284      	b.n	80026b2 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021ae:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	881b      	ldrh	r3, [r3, #0]
 80021b6:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80021b8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80021ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d034      	beq.n	800222c <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	461a      	mov	r2, r3
 80021ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	00db      	lsls	r3, r3, #3
 80021d4:	4413      	add	r3, r2
 80021d6:	3306      	adds	r3, #6
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	6812      	ldr	r2, [r2, #0]
 80021de:	4413      	add	r3, r2
 80021e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021e4:	881b      	ldrh	r3, [r3, #0]
 80021e6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80021ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ec:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6818      	ldr	r0, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80021f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fa:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80021fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fe:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002200:	b29b      	uxth	r3, r3
 8002202:	f003 ff41 	bl	8006088 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	881b      	ldrh	r3, [r3, #0]
 800220c:	b29a      	uxth	r2, r3
 800220e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002212:	4013      	ands	r3, r2
 8002214:	823b      	strh	r3, [r7, #16]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	8a3a      	ldrh	r2, [r7, #16]
 800221c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002220:	b292      	uxth	r2, r2
 8002222:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f005 faed 	bl	8007804 <HAL_PCD_SetupStageCallback>
 800222a:	e242      	b.n	80026b2 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800222c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002230:	2b00      	cmp	r3, #0
 8002232:	f280 823e 	bge.w	80026b2 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	881b      	ldrh	r3, [r3, #0]
 800223c:	b29a      	uxth	r2, r3
 800223e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002242:	4013      	ands	r3, r2
 8002244:	83bb      	strh	r3, [r7, #28]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	8bba      	ldrh	r2, [r7, #28]
 800224c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002250:	b292      	uxth	r2, r2
 8002252:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800225c:	b29b      	uxth	r3, r3
 800225e:	461a      	mov	r2, r3
 8002260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	00db      	lsls	r3, r3, #3
 8002266:	4413      	add	r3, r2
 8002268:	3306      	adds	r3, #6
 800226a:	005b      	lsls	r3, r3, #1
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	6812      	ldr	r2, [r2, #0]
 8002270:	4413      	add	r3, r2
 8002272:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002276:	881b      	ldrh	r3, [r3, #0]
 8002278:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800227c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002282:	69db      	ldr	r3, [r3, #28]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d019      	beq.n	80022bc <PCD_EP_ISR_Handler+0x1ee>
 8002288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228a:	695b      	ldr	r3, [r3, #20]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d015      	beq.n	80022bc <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6818      	ldr	r0, [r3, #0]
 8002294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002296:	6959      	ldr	r1, [r3, #20]
 8002298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800229c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	f003 fef1 	bl	8006088 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80022a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a8:	695a      	ldr	r2, [r3, #20]
 80022aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ac:	69db      	ldr	r3, [r3, #28]
 80022ae:	441a      	add	r2, r3
 80022b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80022b4:	2100      	movs	r1, #0
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f005 fab6 	bl	8007828 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	881b      	ldrh	r3, [r3, #0]
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	f040 81f2 	bne.w	80026b2 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	61bb      	str	r3, [r7, #24]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022dc:	b29b      	uxth	r3, r3
 80022de:	461a      	mov	r2, r3
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	4413      	add	r3, r2
 80022e4:	61bb      	str	r3, [r7, #24]
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80022ec:	617b      	str	r3, [r7, #20]
 80022ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d112      	bne.n	800231c <PCD_EP_ISR_Handler+0x24e>
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	881b      	ldrh	r3, [r3, #0]
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002300:	b29a      	uxth	r2, r3
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	801a      	strh	r2, [r3, #0]
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	881b      	ldrh	r3, [r3, #0]
 800230a:	b29b      	uxth	r3, r3
 800230c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002310:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002314:	b29a      	uxth	r2, r3
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	801a      	strh	r2, [r3, #0]
 800231a:	e02f      	b.n	800237c <PCD_EP_ISR_Handler+0x2ae>
 800231c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231e:	691b      	ldr	r3, [r3, #16]
 8002320:	2b3e      	cmp	r3, #62	; 0x3e
 8002322:	d813      	bhi.n	800234c <PCD_EP_ISR_Handler+0x27e>
 8002324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002326:	691b      	ldr	r3, [r3, #16]
 8002328:	085b      	lsrs	r3, r3, #1
 800232a:	633b      	str	r3, [r7, #48]	; 0x30
 800232c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232e:	691b      	ldr	r3, [r3, #16]
 8002330:	f003 0301 	and.w	r3, r3, #1
 8002334:	2b00      	cmp	r3, #0
 8002336:	d002      	beq.n	800233e <PCD_EP_ISR_Handler+0x270>
 8002338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800233a:	3301      	adds	r3, #1
 800233c:	633b      	str	r3, [r7, #48]	; 0x30
 800233e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002340:	b29b      	uxth	r3, r3
 8002342:	029b      	lsls	r3, r3, #10
 8002344:	b29a      	uxth	r2, r3
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	801a      	strh	r2, [r3, #0]
 800234a:	e017      	b.n	800237c <PCD_EP_ISR_Handler+0x2ae>
 800234c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234e:	691b      	ldr	r3, [r3, #16]
 8002350:	095b      	lsrs	r3, r3, #5
 8002352:	633b      	str	r3, [r7, #48]	; 0x30
 8002354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002356:	691b      	ldr	r3, [r3, #16]
 8002358:	f003 031f 	and.w	r3, r3, #31
 800235c:	2b00      	cmp	r3, #0
 800235e:	d102      	bne.n	8002366 <PCD_EP_ISR_Handler+0x298>
 8002360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002362:	3b01      	subs	r3, #1
 8002364:	633b      	str	r3, [r7, #48]	; 0x30
 8002366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002368:	b29b      	uxth	r3, r3
 800236a:	029b      	lsls	r3, r3, #10
 800236c:	b29b      	uxth	r3, r3
 800236e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002372:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002376:	b29a      	uxth	r2, r3
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	881b      	ldrh	r3, [r3, #0]
 8002382:	b29b      	uxth	r3, r3
 8002384:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002388:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800238c:	827b      	strh	r3, [r7, #18]
 800238e:	8a7b      	ldrh	r3, [r7, #18]
 8002390:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002394:	827b      	strh	r3, [r7, #18]
 8002396:	8a7b      	ldrh	r3, [r7, #18]
 8002398:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800239c:	827b      	strh	r3, [r7, #18]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	8a7b      	ldrh	r3, [r7, #18]
 80023a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	8013      	strh	r3, [r2, #0]
 80023b8:	e17b      	b.n	80026b2 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	461a      	mov	r2, r3
 80023c0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	4413      	add	r3, r2
 80023c8:	881b      	ldrh	r3, [r3, #0]
 80023ca:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80023cc:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	f280 80ea 	bge.w	80025aa <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	461a      	mov	r2, r3
 80023dc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	4413      	add	r3, r2
 80023e4:	881b      	ldrh	r3, [r3, #0]
 80023e6:	b29a      	uxth	r2, r3
 80023e8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80023ec:	4013      	ands	r3, r2
 80023ee:	853b      	strh	r3, [r7, #40]	; 0x28
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	461a      	mov	r2, r3
 80023f6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	4413      	add	r3, r2
 80023fe:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002400:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002404:	b292      	uxth	r2, r2
 8002406:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002408:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800240c:	4613      	mov	r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	4413      	add	r3, r2
 8002412:	00db      	lsls	r3, r3, #3
 8002414:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	4413      	add	r3, r2
 800241c:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800241e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002420:	7b1b      	ldrb	r3, [r3, #12]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d122      	bne.n	800246c <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800242e:	b29b      	uxth	r3, r3
 8002430:	461a      	mov	r2, r3
 8002432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	00db      	lsls	r3, r3, #3
 8002438:	4413      	add	r3, r2
 800243a:	3306      	adds	r3, #6
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	6812      	ldr	r2, [r2, #0]
 8002442:	4413      	add	r3, r2
 8002444:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002448:	881b      	ldrh	r3, [r3, #0]
 800244a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800244e:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002450:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002452:	2b00      	cmp	r3, #0
 8002454:	f000 8087 	beq.w	8002566 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6818      	ldr	r0, [r3, #0]
 800245c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245e:	6959      	ldr	r1, [r3, #20]
 8002460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002462:	88da      	ldrh	r2, [r3, #6]
 8002464:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002466:	f003 fe0f 	bl	8006088 <USB_ReadPMA>
 800246a:	e07c      	b.n	8002566 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800246c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246e:	78db      	ldrb	r3, [r3, #3]
 8002470:	2b02      	cmp	r3, #2
 8002472:	d108      	bne.n	8002486 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002474:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002476:	461a      	mov	r2, r3
 8002478:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f000 f927 	bl	80026ce <HAL_PCD_EP_DB_Receive>
 8002480:	4603      	mov	r3, r0
 8002482:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002484:	e06f      	b.n	8002566 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	461a      	mov	r2, r3
 800248c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	4413      	add	r3, r2
 8002494:	881b      	ldrh	r3, [r3, #0]
 8002496:	b29b      	uxth	r3, r3
 8002498:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800249c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024a0:	847b      	strh	r3, [r7, #34]	; 0x22
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	461a      	mov	r2, r3
 80024a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	441a      	add	r2, r3
 80024b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80024b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024be:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	461a      	mov	r2, r3
 80024cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	4413      	add	r3, r2
 80024d4:	881b      	ldrh	r3, [r3, #0]
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d021      	beq.n	8002524 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	461a      	mov	r2, r3
 80024ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	00db      	lsls	r3, r3, #3
 80024f2:	4413      	add	r3, r2
 80024f4:	3302      	adds	r3, #2
 80024f6:	005b      	lsls	r3, r3, #1
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	6812      	ldr	r2, [r2, #0]
 80024fc:	4413      	add	r3, r2
 80024fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002502:	881b      	ldrh	r3, [r3, #0]
 8002504:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002508:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800250a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800250c:	2b00      	cmp	r3, #0
 800250e:	d02a      	beq.n	8002566 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6818      	ldr	r0, [r3, #0]
 8002514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002516:	6959      	ldr	r1, [r3, #20]
 8002518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251a:	891a      	ldrh	r2, [r3, #8]
 800251c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800251e:	f003 fdb3 	bl	8006088 <USB_ReadPMA>
 8002522:	e020      	b.n	8002566 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800252c:	b29b      	uxth	r3, r3
 800252e:	461a      	mov	r2, r3
 8002530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	00db      	lsls	r3, r3, #3
 8002536:	4413      	add	r3, r2
 8002538:	3306      	adds	r3, #6
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	6812      	ldr	r2, [r2, #0]
 8002540:	4413      	add	r3, r2
 8002542:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002546:	881b      	ldrh	r3, [r3, #0]
 8002548:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800254c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800254e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002550:	2b00      	cmp	r3, #0
 8002552:	d008      	beq.n	8002566 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6818      	ldr	r0, [r3, #0]
 8002558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255a:	6959      	ldr	r1, [r3, #20]
 800255c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255e:	895a      	ldrh	r2, [r3, #10]
 8002560:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002562:	f003 fd91 	bl	8006088 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002568:	69da      	ldr	r2, [r3, #28]
 800256a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800256c:	441a      	add	r2, r3
 800256e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002570:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002574:	695a      	ldr	r2, [r3, #20]
 8002576:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002578:	441a      	add	r2, r3
 800257a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800257e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002580:	699b      	ldr	r3, [r3, #24]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d004      	beq.n	8002590 <PCD_EP_ISR_Handler+0x4c2>
 8002586:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258a:	691b      	ldr	r3, [r3, #16]
 800258c:	429a      	cmp	r2, r3
 800258e:	d206      	bcs.n	800259e <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	4619      	mov	r1, r3
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f005 f946 	bl	8007828 <HAL_PCD_DataOutStageCallback>
 800259c:	e005      	b.n	80025aa <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025a4:	4618      	mov	r0, r3
 80025a6:	f002 f8f5 	bl	8004794 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80025aa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80025ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d07e      	beq.n	80026b2 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80025b4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80025b8:	1c5a      	adds	r2, r3, #1
 80025ba:	4613      	mov	r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	4413      	add	r3, r2
 80025c0:	00db      	lsls	r3, r3, #3
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	4413      	add	r3, r2
 80025c6:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	461a      	mov	r2, r3
 80025ce:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	4413      	add	r3, r2
 80025d6:	881b      	ldrh	r3, [r3, #0]
 80025d8:	b29b      	uxth	r3, r3
 80025da:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80025de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025e2:	843b      	strh	r3, [r7, #32]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	461a      	mov	r2, r3
 80025ea:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	441a      	add	r2, r3
 80025f2:	8c3b      	ldrh	r3, [r7, #32]
 80025f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002602:	78db      	ldrb	r3, [r3, #3]
 8002604:	2b03      	cmp	r3, #3
 8002606:	d00c      	beq.n	8002622 <PCD_EP_ISR_Handler+0x554>
 8002608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260a:	78db      	ldrb	r3, [r3, #3]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d008      	beq.n	8002622 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002612:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002614:	2b02      	cmp	r3, #2
 8002616:	d146      	bne.n	80026a6 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002618:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800261a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261e:	2b00      	cmp	r3, #0
 8002620:	d141      	bne.n	80026a6 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800262a:	b29b      	uxth	r3, r3
 800262c:	461a      	mov	r2, r3
 800262e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	4413      	add	r3, r2
 8002636:	3302      	adds	r3, #2
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	6812      	ldr	r2, [r2, #0]
 800263e:	4413      	add	r3, r2
 8002640:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002644:	881b      	ldrh	r3, [r3, #0]
 8002646:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800264a:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800264c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264e:	699a      	ldr	r2, [r3, #24]
 8002650:	8bfb      	ldrh	r3, [r7, #30]
 8002652:	429a      	cmp	r2, r3
 8002654:	d906      	bls.n	8002664 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8002656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002658:	699a      	ldr	r2, [r3, #24]
 800265a:	8bfb      	ldrh	r3, [r7, #30]
 800265c:	1ad2      	subs	r2, r2, r3
 800265e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002660:	619a      	str	r2, [r3, #24]
 8002662:	e002      	b.n	800266a <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8002664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002666:	2200      	movs	r2, #0
 8002668:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800266a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d106      	bne.n	8002680 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	4619      	mov	r1, r3
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f005 f8f0 	bl	800785e <HAL_PCD_DataInStageCallback>
 800267e:	e018      	b.n	80026b2 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002682:	695a      	ldr	r2, [r3, #20]
 8002684:	8bfb      	ldrh	r3, [r7, #30]
 8002686:	441a      	add	r2, r3
 8002688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268a:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800268c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268e:	69da      	ldr	r2, [r3, #28]
 8002690:	8bfb      	ldrh	r3, [r7, #30]
 8002692:	441a      	add	r2, r3
 8002694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002696:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800269e:	4618      	mov	r0, r3
 80026a0:	f002 f878 	bl	8004794 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80026a4:	e005      	b.n	80026b2 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80026a6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80026a8:	461a      	mov	r2, r3
 80026aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f000 f91b 	bl	80028e8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	b21b      	sxth	r3, r3
 80026be:	2b00      	cmp	r3, #0
 80026c0:	f6ff ad0a 	blt.w	80020d8 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3738      	adds	r7, #56	; 0x38
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}

080026ce <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b088      	sub	sp, #32
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	60f8      	str	r0, [r7, #12]
 80026d6:	60b9      	str	r1, [r7, #8]
 80026d8:	4613      	mov	r3, r2
 80026da:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80026dc:	88fb      	ldrh	r3, [r7, #6]
 80026de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d07e      	beq.n	80027e4 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	461a      	mov	r2, r3
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	00db      	lsls	r3, r3, #3
 80026f8:	4413      	add	r3, r2
 80026fa:	3302      	adds	r3, #2
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	6812      	ldr	r2, [r2, #0]
 8002702:	4413      	add	r3, r2
 8002704:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002708:	881b      	ldrh	r3, [r3, #0]
 800270a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800270e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	699a      	ldr	r2, [r3, #24]
 8002714:	8b7b      	ldrh	r3, [r7, #26]
 8002716:	429a      	cmp	r2, r3
 8002718:	d306      	bcc.n	8002728 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	699a      	ldr	r2, [r3, #24]
 800271e:	8b7b      	ldrh	r3, [r7, #26]
 8002720:	1ad2      	subs	r2, r2, r3
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	619a      	str	r2, [r3, #24]
 8002726:	e002      	b.n	800272e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	2200      	movs	r2, #0
 800272c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	699b      	ldr	r3, [r3, #24]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d123      	bne.n	800277e <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	461a      	mov	r2, r3
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	4413      	add	r3, r2
 8002744:	881b      	ldrh	r3, [r3, #0]
 8002746:	b29b      	uxth	r3, r3
 8002748:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800274c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002750:	833b      	strh	r3, [r7, #24]
 8002752:	8b3b      	ldrh	r3, [r7, #24]
 8002754:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002758:	833b      	strh	r3, [r7, #24]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	461a      	mov	r2, r3
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	441a      	add	r2, r3
 8002768:	8b3b      	ldrh	r3, [r7, #24]
 800276a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800276e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002772:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002776:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800277a:	b29b      	uxth	r3, r3
 800277c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800277e:	88fb      	ldrh	r3, [r7, #6]
 8002780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002784:	2b00      	cmp	r3, #0
 8002786:	d01f      	beq.n	80027c8 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	461a      	mov	r2, r3
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	4413      	add	r3, r2
 8002796:	881b      	ldrh	r3, [r3, #0]
 8002798:	b29b      	uxth	r3, r3
 800279a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800279e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027a2:	82fb      	strh	r3, [r7, #22]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	461a      	mov	r2, r3
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	441a      	add	r2, r3
 80027b2:	8afb      	ldrh	r3, [r7, #22]
 80027b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027c0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80027c8:	8b7b      	ldrh	r3, [r7, #26]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	f000 8087 	beq.w	80028de <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6818      	ldr	r0, [r3, #0]
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	6959      	ldr	r1, [r3, #20]
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	891a      	ldrh	r2, [r3, #8]
 80027dc:	8b7b      	ldrh	r3, [r7, #26]
 80027de:	f003 fc53 	bl	8006088 <USB_ReadPMA>
 80027e2:	e07c      	b.n	80028de <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	461a      	mov	r2, r3
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	00db      	lsls	r3, r3, #3
 80027f6:	4413      	add	r3, r2
 80027f8:	3306      	adds	r3, #6
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	68fa      	ldr	r2, [r7, #12]
 80027fe:	6812      	ldr	r2, [r2, #0]
 8002800:	4413      	add	r3, r2
 8002802:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002806:	881b      	ldrh	r3, [r3, #0]
 8002808:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800280c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	699a      	ldr	r2, [r3, #24]
 8002812:	8b7b      	ldrh	r3, [r7, #26]
 8002814:	429a      	cmp	r2, r3
 8002816:	d306      	bcc.n	8002826 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	699a      	ldr	r2, [r3, #24]
 800281c:	8b7b      	ldrh	r3, [r7, #26]
 800281e:	1ad2      	subs	r2, r2, r3
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	619a      	str	r2, [r3, #24]
 8002824:	e002      	b.n	800282c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	2200      	movs	r2, #0
 800282a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	699b      	ldr	r3, [r3, #24]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d123      	bne.n	800287c <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	461a      	mov	r2, r3
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	4413      	add	r3, r2
 8002842:	881b      	ldrh	r3, [r3, #0]
 8002844:	b29b      	uxth	r3, r3
 8002846:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800284a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800284e:	83fb      	strh	r3, [r7, #30]
 8002850:	8bfb      	ldrh	r3, [r7, #30]
 8002852:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002856:	83fb      	strh	r3, [r7, #30]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	461a      	mov	r2, r3
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	441a      	add	r2, r3
 8002866:	8bfb      	ldrh	r3, [r7, #30]
 8002868:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800286c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002870:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002874:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002878:	b29b      	uxth	r3, r3
 800287a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800287c:	88fb      	ldrh	r3, [r7, #6]
 800287e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002882:	2b00      	cmp	r3, #0
 8002884:	d11f      	bne.n	80028c6 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	461a      	mov	r2, r3
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	4413      	add	r3, r2
 8002894:	881b      	ldrh	r3, [r3, #0]
 8002896:	b29b      	uxth	r3, r3
 8002898:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800289c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028a0:	83bb      	strh	r3, [r7, #28]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	461a      	mov	r2, r3
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	441a      	add	r2, r3
 80028b0:	8bbb      	ldrh	r3, [r7, #28]
 80028b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028be:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80028c6:	8b7b      	ldrh	r3, [r7, #26]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d008      	beq.n	80028de <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6818      	ldr	r0, [r3, #0]
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	6959      	ldr	r1, [r3, #20]
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	895a      	ldrh	r2, [r3, #10]
 80028d8:	8b7b      	ldrh	r3, [r7, #26]
 80028da:	f003 fbd5 	bl	8006088 <USB_ReadPMA>
    }
  }

  return count;
 80028de:	8b7b      	ldrh	r3, [r7, #26]
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3720      	adds	r7, #32
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b0a2      	sub	sp, #136	; 0x88
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	60b9      	str	r1, [r7, #8]
 80028f2:	4613      	mov	r3, r2
 80028f4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80028f6:	88fb      	ldrh	r3, [r7, #6]
 80028f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	f000 81c7 	beq.w	8002c90 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800290a:	b29b      	uxth	r3, r3
 800290c:	461a      	mov	r2, r3
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	00db      	lsls	r3, r3, #3
 8002914:	4413      	add	r3, r2
 8002916:	3302      	adds	r3, #2
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	68fa      	ldr	r2, [r7, #12]
 800291c:	6812      	ldr	r2, [r2, #0]
 800291e:	4413      	add	r3, r2
 8002920:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002924:	881b      	ldrh	r3, [r3, #0]
 8002926:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800292a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	699a      	ldr	r2, [r3, #24]
 8002932:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002936:	429a      	cmp	r2, r3
 8002938:	d907      	bls.n	800294a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	699a      	ldr	r2, [r3, #24]
 800293e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002942:	1ad2      	subs	r2, r2, r3
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	619a      	str	r2, [r3, #24]
 8002948:	e002      	b.n	8002950 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	2200      	movs	r2, #0
 800294e:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	699b      	ldr	r3, [r3, #24]
 8002954:	2b00      	cmp	r3, #0
 8002956:	f040 80b9 	bne.w	8002acc <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	785b      	ldrb	r3, [r3, #1]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d126      	bne.n	80029b0 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	62bb      	str	r3, [r7, #40]	; 0x28
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002970:	b29b      	uxth	r3, r3
 8002972:	461a      	mov	r2, r3
 8002974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002976:	4413      	add	r3, r2
 8002978:	62bb      	str	r3, [r7, #40]	; 0x28
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	011a      	lsls	r2, r3, #4
 8002980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002982:	4413      	add	r3, r2
 8002984:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002988:	627b      	str	r3, [r7, #36]	; 0x24
 800298a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298c:	881b      	ldrh	r3, [r3, #0]
 800298e:	b29b      	uxth	r3, r3
 8002990:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002994:	b29a      	uxth	r2, r3
 8002996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002998:	801a      	strh	r2, [r3, #0]
 800299a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299c:	881b      	ldrh	r3, [r3, #0]
 800299e:	b29b      	uxth	r3, r3
 80029a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029a8:	b29a      	uxth	r2, r3
 80029aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ac:	801a      	strh	r2, [r3, #0]
 80029ae:	e01a      	b.n	80029e6 <HAL_PCD_EP_DB_Transmit+0xfe>
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	785b      	ldrb	r3, [r3, #1]
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d116      	bne.n	80029e6 <HAL_PCD_EP_DB_Transmit+0xfe>
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	633b      	str	r3, [r7, #48]	; 0x30
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	461a      	mov	r2, r3
 80029ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029cc:	4413      	add	r3, r2
 80029ce:	633b      	str	r3, [r7, #48]	; 0x30
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	011a      	lsls	r2, r3, #4
 80029d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d8:	4413      	add	r3, r2
 80029da:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80029de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029e2:	2200      	movs	r2, #0
 80029e4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	623b      	str	r3, [r7, #32]
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	785b      	ldrb	r3, [r3, #1]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d126      	bne.n	8002a42 <HAL_PCD_EP_DB_Transmit+0x15a>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	61bb      	str	r3, [r7, #24]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	461a      	mov	r2, r3
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	4413      	add	r3, r2
 8002a0a:	61bb      	str	r3, [r7, #24]
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	011a      	lsls	r2, r3, #4
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	4413      	add	r3, r2
 8002a16:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002a1a:	617b      	str	r3, [r7, #20]
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	881b      	ldrh	r3, [r3, #0]
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002a26:	b29a      	uxth	r2, r3
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	801a      	strh	r2, [r3, #0]
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	881b      	ldrh	r3, [r3, #0]
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a3a:	b29a      	uxth	r2, r3
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	801a      	strh	r2, [r3, #0]
 8002a40:	e017      	b.n	8002a72 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	785b      	ldrb	r3, [r3, #1]
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d113      	bne.n	8002a72 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	461a      	mov	r2, r3
 8002a56:	6a3b      	ldr	r3, [r7, #32]
 8002a58:	4413      	add	r3, r2
 8002a5a:	623b      	str	r3, [r7, #32]
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	011a      	lsls	r2, r3, #4
 8002a62:	6a3b      	ldr	r3, [r7, #32]
 8002a64:	4413      	add	r3, r2
 8002a66:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002a6a:	61fb      	str	r3, [r7, #28]
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	4619      	mov	r1, r3
 8002a78:	68f8      	ldr	r0, [r7, #12]
 8002a7a:	f004 fef0 	bl	800785e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002a7e:	88fb      	ldrh	r3, [r7, #6]
 8002a80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	f000 82d4 	beq.w	8003032 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	461a      	mov	r2, r3
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	4413      	add	r3, r2
 8002a98:	881b      	ldrh	r3, [r3, #0]
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002aa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aa4:	827b      	strh	r3, [r7, #18]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	461a      	mov	r2, r3
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	441a      	add	r2, r3
 8002ab4:	8a7b      	ldrh	r3, [r7, #18]
 8002ab6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002aba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002abe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ac2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	8013      	strh	r3, [r2, #0]
 8002aca:	e2b2      	b.n	8003032 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002acc:	88fb      	ldrh	r3, [r7, #6]
 8002ace:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d021      	beq.n	8002b1a <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	461a      	mov	r2, r3
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	4413      	add	r3, r2
 8002ae4:	881b      	ldrh	r3, [r3, #0]
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002aec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002af0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	461a      	mov	r2, r3
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	441a      	add	r2, r3
 8002b02:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002b06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b0e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	f040 8286 	bne.w	8003032 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	695a      	ldr	r2, [r3, #20]
 8002b2a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b2e:	441a      	add	r2, r3
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	69da      	ldr	r2, [r3, #28]
 8002b38:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b3c:	441a      	add	r2, r3
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	6a1a      	ldr	r2, [r3, #32]
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d309      	bcc.n	8002b62 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	6a1a      	ldr	r2, [r3, #32]
 8002b58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b5a:	1ad2      	subs	r2, r2, r3
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	621a      	str	r2, [r3, #32]
 8002b60:	e015      	b.n	8002b8e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	6a1b      	ldr	r3, [r3, #32]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d107      	bne.n	8002b7a <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8002b6a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b6e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002b78:	e009      	b.n	8002b8e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	6a1b      	ldr	r3, [r3, #32]
 8002b86:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	785b      	ldrb	r3, [r3, #1]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d155      	bne.n	8002c42 <HAL_PCD_EP_DB_Transmit+0x35a>
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002baa:	4413      	add	r3, r2
 8002bac:	63bb      	str	r3, [r7, #56]	; 0x38
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	011a      	lsls	r2, r3, #4
 8002bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bb6:	4413      	add	r3, r2
 8002bb8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002bbc:	637b      	str	r3, [r7, #52]	; 0x34
 8002bbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d112      	bne.n	8002bea <HAL_PCD_EP_DB_Transmit+0x302>
 8002bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bc6:	881b      	ldrh	r3, [r3, #0]
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002bce:	b29a      	uxth	r2, r3
 8002bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bd2:	801a      	strh	r2, [r3, #0]
 8002bd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bd6:	881b      	ldrh	r3, [r3, #0]
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002be2:	b29a      	uxth	r2, r3
 8002be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002be6:	801a      	strh	r2, [r3, #0]
 8002be8:	e047      	b.n	8002c7a <HAL_PCD_EP_DB_Transmit+0x392>
 8002bea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bec:	2b3e      	cmp	r3, #62	; 0x3e
 8002bee:	d811      	bhi.n	8002c14 <HAL_PCD_EP_DB_Transmit+0x32c>
 8002bf0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bf2:	085b      	lsrs	r3, r3, #1
 8002bf4:	64bb      	str	r3, [r7, #72]	; 0x48
 8002bf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bf8:	f003 0301 	and.w	r3, r3, #1
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d002      	beq.n	8002c06 <HAL_PCD_EP_DB_Transmit+0x31e>
 8002c00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c02:	3301      	adds	r3, #1
 8002c04:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	029b      	lsls	r3, r3, #10
 8002c0c:	b29a      	uxth	r2, r3
 8002c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c10:	801a      	strh	r2, [r3, #0]
 8002c12:	e032      	b.n	8002c7a <HAL_PCD_EP_DB_Transmit+0x392>
 8002c14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c16:	095b      	lsrs	r3, r3, #5
 8002c18:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c1c:	f003 031f 	and.w	r3, r3, #31
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d102      	bne.n	8002c2a <HAL_PCD_EP_DB_Transmit+0x342>
 8002c24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c26:	3b01      	subs	r3, #1
 8002c28:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	029b      	lsls	r3, r3, #10
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c3a:	b29a      	uxth	r2, r3
 8002c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c3e:	801a      	strh	r2, [r3, #0]
 8002c40:	e01b      	b.n	8002c7a <HAL_PCD_EP_DB_Transmit+0x392>
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	785b      	ldrb	r3, [r3, #1]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d117      	bne.n	8002c7a <HAL_PCD_EP_DB_Transmit+0x392>
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	643b      	str	r3, [r7, #64]	; 0x40
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c5e:	4413      	add	r3, r2
 8002c60:	643b      	str	r3, [r7, #64]	; 0x40
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	011a      	lsls	r2, r3, #4
 8002c68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c6a:	4413      	add	r3, r2
 8002c6c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002c70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c74:	b29a      	uxth	r2, r3
 8002c76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c78:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6818      	ldr	r0, [r3, #0]
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	6959      	ldr	r1, [r3, #20]
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	891a      	ldrh	r2, [r3, #8]
 8002c86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	f003 f9b8 	bl	8005ffe <USB_WritePMA>
 8002c8e:	e1d0      	b.n	8003032 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	00db      	lsls	r3, r3, #3
 8002ca2:	4413      	add	r3, r2
 8002ca4:	3306      	adds	r3, #6
 8002ca6:	005b      	lsls	r3, r3, #1
 8002ca8:	68fa      	ldr	r2, [r7, #12]
 8002caa:	6812      	ldr	r2, [r2, #0]
 8002cac:	4413      	add	r3, r2
 8002cae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002cb2:	881b      	ldrh	r3, [r3, #0]
 8002cb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cb8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	699a      	ldr	r2, [r3, #24]
 8002cc0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d307      	bcc.n	8002cd8 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	699a      	ldr	r2, [r3, #24]
 8002ccc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002cd0:	1ad2      	subs	r2, r2, r3
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	619a      	str	r2, [r3, #24]
 8002cd6:	e002      	b.n	8002cde <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	f040 80c4 	bne.w	8002e70 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	785b      	ldrb	r3, [r3, #1]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d126      	bne.n	8002d3e <HAL_PCD_EP_DB_Transmit+0x456>
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	461a      	mov	r2, r3
 8002d02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d04:	4413      	add	r3, r2
 8002d06:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	011a      	lsls	r2, r3, #4
 8002d0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d10:	4413      	add	r3, r2
 8002d12:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002d16:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d1a:	881b      	ldrh	r3, [r3, #0]
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d22:	b29a      	uxth	r2, r3
 8002d24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d26:	801a      	strh	r2, [r3, #0]
 8002d28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d2a:	881b      	ldrh	r3, [r3, #0]
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d36:	b29a      	uxth	r2, r3
 8002d38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d3a:	801a      	strh	r2, [r3, #0]
 8002d3c:	e01a      	b.n	8002d74 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	785b      	ldrb	r3, [r3, #1]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d116      	bne.n	8002d74 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	677b      	str	r3, [r7, #116]	; 0x74
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	461a      	mov	r2, r3
 8002d58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d5a:	4413      	add	r3, r2
 8002d5c:	677b      	str	r3, [r7, #116]	; 0x74
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	011a      	lsls	r2, r3, #4
 8002d64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d66:	4413      	add	r3, r2
 8002d68:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002d6c:	673b      	str	r3, [r7, #112]	; 0x70
 8002d6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d70:	2200      	movs	r2, #0
 8002d72:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	67bb      	str	r3, [r7, #120]	; 0x78
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	785b      	ldrb	r3, [r3, #1]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d12f      	bne.n	8002de2 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	461a      	mov	r2, r3
 8002d96:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d9a:	4413      	add	r3, r2
 8002d9c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	011a      	lsls	r2, r3, #4
 8002da6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002daa:	4413      	add	r3, r2
 8002dac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002db0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002db4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002db8:	881b      	ldrh	r3, [r3, #0]
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002dc0:	b29a      	uxth	r2, r3
 8002dc2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002dc6:	801a      	strh	r2, [r3, #0]
 8002dc8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002dcc:	881b      	ldrh	r3, [r3, #0]
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dd8:	b29a      	uxth	r2, r3
 8002dda:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002dde:	801a      	strh	r2, [r3, #0]
 8002de0:	e017      	b.n	8002e12 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	785b      	ldrb	r3, [r3, #1]
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d113      	bne.n	8002e12 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	461a      	mov	r2, r3
 8002df6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002df8:	4413      	add	r3, r2
 8002dfa:	67bb      	str	r3, [r7, #120]	; 0x78
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	011a      	lsls	r2, r3, #4
 8002e02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e04:	4413      	add	r3, r2
 8002e06:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002e0a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002e0c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e0e:	2200      	movs	r2, #0
 8002e10:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	4619      	mov	r1, r3
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	f004 fd20 	bl	800785e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002e1e:	88fb      	ldrh	r3, [r7, #6]
 8002e20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f040 8104 	bne.w	8003032 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	461a      	mov	r2, r3
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	4413      	add	r3, r2
 8002e38:	881b      	ldrh	r3, [r3, #0]
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e44:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	441a      	add	r2, r3
 8002e56:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002e5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	8013      	strh	r3, [r2, #0]
 8002e6e:	e0e0      	b.n	8003032 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002e70:	88fb      	ldrh	r3, [r7, #6]
 8002e72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d121      	bne.n	8002ebe <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	461a      	mov	r2, r3
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	4413      	add	r3, r2
 8002e88:	881b      	ldrh	r3, [r3, #0]
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e94:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	441a      	add	r2, r3
 8002ea6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002eaa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002eae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002eb2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002eb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	f040 80b4 	bne.w	8003032 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	695a      	ldr	r2, [r3, #20]
 8002ece:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ed2:	441a      	add	r2, r3
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	69da      	ldr	r2, [r3, #28]
 8002edc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ee0:	441a      	add	r2, r3
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	6a1a      	ldr	r2, [r3, #32]
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d309      	bcc.n	8002f06 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	6a1a      	ldr	r2, [r3, #32]
 8002efc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002efe:	1ad2      	subs	r2, r2, r3
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	621a      	str	r2, [r3, #32]
 8002f04:	e015      	b.n	8002f32 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	6a1b      	ldr	r3, [r3, #32]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d107      	bne.n	8002f1e <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8002f0e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f12:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002f1c:	e009      	b.n	8002f32 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	6a1b      	ldr	r3, [r3, #32]
 8002f22:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	2200      	movs	r2, #0
 8002f28:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	667b      	str	r3, [r7, #100]	; 0x64
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	785b      	ldrb	r3, [r3, #1]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d155      	bne.n	8002fec <HAL_PCD_EP_DB_Transmit+0x704>
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	461a      	mov	r2, r3
 8002f52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f54:	4413      	add	r3, r2
 8002f56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	011a      	lsls	r2, r3, #4
 8002f5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f60:	4413      	add	r3, r2
 8002f62:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002f66:	65bb      	str	r3, [r7, #88]	; 0x58
 8002f68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d112      	bne.n	8002f94 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002f6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f70:	881b      	ldrh	r3, [r3, #0]
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002f78:	b29a      	uxth	r2, r3
 8002f7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f7c:	801a      	strh	r2, [r3, #0]
 8002f7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f80:	881b      	ldrh	r3, [r3, #0]
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f8c:	b29a      	uxth	r2, r3
 8002f8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f90:	801a      	strh	r2, [r3, #0]
 8002f92:	e044      	b.n	800301e <HAL_PCD_EP_DB_Transmit+0x736>
 8002f94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f96:	2b3e      	cmp	r3, #62	; 0x3e
 8002f98:	d811      	bhi.n	8002fbe <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002f9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f9c:	085b      	lsrs	r3, r3, #1
 8002f9e:	657b      	str	r3, [r7, #84]	; 0x54
 8002fa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fa2:	f003 0301 	and.w	r3, r3, #1
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d002      	beq.n	8002fb0 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8002faa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fac:	3301      	adds	r3, #1
 8002fae:	657b      	str	r3, [r7, #84]	; 0x54
 8002fb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	029b      	lsls	r3, r3, #10
 8002fb6:	b29a      	uxth	r2, r3
 8002fb8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fba:	801a      	strh	r2, [r3, #0]
 8002fbc:	e02f      	b.n	800301e <HAL_PCD_EP_DB_Transmit+0x736>
 8002fbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fc0:	095b      	lsrs	r3, r3, #5
 8002fc2:	657b      	str	r3, [r7, #84]	; 0x54
 8002fc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fc6:	f003 031f 	and.w	r3, r3, #31
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d102      	bne.n	8002fd4 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8002fce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fd0:	3b01      	subs	r3, #1
 8002fd2:	657b      	str	r3, [r7, #84]	; 0x54
 8002fd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	029b      	lsls	r3, r3, #10
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fe0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fe4:	b29a      	uxth	r2, r3
 8002fe6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fe8:	801a      	strh	r2, [r3, #0]
 8002fea:	e018      	b.n	800301e <HAL_PCD_EP_DB_Transmit+0x736>
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	785b      	ldrb	r3, [r3, #1]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d114      	bne.n	800301e <HAL_PCD_EP_DB_Transmit+0x736>
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	461a      	mov	r2, r3
 8003000:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003002:	4413      	add	r3, r2
 8003004:	667b      	str	r3, [r7, #100]	; 0x64
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	011a      	lsls	r2, r3, #4
 800300c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800300e:	4413      	add	r3, r2
 8003010:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003014:	663b      	str	r3, [r7, #96]	; 0x60
 8003016:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003018:	b29a      	uxth	r2, r3
 800301a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800301c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6818      	ldr	r0, [r3, #0]
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	6959      	ldr	r1, [r3, #20]
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	895a      	ldrh	r2, [r3, #10]
 800302a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800302c:	b29b      	uxth	r3, r3
 800302e:	f002 ffe6 	bl	8005ffe <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	461a      	mov	r2, r3
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	4413      	add	r3, r2
 8003040:	881b      	ldrh	r3, [r3, #0]
 8003042:	b29b      	uxth	r3, r3
 8003044:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003048:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800304c:	823b      	strh	r3, [r7, #16]
 800304e:	8a3b      	ldrh	r3, [r7, #16]
 8003050:	f083 0310 	eor.w	r3, r3, #16
 8003054:	823b      	strh	r3, [r7, #16]
 8003056:	8a3b      	ldrh	r3, [r7, #16]
 8003058:	f083 0320 	eor.w	r3, r3, #32
 800305c:	823b      	strh	r3, [r7, #16]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	461a      	mov	r2, r3
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	441a      	add	r2, r3
 800306c:	8a3b      	ldrh	r3, [r7, #16]
 800306e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003072:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003076:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800307a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800307e:	b29b      	uxth	r3, r3
 8003080:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003082:	2300      	movs	r3, #0
}
 8003084:	4618      	mov	r0, r3
 8003086:	3788      	adds	r7, #136	; 0x88
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800308c:	b480      	push	{r7}
 800308e:	b087      	sub	sp, #28
 8003090:	af00      	add	r7, sp, #0
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	607b      	str	r3, [r7, #4]
 8003096:	460b      	mov	r3, r1
 8003098:	817b      	strh	r3, [r7, #10]
 800309a:	4613      	mov	r3, r2
 800309c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800309e:	897b      	ldrh	r3, [r7, #10]
 80030a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00b      	beq.n	80030c2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030aa:	897b      	ldrh	r3, [r7, #10]
 80030ac:	f003 0307 	and.w	r3, r3, #7
 80030b0:	1c5a      	adds	r2, r3, #1
 80030b2:	4613      	mov	r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	4413      	add	r3, r2
 80030b8:	00db      	lsls	r3, r3, #3
 80030ba:	68fa      	ldr	r2, [r7, #12]
 80030bc:	4413      	add	r3, r2
 80030be:	617b      	str	r3, [r7, #20]
 80030c0:	e009      	b.n	80030d6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80030c2:	897a      	ldrh	r2, [r7, #10]
 80030c4:	4613      	mov	r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	4413      	add	r3, r2
 80030ca:	00db      	lsls	r3, r3, #3
 80030cc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80030d0:	68fa      	ldr	r2, [r7, #12]
 80030d2:	4413      	add	r3, r2
 80030d4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80030d6:	893b      	ldrh	r3, [r7, #8]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d107      	bne.n	80030ec <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	2200      	movs	r2, #0
 80030e0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	b29a      	uxth	r2, r3
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	80da      	strh	r2, [r3, #6]
 80030ea:	e00b      	b.n	8003104 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	2201      	movs	r2, #1
 80030f0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	b29a      	uxth	r2, r3
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	0c1b      	lsrs	r3, r3, #16
 80030fe:	b29a      	uxth	r2, r3
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	371c      	adds	r7, #28
 800310a:	46bd      	mov	sp, r7
 800310c:	bc80      	pop	{r7}
 800310e:	4770      	bx	lr

08003110 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b086      	sub	sp, #24
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d101      	bne.n	8003122 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e26c      	b.n	80035fc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0301 	and.w	r3, r3, #1
 800312a:	2b00      	cmp	r3, #0
 800312c:	f000 8087 	beq.w	800323e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003130:	4b92      	ldr	r3, [pc, #584]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f003 030c 	and.w	r3, r3, #12
 8003138:	2b04      	cmp	r3, #4
 800313a:	d00c      	beq.n	8003156 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800313c:	4b8f      	ldr	r3, [pc, #572]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f003 030c 	and.w	r3, r3, #12
 8003144:	2b08      	cmp	r3, #8
 8003146:	d112      	bne.n	800316e <HAL_RCC_OscConfig+0x5e>
 8003148:	4b8c      	ldr	r3, [pc, #560]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003150:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003154:	d10b      	bne.n	800316e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003156:	4b89      	ldr	r3, [pc, #548]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d06c      	beq.n	800323c <HAL_RCC_OscConfig+0x12c>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d168      	bne.n	800323c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e246      	b.n	80035fc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003176:	d106      	bne.n	8003186 <HAL_RCC_OscConfig+0x76>
 8003178:	4b80      	ldr	r3, [pc, #512]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a7f      	ldr	r2, [pc, #508]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 800317e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003182:	6013      	str	r3, [r2, #0]
 8003184:	e02e      	b.n	80031e4 <HAL_RCC_OscConfig+0xd4>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d10c      	bne.n	80031a8 <HAL_RCC_OscConfig+0x98>
 800318e:	4b7b      	ldr	r3, [pc, #492]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a7a      	ldr	r2, [pc, #488]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 8003194:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003198:	6013      	str	r3, [r2, #0]
 800319a:	4b78      	ldr	r3, [pc, #480]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a77      	ldr	r2, [pc, #476]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 80031a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031a4:	6013      	str	r3, [r2, #0]
 80031a6:	e01d      	b.n	80031e4 <HAL_RCC_OscConfig+0xd4>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031b0:	d10c      	bne.n	80031cc <HAL_RCC_OscConfig+0xbc>
 80031b2:	4b72      	ldr	r3, [pc, #456]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a71      	ldr	r2, [pc, #452]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 80031b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031bc:	6013      	str	r3, [r2, #0]
 80031be:	4b6f      	ldr	r3, [pc, #444]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a6e      	ldr	r2, [pc, #440]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 80031c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031c8:	6013      	str	r3, [r2, #0]
 80031ca:	e00b      	b.n	80031e4 <HAL_RCC_OscConfig+0xd4>
 80031cc:	4b6b      	ldr	r3, [pc, #428]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a6a      	ldr	r2, [pc, #424]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 80031d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031d6:	6013      	str	r3, [r2, #0]
 80031d8:	4b68      	ldr	r3, [pc, #416]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a67      	ldr	r2, [pc, #412]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 80031de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d013      	beq.n	8003214 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ec:	f7fd fb00 	bl	80007f0 <HAL_GetTick>
 80031f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031f2:	e008      	b.n	8003206 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031f4:	f7fd fafc 	bl	80007f0 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b64      	cmp	r3, #100	; 0x64
 8003200:	d901      	bls.n	8003206 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e1fa      	b.n	80035fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003206:	4b5d      	ldr	r3, [pc, #372]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d0f0      	beq.n	80031f4 <HAL_RCC_OscConfig+0xe4>
 8003212:	e014      	b.n	800323e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003214:	f7fd faec 	bl	80007f0 <HAL_GetTick>
 8003218:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800321a:	e008      	b.n	800322e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800321c:	f7fd fae8 	bl	80007f0 <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b64      	cmp	r3, #100	; 0x64
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e1e6      	b.n	80035fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800322e:	4b53      	ldr	r3, [pc, #332]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d1f0      	bne.n	800321c <HAL_RCC_OscConfig+0x10c>
 800323a:	e000      	b.n	800323e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800323c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d063      	beq.n	8003312 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800324a:	4b4c      	ldr	r3, [pc, #304]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f003 030c 	and.w	r3, r3, #12
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00b      	beq.n	800326e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003256:	4b49      	ldr	r3, [pc, #292]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f003 030c 	and.w	r3, r3, #12
 800325e:	2b08      	cmp	r3, #8
 8003260:	d11c      	bne.n	800329c <HAL_RCC_OscConfig+0x18c>
 8003262:	4b46      	ldr	r3, [pc, #280]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d116      	bne.n	800329c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800326e:	4b43      	ldr	r3, [pc, #268]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d005      	beq.n	8003286 <HAL_RCC_OscConfig+0x176>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d001      	beq.n	8003286 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e1ba      	b.n	80035fc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003286:	4b3d      	ldr	r3, [pc, #244]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	695b      	ldr	r3, [r3, #20]
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	4939      	ldr	r1, [pc, #228]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 8003296:	4313      	orrs	r3, r2
 8003298:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800329a:	e03a      	b.n	8003312 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	691b      	ldr	r3, [r3, #16]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d020      	beq.n	80032e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032a4:	4b36      	ldr	r3, [pc, #216]	; (8003380 <HAL_RCC_OscConfig+0x270>)
 80032a6:	2201      	movs	r2, #1
 80032a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032aa:	f7fd faa1 	bl	80007f0 <HAL_GetTick>
 80032ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032b0:	e008      	b.n	80032c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032b2:	f7fd fa9d 	bl	80007f0 <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d901      	bls.n	80032c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e19b      	b.n	80035fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032c4:	4b2d      	ldr	r3, [pc, #180]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0302 	and.w	r3, r3, #2
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d0f0      	beq.n	80032b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032d0:	4b2a      	ldr	r3, [pc, #168]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	695b      	ldr	r3, [r3, #20]
 80032dc:	00db      	lsls	r3, r3, #3
 80032de:	4927      	ldr	r1, [pc, #156]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	600b      	str	r3, [r1, #0]
 80032e4:	e015      	b.n	8003312 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032e6:	4b26      	ldr	r3, [pc, #152]	; (8003380 <HAL_RCC_OscConfig+0x270>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ec:	f7fd fa80 	bl	80007f0 <HAL_GetTick>
 80032f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032f2:	e008      	b.n	8003306 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032f4:	f7fd fa7c 	bl	80007f0 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e17a      	b.n	80035fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003306:	4b1d      	ldr	r3, [pc, #116]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1f0      	bne.n	80032f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0308 	and.w	r3, r3, #8
 800331a:	2b00      	cmp	r3, #0
 800331c:	d03a      	beq.n	8003394 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	699b      	ldr	r3, [r3, #24]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d019      	beq.n	800335a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003326:	4b17      	ldr	r3, [pc, #92]	; (8003384 <HAL_RCC_OscConfig+0x274>)
 8003328:	2201      	movs	r2, #1
 800332a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800332c:	f7fd fa60 	bl	80007f0 <HAL_GetTick>
 8003330:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003332:	e008      	b.n	8003346 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003334:	f7fd fa5c 	bl	80007f0 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b02      	cmp	r3, #2
 8003340:	d901      	bls.n	8003346 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e15a      	b.n	80035fc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003346:	4b0d      	ldr	r3, [pc, #52]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 8003348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	2b00      	cmp	r3, #0
 8003350:	d0f0      	beq.n	8003334 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003352:	2001      	movs	r0, #1
 8003354:	f000 fac4 	bl	80038e0 <RCC_Delay>
 8003358:	e01c      	b.n	8003394 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800335a:	4b0a      	ldr	r3, [pc, #40]	; (8003384 <HAL_RCC_OscConfig+0x274>)
 800335c:	2200      	movs	r2, #0
 800335e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003360:	f7fd fa46 	bl	80007f0 <HAL_GetTick>
 8003364:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003366:	e00f      	b.n	8003388 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003368:	f7fd fa42 	bl	80007f0 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b02      	cmp	r3, #2
 8003374:	d908      	bls.n	8003388 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e140      	b.n	80035fc <HAL_RCC_OscConfig+0x4ec>
 800337a:	bf00      	nop
 800337c:	40021000 	.word	0x40021000
 8003380:	42420000 	.word	0x42420000
 8003384:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003388:	4b9e      	ldr	r3, [pc, #632]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 800338a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338c:	f003 0302 	and.w	r3, r3, #2
 8003390:	2b00      	cmp	r3, #0
 8003392:	d1e9      	bne.n	8003368 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0304 	and.w	r3, r3, #4
 800339c:	2b00      	cmp	r3, #0
 800339e:	f000 80a6 	beq.w	80034ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033a2:	2300      	movs	r3, #0
 80033a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033a6:	4b97      	ldr	r3, [pc, #604]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 80033a8:	69db      	ldr	r3, [r3, #28]
 80033aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d10d      	bne.n	80033ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033b2:	4b94      	ldr	r3, [pc, #592]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 80033b4:	69db      	ldr	r3, [r3, #28]
 80033b6:	4a93      	ldr	r2, [pc, #588]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 80033b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033bc:	61d3      	str	r3, [r2, #28]
 80033be:	4b91      	ldr	r3, [pc, #580]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 80033c0:	69db      	ldr	r3, [r3, #28]
 80033c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033c6:	60bb      	str	r3, [r7, #8]
 80033c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033ca:	2301      	movs	r3, #1
 80033cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ce:	4b8e      	ldr	r3, [pc, #568]	; (8003608 <HAL_RCC_OscConfig+0x4f8>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d118      	bne.n	800340c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033da:	4b8b      	ldr	r3, [pc, #556]	; (8003608 <HAL_RCC_OscConfig+0x4f8>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a8a      	ldr	r2, [pc, #552]	; (8003608 <HAL_RCC_OscConfig+0x4f8>)
 80033e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033e6:	f7fd fa03 	bl	80007f0 <HAL_GetTick>
 80033ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ec:	e008      	b.n	8003400 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033ee:	f7fd f9ff 	bl	80007f0 <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	2b64      	cmp	r3, #100	; 0x64
 80033fa:	d901      	bls.n	8003400 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e0fd      	b.n	80035fc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003400:	4b81      	ldr	r3, [pc, #516]	; (8003608 <HAL_RCC_OscConfig+0x4f8>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003408:	2b00      	cmp	r3, #0
 800340a:	d0f0      	beq.n	80033ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	2b01      	cmp	r3, #1
 8003412:	d106      	bne.n	8003422 <HAL_RCC_OscConfig+0x312>
 8003414:	4b7b      	ldr	r3, [pc, #492]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 8003416:	6a1b      	ldr	r3, [r3, #32]
 8003418:	4a7a      	ldr	r2, [pc, #488]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 800341a:	f043 0301 	orr.w	r3, r3, #1
 800341e:	6213      	str	r3, [r2, #32]
 8003420:	e02d      	b.n	800347e <HAL_RCC_OscConfig+0x36e>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d10c      	bne.n	8003444 <HAL_RCC_OscConfig+0x334>
 800342a:	4b76      	ldr	r3, [pc, #472]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 800342c:	6a1b      	ldr	r3, [r3, #32]
 800342e:	4a75      	ldr	r2, [pc, #468]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 8003430:	f023 0301 	bic.w	r3, r3, #1
 8003434:	6213      	str	r3, [r2, #32]
 8003436:	4b73      	ldr	r3, [pc, #460]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 8003438:	6a1b      	ldr	r3, [r3, #32]
 800343a:	4a72      	ldr	r2, [pc, #456]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 800343c:	f023 0304 	bic.w	r3, r3, #4
 8003440:	6213      	str	r3, [r2, #32]
 8003442:	e01c      	b.n	800347e <HAL_RCC_OscConfig+0x36e>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	2b05      	cmp	r3, #5
 800344a:	d10c      	bne.n	8003466 <HAL_RCC_OscConfig+0x356>
 800344c:	4b6d      	ldr	r3, [pc, #436]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 800344e:	6a1b      	ldr	r3, [r3, #32]
 8003450:	4a6c      	ldr	r2, [pc, #432]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 8003452:	f043 0304 	orr.w	r3, r3, #4
 8003456:	6213      	str	r3, [r2, #32]
 8003458:	4b6a      	ldr	r3, [pc, #424]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 800345a:	6a1b      	ldr	r3, [r3, #32]
 800345c:	4a69      	ldr	r2, [pc, #420]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 800345e:	f043 0301 	orr.w	r3, r3, #1
 8003462:	6213      	str	r3, [r2, #32]
 8003464:	e00b      	b.n	800347e <HAL_RCC_OscConfig+0x36e>
 8003466:	4b67      	ldr	r3, [pc, #412]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 8003468:	6a1b      	ldr	r3, [r3, #32]
 800346a:	4a66      	ldr	r2, [pc, #408]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 800346c:	f023 0301 	bic.w	r3, r3, #1
 8003470:	6213      	str	r3, [r2, #32]
 8003472:	4b64      	ldr	r3, [pc, #400]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 8003474:	6a1b      	ldr	r3, [r3, #32]
 8003476:	4a63      	ldr	r2, [pc, #396]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 8003478:	f023 0304 	bic.w	r3, r3, #4
 800347c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d015      	beq.n	80034b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003486:	f7fd f9b3 	bl	80007f0 <HAL_GetTick>
 800348a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800348c:	e00a      	b.n	80034a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800348e:	f7fd f9af 	bl	80007f0 <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	f241 3288 	movw	r2, #5000	; 0x1388
 800349c:	4293      	cmp	r3, r2
 800349e:	d901      	bls.n	80034a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e0ab      	b.n	80035fc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034a4:	4b57      	ldr	r3, [pc, #348]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 80034a6:	6a1b      	ldr	r3, [r3, #32]
 80034a8:	f003 0302 	and.w	r3, r3, #2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d0ee      	beq.n	800348e <HAL_RCC_OscConfig+0x37e>
 80034b0:	e014      	b.n	80034dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034b2:	f7fd f99d 	bl	80007f0 <HAL_GetTick>
 80034b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034b8:	e00a      	b.n	80034d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ba:	f7fd f999 	bl	80007f0 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d901      	bls.n	80034d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e095      	b.n	80035fc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034d0:	4b4c      	ldr	r3, [pc, #304]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 80034d2:	6a1b      	ldr	r3, [r3, #32]
 80034d4:	f003 0302 	and.w	r3, r3, #2
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d1ee      	bne.n	80034ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80034dc:	7dfb      	ldrb	r3, [r7, #23]
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d105      	bne.n	80034ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034e2:	4b48      	ldr	r3, [pc, #288]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 80034e4:	69db      	ldr	r3, [r3, #28]
 80034e6:	4a47      	ldr	r2, [pc, #284]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 80034e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	69db      	ldr	r3, [r3, #28]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	f000 8081 	beq.w	80035fa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034f8:	4b42      	ldr	r3, [pc, #264]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f003 030c 	and.w	r3, r3, #12
 8003500:	2b08      	cmp	r3, #8
 8003502:	d061      	beq.n	80035c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	69db      	ldr	r3, [r3, #28]
 8003508:	2b02      	cmp	r3, #2
 800350a:	d146      	bne.n	800359a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800350c:	4b3f      	ldr	r3, [pc, #252]	; (800360c <HAL_RCC_OscConfig+0x4fc>)
 800350e:	2200      	movs	r2, #0
 8003510:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003512:	f7fd f96d 	bl	80007f0 <HAL_GetTick>
 8003516:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003518:	e008      	b.n	800352c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800351a:	f7fd f969 	bl	80007f0 <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	2b02      	cmp	r3, #2
 8003526:	d901      	bls.n	800352c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e067      	b.n	80035fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800352c:	4b35      	ldr	r3, [pc, #212]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d1f0      	bne.n	800351a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a1b      	ldr	r3, [r3, #32]
 800353c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003540:	d108      	bne.n	8003554 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003542:	4b30      	ldr	r3, [pc, #192]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	492d      	ldr	r1, [pc, #180]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 8003550:	4313      	orrs	r3, r2
 8003552:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003554:	4b2b      	ldr	r3, [pc, #172]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a19      	ldr	r1, [r3, #32]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003564:	430b      	orrs	r3, r1
 8003566:	4927      	ldr	r1, [pc, #156]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 8003568:	4313      	orrs	r3, r2
 800356a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800356c:	4b27      	ldr	r3, [pc, #156]	; (800360c <HAL_RCC_OscConfig+0x4fc>)
 800356e:	2201      	movs	r2, #1
 8003570:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003572:	f7fd f93d 	bl	80007f0 <HAL_GetTick>
 8003576:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003578:	e008      	b.n	800358c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800357a:	f7fd f939 	bl	80007f0 <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	2b02      	cmp	r3, #2
 8003586:	d901      	bls.n	800358c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e037      	b.n	80035fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800358c:	4b1d      	ldr	r3, [pc, #116]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d0f0      	beq.n	800357a <HAL_RCC_OscConfig+0x46a>
 8003598:	e02f      	b.n	80035fa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800359a:	4b1c      	ldr	r3, [pc, #112]	; (800360c <HAL_RCC_OscConfig+0x4fc>)
 800359c:	2200      	movs	r2, #0
 800359e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a0:	f7fd f926 	bl	80007f0 <HAL_GetTick>
 80035a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035a6:	e008      	b.n	80035ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035a8:	f7fd f922 	bl	80007f0 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e020      	b.n	80035fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035ba:	4b12      	ldr	r3, [pc, #72]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d1f0      	bne.n	80035a8 <HAL_RCC_OscConfig+0x498>
 80035c6:	e018      	b.n	80035fa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	69db      	ldr	r3, [r3, #28]
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d101      	bne.n	80035d4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e013      	b.n	80035fc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80035d4:	4b0b      	ldr	r3, [pc, #44]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a1b      	ldr	r3, [r3, #32]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d106      	bne.n	80035f6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d001      	beq.n	80035fa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e000      	b.n	80035fc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80035fa:	2300      	movs	r3, #0
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3718      	adds	r7, #24
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	40021000 	.word	0x40021000
 8003608:	40007000 	.word	0x40007000
 800360c:	42420060 	.word	0x42420060

08003610 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d101      	bne.n	8003624 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e0d0      	b.n	80037c6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003624:	4b6a      	ldr	r3, [pc, #424]	; (80037d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0307 	and.w	r3, r3, #7
 800362c:	683a      	ldr	r2, [r7, #0]
 800362e:	429a      	cmp	r2, r3
 8003630:	d910      	bls.n	8003654 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003632:	4b67      	ldr	r3, [pc, #412]	; (80037d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f023 0207 	bic.w	r2, r3, #7
 800363a:	4965      	ldr	r1, [pc, #404]	; (80037d0 <HAL_RCC_ClockConfig+0x1c0>)
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	4313      	orrs	r3, r2
 8003640:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003642:	4b63      	ldr	r3, [pc, #396]	; (80037d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0307 	and.w	r3, r3, #7
 800364a:	683a      	ldr	r2, [r7, #0]
 800364c:	429a      	cmp	r2, r3
 800364e:	d001      	beq.n	8003654 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e0b8      	b.n	80037c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0302 	and.w	r3, r3, #2
 800365c:	2b00      	cmp	r3, #0
 800365e:	d020      	beq.n	80036a2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0304 	and.w	r3, r3, #4
 8003668:	2b00      	cmp	r3, #0
 800366a:	d005      	beq.n	8003678 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800366c:	4b59      	ldr	r3, [pc, #356]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	4a58      	ldr	r2, [pc, #352]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003672:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003676:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0308 	and.w	r3, r3, #8
 8003680:	2b00      	cmp	r3, #0
 8003682:	d005      	beq.n	8003690 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003684:	4b53      	ldr	r3, [pc, #332]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	4a52      	ldr	r2, [pc, #328]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 800368a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800368e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003690:	4b50      	ldr	r3, [pc, #320]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	494d      	ldr	r1, [pc, #308]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d040      	beq.n	8003730 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d107      	bne.n	80036c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036b6:	4b47      	ldr	r3, [pc, #284]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d115      	bne.n	80036ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e07f      	b.n	80037c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d107      	bne.n	80036de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036ce:	4b41      	ldr	r3, [pc, #260]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d109      	bne.n	80036ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e073      	b.n	80037c6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036de:	4b3d      	ldr	r3, [pc, #244]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d101      	bne.n	80036ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e06b      	b.n	80037c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036ee:	4b39      	ldr	r3, [pc, #228]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f023 0203 	bic.w	r2, r3, #3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	4936      	ldr	r1, [pc, #216]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 80036fc:	4313      	orrs	r3, r2
 80036fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003700:	f7fd f876 	bl	80007f0 <HAL_GetTick>
 8003704:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003706:	e00a      	b.n	800371e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003708:	f7fd f872 	bl	80007f0 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	f241 3288 	movw	r2, #5000	; 0x1388
 8003716:	4293      	cmp	r3, r2
 8003718:	d901      	bls.n	800371e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e053      	b.n	80037c6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800371e:	4b2d      	ldr	r3, [pc, #180]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f003 020c 	and.w	r2, r3, #12
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	429a      	cmp	r2, r3
 800372e:	d1eb      	bne.n	8003708 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003730:	4b27      	ldr	r3, [pc, #156]	; (80037d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0307 	and.w	r3, r3, #7
 8003738:	683a      	ldr	r2, [r7, #0]
 800373a:	429a      	cmp	r2, r3
 800373c:	d210      	bcs.n	8003760 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800373e:	4b24      	ldr	r3, [pc, #144]	; (80037d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f023 0207 	bic.w	r2, r3, #7
 8003746:	4922      	ldr	r1, [pc, #136]	; (80037d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	4313      	orrs	r3, r2
 800374c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800374e:	4b20      	ldr	r3, [pc, #128]	; (80037d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0307 	and.w	r3, r3, #7
 8003756:	683a      	ldr	r2, [r7, #0]
 8003758:	429a      	cmp	r2, r3
 800375a:	d001      	beq.n	8003760 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e032      	b.n	80037c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0304 	and.w	r3, r3, #4
 8003768:	2b00      	cmp	r3, #0
 800376a:	d008      	beq.n	800377e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800376c:	4b19      	ldr	r3, [pc, #100]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	4916      	ldr	r1, [pc, #88]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 800377a:	4313      	orrs	r3, r2
 800377c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0308 	and.w	r3, r3, #8
 8003786:	2b00      	cmp	r3, #0
 8003788:	d009      	beq.n	800379e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800378a:	4b12      	ldr	r3, [pc, #72]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	00db      	lsls	r3, r3, #3
 8003798:	490e      	ldr	r1, [pc, #56]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 800379a:	4313      	orrs	r3, r2
 800379c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800379e:	f000 f821 	bl	80037e4 <HAL_RCC_GetSysClockFreq>
 80037a2:	4602      	mov	r2, r0
 80037a4:	4b0b      	ldr	r3, [pc, #44]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	091b      	lsrs	r3, r3, #4
 80037aa:	f003 030f 	and.w	r3, r3, #15
 80037ae:	490a      	ldr	r1, [pc, #40]	; (80037d8 <HAL_RCC_ClockConfig+0x1c8>)
 80037b0:	5ccb      	ldrb	r3, [r1, r3]
 80037b2:	fa22 f303 	lsr.w	r3, r2, r3
 80037b6:	4a09      	ldr	r2, [pc, #36]	; (80037dc <HAL_RCC_ClockConfig+0x1cc>)
 80037b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80037ba:	4b09      	ldr	r3, [pc, #36]	; (80037e0 <HAL_RCC_ClockConfig+0x1d0>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4618      	mov	r0, r3
 80037c0:	f7fc ffd4 	bl	800076c <HAL_InitTick>

  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	40022000 	.word	0x40022000
 80037d4:	40021000 	.word	0x40021000
 80037d8:	08007d98 	.word	0x08007d98
 80037dc:	20000000 	.word	0x20000000
 80037e0:	20000004 	.word	0x20000004

080037e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037e4:	b490      	push	{r4, r7}
 80037e6:	b08a      	sub	sp, #40	; 0x28
 80037e8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80037ea:	4b2a      	ldr	r3, [pc, #168]	; (8003894 <HAL_RCC_GetSysClockFreq+0xb0>)
 80037ec:	1d3c      	adds	r4, r7, #4
 80037ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80037f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80037f4:	f240 2301 	movw	r3, #513	; 0x201
 80037f8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80037fa:	2300      	movs	r3, #0
 80037fc:	61fb      	str	r3, [r7, #28]
 80037fe:	2300      	movs	r3, #0
 8003800:	61bb      	str	r3, [r7, #24]
 8003802:	2300      	movs	r3, #0
 8003804:	627b      	str	r3, [r7, #36]	; 0x24
 8003806:	2300      	movs	r3, #0
 8003808:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800380a:	2300      	movs	r3, #0
 800380c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800380e:	4b22      	ldr	r3, [pc, #136]	; (8003898 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	f003 030c 	and.w	r3, r3, #12
 800381a:	2b04      	cmp	r3, #4
 800381c:	d002      	beq.n	8003824 <HAL_RCC_GetSysClockFreq+0x40>
 800381e:	2b08      	cmp	r3, #8
 8003820:	d003      	beq.n	800382a <HAL_RCC_GetSysClockFreq+0x46>
 8003822:	e02d      	b.n	8003880 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003824:	4b1d      	ldr	r3, [pc, #116]	; (800389c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003826:	623b      	str	r3, [r7, #32]
      break;
 8003828:	e02d      	b.n	8003886 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	0c9b      	lsrs	r3, r3, #18
 800382e:	f003 030f 	and.w	r3, r3, #15
 8003832:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003836:	4413      	add	r3, r2
 8003838:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800383c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d013      	beq.n	8003870 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003848:	4b13      	ldr	r3, [pc, #76]	; (8003898 <HAL_RCC_GetSysClockFreq+0xb4>)
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	0c5b      	lsrs	r3, r3, #17
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003856:	4413      	add	r3, r2
 8003858:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800385c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	4a0e      	ldr	r2, [pc, #56]	; (800389c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003862:	fb02 f203 	mul.w	r2, r2, r3
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	fbb2 f3f3 	udiv	r3, r2, r3
 800386c:	627b      	str	r3, [r7, #36]	; 0x24
 800386e:	e004      	b.n	800387a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	4a0b      	ldr	r2, [pc, #44]	; (80038a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003874:	fb02 f303 	mul.w	r3, r2, r3
 8003878:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800387a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387c:	623b      	str	r3, [r7, #32]
      break;
 800387e:	e002      	b.n	8003886 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003880:	4b06      	ldr	r3, [pc, #24]	; (800389c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003882:	623b      	str	r3, [r7, #32]
      break;
 8003884:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003886:	6a3b      	ldr	r3, [r7, #32]
}
 8003888:	4618      	mov	r0, r3
 800388a:	3728      	adds	r7, #40	; 0x28
 800388c:	46bd      	mov	sp, r7
 800388e:	bc90      	pop	{r4, r7}
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	08007d34 	.word	0x08007d34
 8003898:	40021000 	.word	0x40021000
 800389c:	007a1200 	.word	0x007a1200
 80038a0:	003d0900 	.word	0x003d0900

080038a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038a4:	b480      	push	{r7}
 80038a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038a8:	4b02      	ldr	r3, [pc, #8]	; (80038b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80038aa:	681b      	ldr	r3, [r3, #0]
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bc80      	pop	{r7}
 80038b2:	4770      	bx	lr
 80038b4:	20000000 	.word	0x20000000

080038b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80038bc:	f7ff fff2 	bl	80038a4 <HAL_RCC_GetHCLKFreq>
 80038c0:	4602      	mov	r2, r0
 80038c2:	4b05      	ldr	r3, [pc, #20]	; (80038d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	0adb      	lsrs	r3, r3, #11
 80038c8:	f003 0307 	and.w	r3, r3, #7
 80038cc:	4903      	ldr	r1, [pc, #12]	; (80038dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80038ce:	5ccb      	ldrb	r3, [r1, r3]
 80038d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	40021000 	.word	0x40021000
 80038dc:	08007da8 	.word	0x08007da8

080038e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b085      	sub	sp, #20
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80038e8:	4b0a      	ldr	r3, [pc, #40]	; (8003914 <RCC_Delay+0x34>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a0a      	ldr	r2, [pc, #40]	; (8003918 <RCC_Delay+0x38>)
 80038ee:	fba2 2303 	umull	r2, r3, r2, r3
 80038f2:	0a5b      	lsrs	r3, r3, #9
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	fb02 f303 	mul.w	r3, r2, r3
 80038fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80038fc:	bf00      	nop
  }
  while (Delay --);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	1e5a      	subs	r2, r3, #1
 8003902:	60fa      	str	r2, [r7, #12]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d1f9      	bne.n	80038fc <RCC_Delay+0x1c>
}
 8003908:	bf00      	nop
 800390a:	bf00      	nop
 800390c:	3714      	adds	r7, #20
 800390e:	46bd      	mov	sp, r7
 8003910:	bc80      	pop	{r7}
 8003912:	4770      	bx	lr
 8003914:	20000000 	.word	0x20000000
 8003918:	10624dd3 	.word	0x10624dd3

0800391c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b086      	sub	sp, #24
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003924:	2300      	movs	r3, #0
 8003926:	613b      	str	r3, [r7, #16]
 8003928:	2300      	movs	r3, #0
 800392a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0301 	and.w	r3, r3, #1
 8003934:	2b00      	cmp	r3, #0
 8003936:	d07d      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003938:	2300      	movs	r3, #0
 800393a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800393c:	4b4f      	ldr	r3, [pc, #316]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800393e:	69db      	ldr	r3, [r3, #28]
 8003940:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d10d      	bne.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003948:	4b4c      	ldr	r3, [pc, #304]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800394a:	69db      	ldr	r3, [r3, #28]
 800394c:	4a4b      	ldr	r2, [pc, #300]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800394e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003952:	61d3      	str	r3, [r2, #28]
 8003954:	4b49      	ldr	r3, [pc, #292]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003956:	69db      	ldr	r3, [r3, #28]
 8003958:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800395c:	60bb      	str	r3, [r7, #8]
 800395e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003960:	2301      	movs	r3, #1
 8003962:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003964:	4b46      	ldr	r3, [pc, #280]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800396c:	2b00      	cmp	r3, #0
 800396e:	d118      	bne.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003970:	4b43      	ldr	r3, [pc, #268]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a42      	ldr	r2, [pc, #264]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003976:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800397a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800397c:	f7fc ff38 	bl	80007f0 <HAL_GetTick>
 8003980:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003982:	e008      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003984:	f7fc ff34 	bl	80007f0 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	2b64      	cmp	r3, #100	; 0x64
 8003990:	d901      	bls.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e06d      	b.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003996:	4b3a      	ldr	r3, [pc, #232]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d0f0      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80039a2:	4b36      	ldr	r3, [pc, #216]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039a4:	6a1b      	ldr	r3, [r3, #32]
 80039a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039aa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d02e      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d027      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039c0:	4b2e      	ldr	r3, [pc, #184]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039c2:	6a1b      	ldr	r3, [r3, #32]
 80039c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039c8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80039ca:	4b2e      	ldr	r3, [pc, #184]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80039cc:	2201      	movs	r2, #1
 80039ce:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039d0:	4b2c      	ldr	r3, [pc, #176]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80039d6:	4a29      	ldr	r2, [pc, #164]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f003 0301 	and.w	r3, r3, #1
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d014      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039e6:	f7fc ff03 	bl	80007f0 <HAL_GetTick>
 80039ea:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039ec:	e00a      	b.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039ee:	f7fc feff 	bl	80007f0 <HAL_GetTick>
 80039f2:	4602      	mov	r2, r0
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d901      	bls.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e036      	b.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a04:	4b1d      	ldr	r3, [pc, #116]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a06:	6a1b      	ldr	r3, [r3, #32]
 8003a08:	f003 0302 	and.w	r3, r3, #2
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d0ee      	beq.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a10:	4b1a      	ldr	r3, [pc, #104]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a12:	6a1b      	ldr	r3, [r3, #32]
 8003a14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	4917      	ldr	r1, [pc, #92]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a22:	7dfb      	ldrb	r3, [r7, #23]
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d105      	bne.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a28:	4b14      	ldr	r3, [pc, #80]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a2a:	69db      	ldr	r3, [r3, #28]
 8003a2c:	4a13      	ldr	r2, [pc, #76]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a32:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0302 	and.w	r3, r3, #2
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d008      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a40:	4b0e      	ldr	r3, [pc, #56]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	490b      	ldr	r1, [pc, #44]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0310 	and.w	r3, r3, #16
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d008      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a5e:	4b07      	ldr	r3, [pc, #28]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	4904      	ldr	r1, [pc, #16]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3718      	adds	r7, #24
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	40021000 	.word	0x40021000
 8003a80:	40007000 	.word	0x40007000
 8003a84:	42420440 	.word	0x42420440

08003a88 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003a88:	b590      	push	{r4, r7, lr}
 8003a8a:	b08d      	sub	sp, #52	; 0x34
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003a90:	4b5a      	ldr	r3, [pc, #360]	; (8003bfc <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003a92:	f107 040c 	add.w	r4, r7, #12
 8003a96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003a9c:	f240 2301 	movw	r3, #513	; 0x201
 8003aa0:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	627b      	str	r3, [r7, #36]	; 0x24
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003aaa:	2300      	movs	r3, #0
 8003aac:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	61fb      	str	r3, [r7, #28]
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2b10      	cmp	r3, #16
 8003aba:	d00a      	beq.n	8003ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2b10      	cmp	r3, #16
 8003ac0:	f200 8091 	bhi.w	8003be6 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d04c      	beq.n	8003b64 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d07c      	beq.n	8003bca <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003ad0:	e089      	b.n	8003be6 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 8003ad2:	4b4b      	ldr	r3, [pc, #300]	; (8003c00 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003ad8:	4b49      	ldr	r3, [pc, #292]	; (8003c00 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	f000 8082 	beq.w	8003bea <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	0c9b      	lsrs	r3, r3, #18
 8003aea:	f003 030f 	and.w	r3, r3, #15
 8003aee:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003af2:	4413      	add	r3, r2
 8003af4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003af8:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d018      	beq.n	8003b36 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003b04:	4b3e      	ldr	r3, [pc, #248]	; (8003c00 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	0c5b      	lsrs	r3, r3, #17
 8003b0a:	f003 0301 	and.w	r3, r3, #1
 8003b0e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003b12:	4413      	add	r3, r2
 8003b14:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003b18:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d00d      	beq.n	8003b40 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003b24:	4a37      	ldr	r2, [pc, #220]	; (8003c04 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8003b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b28:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b2c:	6a3b      	ldr	r3, [r7, #32]
 8003b2e:	fb02 f303 	mul.w	r3, r2, r3
 8003b32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b34:	e004      	b.n	8003b40 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003b36:	6a3b      	ldr	r3, [r7, #32]
 8003b38:	4a33      	ldr	r2, [pc, #204]	; (8003c08 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8003b3a:	fb02 f303 	mul.w	r3, r2, r3
 8003b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003b40:	4b2f      	ldr	r3, [pc, #188]	; (8003c00 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b4c:	d102      	bne.n	8003b54 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8003b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b50:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003b52:	e04a      	b.n	8003bea <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8003b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b56:	005b      	lsls	r3, r3, #1
 8003b58:	4a2c      	ldr	r2, [pc, #176]	; (8003c0c <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8003b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b5e:	085b      	lsrs	r3, r3, #1
 8003b60:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003b62:	e042      	b.n	8003bea <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8003b64:	4b26      	ldr	r3, [pc, #152]	; (8003c00 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003b66:	6a1b      	ldr	r3, [r3, #32]
 8003b68:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b74:	d108      	bne.n	8003b88 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	f003 0302 	and.w	r3, r3, #2
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d003      	beq.n	8003b88 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8003b80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b84:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b86:	e01f      	b.n	8003bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b92:	d109      	bne.n	8003ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8003b94:	4b1a      	ldr	r3, [pc, #104]	; (8003c00 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b98:	f003 0302 	and.w	r3, r3, #2
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d003      	beq.n	8003ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8003ba0:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003ba4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ba6:	e00f      	b.n	8003bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bb2:	d11c      	bne.n	8003bee <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8003bb4:	4b12      	ldr	r3, [pc, #72]	; (8003c00 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d016      	beq.n	8003bee <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8003bc0:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003bc4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003bc6:	e012      	b.n	8003bee <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8003bc8:	e011      	b.n	8003bee <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003bca:	f7ff fe75 	bl	80038b8 <HAL_RCC_GetPCLK2Freq>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	4b0b      	ldr	r3, [pc, #44]	; (8003c00 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	0b9b      	lsrs	r3, r3, #14
 8003bd6:	f003 0303 	and.w	r3, r3, #3
 8003bda:	3301      	adds	r3, #1
 8003bdc:	005b      	lsls	r3, r3, #1
 8003bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8003be2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003be4:	e004      	b.n	8003bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8003be6:	bf00      	nop
 8003be8:	e002      	b.n	8003bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8003bea:	bf00      	nop
 8003bec:	e000      	b.n	8003bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8003bee:	bf00      	nop
    }
  }
  return (frequency);
 8003bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3734      	adds	r7, #52	; 0x34
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd90      	pop	{r4, r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	08007d44 	.word	0x08007d44
 8003c00:	40021000 	.word	0x40021000
 8003c04:	007a1200 	.word	0x007a1200
 8003c08:	003d0900 	.word	0x003d0900
 8003c0c:	aaaaaaab 	.word	0xaaaaaaab

08003c10 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003c10:	b084      	sub	sp, #16
 8003c12:	b480      	push	{r7}
 8003c14:	b083      	sub	sp, #12
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
 8003c1a:	f107 0014 	add.w	r0, r7, #20
 8003c1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003c22:	2300      	movs	r3, #0
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bc80      	pop	{r7}
 8003c2c:	b004      	add	sp, #16
 8003c2e:	4770      	bx	lr

08003c30 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b085      	sub	sp, #20
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003c40:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003c44:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	b29a      	uxth	r2, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3714      	adds	r7, #20
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bc80      	pop	{r7}
 8003c5a:	4770      	bx	lr

08003c5c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b085      	sub	sp, #20
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003c64:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003c68:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003c70:	b29a      	uxth	r2, r3
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	43db      	mvns	r3, r3
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	b29a      	uxth	r2, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3714      	adds	r7, #20
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bc80      	pop	{r7}
 8003c8e:	4770      	bx	lr

08003c90 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	460b      	mov	r3, r1
 8003c9a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	370c      	adds	r7, #12
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bc80      	pop	{r7}
 8003ca6:	4770      	bx	lr

08003ca8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003ca8:	b084      	sub	sp, #16
 8003caa:	b480      	push	{r7}
 8003cac:	b083      	sub	sp, #12
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
 8003cb2:	f107 0014 	add.w	r0, r7, #20
 8003cb6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003cda:	2300      	movs	r3, #0
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bc80      	pop	{r7}
 8003ce4:	b004      	add	sp, #16
 8003ce6:	4770      	bx	lr

08003ce8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b09b      	sub	sp, #108	; 0x6c
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	4413      	add	r3, r2
 8003d02:	881b      	ldrh	r3, [r3, #0]
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003d0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d0e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	78db      	ldrb	r3, [r3, #3]
 8003d16:	2b03      	cmp	r3, #3
 8003d18:	d81f      	bhi.n	8003d5a <USB_ActivateEndpoint+0x72>
 8003d1a:	a201      	add	r2, pc, #4	; (adr r2, 8003d20 <USB_ActivateEndpoint+0x38>)
 8003d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d20:	08003d31 	.word	0x08003d31
 8003d24:	08003d4d 	.word	0x08003d4d
 8003d28:	08003d63 	.word	0x08003d63
 8003d2c:	08003d3f 	.word	0x08003d3f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003d30:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003d34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d38:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003d3c:	e012      	b.n	8003d64 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003d3e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003d42:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003d46:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003d4a:	e00b      	b.n	8003d64 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003d4c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003d50:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d54:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003d58:	e004      	b.n	8003d64 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8003d60:	e000      	b.n	8003d64 <USB_ActivateEndpoint+0x7c>
      break;
 8003d62:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	441a      	add	r2, r3
 8003d6e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003d72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	4413      	add	r3, r2
 8003d90:	881b      	ldrh	r3, [r3, #0]
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d9c:	b29a      	uxth	r2, r3
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	781b      	ldrb	r3, [r3, #0]
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	4313      	orrs	r3, r2
 8003da6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	441a      	add	r2, r3
 8003db4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003db8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003dbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003dc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	7b1b      	ldrb	r3, [r3, #12]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	f040 8149 	bne.w	8004068 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	785b      	ldrb	r3, [r3, #1]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	f000 8084 	beq.w	8003ee8 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	617b      	str	r3, [r7, #20]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	461a      	mov	r2, r3
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	4413      	add	r3, r2
 8003df2:	617b      	str	r3, [r7, #20]
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	011a      	lsls	r2, r3, #4
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	4413      	add	r3, r2
 8003dfe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e02:	613b      	str	r3, [r7, #16]
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	88db      	ldrh	r3, [r3, #6]
 8003e08:	085b      	lsrs	r3, r3, #1
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	005b      	lsls	r3, r3, #1
 8003e0e:	b29a      	uxth	r2, r3
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	4413      	add	r3, r2
 8003e1e:	881b      	ldrh	r3, [r3, #0]
 8003e20:	81fb      	strh	r3, [r7, #14]
 8003e22:	89fb      	ldrh	r3, [r7, #14]
 8003e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d01b      	beq.n	8003e64 <USB_ActivateEndpoint+0x17c>
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	4413      	add	r3, r2
 8003e36:	881b      	ldrh	r3, [r3, #0]
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e42:	81bb      	strh	r3, [r7, #12]
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	441a      	add	r2, r3
 8003e4e:	89bb      	ldrh	r3, [r7, #12]
 8003e50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e5c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	78db      	ldrb	r3, [r3, #3]
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d020      	beq.n	8003eae <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	4413      	add	r3, r2
 8003e76:	881b      	ldrh	r3, [r3, #0]
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e82:	813b      	strh	r3, [r7, #8]
 8003e84:	893b      	ldrh	r3, [r7, #8]
 8003e86:	f083 0320 	eor.w	r3, r3, #32
 8003e8a:	813b      	strh	r3, [r7, #8]
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	441a      	add	r2, r3
 8003e96:	893b      	ldrh	r3, [r7, #8]
 8003e98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ea0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ea4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	8013      	strh	r3, [r2, #0]
 8003eac:	e27f      	b.n	80043ae <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	4413      	add	r3, r2
 8003eb8:	881b      	ldrh	r3, [r3, #0]
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ec0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ec4:	817b      	strh	r3, [r7, #10]
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	441a      	add	r2, r3
 8003ed0:	897b      	ldrh	r3, [r7, #10]
 8003ed2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ed6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003eda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ede:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	8013      	strh	r3, [r2, #0]
 8003ee6:	e262      	b.n	80043ae <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef8:	4413      	add	r3, r2
 8003efa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	011a      	lsls	r2, r3, #4
 8003f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f04:	4413      	add	r3, r2
 8003f06:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003f0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	88db      	ldrh	r3, [r3, #6]
 8003f10:	085b      	lsrs	r3, r3, #1
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	005b      	lsls	r3, r3, #1
 8003f16:	b29a      	uxth	r2, r3
 8003f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f1a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	627b      	str	r3, [r7, #36]	; 0x24
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	461a      	mov	r2, r3
 8003f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2c:	4413      	add	r3, r2
 8003f2e:	627b      	str	r3, [r7, #36]	; 0x24
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	011a      	lsls	r2, r3, #4
 8003f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f38:	4413      	add	r3, r2
 8003f3a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f3e:	623b      	str	r3, [r7, #32]
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	691b      	ldr	r3, [r3, #16]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d112      	bne.n	8003f6e <USB_ActivateEndpoint+0x286>
 8003f48:	6a3b      	ldr	r3, [r7, #32]
 8003f4a:	881b      	ldrh	r3, [r3, #0]
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003f52:	b29a      	uxth	r2, r3
 8003f54:	6a3b      	ldr	r3, [r7, #32]
 8003f56:	801a      	strh	r2, [r3, #0]
 8003f58:	6a3b      	ldr	r3, [r7, #32]
 8003f5a:	881b      	ldrh	r3, [r3, #0]
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f66:	b29a      	uxth	r2, r3
 8003f68:	6a3b      	ldr	r3, [r7, #32]
 8003f6a:	801a      	strh	r2, [r3, #0]
 8003f6c:	e02f      	b.n	8003fce <USB_ActivateEndpoint+0x2e6>
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	2b3e      	cmp	r3, #62	; 0x3e
 8003f74:	d813      	bhi.n	8003f9e <USB_ActivateEndpoint+0x2b6>
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	085b      	lsrs	r3, r3, #1
 8003f7c:	663b      	str	r3, [r7, #96]	; 0x60
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	f003 0301 	and.w	r3, r3, #1
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d002      	beq.n	8003f90 <USB_ActivateEndpoint+0x2a8>
 8003f8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	663b      	str	r3, [r7, #96]	; 0x60
 8003f90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	029b      	lsls	r3, r3, #10
 8003f96:	b29a      	uxth	r2, r3
 8003f98:	6a3b      	ldr	r3, [r7, #32]
 8003f9a:	801a      	strh	r2, [r3, #0]
 8003f9c:	e017      	b.n	8003fce <USB_ActivateEndpoint+0x2e6>
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	095b      	lsrs	r3, r3, #5
 8003fa4:	663b      	str	r3, [r7, #96]	; 0x60
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	f003 031f 	and.w	r3, r3, #31
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d102      	bne.n	8003fb8 <USB_ActivateEndpoint+0x2d0>
 8003fb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	663b      	str	r3, [r7, #96]	; 0x60
 8003fb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	029b      	lsls	r3, r3, #10
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fc8:	b29a      	uxth	r2, r3
 8003fca:	6a3b      	ldr	r3, [r7, #32]
 8003fcc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	4413      	add	r3, r2
 8003fd8:	881b      	ldrh	r3, [r3, #0]
 8003fda:	83fb      	strh	r3, [r7, #30]
 8003fdc:	8bfb      	ldrh	r3, [r7, #30]
 8003fde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d01b      	beq.n	800401e <USB_ActivateEndpoint+0x336>
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	4413      	add	r3, r2
 8003ff0:	881b      	ldrh	r3, [r3, #0]
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ff8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ffc:	83bb      	strh	r3, [r7, #28]
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	441a      	add	r2, r3
 8004008:	8bbb      	ldrh	r3, [r7, #28]
 800400a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800400e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004012:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004016:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800401a:	b29b      	uxth	r3, r3
 800401c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	4413      	add	r3, r2
 8004028:	881b      	ldrh	r3, [r3, #0]
 800402a:	b29b      	uxth	r3, r3
 800402c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004030:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004034:	837b      	strh	r3, [r7, #26]
 8004036:	8b7b      	ldrh	r3, [r7, #26]
 8004038:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800403c:	837b      	strh	r3, [r7, #26]
 800403e:	8b7b      	ldrh	r3, [r7, #26]
 8004040:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004044:	837b      	strh	r3, [r7, #26]
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	441a      	add	r2, r3
 8004050:	8b7b      	ldrh	r3, [r7, #26]
 8004052:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004056:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800405a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800405e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004062:	b29b      	uxth	r3, r3
 8004064:	8013      	strh	r3, [r2, #0]
 8004066:	e1a2      	b.n	80043ae <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	781b      	ldrb	r3, [r3, #0]
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	4413      	add	r3, r2
 8004072:	881b      	ldrh	r3, [r3, #0]
 8004074:	b29b      	uxth	r3, r3
 8004076:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800407a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800407e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	441a      	add	r2, r3
 800408c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004090:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004094:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004098:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800409c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	65bb      	str	r3, [r7, #88]	; 0x58
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	461a      	mov	r2, r3
 80040b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040b4:	4413      	add	r3, r2
 80040b6:	65bb      	str	r3, [r7, #88]	; 0x58
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	011a      	lsls	r2, r3, #4
 80040be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040c0:	4413      	add	r3, r2
 80040c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040c6:	657b      	str	r3, [r7, #84]	; 0x54
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	891b      	ldrh	r3, [r3, #8]
 80040cc:	085b      	lsrs	r3, r3, #1
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	005b      	lsls	r3, r3, #1
 80040d2:	b29a      	uxth	r2, r3
 80040d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040d6:	801a      	strh	r2, [r3, #0]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	653b      	str	r3, [r7, #80]	; 0x50
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	461a      	mov	r2, r3
 80040e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040e8:	4413      	add	r3, r2
 80040ea:	653b      	str	r3, [r7, #80]	; 0x50
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	011a      	lsls	r2, r3, #4
 80040f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040f4:	4413      	add	r3, r2
 80040f6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80040fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	895b      	ldrh	r3, [r3, #10]
 8004100:	085b      	lsrs	r3, r3, #1
 8004102:	b29b      	uxth	r3, r3
 8004104:	005b      	lsls	r3, r3, #1
 8004106:	b29a      	uxth	r2, r3
 8004108:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800410a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	785b      	ldrb	r3, [r3, #1]
 8004110:	2b00      	cmp	r3, #0
 8004112:	f040 8091 	bne.w	8004238 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	4413      	add	r3, r2
 8004120:	881b      	ldrh	r3, [r3, #0]
 8004122:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004124:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004126:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d01b      	beq.n	8004166 <USB_ActivateEndpoint+0x47e>
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	4413      	add	r3, r2
 8004138:	881b      	ldrh	r3, [r3, #0]
 800413a:	b29b      	uxth	r3, r3
 800413c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004140:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004144:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	441a      	add	r2, r3
 8004150:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004152:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004156:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800415a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800415e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004162:	b29b      	uxth	r3, r3
 8004164:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	4413      	add	r3, r2
 8004170:	881b      	ldrh	r3, [r3, #0]
 8004172:	873b      	strh	r3, [r7, #56]	; 0x38
 8004174:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800417a:	2b00      	cmp	r3, #0
 800417c:	d01b      	beq.n	80041b6 <USB_ActivateEndpoint+0x4ce>
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	4413      	add	r3, r2
 8004188:	881b      	ldrh	r3, [r3, #0]
 800418a:	b29b      	uxth	r3, r3
 800418c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004190:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004194:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	441a      	add	r2, r3
 80041a0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80041a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041ae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	4413      	add	r3, r2
 80041c0:	881b      	ldrh	r3, [r3, #0]
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041cc:	86bb      	strh	r3, [r7, #52]	; 0x34
 80041ce:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80041d0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80041d4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80041d6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80041d8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80041dc:	86bb      	strh	r3, [r7, #52]	; 0x34
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	441a      	add	r2, r3
 80041e8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80041ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	4413      	add	r3, r2
 8004208:	881b      	ldrh	r3, [r3, #0]
 800420a:	b29b      	uxth	r3, r3
 800420c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004210:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004214:	867b      	strh	r3, [r7, #50]	; 0x32
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	441a      	add	r2, r3
 8004220:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004222:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004226:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800422a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800422e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004232:	b29b      	uxth	r3, r3
 8004234:	8013      	strh	r3, [r2, #0]
 8004236:	e0ba      	b.n	80043ae <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	4413      	add	r3, r2
 8004242:	881b      	ldrh	r3, [r3, #0]
 8004244:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004248:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800424c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004250:	2b00      	cmp	r3, #0
 8004252:	d01d      	beq.n	8004290 <USB_ActivateEndpoint+0x5a8>
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	4413      	add	r3, r2
 800425e:	881b      	ldrh	r3, [r3, #0]
 8004260:	b29b      	uxth	r3, r3
 8004262:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800426a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	441a      	add	r2, r3
 8004278:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800427c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004280:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004284:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800428c:	b29b      	uxth	r3, r3
 800428e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	4413      	add	r3, r2
 800429a:	881b      	ldrh	r3, [r3, #0]
 800429c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80042a0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80042a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d01d      	beq.n	80042e8 <USB_ActivateEndpoint+0x600>
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	4413      	add	r3, r2
 80042b6:	881b      	ldrh	r3, [r3, #0]
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042c2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	441a      	add	r2, r3
 80042d0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80042d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042e0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	78db      	ldrb	r3, [r3, #3]
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d024      	beq.n	800433a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	4413      	add	r3, r2
 80042fa:	881b      	ldrh	r3, [r3, #0]
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004302:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004306:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800430a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800430e:	f083 0320 	eor.w	r3, r3, #32
 8004312:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	441a      	add	r2, r3
 8004320:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004324:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004328:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800432c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004330:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004334:	b29b      	uxth	r3, r3
 8004336:	8013      	strh	r3, [r2, #0]
 8004338:	e01d      	b.n	8004376 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	4413      	add	r3, r2
 8004344:	881b      	ldrh	r3, [r3, #0]
 8004346:	b29b      	uxth	r3, r3
 8004348:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800434c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004350:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	781b      	ldrb	r3, [r3, #0]
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	441a      	add	r2, r3
 800435e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004362:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004366:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800436a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800436e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004372:	b29b      	uxth	r3, r3
 8004374:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	4413      	add	r3, r2
 8004380:	881b      	ldrh	r3, [r3, #0]
 8004382:	b29b      	uxth	r3, r3
 8004384:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004388:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800438c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	441a      	add	r2, r3
 8004398:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800439a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800439e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80043ae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	376c      	adds	r7, #108	; 0x6c
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bc80      	pop	{r7}
 80043ba:	4770      	bx	lr

080043bc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80043bc:	b480      	push	{r7}
 80043be:	b08d      	sub	sp, #52	; 0x34
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	7b1b      	ldrb	r3, [r3, #12]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	f040 808e 	bne.w	80044ec <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	785b      	ldrb	r3, [r3, #1]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d044      	beq.n	8004462 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	4413      	add	r3, r2
 80043e2:	881b      	ldrh	r3, [r3, #0]
 80043e4:	81bb      	strh	r3, [r7, #12]
 80043e6:	89bb      	ldrh	r3, [r7, #12]
 80043e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d01b      	beq.n	8004428 <USB_DeactivateEndpoint+0x6c>
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	4413      	add	r3, r2
 80043fa:	881b      	ldrh	r3, [r3, #0]
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004406:	817b      	strh	r3, [r7, #10]
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	441a      	add	r2, r3
 8004412:	897b      	ldrh	r3, [r7, #10]
 8004414:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004418:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800441c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004420:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004424:	b29b      	uxth	r3, r3
 8004426:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	4413      	add	r3, r2
 8004432:	881b      	ldrh	r3, [r3, #0]
 8004434:	b29b      	uxth	r3, r3
 8004436:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800443a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800443e:	813b      	strh	r3, [r7, #8]
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	441a      	add	r2, r3
 800444a:	893b      	ldrh	r3, [r7, #8]
 800444c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004450:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004454:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004458:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800445c:	b29b      	uxth	r3, r3
 800445e:	8013      	strh	r3, [r2, #0]
 8004460:	e192      	b.n	8004788 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	4413      	add	r3, r2
 800446c:	881b      	ldrh	r3, [r3, #0]
 800446e:	827b      	strh	r3, [r7, #18]
 8004470:	8a7b      	ldrh	r3, [r7, #18]
 8004472:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d01b      	beq.n	80044b2 <USB_DeactivateEndpoint+0xf6>
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	4413      	add	r3, r2
 8004484:	881b      	ldrh	r3, [r3, #0]
 8004486:	b29b      	uxth	r3, r3
 8004488:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800448c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004490:	823b      	strh	r3, [r7, #16]
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	781b      	ldrb	r3, [r3, #0]
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	441a      	add	r2, r3
 800449c:	8a3b      	ldrh	r3, [r7, #16]
 800449e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80044aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	4413      	add	r3, r2
 80044bc:	881b      	ldrh	r3, [r3, #0]
 80044be:	b29b      	uxth	r3, r3
 80044c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044c8:	81fb      	strh	r3, [r7, #14]
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	441a      	add	r2, r3
 80044d4:	89fb      	ldrh	r3, [r7, #14]
 80044d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	8013      	strh	r3, [r2, #0]
 80044ea:	e14d      	b.n	8004788 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	785b      	ldrb	r3, [r3, #1]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	f040 80a5 	bne.w	8004640 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	4413      	add	r3, r2
 8004500:	881b      	ldrh	r3, [r3, #0]
 8004502:	843b      	strh	r3, [r7, #32]
 8004504:	8c3b      	ldrh	r3, [r7, #32]
 8004506:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d01b      	beq.n	8004546 <USB_DeactivateEndpoint+0x18a>
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	4413      	add	r3, r2
 8004518:	881b      	ldrh	r3, [r3, #0]
 800451a:	b29b      	uxth	r3, r3
 800451c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004520:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004524:	83fb      	strh	r3, [r7, #30]
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	441a      	add	r2, r3
 8004530:	8bfb      	ldrh	r3, [r7, #30]
 8004532:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004536:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800453a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800453e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004542:	b29b      	uxth	r3, r3
 8004544:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	4413      	add	r3, r2
 8004550:	881b      	ldrh	r3, [r3, #0]
 8004552:	83bb      	strh	r3, [r7, #28]
 8004554:	8bbb      	ldrh	r3, [r7, #28]
 8004556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800455a:	2b00      	cmp	r3, #0
 800455c:	d01b      	beq.n	8004596 <USB_DeactivateEndpoint+0x1da>
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	4413      	add	r3, r2
 8004568:	881b      	ldrh	r3, [r3, #0]
 800456a:	b29b      	uxth	r3, r3
 800456c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004570:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004574:	837b      	strh	r3, [r7, #26]
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	441a      	add	r2, r3
 8004580:	8b7b      	ldrh	r3, [r7, #26]
 8004582:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004586:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800458a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800458e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004592:	b29b      	uxth	r3, r3
 8004594:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	4413      	add	r3, r2
 80045a0:	881b      	ldrh	r3, [r3, #0]
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ac:	833b      	strh	r3, [r7, #24]
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	441a      	add	r2, r3
 80045b8:	8b3b      	ldrh	r3, [r7, #24]
 80045ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045c6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	4413      	add	r3, r2
 80045d8:	881b      	ldrh	r3, [r3, #0]
 80045da:	b29b      	uxth	r3, r3
 80045dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045e4:	82fb      	strh	r3, [r7, #22]
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	441a      	add	r2, r3
 80045f0:	8afb      	ldrh	r3, [r7, #22]
 80045f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004602:	b29b      	uxth	r3, r3
 8004604:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	781b      	ldrb	r3, [r3, #0]
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	4413      	add	r3, r2
 8004610:	881b      	ldrh	r3, [r3, #0]
 8004612:	b29b      	uxth	r3, r3
 8004614:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004618:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800461c:	82bb      	strh	r3, [r7, #20]
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	441a      	add	r2, r3
 8004628:	8abb      	ldrh	r3, [r7, #20]
 800462a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800462e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004632:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004636:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800463a:	b29b      	uxth	r3, r3
 800463c:	8013      	strh	r3, [r2, #0]
 800463e:	e0a3      	b.n	8004788 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	4413      	add	r3, r2
 800464a:	881b      	ldrh	r3, [r3, #0]
 800464c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800464e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004650:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d01b      	beq.n	8004690 <USB_DeactivateEndpoint+0x2d4>
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	4413      	add	r3, r2
 8004662:	881b      	ldrh	r3, [r3, #0]
 8004664:	b29b      	uxth	r3, r3
 8004666:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800466a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800466e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	441a      	add	r2, r3
 800467a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800467c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004680:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004684:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004688:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800468c:	b29b      	uxth	r3, r3
 800468e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	4413      	add	r3, r2
 800469a:	881b      	ldrh	r3, [r3, #0]
 800469c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800469e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80046a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d01b      	beq.n	80046e0 <USB_DeactivateEndpoint+0x324>
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	4413      	add	r3, r2
 80046b2:	881b      	ldrh	r3, [r3, #0]
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046be:	853b      	strh	r3, [r7, #40]	; 0x28
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	441a      	add	r2, r3
 80046ca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80046cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80046dc:	b29b      	uxth	r3, r3
 80046de:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	4413      	add	r3, r2
 80046ea:	881b      	ldrh	r3, [r3, #0]
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046f6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	441a      	add	r2, r3
 8004702:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004704:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004708:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800470c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004710:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004714:	b29b      	uxth	r3, r3
 8004716:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	4413      	add	r3, r2
 8004722:	881b      	ldrh	r3, [r3, #0]
 8004724:	b29b      	uxth	r3, r3
 8004726:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800472a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800472e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	441a      	add	r2, r3
 800473a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800473c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004740:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004744:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800474c:	b29b      	uxth	r3, r3
 800474e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	4413      	add	r3, r2
 800475a:	881b      	ldrh	r3, [r3, #0]
 800475c:	b29b      	uxth	r3, r3
 800475e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004766:	847b      	strh	r3, [r7, #34]	; 0x22
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	441a      	add	r2, r3
 8004772:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004774:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004778:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800477c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004784:	b29b      	uxth	r3, r3
 8004786:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3734      	adds	r7, #52	; 0x34
 800478e:	46bd      	mov	sp, r7
 8004790:	bc80      	pop	{r7}
 8004792:	4770      	bx	lr

08004794 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b0cc      	sub	sp, #304	; 0x130
 8004798:	af00      	add	r7, sp, #0
 800479a:	1d3b      	adds	r3, r7, #4
 800479c:	6018      	str	r0, [r3, #0]
 800479e:	463b      	mov	r3, r7
 80047a0:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80047a2:	463b      	mov	r3, r7
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	785b      	ldrb	r3, [r3, #1]
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	f040 872e 	bne.w	800560a <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80047ae:	463b      	mov	r3, r7
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	699a      	ldr	r2, [r3, #24]
 80047b4:	463b      	mov	r3, r7
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d905      	bls.n	80047ca <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80047be:	463b      	mov	r3, r7
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	691b      	ldr	r3, [r3, #16]
 80047c4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80047c8:	e004      	b.n	80047d4 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80047ca:	463b      	mov	r3, r7
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	699b      	ldr	r3, [r3, #24]
 80047d0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80047d4:	463b      	mov	r3, r7
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	7b1b      	ldrb	r3, [r3, #12]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d134      	bne.n	8004848 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80047de:	463b      	mov	r3, r7
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	6959      	ldr	r1, [r3, #20]
 80047e4:	463b      	mov	r3, r7
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	88da      	ldrh	r2, [r3, #6]
 80047ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	1d38      	adds	r0, r7, #4
 80047f2:	6800      	ldr	r0, [r0, #0]
 80047f4:	f001 fc03 	bl	8005ffe <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80047f8:	f107 0310 	add.w	r3, r7, #16
 80047fc:	1d3a      	adds	r2, r7, #4
 80047fe:	6812      	ldr	r2, [r2, #0]
 8004800:	601a      	str	r2, [r3, #0]
 8004802:	1d3b      	adds	r3, r7, #4
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800480a:	b29b      	uxth	r3, r3
 800480c:	4619      	mov	r1, r3
 800480e:	f107 0310 	add.w	r3, r7, #16
 8004812:	f107 0210 	add.w	r2, r7, #16
 8004816:	6812      	ldr	r2, [r2, #0]
 8004818:	440a      	add	r2, r1
 800481a:	601a      	str	r2, [r3, #0]
 800481c:	463b      	mov	r3, r7
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	011a      	lsls	r2, r3, #4
 8004824:	f107 0310 	add.w	r3, r7, #16
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4413      	add	r3, r2
 800482c:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004830:	f107 030c 	add.w	r3, r7, #12
 8004834:	601a      	str	r2, [r3, #0]
 8004836:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800483a:	b29a      	uxth	r2, r3
 800483c:	f107 030c 	add.w	r3, r7, #12
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	801a      	strh	r2, [r3, #0]
 8004844:	f000 beac 	b.w	80055a0 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004848:	463b      	mov	r3, r7
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	78db      	ldrb	r3, [r3, #3]
 800484e:	2b02      	cmp	r3, #2
 8004850:	f040 838c 	bne.w	8004f6c <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004854:	463b      	mov	r3, r7
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	6a1a      	ldr	r2, [r3, #32]
 800485a:	463b      	mov	r3, r7
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	691b      	ldr	r3, [r3, #16]
 8004860:	429a      	cmp	r2, r3
 8004862:	f240 8330 	bls.w	8004ec6 <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004866:	1d3b      	adds	r3, r7, #4
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	463b      	mov	r3, r7
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	4413      	add	r3, r2
 8004874:	881b      	ldrh	r3, [r3, #0]
 8004876:	b29b      	uxth	r3, r3
 8004878:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800487c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004880:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8004884:	1d3b      	adds	r3, r7, #4
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	463b      	mov	r3, r7
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	441a      	add	r2, r3
 8004892:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004896:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800489a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800489e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80048a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80048aa:	463b      	mov	r3, r7
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	6a1a      	ldr	r2, [r3, #32]
 80048b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048b4:	1ad2      	subs	r2, r2, r3
 80048b6:	463b      	mov	r3, r7
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80048bc:	1d3b      	adds	r3, r7, #4
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	463b      	mov	r3, r7
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	781b      	ldrb	r3, [r3, #0]
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	4413      	add	r3, r2
 80048ca:	881b      	ldrh	r3, [r3, #0]
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	f000 819e 	beq.w	8004c14 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80048d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80048dc:	1d3a      	adds	r2, r7, #4
 80048de:	6812      	ldr	r2, [r2, #0]
 80048e0:	601a      	str	r2, [r3, #0]
 80048e2:	463b      	mov	r3, r7
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	785b      	ldrb	r3, [r3, #1]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d17a      	bne.n	80049e2 <USB_EPStartXfer+0x24e>
 80048ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80048f0:	1d3a      	adds	r2, r7, #4
 80048f2:	6812      	ldr	r2, [r2, #0]
 80048f4:	601a      	str	r2, [r3, #0]
 80048f6:	1d3b      	adds	r3, r7, #4
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048fe:	b29b      	uxth	r3, r3
 8004900:	4619      	mov	r1, r3
 8004902:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004906:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800490a:	6812      	ldr	r2, [r2, #0]
 800490c:	440a      	add	r2, r1
 800490e:	601a      	str	r2, [r3, #0]
 8004910:	463b      	mov	r3, r7
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	011a      	lsls	r2, r3, #4
 8004918:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4413      	add	r3, r2
 8004920:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004924:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004928:	601a      	str	r2, [r3, #0]
 800492a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800492e:	2b00      	cmp	r3, #0
 8004930:	d11a      	bne.n	8004968 <USB_EPStartXfer+0x1d4>
 8004932:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	881b      	ldrh	r3, [r3, #0]
 800493a:	b29b      	uxth	r3, r3
 800493c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004940:	b29a      	uxth	r2, r3
 8004942:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	801a      	strh	r2, [r3, #0]
 800494a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	881b      	ldrh	r3, [r3, #0]
 8004952:	b29b      	uxth	r3, r3
 8004954:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004958:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800495c:	b29a      	uxth	r2, r3
 800495e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	801a      	strh	r2, [r3, #0]
 8004966:	e062      	b.n	8004a2e <USB_EPStartXfer+0x29a>
 8004968:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800496c:	2b3e      	cmp	r3, #62	; 0x3e
 800496e:	d819      	bhi.n	80049a4 <USB_EPStartXfer+0x210>
 8004970:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004974:	085b      	lsrs	r3, r3, #1
 8004976:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800497a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800497e:	f003 0301 	and.w	r3, r3, #1
 8004982:	2b00      	cmp	r3, #0
 8004984:	d004      	beq.n	8004990 <USB_EPStartXfer+0x1fc>
 8004986:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800498a:	3301      	adds	r3, #1
 800498c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004990:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004994:	b29b      	uxth	r3, r3
 8004996:	029b      	lsls	r3, r3, #10
 8004998:	b29a      	uxth	r2, r3
 800499a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	801a      	strh	r2, [r3, #0]
 80049a2:	e044      	b.n	8004a2e <USB_EPStartXfer+0x29a>
 80049a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049a8:	095b      	lsrs	r3, r3, #5
 80049aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80049ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049b2:	f003 031f 	and.w	r3, r3, #31
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d104      	bne.n	80049c4 <USB_EPStartXfer+0x230>
 80049ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80049be:	3b01      	subs	r3, #1
 80049c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80049c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	029b      	lsls	r3, r3, #10
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049d6:	b29a      	uxth	r2, r3
 80049d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	801a      	strh	r2, [r3, #0]
 80049e0:	e025      	b.n	8004a2e <USB_EPStartXfer+0x29a>
 80049e2:	463b      	mov	r3, r7
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	785b      	ldrb	r3, [r3, #1]
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d120      	bne.n	8004a2e <USB_EPStartXfer+0x29a>
 80049ec:	1d3b      	adds	r3, r7, #4
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	4619      	mov	r1, r3
 80049f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80049fc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004a00:	6812      	ldr	r2, [r2, #0]
 8004a02:	440a      	add	r2, r1
 8004a04:	601a      	str	r2, [r3, #0]
 8004a06:	463b      	mov	r3, r7
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	011a      	lsls	r2, r3, #4
 8004a0e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4413      	add	r3, r2
 8004a16:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004a1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004a1e:	601a      	str	r2, [r3, #0]
 8004a20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a24:	b29a      	uxth	r2, r3
 8004a26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004a2e:	463b      	mov	r3, r7
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	895b      	ldrh	r3, [r3, #10]
 8004a34:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004a38:	463b      	mov	r3, r7
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	6959      	ldr	r1, [r3, #20]
 8004a3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004a48:	1d38      	adds	r0, r7, #4
 8004a4a:	6800      	ldr	r0, [r0, #0]
 8004a4c:	f001 fad7 	bl	8005ffe <USB_WritePMA>
            ep->xfer_buff += len;
 8004a50:	463b      	mov	r3, r7
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	695a      	ldr	r2, [r3, #20]
 8004a56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a5a:	441a      	add	r2, r3
 8004a5c:	463b      	mov	r3, r7
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004a62:	463b      	mov	r3, r7
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	6a1a      	ldr	r2, [r3, #32]
 8004a68:	463b      	mov	r3, r7
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d909      	bls.n	8004a86 <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 8004a72:	463b      	mov	r3, r7
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	6a1a      	ldr	r2, [r3, #32]
 8004a78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a7c:	1ad2      	subs	r2, r2, r3
 8004a7e:	463b      	mov	r3, r7
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	621a      	str	r2, [r3, #32]
 8004a84:	e008      	b.n	8004a98 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 8004a86:	463b      	mov	r3, r7
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	6a1b      	ldr	r3, [r3, #32]
 8004a8c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8004a90:	463b      	mov	r3, r7
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	2200      	movs	r2, #0
 8004a96:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004a98:	463b      	mov	r3, r7
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	785b      	ldrb	r3, [r3, #1]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d17a      	bne.n	8004b98 <USB_EPStartXfer+0x404>
 8004aa2:	f107 0318 	add.w	r3, r7, #24
 8004aa6:	1d3a      	adds	r2, r7, #4
 8004aa8:	6812      	ldr	r2, [r2, #0]
 8004aaa:	601a      	str	r2, [r3, #0]
 8004aac:	1d3b      	adds	r3, r7, #4
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	4619      	mov	r1, r3
 8004ab8:	f107 0318 	add.w	r3, r7, #24
 8004abc:	f107 0218 	add.w	r2, r7, #24
 8004ac0:	6812      	ldr	r2, [r2, #0]
 8004ac2:	440a      	add	r2, r1
 8004ac4:	601a      	str	r2, [r3, #0]
 8004ac6:	463b      	mov	r3, r7
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	011a      	lsls	r2, r3, #4
 8004ace:	f107 0318 	add.w	r3, r7, #24
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4413      	add	r3, r2
 8004ad6:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004ada:	f107 0314 	add.w	r3, r7, #20
 8004ade:	601a      	str	r2, [r3, #0]
 8004ae0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d11a      	bne.n	8004b1e <USB_EPStartXfer+0x38a>
 8004ae8:	f107 0314 	add.w	r3, r7, #20
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	881b      	ldrh	r3, [r3, #0]
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004af6:	b29a      	uxth	r2, r3
 8004af8:	f107 0314 	add.w	r3, r7, #20
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	801a      	strh	r2, [r3, #0]
 8004b00:	f107 0314 	add.w	r3, r7, #20
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	881b      	ldrh	r3, [r3, #0]
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b12:	b29a      	uxth	r2, r3
 8004b14:	f107 0314 	add.w	r3, r7, #20
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	801a      	strh	r2, [r3, #0]
 8004b1c:	e067      	b.n	8004bee <USB_EPStartXfer+0x45a>
 8004b1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b22:	2b3e      	cmp	r3, #62	; 0x3e
 8004b24:	d819      	bhi.n	8004b5a <USB_EPStartXfer+0x3c6>
 8004b26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b2a:	085b      	lsrs	r3, r3, #1
 8004b2c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004b30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b34:	f003 0301 	and.w	r3, r3, #1
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d004      	beq.n	8004b46 <USB_EPStartXfer+0x3b2>
 8004b3c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004b40:	3301      	adds	r3, #1
 8004b42:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004b46:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	029b      	lsls	r3, r3, #10
 8004b4e:	b29a      	uxth	r2, r3
 8004b50:	f107 0314 	add.w	r3, r7, #20
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	801a      	strh	r2, [r3, #0]
 8004b58:	e049      	b.n	8004bee <USB_EPStartXfer+0x45a>
 8004b5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b5e:	095b      	lsrs	r3, r3, #5
 8004b60:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004b64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b68:	f003 031f 	and.w	r3, r3, #31
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d104      	bne.n	8004b7a <USB_EPStartXfer+0x3e6>
 8004b70:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004b74:	3b01      	subs	r3, #1
 8004b76:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004b7a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	029b      	lsls	r3, r3, #10
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b8c:	b29a      	uxth	r2, r3
 8004b8e:	f107 0314 	add.w	r3, r7, #20
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	801a      	strh	r2, [r3, #0]
 8004b96:	e02a      	b.n	8004bee <USB_EPStartXfer+0x45a>
 8004b98:	463b      	mov	r3, r7
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	785b      	ldrb	r3, [r3, #1]
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d125      	bne.n	8004bee <USB_EPStartXfer+0x45a>
 8004ba2:	f107 0320 	add.w	r3, r7, #32
 8004ba6:	1d3a      	adds	r2, r7, #4
 8004ba8:	6812      	ldr	r2, [r2, #0]
 8004baa:	601a      	str	r2, [r3, #0]
 8004bac:	1d3b      	adds	r3, r7, #4
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	4619      	mov	r1, r3
 8004bb8:	f107 0320 	add.w	r3, r7, #32
 8004bbc:	f107 0220 	add.w	r2, r7, #32
 8004bc0:	6812      	ldr	r2, [r2, #0]
 8004bc2:	440a      	add	r2, r1
 8004bc4:	601a      	str	r2, [r3, #0]
 8004bc6:	463b      	mov	r3, r7
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	781b      	ldrb	r3, [r3, #0]
 8004bcc:	011a      	lsls	r2, r3, #4
 8004bce:	f107 0320 	add.w	r3, r7, #32
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4413      	add	r3, r2
 8004bd6:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004bda:	f107 031c 	add.w	r3, r7, #28
 8004bde:	601a      	str	r2, [r3, #0]
 8004be0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004be4:	b29a      	uxth	r2, r3
 8004be6:	f107 031c 	add.w	r3, r7, #28
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004bee:	463b      	mov	r3, r7
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	891b      	ldrh	r3, [r3, #8]
 8004bf4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004bf8:	463b      	mov	r3, r7
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	6959      	ldr	r1, [r3, #20]
 8004bfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004c08:	1d38      	adds	r0, r7, #4
 8004c0a:	6800      	ldr	r0, [r0, #0]
 8004c0c:	f001 f9f7 	bl	8005ffe <USB_WritePMA>
 8004c10:	f000 bcc6 	b.w	80055a0 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004c14:	463b      	mov	r3, r7
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	785b      	ldrb	r3, [r3, #1]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d164      	bne.n	8004ce8 <USB_EPStartXfer+0x554>
 8004c1e:	1d3b      	adds	r3, r7, #4
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c24:	1d3b      	adds	r3, r7, #4
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	461a      	mov	r2, r3
 8004c30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c32:	4413      	add	r3, r2
 8004c34:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c36:	463b      	mov	r3, r7
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	011a      	lsls	r2, r3, #4
 8004c3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c40:	4413      	add	r3, r2
 8004c42:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004c46:	647b      	str	r3, [r7, #68]	; 0x44
 8004c48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d112      	bne.n	8004c76 <USB_EPStartXfer+0x4e2>
 8004c50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c52:	881b      	ldrh	r3, [r3, #0]
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004c5a:	b29a      	uxth	r2, r3
 8004c5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c5e:	801a      	strh	r2, [r3, #0]
 8004c60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c62:	881b      	ldrh	r3, [r3, #0]
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c6e:	b29a      	uxth	r2, r3
 8004c70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c72:	801a      	strh	r2, [r3, #0]
 8004c74:	e057      	b.n	8004d26 <USB_EPStartXfer+0x592>
 8004c76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c7a:	2b3e      	cmp	r3, #62	; 0x3e
 8004c7c:	d817      	bhi.n	8004cae <USB_EPStartXfer+0x51a>
 8004c7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c82:	085b      	lsrs	r3, r3, #1
 8004c84:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004c88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c8c:	f003 0301 	and.w	r3, r3, #1
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d004      	beq.n	8004c9e <USB_EPStartXfer+0x50a>
 8004c94:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004c98:	3301      	adds	r3, #1
 8004c9a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004c9e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	029b      	lsls	r3, r3, #10
 8004ca6:	b29a      	uxth	r2, r3
 8004ca8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004caa:	801a      	strh	r2, [r3, #0]
 8004cac:	e03b      	b.n	8004d26 <USB_EPStartXfer+0x592>
 8004cae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cb2:	095b      	lsrs	r3, r3, #5
 8004cb4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004cb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cbc:	f003 031f 	and.w	r3, r3, #31
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d104      	bne.n	8004cce <USB_EPStartXfer+0x53a>
 8004cc4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004cc8:	3b01      	subs	r3, #1
 8004cca:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004cce:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	029b      	lsls	r3, r3, #10
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ce0:	b29a      	uxth	r2, r3
 8004ce2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ce4:	801a      	strh	r2, [r3, #0]
 8004ce6:	e01e      	b.n	8004d26 <USB_EPStartXfer+0x592>
 8004ce8:	463b      	mov	r3, r7
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	785b      	ldrb	r3, [r3, #1]
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d119      	bne.n	8004d26 <USB_EPStartXfer+0x592>
 8004cf2:	1d3b      	adds	r3, r7, #4
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	653b      	str	r3, [r7, #80]	; 0x50
 8004cf8:	1d3b      	adds	r3, r7, #4
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	461a      	mov	r2, r3
 8004d04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d06:	4413      	add	r3, r2
 8004d08:	653b      	str	r3, [r7, #80]	; 0x50
 8004d0a:	463b      	mov	r3, r7
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	011a      	lsls	r2, r3, #4
 8004d12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d14:	4413      	add	r3, r2
 8004d16:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004d1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d20:	b29a      	uxth	r2, r3
 8004d22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d24:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004d26:	463b      	mov	r3, r7
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	891b      	ldrh	r3, [r3, #8]
 8004d2c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004d30:	463b      	mov	r3, r7
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	6959      	ldr	r1, [r3, #20]
 8004d36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004d40:	1d38      	adds	r0, r7, #4
 8004d42:	6800      	ldr	r0, [r0, #0]
 8004d44:	f001 f95b 	bl	8005ffe <USB_WritePMA>
            ep->xfer_buff += len;
 8004d48:	463b      	mov	r3, r7
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	695a      	ldr	r2, [r3, #20]
 8004d4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d52:	441a      	add	r2, r3
 8004d54:	463b      	mov	r3, r7
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004d5a:	463b      	mov	r3, r7
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	6a1a      	ldr	r2, [r3, #32]
 8004d60:	463b      	mov	r3, r7
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d909      	bls.n	8004d7e <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 8004d6a:	463b      	mov	r3, r7
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	6a1a      	ldr	r2, [r3, #32]
 8004d70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d74:	1ad2      	subs	r2, r2, r3
 8004d76:	463b      	mov	r3, r7
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	621a      	str	r2, [r3, #32]
 8004d7c:	e008      	b.n	8004d90 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8004d7e:	463b      	mov	r3, r7
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	6a1b      	ldr	r3, [r3, #32]
 8004d84:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8004d88:	463b      	mov	r3, r7
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004d90:	1d3b      	adds	r3, r7, #4
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	643b      	str	r3, [r7, #64]	; 0x40
 8004d96:	463b      	mov	r3, r7
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	785b      	ldrb	r3, [r3, #1]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d164      	bne.n	8004e6a <USB_EPStartXfer+0x6d6>
 8004da0:	1d3b      	adds	r3, r7, #4
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	63bb      	str	r3, [r7, #56]	; 0x38
 8004da6:	1d3b      	adds	r3, r7, #4
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	461a      	mov	r2, r3
 8004db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db4:	4413      	add	r3, r2
 8004db6:	63bb      	str	r3, [r7, #56]	; 0x38
 8004db8:	463b      	mov	r3, r7
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	011a      	lsls	r2, r3, #4
 8004dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dc2:	4413      	add	r3, r2
 8004dc4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004dc8:	637b      	str	r3, [r7, #52]	; 0x34
 8004dca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d112      	bne.n	8004df8 <USB_EPStartXfer+0x664>
 8004dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dd4:	881b      	ldrh	r3, [r3, #0]
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ddc:	b29a      	uxth	r2, r3
 8004dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004de0:	801a      	strh	r2, [r3, #0]
 8004de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004de4:	881b      	ldrh	r3, [r3, #0]
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004df0:	b29a      	uxth	r2, r3
 8004df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004df4:	801a      	strh	r2, [r3, #0]
 8004df6:	e054      	b.n	8004ea2 <USB_EPStartXfer+0x70e>
 8004df8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004dfc:	2b3e      	cmp	r3, #62	; 0x3e
 8004dfe:	d817      	bhi.n	8004e30 <USB_EPStartXfer+0x69c>
 8004e00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e04:	085b      	lsrs	r3, r3, #1
 8004e06:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004e0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e0e:	f003 0301 	and.w	r3, r3, #1
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d004      	beq.n	8004e20 <USB_EPStartXfer+0x68c>
 8004e16:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004e20:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	029b      	lsls	r3, r3, #10
 8004e28:	b29a      	uxth	r2, r3
 8004e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e2c:	801a      	strh	r2, [r3, #0]
 8004e2e:	e038      	b.n	8004ea2 <USB_EPStartXfer+0x70e>
 8004e30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e34:	095b      	lsrs	r3, r3, #5
 8004e36:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004e3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e3e:	f003 031f 	and.w	r3, r3, #31
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d104      	bne.n	8004e50 <USB_EPStartXfer+0x6bc>
 8004e46:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004e50:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	029b      	lsls	r3, r3, #10
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e62:	b29a      	uxth	r2, r3
 8004e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e66:	801a      	strh	r2, [r3, #0]
 8004e68:	e01b      	b.n	8004ea2 <USB_EPStartXfer+0x70e>
 8004e6a:	463b      	mov	r3, r7
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	785b      	ldrb	r3, [r3, #1]
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d116      	bne.n	8004ea2 <USB_EPStartXfer+0x70e>
 8004e74:	1d3b      	adds	r3, r7, #4
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	461a      	mov	r2, r3
 8004e80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e82:	4413      	add	r3, r2
 8004e84:	643b      	str	r3, [r7, #64]	; 0x40
 8004e86:	463b      	mov	r3, r7
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	011a      	lsls	r2, r3, #4
 8004e8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e90:	4413      	add	r3, r2
 8004e92:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004e96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e9c:	b29a      	uxth	r2, r3
 8004e9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ea0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004ea2:	463b      	mov	r3, r7
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	895b      	ldrh	r3, [r3, #10]
 8004ea8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004eac:	463b      	mov	r3, r7
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	6959      	ldr	r1, [r3, #20]
 8004eb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004ebc:	1d38      	adds	r0, r7, #4
 8004ebe:	6800      	ldr	r0, [r0, #0]
 8004ec0:	f001 f89d 	bl	8005ffe <USB_WritePMA>
 8004ec4:	e36c      	b.n	80055a0 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004ec6:	463b      	mov	r3, r7
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	6a1b      	ldr	r3, [r3, #32]
 8004ecc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8004ed0:	1d3b      	adds	r3, r7, #4
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	463b      	mov	r3, r7
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	4413      	add	r3, r2
 8004ede:	881b      	ldrh	r3, [r3, #0]
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004ee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eea:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004eee:	1d3b      	adds	r3, r7, #4
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	463b      	mov	r3, r7
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	441a      	add	r2, r3
 8004efc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004f00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004f14:	1d3b      	adds	r3, r7, #4
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f1a:	1d3b      	adds	r3, r7, #4
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	461a      	mov	r2, r3
 8004f26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f28:	4413      	add	r3, r2
 8004f2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f2c:	463b      	mov	r3, r7
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	011a      	lsls	r2, r3, #4
 8004f34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f36:	4413      	add	r3, r2
 8004f38:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f3c:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f42:	b29a      	uxth	r2, r3
 8004f44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f46:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004f48:	463b      	mov	r3, r7
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	891b      	ldrh	r3, [r3, #8]
 8004f4e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004f52:	463b      	mov	r3, r7
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	6959      	ldr	r1, [r3, #20]
 8004f58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004f62:	1d38      	adds	r0, r7, #4
 8004f64:	6800      	ldr	r0, [r0, #0]
 8004f66:	f001 f84a 	bl	8005ffe <USB_WritePMA>
 8004f6a:	e319      	b.n	80055a0 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8004f6c:	1d3b      	adds	r3, r7, #4
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	463b      	mov	r3, r7
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	4413      	add	r3, r2
 8004f7a:	881b      	ldrh	r3, [r3, #0]
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f86:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8004f8a:	1d3b      	adds	r3, r7, #4
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	463b      	mov	r3, r7
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	441a      	add	r2, r3
 8004f98:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8004f9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fa0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fa4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004fa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8004fb0:	463b      	mov	r3, r7
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	6a1a      	ldr	r2, [r3, #32]
 8004fb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fba:	1ad2      	subs	r2, r2, r3
 8004fbc:	463b      	mov	r3, r7
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004fc2:	1d3b      	adds	r3, r7, #4
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	463b      	mov	r3, r7
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	4413      	add	r3, r2
 8004fd0:	881b      	ldrh	r3, [r3, #0]
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	f000 8162 	beq.w	80052a2 <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004fde:	1d3b      	adds	r3, r7, #4
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004fe6:	463b      	mov	r3, r7
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	785b      	ldrb	r3, [r3, #1]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d164      	bne.n	80050ba <USB_EPStartXfer+0x926>
 8004ff0:	1d3b      	adds	r3, r7, #4
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ff6:	1d3b      	adds	r3, r7, #4
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	461a      	mov	r2, r3
 8005002:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005004:	4413      	add	r3, r2
 8005006:	67bb      	str	r3, [r7, #120]	; 0x78
 8005008:	463b      	mov	r3, r7
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	781b      	ldrb	r3, [r3, #0]
 800500e:	011a      	lsls	r2, r3, #4
 8005010:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005012:	4413      	add	r3, r2
 8005014:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005018:	677b      	str	r3, [r7, #116]	; 0x74
 800501a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800501e:	2b00      	cmp	r3, #0
 8005020:	d112      	bne.n	8005048 <USB_EPStartXfer+0x8b4>
 8005022:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005024:	881b      	ldrh	r3, [r3, #0]
 8005026:	b29b      	uxth	r3, r3
 8005028:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800502c:	b29a      	uxth	r2, r3
 800502e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005030:	801a      	strh	r2, [r3, #0]
 8005032:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005034:	881b      	ldrh	r3, [r3, #0]
 8005036:	b29b      	uxth	r3, r3
 8005038:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800503c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005040:	b29a      	uxth	r2, r3
 8005042:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005044:	801a      	strh	r2, [r3, #0]
 8005046:	e057      	b.n	80050f8 <USB_EPStartXfer+0x964>
 8005048:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800504c:	2b3e      	cmp	r3, #62	; 0x3e
 800504e:	d817      	bhi.n	8005080 <USB_EPStartXfer+0x8ec>
 8005050:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005054:	085b      	lsrs	r3, r3, #1
 8005056:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800505a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800505e:	f003 0301 	and.w	r3, r3, #1
 8005062:	2b00      	cmp	r3, #0
 8005064:	d004      	beq.n	8005070 <USB_EPStartXfer+0x8dc>
 8005066:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800506a:	3301      	adds	r3, #1
 800506c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005070:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005074:	b29b      	uxth	r3, r3
 8005076:	029b      	lsls	r3, r3, #10
 8005078:	b29a      	uxth	r2, r3
 800507a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800507c:	801a      	strh	r2, [r3, #0]
 800507e:	e03b      	b.n	80050f8 <USB_EPStartXfer+0x964>
 8005080:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005084:	095b      	lsrs	r3, r3, #5
 8005086:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800508a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800508e:	f003 031f 	and.w	r3, r3, #31
 8005092:	2b00      	cmp	r3, #0
 8005094:	d104      	bne.n	80050a0 <USB_EPStartXfer+0x90c>
 8005096:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800509a:	3b01      	subs	r3, #1
 800509c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80050a0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	029b      	lsls	r3, r3, #10
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050b2:	b29a      	uxth	r2, r3
 80050b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050b6:	801a      	strh	r2, [r3, #0]
 80050b8:	e01e      	b.n	80050f8 <USB_EPStartXfer+0x964>
 80050ba:	463b      	mov	r3, r7
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	785b      	ldrb	r3, [r3, #1]
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d119      	bne.n	80050f8 <USB_EPStartXfer+0x964>
 80050c4:	1d3b      	adds	r3, r7, #4
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	461a      	mov	r2, r3
 80050d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80050d4:	4413      	add	r3, r2
 80050d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80050da:	463b      	mov	r3, r7
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	011a      	lsls	r2, r3, #4
 80050e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80050e6:	4413      	add	r3, r2
 80050e8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80050ec:	67fb      	str	r3, [r7, #124]	; 0x7c
 80050ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050f2:	b29a      	uxth	r2, r3
 80050f4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80050f6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80050f8:	463b      	mov	r3, r7
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	895b      	ldrh	r3, [r3, #10]
 80050fe:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005102:	463b      	mov	r3, r7
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	6959      	ldr	r1, [r3, #20]
 8005108:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800510c:	b29b      	uxth	r3, r3
 800510e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005112:	1d38      	adds	r0, r7, #4
 8005114:	6800      	ldr	r0, [r0, #0]
 8005116:	f000 ff72 	bl	8005ffe <USB_WritePMA>
          ep->xfer_buff += len;
 800511a:	463b      	mov	r3, r7
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	695a      	ldr	r2, [r3, #20]
 8005120:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005124:	441a      	add	r2, r3
 8005126:	463b      	mov	r3, r7
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800512c:	463b      	mov	r3, r7
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	6a1a      	ldr	r2, [r3, #32]
 8005132:	463b      	mov	r3, r7
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	691b      	ldr	r3, [r3, #16]
 8005138:	429a      	cmp	r2, r3
 800513a:	d909      	bls.n	8005150 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 800513c:	463b      	mov	r3, r7
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	6a1a      	ldr	r2, [r3, #32]
 8005142:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005146:	1ad2      	subs	r2, r2, r3
 8005148:	463b      	mov	r3, r7
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	621a      	str	r2, [r3, #32]
 800514e:	e008      	b.n	8005162 <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8005150:	463b      	mov	r3, r7
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	6a1b      	ldr	r3, [r3, #32]
 8005156:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800515a:	463b      	mov	r3, r7
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	2200      	movs	r2, #0
 8005160:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005162:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005166:	2b00      	cmp	r3, #0
 8005168:	f000 821a 	beq.w	80055a0 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800516c:	463b      	mov	r3, r7
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	785b      	ldrb	r3, [r3, #1]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d164      	bne.n	8005240 <USB_EPStartXfer+0xaac>
 8005176:	1d3b      	adds	r3, r7, #4
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	66bb      	str	r3, [r7, #104]	; 0x68
 800517c:	1d3b      	adds	r3, r7, #4
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005184:	b29b      	uxth	r3, r3
 8005186:	461a      	mov	r2, r3
 8005188:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800518a:	4413      	add	r3, r2
 800518c:	66bb      	str	r3, [r7, #104]	; 0x68
 800518e:	463b      	mov	r3, r7
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	011a      	lsls	r2, r3, #4
 8005196:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005198:	4413      	add	r3, r2
 800519a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800519e:	667b      	str	r3, [r7, #100]	; 0x64
 80051a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d112      	bne.n	80051ce <USB_EPStartXfer+0xa3a>
 80051a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051aa:	881b      	ldrh	r3, [r3, #0]
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80051b2:	b29a      	uxth	r2, r3
 80051b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051b6:	801a      	strh	r2, [r3, #0]
 80051b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051ba:	881b      	ldrh	r3, [r3, #0]
 80051bc:	b29b      	uxth	r3, r3
 80051be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051c6:	b29a      	uxth	r2, r3
 80051c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051ca:	801a      	strh	r2, [r3, #0]
 80051cc:	e057      	b.n	800527e <USB_EPStartXfer+0xaea>
 80051ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051d2:	2b3e      	cmp	r3, #62	; 0x3e
 80051d4:	d817      	bhi.n	8005206 <USB_EPStartXfer+0xa72>
 80051d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051da:	085b      	lsrs	r3, r3, #1
 80051dc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80051e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051e4:	f003 0301 	and.w	r3, r3, #1
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d004      	beq.n	80051f6 <USB_EPStartXfer+0xa62>
 80051ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051f0:	3301      	adds	r3, #1
 80051f2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80051f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	029b      	lsls	r3, r3, #10
 80051fe:	b29a      	uxth	r2, r3
 8005200:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005202:	801a      	strh	r2, [r3, #0]
 8005204:	e03b      	b.n	800527e <USB_EPStartXfer+0xaea>
 8005206:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800520a:	095b      	lsrs	r3, r3, #5
 800520c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005210:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005214:	f003 031f 	and.w	r3, r3, #31
 8005218:	2b00      	cmp	r3, #0
 800521a:	d104      	bne.n	8005226 <USB_EPStartXfer+0xa92>
 800521c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005220:	3b01      	subs	r3, #1
 8005222:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005226:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800522a:	b29b      	uxth	r3, r3
 800522c:	029b      	lsls	r3, r3, #10
 800522e:	b29b      	uxth	r3, r3
 8005230:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005234:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005238:	b29a      	uxth	r2, r3
 800523a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800523c:	801a      	strh	r2, [r3, #0]
 800523e:	e01e      	b.n	800527e <USB_EPStartXfer+0xaea>
 8005240:	463b      	mov	r3, r7
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	785b      	ldrb	r3, [r3, #1]
 8005246:	2b01      	cmp	r3, #1
 8005248:	d119      	bne.n	800527e <USB_EPStartXfer+0xaea>
 800524a:	1d3b      	adds	r3, r7, #4
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	673b      	str	r3, [r7, #112]	; 0x70
 8005250:	1d3b      	adds	r3, r7, #4
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005258:	b29b      	uxth	r3, r3
 800525a:	461a      	mov	r2, r3
 800525c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800525e:	4413      	add	r3, r2
 8005260:	673b      	str	r3, [r7, #112]	; 0x70
 8005262:	463b      	mov	r3, r7
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	011a      	lsls	r2, r3, #4
 800526a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800526c:	4413      	add	r3, r2
 800526e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005272:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005274:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005278:	b29a      	uxth	r2, r3
 800527a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800527c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800527e:	463b      	mov	r3, r7
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	891b      	ldrh	r3, [r3, #8]
 8005284:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005288:	463b      	mov	r3, r7
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	6959      	ldr	r1, [r3, #20]
 800528e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005292:	b29b      	uxth	r3, r3
 8005294:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005298:	1d38      	adds	r0, r7, #4
 800529a:	6800      	ldr	r0, [r0, #0]
 800529c:	f000 feaf 	bl	8005ffe <USB_WritePMA>
 80052a0:	e17e      	b.n	80055a0 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80052a2:	463b      	mov	r3, r7
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	785b      	ldrb	r3, [r3, #1]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d16f      	bne.n	800538c <USB_EPStartXfer+0xbf8>
 80052ac:	1d3b      	adds	r3, r7, #4
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80052b4:	1d3b      	adds	r3, r7, #4
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052bc:	b29b      	uxth	r3, r3
 80052be:	461a      	mov	r2, r3
 80052c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80052c4:	4413      	add	r3, r2
 80052c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80052ca:	463b      	mov	r3, r7
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	011a      	lsls	r2, r3, #4
 80052d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80052d6:	4413      	add	r3, r2
 80052d8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80052dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80052e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d116      	bne.n	8005316 <USB_EPStartXfer+0xb82>
 80052e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80052ec:	881b      	ldrh	r3, [r3, #0]
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80052f4:	b29a      	uxth	r2, r3
 80052f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80052fa:	801a      	strh	r2, [r3, #0]
 80052fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005300:	881b      	ldrh	r3, [r3, #0]
 8005302:	b29b      	uxth	r3, r3
 8005304:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005308:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800530c:	b29a      	uxth	r2, r3
 800530e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005312:	801a      	strh	r2, [r3, #0]
 8005314:	e05f      	b.n	80053d6 <USB_EPStartXfer+0xc42>
 8005316:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800531a:	2b3e      	cmp	r3, #62	; 0x3e
 800531c:	d818      	bhi.n	8005350 <USB_EPStartXfer+0xbbc>
 800531e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005322:	085b      	lsrs	r3, r3, #1
 8005324:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005328:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800532c:	f003 0301 	and.w	r3, r3, #1
 8005330:	2b00      	cmp	r3, #0
 8005332:	d004      	beq.n	800533e <USB_EPStartXfer+0xbaa>
 8005334:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005338:	3301      	adds	r3, #1
 800533a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800533e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005342:	b29b      	uxth	r3, r3
 8005344:	029b      	lsls	r3, r3, #10
 8005346:	b29a      	uxth	r2, r3
 8005348:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800534c:	801a      	strh	r2, [r3, #0]
 800534e:	e042      	b.n	80053d6 <USB_EPStartXfer+0xc42>
 8005350:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005354:	095b      	lsrs	r3, r3, #5
 8005356:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800535a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800535e:	f003 031f 	and.w	r3, r3, #31
 8005362:	2b00      	cmp	r3, #0
 8005364:	d104      	bne.n	8005370 <USB_EPStartXfer+0xbdc>
 8005366:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800536a:	3b01      	subs	r3, #1
 800536c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005370:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005374:	b29b      	uxth	r3, r3
 8005376:	029b      	lsls	r3, r3, #10
 8005378:	b29b      	uxth	r3, r3
 800537a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800537e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005382:	b29a      	uxth	r2, r3
 8005384:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005388:	801a      	strh	r2, [r3, #0]
 800538a:	e024      	b.n	80053d6 <USB_EPStartXfer+0xc42>
 800538c:	463b      	mov	r3, r7
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	785b      	ldrb	r3, [r3, #1]
 8005392:	2b01      	cmp	r3, #1
 8005394:	d11f      	bne.n	80053d6 <USB_EPStartXfer+0xc42>
 8005396:	1d3b      	adds	r3, r7, #4
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800539e:	1d3b      	adds	r3, r7, #4
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	461a      	mov	r2, r3
 80053aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80053ae:	4413      	add	r3, r2
 80053b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80053b4:	463b      	mov	r3, r7
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	011a      	lsls	r2, r3, #4
 80053bc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80053c0:	4413      	add	r3, r2
 80053c2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80053c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80053ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053ce:	b29a      	uxth	r2, r3
 80053d0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80053d4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80053d6:	463b      	mov	r3, r7
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	891b      	ldrh	r3, [r3, #8]
 80053dc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80053e0:	463b      	mov	r3, r7
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	6959      	ldr	r1, [r3, #20]
 80053e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80053f0:	1d38      	adds	r0, r7, #4
 80053f2:	6800      	ldr	r0, [r0, #0]
 80053f4:	f000 fe03 	bl	8005ffe <USB_WritePMA>
          ep->xfer_buff += len;
 80053f8:	463b      	mov	r3, r7
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	695a      	ldr	r2, [r3, #20]
 80053fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005402:	441a      	add	r2, r3
 8005404:	463b      	mov	r3, r7
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800540a:	463b      	mov	r3, r7
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	6a1a      	ldr	r2, [r3, #32]
 8005410:	463b      	mov	r3, r7
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	429a      	cmp	r2, r3
 8005418:	d909      	bls.n	800542e <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 800541a:	463b      	mov	r3, r7
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	6a1a      	ldr	r2, [r3, #32]
 8005420:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005424:	1ad2      	subs	r2, r2, r3
 8005426:	463b      	mov	r3, r7
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	621a      	str	r2, [r3, #32]
 800542c:	e008      	b.n	8005440 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 800542e:	463b      	mov	r3, r7
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	6a1b      	ldr	r3, [r3, #32]
 8005434:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005438:	463b      	mov	r3, r7
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2200      	movs	r2, #0
 800543e:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005440:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005444:	2b00      	cmp	r3, #0
 8005446:	f000 80ab 	beq.w	80055a0 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800544a:	1d3b      	adds	r3, r7, #4
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005452:	463b      	mov	r3, r7
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	785b      	ldrb	r3, [r3, #1]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d16f      	bne.n	800553c <USB_EPStartXfer+0xda8>
 800545c:	1d3b      	adds	r3, r7, #4
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005464:	1d3b      	adds	r3, r7, #4
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800546c:	b29b      	uxth	r3, r3
 800546e:	461a      	mov	r2, r3
 8005470:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005474:	4413      	add	r3, r2
 8005476:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800547a:	463b      	mov	r3, r7
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	781b      	ldrb	r3, [r3, #0]
 8005480:	011a      	lsls	r2, r3, #4
 8005482:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005486:	4413      	add	r3, r2
 8005488:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800548c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005490:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005494:	2b00      	cmp	r3, #0
 8005496:	d116      	bne.n	80054c6 <USB_EPStartXfer+0xd32>
 8005498:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800549c:	881b      	ldrh	r3, [r3, #0]
 800549e:	b29b      	uxth	r3, r3
 80054a0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80054a4:	b29a      	uxth	r2, r3
 80054a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80054aa:	801a      	strh	r2, [r3, #0]
 80054ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80054b0:	881b      	ldrh	r3, [r3, #0]
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054bc:	b29a      	uxth	r2, r3
 80054be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80054c2:	801a      	strh	r2, [r3, #0]
 80054c4:	e05b      	b.n	800557e <USB_EPStartXfer+0xdea>
 80054c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054ca:	2b3e      	cmp	r3, #62	; 0x3e
 80054cc:	d818      	bhi.n	8005500 <USB_EPStartXfer+0xd6c>
 80054ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054d2:	085b      	lsrs	r3, r3, #1
 80054d4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80054d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054dc:	f003 0301 	and.w	r3, r3, #1
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d004      	beq.n	80054ee <USB_EPStartXfer+0xd5a>
 80054e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054e8:	3301      	adds	r3, #1
 80054ea:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80054ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	029b      	lsls	r3, r3, #10
 80054f6:	b29a      	uxth	r2, r3
 80054f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80054fc:	801a      	strh	r2, [r3, #0]
 80054fe:	e03e      	b.n	800557e <USB_EPStartXfer+0xdea>
 8005500:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005504:	095b      	lsrs	r3, r3, #5
 8005506:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800550a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800550e:	f003 031f 	and.w	r3, r3, #31
 8005512:	2b00      	cmp	r3, #0
 8005514:	d104      	bne.n	8005520 <USB_EPStartXfer+0xd8c>
 8005516:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800551a:	3b01      	subs	r3, #1
 800551c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005520:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005524:	b29b      	uxth	r3, r3
 8005526:	029b      	lsls	r3, r3, #10
 8005528:	b29b      	uxth	r3, r3
 800552a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800552e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005532:	b29a      	uxth	r2, r3
 8005534:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005538:	801a      	strh	r2, [r3, #0]
 800553a:	e020      	b.n	800557e <USB_EPStartXfer+0xdea>
 800553c:	463b      	mov	r3, r7
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	785b      	ldrb	r3, [r3, #1]
 8005542:	2b01      	cmp	r3, #1
 8005544:	d11b      	bne.n	800557e <USB_EPStartXfer+0xdea>
 8005546:	1d3b      	adds	r3, r7, #4
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800554e:	b29b      	uxth	r3, r3
 8005550:	461a      	mov	r2, r3
 8005552:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005556:	4413      	add	r3, r2
 8005558:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800555c:	463b      	mov	r3, r7
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	011a      	lsls	r2, r3, #4
 8005564:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005568:	4413      	add	r3, r2
 800556a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800556e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005572:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005576:	b29a      	uxth	r2, r3
 8005578:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800557c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800557e:	463b      	mov	r3, r7
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	895b      	ldrh	r3, [r3, #10]
 8005584:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005588:	463b      	mov	r3, r7
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	6959      	ldr	r1, [r3, #20]
 800558e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005592:	b29b      	uxth	r3, r3
 8005594:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005598:	1d38      	adds	r0, r7, #4
 800559a:	6800      	ldr	r0, [r0, #0]
 800559c:	f000 fd2f 	bl	8005ffe <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80055a0:	1d3b      	adds	r3, r7, #4
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	463b      	mov	r3, r7
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	4413      	add	r3, r2
 80055ae:	881b      	ldrh	r3, [r3, #0]
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	f107 020a 	add.w	r2, r7, #10
 80055b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055be:	8013      	strh	r3, [r2, #0]
 80055c0:	f107 030a 	add.w	r3, r7, #10
 80055c4:	f107 020a 	add.w	r2, r7, #10
 80055c8:	8812      	ldrh	r2, [r2, #0]
 80055ca:	f082 0210 	eor.w	r2, r2, #16
 80055ce:	801a      	strh	r2, [r3, #0]
 80055d0:	f107 030a 	add.w	r3, r7, #10
 80055d4:	f107 020a 	add.w	r2, r7, #10
 80055d8:	8812      	ldrh	r2, [r2, #0]
 80055da:	f082 0220 	eor.w	r2, r2, #32
 80055de:	801a      	strh	r2, [r3, #0]
 80055e0:	1d3b      	adds	r3, r7, #4
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	463b      	mov	r3, r7
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	441a      	add	r2, r3
 80055ee:	f107 030a 	add.w	r3, r7, #10
 80055f2:	881b      	ldrh	r3, [r3, #0]
 80055f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005600:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005604:	b29b      	uxth	r3, r3
 8005606:	8013      	strh	r3, [r2, #0]
 8005608:	e3b5      	b.n	8005d76 <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800560a:	463b      	mov	r3, r7
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	7b1b      	ldrb	r3, [r3, #12]
 8005610:	2b00      	cmp	r3, #0
 8005612:	f040 8090 	bne.w	8005736 <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005616:	463b      	mov	r3, r7
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	699a      	ldr	r2, [r3, #24]
 800561c:	463b      	mov	r3, r7
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	429a      	cmp	r2, r3
 8005624:	d90e      	bls.n	8005644 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 8005626:	463b      	mov	r3, r7
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	691b      	ldr	r3, [r3, #16]
 800562c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8005630:	463b      	mov	r3, r7
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	699a      	ldr	r2, [r3, #24]
 8005636:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800563a:	1ad2      	subs	r2, r2, r3
 800563c:	463b      	mov	r3, r7
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	619a      	str	r2, [r3, #24]
 8005642:	e008      	b.n	8005656 <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 8005644:	463b      	mov	r3, r7
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	699b      	ldr	r3, [r3, #24]
 800564a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 800564e:	463b      	mov	r3, r7
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	2200      	movs	r2, #0
 8005654:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005656:	1d3b      	adds	r3, r7, #4
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800565e:	1d3b      	adds	r3, r7, #4
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005666:	b29b      	uxth	r3, r3
 8005668:	461a      	mov	r2, r3
 800566a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800566e:	4413      	add	r3, r2
 8005670:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005674:	463b      	mov	r3, r7
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	011a      	lsls	r2, r3, #4
 800567c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005680:	4413      	add	r3, r2
 8005682:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005686:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800568a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800568e:	2b00      	cmp	r3, #0
 8005690:	d116      	bne.n	80056c0 <USB_EPStartXfer+0xf2c>
 8005692:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005696:	881b      	ldrh	r3, [r3, #0]
 8005698:	b29b      	uxth	r3, r3
 800569a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800569e:	b29a      	uxth	r2, r3
 80056a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80056a4:	801a      	strh	r2, [r3, #0]
 80056a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80056aa:	881b      	ldrh	r3, [r3, #0]
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056b6:	b29a      	uxth	r2, r3
 80056b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80056bc:	801a      	strh	r2, [r3, #0]
 80056be:	e32c      	b.n	8005d1a <USB_EPStartXfer+0x1586>
 80056c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056c4:	2b3e      	cmp	r3, #62	; 0x3e
 80056c6:	d818      	bhi.n	80056fa <USB_EPStartXfer+0xf66>
 80056c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056cc:	085b      	lsrs	r3, r3, #1
 80056ce:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80056d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056d6:	f003 0301 	and.w	r3, r3, #1
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d004      	beq.n	80056e8 <USB_EPStartXfer+0xf54>
 80056de:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80056e2:	3301      	adds	r3, #1
 80056e4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80056e8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	029b      	lsls	r3, r3, #10
 80056f0:	b29a      	uxth	r2, r3
 80056f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80056f6:	801a      	strh	r2, [r3, #0]
 80056f8:	e30f      	b.n	8005d1a <USB_EPStartXfer+0x1586>
 80056fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056fe:	095b      	lsrs	r3, r3, #5
 8005700:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005704:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005708:	f003 031f 	and.w	r3, r3, #31
 800570c:	2b00      	cmp	r3, #0
 800570e:	d104      	bne.n	800571a <USB_EPStartXfer+0xf86>
 8005710:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005714:	3b01      	subs	r3, #1
 8005716:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800571a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800571e:	b29b      	uxth	r3, r3
 8005720:	029b      	lsls	r3, r3, #10
 8005722:	b29b      	uxth	r3, r3
 8005724:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005728:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800572c:	b29a      	uxth	r2, r3
 800572e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005732:	801a      	strh	r2, [r3, #0]
 8005734:	e2f1      	b.n	8005d1a <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005736:	463b      	mov	r3, r7
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	78db      	ldrb	r3, [r3, #3]
 800573c:	2b02      	cmp	r3, #2
 800573e:	f040 818f 	bne.w	8005a60 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005742:	463b      	mov	r3, r7
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	785b      	ldrb	r3, [r3, #1]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d175      	bne.n	8005838 <USB_EPStartXfer+0x10a4>
 800574c:	1d3b      	adds	r3, r7, #4
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005754:	1d3b      	adds	r3, r7, #4
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800575c:	b29b      	uxth	r3, r3
 800575e:	461a      	mov	r2, r3
 8005760:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005764:	4413      	add	r3, r2
 8005766:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800576a:	463b      	mov	r3, r7
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	781b      	ldrb	r3, [r3, #0]
 8005770:	011a      	lsls	r2, r3, #4
 8005772:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005776:	4413      	add	r3, r2
 8005778:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800577c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005780:	463b      	mov	r3, r7
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	691b      	ldr	r3, [r3, #16]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d116      	bne.n	80057b8 <USB_EPStartXfer+0x1024>
 800578a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800578e:	881b      	ldrh	r3, [r3, #0]
 8005790:	b29b      	uxth	r3, r3
 8005792:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005796:	b29a      	uxth	r2, r3
 8005798:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800579c:	801a      	strh	r2, [r3, #0]
 800579e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80057a2:	881b      	ldrh	r3, [r3, #0]
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057ae:	b29a      	uxth	r2, r3
 80057b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80057b4:	801a      	strh	r2, [r3, #0]
 80057b6:	e065      	b.n	8005884 <USB_EPStartXfer+0x10f0>
 80057b8:	463b      	mov	r3, r7
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	2b3e      	cmp	r3, #62	; 0x3e
 80057c0:	d81a      	bhi.n	80057f8 <USB_EPStartXfer+0x1064>
 80057c2:	463b      	mov	r3, r7
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	691b      	ldr	r3, [r3, #16]
 80057c8:	085b      	lsrs	r3, r3, #1
 80057ca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80057ce:	463b      	mov	r3, r7
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	691b      	ldr	r3, [r3, #16]
 80057d4:	f003 0301 	and.w	r3, r3, #1
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d004      	beq.n	80057e6 <USB_EPStartXfer+0x1052>
 80057dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057e0:	3301      	adds	r3, #1
 80057e2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80057e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	029b      	lsls	r3, r3, #10
 80057ee:	b29a      	uxth	r2, r3
 80057f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80057f4:	801a      	strh	r2, [r3, #0]
 80057f6:	e045      	b.n	8005884 <USB_EPStartXfer+0x10f0>
 80057f8:	463b      	mov	r3, r7
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	095b      	lsrs	r3, r3, #5
 8005800:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005804:	463b      	mov	r3, r7
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	f003 031f 	and.w	r3, r3, #31
 800580e:	2b00      	cmp	r3, #0
 8005810:	d104      	bne.n	800581c <USB_EPStartXfer+0x1088>
 8005812:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005816:	3b01      	subs	r3, #1
 8005818:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800581c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005820:	b29b      	uxth	r3, r3
 8005822:	029b      	lsls	r3, r3, #10
 8005824:	b29b      	uxth	r3, r3
 8005826:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800582a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800582e:	b29a      	uxth	r2, r3
 8005830:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005834:	801a      	strh	r2, [r3, #0]
 8005836:	e025      	b.n	8005884 <USB_EPStartXfer+0x10f0>
 8005838:	463b      	mov	r3, r7
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	785b      	ldrb	r3, [r3, #1]
 800583e:	2b01      	cmp	r3, #1
 8005840:	d120      	bne.n	8005884 <USB_EPStartXfer+0x10f0>
 8005842:	1d3b      	adds	r3, r7, #4
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800584a:	1d3b      	adds	r3, r7, #4
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005852:	b29b      	uxth	r3, r3
 8005854:	461a      	mov	r2, r3
 8005856:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800585a:	4413      	add	r3, r2
 800585c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005860:	463b      	mov	r3, r7
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	011a      	lsls	r2, r3, #4
 8005868:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800586c:	4413      	add	r3, r2
 800586e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005872:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005876:	463b      	mov	r3, r7
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	691b      	ldr	r3, [r3, #16]
 800587c:	b29a      	uxth	r2, r3
 800587e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005882:	801a      	strh	r2, [r3, #0]
 8005884:	1d3b      	adds	r3, r7, #4
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800588c:	463b      	mov	r3, r7
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	785b      	ldrb	r3, [r3, #1]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d175      	bne.n	8005982 <USB_EPStartXfer+0x11ee>
 8005896:	1d3b      	adds	r3, r7, #4
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800589e:	1d3b      	adds	r3, r7, #4
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	461a      	mov	r2, r3
 80058aa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80058ae:	4413      	add	r3, r2
 80058b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80058b4:	463b      	mov	r3, r7
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	011a      	lsls	r2, r3, #4
 80058bc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80058c0:	4413      	add	r3, r2
 80058c2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80058c6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80058ca:	463b      	mov	r3, r7
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	691b      	ldr	r3, [r3, #16]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d116      	bne.n	8005902 <USB_EPStartXfer+0x116e>
 80058d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80058d8:	881b      	ldrh	r3, [r3, #0]
 80058da:	b29b      	uxth	r3, r3
 80058dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80058e0:	b29a      	uxth	r2, r3
 80058e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80058e6:	801a      	strh	r2, [r3, #0]
 80058e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80058ec:	881b      	ldrh	r3, [r3, #0]
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058f8:	b29a      	uxth	r2, r3
 80058fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80058fe:	801a      	strh	r2, [r3, #0]
 8005900:	e061      	b.n	80059c6 <USB_EPStartXfer+0x1232>
 8005902:	463b      	mov	r3, r7
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	691b      	ldr	r3, [r3, #16]
 8005908:	2b3e      	cmp	r3, #62	; 0x3e
 800590a:	d81a      	bhi.n	8005942 <USB_EPStartXfer+0x11ae>
 800590c:	463b      	mov	r3, r7
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	085b      	lsrs	r3, r3, #1
 8005914:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005918:	463b      	mov	r3, r7
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	691b      	ldr	r3, [r3, #16]
 800591e:	f003 0301 	and.w	r3, r3, #1
 8005922:	2b00      	cmp	r3, #0
 8005924:	d004      	beq.n	8005930 <USB_EPStartXfer+0x119c>
 8005926:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800592a:	3301      	adds	r3, #1
 800592c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005930:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005934:	b29b      	uxth	r3, r3
 8005936:	029b      	lsls	r3, r3, #10
 8005938:	b29a      	uxth	r2, r3
 800593a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800593e:	801a      	strh	r2, [r3, #0]
 8005940:	e041      	b.n	80059c6 <USB_EPStartXfer+0x1232>
 8005942:	463b      	mov	r3, r7
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	691b      	ldr	r3, [r3, #16]
 8005948:	095b      	lsrs	r3, r3, #5
 800594a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800594e:	463b      	mov	r3, r7
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	691b      	ldr	r3, [r3, #16]
 8005954:	f003 031f 	and.w	r3, r3, #31
 8005958:	2b00      	cmp	r3, #0
 800595a:	d104      	bne.n	8005966 <USB_EPStartXfer+0x11d2>
 800595c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005960:	3b01      	subs	r3, #1
 8005962:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005966:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800596a:	b29b      	uxth	r3, r3
 800596c:	029b      	lsls	r3, r3, #10
 800596e:	b29b      	uxth	r3, r3
 8005970:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005974:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005978:	b29a      	uxth	r2, r3
 800597a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800597e:	801a      	strh	r2, [r3, #0]
 8005980:	e021      	b.n	80059c6 <USB_EPStartXfer+0x1232>
 8005982:	463b      	mov	r3, r7
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	785b      	ldrb	r3, [r3, #1]
 8005988:	2b01      	cmp	r3, #1
 800598a:	d11c      	bne.n	80059c6 <USB_EPStartXfer+0x1232>
 800598c:	1d3b      	adds	r3, r7, #4
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005994:	b29b      	uxth	r3, r3
 8005996:	461a      	mov	r2, r3
 8005998:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800599c:	4413      	add	r3, r2
 800599e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80059a2:	463b      	mov	r3, r7
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	011a      	lsls	r2, r3, #4
 80059aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80059ae:	4413      	add	r3, r2
 80059b0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80059b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80059b8:	463b      	mov	r3, r7
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	691b      	ldr	r3, [r3, #16]
 80059be:	b29a      	uxth	r2, r3
 80059c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80059c4:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80059c6:	463b      	mov	r3, r7
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	69db      	ldr	r3, [r3, #28]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	f000 81a4 	beq.w	8005d1a <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80059d2:	1d3b      	adds	r3, r7, #4
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	463b      	mov	r3, r7
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	4413      	add	r3, r2
 80059e0:	881b      	ldrh	r3, [r3, #0]
 80059e2:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80059e6:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80059ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d005      	beq.n	80059fe <USB_EPStartXfer+0x126a>
 80059f2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80059f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d10d      	bne.n	8005a1a <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80059fe:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005a02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	f040 8187 	bne.w	8005d1a <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005a0c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	f040 8180 	bne.w	8005d1a <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005a1a:	1d3b      	adds	r3, r7, #4
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	463b      	mov	r3, r7
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	4413      	add	r3, r2
 8005a28:	881b      	ldrh	r3, [r3, #0]
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a34:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8005a38:	1d3b      	adds	r3, r7, #4
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	463b      	mov	r3, r7
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	441a      	add	r2, r3
 8005a46:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8005a4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a56:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	8013      	strh	r3, [r2, #0]
 8005a5e:	e15c      	b.n	8005d1a <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005a60:	463b      	mov	r3, r7
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	78db      	ldrb	r3, [r3, #3]
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	f040 8155 	bne.w	8005d16 <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005a6c:	463b      	mov	r3, r7
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	699a      	ldr	r2, [r3, #24]
 8005a72:	463b      	mov	r3, r7
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	691b      	ldr	r3, [r3, #16]
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d90e      	bls.n	8005a9a <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8005a7c:	463b      	mov	r3, r7
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	691b      	ldr	r3, [r3, #16]
 8005a82:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8005a86:	463b      	mov	r3, r7
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	699a      	ldr	r2, [r3, #24]
 8005a8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a90:	1ad2      	subs	r2, r2, r3
 8005a92:	463b      	mov	r3, r7
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	619a      	str	r2, [r3, #24]
 8005a98:	e008      	b.n	8005aac <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 8005a9a:	463b      	mov	r3, r7
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	699b      	ldr	r3, [r3, #24]
 8005aa0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8005aa4:	463b      	mov	r3, r7
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005aac:	463b      	mov	r3, r7
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	785b      	ldrb	r3, [r3, #1]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d16f      	bne.n	8005b96 <USB_EPStartXfer+0x1402>
 8005ab6:	1d3b      	adds	r3, r7, #4
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005abe:	1d3b      	adds	r3, r7, #4
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	461a      	mov	r2, r3
 8005aca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005ace:	4413      	add	r3, r2
 8005ad0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005ad4:	463b      	mov	r3, r7
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	011a      	lsls	r2, r3, #4
 8005adc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005ae0:	4413      	add	r3, r2
 8005ae2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ae6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005aea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d116      	bne.n	8005b20 <USB_EPStartXfer+0x138c>
 8005af2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005af6:	881b      	ldrh	r3, [r3, #0]
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005afe:	b29a      	uxth	r2, r3
 8005b00:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005b04:	801a      	strh	r2, [r3, #0]
 8005b06:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005b0a:	881b      	ldrh	r3, [r3, #0]
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b16:	b29a      	uxth	r2, r3
 8005b18:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005b1c:	801a      	strh	r2, [r3, #0]
 8005b1e:	e05f      	b.n	8005be0 <USB_EPStartXfer+0x144c>
 8005b20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b24:	2b3e      	cmp	r3, #62	; 0x3e
 8005b26:	d818      	bhi.n	8005b5a <USB_EPStartXfer+0x13c6>
 8005b28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b2c:	085b      	lsrs	r3, r3, #1
 8005b2e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005b32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b36:	f003 0301 	and.w	r3, r3, #1
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d004      	beq.n	8005b48 <USB_EPStartXfer+0x13b4>
 8005b3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b42:	3301      	adds	r3, #1
 8005b44:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005b48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	029b      	lsls	r3, r3, #10
 8005b50:	b29a      	uxth	r2, r3
 8005b52:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005b56:	801a      	strh	r2, [r3, #0]
 8005b58:	e042      	b.n	8005be0 <USB_EPStartXfer+0x144c>
 8005b5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b5e:	095b      	lsrs	r3, r3, #5
 8005b60:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005b64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b68:	f003 031f 	and.w	r3, r3, #31
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d104      	bne.n	8005b7a <USB_EPStartXfer+0x13e6>
 8005b70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b74:	3b01      	subs	r3, #1
 8005b76:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005b7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	029b      	lsls	r3, r3, #10
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b8c:	b29a      	uxth	r2, r3
 8005b8e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005b92:	801a      	strh	r2, [r3, #0]
 8005b94:	e024      	b.n	8005be0 <USB_EPStartXfer+0x144c>
 8005b96:	463b      	mov	r3, r7
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	785b      	ldrb	r3, [r3, #1]
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d11f      	bne.n	8005be0 <USB_EPStartXfer+0x144c>
 8005ba0:	1d3b      	adds	r3, r7, #4
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005ba8:	1d3b      	adds	r3, r7, #4
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bb8:	4413      	add	r3, r2
 8005bba:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005bbe:	463b      	mov	r3, r7
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	011a      	lsls	r2, r3, #4
 8005bc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bca:	4413      	add	r3, r2
 8005bcc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005bd0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005bd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bd8:	b29a      	uxth	r2, r3
 8005bda:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005bde:	801a      	strh	r2, [r3, #0]
 8005be0:	1d3b      	adds	r3, r7, #4
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005be8:	463b      	mov	r3, r7
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	785b      	ldrb	r3, [r3, #1]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d16f      	bne.n	8005cd2 <USB_EPStartXfer+0x153e>
 8005bf2:	1d3b      	adds	r3, r7, #4
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005bfa:	1d3b      	adds	r3, r7, #4
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	461a      	mov	r2, r3
 8005c06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c0a:	4413      	add	r3, r2
 8005c0c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005c10:	463b      	mov	r3, r7
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	011a      	lsls	r2, r3, #4
 8005c18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c1c:	4413      	add	r3, r2
 8005c1e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c22:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005c26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d116      	bne.n	8005c5c <USB_EPStartXfer+0x14c8>
 8005c2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c32:	881b      	ldrh	r3, [r3, #0]
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c3a:	b29a      	uxth	r2, r3
 8005c3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c40:	801a      	strh	r2, [r3, #0]
 8005c42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c46:	881b      	ldrh	r3, [r3, #0]
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c52:	b29a      	uxth	r2, r3
 8005c54:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c58:	801a      	strh	r2, [r3, #0]
 8005c5a:	e05e      	b.n	8005d1a <USB_EPStartXfer+0x1586>
 8005c5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c60:	2b3e      	cmp	r3, #62	; 0x3e
 8005c62:	d818      	bhi.n	8005c96 <USB_EPStartXfer+0x1502>
 8005c64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c68:	085b      	lsrs	r3, r3, #1
 8005c6a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005c6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c72:	f003 0301 	and.w	r3, r3, #1
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d004      	beq.n	8005c84 <USB_EPStartXfer+0x14f0>
 8005c7a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005c7e:	3301      	adds	r3, #1
 8005c80:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005c84:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	029b      	lsls	r3, r3, #10
 8005c8c:	b29a      	uxth	r2, r3
 8005c8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c92:	801a      	strh	r2, [r3, #0]
 8005c94:	e041      	b.n	8005d1a <USB_EPStartXfer+0x1586>
 8005c96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c9a:	095b      	lsrs	r3, r3, #5
 8005c9c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005ca0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ca4:	f003 031f 	and.w	r3, r3, #31
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d104      	bne.n	8005cb6 <USB_EPStartXfer+0x1522>
 8005cac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005cb0:	3b01      	subs	r3, #1
 8005cb2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005cb6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	029b      	lsls	r3, r3, #10
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cc8:	b29a      	uxth	r2, r3
 8005cca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005cce:	801a      	strh	r2, [r3, #0]
 8005cd0:	e023      	b.n	8005d1a <USB_EPStartXfer+0x1586>
 8005cd2:	463b      	mov	r3, r7
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	785b      	ldrb	r3, [r3, #1]
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d11e      	bne.n	8005d1a <USB_EPStartXfer+0x1586>
 8005cdc:	1d3b      	adds	r3, r7, #4
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cec:	4413      	add	r3, r2
 8005cee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005cf2:	463b      	mov	r3, r7
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	011a      	lsls	r2, r3, #4
 8005cfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cfe:	4413      	add	r3, r2
 8005d00:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005d08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d0c:	b29a      	uxth	r2, r3
 8005d0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d12:	801a      	strh	r2, [r3, #0]
 8005d14:	e001      	b.n	8005d1a <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e02e      	b.n	8005d78 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005d1a:	1d3b      	adds	r3, r7, #4
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	463b      	mov	r3, r7
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	4413      	add	r3, r2
 8005d28:	881b      	ldrh	r3, [r3, #0]
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d34:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005d38:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005d3c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005d40:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005d44:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005d48:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005d4c:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005d50:	1d3b      	adds	r3, r7, #4
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	463b      	mov	r3, r7
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	009b      	lsls	r3, r3, #2
 8005d5c:	441a      	add	r2, r3
 8005d5e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005d62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005d76:	2300      	movs	r3, #0
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}

08005d82 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005d82:	b480      	push	{r7}
 8005d84:	b085      	sub	sp, #20
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
 8005d8a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	785b      	ldrb	r3, [r3, #1]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d020      	beq.n	8005dd6 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	009b      	lsls	r3, r3, #2
 8005d9c:	4413      	add	r3, r2
 8005d9e:	881b      	ldrh	r3, [r3, #0]
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005da6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005daa:	81bb      	strh	r3, [r7, #12]
 8005dac:	89bb      	ldrh	r3, [r7, #12]
 8005dae:	f083 0310 	eor.w	r3, r3, #16
 8005db2:	81bb      	strh	r3, [r7, #12]
 8005db4:	687a      	ldr	r2, [r7, #4]
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	781b      	ldrb	r3, [r3, #0]
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	441a      	add	r2, r3
 8005dbe:	89bb      	ldrh	r3, [r7, #12]
 8005dc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	8013      	strh	r3, [r2, #0]
 8005dd4:	e01f      	b.n	8005e16 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	781b      	ldrb	r3, [r3, #0]
 8005ddc:	009b      	lsls	r3, r3, #2
 8005dde:	4413      	add	r3, r2
 8005de0:	881b      	ldrh	r3, [r3, #0]
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005de8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dec:	81fb      	strh	r3, [r7, #14]
 8005dee:	89fb      	ldrh	r3, [r7, #14]
 8005df0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005df4:	81fb      	strh	r3, [r7, #14]
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	009b      	lsls	r3, r3, #2
 8005dfe:	441a      	add	r2, r3
 8005e00:	89fb      	ldrh	r3, [r7, #14]
 8005e02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005e16:	2300      	movs	r3, #0
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3714      	adds	r7, #20
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bc80      	pop	{r7}
 8005e20:	4770      	bx	lr

08005e22 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005e22:	b480      	push	{r7}
 8005e24:	b087      	sub	sp, #28
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	6078      	str	r0, [r7, #4]
 8005e2a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	7b1b      	ldrb	r3, [r3, #12]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	f040 809d 	bne.w	8005f70 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	785b      	ldrb	r3, [r3, #1]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d04c      	beq.n	8005ed8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	4413      	add	r3, r2
 8005e48:	881b      	ldrh	r3, [r3, #0]
 8005e4a:	823b      	strh	r3, [r7, #16]
 8005e4c:	8a3b      	ldrh	r3, [r7, #16]
 8005e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d01b      	beq.n	8005e8e <USB_EPClearStall+0x6c>
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	4413      	add	r3, r2
 8005e60:	881b      	ldrh	r3, [r3, #0]
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e6c:	81fb      	strh	r3, [r7, #14]
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	441a      	add	r2, r3
 8005e78:	89fb      	ldrh	r3, [r7, #14]
 8005e7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e86:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	78db      	ldrb	r3, [r3, #3]
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d06c      	beq.n	8005f70 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	4413      	add	r3, r2
 8005ea0:	881b      	ldrh	r3, [r3, #0]
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ea8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005eac:	81bb      	strh	r3, [r7, #12]
 8005eae:	89bb      	ldrh	r3, [r7, #12]
 8005eb0:	f083 0320 	eor.w	r3, r3, #32
 8005eb4:	81bb      	strh	r3, [r7, #12]
 8005eb6:	687a      	ldr	r2, [r7, #4]
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	781b      	ldrb	r3, [r3, #0]
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	441a      	add	r2, r3
 8005ec0:	89bb      	ldrh	r3, [r7, #12]
 8005ec2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ec6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005eca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ece:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	8013      	strh	r3, [r2, #0]
 8005ed6:	e04b      	b.n	8005f70 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	009b      	lsls	r3, r3, #2
 8005ee0:	4413      	add	r3, r2
 8005ee2:	881b      	ldrh	r3, [r3, #0]
 8005ee4:	82fb      	strh	r3, [r7, #22]
 8005ee6:	8afb      	ldrh	r3, [r7, #22]
 8005ee8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d01b      	beq.n	8005f28 <USB_EPClearStall+0x106>
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	4413      	add	r3, r2
 8005efa:	881b      	ldrh	r3, [r3, #0]
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f06:	82bb      	strh	r3, [r7, #20]
 8005f08:	687a      	ldr	r2, [r7, #4]
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	009b      	lsls	r3, r3, #2
 8005f10:	441a      	add	r2, r3
 8005f12:	8abb      	ldrh	r3, [r7, #20]
 8005f14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	4413      	add	r3, r2
 8005f32:	881b      	ldrh	r3, [r3, #0]
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f3e:	827b      	strh	r3, [r7, #18]
 8005f40:	8a7b      	ldrh	r3, [r7, #18]
 8005f42:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005f46:	827b      	strh	r3, [r7, #18]
 8005f48:	8a7b      	ldrh	r3, [r7, #18]
 8005f4a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005f4e:	827b      	strh	r3, [r7, #18]
 8005f50:	687a      	ldr	r2, [r7, #4]
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	441a      	add	r2, r3
 8005f5a:	8a7b      	ldrh	r3, [r7, #18]
 8005f5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005f70:	2300      	movs	r3, #0
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	371c      	adds	r7, #28
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bc80      	pop	{r7}
 8005f7a:	4770      	bx	lr

08005f7c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b083      	sub	sp, #12
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	460b      	mov	r3, r1
 8005f86:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005f88:	78fb      	ldrb	r3, [r7, #3]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d103      	bne.n	8005f96 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2280      	movs	r2, #128	; 0x80
 8005f92:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005f96:	2300      	movs	r3, #0
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	370c      	adds	r7, #12
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bc80      	pop	{r7}
 8005fa0:	4770      	bx	lr

08005fa2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005fa2:	b480      	push	{r7}
 8005fa4:	b083      	sub	sp, #12
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005faa:	2300      	movs	r3, #0
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	370c      	adds	r7, #12
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bc80      	pop	{r7}
 8005fb4:	4770      	bx	lr

08005fb6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005fb6:	b480      	push	{r7}
 8005fb8:	b083      	sub	sp, #12
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005fbe:	2300      	movs	r3, #0
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	370c      	adds	r7, #12
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bc80      	pop	{r7}
 8005fc8:	4770      	bx	lr

08005fca <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8005fca:	b480      	push	{r7}
 8005fcc:	b085      	sub	sp, #20
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3714      	adds	r7, #20
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bc80      	pop	{r7}
 8005fe6:	4770      	bx	lr

08005fe8 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005ff2:	2300      	movs	r3, #0
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	370c      	adds	r7, #12
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bc80      	pop	{r7}
 8005ffc:	4770      	bx	lr

08005ffe <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005ffe:	b480      	push	{r7}
 8006000:	b08d      	sub	sp, #52	; 0x34
 8006002:	af00      	add	r7, sp, #0
 8006004:	60f8      	str	r0, [r7, #12]
 8006006:	60b9      	str	r1, [r7, #8]
 8006008:	4611      	mov	r1, r2
 800600a:	461a      	mov	r2, r3
 800600c:	460b      	mov	r3, r1
 800600e:	80fb      	strh	r3, [r7, #6]
 8006010:	4613      	mov	r3, r2
 8006012:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006014:	88bb      	ldrh	r3, [r7, #4]
 8006016:	3301      	adds	r3, #1
 8006018:	085b      	lsrs	r3, r3, #1
 800601a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006024:	88fb      	ldrh	r3, [r7, #6]
 8006026:	005a      	lsls	r2, r3, #1
 8006028:	69fb      	ldr	r3, [r7, #28]
 800602a:	4413      	add	r3, r2
 800602c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006030:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006032:	6a3b      	ldr	r3, [r7, #32]
 8006034:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006036:	e01e      	b.n	8006076 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800603e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006040:	3301      	adds	r3, #1
 8006042:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	b29b      	uxth	r3, r3
 800604a:	021b      	lsls	r3, r3, #8
 800604c:	b29b      	uxth	r3, r3
 800604e:	461a      	mov	r2, r3
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	4313      	orrs	r3, r2
 8006054:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	b29a      	uxth	r2, r3
 800605a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800605c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800605e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006060:	3302      	adds	r3, #2
 8006062:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006066:	3302      	adds	r3, #2
 8006068:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800606a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606c:	3301      	adds	r3, #1
 800606e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006072:	3b01      	subs	r3, #1
 8006074:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006078:	2b00      	cmp	r3, #0
 800607a:	d1dd      	bne.n	8006038 <USB_WritePMA+0x3a>
  }
}
 800607c:	bf00      	nop
 800607e:	bf00      	nop
 8006080:	3734      	adds	r7, #52	; 0x34
 8006082:	46bd      	mov	sp, r7
 8006084:	bc80      	pop	{r7}
 8006086:	4770      	bx	lr

08006088 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006088:	b480      	push	{r7}
 800608a:	b08b      	sub	sp, #44	; 0x2c
 800608c:	af00      	add	r7, sp, #0
 800608e:	60f8      	str	r0, [r7, #12]
 8006090:	60b9      	str	r1, [r7, #8]
 8006092:	4611      	mov	r1, r2
 8006094:	461a      	mov	r2, r3
 8006096:	460b      	mov	r3, r1
 8006098:	80fb      	strh	r3, [r7, #6]
 800609a:	4613      	mov	r3, r2
 800609c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800609e:	88bb      	ldrh	r3, [r7, #4]
 80060a0:	085b      	lsrs	r3, r3, #1
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80060ae:	88fb      	ldrh	r3, [r7, #6]
 80060b0:	005a      	lsls	r2, r3, #1
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	4413      	add	r3, r2
 80060b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060ba:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80060bc:	69bb      	ldr	r3, [r7, #24]
 80060be:	627b      	str	r3, [r7, #36]	; 0x24
 80060c0:	e01b      	b.n	80060fa <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80060c2:	6a3b      	ldr	r3, [r7, #32]
 80060c4:	881b      	ldrh	r3, [r3, #0]
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80060ca:	6a3b      	ldr	r3, [r7, #32]
 80060cc:	3302      	adds	r3, #2
 80060ce:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	b2da      	uxtb	r2, r3
 80060d4:	69fb      	ldr	r3, [r7, #28]
 80060d6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	3301      	adds	r3, #1
 80060dc:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	0a1b      	lsrs	r3, r3, #8
 80060e2:	b2da      	uxtb	r2, r3
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80060e8:	69fb      	ldr	r3, [r7, #28]
 80060ea:	3301      	adds	r3, #1
 80060ec:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80060ee:	6a3b      	ldr	r3, [r7, #32]
 80060f0:	3302      	adds	r3, #2
 80060f2:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80060f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f6:	3b01      	subs	r3, #1
 80060f8:	627b      	str	r3, [r7, #36]	; 0x24
 80060fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d1e0      	bne.n	80060c2 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006100:	88bb      	ldrh	r3, [r7, #4]
 8006102:	f003 0301 	and.w	r3, r3, #1
 8006106:	b29b      	uxth	r3, r3
 8006108:	2b00      	cmp	r3, #0
 800610a:	d007      	beq.n	800611c <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800610c:	6a3b      	ldr	r3, [r7, #32]
 800610e:	881b      	ldrh	r3, [r3, #0]
 8006110:	b29b      	uxth	r3, r3
 8006112:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	b2da      	uxtb	r2, r3
 8006118:	69fb      	ldr	r3, [r7, #28]
 800611a:	701a      	strb	r2, [r3, #0]
  }
}
 800611c:	bf00      	nop
 800611e:	372c      	adds	r7, #44	; 0x2c
 8006120:	46bd      	mov	sp, r7
 8006122:	bc80      	pop	{r7}
 8006124:	4770      	bx	lr

08006126 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006126:	b580      	push	{r7, lr}
 8006128:	b082      	sub	sp, #8
 800612a:	af00      	add	r7, sp, #0
 800612c:	6078      	str	r0, [r7, #4]
 800612e:	460b      	mov	r3, r1
 8006130:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8006132:	2304      	movs	r3, #4
 8006134:	2203      	movs	r2, #3
 8006136:	2181      	movs	r1, #129	; 0x81
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f001 fc62 	bl	8007a02 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2201      	movs	r2, #1
 8006142:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8006144:	2010      	movs	r0, #16
 8006146:	f001 fd71 	bl	8007c2c <USBD_static_malloc>
 800614a:	4602      	mov	r2, r0
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006158:	2b00      	cmp	r3, #0
 800615a:	d101      	bne.n	8006160 <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 800615c:	2302      	movs	r3, #2
 800615e:	e005      	b.n	800616c <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006166:	2200      	movs	r2, #0
 8006168:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 800616a:	2300      	movs	r3, #0
}
 800616c:	4618      	mov	r0, r3
 800616e:	3708      	adds	r7, #8
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}

08006174 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b082      	sub	sp, #8
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	460b      	mov	r3, r1
 800617e:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8006180:	2181      	movs	r1, #129	; 0x81
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f001 fc63 	bl	8007a4e <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2200      	movs	r2, #0
 800618c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006194:	2b00      	cmp	r3, #0
 8006196:	d009      	beq.n	80061ac <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800619e:	4618      	mov	r0, r3
 80061a0:	f001 fd50 	bl	8007c44 <USBD_static_free>
    pdev->pClassData = NULL;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2200      	movs	r2, #0
 80061a8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 80061ac:	2300      	movs	r3, #0
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3708      	adds	r7, #8
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
	...

080061b8 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b088      	sub	sp, #32
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061c8:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 80061ca:	2300      	movs	r3, #0
 80061cc:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 80061ce:	2300      	movs	r3, #0
 80061d0:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 80061d2:	2300      	movs	r3, #0
 80061d4:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 80061d6:	2300      	movs	r3, #0
 80061d8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	781b      	ldrb	r3, [r3, #0]
 80061de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d045      	beq.n	8006272 <USBD_HID_Setup+0xba>
 80061e6:	2b20      	cmp	r3, #32
 80061e8:	f040 80d3 	bne.w	8006392 <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	785b      	ldrb	r3, [r3, #1]
 80061f0:	3b02      	subs	r3, #2
 80061f2:	2b09      	cmp	r3, #9
 80061f4:	d835      	bhi.n	8006262 <USBD_HID_Setup+0xaa>
 80061f6:	a201      	add	r2, pc, #4	; (adr r2, 80061fc <USBD_HID_Setup+0x44>)
 80061f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061fc:	08006253 	.word	0x08006253
 8006200:	08006233 	.word	0x08006233
 8006204:	08006263 	.word	0x08006263
 8006208:	08006263 	.word	0x08006263
 800620c:	08006263 	.word	0x08006263
 8006210:	08006263 	.word	0x08006263
 8006214:	08006263 	.word	0x08006263
 8006218:	08006263 	.word	0x08006263
 800621c:	08006241 	.word	0x08006241
 8006220:	08006225 	.word	0x08006225
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	885b      	ldrh	r3, [r3, #2]
 8006228:	b2db      	uxtb	r3, r3
 800622a:	461a      	mov	r2, r3
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	601a      	str	r2, [r3, #0]
          break;
 8006230:	e01e      	b.n	8006270 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	2201      	movs	r2, #1
 8006236:	4619      	mov	r1, r3
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f001 f922 	bl	8007482 <USBD_CtlSendData>
          break;
 800623e:	e017      	b.n	8006270 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	885b      	ldrh	r3, [r3, #2]
 8006244:	0a1b      	lsrs	r3, r3, #8
 8006246:	b29b      	uxth	r3, r3
 8006248:	b2db      	uxtb	r3, r3
 800624a:	461a      	mov	r2, r3
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	605a      	str	r2, [r3, #4]
          break;
 8006250:	e00e      	b.n	8006270 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	3304      	adds	r3, #4
 8006256:	2201      	movs	r2, #1
 8006258:	4619      	mov	r1, r3
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f001 f911 	bl	8007482 <USBD_CtlSendData>
          break;
 8006260:	e006      	b.n	8006270 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 8006262:	6839      	ldr	r1, [r7, #0]
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f001 f8a2 	bl	80073ae <USBD_CtlError>
          ret = USBD_FAIL;
 800626a:	2302      	movs	r3, #2
 800626c:	75fb      	strb	r3, [r7, #23]
          break;
 800626e:	bf00      	nop
      }
      break;
 8006270:	e096      	b.n	80063a0 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	785b      	ldrb	r3, [r3, #1]
 8006276:	2b0b      	cmp	r3, #11
 8006278:	f200 8083 	bhi.w	8006382 <USBD_HID_Setup+0x1ca>
 800627c:	a201      	add	r2, pc, #4	; (adr r2, 8006284 <USBD_HID_Setup+0xcc>)
 800627e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006282:	bf00      	nop
 8006284:	080062b5 	.word	0x080062b5
 8006288:	08006383 	.word	0x08006383
 800628c:	08006383 	.word	0x08006383
 8006290:	08006383 	.word	0x08006383
 8006294:	08006383 	.word	0x08006383
 8006298:	08006383 	.word	0x08006383
 800629c:	080062dd 	.word	0x080062dd
 80062a0:	08006383 	.word	0x08006383
 80062a4:	08006383 	.word	0x08006383
 80062a8:	08006383 	.word	0x08006383
 80062ac:	08006335 	.word	0x08006335
 80062b0:	0800635d 	.word	0x0800635d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062ba:	2b03      	cmp	r3, #3
 80062bc:	d107      	bne.n	80062ce <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80062be:	f107 030e 	add.w	r3, r7, #14
 80062c2:	2202      	movs	r2, #2
 80062c4:	4619      	mov	r1, r3
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f001 f8db 	bl	8007482 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80062cc:	e060      	b.n	8006390 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 80062ce:	6839      	ldr	r1, [r7, #0]
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f001 f86c 	bl	80073ae <USBD_CtlError>
            ret = USBD_FAIL;
 80062d6:	2302      	movs	r3, #2
 80062d8:	75fb      	strb	r3, [r7, #23]
          break;
 80062da:	e059      	b.n	8006390 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	885b      	ldrh	r3, [r3, #2]
 80062e0:	0a1b      	lsrs	r3, r3, #8
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	2b22      	cmp	r3, #34	; 0x22
 80062e6:	d108      	bne.n	80062fa <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	88db      	ldrh	r3, [r3, #6]
 80062ec:	2b4a      	cmp	r3, #74	; 0x4a
 80062ee:	bf28      	it	cs
 80062f0:	234a      	movcs	r3, #74	; 0x4a
 80062f2:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 80062f4:	4b2d      	ldr	r3, [pc, #180]	; (80063ac <USBD_HID_Setup+0x1f4>)
 80062f6:	61bb      	str	r3, [r7, #24]
 80062f8:	e015      	b.n	8006326 <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	885b      	ldrh	r3, [r3, #2]
 80062fe:	0a1b      	lsrs	r3, r3, #8
 8006300:	b29b      	uxth	r3, r3
 8006302:	2b21      	cmp	r3, #33	; 0x21
 8006304:	d108      	bne.n	8006318 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 8006306:	4b2a      	ldr	r3, [pc, #168]	; (80063b0 <USBD_HID_Setup+0x1f8>)
 8006308:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	88db      	ldrh	r3, [r3, #6]
 800630e:	2b09      	cmp	r3, #9
 8006310:	bf28      	it	cs
 8006312:	2309      	movcs	r3, #9
 8006314:	83fb      	strh	r3, [r7, #30]
 8006316:	e006      	b.n	8006326 <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8006318:	6839      	ldr	r1, [r7, #0]
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f001 f847 	bl	80073ae <USBD_CtlError>
            ret = USBD_FAIL;
 8006320:	2302      	movs	r3, #2
 8006322:	75fb      	strb	r3, [r7, #23]
            break;
 8006324:	e034      	b.n	8006390 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 8006326:	8bfb      	ldrh	r3, [r7, #30]
 8006328:	461a      	mov	r2, r3
 800632a:	69b9      	ldr	r1, [r7, #24]
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f001 f8a8 	bl	8007482 <USBD_CtlSendData>
          break;
 8006332:	e02d      	b.n	8006390 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800633a:	2b03      	cmp	r3, #3
 800633c:	d107      	bne.n	800634e <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	3308      	adds	r3, #8
 8006342:	2201      	movs	r2, #1
 8006344:	4619      	mov	r1, r3
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f001 f89b 	bl	8007482 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800634c:	e020      	b.n	8006390 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800634e:	6839      	ldr	r1, [r7, #0]
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f001 f82c 	bl	80073ae <USBD_CtlError>
            ret = USBD_FAIL;
 8006356:	2302      	movs	r3, #2
 8006358:	75fb      	strb	r3, [r7, #23]
          break;
 800635a:	e019      	b.n	8006390 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006362:	2b03      	cmp	r3, #3
 8006364:	d106      	bne.n	8006374 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	885b      	ldrh	r3, [r3, #2]
 800636a:	b2db      	uxtb	r3, r3
 800636c:	461a      	mov	r2, r3
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006372:	e00d      	b.n	8006390 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8006374:	6839      	ldr	r1, [r7, #0]
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f001 f819 	bl	80073ae <USBD_CtlError>
            ret = USBD_FAIL;
 800637c:	2302      	movs	r3, #2
 800637e:	75fb      	strb	r3, [r7, #23]
          break;
 8006380:	e006      	b.n	8006390 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 8006382:	6839      	ldr	r1, [r7, #0]
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f001 f812 	bl	80073ae <USBD_CtlError>
          ret = USBD_FAIL;
 800638a:	2302      	movs	r3, #2
 800638c:	75fb      	strb	r3, [r7, #23]
          break;
 800638e:	bf00      	nop
      }
      break;
 8006390:	e006      	b.n	80063a0 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 8006392:	6839      	ldr	r1, [r7, #0]
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f001 f80a 	bl	80073ae <USBD_CtlError>
      ret = USBD_FAIL;
 800639a:	2302      	movs	r3, #2
 800639c:	75fb      	strb	r3, [r7, #23]
      break;
 800639e:	bf00      	nop
  }

  return ret;
 80063a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3720      	adds	r7, #32
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
 80063aa:	bf00      	nop
 80063ac:	200000c8 	.word	0x200000c8
 80063b0:	200000b0 	.word	0x200000b0

080063b4 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b083      	sub	sp, #12
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2222      	movs	r2, #34	; 0x22
 80063c0:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 80063c2:	4b03      	ldr	r3, [pc, #12]	; (80063d0 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	370c      	adds	r7, #12
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bc80      	pop	{r7}
 80063cc:	4770      	bx	lr
 80063ce:	bf00      	nop
 80063d0:	20000044 	.word	0x20000044

080063d4 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b083      	sub	sp, #12
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2222      	movs	r2, #34	; 0x22
 80063e0:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 80063e2:	4b03      	ldr	r3, [pc, #12]	; (80063f0 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	370c      	adds	r7, #12
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bc80      	pop	{r7}
 80063ec:	4770      	bx	lr
 80063ee:	bf00      	nop
 80063f0:	20000068 	.word	0x20000068

080063f4 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2222      	movs	r2, #34	; 0x22
 8006400:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 8006402:	4b03      	ldr	r3, [pc, #12]	; (8006410 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8006404:	4618      	mov	r0, r3
 8006406:	370c      	adds	r7, #12
 8006408:	46bd      	mov	sp, r7
 800640a:	bc80      	pop	{r7}
 800640c:	4770      	bx	lr
 800640e:	bf00      	nop
 8006410:	2000008c 	.word	0x2000008c

08006414 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8006414:	b480      	push	{r7}
 8006416:	b083      	sub	sp, #12
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	460b      	mov	r3, r1
 800641e:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006426:	2200      	movs	r2, #0
 8006428:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 800642a:	2300      	movs	r3, #0
}
 800642c:	4618      	mov	r0, r3
 800642e:	370c      	adds	r7, #12
 8006430:	46bd      	mov	sp, r7
 8006432:	bc80      	pop	{r7}
 8006434:	4770      	bx	lr
	...

08006438 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8006438:	b480      	push	{r7}
 800643a:	b083      	sub	sp, #12
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	220a      	movs	r2, #10
 8006444:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8006446:	4b03      	ldr	r3, [pc, #12]	; (8006454 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8006448:	4618      	mov	r0, r3
 800644a:	370c      	adds	r7, #12
 800644c:	46bd      	mov	sp, r7
 800644e:	bc80      	pop	{r7}
 8006450:	4770      	bx	lr
 8006452:	bf00      	nop
 8006454:	200000bc 	.word	0x200000bc

08006458 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b084      	sub	sp, #16
 800645c:	af00      	add	r7, sp, #0
 800645e:	60f8      	str	r0, [r7, #12]
 8006460:	60b9      	str	r1, [r7, #8]
 8006462:	4613      	mov	r3, r2
 8006464:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d101      	bne.n	8006470 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800646c:	2302      	movs	r3, #2
 800646e:	e01a      	b.n	80064a6 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006476:	2b00      	cmp	r3, #0
 8006478:	d003      	beq.n	8006482 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2200      	movs	r2, #0
 800647e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d003      	beq.n	8006490 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	68ba      	ldr	r2, [r7, #8]
 800648c:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2201      	movs	r2, #1
 8006494:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	79fa      	ldrb	r2, [r7, #7]
 800649c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800649e:	68f8      	ldr	r0, [r7, #12]
 80064a0:	f001 fa4c 	bl	800793c <USBD_LL_Init>

  return USBD_OK;
 80064a4:	2300      	movs	r3, #0
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3710      	adds	r7, #16
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}

080064ae <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80064ae:	b480      	push	{r7}
 80064b0:	b085      	sub	sp, #20
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	6078      	str	r0, [r7, #4]
 80064b6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80064b8:	2300      	movs	r3, #0
 80064ba:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d006      	beq.n	80064d0 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	683a      	ldr	r2, [r7, #0]
 80064c6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80064ca:	2300      	movs	r3, #0
 80064cc:	73fb      	strb	r3, [r7, #15]
 80064ce:	e001      	b.n	80064d4 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80064d0:	2302      	movs	r3, #2
 80064d2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80064d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3714      	adds	r7, #20
 80064da:	46bd      	mov	sp, r7
 80064dc:	bc80      	pop	{r7}
 80064de:	4770      	bx	lr

080064e0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b082      	sub	sp, #8
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f001 fa6f 	bl	80079cc <USBD_LL_Start>

  return USBD_OK;
 80064ee:	2300      	movs	r3, #0
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3708      	adds	r7, #8
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}

080064f8 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b083      	sub	sp, #12
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006500:	2300      	movs	r3, #0
}
 8006502:	4618      	mov	r0, r3
 8006504:	370c      	adds	r7, #12
 8006506:	46bd      	mov	sp, r7
 8006508:	bc80      	pop	{r7}
 800650a:	4770      	bx	lr

0800650c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b084      	sub	sp, #16
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	460b      	mov	r3, r1
 8006516:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006518:	2302      	movs	r3, #2
 800651a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006522:	2b00      	cmp	r3, #0
 8006524:	d00c      	beq.n	8006540 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	78fa      	ldrb	r2, [r7, #3]
 8006530:	4611      	mov	r1, r2
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	4798      	blx	r3
 8006536:	4603      	mov	r3, r0
 8006538:	2b00      	cmp	r3, #0
 800653a:	d101      	bne.n	8006540 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800653c:	2300      	movs	r3, #0
 800653e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006540:	7bfb      	ldrb	r3, [r7, #15]
}
 8006542:	4618      	mov	r0, r3
 8006544:	3710      	adds	r7, #16
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}

0800654a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800654a:	b580      	push	{r7, lr}
 800654c:	b082      	sub	sp, #8
 800654e:	af00      	add	r7, sp, #0
 8006550:	6078      	str	r0, [r7, #4]
 8006552:	460b      	mov	r3, r1
 8006554:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	78fa      	ldrb	r2, [r7, #3]
 8006560:	4611      	mov	r1, r2
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	4798      	blx	r3

  return USBD_OK;
 8006566:	2300      	movs	r3, #0
}
 8006568:	4618      	mov	r0, r3
 800656a:	3708      	adds	r7, #8
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}

08006570 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b082      	sub	sp, #8
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006580:	6839      	ldr	r1, [r7, #0]
 8006582:	4618      	mov	r0, r3
 8006584:	f000 fed7 	bl	8007336 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2201      	movs	r2, #1
 800658c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006596:	461a      	mov	r2, r3
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80065a4:	f003 031f 	and.w	r3, r3, #31
 80065a8:	2b02      	cmp	r3, #2
 80065aa:	d016      	beq.n	80065da <USBD_LL_SetupStage+0x6a>
 80065ac:	2b02      	cmp	r3, #2
 80065ae:	d81c      	bhi.n	80065ea <USBD_LL_SetupStage+0x7a>
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d002      	beq.n	80065ba <USBD_LL_SetupStage+0x4a>
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d008      	beq.n	80065ca <USBD_LL_SetupStage+0x5a>
 80065b8:	e017      	b.n	80065ea <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80065c0:	4619      	mov	r1, r3
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f000 f9ca 	bl	800695c <USBD_StdDevReq>
      break;
 80065c8:	e01a      	b.n	8006600 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80065d0:	4619      	mov	r1, r3
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f000 fa2c 	bl	8006a30 <USBD_StdItfReq>
      break;
 80065d8:	e012      	b.n	8006600 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80065e0:	4619      	mov	r1, r3
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f000 fa6c 	bl	8006ac0 <USBD_StdEPReq>
      break;
 80065e8:	e00a      	b.n	8006600 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80065f0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80065f4:	b2db      	uxtb	r3, r3
 80065f6:	4619      	mov	r1, r3
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f001 fa47 	bl	8007a8c <USBD_LL_StallEP>
      break;
 80065fe:	bf00      	nop
  }

  return USBD_OK;
 8006600:	2300      	movs	r3, #0
}
 8006602:	4618      	mov	r0, r3
 8006604:	3708      	adds	r7, #8
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}

0800660a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800660a:	b580      	push	{r7, lr}
 800660c:	b086      	sub	sp, #24
 800660e:	af00      	add	r7, sp, #0
 8006610:	60f8      	str	r0, [r7, #12]
 8006612:	460b      	mov	r3, r1
 8006614:	607a      	str	r2, [r7, #4]
 8006616:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006618:	7afb      	ldrb	r3, [r7, #11]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d14b      	bne.n	80066b6 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006624:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800662c:	2b03      	cmp	r3, #3
 800662e:	d134      	bne.n	800669a <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	68da      	ldr	r2, [r3, #12]
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	691b      	ldr	r3, [r3, #16]
 8006638:	429a      	cmp	r2, r3
 800663a:	d919      	bls.n	8006670 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	68da      	ldr	r2, [r3, #12]
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	691b      	ldr	r3, [r3, #16]
 8006644:	1ad2      	subs	r2, r2, r3
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	68da      	ldr	r2, [r3, #12]
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006652:	429a      	cmp	r2, r3
 8006654:	d203      	bcs.n	800665e <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800665a:	b29b      	uxth	r3, r3
 800665c:	e002      	b.n	8006664 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006662:	b29b      	uxth	r3, r3
 8006664:	461a      	mov	r2, r3
 8006666:	6879      	ldr	r1, [r7, #4]
 8006668:	68f8      	ldr	r0, [r7, #12]
 800666a:	f000 ff38 	bl	80074de <USBD_CtlContinueRx>
 800666e:	e038      	b.n	80066e2 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006676:	691b      	ldr	r3, [r3, #16]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d00a      	beq.n	8006692 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006682:	2b03      	cmp	r3, #3
 8006684:	d105      	bne.n	8006692 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800668c:	691b      	ldr	r3, [r3, #16]
 800668e:	68f8      	ldr	r0, [r7, #12]
 8006690:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006692:	68f8      	ldr	r0, [r7, #12]
 8006694:	f000 ff35 	bl	8007502 <USBD_CtlSendStatus>
 8006698:	e023      	b.n	80066e2 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80066a0:	2b05      	cmp	r3, #5
 80066a2:	d11e      	bne.n	80066e2 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2200      	movs	r2, #0
 80066a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80066ac:	2100      	movs	r1, #0
 80066ae:	68f8      	ldr	r0, [r7, #12]
 80066b0:	f001 f9ec 	bl	8007a8c <USBD_LL_StallEP>
 80066b4:	e015      	b.n	80066e2 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066bc:	699b      	ldr	r3, [r3, #24]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d00d      	beq.n	80066de <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80066c8:	2b03      	cmp	r3, #3
 80066ca:	d108      	bne.n	80066de <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066d2:	699b      	ldr	r3, [r3, #24]
 80066d4:	7afa      	ldrb	r2, [r7, #11]
 80066d6:	4611      	mov	r1, r2
 80066d8:	68f8      	ldr	r0, [r7, #12]
 80066da:	4798      	blx	r3
 80066dc:	e001      	b.n	80066e2 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80066de:	2302      	movs	r3, #2
 80066e0:	e000      	b.n	80066e4 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80066e2:	2300      	movs	r3, #0
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3718      	adds	r7, #24
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}

080066ec <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b086      	sub	sp, #24
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	60f8      	str	r0, [r7, #12]
 80066f4:	460b      	mov	r3, r1
 80066f6:	607a      	str	r2, [r7, #4]
 80066f8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80066fa:	7afb      	ldrb	r3, [r7, #11]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d17f      	bne.n	8006800 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	3314      	adds	r3, #20
 8006704:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800670c:	2b02      	cmp	r3, #2
 800670e:	d15c      	bne.n	80067ca <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	68da      	ldr	r2, [r3, #12]
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	691b      	ldr	r3, [r3, #16]
 8006718:	429a      	cmp	r2, r3
 800671a:	d915      	bls.n	8006748 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	68da      	ldr	r2, [r3, #12]
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	691b      	ldr	r3, [r3, #16]
 8006724:	1ad2      	subs	r2, r2, r3
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	68db      	ldr	r3, [r3, #12]
 800672e:	b29b      	uxth	r3, r3
 8006730:	461a      	mov	r2, r3
 8006732:	6879      	ldr	r1, [r7, #4]
 8006734:	68f8      	ldr	r0, [r7, #12]
 8006736:	f000 fec0 	bl	80074ba <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800673a:	2300      	movs	r3, #0
 800673c:	2200      	movs	r2, #0
 800673e:	2100      	movs	r1, #0
 8006740:	68f8      	ldr	r0, [r7, #12]
 8006742:	f001 fa4f 	bl	8007be4 <USBD_LL_PrepareReceive>
 8006746:	e04e      	b.n	80067e6 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	697a      	ldr	r2, [r7, #20]
 800674e:	6912      	ldr	r2, [r2, #16]
 8006750:	fbb3 f1f2 	udiv	r1, r3, r2
 8006754:	fb02 f201 	mul.w	r2, r2, r1
 8006758:	1a9b      	subs	r3, r3, r2
 800675a:	2b00      	cmp	r3, #0
 800675c:	d11c      	bne.n	8006798 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	689a      	ldr	r2, [r3, #8]
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006766:	429a      	cmp	r2, r3
 8006768:	d316      	bcc.n	8006798 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	689a      	ldr	r2, [r3, #8]
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006774:	429a      	cmp	r2, r3
 8006776:	d20f      	bcs.n	8006798 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006778:	2200      	movs	r2, #0
 800677a:	2100      	movs	r1, #0
 800677c:	68f8      	ldr	r0, [r7, #12]
 800677e:	f000 fe9c 	bl	80074ba <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2200      	movs	r2, #0
 8006786:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800678a:	2300      	movs	r3, #0
 800678c:	2200      	movs	r2, #0
 800678e:	2100      	movs	r1, #0
 8006790:	68f8      	ldr	r0, [r7, #12]
 8006792:	f001 fa27 	bl	8007be4 <USBD_LL_PrepareReceive>
 8006796:	e026      	b.n	80067e6 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800679e:	68db      	ldr	r3, [r3, #12]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d00a      	beq.n	80067ba <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80067aa:	2b03      	cmp	r3, #3
 80067ac:	d105      	bne.n	80067ba <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067b4:	68db      	ldr	r3, [r3, #12]
 80067b6:	68f8      	ldr	r0, [r7, #12]
 80067b8:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80067ba:	2180      	movs	r1, #128	; 0x80
 80067bc:	68f8      	ldr	r0, [r7, #12]
 80067be:	f001 f965 	bl	8007a8c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80067c2:	68f8      	ldr	r0, [r7, #12]
 80067c4:	f000 feb0 	bl	8007528 <USBD_CtlReceiveStatus>
 80067c8:	e00d      	b.n	80067e6 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80067d0:	2b04      	cmp	r3, #4
 80067d2:	d004      	beq.n	80067de <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d103      	bne.n	80067e6 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80067de:	2180      	movs	r1, #128	; 0x80
 80067e0:	68f8      	ldr	r0, [r7, #12]
 80067e2:	f001 f953 	bl	8007a8c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d11d      	bne.n	800682c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80067f0:	68f8      	ldr	r0, [r7, #12]
 80067f2:	f7ff fe81 	bl	80064f8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2200      	movs	r2, #0
 80067fa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80067fe:	e015      	b.n	800682c <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006806:	695b      	ldr	r3, [r3, #20]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d00d      	beq.n	8006828 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006812:	2b03      	cmp	r3, #3
 8006814:	d108      	bne.n	8006828 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800681c:	695b      	ldr	r3, [r3, #20]
 800681e:	7afa      	ldrb	r2, [r7, #11]
 8006820:	4611      	mov	r1, r2
 8006822:	68f8      	ldr	r0, [r7, #12]
 8006824:	4798      	blx	r3
 8006826:	e001      	b.n	800682c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006828:	2302      	movs	r3, #2
 800682a:	e000      	b.n	800682e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800682c:	2300      	movs	r3, #0
}
 800682e:	4618      	mov	r0, r3
 8006830:	3718      	adds	r7, #24
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}

08006836 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006836:	b580      	push	{r7, lr}
 8006838:	b082      	sub	sp, #8
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800683e:	2340      	movs	r3, #64	; 0x40
 8006840:	2200      	movs	r2, #0
 8006842:	2100      	movs	r1, #0
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f001 f8dc 	bl	8007a02 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2201      	movs	r2, #1
 800684e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2240      	movs	r2, #64	; 0x40
 8006856:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800685a:	2340      	movs	r3, #64	; 0x40
 800685c:	2200      	movs	r2, #0
 800685e:	2180      	movs	r1, #128	; 0x80
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f001 f8ce 	bl	8007a02 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2201      	movs	r2, #1
 800686a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2240      	movs	r2, #64	; 0x40
 8006870:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2201      	movs	r2, #1
 8006876:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2200      	movs	r2, #0
 800687e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2200      	movs	r2, #0
 8006886:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006896:	2b00      	cmp	r3, #0
 8006898:	d009      	beq.n	80068ae <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	6852      	ldr	r2, [r2, #4]
 80068a6:	b2d2      	uxtb	r2, r2
 80068a8:	4611      	mov	r1, r2
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	4798      	blx	r3
  }

  return USBD_OK;
 80068ae:	2300      	movs	r3, #0
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3708      	adds	r7, #8
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}

080068b8 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b083      	sub	sp, #12
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	460b      	mov	r3, r1
 80068c2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	78fa      	ldrb	r2, [r7, #3]
 80068c8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80068ca:	2300      	movs	r3, #0
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	370c      	adds	r7, #12
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bc80      	pop	{r7}
 80068d4:	4770      	bx	lr

080068d6 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80068d6:	b480      	push	{r7}
 80068d8:	b083      	sub	sp, #12
 80068da:	af00      	add	r7, sp, #0
 80068dc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2204      	movs	r2, #4
 80068ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80068f2:	2300      	movs	r3, #0
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	370c      	adds	r7, #12
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bc80      	pop	{r7}
 80068fc:	4770      	bx	lr

080068fe <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80068fe:	b480      	push	{r7}
 8006900:	b083      	sub	sp, #12
 8006902:	af00      	add	r7, sp, #0
 8006904:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800690c:	2b04      	cmp	r3, #4
 800690e:	d105      	bne.n	800691c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800691c:	2300      	movs	r3, #0
}
 800691e:	4618      	mov	r0, r3
 8006920:	370c      	adds	r7, #12
 8006922:	46bd      	mov	sp, r7
 8006924:	bc80      	pop	{r7}
 8006926:	4770      	bx	lr

08006928 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b082      	sub	sp, #8
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006936:	2b03      	cmp	r3, #3
 8006938:	d10b      	bne.n	8006952 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006940:	69db      	ldr	r3, [r3, #28]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d005      	beq.n	8006952 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800694c:	69db      	ldr	r3, [r3, #28]
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006952:	2300      	movs	r3, #0
}
 8006954:	4618      	mov	r0, r3
 8006956:	3708      	adds	r7, #8
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}

0800695c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b084      	sub	sp, #16
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006966:	2300      	movs	r3, #0
 8006968:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006972:	2b40      	cmp	r3, #64	; 0x40
 8006974:	d005      	beq.n	8006982 <USBD_StdDevReq+0x26>
 8006976:	2b40      	cmp	r3, #64	; 0x40
 8006978:	d84f      	bhi.n	8006a1a <USBD_StdDevReq+0xbe>
 800697a:	2b00      	cmp	r3, #0
 800697c:	d009      	beq.n	8006992 <USBD_StdDevReq+0x36>
 800697e:	2b20      	cmp	r3, #32
 8006980:	d14b      	bne.n	8006a1a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	6839      	ldr	r1, [r7, #0]
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	4798      	blx	r3
      break;
 8006990:	e048      	b.n	8006a24 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	785b      	ldrb	r3, [r3, #1]
 8006996:	2b09      	cmp	r3, #9
 8006998:	d839      	bhi.n	8006a0e <USBD_StdDevReq+0xb2>
 800699a:	a201      	add	r2, pc, #4	; (adr r2, 80069a0 <USBD_StdDevReq+0x44>)
 800699c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069a0:	080069f1 	.word	0x080069f1
 80069a4:	08006a05 	.word	0x08006a05
 80069a8:	08006a0f 	.word	0x08006a0f
 80069ac:	080069fb 	.word	0x080069fb
 80069b0:	08006a0f 	.word	0x08006a0f
 80069b4:	080069d3 	.word	0x080069d3
 80069b8:	080069c9 	.word	0x080069c9
 80069bc:	08006a0f 	.word	0x08006a0f
 80069c0:	080069e7 	.word	0x080069e7
 80069c4:	080069dd 	.word	0x080069dd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80069c8:	6839      	ldr	r1, [r7, #0]
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f000 f9dc 	bl	8006d88 <USBD_GetDescriptor>
          break;
 80069d0:	e022      	b.n	8006a18 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80069d2:	6839      	ldr	r1, [r7, #0]
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f000 fb3f 	bl	8007058 <USBD_SetAddress>
          break;
 80069da:	e01d      	b.n	8006a18 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80069dc:	6839      	ldr	r1, [r7, #0]
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 fb7e 	bl	80070e0 <USBD_SetConfig>
          break;
 80069e4:	e018      	b.n	8006a18 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80069e6:	6839      	ldr	r1, [r7, #0]
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f000 fc07 	bl	80071fc <USBD_GetConfig>
          break;
 80069ee:	e013      	b.n	8006a18 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80069f0:	6839      	ldr	r1, [r7, #0]
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 fc37 	bl	8007266 <USBD_GetStatus>
          break;
 80069f8:	e00e      	b.n	8006a18 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80069fa:	6839      	ldr	r1, [r7, #0]
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f000 fc65 	bl	80072cc <USBD_SetFeature>
          break;
 8006a02:	e009      	b.n	8006a18 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006a04:	6839      	ldr	r1, [r7, #0]
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 fc74 	bl	80072f4 <USBD_ClrFeature>
          break;
 8006a0c:	e004      	b.n	8006a18 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006a0e:	6839      	ldr	r1, [r7, #0]
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f000 fccc 	bl	80073ae <USBD_CtlError>
          break;
 8006a16:	bf00      	nop
      }
      break;
 8006a18:	e004      	b.n	8006a24 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006a1a:	6839      	ldr	r1, [r7, #0]
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f000 fcc6 	bl	80073ae <USBD_CtlError>
      break;
 8006a22:	bf00      	nop
  }

  return ret;
 8006a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3710      	adds	r7, #16
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	bf00      	nop

08006a30 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b084      	sub	sp, #16
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a46:	2b40      	cmp	r3, #64	; 0x40
 8006a48:	d005      	beq.n	8006a56 <USBD_StdItfReq+0x26>
 8006a4a:	2b40      	cmp	r3, #64	; 0x40
 8006a4c:	d82e      	bhi.n	8006aac <USBD_StdItfReq+0x7c>
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d001      	beq.n	8006a56 <USBD_StdItfReq+0x26>
 8006a52:	2b20      	cmp	r3, #32
 8006a54:	d12a      	bne.n	8006aac <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a5c:	3b01      	subs	r3, #1
 8006a5e:	2b02      	cmp	r3, #2
 8006a60:	d81d      	bhi.n	8006a9e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	889b      	ldrh	r3, [r3, #4]
 8006a66:	b2db      	uxtb	r3, r3
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	d813      	bhi.n	8006a94 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	6839      	ldr	r1, [r7, #0]
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	4798      	blx	r3
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	88db      	ldrh	r3, [r3, #6]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d110      	bne.n	8006aa8 <USBD_StdItfReq+0x78>
 8006a86:	7bfb      	ldrb	r3, [r7, #15]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d10d      	bne.n	8006aa8 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f000 fd38 	bl	8007502 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006a92:	e009      	b.n	8006aa8 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8006a94:	6839      	ldr	r1, [r7, #0]
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f000 fc89 	bl	80073ae <USBD_CtlError>
          break;
 8006a9c:	e004      	b.n	8006aa8 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8006a9e:	6839      	ldr	r1, [r7, #0]
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f000 fc84 	bl	80073ae <USBD_CtlError>
          break;
 8006aa6:	e000      	b.n	8006aaa <USBD_StdItfReq+0x7a>
          break;
 8006aa8:	bf00      	nop
      }
      break;
 8006aaa:	e004      	b.n	8006ab6 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8006aac:	6839      	ldr	r1, [r7, #0]
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 fc7d 	bl	80073ae <USBD_CtlError>
      break;
 8006ab4:	bf00      	nop
  }

  return USBD_OK;
 8006ab6:	2300      	movs	r3, #0
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3710      	adds	r7, #16
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}

08006ac0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b084      	sub	sp, #16
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
 8006ac8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006aca:	2300      	movs	r3, #0
 8006acc:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	889b      	ldrh	r3, [r3, #4]
 8006ad2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006adc:	2b40      	cmp	r3, #64	; 0x40
 8006ade:	d007      	beq.n	8006af0 <USBD_StdEPReq+0x30>
 8006ae0:	2b40      	cmp	r3, #64	; 0x40
 8006ae2:	f200 8146 	bhi.w	8006d72 <USBD_StdEPReq+0x2b2>
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d00a      	beq.n	8006b00 <USBD_StdEPReq+0x40>
 8006aea:	2b20      	cmp	r3, #32
 8006aec:	f040 8141 	bne.w	8006d72 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006af6:	689b      	ldr	r3, [r3, #8]
 8006af8:	6839      	ldr	r1, [r7, #0]
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	4798      	blx	r3
      break;
 8006afe:	e13d      	b.n	8006d7c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b08:	2b20      	cmp	r3, #32
 8006b0a:	d10a      	bne.n	8006b22 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	6839      	ldr	r1, [r7, #0]
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	4798      	blx	r3
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006b1e:	7bfb      	ldrb	r3, [r7, #15]
 8006b20:	e12d      	b.n	8006d7e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	785b      	ldrb	r3, [r3, #1]
 8006b26:	2b03      	cmp	r3, #3
 8006b28:	d007      	beq.n	8006b3a <USBD_StdEPReq+0x7a>
 8006b2a:	2b03      	cmp	r3, #3
 8006b2c:	f300 811b 	bgt.w	8006d66 <USBD_StdEPReq+0x2a6>
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d072      	beq.n	8006c1a <USBD_StdEPReq+0x15a>
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	d03a      	beq.n	8006bae <USBD_StdEPReq+0xee>
 8006b38:	e115      	b.n	8006d66 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b40:	2b02      	cmp	r3, #2
 8006b42:	d002      	beq.n	8006b4a <USBD_StdEPReq+0x8a>
 8006b44:	2b03      	cmp	r3, #3
 8006b46:	d015      	beq.n	8006b74 <USBD_StdEPReq+0xb4>
 8006b48:	e02b      	b.n	8006ba2 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b4a:	7bbb      	ldrb	r3, [r7, #14]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d00c      	beq.n	8006b6a <USBD_StdEPReq+0xaa>
 8006b50:	7bbb      	ldrb	r3, [r7, #14]
 8006b52:	2b80      	cmp	r3, #128	; 0x80
 8006b54:	d009      	beq.n	8006b6a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006b56:	7bbb      	ldrb	r3, [r7, #14]
 8006b58:	4619      	mov	r1, r3
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f000 ff96 	bl	8007a8c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006b60:	2180      	movs	r1, #128	; 0x80
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f000 ff92 	bl	8007a8c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006b68:	e020      	b.n	8006bac <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8006b6a:	6839      	ldr	r1, [r7, #0]
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f000 fc1e 	bl	80073ae <USBD_CtlError>
              break;
 8006b72:	e01b      	b.n	8006bac <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	885b      	ldrh	r3, [r3, #2]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d10e      	bne.n	8006b9a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8006b7c:	7bbb      	ldrb	r3, [r7, #14]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d00b      	beq.n	8006b9a <USBD_StdEPReq+0xda>
 8006b82:	7bbb      	ldrb	r3, [r7, #14]
 8006b84:	2b80      	cmp	r3, #128	; 0x80
 8006b86:	d008      	beq.n	8006b9a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	88db      	ldrh	r3, [r3, #6]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d104      	bne.n	8006b9a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006b90:	7bbb      	ldrb	r3, [r7, #14]
 8006b92:	4619      	mov	r1, r3
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f000 ff79 	bl	8007a8c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f000 fcb1 	bl	8007502 <USBD_CtlSendStatus>

              break;
 8006ba0:	e004      	b.n	8006bac <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8006ba2:	6839      	ldr	r1, [r7, #0]
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f000 fc02 	bl	80073ae <USBD_CtlError>
              break;
 8006baa:	bf00      	nop
          }
          break;
 8006bac:	e0e0      	b.n	8006d70 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bb4:	2b02      	cmp	r3, #2
 8006bb6:	d002      	beq.n	8006bbe <USBD_StdEPReq+0xfe>
 8006bb8:	2b03      	cmp	r3, #3
 8006bba:	d015      	beq.n	8006be8 <USBD_StdEPReq+0x128>
 8006bbc:	e026      	b.n	8006c0c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006bbe:	7bbb      	ldrb	r3, [r7, #14]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d00c      	beq.n	8006bde <USBD_StdEPReq+0x11e>
 8006bc4:	7bbb      	ldrb	r3, [r7, #14]
 8006bc6:	2b80      	cmp	r3, #128	; 0x80
 8006bc8:	d009      	beq.n	8006bde <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006bca:	7bbb      	ldrb	r3, [r7, #14]
 8006bcc:	4619      	mov	r1, r3
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f000 ff5c 	bl	8007a8c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006bd4:	2180      	movs	r1, #128	; 0x80
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 ff58 	bl	8007a8c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006bdc:	e01c      	b.n	8006c18 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8006bde:	6839      	ldr	r1, [r7, #0]
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f000 fbe4 	bl	80073ae <USBD_CtlError>
              break;
 8006be6:	e017      	b.n	8006c18 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	885b      	ldrh	r3, [r3, #2]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d112      	bne.n	8006c16 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006bf0:	7bbb      	ldrb	r3, [r7, #14]
 8006bf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d004      	beq.n	8006c04 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006bfa:	7bbb      	ldrb	r3, [r7, #14]
 8006bfc:	4619      	mov	r1, r3
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f000 ff63 	bl	8007aca <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f000 fc7c 	bl	8007502 <USBD_CtlSendStatus>
              }
              break;
 8006c0a:	e004      	b.n	8006c16 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8006c0c:	6839      	ldr	r1, [r7, #0]
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 fbcd 	bl	80073ae <USBD_CtlError>
              break;
 8006c14:	e000      	b.n	8006c18 <USBD_StdEPReq+0x158>
              break;
 8006c16:	bf00      	nop
          }
          break;
 8006c18:	e0aa      	b.n	8006d70 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c20:	2b02      	cmp	r3, #2
 8006c22:	d002      	beq.n	8006c2a <USBD_StdEPReq+0x16a>
 8006c24:	2b03      	cmp	r3, #3
 8006c26:	d032      	beq.n	8006c8e <USBD_StdEPReq+0x1ce>
 8006c28:	e097      	b.n	8006d5a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c2a:	7bbb      	ldrb	r3, [r7, #14]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d007      	beq.n	8006c40 <USBD_StdEPReq+0x180>
 8006c30:	7bbb      	ldrb	r3, [r7, #14]
 8006c32:	2b80      	cmp	r3, #128	; 0x80
 8006c34:	d004      	beq.n	8006c40 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8006c36:	6839      	ldr	r1, [r7, #0]
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f000 fbb8 	bl	80073ae <USBD_CtlError>
                break;
 8006c3e:	e091      	b.n	8006d64 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	da0b      	bge.n	8006c60 <USBD_StdEPReq+0x1a0>
 8006c48:	7bbb      	ldrb	r3, [r7, #14]
 8006c4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006c4e:	4613      	mov	r3, r2
 8006c50:	009b      	lsls	r3, r3, #2
 8006c52:	4413      	add	r3, r2
 8006c54:	009b      	lsls	r3, r3, #2
 8006c56:	3310      	adds	r3, #16
 8006c58:	687a      	ldr	r2, [r7, #4]
 8006c5a:	4413      	add	r3, r2
 8006c5c:	3304      	adds	r3, #4
 8006c5e:	e00b      	b.n	8006c78 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006c60:	7bbb      	ldrb	r3, [r7, #14]
 8006c62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c66:	4613      	mov	r3, r2
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	4413      	add	r3, r2
 8006c6c:	009b      	lsls	r3, r3, #2
 8006c6e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	4413      	add	r3, r2
 8006c76:	3304      	adds	r3, #4
 8006c78:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	2202      	movs	r2, #2
 8006c84:	4619      	mov	r1, r3
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f000 fbfb 	bl	8007482 <USBD_CtlSendData>
              break;
 8006c8c:	e06a      	b.n	8006d64 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006c8e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	da11      	bge.n	8006cba <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006c96:	7bbb      	ldrb	r3, [r7, #14]
 8006c98:	f003 020f 	and.w	r2, r3, #15
 8006c9c:	6879      	ldr	r1, [r7, #4]
 8006c9e:	4613      	mov	r3, r2
 8006ca0:	009b      	lsls	r3, r3, #2
 8006ca2:	4413      	add	r3, r2
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	440b      	add	r3, r1
 8006ca8:	3318      	adds	r3, #24
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d117      	bne.n	8006ce0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006cb0:	6839      	ldr	r1, [r7, #0]
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 fb7b 	bl	80073ae <USBD_CtlError>
                  break;
 8006cb8:	e054      	b.n	8006d64 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006cba:	7bbb      	ldrb	r3, [r7, #14]
 8006cbc:	f003 020f 	and.w	r2, r3, #15
 8006cc0:	6879      	ldr	r1, [r7, #4]
 8006cc2:	4613      	mov	r3, r2
 8006cc4:	009b      	lsls	r3, r3, #2
 8006cc6:	4413      	add	r3, r2
 8006cc8:	009b      	lsls	r3, r3, #2
 8006cca:	440b      	add	r3, r1
 8006ccc:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d104      	bne.n	8006ce0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006cd6:	6839      	ldr	r1, [r7, #0]
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f000 fb68 	bl	80073ae <USBD_CtlError>
                  break;
 8006cde:	e041      	b.n	8006d64 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ce0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	da0b      	bge.n	8006d00 <USBD_StdEPReq+0x240>
 8006ce8:	7bbb      	ldrb	r3, [r7, #14]
 8006cea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006cee:	4613      	mov	r3, r2
 8006cf0:	009b      	lsls	r3, r3, #2
 8006cf2:	4413      	add	r3, r2
 8006cf4:	009b      	lsls	r3, r3, #2
 8006cf6:	3310      	adds	r3, #16
 8006cf8:	687a      	ldr	r2, [r7, #4]
 8006cfa:	4413      	add	r3, r2
 8006cfc:	3304      	adds	r3, #4
 8006cfe:	e00b      	b.n	8006d18 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006d00:	7bbb      	ldrb	r3, [r7, #14]
 8006d02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d06:	4613      	mov	r3, r2
 8006d08:	009b      	lsls	r3, r3, #2
 8006d0a:	4413      	add	r3, r2
 8006d0c:	009b      	lsls	r3, r3, #2
 8006d0e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	4413      	add	r3, r2
 8006d16:	3304      	adds	r3, #4
 8006d18:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006d1a:	7bbb      	ldrb	r3, [r7, #14]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d002      	beq.n	8006d26 <USBD_StdEPReq+0x266>
 8006d20:	7bbb      	ldrb	r3, [r7, #14]
 8006d22:	2b80      	cmp	r3, #128	; 0x80
 8006d24:	d103      	bne.n	8006d2e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	601a      	str	r2, [r3, #0]
 8006d2c:	e00e      	b.n	8006d4c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006d2e:	7bbb      	ldrb	r3, [r7, #14]
 8006d30:	4619      	mov	r1, r3
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f000 fee8 	bl	8007b08 <USBD_LL_IsStallEP>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d003      	beq.n	8006d46 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	2201      	movs	r2, #1
 8006d42:	601a      	str	r2, [r3, #0]
 8006d44:	e002      	b.n	8006d4c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	2202      	movs	r2, #2
 8006d50:	4619      	mov	r1, r3
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f000 fb95 	bl	8007482 <USBD_CtlSendData>
              break;
 8006d58:	e004      	b.n	8006d64 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8006d5a:	6839      	ldr	r1, [r7, #0]
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f000 fb26 	bl	80073ae <USBD_CtlError>
              break;
 8006d62:	bf00      	nop
          }
          break;
 8006d64:	e004      	b.n	8006d70 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8006d66:	6839      	ldr	r1, [r7, #0]
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f000 fb20 	bl	80073ae <USBD_CtlError>
          break;
 8006d6e:	bf00      	nop
      }
      break;
 8006d70:	e004      	b.n	8006d7c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8006d72:	6839      	ldr	r1, [r7, #0]
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f000 fb1a 	bl	80073ae <USBD_CtlError>
      break;
 8006d7a:	bf00      	nop
  }

  return ret;
 8006d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3710      	adds	r7, #16
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}
	...

08006d88 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b084      	sub	sp, #16
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006d92:	2300      	movs	r3, #0
 8006d94:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006d96:	2300      	movs	r3, #0
 8006d98:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	885b      	ldrh	r3, [r3, #2]
 8006da2:	0a1b      	lsrs	r3, r3, #8
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	3b01      	subs	r3, #1
 8006da8:	2b06      	cmp	r3, #6
 8006daa:	f200 8128 	bhi.w	8006ffe <USBD_GetDescriptor+0x276>
 8006dae:	a201      	add	r2, pc, #4	; (adr r2, 8006db4 <USBD_GetDescriptor+0x2c>)
 8006db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006db4:	08006dd1 	.word	0x08006dd1
 8006db8:	08006de9 	.word	0x08006de9
 8006dbc:	08006e29 	.word	0x08006e29
 8006dc0:	08006fff 	.word	0x08006fff
 8006dc4:	08006fff 	.word	0x08006fff
 8006dc8:	08006f9f 	.word	0x08006f9f
 8006dcc:	08006fcb 	.word	0x08006fcb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	687a      	ldr	r2, [r7, #4]
 8006dda:	7c12      	ldrb	r2, [r2, #16]
 8006ddc:	f107 0108 	add.w	r1, r7, #8
 8006de0:	4610      	mov	r0, r2
 8006de2:	4798      	blx	r3
 8006de4:	60f8      	str	r0, [r7, #12]
      break;
 8006de6:	e112      	b.n	800700e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	7c1b      	ldrb	r3, [r3, #16]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d10d      	bne.n	8006e0c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006df8:	f107 0208 	add.w	r2, r7, #8
 8006dfc:	4610      	mov	r0, r2
 8006dfe:	4798      	blx	r3
 8006e00:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	3301      	adds	r3, #1
 8006e06:	2202      	movs	r2, #2
 8006e08:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006e0a:	e100      	b.n	800700e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e14:	f107 0208 	add.w	r2, r7, #8
 8006e18:	4610      	mov	r0, r2
 8006e1a:	4798      	blx	r3
 8006e1c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	3301      	adds	r3, #1
 8006e22:	2202      	movs	r2, #2
 8006e24:	701a      	strb	r2, [r3, #0]
      break;
 8006e26:	e0f2      	b.n	800700e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	885b      	ldrh	r3, [r3, #2]
 8006e2c:	b2db      	uxtb	r3, r3
 8006e2e:	2b05      	cmp	r3, #5
 8006e30:	f200 80ac 	bhi.w	8006f8c <USBD_GetDescriptor+0x204>
 8006e34:	a201      	add	r2, pc, #4	; (adr r2, 8006e3c <USBD_GetDescriptor+0xb4>)
 8006e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e3a:	bf00      	nop
 8006e3c:	08006e55 	.word	0x08006e55
 8006e40:	08006e89 	.word	0x08006e89
 8006e44:	08006ebd 	.word	0x08006ebd
 8006e48:	08006ef1 	.word	0x08006ef1
 8006e4c:	08006f25 	.word	0x08006f25
 8006e50:	08006f59 	.word	0x08006f59
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d00b      	beq.n	8006e78 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	687a      	ldr	r2, [r7, #4]
 8006e6a:	7c12      	ldrb	r2, [r2, #16]
 8006e6c:	f107 0108 	add.w	r1, r7, #8
 8006e70:	4610      	mov	r0, r2
 8006e72:	4798      	blx	r3
 8006e74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e76:	e091      	b.n	8006f9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e78:	6839      	ldr	r1, [r7, #0]
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f000 fa97 	bl	80073ae <USBD_CtlError>
            err++;
 8006e80:	7afb      	ldrb	r3, [r7, #11]
 8006e82:	3301      	adds	r3, #1
 8006e84:	72fb      	strb	r3, [r7, #11]
          break;
 8006e86:	e089      	b.n	8006f9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006e8e:	689b      	ldr	r3, [r3, #8]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d00b      	beq.n	8006eac <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006e9a:	689b      	ldr	r3, [r3, #8]
 8006e9c:	687a      	ldr	r2, [r7, #4]
 8006e9e:	7c12      	ldrb	r2, [r2, #16]
 8006ea0:	f107 0108 	add.w	r1, r7, #8
 8006ea4:	4610      	mov	r0, r2
 8006ea6:	4798      	blx	r3
 8006ea8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006eaa:	e077      	b.n	8006f9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006eac:	6839      	ldr	r1, [r7, #0]
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f000 fa7d 	bl	80073ae <USBD_CtlError>
            err++;
 8006eb4:	7afb      	ldrb	r3, [r7, #11]
 8006eb6:	3301      	adds	r3, #1
 8006eb8:	72fb      	strb	r3, [r7, #11]
          break;
 8006eba:	e06f      	b.n	8006f9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006ec2:	68db      	ldr	r3, [r3, #12]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d00b      	beq.n	8006ee0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006ece:	68db      	ldr	r3, [r3, #12]
 8006ed0:	687a      	ldr	r2, [r7, #4]
 8006ed2:	7c12      	ldrb	r2, [r2, #16]
 8006ed4:	f107 0108 	add.w	r1, r7, #8
 8006ed8:	4610      	mov	r0, r2
 8006eda:	4798      	blx	r3
 8006edc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ede:	e05d      	b.n	8006f9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ee0:	6839      	ldr	r1, [r7, #0]
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 fa63 	bl	80073ae <USBD_CtlError>
            err++;
 8006ee8:	7afb      	ldrb	r3, [r7, #11]
 8006eea:	3301      	adds	r3, #1
 8006eec:	72fb      	strb	r3, [r7, #11]
          break;
 8006eee:	e055      	b.n	8006f9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006ef6:	691b      	ldr	r3, [r3, #16]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d00b      	beq.n	8006f14 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006f02:	691b      	ldr	r3, [r3, #16]
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	7c12      	ldrb	r2, [r2, #16]
 8006f08:	f107 0108 	add.w	r1, r7, #8
 8006f0c:	4610      	mov	r0, r2
 8006f0e:	4798      	blx	r3
 8006f10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f12:	e043      	b.n	8006f9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f14:	6839      	ldr	r1, [r7, #0]
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f000 fa49 	bl	80073ae <USBD_CtlError>
            err++;
 8006f1c:	7afb      	ldrb	r3, [r7, #11]
 8006f1e:	3301      	adds	r3, #1
 8006f20:	72fb      	strb	r3, [r7, #11]
          break;
 8006f22:	e03b      	b.n	8006f9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006f2a:	695b      	ldr	r3, [r3, #20]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d00b      	beq.n	8006f48 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006f36:	695b      	ldr	r3, [r3, #20]
 8006f38:	687a      	ldr	r2, [r7, #4]
 8006f3a:	7c12      	ldrb	r2, [r2, #16]
 8006f3c:	f107 0108 	add.w	r1, r7, #8
 8006f40:	4610      	mov	r0, r2
 8006f42:	4798      	blx	r3
 8006f44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f46:	e029      	b.n	8006f9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f48:	6839      	ldr	r1, [r7, #0]
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 fa2f 	bl	80073ae <USBD_CtlError>
            err++;
 8006f50:	7afb      	ldrb	r3, [r7, #11]
 8006f52:	3301      	adds	r3, #1
 8006f54:	72fb      	strb	r3, [r7, #11]
          break;
 8006f56:	e021      	b.n	8006f9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006f5e:	699b      	ldr	r3, [r3, #24]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d00b      	beq.n	8006f7c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006f6a:	699b      	ldr	r3, [r3, #24]
 8006f6c:	687a      	ldr	r2, [r7, #4]
 8006f6e:	7c12      	ldrb	r2, [r2, #16]
 8006f70:	f107 0108 	add.w	r1, r7, #8
 8006f74:	4610      	mov	r0, r2
 8006f76:	4798      	blx	r3
 8006f78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f7a:	e00f      	b.n	8006f9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f7c:	6839      	ldr	r1, [r7, #0]
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 fa15 	bl	80073ae <USBD_CtlError>
            err++;
 8006f84:	7afb      	ldrb	r3, [r7, #11]
 8006f86:	3301      	adds	r3, #1
 8006f88:	72fb      	strb	r3, [r7, #11]
          break;
 8006f8a:	e007      	b.n	8006f9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006f8c:	6839      	ldr	r1, [r7, #0]
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f000 fa0d 	bl	80073ae <USBD_CtlError>
          err++;
 8006f94:	7afb      	ldrb	r3, [r7, #11]
 8006f96:	3301      	adds	r3, #1
 8006f98:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8006f9a:	e038      	b.n	800700e <USBD_GetDescriptor+0x286>
 8006f9c:	e037      	b.n	800700e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	7c1b      	ldrb	r3, [r3, #16]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d109      	bne.n	8006fba <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fae:	f107 0208 	add.w	r2, r7, #8
 8006fb2:	4610      	mov	r0, r2
 8006fb4:	4798      	blx	r3
 8006fb6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006fb8:	e029      	b.n	800700e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006fba:	6839      	ldr	r1, [r7, #0]
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f000 f9f6 	bl	80073ae <USBD_CtlError>
        err++;
 8006fc2:	7afb      	ldrb	r3, [r7, #11]
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	72fb      	strb	r3, [r7, #11]
      break;
 8006fc8:	e021      	b.n	800700e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	7c1b      	ldrb	r3, [r3, #16]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d10d      	bne.n	8006fee <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fda:	f107 0208 	add.w	r2, r7, #8
 8006fde:	4610      	mov	r0, r2
 8006fe0:	4798      	blx	r3
 8006fe2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	3301      	adds	r3, #1
 8006fe8:	2207      	movs	r2, #7
 8006fea:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006fec:	e00f      	b.n	800700e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006fee:	6839      	ldr	r1, [r7, #0]
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f000 f9dc 	bl	80073ae <USBD_CtlError>
        err++;
 8006ff6:	7afb      	ldrb	r3, [r7, #11]
 8006ff8:	3301      	adds	r3, #1
 8006ffa:	72fb      	strb	r3, [r7, #11]
      break;
 8006ffc:	e007      	b.n	800700e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006ffe:	6839      	ldr	r1, [r7, #0]
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f000 f9d4 	bl	80073ae <USBD_CtlError>
      err++;
 8007006:	7afb      	ldrb	r3, [r7, #11]
 8007008:	3301      	adds	r3, #1
 800700a:	72fb      	strb	r3, [r7, #11]
      break;
 800700c:	bf00      	nop
  }

  if (err != 0U)
 800700e:	7afb      	ldrb	r3, [r7, #11]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d11c      	bne.n	800704e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007014:	893b      	ldrh	r3, [r7, #8]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d011      	beq.n	800703e <USBD_GetDescriptor+0x2b6>
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	88db      	ldrh	r3, [r3, #6]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d00d      	beq.n	800703e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	88da      	ldrh	r2, [r3, #6]
 8007026:	893b      	ldrh	r3, [r7, #8]
 8007028:	4293      	cmp	r3, r2
 800702a:	bf28      	it	cs
 800702c:	4613      	movcs	r3, r2
 800702e:	b29b      	uxth	r3, r3
 8007030:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007032:	893b      	ldrh	r3, [r7, #8]
 8007034:	461a      	mov	r2, r3
 8007036:	68f9      	ldr	r1, [r7, #12]
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f000 fa22 	bl	8007482 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	88db      	ldrh	r3, [r3, #6]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d104      	bne.n	8007050 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 fa5b 	bl	8007502 <USBD_CtlSendStatus>
 800704c:	e000      	b.n	8007050 <USBD_GetDescriptor+0x2c8>
    return;
 800704e:	bf00      	nop
    }
  }
}
 8007050:	3710      	adds	r7, #16
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}
 8007056:	bf00      	nop

08007058 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b084      	sub	sp, #16
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	889b      	ldrh	r3, [r3, #4]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d130      	bne.n	80070cc <USBD_SetAddress+0x74>
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	88db      	ldrh	r3, [r3, #6]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d12c      	bne.n	80070cc <USBD_SetAddress+0x74>
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	885b      	ldrh	r3, [r3, #2]
 8007076:	2b7f      	cmp	r3, #127	; 0x7f
 8007078:	d828      	bhi.n	80070cc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	885b      	ldrh	r3, [r3, #2]
 800707e:	b2db      	uxtb	r3, r3
 8007080:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007084:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800708c:	2b03      	cmp	r3, #3
 800708e:	d104      	bne.n	800709a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007090:	6839      	ldr	r1, [r7, #0]
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 f98b 	bl	80073ae <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007098:	e01d      	b.n	80070d6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	7bfa      	ldrb	r2, [r7, #15]
 800709e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80070a2:	7bfb      	ldrb	r3, [r7, #15]
 80070a4:	4619      	mov	r1, r3
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 fd5a 	bl	8007b60 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f000 fa28 	bl	8007502 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80070b2:	7bfb      	ldrb	r3, [r7, #15]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d004      	beq.n	80070c2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2202      	movs	r2, #2
 80070bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070c0:	e009      	b.n	80070d6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2201      	movs	r2, #1
 80070c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070ca:	e004      	b.n	80070d6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80070cc:	6839      	ldr	r1, [r7, #0]
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f000 f96d 	bl	80073ae <USBD_CtlError>
  }
}
 80070d4:	bf00      	nop
 80070d6:	bf00      	nop
 80070d8:	3710      	adds	r7, #16
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}
	...

080070e0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b082      	sub	sp, #8
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	885b      	ldrh	r3, [r3, #2]
 80070ee:	b2da      	uxtb	r2, r3
 80070f0:	4b41      	ldr	r3, [pc, #260]	; (80071f8 <USBD_SetConfig+0x118>)
 80070f2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80070f4:	4b40      	ldr	r3, [pc, #256]	; (80071f8 <USBD_SetConfig+0x118>)
 80070f6:	781b      	ldrb	r3, [r3, #0]
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d904      	bls.n	8007106 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80070fc:	6839      	ldr	r1, [r7, #0]
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f000 f955 	bl	80073ae <USBD_CtlError>
 8007104:	e075      	b.n	80071f2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800710c:	2b02      	cmp	r3, #2
 800710e:	d002      	beq.n	8007116 <USBD_SetConfig+0x36>
 8007110:	2b03      	cmp	r3, #3
 8007112:	d023      	beq.n	800715c <USBD_SetConfig+0x7c>
 8007114:	e062      	b.n	80071dc <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007116:	4b38      	ldr	r3, [pc, #224]	; (80071f8 <USBD_SetConfig+0x118>)
 8007118:	781b      	ldrb	r3, [r3, #0]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d01a      	beq.n	8007154 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800711e:	4b36      	ldr	r3, [pc, #216]	; (80071f8 <USBD_SetConfig+0x118>)
 8007120:	781b      	ldrb	r3, [r3, #0]
 8007122:	461a      	mov	r2, r3
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2203      	movs	r2, #3
 800712c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007130:	4b31      	ldr	r3, [pc, #196]	; (80071f8 <USBD_SetConfig+0x118>)
 8007132:	781b      	ldrb	r3, [r3, #0]
 8007134:	4619      	mov	r1, r3
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f7ff f9e8 	bl	800650c <USBD_SetClassConfig>
 800713c:	4603      	mov	r3, r0
 800713e:	2b02      	cmp	r3, #2
 8007140:	d104      	bne.n	800714c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007142:	6839      	ldr	r1, [r7, #0]
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f000 f932 	bl	80073ae <USBD_CtlError>
            return;
 800714a:	e052      	b.n	80071f2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f000 f9d8 	bl	8007502 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007152:	e04e      	b.n	80071f2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f000 f9d4 	bl	8007502 <USBD_CtlSendStatus>
        break;
 800715a:	e04a      	b.n	80071f2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800715c:	4b26      	ldr	r3, [pc, #152]	; (80071f8 <USBD_SetConfig+0x118>)
 800715e:	781b      	ldrb	r3, [r3, #0]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d112      	bne.n	800718a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2202      	movs	r2, #2
 8007168:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800716c:	4b22      	ldr	r3, [pc, #136]	; (80071f8 <USBD_SetConfig+0x118>)
 800716e:	781b      	ldrb	r3, [r3, #0]
 8007170:	461a      	mov	r2, r3
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007176:	4b20      	ldr	r3, [pc, #128]	; (80071f8 <USBD_SetConfig+0x118>)
 8007178:	781b      	ldrb	r3, [r3, #0]
 800717a:	4619      	mov	r1, r3
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f7ff f9e4 	bl	800654a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f000 f9bd 	bl	8007502 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007188:	e033      	b.n	80071f2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800718a:	4b1b      	ldr	r3, [pc, #108]	; (80071f8 <USBD_SetConfig+0x118>)
 800718c:	781b      	ldrb	r3, [r3, #0]
 800718e:	461a      	mov	r2, r3
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	429a      	cmp	r2, r3
 8007196:	d01d      	beq.n	80071d4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	b2db      	uxtb	r3, r3
 800719e:	4619      	mov	r1, r3
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f7ff f9d2 	bl	800654a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80071a6:	4b14      	ldr	r3, [pc, #80]	; (80071f8 <USBD_SetConfig+0x118>)
 80071a8:	781b      	ldrb	r3, [r3, #0]
 80071aa:	461a      	mov	r2, r3
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80071b0:	4b11      	ldr	r3, [pc, #68]	; (80071f8 <USBD_SetConfig+0x118>)
 80071b2:	781b      	ldrb	r3, [r3, #0]
 80071b4:	4619      	mov	r1, r3
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f7ff f9a8 	bl	800650c <USBD_SetClassConfig>
 80071bc:	4603      	mov	r3, r0
 80071be:	2b02      	cmp	r3, #2
 80071c0:	d104      	bne.n	80071cc <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80071c2:	6839      	ldr	r1, [r7, #0]
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f000 f8f2 	bl	80073ae <USBD_CtlError>
            return;
 80071ca:	e012      	b.n	80071f2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f000 f998 	bl	8007502 <USBD_CtlSendStatus>
        break;
 80071d2:	e00e      	b.n	80071f2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f000 f994 	bl	8007502 <USBD_CtlSendStatus>
        break;
 80071da:	e00a      	b.n	80071f2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80071dc:	6839      	ldr	r1, [r7, #0]
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 f8e5 	bl	80073ae <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80071e4:	4b04      	ldr	r3, [pc, #16]	; (80071f8 <USBD_SetConfig+0x118>)
 80071e6:	781b      	ldrb	r3, [r3, #0]
 80071e8:	4619      	mov	r1, r3
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f7ff f9ad 	bl	800654a <USBD_ClrClassConfig>
        break;
 80071f0:	bf00      	nop
    }
  }
}
 80071f2:	3708      	adds	r7, #8
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}
 80071f8:	2000018a 	.word	0x2000018a

080071fc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b082      	sub	sp, #8
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
 8007204:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	88db      	ldrh	r3, [r3, #6]
 800720a:	2b01      	cmp	r3, #1
 800720c:	d004      	beq.n	8007218 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800720e:	6839      	ldr	r1, [r7, #0]
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f000 f8cc 	bl	80073ae <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007216:	e022      	b.n	800725e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800721e:	2b02      	cmp	r3, #2
 8007220:	dc02      	bgt.n	8007228 <USBD_GetConfig+0x2c>
 8007222:	2b00      	cmp	r3, #0
 8007224:	dc03      	bgt.n	800722e <USBD_GetConfig+0x32>
 8007226:	e015      	b.n	8007254 <USBD_GetConfig+0x58>
 8007228:	2b03      	cmp	r3, #3
 800722a:	d00b      	beq.n	8007244 <USBD_GetConfig+0x48>
 800722c:	e012      	b.n	8007254 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2200      	movs	r2, #0
 8007232:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	3308      	adds	r3, #8
 8007238:	2201      	movs	r2, #1
 800723a:	4619      	mov	r1, r3
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f000 f920 	bl	8007482 <USBD_CtlSendData>
        break;
 8007242:	e00c      	b.n	800725e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	3304      	adds	r3, #4
 8007248:	2201      	movs	r2, #1
 800724a:	4619      	mov	r1, r3
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f000 f918 	bl	8007482 <USBD_CtlSendData>
        break;
 8007252:	e004      	b.n	800725e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007254:	6839      	ldr	r1, [r7, #0]
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 f8a9 	bl	80073ae <USBD_CtlError>
        break;
 800725c:	bf00      	nop
}
 800725e:	bf00      	nop
 8007260:	3708      	adds	r7, #8
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}

08007266 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007266:	b580      	push	{r7, lr}
 8007268:	b082      	sub	sp, #8
 800726a:	af00      	add	r7, sp, #0
 800726c:	6078      	str	r0, [r7, #4]
 800726e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007276:	3b01      	subs	r3, #1
 8007278:	2b02      	cmp	r3, #2
 800727a:	d81e      	bhi.n	80072ba <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	88db      	ldrh	r3, [r3, #6]
 8007280:	2b02      	cmp	r3, #2
 8007282:	d004      	beq.n	800728e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007284:	6839      	ldr	r1, [r7, #0]
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f000 f891 	bl	80073ae <USBD_CtlError>
        break;
 800728c:	e01a      	b.n	80072c4 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2201      	movs	r2, #1
 8007292:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800729a:	2b00      	cmp	r3, #0
 800729c:	d005      	beq.n	80072aa <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	68db      	ldr	r3, [r3, #12]
 80072a2:	f043 0202 	orr.w	r2, r3, #2
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	330c      	adds	r3, #12
 80072ae:	2202      	movs	r2, #2
 80072b0:	4619      	mov	r1, r3
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f000 f8e5 	bl	8007482 <USBD_CtlSendData>
      break;
 80072b8:	e004      	b.n	80072c4 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80072ba:	6839      	ldr	r1, [r7, #0]
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f000 f876 	bl	80073ae <USBD_CtlError>
      break;
 80072c2:	bf00      	nop
  }
}
 80072c4:	bf00      	nop
 80072c6:	3708      	adds	r7, #8
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}

080072cc <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b082      	sub	sp, #8
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
 80072d4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	885b      	ldrh	r3, [r3, #2]
 80072da:	2b01      	cmp	r3, #1
 80072dc:	d106      	bne.n	80072ec <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2201      	movs	r2, #1
 80072e2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 f90b 	bl	8007502 <USBD_CtlSendStatus>
  }
}
 80072ec:	bf00      	nop
 80072ee:	3708      	adds	r7, #8
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}

080072f4 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b082      	sub	sp, #8
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007304:	3b01      	subs	r3, #1
 8007306:	2b02      	cmp	r3, #2
 8007308:	d80b      	bhi.n	8007322 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	885b      	ldrh	r3, [r3, #2]
 800730e:	2b01      	cmp	r3, #1
 8007310:	d10c      	bne.n	800732c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2200      	movs	r2, #0
 8007316:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f000 f8f1 	bl	8007502 <USBD_CtlSendStatus>
      }
      break;
 8007320:	e004      	b.n	800732c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007322:	6839      	ldr	r1, [r7, #0]
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f000 f842 	bl	80073ae <USBD_CtlError>
      break;
 800732a:	e000      	b.n	800732e <USBD_ClrFeature+0x3a>
      break;
 800732c:	bf00      	nop
  }
}
 800732e:	bf00      	nop
 8007330:	3708      	adds	r7, #8
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}

08007336 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007336:	b480      	push	{r7}
 8007338:	b083      	sub	sp, #12
 800733a:	af00      	add	r7, sp, #0
 800733c:	6078      	str	r0, [r7, #4]
 800733e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	781a      	ldrb	r2, [r3, #0]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	785a      	ldrb	r2, [r3, #1]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	3302      	adds	r3, #2
 8007354:	781b      	ldrb	r3, [r3, #0]
 8007356:	b29a      	uxth	r2, r3
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	3303      	adds	r3, #3
 800735c:	781b      	ldrb	r3, [r3, #0]
 800735e:	b29b      	uxth	r3, r3
 8007360:	021b      	lsls	r3, r3, #8
 8007362:	b29b      	uxth	r3, r3
 8007364:	4413      	add	r3, r2
 8007366:	b29a      	uxth	r2, r3
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	3304      	adds	r3, #4
 8007370:	781b      	ldrb	r3, [r3, #0]
 8007372:	b29a      	uxth	r2, r3
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	3305      	adds	r3, #5
 8007378:	781b      	ldrb	r3, [r3, #0]
 800737a:	b29b      	uxth	r3, r3
 800737c:	021b      	lsls	r3, r3, #8
 800737e:	b29b      	uxth	r3, r3
 8007380:	4413      	add	r3, r2
 8007382:	b29a      	uxth	r2, r3
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	3306      	adds	r3, #6
 800738c:	781b      	ldrb	r3, [r3, #0]
 800738e:	b29a      	uxth	r2, r3
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	3307      	adds	r3, #7
 8007394:	781b      	ldrb	r3, [r3, #0]
 8007396:	b29b      	uxth	r3, r3
 8007398:	021b      	lsls	r3, r3, #8
 800739a:	b29b      	uxth	r3, r3
 800739c:	4413      	add	r3, r2
 800739e:	b29a      	uxth	r2, r3
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	80da      	strh	r2, [r3, #6]

}
 80073a4:	bf00      	nop
 80073a6:	370c      	adds	r7, #12
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bc80      	pop	{r7}
 80073ac:	4770      	bx	lr

080073ae <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80073ae:	b580      	push	{r7, lr}
 80073b0:	b082      	sub	sp, #8
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	6078      	str	r0, [r7, #4]
 80073b6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80073b8:	2180      	movs	r1, #128	; 0x80
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f000 fb66 	bl	8007a8c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80073c0:	2100      	movs	r1, #0
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f000 fb62 	bl	8007a8c <USBD_LL_StallEP>
}
 80073c8:	bf00      	nop
 80073ca:	3708      	adds	r7, #8
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}

080073d0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b086      	sub	sp, #24
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	60f8      	str	r0, [r7, #12]
 80073d8:	60b9      	str	r1, [r7, #8]
 80073da:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80073dc:	2300      	movs	r3, #0
 80073de:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d032      	beq.n	800744c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80073e6:	68f8      	ldr	r0, [r7, #12]
 80073e8:	f000 f834 	bl	8007454 <USBD_GetLen>
 80073ec:	4603      	mov	r3, r0
 80073ee:	3301      	adds	r3, #1
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	005b      	lsls	r3, r3, #1
 80073f4:	b29a      	uxth	r2, r3
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80073fa:	7dfb      	ldrb	r3, [r7, #23]
 80073fc:	1c5a      	adds	r2, r3, #1
 80073fe:	75fa      	strb	r2, [r7, #23]
 8007400:	461a      	mov	r2, r3
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	4413      	add	r3, r2
 8007406:	687a      	ldr	r2, [r7, #4]
 8007408:	7812      	ldrb	r2, [r2, #0]
 800740a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800740c:	7dfb      	ldrb	r3, [r7, #23]
 800740e:	1c5a      	adds	r2, r3, #1
 8007410:	75fa      	strb	r2, [r7, #23]
 8007412:	461a      	mov	r2, r3
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	4413      	add	r3, r2
 8007418:	2203      	movs	r2, #3
 800741a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800741c:	e012      	b.n	8007444 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	1c5a      	adds	r2, r3, #1
 8007422:	60fa      	str	r2, [r7, #12]
 8007424:	7dfa      	ldrb	r2, [r7, #23]
 8007426:	1c51      	adds	r1, r2, #1
 8007428:	75f9      	strb	r1, [r7, #23]
 800742a:	4611      	mov	r1, r2
 800742c:	68ba      	ldr	r2, [r7, #8]
 800742e:	440a      	add	r2, r1
 8007430:	781b      	ldrb	r3, [r3, #0]
 8007432:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007434:	7dfb      	ldrb	r3, [r7, #23]
 8007436:	1c5a      	adds	r2, r3, #1
 8007438:	75fa      	strb	r2, [r7, #23]
 800743a:	461a      	mov	r2, r3
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	4413      	add	r3, r2
 8007440:	2200      	movs	r2, #0
 8007442:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	781b      	ldrb	r3, [r3, #0]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d1e8      	bne.n	800741e <USBD_GetString+0x4e>
    }
  }
}
 800744c:	bf00      	nop
 800744e:	3718      	adds	r7, #24
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}

08007454 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007454:	b480      	push	{r7}
 8007456:	b085      	sub	sp, #20
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800745c:	2300      	movs	r3, #0
 800745e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007460:	e005      	b.n	800746e <USBD_GetLen+0x1a>
  {
    len++;
 8007462:	7bfb      	ldrb	r3, [r7, #15]
 8007464:	3301      	adds	r3, #1
 8007466:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	3301      	adds	r3, #1
 800746c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	781b      	ldrb	r3, [r3, #0]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d1f5      	bne.n	8007462 <USBD_GetLen+0xe>
  }

  return len;
 8007476:	7bfb      	ldrb	r3, [r7, #15]
}
 8007478:	4618      	mov	r0, r3
 800747a:	3714      	adds	r7, #20
 800747c:	46bd      	mov	sp, r7
 800747e:	bc80      	pop	{r7}
 8007480:	4770      	bx	lr

08007482 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007482:	b580      	push	{r7, lr}
 8007484:	b084      	sub	sp, #16
 8007486:	af00      	add	r7, sp, #0
 8007488:	60f8      	str	r0, [r7, #12]
 800748a:	60b9      	str	r1, [r7, #8]
 800748c:	4613      	mov	r3, r2
 800748e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2202      	movs	r2, #2
 8007494:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007498:	88fa      	ldrh	r2, [r7, #6]
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800749e:	88fa      	ldrh	r2, [r7, #6]
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80074a4:	88fb      	ldrh	r3, [r7, #6]
 80074a6:	68ba      	ldr	r2, [r7, #8]
 80074a8:	2100      	movs	r1, #0
 80074aa:	68f8      	ldr	r0, [r7, #12]
 80074ac:	f000 fb77 	bl	8007b9e <USBD_LL_Transmit>

  return USBD_OK;
 80074b0:	2300      	movs	r3, #0
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3710      	adds	r7, #16
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}

080074ba <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80074ba:	b580      	push	{r7, lr}
 80074bc:	b084      	sub	sp, #16
 80074be:	af00      	add	r7, sp, #0
 80074c0:	60f8      	str	r0, [r7, #12]
 80074c2:	60b9      	str	r1, [r7, #8]
 80074c4:	4613      	mov	r3, r2
 80074c6:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80074c8:	88fb      	ldrh	r3, [r7, #6]
 80074ca:	68ba      	ldr	r2, [r7, #8]
 80074cc:	2100      	movs	r1, #0
 80074ce:	68f8      	ldr	r0, [r7, #12]
 80074d0:	f000 fb65 	bl	8007b9e <USBD_LL_Transmit>

  return USBD_OK;
 80074d4:	2300      	movs	r3, #0
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3710      	adds	r7, #16
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}

080074de <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80074de:	b580      	push	{r7, lr}
 80074e0:	b084      	sub	sp, #16
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	60f8      	str	r0, [r7, #12]
 80074e6:	60b9      	str	r1, [r7, #8]
 80074e8:	4613      	mov	r3, r2
 80074ea:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80074ec:	88fb      	ldrh	r3, [r7, #6]
 80074ee:	68ba      	ldr	r2, [r7, #8]
 80074f0:	2100      	movs	r1, #0
 80074f2:	68f8      	ldr	r0, [r7, #12]
 80074f4:	f000 fb76 	bl	8007be4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80074f8:	2300      	movs	r3, #0
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3710      	adds	r7, #16
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}

08007502 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007502:	b580      	push	{r7, lr}
 8007504:	b082      	sub	sp, #8
 8007506:	af00      	add	r7, sp, #0
 8007508:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2204      	movs	r2, #4
 800750e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007512:	2300      	movs	r3, #0
 8007514:	2200      	movs	r2, #0
 8007516:	2100      	movs	r1, #0
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f000 fb40 	bl	8007b9e <USBD_LL_Transmit>

  return USBD_OK;
 800751e:	2300      	movs	r3, #0
}
 8007520:	4618      	mov	r0, r3
 8007522:	3708      	adds	r7, #8
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}

08007528 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b082      	sub	sp, #8
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2205      	movs	r2, #5
 8007534:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007538:	2300      	movs	r3, #0
 800753a:	2200      	movs	r2, #0
 800753c:	2100      	movs	r1, #0
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f000 fb50 	bl	8007be4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007544:	2300      	movs	r3, #0
}
 8007546:	4618      	mov	r0, r3
 8007548:	3708      	adds	r7, #8
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}
	...

08007550 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007554:	2200      	movs	r2, #0
 8007556:	490e      	ldr	r1, [pc, #56]	; (8007590 <MX_USB_DEVICE_Init+0x40>)
 8007558:	480e      	ldr	r0, [pc, #56]	; (8007594 <MX_USB_DEVICE_Init+0x44>)
 800755a:	f7fe ff7d 	bl	8006458 <USBD_Init>
 800755e:	4603      	mov	r3, r0
 8007560:	2b00      	cmp	r3, #0
 8007562:	d001      	beq.n	8007568 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007564:	f7f8 ffd2 	bl	800050c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8007568:	490b      	ldr	r1, [pc, #44]	; (8007598 <MX_USB_DEVICE_Init+0x48>)
 800756a:	480a      	ldr	r0, [pc, #40]	; (8007594 <MX_USB_DEVICE_Init+0x44>)
 800756c:	f7fe ff9f 	bl	80064ae <USBD_RegisterClass>
 8007570:	4603      	mov	r3, r0
 8007572:	2b00      	cmp	r3, #0
 8007574:	d001      	beq.n	800757a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007576:	f7f8 ffc9 	bl	800050c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800757a:	4806      	ldr	r0, [pc, #24]	; (8007594 <MX_USB_DEVICE_Init+0x44>)
 800757c:	f7fe ffb0 	bl	80064e0 <USBD_Start>
 8007580:	4603      	mov	r3, r0
 8007582:	2b00      	cmp	r3, #0
 8007584:	d001      	beq.n	800758a <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8007586:	f7f8 ffc1 	bl	800050c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800758a:	bf00      	nop
 800758c:	bd80      	pop	{r7, pc}
 800758e:	bf00      	nop
 8007590:	20000114 	.word	0x20000114
 8007594:	20000204 	.word	0x20000204
 8007598:	2000000c 	.word	0x2000000c

0800759c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800759c:	b480      	push	{r7}
 800759e:	b083      	sub	sp, #12
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	4603      	mov	r3, r0
 80075a4:	6039      	str	r1, [r7, #0]
 80075a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	2212      	movs	r2, #18
 80075ac:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80075ae:	4b03      	ldr	r3, [pc, #12]	; (80075bc <USBD_FS_DeviceDescriptor+0x20>)
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	370c      	adds	r7, #12
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bc80      	pop	{r7}
 80075b8:	4770      	bx	lr
 80075ba:	bf00      	nop
 80075bc:	20000130 	.word	0x20000130

080075c0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b083      	sub	sp, #12
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	4603      	mov	r3, r0
 80075c8:	6039      	str	r1, [r7, #0]
 80075ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	2204      	movs	r2, #4
 80075d0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80075d2:	4b03      	ldr	r3, [pc, #12]	; (80075e0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	370c      	adds	r7, #12
 80075d8:	46bd      	mov	sp, r7
 80075da:	bc80      	pop	{r7}
 80075dc:	4770      	bx	lr
 80075de:	bf00      	nop
 80075e0:	20000144 	.word	0x20000144

080075e4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b082      	sub	sp, #8
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	4603      	mov	r3, r0
 80075ec:	6039      	str	r1, [r7, #0]
 80075ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80075f0:	79fb      	ldrb	r3, [r7, #7]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d105      	bne.n	8007602 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80075f6:	683a      	ldr	r2, [r7, #0]
 80075f8:	4907      	ldr	r1, [pc, #28]	; (8007618 <USBD_FS_ProductStrDescriptor+0x34>)
 80075fa:	4808      	ldr	r0, [pc, #32]	; (800761c <USBD_FS_ProductStrDescriptor+0x38>)
 80075fc:	f7ff fee8 	bl	80073d0 <USBD_GetString>
 8007600:	e004      	b.n	800760c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007602:	683a      	ldr	r2, [r7, #0]
 8007604:	4904      	ldr	r1, [pc, #16]	; (8007618 <USBD_FS_ProductStrDescriptor+0x34>)
 8007606:	4805      	ldr	r0, [pc, #20]	; (800761c <USBD_FS_ProductStrDescriptor+0x38>)
 8007608:	f7ff fee2 	bl	80073d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800760c:	4b02      	ldr	r3, [pc, #8]	; (8007618 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800760e:	4618      	mov	r0, r3
 8007610:	3708      	adds	r7, #8
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}
 8007616:	bf00      	nop
 8007618:	200004c8 	.word	0x200004c8
 800761c:	08007d54 	.word	0x08007d54

08007620 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b082      	sub	sp, #8
 8007624:	af00      	add	r7, sp, #0
 8007626:	4603      	mov	r3, r0
 8007628:	6039      	str	r1, [r7, #0]
 800762a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800762c:	683a      	ldr	r2, [r7, #0]
 800762e:	4904      	ldr	r1, [pc, #16]	; (8007640 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007630:	4804      	ldr	r0, [pc, #16]	; (8007644 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007632:	f7ff fecd 	bl	80073d0 <USBD_GetString>
  return USBD_StrDesc;
 8007636:	4b02      	ldr	r3, [pc, #8]	; (8007640 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007638:	4618      	mov	r0, r3
 800763a:	3708      	adds	r7, #8
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}
 8007640:	200004c8 	.word	0x200004c8
 8007644:	08007d68 	.word	0x08007d68

08007648 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b082      	sub	sp, #8
 800764c:	af00      	add	r7, sp, #0
 800764e:	4603      	mov	r3, r0
 8007650:	6039      	str	r1, [r7, #0]
 8007652:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	221a      	movs	r2, #26
 8007658:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800765a:	f000 f843 	bl	80076e4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800765e:	4b02      	ldr	r3, [pc, #8]	; (8007668 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007660:	4618      	mov	r0, r3
 8007662:	3708      	adds	r7, #8
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}
 8007668:	20000148 	.word	0x20000148

0800766c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b082      	sub	sp, #8
 8007670:	af00      	add	r7, sp, #0
 8007672:	4603      	mov	r3, r0
 8007674:	6039      	str	r1, [r7, #0]
 8007676:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007678:	79fb      	ldrb	r3, [r7, #7]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d105      	bne.n	800768a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800767e:	683a      	ldr	r2, [r7, #0]
 8007680:	4907      	ldr	r1, [pc, #28]	; (80076a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007682:	4808      	ldr	r0, [pc, #32]	; (80076a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007684:	f7ff fea4 	bl	80073d0 <USBD_GetString>
 8007688:	e004      	b.n	8007694 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800768a:	683a      	ldr	r2, [r7, #0]
 800768c:	4904      	ldr	r1, [pc, #16]	; (80076a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800768e:	4805      	ldr	r0, [pc, #20]	; (80076a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007690:	f7ff fe9e 	bl	80073d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007694:	4b02      	ldr	r3, [pc, #8]	; (80076a0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007696:	4618      	mov	r0, r3
 8007698:	3708      	adds	r7, #8
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
 800769e:	bf00      	nop
 80076a0:	200004c8 	.word	0x200004c8
 80076a4:	08007d7c 	.word	0x08007d7c

080076a8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b082      	sub	sp, #8
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	4603      	mov	r3, r0
 80076b0:	6039      	str	r1, [r7, #0]
 80076b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80076b4:	79fb      	ldrb	r3, [r7, #7]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d105      	bne.n	80076c6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80076ba:	683a      	ldr	r2, [r7, #0]
 80076bc:	4907      	ldr	r1, [pc, #28]	; (80076dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80076be:	4808      	ldr	r0, [pc, #32]	; (80076e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80076c0:	f7ff fe86 	bl	80073d0 <USBD_GetString>
 80076c4:	e004      	b.n	80076d0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80076c6:	683a      	ldr	r2, [r7, #0]
 80076c8:	4904      	ldr	r1, [pc, #16]	; (80076dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80076ca:	4805      	ldr	r0, [pc, #20]	; (80076e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80076cc:	f7ff fe80 	bl	80073d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80076d0:	4b02      	ldr	r3, [pc, #8]	; (80076dc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3708      	adds	r7, #8
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}
 80076da:	bf00      	nop
 80076dc:	200004c8 	.word	0x200004c8
 80076e0:	08007d88 	.word	0x08007d88

080076e4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b084      	sub	sp, #16
 80076e8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80076ea:	4b0f      	ldr	r3, [pc, #60]	; (8007728 <Get_SerialNum+0x44>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80076f0:	4b0e      	ldr	r3, [pc, #56]	; (800772c <Get_SerialNum+0x48>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80076f6:	4b0e      	ldr	r3, [pc, #56]	; (8007730 <Get_SerialNum+0x4c>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80076fc:	68fa      	ldr	r2, [r7, #12]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	4413      	add	r3, r2
 8007702:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d009      	beq.n	800771e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800770a:	2208      	movs	r2, #8
 800770c:	4909      	ldr	r1, [pc, #36]	; (8007734 <Get_SerialNum+0x50>)
 800770e:	68f8      	ldr	r0, [r7, #12]
 8007710:	f000 f814 	bl	800773c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007714:	2204      	movs	r2, #4
 8007716:	4908      	ldr	r1, [pc, #32]	; (8007738 <Get_SerialNum+0x54>)
 8007718:	68b8      	ldr	r0, [r7, #8]
 800771a:	f000 f80f 	bl	800773c <IntToUnicode>
  }
}
 800771e:	bf00      	nop
 8007720:	3710      	adds	r7, #16
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
 8007726:	bf00      	nop
 8007728:	1ffff7e8 	.word	0x1ffff7e8
 800772c:	1ffff7ec 	.word	0x1ffff7ec
 8007730:	1ffff7f0 	.word	0x1ffff7f0
 8007734:	2000014a 	.word	0x2000014a
 8007738:	2000015a 	.word	0x2000015a

0800773c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800773c:	b480      	push	{r7}
 800773e:	b087      	sub	sp, #28
 8007740:	af00      	add	r7, sp, #0
 8007742:	60f8      	str	r0, [r7, #12]
 8007744:	60b9      	str	r1, [r7, #8]
 8007746:	4613      	mov	r3, r2
 8007748:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800774a:	2300      	movs	r3, #0
 800774c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800774e:	2300      	movs	r3, #0
 8007750:	75fb      	strb	r3, [r7, #23]
 8007752:	e027      	b.n	80077a4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	0f1b      	lsrs	r3, r3, #28
 8007758:	2b09      	cmp	r3, #9
 800775a:	d80b      	bhi.n	8007774 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	0f1b      	lsrs	r3, r3, #28
 8007760:	b2da      	uxtb	r2, r3
 8007762:	7dfb      	ldrb	r3, [r7, #23]
 8007764:	005b      	lsls	r3, r3, #1
 8007766:	4619      	mov	r1, r3
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	440b      	add	r3, r1
 800776c:	3230      	adds	r2, #48	; 0x30
 800776e:	b2d2      	uxtb	r2, r2
 8007770:	701a      	strb	r2, [r3, #0]
 8007772:	e00a      	b.n	800778a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	0f1b      	lsrs	r3, r3, #28
 8007778:	b2da      	uxtb	r2, r3
 800777a:	7dfb      	ldrb	r3, [r7, #23]
 800777c:	005b      	lsls	r3, r3, #1
 800777e:	4619      	mov	r1, r3
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	440b      	add	r3, r1
 8007784:	3237      	adds	r2, #55	; 0x37
 8007786:	b2d2      	uxtb	r2, r2
 8007788:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	011b      	lsls	r3, r3, #4
 800778e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007790:	7dfb      	ldrb	r3, [r7, #23]
 8007792:	005b      	lsls	r3, r3, #1
 8007794:	3301      	adds	r3, #1
 8007796:	68ba      	ldr	r2, [r7, #8]
 8007798:	4413      	add	r3, r2
 800779a:	2200      	movs	r2, #0
 800779c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800779e:	7dfb      	ldrb	r3, [r7, #23]
 80077a0:	3301      	adds	r3, #1
 80077a2:	75fb      	strb	r3, [r7, #23]
 80077a4:	7dfa      	ldrb	r2, [r7, #23]
 80077a6:	79fb      	ldrb	r3, [r7, #7]
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d3d3      	bcc.n	8007754 <IntToUnicode+0x18>
  }
}
 80077ac:	bf00      	nop
 80077ae:	bf00      	nop
 80077b0:	371c      	adds	r7, #28
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bc80      	pop	{r7}
 80077b6:	4770      	bx	lr

080077b8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b084      	sub	sp, #16
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a0d      	ldr	r2, [pc, #52]	; (80077fc <HAL_PCD_MspInit+0x44>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d113      	bne.n	80077f2 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80077ca:	4b0d      	ldr	r3, [pc, #52]	; (8007800 <HAL_PCD_MspInit+0x48>)
 80077cc:	69db      	ldr	r3, [r3, #28]
 80077ce:	4a0c      	ldr	r2, [pc, #48]	; (8007800 <HAL_PCD_MspInit+0x48>)
 80077d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80077d4:	61d3      	str	r3, [r2, #28]
 80077d6:	4b0a      	ldr	r3, [pc, #40]	; (8007800 <HAL_PCD_MspInit+0x48>)
 80077d8:	69db      	ldr	r3, [r3, #28]
 80077da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80077de:	60fb      	str	r3, [r7, #12]
 80077e0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80077e2:	2200      	movs	r2, #0
 80077e4:	2100      	movs	r1, #0
 80077e6:	2014      	movs	r0, #20
 80077e8:	f7f9 fddf 	bl	80013aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80077ec:	2014      	movs	r0, #20
 80077ee:	f7f9 fdf8 	bl	80013e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80077f2:	bf00      	nop
 80077f4:	3710      	adds	r7, #16
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}
 80077fa:	bf00      	nop
 80077fc:	40005c00 	.word	0x40005c00
 8007800:	40021000 	.word	0x40021000

08007804 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b082      	sub	sp, #8
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007818:	4619      	mov	r1, r3
 800781a:	4610      	mov	r0, r2
 800781c:	f7fe fea8 	bl	8006570 <USBD_LL_SetupStage>
}
 8007820:	bf00      	nop
 8007822:	3708      	adds	r7, #8
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}

08007828 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b082      	sub	sp, #8
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	460b      	mov	r3, r1
 8007832:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800783a:	78fa      	ldrb	r2, [r7, #3]
 800783c:	6879      	ldr	r1, [r7, #4]
 800783e:	4613      	mov	r3, r2
 8007840:	009b      	lsls	r3, r3, #2
 8007842:	4413      	add	r3, r2
 8007844:	00db      	lsls	r3, r3, #3
 8007846:	440b      	add	r3, r1
 8007848:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800784c:	681a      	ldr	r2, [r3, #0]
 800784e:	78fb      	ldrb	r3, [r7, #3]
 8007850:	4619      	mov	r1, r3
 8007852:	f7fe feda 	bl	800660a <USBD_LL_DataOutStage>
}
 8007856:	bf00      	nop
 8007858:	3708      	adds	r7, #8
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}

0800785e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800785e:	b580      	push	{r7, lr}
 8007860:	b082      	sub	sp, #8
 8007862:	af00      	add	r7, sp, #0
 8007864:	6078      	str	r0, [r7, #4]
 8007866:	460b      	mov	r3, r1
 8007868:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007870:	78fa      	ldrb	r2, [r7, #3]
 8007872:	6879      	ldr	r1, [r7, #4]
 8007874:	4613      	mov	r3, r2
 8007876:	009b      	lsls	r3, r3, #2
 8007878:	4413      	add	r3, r2
 800787a:	00db      	lsls	r3, r3, #3
 800787c:	440b      	add	r3, r1
 800787e:	333c      	adds	r3, #60	; 0x3c
 8007880:	681a      	ldr	r2, [r3, #0]
 8007882:	78fb      	ldrb	r3, [r7, #3]
 8007884:	4619      	mov	r1, r3
 8007886:	f7fe ff31 	bl	80066ec <USBD_LL_DataInStage>
}
 800788a:	bf00      	nop
 800788c:	3708      	adds	r7, #8
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}

08007892 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007892:	b580      	push	{r7, lr}
 8007894:	b082      	sub	sp, #8
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80078a0:	4618      	mov	r0, r3
 80078a2:	f7ff f841 	bl	8006928 <USBD_LL_SOF>
}
 80078a6:	bf00      	nop
 80078a8:	3708      	adds	r7, #8
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}

080078ae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078ae:	b580      	push	{r7, lr}
 80078b0:	b084      	sub	sp, #16
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80078b6:	2301      	movs	r3, #1
 80078b8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	689b      	ldr	r3, [r3, #8]
 80078be:	2b02      	cmp	r3, #2
 80078c0:	d001      	beq.n	80078c6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80078c2:	f7f8 fe23 	bl	800050c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80078cc:	7bfa      	ldrb	r2, [r7, #15]
 80078ce:	4611      	mov	r1, r2
 80078d0:	4618      	mov	r0, r3
 80078d2:	f7fe fff1 	bl	80068b8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80078dc:	4618      	mov	r0, r3
 80078de:	f7fe ffaa 	bl	8006836 <USBD_LL_Reset>
}
 80078e2:	bf00      	nop
 80078e4:	3710      	adds	r7, #16
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}
	...

080078ec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b082      	sub	sp, #8
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80078fa:	4618      	mov	r0, r3
 80078fc:	f7fe ffeb 	bl	80068d6 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	699b      	ldr	r3, [r3, #24]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d005      	beq.n	8007914 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007908:	4b04      	ldr	r3, [pc, #16]	; (800791c <HAL_PCD_SuspendCallback+0x30>)
 800790a:	691b      	ldr	r3, [r3, #16]
 800790c:	4a03      	ldr	r2, [pc, #12]	; (800791c <HAL_PCD_SuspendCallback+0x30>)
 800790e:	f043 0306 	orr.w	r3, r3, #6
 8007912:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007914:	bf00      	nop
 8007916:	3708      	adds	r7, #8
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}
 800791c:	e000ed00 	.word	0xe000ed00

08007920 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b082      	sub	sp, #8
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800792e:	4618      	mov	r0, r3
 8007930:	f7fe ffe5 	bl	80068fe <USBD_LL_Resume>
}
 8007934:	bf00      	nop
 8007936:	3708      	adds	r7, #8
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}

0800793c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b082      	sub	sp, #8
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007944:	4a1f      	ldr	r2, [pc, #124]	; (80079c4 <USBD_LL_Init+0x88>)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	4a1d      	ldr	r2, [pc, #116]	; (80079c4 <USBD_LL_Init+0x88>)
 8007950:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007954:	4b1b      	ldr	r3, [pc, #108]	; (80079c4 <USBD_LL_Init+0x88>)
 8007956:	4a1c      	ldr	r2, [pc, #112]	; (80079c8 <USBD_LL_Init+0x8c>)
 8007958:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800795a:	4b1a      	ldr	r3, [pc, #104]	; (80079c4 <USBD_LL_Init+0x88>)
 800795c:	2208      	movs	r2, #8
 800795e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007960:	4b18      	ldr	r3, [pc, #96]	; (80079c4 <USBD_LL_Init+0x88>)
 8007962:	2202      	movs	r2, #2
 8007964:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007966:	4b17      	ldr	r3, [pc, #92]	; (80079c4 <USBD_LL_Init+0x88>)
 8007968:	2200      	movs	r2, #0
 800796a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800796c:	4b15      	ldr	r3, [pc, #84]	; (80079c4 <USBD_LL_Init+0x88>)
 800796e:	2200      	movs	r2, #0
 8007970:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007972:	4b14      	ldr	r3, [pc, #80]	; (80079c4 <USBD_LL_Init+0x88>)
 8007974:	2200      	movs	r2, #0
 8007976:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007978:	4812      	ldr	r0, [pc, #72]	; (80079c4 <USBD_LL_Init+0x88>)
 800797a:	f7f9 ff1b 	bl	80017b4 <HAL_PCD_Init>
 800797e:	4603      	mov	r3, r0
 8007980:	2b00      	cmp	r3, #0
 8007982:	d001      	beq.n	8007988 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007984:	f7f8 fdc2 	bl	800050c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800798e:	2318      	movs	r3, #24
 8007990:	2200      	movs	r2, #0
 8007992:	2100      	movs	r1, #0
 8007994:	f7fb fb7a 	bl	800308c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800799e:	2358      	movs	r3, #88	; 0x58
 80079a0:	2200      	movs	r2, #0
 80079a2:	2180      	movs	r1, #128	; 0x80
 80079a4:	f7fb fb72 	bl	800308c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80079ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80079b2:	2200      	movs	r2, #0
 80079b4:	2181      	movs	r1, #129	; 0x81
 80079b6:	f7fb fb69 	bl	800308c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 80079ba:	2300      	movs	r3, #0
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3708      	adds	r7, #8
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}
 80079c4:	200006c8 	.word	0x200006c8
 80079c8:	40005c00 	.word	0x40005c00

080079cc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b084      	sub	sp, #16
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079d4:	2300      	movs	r3, #0
 80079d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079d8:	2300      	movs	r3, #0
 80079da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80079e2:	4618      	mov	r0, r3
 80079e4:	f7f9 fff1 	bl	80019ca <HAL_PCD_Start>
 80079e8:	4603      	mov	r3, r0
 80079ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079ec:	7bfb      	ldrb	r3, [r7, #15]
 80079ee:	4618      	mov	r0, r3
 80079f0:	f000 f93c 	bl	8007c6c <USBD_Get_USB_Status>
 80079f4:	4603      	mov	r3, r0
 80079f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3710      	adds	r7, #16
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}

08007a02 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007a02:	b580      	push	{r7, lr}
 8007a04:	b084      	sub	sp, #16
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	6078      	str	r0, [r7, #4]
 8007a0a:	4608      	mov	r0, r1
 8007a0c:	4611      	mov	r1, r2
 8007a0e:	461a      	mov	r2, r3
 8007a10:	4603      	mov	r3, r0
 8007a12:	70fb      	strb	r3, [r7, #3]
 8007a14:	460b      	mov	r3, r1
 8007a16:	70bb      	strb	r3, [r7, #2]
 8007a18:	4613      	mov	r3, r2
 8007a1a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a20:	2300      	movs	r3, #0
 8007a22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007a2a:	78bb      	ldrb	r3, [r7, #2]
 8007a2c:	883a      	ldrh	r2, [r7, #0]
 8007a2e:	78f9      	ldrb	r1, [r7, #3]
 8007a30:	f7fa f96b 	bl	8001d0a <HAL_PCD_EP_Open>
 8007a34:	4603      	mov	r3, r0
 8007a36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a38:	7bfb      	ldrb	r3, [r7, #15]
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f000 f916 	bl	8007c6c <USBD_Get_USB_Status>
 8007a40:	4603      	mov	r3, r0
 8007a42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a44:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3710      	adds	r7, #16
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}

08007a4e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a4e:	b580      	push	{r7, lr}
 8007a50:	b084      	sub	sp, #16
 8007a52:	af00      	add	r7, sp, #0
 8007a54:	6078      	str	r0, [r7, #4]
 8007a56:	460b      	mov	r3, r1
 8007a58:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a68:	78fa      	ldrb	r2, [r7, #3]
 8007a6a:	4611      	mov	r1, r2
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	f7fa f9b2 	bl	8001dd6 <HAL_PCD_EP_Close>
 8007a72:	4603      	mov	r3, r0
 8007a74:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a76:	7bfb      	ldrb	r3, [r7, #15]
 8007a78:	4618      	mov	r0, r3
 8007a7a:	f000 f8f7 	bl	8007c6c <USBD_Get_USB_Status>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a82:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3710      	adds	r7, #16
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b084      	sub	sp, #16
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	460b      	mov	r3, r1
 8007a96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007aa6:	78fa      	ldrb	r2, [r7, #3]
 8007aa8:	4611      	mov	r1, r2
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f7fa fa5b 	bl	8001f66 <HAL_PCD_EP_SetStall>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ab4:	7bfb      	ldrb	r3, [r7, #15]
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f000 f8d8 	bl	8007c6c <USBD_Get_USB_Status>
 8007abc:	4603      	mov	r3, r0
 8007abe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ac0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3710      	adds	r7, #16
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}

08007aca <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007aca:	b580      	push	{r7, lr}
 8007acc:	b084      	sub	sp, #16
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	6078      	str	r0, [r7, #4]
 8007ad2:	460b      	mov	r3, r1
 8007ad4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ada:	2300      	movs	r3, #0
 8007adc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ae4:	78fa      	ldrb	r2, [r7, #3]
 8007ae6:	4611      	mov	r1, r2
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f7fa fa9c 	bl	8002026 <HAL_PCD_EP_ClrStall>
 8007aee:	4603      	mov	r3, r0
 8007af0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007af2:	7bfb      	ldrb	r3, [r7, #15]
 8007af4:	4618      	mov	r0, r3
 8007af6:	f000 f8b9 	bl	8007c6c <USBD_Get_USB_Status>
 8007afa:	4603      	mov	r3, r0
 8007afc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007afe:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3710      	adds	r7, #16
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}

08007b08 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b085      	sub	sp, #20
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	460b      	mov	r3, r1
 8007b12:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b1a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007b1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	da0c      	bge.n	8007b3e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007b24:	78fb      	ldrb	r3, [r7, #3]
 8007b26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b2a:	68f9      	ldr	r1, [r7, #12]
 8007b2c:	1c5a      	adds	r2, r3, #1
 8007b2e:	4613      	mov	r3, r2
 8007b30:	009b      	lsls	r3, r3, #2
 8007b32:	4413      	add	r3, r2
 8007b34:	00db      	lsls	r3, r3, #3
 8007b36:	440b      	add	r3, r1
 8007b38:	3302      	adds	r3, #2
 8007b3a:	781b      	ldrb	r3, [r3, #0]
 8007b3c:	e00b      	b.n	8007b56 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007b3e:	78fb      	ldrb	r3, [r7, #3]
 8007b40:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007b44:	68f9      	ldr	r1, [r7, #12]
 8007b46:	4613      	mov	r3, r2
 8007b48:	009b      	lsls	r3, r3, #2
 8007b4a:	4413      	add	r3, r2
 8007b4c:	00db      	lsls	r3, r3, #3
 8007b4e:	440b      	add	r3, r1
 8007b50:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8007b54:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3714      	adds	r7, #20
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bc80      	pop	{r7}
 8007b5e:	4770      	bx	lr

08007b60 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b084      	sub	sp, #16
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
 8007b68:	460b      	mov	r3, r1
 8007b6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b70:	2300      	movs	r3, #0
 8007b72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b7a:	78fa      	ldrb	r2, [r7, #3]
 8007b7c:	4611      	mov	r1, r2
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f7fa f89e 	bl	8001cc0 <HAL_PCD_SetAddress>
 8007b84:	4603      	mov	r3, r0
 8007b86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b88:	7bfb      	ldrb	r3, [r7, #15]
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f000 f86e 	bl	8007c6c <USBD_Get_USB_Status>
 8007b90:	4603      	mov	r3, r0
 8007b92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b94:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3710      	adds	r7, #16
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}

08007b9e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007b9e:	b580      	push	{r7, lr}
 8007ba0:	b086      	sub	sp, #24
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	60f8      	str	r0, [r7, #12]
 8007ba6:	607a      	str	r2, [r7, #4]
 8007ba8:	461a      	mov	r2, r3
 8007baa:	460b      	mov	r3, r1
 8007bac:	72fb      	strb	r3, [r7, #11]
 8007bae:	4613      	mov	r3, r2
 8007bb0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007bc0:	893b      	ldrh	r3, [r7, #8]
 8007bc2:	7af9      	ldrb	r1, [r7, #11]
 8007bc4:	687a      	ldr	r2, [r7, #4]
 8007bc6:	f7fa f98b 	bl	8001ee0 <HAL_PCD_EP_Transmit>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007bce:	7dfb      	ldrb	r3, [r7, #23]
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f000 f84b 	bl	8007c6c <USBD_Get_USB_Status>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007bda:	7dbb      	ldrb	r3, [r7, #22]
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3718      	adds	r7, #24
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}

08007be4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b086      	sub	sp, #24
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	60f8      	str	r0, [r7, #12]
 8007bec:	607a      	str	r2, [r7, #4]
 8007bee:	461a      	mov	r2, r3
 8007bf0:	460b      	mov	r3, r1
 8007bf2:	72fb      	strb	r3, [r7, #11]
 8007bf4:	4613      	mov	r3, r2
 8007bf6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007c06:	893b      	ldrh	r3, [r7, #8]
 8007c08:	7af9      	ldrb	r1, [r7, #11]
 8007c0a:	687a      	ldr	r2, [r7, #4]
 8007c0c:	f7fa f92b 	bl	8001e66 <HAL_PCD_EP_Receive>
 8007c10:	4603      	mov	r3, r0
 8007c12:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c14:	7dfb      	ldrb	r3, [r7, #23]
 8007c16:	4618      	mov	r0, r3
 8007c18:	f000 f828 	bl	8007c6c <USBD_Get_USB_Status>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007c20:	7dbb      	ldrb	r3, [r7, #22]
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3718      	adds	r7, #24
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}
	...

08007c2c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b083      	sub	sp, #12
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007c34:	4b02      	ldr	r3, [pc, #8]	; (8007c40 <USBD_static_malloc+0x14>)
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	370c      	adds	r7, #12
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bc80      	pop	{r7}
 8007c3e:	4770      	bx	lr
 8007c40:	2000018c 	.word	0x2000018c

08007c44 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b083      	sub	sp, #12
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]

}
 8007c4c:	bf00      	nop
 8007c4e:	370c      	adds	r7, #12
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bc80      	pop	{r7}
 8007c54:	4770      	bx	lr

08007c56 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c56:	b480      	push	{r7}
 8007c58:	b083      	sub	sp, #12
 8007c5a:	af00      	add	r7, sp, #0
 8007c5c:	6078      	str	r0, [r7, #4]
 8007c5e:	460b      	mov	r3, r1
 8007c60:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8007c62:	bf00      	nop
 8007c64:	370c      	adds	r7, #12
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bc80      	pop	{r7}
 8007c6a:	4770      	bx	lr

08007c6c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b085      	sub	sp, #20
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	4603      	mov	r3, r0
 8007c74:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c76:	2300      	movs	r3, #0
 8007c78:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007c7a:	79fb      	ldrb	r3, [r7, #7]
 8007c7c:	2b03      	cmp	r3, #3
 8007c7e:	d817      	bhi.n	8007cb0 <USBD_Get_USB_Status+0x44>
 8007c80:	a201      	add	r2, pc, #4	; (adr r2, 8007c88 <USBD_Get_USB_Status+0x1c>)
 8007c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c86:	bf00      	nop
 8007c88:	08007c99 	.word	0x08007c99
 8007c8c:	08007c9f 	.word	0x08007c9f
 8007c90:	08007ca5 	.word	0x08007ca5
 8007c94:	08007cab 	.word	0x08007cab
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007c98:	2300      	movs	r3, #0
 8007c9a:	73fb      	strb	r3, [r7, #15]
    break;
 8007c9c:	e00b      	b.n	8007cb6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007c9e:	2302      	movs	r3, #2
 8007ca0:	73fb      	strb	r3, [r7, #15]
    break;
 8007ca2:	e008      	b.n	8007cb6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	73fb      	strb	r3, [r7, #15]
    break;
 8007ca8:	e005      	b.n	8007cb6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007caa:	2302      	movs	r3, #2
 8007cac:	73fb      	strb	r3, [r7, #15]
    break;
 8007cae:	e002      	b.n	8007cb6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007cb0:	2302      	movs	r3, #2
 8007cb2:	73fb      	strb	r3, [r7, #15]
    break;
 8007cb4:	bf00      	nop
  }
  return usb_status;
 8007cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3714      	adds	r7, #20
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bc80      	pop	{r7}
 8007cc0:	4770      	bx	lr
 8007cc2:	bf00      	nop

08007cc4 <__libc_init_array>:
 8007cc4:	b570      	push	{r4, r5, r6, lr}
 8007cc6:	2600      	movs	r6, #0
 8007cc8:	4d0c      	ldr	r5, [pc, #48]	; (8007cfc <__libc_init_array+0x38>)
 8007cca:	4c0d      	ldr	r4, [pc, #52]	; (8007d00 <__libc_init_array+0x3c>)
 8007ccc:	1b64      	subs	r4, r4, r5
 8007cce:	10a4      	asrs	r4, r4, #2
 8007cd0:	42a6      	cmp	r6, r4
 8007cd2:	d109      	bne.n	8007ce8 <__libc_init_array+0x24>
 8007cd4:	f000 f822 	bl	8007d1c <_init>
 8007cd8:	2600      	movs	r6, #0
 8007cda:	4d0a      	ldr	r5, [pc, #40]	; (8007d04 <__libc_init_array+0x40>)
 8007cdc:	4c0a      	ldr	r4, [pc, #40]	; (8007d08 <__libc_init_array+0x44>)
 8007cde:	1b64      	subs	r4, r4, r5
 8007ce0:	10a4      	asrs	r4, r4, #2
 8007ce2:	42a6      	cmp	r6, r4
 8007ce4:	d105      	bne.n	8007cf2 <__libc_init_array+0x2e>
 8007ce6:	bd70      	pop	{r4, r5, r6, pc}
 8007ce8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cec:	4798      	blx	r3
 8007cee:	3601      	adds	r6, #1
 8007cf0:	e7ee      	b.n	8007cd0 <__libc_init_array+0xc>
 8007cf2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cf6:	4798      	blx	r3
 8007cf8:	3601      	adds	r6, #1
 8007cfa:	e7f2      	b.n	8007ce2 <__libc_init_array+0x1e>
 8007cfc:	08007db0 	.word	0x08007db0
 8007d00:	08007db0 	.word	0x08007db0
 8007d04:	08007db0 	.word	0x08007db0
 8007d08:	08007db4 	.word	0x08007db4

08007d0c <memset>:
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	4402      	add	r2, r0
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d100      	bne.n	8007d16 <memset+0xa>
 8007d14:	4770      	bx	lr
 8007d16:	f803 1b01 	strb.w	r1, [r3], #1
 8007d1a:	e7f9      	b.n	8007d10 <memset+0x4>

08007d1c <_init>:
 8007d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d1e:	bf00      	nop
 8007d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d22:	bc08      	pop	{r3}
 8007d24:	469e      	mov	lr, r3
 8007d26:	4770      	bx	lr

08007d28 <_fini>:
 8007d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d2a:	bf00      	nop
 8007d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d2e:	bc08      	pop	{r3}
 8007d30:	469e      	mov	lr, r3
 8007d32:	4770      	bx	lr
