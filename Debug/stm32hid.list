
stm32hid.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f374  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f8  0800f488  0800f488  0001f488  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f980  0800f980  000203d4  2**0
                  CONTENTS
  4 .ARM          00000000  0800f980  0800f980  000203d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f980  0800f980  000203d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f980  0800f980  0001f980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f984  0800f984  0001f984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003d4  20000000  0800f988  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bd8  200003d8  0800fd5c  000203d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000fb0  0800fd5c  00020fb0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000203d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f966  00000000  00000000  000203fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000424a  00000000  00000000  0003fd63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017a8  00000000  00000000  00043fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001628  00000000  00000000  00045758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006bc6  00000000  00000000  00046d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c593  00000000  00000000  0004d946  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000991d9  00000000  00000000  00069ed9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001030b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000765c  00000000  00000000  00103108  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200003d8 	.word	0x200003d8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800f46c 	.word	0x0800f46c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200003dc 	.word	0x200003dc
 800014c:	0800f46c 	.word	0x0800f46c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b088      	sub	sp, #32
 8000f48:	af04      	add	r7, sp, #16
 8000f4a:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8000f4c:	2364      	movs	r3, #100	; 0x64
 8000f4e:	9302      	str	r3, [sp, #8]
 8000f50:	2301      	movs	r3, #1
 8000f52:	9301      	str	r3, [sp, #4]
 8000f54:	f107 030f 	add.w	r3, r7, #15
 8000f58:	9300      	str	r3, [sp, #0]
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	2275      	movs	r2, #117	; 0x75
 8000f5e:	21d0      	movs	r1, #208	; 0xd0
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f002 fe9b 	bl	8003c9c <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8000f66:	7bfb      	ldrb	r3, [r7, #15]
 8000f68:	2b68      	cmp	r3, #104	; 0x68
 8000f6a:	d13d      	bne.n	8000fe8 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8000f70:	2364      	movs	r3, #100	; 0x64
 8000f72:	9302      	str	r3, [sp, #8]
 8000f74:	2301      	movs	r3, #1
 8000f76:	9301      	str	r3, [sp, #4]
 8000f78:	f107 030e 	add.w	r3, r7, #14
 8000f7c:	9300      	str	r3, [sp, #0]
 8000f7e:	2301      	movs	r3, #1
 8000f80:	226b      	movs	r2, #107	; 0x6b
 8000f82:	21d0      	movs	r1, #208	; 0xd0
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f002 fd8f 	bl	8003aa8 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8000f8a:	2307      	movs	r3, #7
 8000f8c:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8000f8e:	2364      	movs	r3, #100	; 0x64
 8000f90:	9302      	str	r3, [sp, #8]
 8000f92:	2301      	movs	r3, #1
 8000f94:	9301      	str	r3, [sp, #4]
 8000f96:	f107 030e 	add.w	r3, r7, #14
 8000f9a:	9300      	str	r3, [sp, #0]
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	2219      	movs	r2, #25
 8000fa0:	21d0      	movs	r1, #208	; 0xd0
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f002 fd80 	bl	8003aa8 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8000fac:	2364      	movs	r3, #100	; 0x64
 8000fae:	9302      	str	r3, [sp, #8]
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	9301      	str	r3, [sp, #4]
 8000fb4:	f107 030e 	add.w	r3, r7, #14
 8000fb8:	9300      	str	r3, [sp, #0]
 8000fba:	2301      	movs	r3, #1
 8000fbc:	221c      	movs	r2, #28
 8000fbe:	21d0      	movs	r1, #208	; 0xd0
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f002 fd71 	bl	8003aa8 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8000fca:	2364      	movs	r3, #100	; 0x64
 8000fcc:	9302      	str	r3, [sp, #8]
 8000fce:	2301      	movs	r3, #1
 8000fd0:	9301      	str	r3, [sp, #4]
 8000fd2:	f107 030e 	add.w	r3, r7, #14
 8000fd6:	9300      	str	r3, [sp, #0]
 8000fd8:	2301      	movs	r3, #1
 8000fda:	221b      	movs	r2, #27
 8000fdc:	21d0      	movs	r1, #208	; 0xd0
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f002 fd62 	bl	8003aa8 <HAL_I2C_Mem_Write>
        return 0;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	e000      	b.n	8000fea <MPU6050_Init+0xa6>
    }
    return 1;
 8000fe8:	2301      	movs	r3, #1
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3710      	adds	r7, #16
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	0000      	movs	r0, r0
 8000ff4:	0000      	movs	r0, r0
	...

08000ff8 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8000ff8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000ffc:	b094      	sub	sp, #80	; 0x50
 8000ffe:	af04      	add	r7, sp, #16
 8001000:	6078      	str	r0, [r7, #4]
 8001002:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8001004:	2364      	movs	r3, #100	; 0x64
 8001006:	9302      	str	r3, [sp, #8]
 8001008:	230e      	movs	r3, #14
 800100a:	9301      	str	r3, [sp, #4]
 800100c:	f107 0308 	add.w	r3, r7, #8
 8001010:	9300      	str	r3, [sp, #0]
 8001012:	2301      	movs	r3, #1
 8001014:	223b      	movs	r2, #59	; 0x3b
 8001016:	21d0      	movs	r1, #208	; 0xd0
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f002 fe3f 	bl	8003c9c <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 800101e:	7a3b      	ldrb	r3, [r7, #8]
 8001020:	021b      	lsls	r3, r3, #8
 8001022:	b21a      	sxth	r2, r3
 8001024:	7a7b      	ldrb	r3, [r7, #9]
 8001026:	b21b      	sxth	r3, r3
 8001028:	4313      	orrs	r3, r2
 800102a:	b21a      	sxth	r2, r3
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8001030:	7abb      	ldrb	r3, [r7, #10]
 8001032:	021b      	lsls	r3, r3, #8
 8001034:	b21a      	sxth	r2, r3
 8001036:	7afb      	ldrb	r3, [r7, #11]
 8001038:	b21b      	sxth	r3, r3
 800103a:	4313      	orrs	r3, r2
 800103c:	b21a      	sxth	r2, r3
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8001042:	7b3b      	ldrb	r3, [r7, #12]
 8001044:	021b      	lsls	r3, r3, #8
 8001046:	b21a      	sxth	r2, r3
 8001048:	7b7b      	ldrb	r3, [r7, #13]
 800104a:	b21b      	sxth	r3, r3
 800104c:	4313      	orrs	r3, r2
 800104e:	b21a      	sxth	r2, r3
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8001054:	7bbb      	ldrb	r3, [r7, #14]
 8001056:	021b      	lsls	r3, r3, #8
 8001058:	b21a      	sxth	r2, r3
 800105a:	7bfb      	ldrb	r3, [r7, #15]
 800105c:	b21b      	sxth	r3, r3
 800105e:	4313      	orrs	r3, r2
 8001060:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8001062:	7c3b      	ldrb	r3, [r7, #16]
 8001064:	021b      	lsls	r3, r3, #8
 8001066:	b21a      	sxth	r2, r3
 8001068:	7c7b      	ldrb	r3, [r7, #17]
 800106a:	b21b      	sxth	r3, r3
 800106c:	4313      	orrs	r3, r2
 800106e:	b21a      	sxth	r2, r3
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8001074:	7cbb      	ldrb	r3, [r7, #18]
 8001076:	021b      	lsls	r3, r3, #8
 8001078:	b21a      	sxth	r2, r3
 800107a:	7cfb      	ldrb	r3, [r7, #19]
 800107c:	b21b      	sxth	r3, r3
 800107e:	4313      	orrs	r3, r2
 8001080:	b21a      	sxth	r2, r3
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8001086:	7d3b      	ldrb	r3, [r7, #20]
 8001088:	021b      	lsls	r3, r3, #8
 800108a:	b21a      	sxth	r2, r3
 800108c:	7d7b      	ldrb	r3, [r7, #21]
 800108e:	b21b      	sxth	r3, r3
 8001090:	4313      	orrs	r3, r2
 8001092:	b21a      	sxth	r2, r3
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff f9b0 	bl	8000404 <__aeabi_i2d>
 80010a4:	f04f 0200 	mov.w	r2, #0
 80010a8:	4bb7      	ldr	r3, [pc, #732]	; (8001388 <MPU6050_Read_All+0x390>)
 80010aa:	f7ff fb3f 	bl	800072c <__aeabi_ddiv>
 80010ae:	4602      	mov	r2, r0
 80010b0:	460b      	mov	r3, r1
 80010b2:	6839      	ldr	r1, [r7, #0]
 80010b4:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff f9a0 	bl	8000404 <__aeabi_i2d>
 80010c4:	f04f 0200 	mov.w	r2, #0
 80010c8:	4baf      	ldr	r3, [pc, #700]	; (8001388 <MPU6050_Read_All+0x390>)
 80010ca:	f7ff fb2f 	bl	800072c <__aeabi_ddiv>
 80010ce:	4602      	mov	r2, r0
 80010d0:	460b      	mov	r3, r1
 80010d2:	6839      	ldr	r1, [r7, #0]
 80010d4:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff f990 	bl	8000404 <__aeabi_i2d>
 80010e4:	a3a2      	add	r3, pc, #648	; (adr r3, 8001370 <MPU6050_Read_All+0x378>)
 80010e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ea:	f7ff fb1f 	bl	800072c <__aeabi_ddiv>
 80010ee:	4602      	mov	r2, r0
 80010f0:	460b      	mov	r3, r1
 80010f2:	6839      	ldr	r1, [r7, #0]
 80010f4:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 80010f8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff fd7d 	bl	8000bfc <__aeabi_i2f>
 8001102:	4603      	mov	r3, r0
 8001104:	49a1      	ldr	r1, [pc, #644]	; (800138c <MPU6050_Read_All+0x394>)
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff fe80 	bl	8000e0c <__aeabi_fdiv>
 800110c:	4603      	mov	r3, r0
 800110e:	49a0      	ldr	r1, [pc, #640]	; (8001390 <MPU6050_Read_All+0x398>)
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff fcbf 	bl	8000a94 <__addsf3>
 8001116:	4603      	mov	r3, r0
 8001118:	461a      	mov	r2, r3
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	641a      	str	r2, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff f96d 	bl	8000404 <__aeabi_i2d>
 800112a:	a393      	add	r3, pc, #588	; (adr r3, 8001378 <MPU6050_Read_All+0x380>)
 800112c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001130:	f7ff fafc 	bl	800072c <__aeabi_ddiv>
 8001134:	4602      	mov	r2, r0
 8001136:	460b      	mov	r3, r1
 8001138:	6839      	ldr	r1, [r7, #0]
 800113a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff f95d 	bl	8000404 <__aeabi_i2d>
 800114a:	a38b      	add	r3, pc, #556	; (adr r3, 8001378 <MPU6050_Read_All+0x380>)
 800114c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001150:	f7ff faec 	bl	800072c <__aeabi_ddiv>
 8001154:	4602      	mov	r2, r0
 8001156:	460b      	mov	r3, r1
 8001158:	6839      	ldr	r1, [r7, #0]
 800115a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff f94d 	bl	8000404 <__aeabi_i2d>
 800116a:	a383      	add	r3, pc, #524	; (adr r3, 8001378 <MPU6050_Read_All+0x380>)
 800116c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001170:	f7ff fadc 	bl	800072c <__aeabi_ddiv>
 8001174:	4602      	mov	r2, r0
 8001176:	460b      	mov	r3, r1
 8001178:	6839      	ldr	r1, [r7, #0]
 800117a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 800117e:	f001 faa7 	bl	80026d0 <HAL_GetTick>
 8001182:	4602      	mov	r2, r0
 8001184:	4b83      	ldr	r3, [pc, #524]	; (8001394 <MPU6050_Read_All+0x39c>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff f92a 	bl	80003e4 <__aeabi_ui2d>
 8001190:	f04f 0200 	mov.w	r2, #0
 8001194:	4b80      	ldr	r3, [pc, #512]	; (8001398 <MPU6050_Read_All+0x3a0>)
 8001196:	f7ff fac9 	bl	800072c <__aeabi_ddiv>
 800119a:	4602      	mov	r2, r0
 800119c:	460b      	mov	r3, r1
 800119e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 80011a2:	f001 fa95 	bl	80026d0 <HAL_GetTick>
 80011a6:	4603      	mov	r3, r0
 80011a8:	4a7a      	ldr	r2, [pc, #488]	; (8001394 <MPU6050_Read_All+0x39c>)
 80011aa:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011b2:	461a      	mov	r2, r3
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011ba:	fb03 f202 	mul.w	r2, r3, r2
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80011c4:	4619      	mov	r1, r3
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80011cc:	fb03 f301 	mul.w	r3, r3, r1
 80011d0:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff f916 	bl	8000404 <__aeabi_i2d>
 80011d8:	4602      	mov	r2, r0
 80011da:	460b      	mov	r3, r1
 80011dc:	4610      	mov	r0, r2
 80011de:	4619      	mov	r1, r3
 80011e0:	f00d ff9a 	bl	800f118 <sqrt>
 80011e4:	e9c7 0108 	strd	r0, r1, [r7, #32]
    if (roll_sqrt != 0.0)
 80011e8:	f04f 0200 	mov.w	r2, #0
 80011ec:	f04f 0300 	mov.w	r3, #0
 80011f0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80011f4:	f7ff fbd8 	bl	80009a8 <__aeabi_dcmpeq>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d119      	bne.n	8001232 <MPU6050_Read_All+0x23a>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff f8fd 	bl	8000404 <__aeabi_i2d>
 800120a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800120e:	f7ff fa8d 	bl	800072c <__aeabi_ddiv>
 8001212:	4602      	mov	r2, r0
 8001214:	460b      	mov	r3, r1
 8001216:	4610      	mov	r0, r2
 8001218:	4619      	mov	r1, r3
 800121a:	f00d fded 	bl	800edf8 <atan>
 800121e:	a358      	add	r3, pc, #352	; (adr r3, 8001380 <MPU6050_Read_All+0x388>)
 8001220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001224:	f7ff f958 	bl	80004d8 <__aeabi_dmul>
 8001228:	4602      	mov	r2, r0
 800122a:	460b      	mov	r3, r1
 800122c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001230:	e005      	b.n	800123e <MPU6050_Read_All+0x246>
    }
    else
    {
        roll = 0.0;
 8001232:	f04f 0200 	mov.w	r2, #0
 8001236:	f04f 0300 	mov.w	r3, #0
 800123a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001244:	425b      	negs	r3, r3
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff f8dc 	bl	8000404 <__aeabi_i2d>
 800124c:	4682      	mov	sl, r0
 800124e:	468b      	mov	fp, r1
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff f8d4 	bl	8000404 <__aeabi_i2d>
 800125c:	4602      	mov	r2, r0
 800125e:	460b      	mov	r3, r1
 8001260:	4650      	mov	r0, sl
 8001262:	4659      	mov	r1, fp
 8001264:	f00d ff55 	bl	800f112 <atan2>
 8001268:	a345      	add	r3, pc, #276	; (adr r3, 8001380 <MPU6050_Read_All+0x388>)
 800126a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800126e:	f7ff f933 	bl	80004d8 <__aeabi_dmul>
 8001272:	4602      	mov	r2, r0
 8001274:	460b      	mov	r3, r1
 8001276:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 800127a:	f04f 0200 	mov.w	r2, #0
 800127e:	4b47      	ldr	r3, [pc, #284]	; (800139c <MPU6050_Read_All+0x3a4>)
 8001280:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001284:	f7ff fb9a 	bl	80009bc <__aeabi_dcmplt>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d00a      	beq.n	80012a4 <MPU6050_Read_All+0x2ac>
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001294:	f04f 0200 	mov.w	r2, #0
 8001298:	4b41      	ldr	r3, [pc, #260]	; (80013a0 <MPU6050_Read_All+0x3a8>)
 800129a:	f7ff fbad 	bl	80009f8 <__aeabi_dcmpgt>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d114      	bne.n	80012ce <MPU6050_Read_All+0x2d6>
 80012a4:	f04f 0200 	mov.w	r2, #0
 80012a8:	4b3d      	ldr	r3, [pc, #244]	; (80013a0 <MPU6050_Read_All+0x3a8>)
 80012aa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80012ae:	f7ff fba3 	bl	80009f8 <__aeabi_dcmpgt>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d015      	beq.n	80012e4 <MPU6050_Read_All+0x2ec>
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80012be:	f04f 0200 	mov.w	r2, #0
 80012c2:	4b36      	ldr	r3, [pc, #216]	; (800139c <MPU6050_Read_All+0x3a4>)
 80012c4:	f7ff fb7a 	bl	80009bc <__aeabi_dcmplt>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d00a      	beq.n	80012e4 <MPU6050_Read_All+0x2ec>
    {
        KalmanY.angle = pitch;
 80012ce:	4935      	ldr	r1, [pc, #212]	; (80013a4 <MPU6050_Read_All+0x3ac>)
 80012d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80012d4:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 80012d8:	6839      	ldr	r1, [r7, #0]
 80012da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80012de:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 80012e2:	e012      	b.n	800130a <MPU6050_Read_All+0x312>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80012ea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80012ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80012f2:	e9cd 2300 	strd	r2, r3, [sp]
 80012f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80012fa:	482a      	ldr	r0, [pc, #168]	; (80013a4 <MPU6050_Read_All+0x3ac>)
 80012fc:	f000 f856 	bl	80013ac <Kalman_getAngle>
 8001300:	4602      	mov	r2, r0
 8001302:	460b      	mov	r3, r1
 8001304:	6839      	ldr	r1, [r7, #0]
 8001306:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001310:	4690      	mov	r8, r2
 8001312:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8001316:	f04f 0200 	mov.w	r2, #0
 800131a:	4b21      	ldr	r3, [pc, #132]	; (80013a0 <MPU6050_Read_All+0x3a8>)
 800131c:	4640      	mov	r0, r8
 800131e:	4649      	mov	r1, r9
 8001320:	f7ff fb6a 	bl	80009f8 <__aeabi_dcmpgt>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d008      	beq.n	800133c <MPU6050_Read_All+0x344>
        DataStruct->Gx = -DataStruct->Gx;
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001330:	4614      	mov	r4, r2
 8001332:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001342:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001346:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800134a:	e9cd 2300 	strd	r2, r3, [sp]
 800134e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001352:	4815      	ldr	r0, [pc, #84]	; (80013a8 <MPU6050_Read_All+0x3b0>)
 8001354:	f000 f82a 	bl	80013ac <Kalman_getAngle>
 8001358:	4602      	mov	r2, r0
 800135a:	460b      	mov	r3, r1
 800135c:	6839      	ldr	r1, [r7, #0]
 800135e:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
 8001362:	bf00      	nop
 8001364:	3740      	adds	r7, #64	; 0x40
 8001366:	46bd      	mov	sp, r7
 8001368:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800136c:	f3af 8000 	nop.w
 8001370:	00000000 	.word	0x00000000
 8001374:	40cc2900 	.word	0x40cc2900
 8001378:	00000000 	.word	0x00000000
 800137c:	40606000 	.word	0x40606000
 8001380:	1a63c1f8 	.word	0x1a63c1f8
 8001384:	404ca5dc 	.word	0x404ca5dc
 8001388:	40d00000 	.word	0x40d00000
 800138c:	43aa0000 	.word	0x43aa0000
 8001390:	42121eb8 	.word	0x42121eb8
 8001394:	2000044c 	.word	0x2000044c
 8001398:	408f4000 	.word	0x408f4000
 800139c:	c0568000 	.word	0xc0568000
 80013a0:	40568000 	.word	0x40568000
 80013a4:	20000048 	.word	0x20000048
 80013a8:	20000000 	.word	0x20000000

080013ac <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 80013ac:	b5b0      	push	{r4, r5, r7, lr}
 80013ae:	b092      	sub	sp, #72	; 0x48
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	e9c7 2300 	strd	r2, r3, [r7]
    double rate = newRate - Kalman->bias;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80013be:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80013c2:	f7fe fed1 	bl	8000168 <__aeabi_dsub>
 80013c6:	4602      	mov	r2, r0
 80013c8:	460b      	mov	r3, r1
 80013ca:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += dt * rate;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80013d4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80013d8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80013dc:	f7ff f87c 	bl	80004d8 <__aeabi_dmul>
 80013e0:	4602      	mov	r2, r0
 80013e2:	460b      	mov	r3, r1
 80013e4:	4620      	mov	r0, r4
 80013e6:	4629      	mov	r1, r5
 80013e8:	f7fe fec0 	bl	800016c <__adddf3>
 80013ec:	4602      	mov	r2, r0
 80013ee:	460b      	mov	r3, r1
 80013f0:	68f9      	ldr	r1, [r7, #12]
 80013f2:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001402:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001406:	f7ff f867 	bl	80004d8 <__aeabi_dmul>
 800140a:	4602      	mov	r2, r0
 800140c:	460b      	mov	r3, r1
 800140e:	4610      	mov	r0, r2
 8001410:	4619      	mov	r1, r3
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001418:	f7fe fea6 	bl	8000168 <__aeabi_dsub>
 800141c:	4602      	mov	r2, r0
 800141e:	460b      	mov	r3, r1
 8001420:	4610      	mov	r0, r2
 8001422:	4619      	mov	r1, r3
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800142a:	f7fe fe9d 	bl	8000168 <__aeabi_dsub>
 800142e:	4602      	mov	r2, r0
 8001430:	460b      	mov	r3, r1
 8001432:	4610      	mov	r0, r2
 8001434:	4619      	mov	r1, r3
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800143c:	f7fe fe96 	bl	800016c <__adddf3>
 8001440:	4602      	mov	r2, r0
 8001442:	460b      	mov	r3, r1
 8001444:	4610      	mov	r0, r2
 8001446:	4619      	mov	r1, r3
 8001448:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800144c:	f7ff f844 	bl	80004d8 <__aeabi_dmul>
 8001450:	4602      	mov	r2, r0
 8001452:	460b      	mov	r3, r1
 8001454:	4620      	mov	r0, r4
 8001456:	4629      	mov	r1, r5
 8001458:	f7fe fe88 	bl	800016c <__adddf3>
 800145c:	4602      	mov	r2, r0
 800145e:	460b      	mov	r3, r1
 8001460:	68f9      	ldr	r1, [r7, #12]
 8001462:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001472:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001476:	f7ff f82f 	bl	80004d8 <__aeabi_dmul>
 800147a:	4602      	mov	r2, r0
 800147c:	460b      	mov	r3, r1
 800147e:	4620      	mov	r0, r4
 8001480:	4629      	mov	r1, r5
 8001482:	f7fe fe71 	bl	8000168 <__aeabi_dsub>
 8001486:	4602      	mov	r2, r0
 8001488:	460b      	mov	r3, r1
 800148a:	68f9      	ldr	r1, [r7, #12]
 800148c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800149c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80014a0:	f7ff f81a 	bl	80004d8 <__aeabi_dmul>
 80014a4:	4602      	mov	r2, r0
 80014a6:	460b      	mov	r3, r1
 80014a8:	4620      	mov	r0, r4
 80014aa:	4629      	mov	r1, r5
 80014ac:	f7fe fe5c 	bl	8000168 <__aeabi_dsub>
 80014b0:	4602      	mov	r2, r0
 80014b2:	460b      	mov	r3, r1
 80014b4:	68f9      	ldr	r1, [r7, #12]
 80014b6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80014c6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80014ca:	f7ff f805 	bl	80004d8 <__aeabi_dmul>
 80014ce:	4602      	mov	r2, r0
 80014d0:	460b      	mov	r3, r1
 80014d2:	4620      	mov	r0, r4
 80014d4:	4629      	mov	r1, r5
 80014d6:	f7fe fe49 	bl	800016c <__adddf3>
 80014da:	4602      	mov	r2, r0
 80014dc:	460b      	mov	r3, r1
 80014de:	68f9      	ldr	r1, [r7, #12]
 80014e0:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80014f0:	f7fe fe3c 	bl	800016c <__adddf3>
 80014f4:	4602      	mov	r2, r0
 80014f6:	460b      	mov	r3, r1
 80014f8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001502:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001506:	f7ff f911 	bl	800072c <__aeabi_ddiv>
 800150a:	4602      	mov	r2, r0
 800150c:	460b      	mov	r3, r1
 800150e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    K[1] = Kalman->P[1][0] / S;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001518:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800151c:	f7ff f906 	bl	800072c <__aeabi_ddiv>
 8001520:	4602      	mov	r2, r0
 8001522:	460b      	mov	r3, r1
 8001524:	e9c7 2306 	strd	r2, r3, [r7, #24]

    double y = newAngle - Kalman->angle;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800152e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001532:	f7fe fe19 	bl	8000168 <__aeabi_dsub>
 8001536:	4602      	mov	r2, r0
 8001538:	460b      	mov	r3, r1
 800153a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    Kalman->angle += K[0] * y;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001544:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001548:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800154c:	f7fe ffc4 	bl	80004d8 <__aeabi_dmul>
 8001550:	4602      	mov	r2, r0
 8001552:	460b      	mov	r3, r1
 8001554:	4620      	mov	r0, r4
 8001556:	4629      	mov	r1, r5
 8001558:	f7fe fe08 	bl	800016c <__adddf3>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	68f9      	ldr	r1, [r7, #12]
 8001562:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800156c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001570:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001574:	f7fe ffb0 	bl	80004d8 <__aeabi_dmul>
 8001578:	4602      	mov	r2, r0
 800157a:	460b      	mov	r3, r1
 800157c:	4620      	mov	r0, r4
 800157e:	4629      	mov	r1, r5
 8001580:	f7fe fdf4 	bl	800016c <__adddf3>
 8001584:	4602      	mov	r2, r0
 8001586:	460b      	mov	r3, r1
 8001588:	68f9      	ldr	r1, [r7, #12]
 800158a:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001594:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double P01_temp = Kalman->P[0][1];
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800159e:	e9c7 2308 	strd	r2, r3, [r7, #32]

    Kalman->P[0][0] -= K[0] * P00_temp;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80015a8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80015ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80015b0:	f7fe ff92 	bl	80004d8 <__aeabi_dmul>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	4620      	mov	r0, r4
 80015ba:	4629      	mov	r1, r5
 80015bc:	f7fe fdd4 	bl	8000168 <__aeabi_dsub>
 80015c0:	4602      	mov	r2, r0
 80015c2:	460b      	mov	r3, r1
 80015c4:	68f9      	ldr	r1, [r7, #12]
 80015c6:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80015d0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80015d4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80015d8:	f7fe ff7e 	bl	80004d8 <__aeabi_dmul>
 80015dc:	4602      	mov	r2, r0
 80015de:	460b      	mov	r3, r1
 80015e0:	4620      	mov	r0, r4
 80015e2:	4629      	mov	r1, r5
 80015e4:	f7fe fdc0 	bl	8000168 <__aeabi_dsub>
 80015e8:	4602      	mov	r2, r0
 80015ea:	460b      	mov	r3, r1
 80015ec:	68f9      	ldr	r1, [r7, #12]
 80015ee:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 80015f8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80015fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001600:	f7fe ff6a 	bl	80004d8 <__aeabi_dmul>
 8001604:	4602      	mov	r2, r0
 8001606:	460b      	mov	r3, r1
 8001608:	4620      	mov	r0, r4
 800160a:	4629      	mov	r1, r5
 800160c:	f7fe fdac 	bl	8000168 <__aeabi_dsub>
 8001610:	4602      	mov	r2, r0
 8001612:	460b      	mov	r3, r1
 8001614:	68f9      	ldr	r1, [r7, #12]
 8001616:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001620:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001624:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001628:	f7fe ff56 	bl	80004d8 <__aeabi_dmul>
 800162c:	4602      	mov	r2, r0
 800162e:	460b      	mov	r3, r1
 8001630:	4620      	mov	r0, r4
 8001632:	4629      	mov	r1, r5
 8001634:	f7fe fd98 	bl	8000168 <__aeabi_dsub>
 8001638:	4602      	mov	r2, r0
 800163a:	460b      	mov	r3, r1
 800163c:	68f9      	ldr	r1, [r7, #12]
 800163e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
};
 8001648:	4610      	mov	r0, r2
 800164a:	4619      	mov	r1, r3
 800164c:	3748      	adds	r7, #72	; 0x48
 800164e:	46bd      	mov	sp, r7
 8001650:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001654 <MPU_Calibrate>:

keyboardHID keyboardhid = {0,0,0,0,0,0,0,0};


void MPU_Calibrate (void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
	for (int i=0; i<50; i++)
 800165a:	2300      	movs	r3, #0
 800165c:	607b      	str	r3, [r7, #4]
 800165e:	e0a9      	b.n	80017b4 <MPU_Calibrate+0x160>
	{
		MPU6050_Read_All(&hi2c2,&mpu6050);
 8001660:	495b      	ldr	r1, [pc, #364]	; (80017d0 <MPU_Calibrate+0x17c>)
 8001662:	485c      	ldr	r0, [pc, #368]	; (80017d4 <MPU_Calibrate+0x180>)
 8001664:	f7ff fcc8 	bl	8000ff8 <MPU6050_Read_All>
		min_xval = MIN(min_xval, mpu6050.KalmanAngleX);
 8001668:	4b5b      	ldr	r3, [pc, #364]	; (80017d8 <MPU_Calibrate+0x184>)
 800166a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800166e:	4618      	mov	r0, r3
 8001670:	f7fe fec8 	bl	8000404 <__aeabi_i2d>
 8001674:	4b56      	ldr	r3, [pc, #344]	; (80017d0 <MPU_Calibrate+0x17c>)
 8001676:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800167a:	f7ff f99f 	bl	80009bc <__aeabi_dcmplt>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d00e      	beq.n	80016a2 <MPU_Calibrate+0x4e>
 8001684:	4b54      	ldr	r3, [pc, #336]	; (80017d8 <MPU_Calibrate+0x184>)
 8001686:	f9b3 3000 	ldrsh.w	r3, [r3]
 800168a:	4618      	mov	r0, r3
 800168c:	f7fe feba 	bl	8000404 <__aeabi_i2d>
 8001690:	4602      	mov	r2, r0
 8001692:	460b      	mov	r3, r1
 8001694:	4610      	mov	r0, r2
 8001696:	4619      	mov	r1, r3
 8001698:	f7ff f9ce 	bl	8000a38 <__aeabi_d2iz>
 800169c:	4603      	mov	r3, r0
 800169e:	b21b      	sxth	r3, r3
 80016a0:	e008      	b.n	80016b4 <MPU_Calibrate+0x60>
 80016a2:	4b4b      	ldr	r3, [pc, #300]	; (80017d0 <MPU_Calibrate+0x17c>)
 80016a4:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80016a8:	4610      	mov	r0, r2
 80016aa:	4619      	mov	r1, r3
 80016ac:	f7ff f9c4 	bl	8000a38 <__aeabi_d2iz>
 80016b0:	4603      	mov	r3, r0
 80016b2:	b21b      	sxth	r3, r3
 80016b4:	4a48      	ldr	r2, [pc, #288]	; (80017d8 <MPU_Calibrate+0x184>)
 80016b6:	8013      	strh	r3, [r2, #0]
		max_xval = MAX(max_xval, mpu6050.KalmanAngleX);
 80016b8:	4b48      	ldr	r3, [pc, #288]	; (80017dc <MPU_Calibrate+0x188>)
 80016ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016be:	4618      	mov	r0, r3
 80016c0:	f7fe fea0 	bl	8000404 <__aeabi_i2d>
 80016c4:	4b42      	ldr	r3, [pc, #264]	; (80017d0 <MPU_Calibrate+0x17c>)
 80016c6:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80016ca:	f7ff f995 	bl	80009f8 <__aeabi_dcmpgt>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d00e      	beq.n	80016f2 <MPU_Calibrate+0x9e>
 80016d4:	4b41      	ldr	r3, [pc, #260]	; (80017dc <MPU_Calibrate+0x188>)
 80016d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016da:	4618      	mov	r0, r3
 80016dc:	f7fe fe92 	bl	8000404 <__aeabi_i2d>
 80016e0:	4602      	mov	r2, r0
 80016e2:	460b      	mov	r3, r1
 80016e4:	4610      	mov	r0, r2
 80016e6:	4619      	mov	r1, r3
 80016e8:	f7ff f9a6 	bl	8000a38 <__aeabi_d2iz>
 80016ec:	4603      	mov	r3, r0
 80016ee:	b21b      	sxth	r3, r3
 80016f0:	e008      	b.n	8001704 <MPU_Calibrate+0xb0>
 80016f2:	4b37      	ldr	r3, [pc, #220]	; (80017d0 <MPU_Calibrate+0x17c>)
 80016f4:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80016f8:	4610      	mov	r0, r2
 80016fa:	4619      	mov	r1, r3
 80016fc:	f7ff f99c 	bl	8000a38 <__aeabi_d2iz>
 8001700:	4603      	mov	r3, r0
 8001702:	b21b      	sxth	r3, r3
 8001704:	4a35      	ldr	r2, [pc, #212]	; (80017dc <MPU_Calibrate+0x188>)
 8001706:	8013      	strh	r3, [r2, #0]
		min_yval = MIN(min_yval, mpu6050.KalmanAngleY);
 8001708:	4b35      	ldr	r3, [pc, #212]	; (80017e0 <MPU_Calibrate+0x18c>)
 800170a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800170e:	4618      	mov	r0, r3
 8001710:	f7fe fe78 	bl	8000404 <__aeabi_i2d>
 8001714:	4b2e      	ldr	r3, [pc, #184]	; (80017d0 <MPU_Calibrate+0x17c>)
 8001716:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800171a:	f7ff f94f 	bl	80009bc <__aeabi_dcmplt>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d00e      	beq.n	8001742 <MPU_Calibrate+0xee>
 8001724:	4b2e      	ldr	r3, [pc, #184]	; (80017e0 <MPU_Calibrate+0x18c>)
 8001726:	f9b3 3000 	ldrsh.w	r3, [r3]
 800172a:	4618      	mov	r0, r3
 800172c:	f7fe fe6a 	bl	8000404 <__aeabi_i2d>
 8001730:	4602      	mov	r2, r0
 8001732:	460b      	mov	r3, r1
 8001734:	4610      	mov	r0, r2
 8001736:	4619      	mov	r1, r3
 8001738:	f7ff f97e 	bl	8000a38 <__aeabi_d2iz>
 800173c:	4603      	mov	r3, r0
 800173e:	b21b      	sxth	r3, r3
 8001740:	e008      	b.n	8001754 <MPU_Calibrate+0x100>
 8001742:	4b23      	ldr	r3, [pc, #140]	; (80017d0 <MPU_Calibrate+0x17c>)
 8001744:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001748:	4610      	mov	r0, r2
 800174a:	4619      	mov	r1, r3
 800174c:	f7ff f974 	bl	8000a38 <__aeabi_d2iz>
 8001750:	4603      	mov	r3, r0
 8001752:	b21b      	sxth	r3, r3
 8001754:	4a22      	ldr	r2, [pc, #136]	; (80017e0 <MPU_Calibrate+0x18c>)
 8001756:	8013      	strh	r3, [r2, #0]
		max_yval = MAX(max_yval, mpu6050.KalmanAngleY);
 8001758:	4b22      	ldr	r3, [pc, #136]	; (80017e4 <MPU_Calibrate+0x190>)
 800175a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800175e:	4618      	mov	r0, r3
 8001760:	f7fe fe50 	bl	8000404 <__aeabi_i2d>
 8001764:	4b1a      	ldr	r3, [pc, #104]	; (80017d0 <MPU_Calibrate+0x17c>)
 8001766:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800176a:	f7ff f945 	bl	80009f8 <__aeabi_dcmpgt>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d00e      	beq.n	8001792 <MPU_Calibrate+0x13e>
 8001774:	4b1b      	ldr	r3, [pc, #108]	; (80017e4 <MPU_Calibrate+0x190>)
 8001776:	f9b3 3000 	ldrsh.w	r3, [r3]
 800177a:	4618      	mov	r0, r3
 800177c:	f7fe fe42 	bl	8000404 <__aeabi_i2d>
 8001780:	4602      	mov	r2, r0
 8001782:	460b      	mov	r3, r1
 8001784:	4610      	mov	r0, r2
 8001786:	4619      	mov	r1, r3
 8001788:	f7ff f956 	bl	8000a38 <__aeabi_d2iz>
 800178c:	4603      	mov	r3, r0
 800178e:	b21b      	sxth	r3, r3
 8001790:	e008      	b.n	80017a4 <MPU_Calibrate+0x150>
 8001792:	4b0f      	ldr	r3, [pc, #60]	; (80017d0 <MPU_Calibrate+0x17c>)
 8001794:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001798:	4610      	mov	r0, r2
 800179a:	4619      	mov	r1, r3
 800179c:	f7ff f94c 	bl	8000a38 <__aeabi_d2iz>
 80017a0:	4603      	mov	r3, r0
 80017a2:	b21b      	sxth	r3, r3
 80017a4:	4a0f      	ldr	r2, [pc, #60]	; (80017e4 <MPU_Calibrate+0x190>)
 80017a6:	8013      	strh	r3, [r2, #0]
		HAL_Delay (50);
 80017a8:	2032      	movs	r0, #50	; 0x32
 80017aa:	f000 ff9b 	bl	80026e4 <HAL_Delay>
	for (int i=0; i<50; i++)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	3301      	adds	r3, #1
 80017b2:	607b      	str	r3, [r7, #4]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2b31      	cmp	r3, #49	; 0x31
 80017b8:	f77f af52 	ble.w	8001660 <MPU_Calibrate+0xc>
	}

	/* Turn On the LED to show the completion of calibration */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 80017bc:	2200      	movs	r2, #0
 80017be:	2120      	movs	r1, #32
 80017c0:	4809      	ldr	r0, [pc, #36]	; (80017e8 <MPU_Calibrate+0x194>)
 80017c2:	f001 ffe4 	bl	800378e <HAL_GPIO_WritePin>
}
 80017c6:	bf00      	nop
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	20000480 	.word	0x20000480
 80017d4:	200004d8 	.word	0x200004d8
 80017d8:	20000090 	.word	0x20000090
 80017dc:	20000092 	.word	0x20000092
 80017e0:	20000094 	.word	0x20000094
 80017e4:	20000096 	.word	0x20000096
 80017e8:	40010c00 	.word	0x40010c00

080017ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017ec:	b5b0      	push	{r4, r5, r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017f2:	f000 ff15 	bl	8002620 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017f6:	f000 f991 	bl	8001b1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017fa:	f000 fb11 	bl	8001e20 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80017fe:	f00a f873 	bl	800b8e8 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8001802:	f000 f9e9 	bl	8001bd8 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001806:	f000 fa25 	bl	8001c54 <MX_ADC2_Init>
  MX_USART1_UART_Init();
 800180a:	f000 fadf 	bl	8001dcc <MX_USART1_UART_Init>
  MX_I2C2_Init();
 800180e:	f000 fa5f 	bl	8001cd0 <MX_I2C2_Init>
  MX_TIM1_Init();
 8001812:	f000 fa8b 	bl	8001d2c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  MPU6050_Init(&hi2c2);
 8001816:	48ac      	ldr	r0, [pc, #688]	; (8001ac8 <main+0x2dc>)
 8001818:	f7ff fb94 	bl	8000f44 <MPU6050_Init>
  MPU_Calibrate();
 800181c:	f7ff ff1a 	bl	8001654 <MPU_Calibrate>

  HAL_UART_Receive_IT(&huart1, &UART1_recv, 1);
 8001820:	2201      	movs	r2, #1
 8001822:	49aa      	ldr	r1, [pc, #680]	; (8001acc <main+0x2e0>)
 8001824:	48aa      	ldr	r0, [pc, #680]	; (8001ad0 <main+0x2e4>)
 8001826:	f005 ff44 	bl	80076b2 <HAL_UART_Receive_IT>
  HAL_ADCEx_Calibration_Start(&hadc1);
 800182a:	48aa      	ldr	r0, [pc, #680]	; (8001ad4 <main+0x2e8>)
 800182c:	f001 fbaa 	bl	8002f84 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2);
 8001830:	48a9      	ldr	r0, [pc, #676]	; (8001ad8 <main+0x2ec>)
 8001832:	f001 fba7 	bl	8002f84 <HAL_ADCEx_Calibration_Start>
  debugenable.system = 1;
 8001836:	4ba9      	ldr	r3, [pc, #676]	; (8001adc <main+0x2f0>)
 8001838:	2201      	movs	r2, #1
 800183a:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MPU6050_Read_All(&hi2c2,&mpu6050);
 800183c:	49a8      	ldr	r1, [pc, #672]	; (8001ae0 <main+0x2f4>)
 800183e:	48a2      	ldr	r0, [pc, #648]	; (8001ac8 <main+0x2dc>)
 8001840:	f7ff fbda 	bl	8000ff8 <MPU6050_Read_All>
//	  SIMPLE_DEBUG("%f,%f,%f\n ",mpu6050.Gx,mpu6050.Gy,mpu6050.Gz);
	  SIMPLE_DEBUG("%f,%f\n",mpu6050.KalmanAngleX,mpu6050.KalmanAngleY)
 8001844:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001848:	2100      	movs	r1, #0
 800184a:	48a6      	ldr	r0, [pc, #664]	; (8001ae4 <main+0x2f8>)
 800184c:	f00a fc30 	bl	800c0b0 <memset>
 8001850:	4ba3      	ldr	r3, [pc, #652]	; (8001ae0 <main+0x2f4>)
 8001852:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8001856:	4ba2      	ldr	r3, [pc, #648]	; (8001ae0 <main+0x2f4>)
 8001858:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800185c:	e9cd 2300 	strd	r2, r3, [sp]
 8001860:	4602      	mov	r2, r0
 8001862:	460b      	mov	r3, r1
 8001864:	49a0      	ldr	r1, [pc, #640]	; (8001ae8 <main+0x2fc>)
 8001866:	489f      	ldr	r0, [pc, #636]	; (8001ae4 <main+0x2f8>)
 8001868:	f00b f88a 	bl	800c980 <siprintf>
 800186c:	489d      	ldr	r0, [pc, #628]	; (8001ae4 <main+0x2f8>)
 800186e:	f7fe fc6f 	bl	8000150 <strlen>
 8001872:	4603      	mov	r3, r0
 8001874:	b29a      	uxth	r2, r3
 8001876:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800187a:	499a      	ldr	r1, [pc, #616]	; (8001ae4 <main+0x2f8>)
 800187c:	4894      	ldr	r0, [pc, #592]	; (8001ad0 <main+0x2e4>)
 800187e:	f005 fe86 	bl	800758e <HAL_UART_Transmit>
	  if (mpu6050.KalmanAngleX < min_xval) newxval = mpu6050.KalmanAngleX - min_xval;
 8001882:	4b97      	ldr	r3, [pc, #604]	; (8001ae0 <main+0x2f4>)
 8001884:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 8001888:	4b98      	ldr	r3, [pc, #608]	; (8001aec <main+0x300>)
 800188a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800188e:	4618      	mov	r0, r3
 8001890:	f7fe fdb8 	bl	8000404 <__aeabi_i2d>
 8001894:	4602      	mov	r2, r0
 8001896:	460b      	mov	r3, r1
 8001898:	4620      	mov	r0, r4
 800189a:	4629      	mov	r1, r5
 800189c:	f7ff f88e 	bl	80009bc <__aeabi_dcmplt>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d018      	beq.n	80018d8 <main+0xec>
 80018a6:	4b8e      	ldr	r3, [pc, #568]	; (8001ae0 <main+0x2f4>)
 80018a8:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 80018ac:	4b8f      	ldr	r3, [pc, #572]	; (8001aec <main+0x300>)
 80018ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7fe fda6 	bl	8000404 <__aeabi_i2d>
 80018b8:	4602      	mov	r2, r0
 80018ba:	460b      	mov	r3, r1
 80018bc:	4620      	mov	r0, r4
 80018be:	4629      	mov	r1, r5
 80018c0:	f7fe fc52 	bl	8000168 <__aeabi_dsub>
 80018c4:	4602      	mov	r2, r0
 80018c6:	460b      	mov	r3, r1
 80018c8:	4610      	mov	r0, r2
 80018ca:	4619      	mov	r1, r3
 80018cc:	f7ff f8b4 	bl	8000a38 <__aeabi_d2iz>
 80018d0:	4603      	mov	r3, r0
 80018d2:	b21a      	sxth	r2, r3
 80018d4:	4b86      	ldr	r3, [pc, #536]	; (8001af0 <main+0x304>)
 80018d6:	801a      	strh	r2, [r3, #0]
	  if (mpu6050.KalmanAngleX > max_xval) newxval = mpu6050.KalmanAngleX - max_xval;
 80018d8:	4b81      	ldr	r3, [pc, #516]	; (8001ae0 <main+0x2f4>)
 80018da:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 80018de:	4b85      	ldr	r3, [pc, #532]	; (8001af4 <main+0x308>)
 80018e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7fe fd8d 	bl	8000404 <__aeabi_i2d>
 80018ea:	4602      	mov	r2, r0
 80018ec:	460b      	mov	r3, r1
 80018ee:	4620      	mov	r0, r4
 80018f0:	4629      	mov	r1, r5
 80018f2:	f7ff f881 	bl	80009f8 <__aeabi_dcmpgt>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d018      	beq.n	800192e <main+0x142>
 80018fc:	4b78      	ldr	r3, [pc, #480]	; (8001ae0 <main+0x2f4>)
 80018fe:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 8001902:	4b7c      	ldr	r3, [pc, #496]	; (8001af4 <main+0x308>)
 8001904:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001908:	4618      	mov	r0, r3
 800190a:	f7fe fd7b 	bl	8000404 <__aeabi_i2d>
 800190e:	4602      	mov	r2, r0
 8001910:	460b      	mov	r3, r1
 8001912:	4620      	mov	r0, r4
 8001914:	4629      	mov	r1, r5
 8001916:	f7fe fc27 	bl	8000168 <__aeabi_dsub>
 800191a:	4602      	mov	r2, r0
 800191c:	460b      	mov	r3, r1
 800191e:	4610      	mov	r0, r2
 8001920:	4619      	mov	r1, r3
 8001922:	f7ff f889 	bl	8000a38 <__aeabi_d2iz>
 8001926:	4603      	mov	r3, r0
 8001928:	b21a      	sxth	r2, r3
 800192a:	4b71      	ldr	r3, [pc, #452]	; (8001af0 <main+0x304>)
 800192c:	801a      	strh	r2, [r3, #0]
	  if (mpu6050.KalmanAngleY < min_yval) newyval = mpu6050.KalmanAngleY - min_yval;
 800192e:	4b6c      	ldr	r3, [pc, #432]	; (8001ae0 <main+0x2f4>)
 8001930:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8001934:	4b70      	ldr	r3, [pc, #448]	; (8001af8 <main+0x30c>)
 8001936:	f9b3 3000 	ldrsh.w	r3, [r3]
 800193a:	4618      	mov	r0, r3
 800193c:	f7fe fd62 	bl	8000404 <__aeabi_i2d>
 8001940:	4602      	mov	r2, r0
 8001942:	460b      	mov	r3, r1
 8001944:	4620      	mov	r0, r4
 8001946:	4629      	mov	r1, r5
 8001948:	f7ff f838 	bl	80009bc <__aeabi_dcmplt>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d018      	beq.n	8001984 <main+0x198>
 8001952:	4b63      	ldr	r3, [pc, #396]	; (8001ae0 <main+0x2f4>)
 8001954:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8001958:	4b67      	ldr	r3, [pc, #412]	; (8001af8 <main+0x30c>)
 800195a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800195e:	4618      	mov	r0, r3
 8001960:	f7fe fd50 	bl	8000404 <__aeabi_i2d>
 8001964:	4602      	mov	r2, r0
 8001966:	460b      	mov	r3, r1
 8001968:	4620      	mov	r0, r4
 800196a:	4629      	mov	r1, r5
 800196c:	f7fe fbfc 	bl	8000168 <__aeabi_dsub>
 8001970:	4602      	mov	r2, r0
 8001972:	460b      	mov	r3, r1
 8001974:	4610      	mov	r0, r2
 8001976:	4619      	mov	r1, r3
 8001978:	f7ff f85e 	bl	8000a38 <__aeabi_d2iz>
 800197c:	4603      	mov	r3, r0
 800197e:	b21a      	sxth	r2, r3
 8001980:	4b5e      	ldr	r3, [pc, #376]	; (8001afc <main+0x310>)
 8001982:	801a      	strh	r2, [r3, #0]
	  if (mpu6050.KalmanAngleY > max_yval) newyval = mpu6050.KalmanAngleY - max_yval;
 8001984:	4b56      	ldr	r3, [pc, #344]	; (8001ae0 <main+0x2f4>)
 8001986:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 800198a:	4b5d      	ldr	r3, [pc, #372]	; (8001b00 <main+0x314>)
 800198c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001990:	4618      	mov	r0, r3
 8001992:	f7fe fd37 	bl	8000404 <__aeabi_i2d>
 8001996:	4602      	mov	r2, r0
 8001998:	460b      	mov	r3, r1
 800199a:	4620      	mov	r0, r4
 800199c:	4629      	mov	r1, r5
 800199e:	f7ff f82b 	bl	80009f8 <__aeabi_dcmpgt>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d018      	beq.n	80019da <main+0x1ee>
 80019a8:	4b4d      	ldr	r3, [pc, #308]	; (8001ae0 <main+0x2f4>)
 80019aa:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 80019ae:	4b54      	ldr	r3, [pc, #336]	; (8001b00 <main+0x314>)
 80019b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7fe fd25 	bl	8000404 <__aeabi_i2d>
 80019ba:	4602      	mov	r2, r0
 80019bc:	460b      	mov	r3, r1
 80019be:	4620      	mov	r0, r4
 80019c0:	4629      	mov	r1, r5
 80019c2:	f7fe fbd1 	bl	8000168 <__aeabi_dsub>
 80019c6:	4602      	mov	r2, r0
 80019c8:	460b      	mov	r3, r1
 80019ca:	4610      	mov	r0, r2
 80019cc:	4619      	mov	r1, r3
 80019ce:	f7ff f833 	bl	8000a38 <__aeabi_d2iz>
 80019d2:	4603      	mov	r3, r0
 80019d4:	b21a      	sxth	r2, r3
 80019d6:	4b49      	ldr	r3, [pc, #292]	; (8001afc <main+0x310>)
 80019d8:	801a      	strh	r2, [r3, #0]

	  SIMPLE_DEBUG("%d,%d\n",newxval,newyval);
 80019da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019de:	2100      	movs	r1, #0
 80019e0:	4840      	ldr	r0, [pc, #256]	; (8001ae4 <main+0x2f8>)
 80019e2:	f00a fb65 	bl	800c0b0 <memset>
 80019e6:	4b42      	ldr	r3, [pc, #264]	; (8001af0 <main+0x304>)
 80019e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019ec:	461a      	mov	r2, r3
 80019ee:	4b43      	ldr	r3, [pc, #268]	; (8001afc <main+0x310>)
 80019f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019f4:	4943      	ldr	r1, [pc, #268]	; (8001b04 <main+0x318>)
 80019f6:	483b      	ldr	r0, [pc, #236]	; (8001ae4 <main+0x2f8>)
 80019f8:	f00a ffc2 	bl	800c980 <siprintf>
 80019fc:	4839      	ldr	r0, [pc, #228]	; (8001ae4 <main+0x2f8>)
 80019fe:	f7fe fba7 	bl	8000150 <strlen>
 8001a02:	4603      	mov	r3, r0
 8001a04:	b29a      	uxth	r2, r3
 8001a06:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001a0a:	4936      	ldr	r1, [pc, #216]	; (8001ae4 <main+0x2f8>)
 8001a0c:	4830      	ldr	r0, [pc, #192]	; (8001ad0 <main+0x2e4>)
 8001a0e:	f005 fdbe 	bl	800758e <HAL_UART_Transmit>
//		  mousehid.mouse_x = newyval/3;
//	  }
//
//	  else mousehid.mouse_x = 0;

	  if (((newyval > 5) || (newyval < -5))||((newxval > 5) || (newxval < -5)))
 8001a12:	4b3a      	ldr	r3, [pc, #232]	; (8001afc <main+0x310>)
 8001a14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a18:	2b05      	cmp	r3, #5
 8001a1a:	dc10      	bgt.n	8001a3e <main+0x252>
 8001a1c:	4b37      	ldr	r3, [pc, #220]	; (8001afc <main+0x310>)
 8001a1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a22:	f113 0f05 	cmn.w	r3, #5
 8001a26:	db0a      	blt.n	8001a3e <main+0x252>
 8001a28:	4b31      	ldr	r3, [pc, #196]	; (8001af0 <main+0x304>)
 8001a2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a2e:	2b05      	cmp	r3, #5
 8001a30:	dc05      	bgt.n	8001a3e <main+0x252>
 8001a32:	4b2f      	ldr	r3, [pc, #188]	; (8001af0 <main+0x304>)
 8001a34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a38:	f113 0f05 	cmn.w	r3, #5
 8001a3c:	da18      	bge.n	8001a70 <main+0x284>
	  {
		  mousehid.mouse_x = newyval/3;
 8001a3e:	4b2f      	ldr	r3, [pc, #188]	; (8001afc <main+0x310>)
 8001a40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a44:	4a30      	ldr	r2, [pc, #192]	; (8001b08 <main+0x31c>)
 8001a46:	fb82 1203 	smull	r1, r2, r2, r3
 8001a4a:	17db      	asrs	r3, r3, #31
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	b21b      	sxth	r3, r3
 8001a50:	b25a      	sxtb	r2, r3
 8001a52:	4b2e      	ldr	r3, [pc, #184]	; (8001b0c <main+0x320>)
 8001a54:	705a      	strb	r2, [r3, #1]
		  mousehid.mouse_y = newxval/3;
 8001a56:	4b26      	ldr	r3, [pc, #152]	; (8001af0 <main+0x304>)
 8001a58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a5c:	4a2a      	ldr	r2, [pc, #168]	; (8001b08 <main+0x31c>)
 8001a5e:	fb82 1203 	smull	r1, r2, r2, r3
 8001a62:	17db      	asrs	r3, r3, #31
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	b21b      	sxth	r3, r3
 8001a68:	b25a      	sxtb	r2, r3
 8001a6a:	4b28      	ldr	r3, [pc, #160]	; (8001b0c <main+0x320>)
 8001a6c:	709a      	strb	r2, [r3, #2]
 8001a6e:	e005      	b.n	8001a7c <main+0x290>
	  }

	  else
      {
		mousehid.mouse_x = 0;
 8001a70:	4b26      	ldr	r3, [pc, #152]	; (8001b0c <main+0x320>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	705a      	strb	r2, [r3, #1]
		mousehid.mouse_y = 0;
 8001a76:	4b25      	ldr	r3, [pc, #148]	; (8001b0c <main+0x320>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	709a      	strb	r2, [r3, #2]
      }

	  HAL_ADC_Start(&hadc1);
 8001a7c:	4815      	ldr	r0, [pc, #84]	; (8001ad4 <main+0x2e8>)
 8001a7e:	f000 ff2d 	bl	80028dc <HAL_ADC_Start>
      HAL_ADC_Start(&hadc2);
 8001a82:	4815      	ldr	r0, [pc, #84]	; (8001ad8 <main+0x2ec>)
 8001a84:	f000 ff2a 	bl	80028dc <HAL_ADC_Start>
     // Poll ADC1 Peripheral & TimeOut = 1mSec
      HAL_ADC_PollForConversion(&hadc1, 1);
 8001a88:	2101      	movs	r1, #1
 8001a8a:	4812      	ldr	r0, [pc, #72]	; (8001ad4 <main+0x2e8>)
 8001a8c:	f000 ffd4 	bl	8002a38 <HAL_ADC_PollForConversion>
      HAL_ADC_PollForConversion(&hadc2, 1);
 8001a90:	2101      	movs	r1, #1
 8001a92:	4811      	ldr	r0, [pc, #68]	; (8001ad8 <main+0x2ec>)
 8001a94:	f000 ffd0 	bl	8002a38 <HAL_ADC_PollForConversion>
     // Read The ADC Conversion Result & Map It To PWM DutyCycle
      AD_RES1 = HAL_ADC_GetValue(&hadc1);
 8001a98:	480e      	ldr	r0, [pc, #56]	; (8001ad4 <main+0x2e8>)
 8001a9a:	f001 f8d3 	bl	8002c44 <HAL_ADC_GetValue>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	b29a      	uxth	r2, r3
 8001aa2:	4b1b      	ldr	r3, [pc, #108]	; (8001b10 <main+0x324>)
 8001aa4:	801a      	strh	r2, [r3, #0]
      AD_RES2 = HAL_ADC_GetValue(&hadc2);
 8001aa6:	480c      	ldr	r0, [pc, #48]	; (8001ad8 <main+0x2ec>)
 8001aa8:	f001 f8cc 	bl	8002c44 <HAL_ADC_GetValue>
 8001aac:	4603      	mov	r3, r0
 8001aae:	b29a      	uxth	r2, r3
 8001ab0:	4b18      	ldr	r3, [pc, #96]	; (8001b14 <main+0x328>)
 8001ab2:	801a      	strh	r2, [r3, #0]


      USBD_HID_SendReport(&hUsbDeviceFS, &mousehid, sizeof(mousehid));
 8001ab4:	2204      	movs	r2, #4
 8001ab6:	4915      	ldr	r1, [pc, #84]	; (8001b0c <main+0x320>)
 8001ab8:	4817      	ldr	r0, [pc, #92]	; (8001b18 <main+0x32c>)
 8001aba:	f008 fe25 	bl	800a708 <USBD_HID_SendReport>
//			  USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof(keyboardhid));
//
//			  pressed = HAL_GetTick();
//		  }
//	  }
	  HAL_Delay(10);
 8001abe:	200a      	movs	r0, #10
 8001ac0:	f000 fe10 	bl	80026e4 <HAL_Delay>
	  MPU6050_Read_All(&hi2c2,&mpu6050);
 8001ac4:	e6ba      	b.n	800183c <main+0x50>
 8001ac6:	bf00      	nop
 8001ac8:	200004d8 	.word	0x200004d8
 8001acc:	2000052d 	.word	0x2000052d
 8001ad0:	20000560 	.word	0x20000560
 8001ad4:	20000530 	.word	0x20000530
 8001ad8:	20000450 	.word	0x20000450
 8001adc:	2000052c 	.word	0x2000052c
 8001ae0:	20000480 	.word	0x20000480
 8001ae4:	200005ec 	.word	0x200005ec
 8001ae8:	0800f488 	.word	0x0800f488
 8001aec:	20000090 	.word	0x20000090
 8001af0:	200003f4 	.word	0x200003f4
 8001af4:	20000092 	.word	0x20000092
 8001af8:	20000094 	.word	0x20000094
 8001afc:	200003f6 	.word	0x200003f6
 8001b00:	20000096 	.word	0x20000096
 8001b04:	0800f490 	.word	0x0800f490
 8001b08:	55555556 	.word	0x55555556
 8001b0c:	20000424 	.word	0x20000424
 8001b10:	200003fa 	.word	0x200003fa
 8001b14:	200003fc 	.word	0x200003fc
 8001b18:	200007f0 	.word	0x200007f0

08001b1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b094      	sub	sp, #80	; 0x50
 8001b20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b26:	2228      	movs	r2, #40	; 0x28
 8001b28:	2100      	movs	r1, #0
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f00a fac0 	bl	800c0b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b30:	f107 0314 	add.w	r3, r7, #20
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	605a      	str	r2, [r3, #4]
 8001b3a:	609a      	str	r2, [r3, #8]
 8001b3c:	60da      	str	r2, [r3, #12]
 8001b3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b40:	1d3b      	adds	r3, r7, #4
 8001b42:	2200      	movs	r2, #0
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	605a      	str	r2, [r3, #4]
 8001b48:	609a      	str	r2, [r3, #8]
 8001b4a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b54:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001b56:	2300      	movs	r3, #0
 8001b58:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b5e:	2302      	movs	r3, #2
 8001b60:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b66:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001b68:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001b6c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b72:	4618      	mov	r0, r3
 8001b74:	f004 fb02 	bl	800617c <HAL_RCC_OscConfig>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001b7e:	f000 fa71 	bl	8002064 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b82:	230f      	movs	r3, #15
 8001b84:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b86:	2302      	movs	r3, #2
 8001b88:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b92:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b94:	2300      	movs	r3, #0
 8001b96:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001b98:	f107 0314 	add.w	r3, r7, #20
 8001b9c:	2101      	movs	r1, #1
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f004 fd6c 	bl	800667c <HAL_RCC_ClockConfig>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001baa:	f000 fa5b 	bl	8002064 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8001bae:	2312      	movs	r3, #18
 8001bb0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8001bb2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001bb6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001bb8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001bbc:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bbe:	1d3b      	adds	r3, r7, #4
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f004 fef5 	bl	80069b0 <HAL_RCCEx_PeriphCLKConfig>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001bcc:	f000 fa4a 	bl	8002064 <Error_Handler>
  }
}
 8001bd0:	bf00      	nop
 8001bd2:	3750      	adds	r7, #80	; 0x50
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001bde:	1d3b      	adds	r3, r7, #4
 8001be0:	2200      	movs	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]
 8001be4:	605a      	str	r2, [r3, #4]
 8001be6:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001be8:	4b18      	ldr	r3, [pc, #96]	; (8001c4c <MX_ADC1_Init+0x74>)
 8001bea:	4a19      	ldr	r2, [pc, #100]	; (8001c50 <MX_ADC1_Init+0x78>)
 8001bec:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001bee:	4b17      	ldr	r3, [pc, #92]	; (8001c4c <MX_ADC1_Init+0x74>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001bf4:	4b15      	ldr	r3, [pc, #84]	; (8001c4c <MX_ADC1_Init+0x74>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001bfa:	4b14      	ldr	r3, [pc, #80]	; (8001c4c <MX_ADC1_Init+0x74>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c00:	4b12      	ldr	r3, [pc, #72]	; (8001c4c <MX_ADC1_Init+0x74>)
 8001c02:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001c06:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c08:	4b10      	ldr	r3, [pc, #64]	; (8001c4c <MX_ADC1_Init+0x74>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001c0e:	4b0f      	ldr	r3, [pc, #60]	; (8001c4c <MX_ADC1_Init+0x74>)
 8001c10:	2201      	movs	r2, #1
 8001c12:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c14:	480d      	ldr	r0, [pc, #52]	; (8001c4c <MX_ADC1_Init+0x74>)
 8001c16:	f000 fd89 	bl	800272c <HAL_ADC_Init>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001c20:	f000 fa20 	bl	8002064 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001c24:	2307      	movs	r3, #7
 8001c26:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c30:	1d3b      	adds	r3, r7, #4
 8001c32:	4619      	mov	r1, r3
 8001c34:	4805      	ldr	r0, [pc, #20]	; (8001c4c <MX_ADC1_Init+0x74>)
 8001c36:	f001 f811 	bl	8002c5c <HAL_ADC_ConfigChannel>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001c40:	f000 fa10 	bl	8002064 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c44:	bf00      	nop
 8001c46:	3710      	adds	r7, #16
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	20000530 	.word	0x20000530
 8001c50:	40012400 	.word	0x40012400

08001c54 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c5a:	1d3b      	adds	r3, r7, #4
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	605a      	str	r2, [r3, #4]
 8001c62:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8001c64:	4b18      	ldr	r3, [pc, #96]	; (8001cc8 <MX_ADC2_Init+0x74>)
 8001c66:	4a19      	ldr	r2, [pc, #100]	; (8001ccc <MX_ADC2_Init+0x78>)
 8001c68:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001c6a:	4b17      	ldr	r3, [pc, #92]	; (8001cc8 <MX_ADC2_Init+0x74>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001c70:	4b15      	ldr	r3, [pc, #84]	; (8001cc8 <MX_ADC2_Init+0x74>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001c76:	4b14      	ldr	r3, [pc, #80]	; (8001cc8 <MX_ADC2_Init+0x74>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c7c:	4b12      	ldr	r3, [pc, #72]	; (8001cc8 <MX_ADC2_Init+0x74>)
 8001c7e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001c82:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c84:	4b10      	ldr	r3, [pc, #64]	; (8001cc8 <MX_ADC2_Init+0x74>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8001c8a:	4b0f      	ldr	r3, [pc, #60]	; (8001cc8 <MX_ADC2_Init+0x74>)
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001c90:	480d      	ldr	r0, [pc, #52]	; (8001cc8 <MX_ADC2_Init+0x74>)
 8001c92:	f000 fd4b 	bl	800272c <HAL_ADC_Init>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8001c9c:	f000 f9e2 	bl	8002064 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001ca0:	2306      	movs	r3, #6
 8001ca2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001cac:	1d3b      	adds	r3, r7, #4
 8001cae:	4619      	mov	r1, r3
 8001cb0:	4805      	ldr	r0, [pc, #20]	; (8001cc8 <MX_ADC2_Init+0x74>)
 8001cb2:	f000 ffd3 	bl	8002c5c <HAL_ADC_ConfigChannel>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8001cbc:	f000 f9d2 	bl	8002064 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001cc0:	bf00      	nop
 8001cc2:	3710      	adds	r7, #16
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	20000450 	.word	0x20000450
 8001ccc:	40012800 	.word	0x40012800

08001cd0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001cd4:	4b12      	ldr	r3, [pc, #72]	; (8001d20 <MX_I2C2_Init+0x50>)
 8001cd6:	4a13      	ldr	r2, [pc, #76]	; (8001d24 <MX_I2C2_Init+0x54>)
 8001cd8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001cda:	4b11      	ldr	r3, [pc, #68]	; (8001d20 <MX_I2C2_Init+0x50>)
 8001cdc:	4a12      	ldr	r2, [pc, #72]	; (8001d28 <MX_I2C2_Init+0x58>)
 8001cde:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ce0:	4b0f      	ldr	r3, [pc, #60]	; (8001d20 <MX_I2C2_Init+0x50>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001ce6:	4b0e      	ldr	r3, [pc, #56]	; (8001d20 <MX_I2C2_Init+0x50>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cec:	4b0c      	ldr	r3, [pc, #48]	; (8001d20 <MX_I2C2_Init+0x50>)
 8001cee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001cf2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cf4:	4b0a      	ldr	r3, [pc, #40]	; (8001d20 <MX_I2C2_Init+0x50>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001cfa:	4b09      	ldr	r3, [pc, #36]	; (8001d20 <MX_I2C2_Init+0x50>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d00:	4b07      	ldr	r3, [pc, #28]	; (8001d20 <MX_I2C2_Init+0x50>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d06:	4b06      	ldr	r3, [pc, #24]	; (8001d20 <MX_I2C2_Init+0x50>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001d0c:	4804      	ldr	r0, [pc, #16]	; (8001d20 <MX_I2C2_Init+0x50>)
 8001d0e:	f001 fd87 	bl	8003820 <HAL_I2C_Init>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001d18:	f000 f9a4 	bl	8002064 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001d1c:	bf00      	nop
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	200004d8 	.word	0x200004d8
 8001d24:	40005800 	.word	0x40005800
 8001d28:	000186a0 	.word	0x000186a0

08001d2c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b086      	sub	sp, #24
 8001d30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d32:	f107 0308 	add.w	r3, r7, #8
 8001d36:	2200      	movs	r2, #0
 8001d38:	601a      	str	r2, [r3, #0]
 8001d3a:	605a      	str	r2, [r3, #4]
 8001d3c:	609a      	str	r2, [r3, #8]
 8001d3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d40:	463b      	mov	r3, r7
 8001d42:	2200      	movs	r2, #0
 8001d44:	601a      	str	r2, [r3, #0]
 8001d46:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d48:	4b1e      	ldr	r3, [pc, #120]	; (8001dc4 <MX_TIM1_Init+0x98>)
 8001d4a:	4a1f      	ldr	r2, [pc, #124]	; (8001dc8 <MX_TIM1_Init+0x9c>)
 8001d4c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 48000;
 8001d4e:	4b1d      	ldr	r3, [pc, #116]	; (8001dc4 <MX_TIM1_Init+0x98>)
 8001d50:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001d54:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d56:	4b1b      	ldr	r3, [pc, #108]	; (8001dc4 <MX_TIM1_Init+0x98>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50;
 8001d5c:	4b19      	ldr	r3, [pc, #100]	; (8001dc4 <MX_TIM1_Init+0x98>)
 8001d5e:	2232      	movs	r2, #50	; 0x32
 8001d60:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d62:	4b18      	ldr	r3, [pc, #96]	; (8001dc4 <MX_TIM1_Init+0x98>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d68:	4b16      	ldr	r3, [pc, #88]	; (8001dc4 <MX_TIM1_Init+0x98>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d6e:	4b15      	ldr	r3, [pc, #84]	; (8001dc4 <MX_TIM1_Init+0x98>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d74:	4813      	ldr	r0, [pc, #76]	; (8001dc4 <MX_TIM1_Init+0x98>)
 8001d76:	f004 ff95 	bl	8006ca4 <HAL_TIM_Base_Init>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001d80:	f000 f970 	bl	8002064 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d88:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d8a:	f107 0308 	add.w	r3, r7, #8
 8001d8e:	4619      	mov	r1, r3
 8001d90:	480c      	ldr	r0, [pc, #48]	; (8001dc4 <MX_TIM1_Init+0x98>)
 8001d92:	f005 f95f 	bl	8007054 <HAL_TIM_ConfigClockSource>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001d9c:	f000 f962 	bl	8002064 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001da0:	2300      	movs	r3, #0
 8001da2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001da4:	2300      	movs	r3, #0
 8001da6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001da8:	463b      	mov	r3, r7
 8001daa:	4619      	mov	r1, r3
 8001dac:	4805      	ldr	r0, [pc, #20]	; (8001dc4 <MX_TIM1_Init+0x98>)
 8001dae:	f005 fb31 	bl	8007414 <HAL_TIMEx_MasterConfigSynchronization>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001db8:	f000 f954 	bl	8002064 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001dbc:	bf00      	nop
 8001dbe:	3718      	adds	r7, #24
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	200005a4 	.word	0x200005a4
 8001dc8:	40012c00 	.word	0x40012c00

08001dcc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001dd0:	4b11      	ldr	r3, [pc, #68]	; (8001e18 <MX_USART1_UART_Init+0x4c>)
 8001dd2:	4a12      	ldr	r2, [pc, #72]	; (8001e1c <MX_USART1_UART_Init+0x50>)
 8001dd4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001dd6:	4b10      	ldr	r3, [pc, #64]	; (8001e18 <MX_USART1_UART_Init+0x4c>)
 8001dd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ddc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001dde:	4b0e      	ldr	r3, [pc, #56]	; (8001e18 <MX_USART1_UART_Init+0x4c>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001de4:	4b0c      	ldr	r3, [pc, #48]	; (8001e18 <MX_USART1_UART_Init+0x4c>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001dea:	4b0b      	ldr	r3, [pc, #44]	; (8001e18 <MX_USART1_UART_Init+0x4c>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001df0:	4b09      	ldr	r3, [pc, #36]	; (8001e18 <MX_USART1_UART_Init+0x4c>)
 8001df2:	220c      	movs	r2, #12
 8001df4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001df6:	4b08      	ldr	r3, [pc, #32]	; (8001e18 <MX_USART1_UART_Init+0x4c>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dfc:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <MX_USART1_UART_Init+0x4c>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e02:	4805      	ldr	r0, [pc, #20]	; (8001e18 <MX_USART1_UART_Init+0x4c>)
 8001e04:	f005 fb76 	bl	80074f4 <HAL_UART_Init>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001e0e:	f000 f929 	bl	8002064 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e12:	bf00      	nop
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	20000560 	.word	0x20000560
 8001e1c:	40013800 	.word	0x40013800

08001e20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b088      	sub	sp, #32
 8001e24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e26:	f107 0310 	add.w	r3, r7, #16
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	601a      	str	r2, [r3, #0]
 8001e2e:	605a      	str	r2, [r3, #4]
 8001e30:	609a      	str	r2, [r3, #8]
 8001e32:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e34:	4b3a      	ldr	r3, [pc, #232]	; (8001f20 <MX_GPIO_Init+0x100>)
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	4a39      	ldr	r2, [pc, #228]	; (8001f20 <MX_GPIO_Init+0x100>)
 8001e3a:	f043 0320 	orr.w	r3, r3, #32
 8001e3e:	6193      	str	r3, [r2, #24]
 8001e40:	4b37      	ldr	r3, [pc, #220]	; (8001f20 <MX_GPIO_Init+0x100>)
 8001e42:	699b      	ldr	r3, [r3, #24]
 8001e44:	f003 0320 	and.w	r3, r3, #32
 8001e48:	60fb      	str	r3, [r7, #12]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e4c:	4b34      	ldr	r3, [pc, #208]	; (8001f20 <MX_GPIO_Init+0x100>)
 8001e4e:	699b      	ldr	r3, [r3, #24]
 8001e50:	4a33      	ldr	r2, [pc, #204]	; (8001f20 <MX_GPIO_Init+0x100>)
 8001e52:	f043 0304 	orr.w	r3, r3, #4
 8001e56:	6193      	str	r3, [r2, #24]
 8001e58:	4b31      	ldr	r3, [pc, #196]	; (8001f20 <MX_GPIO_Init+0x100>)
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	f003 0304 	and.w	r3, r3, #4
 8001e60:	60bb      	str	r3, [r7, #8]
 8001e62:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e64:	4b2e      	ldr	r3, [pc, #184]	; (8001f20 <MX_GPIO_Init+0x100>)
 8001e66:	699b      	ldr	r3, [r3, #24]
 8001e68:	4a2d      	ldr	r2, [pc, #180]	; (8001f20 <MX_GPIO_Init+0x100>)
 8001e6a:	f043 0308 	orr.w	r3, r3, #8
 8001e6e:	6193      	str	r3, [r2, #24]
 8001e70:	4b2b      	ldr	r3, [pc, #172]	; (8001f20 <MX_GPIO_Init+0x100>)
 8001e72:	699b      	ldr	r3, [r3, #24]
 8001e74:	f003 0308 	and.w	r3, r3, #8
 8001e78:	607b      	str	r3, [r7, #4]
 8001e7a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e82:	4828      	ldr	r0, [pc, #160]	; (8001f24 <MX_GPIO_Init+0x104>)
 8001e84:	f001 fc83 	bl	800378e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SW_Pin */
  GPIO_InitStruct.Pin = SW_Pin;
 8001e88:	2302      	movs	r3, #2
 8001e8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e8c:	4b26      	ldr	r3, [pc, #152]	; (8001f28 <MX_GPIO_Init+0x108>)
 8001e8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e90:	2300      	movs	r3, #0
 8001e92:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SW_GPIO_Port, &GPIO_InitStruct);
 8001e94:	f107 0310 	add.w	r3, r7, #16
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4824      	ldr	r0, [pc, #144]	; (8001f2c <MX_GPIO_Init+0x10c>)
 8001e9c:	f001 fadc 	bl	8003458 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001ea0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ea4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eae:	2302      	movs	r3, #2
 8001eb0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001eb2:	f107 0310 	add.w	r3, r7, #16
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	481a      	ldr	r0, [pc, #104]	; (8001f24 <MX_GPIO_Init+0x104>)
 8001eba:	f001 facd 	bl	8003458 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin B2_Pin B3_Pin B4_Pin */
  GPIO_InitStruct.Pin = B1_Pin|B2_Pin|B3_Pin|B4_Pin;
 8001ebe:	23b8      	movs	r3, #184	; 0xb8
 8001ec0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ec2:	4b19      	ldr	r3, [pc, #100]	; (8001f28 <MX_GPIO_Init+0x108>)
 8001ec4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eca:	f107 0310 	add.w	r3, r7, #16
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4814      	ldr	r0, [pc, #80]	; (8001f24 <MX_GPIO_Init+0x104>)
 8001ed2:	f001 fac1 	bl	8003458 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	2100      	movs	r1, #0
 8001eda:	2007      	movs	r0, #7
 8001edc:	f001 f9d5 	bl	800328a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001ee0:	2007      	movs	r0, #7
 8001ee2:	f001 f9ee 	bl	80032c2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	2100      	movs	r1, #0
 8001eea:	2009      	movs	r0, #9
 8001eec:	f001 f9cd 	bl	800328a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001ef0:	2009      	movs	r0, #9
 8001ef2:	f001 f9e6 	bl	80032c2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	2100      	movs	r1, #0
 8001efa:	200a      	movs	r0, #10
 8001efc:	f001 f9c5 	bl	800328a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001f00:	200a      	movs	r0, #10
 8001f02:	f001 f9de 	bl	80032c2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001f06:	2200      	movs	r2, #0
 8001f08:	2100      	movs	r1, #0
 8001f0a:	2017      	movs	r0, #23
 8001f0c:	f001 f9bd 	bl	800328a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001f10:	2017      	movs	r0, #23
 8001f12:	f001 f9d6 	bl	80032c2 <HAL_NVIC_EnableIRQ>

}
 8001f16:	bf00      	nop
 8001f18:	3720      	adds	r7, #32
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	40021000 	.word	0x40021000
 8001f24:	40010c00 	.word	0x40010c00
 8001f28:	10110000 	.word	0x10110000
 8001f2c:	40010800 	.word	0x40010800

08001f30 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	4603      	mov	r3, r0
 8001f38:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_1) // If The INT Source Is EXTI Line9 (A9 Pin)
 8001f3a:	88fb      	ldrh	r3, [r7, #6]
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d102      	bne.n	8001f46 <HAL_GPIO_EXTI_Callback+0x16>
    {
    	interrupt_happened = 1;
 8001f40:	4b14      	ldr	r3, [pc, #80]	; (8001f94 <HAL_GPIO_EXTI_Callback+0x64>)
 8001f42:	2201      	movs	r2, #1
 8001f44:	701a      	strb	r2, [r3, #0]
    }
    if(GPIO_Pin == GPIO_PIN_3 && state == true) // If The INT Source Is EXTI Line9 (A9 Pin)
 8001f46:	88fb      	ldrh	r3, [r7, #6]
 8001f48:	2b08      	cmp	r3, #8
 8001f4a:	d10c      	bne.n	8001f66 <HAL_GPIO_EXTI_Callback+0x36>
 8001f4c:	4b12      	ldr	r3, [pc, #72]	; (8001f98 <HAL_GPIO_EXTI_Callback+0x68>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d008      	beq.n	8001f66 <HAL_GPIO_EXTI_Callback+0x36>
    {
    	HAL_TIM_Base_Start_IT(&htim1);
 8001f54:	4811      	ldr	r0, [pc, #68]	; (8001f9c <HAL_GPIO_EXTI_Callback+0x6c>)
 8001f56:	f004 fef5 	bl	8006d44 <HAL_TIM_Base_Start_IT>
    	interrupt_happened = 1;
 8001f5a:	4b0e      	ldr	r3, [pc, #56]	; (8001f94 <HAL_GPIO_EXTI_Callback+0x64>)
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	701a      	strb	r2, [r3, #0]
    	state = false;
 8001f60:	4b0d      	ldr	r3, [pc, #52]	; (8001f98 <HAL_GPIO_EXTI_Callback+0x68>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	701a      	strb	r2, [r3, #0]
    }
    if(GPIO_Pin == GPIO_PIN_4) // If The INT Source Is EXTI Line9 (A9 Pin)
 8001f66:	88fb      	ldrh	r3, [r7, #6]
 8001f68:	2b10      	cmp	r3, #16
 8001f6a:	d102      	bne.n	8001f72 <HAL_GPIO_EXTI_Callback+0x42>
    {
    	interrupt_happened = 1;
 8001f6c:	4b09      	ldr	r3, [pc, #36]	; (8001f94 <HAL_GPIO_EXTI_Callback+0x64>)
 8001f6e:	2201      	movs	r2, #1
 8001f70:	701a      	strb	r2, [r3, #0]
    }
    if(GPIO_Pin == GPIO_PIN_5) // If The INT Source Is EXTI Line9 (A9 Pin)
 8001f72:	88fb      	ldrh	r3, [r7, #6]
 8001f74:	2b20      	cmp	r3, #32
 8001f76:	d102      	bne.n	8001f7e <HAL_GPIO_EXTI_Callback+0x4e>
    {
    	interrupt_happened = 1;
 8001f78:	4b06      	ldr	r3, [pc, #24]	; (8001f94 <HAL_GPIO_EXTI_Callback+0x64>)
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	701a      	strb	r2, [r3, #0]
    }
    if(GPIO_Pin == GPIO_PIN_7) // If The INT Source Is EXTI Line9 (A9 Pin)
 8001f7e:	88fb      	ldrh	r3, [r7, #6]
 8001f80:	2b80      	cmp	r3, #128	; 0x80
 8001f82:	d102      	bne.n	8001f8a <HAL_GPIO_EXTI_Callback+0x5a>
    {
    	interrupt_happened = 1;
 8001f84:	4b03      	ldr	r3, [pc, #12]	; (8001f94 <HAL_GPIO_EXTI_Callback+0x64>)
 8001f86:	2201      	movs	r2, #1
 8001f88:	701a      	strb	r2, [r3, #0]
    }

}
 8001f8a:	bf00      	nop
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	200003f8 	.word	0x200003f8
 8001f98:	20000098 	.word	0x20000098
 8001f9c:	200005a4 	.word	0x200005a4

08001fa0 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
	  UNUSED(htim);

	  /* NOTE : This function should not be modified, when the callback is needed,
	            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
	   */
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_RESET)
 8001fa8:	2108      	movs	r1, #8
 8001faa:	480a      	ldr	r0, [pc, #40]	; (8001fd4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001fac:	f001 fbd8 	bl	8003760 <HAL_GPIO_ReadPin>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d10a      	bne.n	8001fcc <HAL_TIM_PeriodElapsedCallback+0x2c>
		{
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 8001fb6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fba:	4806      	ldr	r0, [pc, #24]	; (8001fd4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001fbc:	f001 fbff 	bl	80037be <HAL_GPIO_TogglePin>
			state = true;
 8001fc0:	4b05      	ldr	r3, [pc, #20]	; (8001fd8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim1);
 8001fc6:	4805      	ldr	r0, [pc, #20]	; (8001fdc <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001fc8:	f004 ff0e 	bl	8006de8 <HAL_TIM_Base_Stop_IT>
		}
}
 8001fcc:	bf00      	nop
 8001fce:	3708      	adds	r7, #8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40010c00 	.word	0x40010c00
 8001fd8:	20000098 	.word	0x20000098
 8001fdc:	200005a4 	.word	0x200005a4

08001fe0 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a0b      	ldr	r2, [pc, #44]	; (800201c <HAL_UART_RxCpltCallback+0x3c>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d10a      	bne.n	8002008 <HAL_UART_RxCpltCallback+0x28>
	{
		UART1_recv -= 48;
 8001ff2:	4b0b      	ldr	r3, [pc, #44]	; (8002020 <HAL_UART_RxCpltCallback+0x40>)
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	3b30      	subs	r3, #48	; 0x30
 8001ff8:	b2da      	uxtb	r2, r3
 8001ffa:	4b09      	ldr	r3, [pc, #36]	; (8002020 <HAL_UART_RxCpltCallback+0x40>)
 8001ffc:	701a      	strb	r2, [r3, #0]
		printData(UART1_recv);
 8001ffe:	4b08      	ldr	r3, [pc, #32]	; (8002020 <HAL_UART_RxCpltCallback+0x40>)
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	4618      	mov	r0, r3
 8002004:	f000 f810 	bl	8002028 <printData>
	}
	HAL_UART_Receive_IT(&huart1, &UART1_recv, 1);
 8002008:	2201      	movs	r2, #1
 800200a:	4905      	ldr	r1, [pc, #20]	; (8002020 <HAL_UART_RxCpltCallback+0x40>)
 800200c:	4805      	ldr	r0, [pc, #20]	; (8002024 <HAL_UART_RxCpltCallback+0x44>)
 800200e:	f005 fb50 	bl	80076b2 <HAL_UART_Receive_IT>
}
 8002012:	bf00      	nop
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	40013800 	.word	0x40013800
 8002020:	2000052d 	.word	0x2000052d
 8002024:	20000560 	.word	0x20000560

08002028 <printData>:
void printData(int data)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
	sprintf((char*)buf,"Data received:  %d \r\n",data);
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	4909      	ldr	r1, [pc, #36]	; (8002058 <printData+0x30>)
 8002034:	4809      	ldr	r0, [pc, #36]	; (800205c <printData+0x34>)
 8002036:	f00a fca3 	bl	800c980 <siprintf>
	HAL_UART_Transmit(&huart1,buf,strlen((char*)buf),HAL_MAX_DELAY);
 800203a:	4808      	ldr	r0, [pc, #32]	; (800205c <printData+0x34>)
 800203c:	f7fe f888 	bl	8000150 <strlen>
 8002040:	4603      	mov	r3, r0
 8002042:	b29a      	uxth	r2, r3
 8002044:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002048:	4904      	ldr	r1, [pc, #16]	; (800205c <printData+0x34>)
 800204a:	4805      	ldr	r0, [pc, #20]	; (8002060 <printData+0x38>)
 800204c:	f005 fa9f 	bl	800758e <HAL_UART_Transmit>
}
 8002050:	bf00      	nop
 8002052:	3708      	adds	r7, #8
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	0800f498 	.word	0x0800f498
 800205c:	20000400 	.word	0x20000400
 8002060:	20000560 	.word	0x20000560

08002064 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002068:	b672      	cpsid	i
}
 800206a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800206c:	e7fe      	b.n	800206c <Error_Handler+0x8>
	...

08002070 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002070:	b480      	push	{r7}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002076:	4b15      	ldr	r3, [pc, #84]	; (80020cc <HAL_MspInit+0x5c>)
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	4a14      	ldr	r2, [pc, #80]	; (80020cc <HAL_MspInit+0x5c>)
 800207c:	f043 0301 	orr.w	r3, r3, #1
 8002080:	6193      	str	r3, [r2, #24]
 8002082:	4b12      	ldr	r3, [pc, #72]	; (80020cc <HAL_MspInit+0x5c>)
 8002084:	699b      	ldr	r3, [r3, #24]
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	60bb      	str	r3, [r7, #8]
 800208c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800208e:	4b0f      	ldr	r3, [pc, #60]	; (80020cc <HAL_MspInit+0x5c>)
 8002090:	69db      	ldr	r3, [r3, #28]
 8002092:	4a0e      	ldr	r2, [pc, #56]	; (80020cc <HAL_MspInit+0x5c>)
 8002094:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002098:	61d3      	str	r3, [r2, #28]
 800209a:	4b0c      	ldr	r3, [pc, #48]	; (80020cc <HAL_MspInit+0x5c>)
 800209c:	69db      	ldr	r3, [r3, #28]
 800209e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a2:	607b      	str	r3, [r7, #4]
 80020a4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80020a6:	4b0a      	ldr	r3, [pc, #40]	; (80020d0 <HAL_MspInit+0x60>)
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	60fb      	str	r3, [r7, #12]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80020b2:	60fb      	str	r3, [r7, #12]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80020ba:	60fb      	str	r3, [r7, #12]
 80020bc:	4a04      	ldr	r2, [pc, #16]	; (80020d0 <HAL_MspInit+0x60>)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020c2:	bf00      	nop
 80020c4:	3714      	adds	r7, #20
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bc80      	pop	{r7}
 80020ca:	4770      	bx	lr
 80020cc:	40021000 	.word	0x40021000
 80020d0:	40010000 	.word	0x40010000

080020d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b08a      	sub	sp, #40	; 0x28
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020dc:	f107 0318 	add.w	r3, r7, #24
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]
 80020e4:	605a      	str	r2, [r3, #4]
 80020e6:	609a      	str	r2, [r3, #8]
 80020e8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a28      	ldr	r2, [pc, #160]	; (8002190 <HAL_ADC_MspInit+0xbc>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d122      	bne.n	800213a <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80020f4:	4b27      	ldr	r3, [pc, #156]	; (8002194 <HAL_ADC_MspInit+0xc0>)
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	4a26      	ldr	r2, [pc, #152]	; (8002194 <HAL_ADC_MspInit+0xc0>)
 80020fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020fe:	6193      	str	r3, [r2, #24]
 8002100:	4b24      	ldr	r3, [pc, #144]	; (8002194 <HAL_ADC_MspInit+0xc0>)
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002108:	617b      	str	r3, [r7, #20]
 800210a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800210c:	4b21      	ldr	r3, [pc, #132]	; (8002194 <HAL_ADC_MspInit+0xc0>)
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	4a20      	ldr	r2, [pc, #128]	; (8002194 <HAL_ADC_MspInit+0xc0>)
 8002112:	f043 0304 	orr.w	r3, r3, #4
 8002116:	6193      	str	r3, [r2, #24]
 8002118:	4b1e      	ldr	r3, [pc, #120]	; (8002194 <HAL_ADC_MspInit+0xc0>)
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	f003 0304 	and.w	r3, r3, #4
 8002120:	613b      	str	r3, [r7, #16]
 8002122:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002124:	2380      	movs	r3, #128	; 0x80
 8002126:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002128:	2303      	movs	r3, #3
 800212a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800212c:	f107 0318 	add.w	r3, r7, #24
 8002130:	4619      	mov	r1, r3
 8002132:	4819      	ldr	r0, [pc, #100]	; (8002198 <HAL_ADC_MspInit+0xc4>)
 8002134:	f001 f990 	bl	8003458 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002138:	e026      	b.n	8002188 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a17      	ldr	r2, [pc, #92]	; (800219c <HAL_ADC_MspInit+0xc8>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d121      	bne.n	8002188 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002144:	4b13      	ldr	r3, [pc, #76]	; (8002194 <HAL_ADC_MspInit+0xc0>)
 8002146:	699b      	ldr	r3, [r3, #24]
 8002148:	4a12      	ldr	r2, [pc, #72]	; (8002194 <HAL_ADC_MspInit+0xc0>)
 800214a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800214e:	6193      	str	r3, [r2, #24]
 8002150:	4b10      	ldr	r3, [pc, #64]	; (8002194 <HAL_ADC_MspInit+0xc0>)
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002158:	60fb      	str	r3, [r7, #12]
 800215a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800215c:	4b0d      	ldr	r3, [pc, #52]	; (8002194 <HAL_ADC_MspInit+0xc0>)
 800215e:	699b      	ldr	r3, [r3, #24]
 8002160:	4a0c      	ldr	r2, [pc, #48]	; (8002194 <HAL_ADC_MspInit+0xc0>)
 8002162:	f043 0304 	orr.w	r3, r3, #4
 8002166:	6193      	str	r3, [r2, #24]
 8002168:	4b0a      	ldr	r3, [pc, #40]	; (8002194 <HAL_ADC_MspInit+0xc0>)
 800216a:	699b      	ldr	r3, [r3, #24]
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	60bb      	str	r3, [r7, #8]
 8002172:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002174:	2340      	movs	r3, #64	; 0x40
 8002176:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002178:	2303      	movs	r3, #3
 800217a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800217c:	f107 0318 	add.w	r3, r7, #24
 8002180:	4619      	mov	r1, r3
 8002182:	4805      	ldr	r0, [pc, #20]	; (8002198 <HAL_ADC_MspInit+0xc4>)
 8002184:	f001 f968 	bl	8003458 <HAL_GPIO_Init>
}
 8002188:	bf00      	nop
 800218a:	3728      	adds	r7, #40	; 0x28
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	40012400 	.word	0x40012400
 8002194:	40021000 	.word	0x40021000
 8002198:	40010800 	.word	0x40010800
 800219c:	40012800 	.word	0x40012800

080021a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b088      	sub	sp, #32
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a8:	f107 0310 	add.w	r3, r7, #16
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	605a      	str	r2, [r3, #4]
 80021b2:	609a      	str	r2, [r3, #8]
 80021b4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a16      	ldr	r2, [pc, #88]	; (8002214 <HAL_I2C_MspInit+0x74>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d124      	bne.n	800220a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021c0:	4b15      	ldr	r3, [pc, #84]	; (8002218 <HAL_I2C_MspInit+0x78>)
 80021c2:	699b      	ldr	r3, [r3, #24]
 80021c4:	4a14      	ldr	r2, [pc, #80]	; (8002218 <HAL_I2C_MspInit+0x78>)
 80021c6:	f043 0308 	orr.w	r3, r3, #8
 80021ca:	6193      	str	r3, [r2, #24]
 80021cc:	4b12      	ldr	r3, [pc, #72]	; (8002218 <HAL_I2C_MspInit+0x78>)
 80021ce:	699b      	ldr	r3, [r3, #24]
 80021d0:	f003 0308 	and.w	r3, r3, #8
 80021d4:	60fb      	str	r3, [r7, #12]
 80021d6:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80021d8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80021dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021de:	2312      	movs	r3, #18
 80021e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021e2:	2303      	movs	r3, #3
 80021e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021e6:	f107 0310 	add.w	r3, r7, #16
 80021ea:	4619      	mov	r1, r3
 80021ec:	480b      	ldr	r0, [pc, #44]	; (800221c <HAL_I2C_MspInit+0x7c>)
 80021ee:	f001 f933 	bl	8003458 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80021f2:	4b09      	ldr	r3, [pc, #36]	; (8002218 <HAL_I2C_MspInit+0x78>)
 80021f4:	69db      	ldr	r3, [r3, #28]
 80021f6:	4a08      	ldr	r2, [pc, #32]	; (8002218 <HAL_I2C_MspInit+0x78>)
 80021f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80021fc:	61d3      	str	r3, [r2, #28]
 80021fe:	4b06      	ldr	r3, [pc, #24]	; (8002218 <HAL_I2C_MspInit+0x78>)
 8002200:	69db      	ldr	r3, [r3, #28]
 8002202:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002206:	60bb      	str	r3, [r7, #8]
 8002208:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800220a:	bf00      	nop
 800220c:	3720      	adds	r7, #32
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	40005800 	.word	0x40005800
 8002218:	40021000 	.word	0x40021000
 800221c:	40010c00 	.word	0x40010c00

08002220 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a19      	ldr	r2, [pc, #100]	; (8002294 <HAL_TIM_Base_MspInit+0x74>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d12b      	bne.n	800228a <HAL_TIM_Base_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002232:	4b19      	ldr	r3, [pc, #100]	; (8002298 <HAL_TIM_Base_MspInit+0x78>)
 8002234:	699b      	ldr	r3, [r3, #24]
 8002236:	4a18      	ldr	r2, [pc, #96]	; (8002298 <HAL_TIM_Base_MspInit+0x78>)
 8002238:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800223c:	6193      	str	r3, [r2, #24]
 800223e:	4b16      	ldr	r3, [pc, #88]	; (8002298 <HAL_TIM_Base_MspInit+0x78>)
 8002240:	699b      	ldr	r3, [r3, #24]
 8002242:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002246:	60fb      	str	r3, [r7, #12]
 8002248:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 800224a:	2200      	movs	r2, #0
 800224c:	2100      	movs	r1, #0
 800224e:	2018      	movs	r0, #24
 8002250:	f001 f81b 	bl	800328a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8002254:	2018      	movs	r0, #24
 8002256:	f001 f834 	bl	80032c2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800225a:	2200      	movs	r2, #0
 800225c:	2100      	movs	r1, #0
 800225e:	2019      	movs	r0, #25
 8002260:	f001 f813 	bl	800328a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002264:	2019      	movs	r0, #25
 8002266:	f001 f82c 	bl	80032c2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 800226a:	2200      	movs	r2, #0
 800226c:	2100      	movs	r1, #0
 800226e:	201a      	movs	r0, #26
 8002270:	f001 f80b 	bl	800328a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8002274:	201a      	movs	r0, #26
 8002276:	f001 f824 	bl	80032c2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800227a:	2200      	movs	r2, #0
 800227c:	2100      	movs	r1, #0
 800227e:	201b      	movs	r0, #27
 8002280:	f001 f803 	bl	800328a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002284:	201b      	movs	r0, #27
 8002286:	f001 f81c 	bl	80032c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800228a:	bf00      	nop
 800228c:	3710      	adds	r7, #16
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	40012c00 	.word	0x40012c00
 8002298:	40021000 	.word	0x40021000

0800229c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b088      	sub	sp, #32
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a4:	f107 0310 	add.w	r3, r7, #16
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]
 80022ac:	605a      	str	r2, [r3, #4]
 80022ae:	609a      	str	r2, [r3, #8]
 80022b0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a20      	ldr	r2, [pc, #128]	; (8002338 <HAL_UART_MspInit+0x9c>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d139      	bne.n	8002330 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80022bc:	4b1f      	ldr	r3, [pc, #124]	; (800233c <HAL_UART_MspInit+0xa0>)
 80022be:	699b      	ldr	r3, [r3, #24]
 80022c0:	4a1e      	ldr	r2, [pc, #120]	; (800233c <HAL_UART_MspInit+0xa0>)
 80022c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022c6:	6193      	str	r3, [r2, #24]
 80022c8:	4b1c      	ldr	r3, [pc, #112]	; (800233c <HAL_UART_MspInit+0xa0>)
 80022ca:	699b      	ldr	r3, [r3, #24]
 80022cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022d0:	60fb      	str	r3, [r7, #12]
 80022d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022d4:	4b19      	ldr	r3, [pc, #100]	; (800233c <HAL_UART_MspInit+0xa0>)
 80022d6:	699b      	ldr	r3, [r3, #24]
 80022d8:	4a18      	ldr	r2, [pc, #96]	; (800233c <HAL_UART_MspInit+0xa0>)
 80022da:	f043 0304 	orr.w	r3, r3, #4
 80022de:	6193      	str	r3, [r2, #24]
 80022e0:	4b16      	ldr	r3, [pc, #88]	; (800233c <HAL_UART_MspInit+0xa0>)
 80022e2:	699b      	ldr	r3, [r3, #24]
 80022e4:	f003 0304 	and.w	r3, r3, #4
 80022e8:	60bb      	str	r3, [r7, #8]
 80022ea:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80022ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f2:	2302      	movs	r3, #2
 80022f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022f6:	2303      	movs	r3, #3
 80022f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022fa:	f107 0310 	add.w	r3, r7, #16
 80022fe:	4619      	mov	r1, r3
 8002300:	480f      	ldr	r0, [pc, #60]	; (8002340 <HAL_UART_MspInit+0xa4>)
 8002302:	f001 f8a9 	bl	8003458 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002306:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800230a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800230c:	2300      	movs	r3, #0
 800230e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002310:	2300      	movs	r3, #0
 8002312:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002314:	f107 0310 	add.w	r3, r7, #16
 8002318:	4619      	mov	r1, r3
 800231a:	4809      	ldr	r0, [pc, #36]	; (8002340 <HAL_UART_MspInit+0xa4>)
 800231c:	f001 f89c 	bl	8003458 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002320:	2200      	movs	r2, #0
 8002322:	2100      	movs	r1, #0
 8002324:	2025      	movs	r0, #37	; 0x25
 8002326:	f000 ffb0 	bl	800328a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800232a:	2025      	movs	r0, #37	; 0x25
 800232c:	f000 ffc9 	bl	80032c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002330:	bf00      	nop
 8002332:	3720      	adds	r7, #32
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40013800 	.word	0x40013800
 800233c:	40021000 	.word	0x40021000
 8002340:	40010800 	.word	0x40010800

08002344 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002348:	e7fe      	b.n	8002348 <NMI_Handler+0x4>

0800234a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800234a:	b480      	push	{r7}
 800234c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800234e:	e7fe      	b.n	800234e <HardFault_Handler+0x4>

08002350 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002354:	e7fe      	b.n	8002354 <MemManage_Handler+0x4>

08002356 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002356:	b480      	push	{r7}
 8002358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800235a:	e7fe      	b.n	800235a <BusFault_Handler+0x4>

0800235c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002360:	e7fe      	b.n	8002360 <UsageFault_Handler+0x4>

08002362 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002362:	b480      	push	{r7}
 8002364:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002366:	bf00      	nop
 8002368:	46bd      	mov	sp, r7
 800236a:	bc80      	pop	{r7}
 800236c:	4770      	bx	lr

0800236e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800236e:	b480      	push	{r7}
 8002370:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002372:	bf00      	nop
 8002374:	46bd      	mov	sp, r7
 8002376:	bc80      	pop	{r7}
 8002378:	4770      	bx	lr

0800237a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800237a:	b480      	push	{r7}
 800237c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800237e:	bf00      	nop
 8002380:	46bd      	mov	sp, r7
 8002382:	bc80      	pop	{r7}
 8002384:	4770      	bx	lr

08002386 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800238a:	f000 f98f 	bl	80026ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800238e:	bf00      	nop
 8002390:	bd80      	pop	{r7, pc}

08002392 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002392:	b580      	push	{r7, lr}
 8002394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002396:	2002      	movs	r0, #2
 8002398:	f001 fa2a 	bl	80037f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800239c:	bf00      	nop
 800239e:	bd80      	pop	{r7, pc}

080023a0 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80023a4:	2008      	movs	r0, #8
 80023a6:	f001 fa23 	bl	80037f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80023aa:	bf00      	nop
 80023ac:	bd80      	pop	{r7, pc}

080023ae <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80023b2:	2010      	movs	r0, #16
 80023b4:	f001 fa1c 	bl	80037f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80023b8:	bf00      	nop
 80023ba:	bd80      	pop	{r7, pc}

080023bc <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80023c0:	4802      	ldr	r0, [pc, #8]	; (80023cc <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80023c2:	f002 fb5e 	bl	8004a82 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80023c6:	bf00      	nop
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	20000cb4 	.word	0x20000cb4

080023d0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80023d4:	2020      	movs	r0, #32
 80023d6:	f001 fa0b 	bl	80037f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80023da:	2080      	movs	r0, #128	; 0x80
 80023dc:	f001 fa08 	bl	80037f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80023e0:	bf00      	nop
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80023e8:	4802      	ldr	r0, [pc, #8]	; (80023f4 <TIM1_BRK_IRQHandler+0x10>)
 80023ea:	f004 fd2b 	bl	8006e44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80023ee:	bf00      	nop
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	200005a4 	.word	0x200005a4

080023f8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80023fc:	4802      	ldr	r0, [pc, #8]	; (8002408 <TIM1_UP_IRQHandler+0x10>)
 80023fe:	f004 fd21 	bl	8006e44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002402:	bf00      	nop
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	200005a4 	.word	0x200005a4

0800240c <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002410:	4802      	ldr	r0, [pc, #8]	; (800241c <TIM1_TRG_COM_IRQHandler+0x10>)
 8002412:	f004 fd17 	bl	8006e44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8002416:	bf00      	nop
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	200005a4 	.word	0x200005a4

08002420 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002424:	4802      	ldr	r0, [pc, #8]	; (8002430 <TIM1_CC_IRQHandler+0x10>)
 8002426:	f004 fd0d 	bl	8006e44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800242a:	bf00      	nop
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	200005a4 	.word	0x200005a4

08002434 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002438:	4802      	ldr	r0, [pc, #8]	; (8002444 <USART1_IRQHandler+0x10>)
 800243a:	f005 f96b 	bl	8007714 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800243e:	bf00      	nop
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	20000560 	.word	0x20000560

08002448 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
	return 1;
 800244c:	2301      	movs	r3, #1
}
 800244e:	4618      	mov	r0, r3
 8002450:	46bd      	mov	sp, r7
 8002452:	bc80      	pop	{r7}
 8002454:	4770      	bx	lr

08002456 <_kill>:

int _kill(int pid, int sig)
{
 8002456:	b580      	push	{r7, lr}
 8002458:	b082      	sub	sp, #8
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
 800245e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002460:	f009 fdfc 	bl	800c05c <__errno>
 8002464:	4603      	mov	r3, r0
 8002466:	2216      	movs	r2, #22
 8002468:	601a      	str	r2, [r3, #0]
	return -1;
 800246a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800246e:	4618      	mov	r0, r3
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <_exit>:

void _exit (int status)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b082      	sub	sp, #8
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800247e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f7ff ffe7 	bl	8002456 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002488:	e7fe      	b.n	8002488 <_exit+0x12>

0800248a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800248a:	b580      	push	{r7, lr}
 800248c:	b086      	sub	sp, #24
 800248e:	af00      	add	r7, sp, #0
 8002490:	60f8      	str	r0, [r7, #12]
 8002492:	60b9      	str	r1, [r7, #8]
 8002494:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002496:	2300      	movs	r3, #0
 8002498:	617b      	str	r3, [r7, #20]
 800249a:	e00a      	b.n	80024b2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800249c:	f3af 8000 	nop.w
 80024a0:	4601      	mov	r1, r0
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	1c5a      	adds	r2, r3, #1
 80024a6:	60ba      	str	r2, [r7, #8]
 80024a8:	b2ca      	uxtb	r2, r1
 80024aa:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	3301      	adds	r3, #1
 80024b0:	617b      	str	r3, [r7, #20]
 80024b2:	697a      	ldr	r2, [r7, #20]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	429a      	cmp	r2, r3
 80024b8:	dbf0      	blt.n	800249c <_read+0x12>
	}

return len;
 80024ba:	687b      	ldr	r3, [r7, #4]
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3718      	adds	r7, #24
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b086      	sub	sp, #24
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	60b9      	str	r1, [r7, #8]
 80024ce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024d0:	2300      	movs	r3, #0
 80024d2:	617b      	str	r3, [r7, #20]
 80024d4:	e009      	b.n	80024ea <_write+0x26>
	{
		__io_putchar(*ptr++);
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	1c5a      	adds	r2, r3, #1
 80024da:	60ba      	str	r2, [r7, #8]
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	4618      	mov	r0, r3
 80024e0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	3301      	adds	r3, #1
 80024e8:	617b      	str	r3, [r7, #20]
 80024ea:	697a      	ldr	r2, [r7, #20]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	dbf1      	blt.n	80024d6 <_write+0x12>
	}
	return len;
 80024f2:	687b      	ldr	r3, [r7, #4]
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3718      	adds	r7, #24
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}

080024fc <_close>:

int _close(int file)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
	return -1;
 8002504:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002508:	4618      	mov	r0, r3
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	bc80      	pop	{r7}
 8002510:	4770      	bx	lr

08002512 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002512:	b480      	push	{r7}
 8002514:	b083      	sub	sp, #12
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
 800251a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002522:	605a      	str	r2, [r3, #4]
	return 0;
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	370c      	adds	r7, #12
 800252a:	46bd      	mov	sp, r7
 800252c:	bc80      	pop	{r7}
 800252e:	4770      	bx	lr

08002530 <_isatty>:

int _isatty(int file)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
	return 1;
 8002538:	2301      	movs	r3, #1
}
 800253a:	4618      	mov	r0, r3
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	bc80      	pop	{r7}
 8002542:	4770      	bx	lr

08002544 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002544:	b480      	push	{r7}
 8002546:	b085      	sub	sp, #20
 8002548:	af00      	add	r7, sp, #0
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	607a      	str	r2, [r7, #4]
	return 0;
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3714      	adds	r7, #20
 8002556:	46bd      	mov	sp, r7
 8002558:	bc80      	pop	{r7}
 800255a:	4770      	bx	lr

0800255c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b086      	sub	sp, #24
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002564:	4a14      	ldr	r2, [pc, #80]	; (80025b8 <_sbrk+0x5c>)
 8002566:	4b15      	ldr	r3, [pc, #84]	; (80025bc <_sbrk+0x60>)
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002570:	4b13      	ldr	r3, [pc, #76]	; (80025c0 <_sbrk+0x64>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d102      	bne.n	800257e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002578:	4b11      	ldr	r3, [pc, #68]	; (80025c0 <_sbrk+0x64>)
 800257a:	4a12      	ldr	r2, [pc, #72]	; (80025c4 <_sbrk+0x68>)
 800257c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800257e:	4b10      	ldr	r3, [pc, #64]	; (80025c0 <_sbrk+0x64>)
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4413      	add	r3, r2
 8002586:	693a      	ldr	r2, [r7, #16]
 8002588:	429a      	cmp	r2, r3
 800258a:	d207      	bcs.n	800259c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800258c:	f009 fd66 	bl	800c05c <__errno>
 8002590:	4603      	mov	r3, r0
 8002592:	220c      	movs	r2, #12
 8002594:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002596:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800259a:	e009      	b.n	80025b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800259c:	4b08      	ldr	r3, [pc, #32]	; (80025c0 <_sbrk+0x64>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025a2:	4b07      	ldr	r3, [pc, #28]	; (80025c0 <_sbrk+0x64>)
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4413      	add	r3, r2
 80025aa:	4a05      	ldr	r2, [pc, #20]	; (80025c0 <_sbrk+0x64>)
 80025ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025ae:	68fb      	ldr	r3, [r7, #12]
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3718      	adds	r7, #24
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	20005000 	.word	0x20005000
 80025bc:	00000400 	.word	0x00000400
 80025c0:	20000428 	.word	0x20000428
 80025c4:	20000fb0 	.word	0x20000fb0

080025c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025cc:	bf00      	nop
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bc80      	pop	{r7}
 80025d2:	4770      	bx	lr

080025d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025d4:	480c      	ldr	r0, [pc, #48]	; (8002608 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80025d6:	490d      	ldr	r1, [pc, #52]	; (800260c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80025d8:	4a0d      	ldr	r2, [pc, #52]	; (8002610 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80025da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025dc:	e002      	b.n	80025e4 <LoopCopyDataInit>

080025de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025e2:	3304      	adds	r3, #4

080025e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025e8:	d3f9      	bcc.n	80025de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025ea:	4a0a      	ldr	r2, [pc, #40]	; (8002614 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80025ec:	4c0a      	ldr	r4, [pc, #40]	; (8002618 <LoopFillZerobss+0x22>)
  movs r3, #0
 80025ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025f0:	e001      	b.n	80025f6 <LoopFillZerobss>

080025f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025f4:	3204      	adds	r2, #4

080025f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025f8:	d3fb      	bcc.n	80025f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80025fa:	f7ff ffe5 	bl	80025c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025fe:	f009 fd33 	bl	800c068 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002602:	f7ff f8f3 	bl	80017ec <main>
  bx lr
 8002606:	4770      	bx	lr
  ldr r0, =_sdata
 8002608:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800260c:	200003d4 	.word	0x200003d4
  ldr r2, =_sidata
 8002610:	0800f988 	.word	0x0800f988
  ldr r2, =_sbss
 8002614:	200003d8 	.word	0x200003d8
  ldr r4, =_ebss
 8002618:	20000fb0 	.word	0x20000fb0

0800261c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800261c:	e7fe      	b.n	800261c <ADC1_2_IRQHandler>
	...

08002620 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002624:	4b08      	ldr	r3, [pc, #32]	; (8002648 <HAL_Init+0x28>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a07      	ldr	r2, [pc, #28]	; (8002648 <HAL_Init+0x28>)
 800262a:	f043 0310 	orr.w	r3, r3, #16
 800262e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002630:	2003      	movs	r0, #3
 8002632:	f000 fe1f 	bl	8003274 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002636:	2000      	movs	r0, #0
 8002638:	f000 f808 	bl	800264c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800263c:	f7ff fd18 	bl	8002070 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	40022000 	.word	0x40022000

0800264c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002654:	4b12      	ldr	r3, [pc, #72]	; (80026a0 <HAL_InitTick+0x54>)
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	4b12      	ldr	r3, [pc, #72]	; (80026a4 <HAL_InitTick+0x58>)
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	4619      	mov	r1, r3
 800265e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002662:	fbb3 f3f1 	udiv	r3, r3, r1
 8002666:	fbb2 f3f3 	udiv	r3, r2, r3
 800266a:	4618      	mov	r0, r3
 800266c:	f000 fe37 	bl	80032de <HAL_SYSTICK_Config>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d001      	beq.n	800267a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e00e      	b.n	8002698 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2b0f      	cmp	r3, #15
 800267e:	d80a      	bhi.n	8002696 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002680:	2200      	movs	r2, #0
 8002682:	6879      	ldr	r1, [r7, #4]
 8002684:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002688:	f000 fdff 	bl	800328a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800268c:	4a06      	ldr	r2, [pc, #24]	; (80026a8 <HAL_InitTick+0x5c>)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002692:	2300      	movs	r3, #0
 8002694:	e000      	b.n	8002698 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
}
 8002698:	4618      	mov	r0, r3
 800269a:	3708      	adds	r7, #8
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	2000009c 	.word	0x2000009c
 80026a4:	200000a4 	.word	0x200000a4
 80026a8:	200000a0 	.word	0x200000a0

080026ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026b0:	4b05      	ldr	r3, [pc, #20]	; (80026c8 <HAL_IncTick+0x1c>)
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	461a      	mov	r2, r3
 80026b6:	4b05      	ldr	r3, [pc, #20]	; (80026cc <HAL_IncTick+0x20>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4413      	add	r3, r2
 80026bc:	4a03      	ldr	r2, [pc, #12]	; (80026cc <HAL_IncTick+0x20>)
 80026be:	6013      	str	r3, [r2, #0]
}
 80026c0:	bf00      	nop
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bc80      	pop	{r7}
 80026c6:	4770      	bx	lr
 80026c8:	200000a4 	.word	0x200000a4
 80026cc:	200007ec 	.word	0x200007ec

080026d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0
  return uwTick;
 80026d4:	4b02      	ldr	r3, [pc, #8]	; (80026e0 <HAL_GetTick+0x10>)
 80026d6:	681b      	ldr	r3, [r3, #0]
}
 80026d8:	4618      	mov	r0, r3
 80026da:	46bd      	mov	sp, r7
 80026dc:	bc80      	pop	{r7}
 80026de:	4770      	bx	lr
 80026e0:	200007ec 	.word	0x200007ec

080026e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026ec:	f7ff fff0 	bl	80026d0 <HAL_GetTick>
 80026f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026fc:	d005      	beq.n	800270a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026fe:	4b0a      	ldr	r3, [pc, #40]	; (8002728 <HAL_Delay+0x44>)
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	461a      	mov	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	4413      	add	r3, r2
 8002708:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800270a:	bf00      	nop
 800270c:	f7ff ffe0 	bl	80026d0 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	68fa      	ldr	r2, [r7, #12]
 8002718:	429a      	cmp	r2, r3
 800271a:	d8f7      	bhi.n	800270c <HAL_Delay+0x28>
  {
  }
}
 800271c:	bf00      	nop
 800271e:	bf00      	nop
 8002720:	3710      	adds	r7, #16
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	200000a4 	.word	0x200000a4

0800272c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b086      	sub	sp, #24
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002734:	2300      	movs	r3, #0
 8002736:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002738:	2300      	movs	r3, #0
 800273a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800273c:	2300      	movs	r3, #0
 800273e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002740:	2300      	movs	r3, #0
 8002742:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e0be      	b.n	80028cc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002758:	2b00      	cmp	r3, #0
 800275a:	d109      	bne.n	8002770 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f7ff fcb2 	bl	80020d4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f000 fbc5 	bl	8002f00 <ADC_ConversionStop_Disable>
 8002776:	4603      	mov	r3, r0
 8002778:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800277e:	f003 0310 	and.w	r3, r3, #16
 8002782:	2b00      	cmp	r3, #0
 8002784:	f040 8099 	bne.w	80028ba <HAL_ADC_Init+0x18e>
 8002788:	7dfb      	ldrb	r3, [r7, #23]
 800278a:	2b00      	cmp	r3, #0
 800278c:	f040 8095 	bne.w	80028ba <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002794:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002798:	f023 0302 	bic.w	r3, r3, #2
 800279c:	f043 0202 	orr.w	r2, r3, #2
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80027ac:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	7b1b      	ldrb	r3, [r3, #12]
 80027b2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80027b4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80027b6:	68ba      	ldr	r2, [r7, #8]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027c4:	d003      	beq.n	80027ce <HAL_ADC_Init+0xa2>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d102      	bne.n	80027d4 <HAL_ADC_Init+0xa8>
 80027ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027d2:	e000      	b.n	80027d6 <HAL_ADC_Init+0xaa>
 80027d4:	2300      	movs	r3, #0
 80027d6:	693a      	ldr	r2, [r7, #16]
 80027d8:	4313      	orrs	r3, r2
 80027da:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	7d1b      	ldrb	r3, [r3, #20]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d119      	bne.n	8002818 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	7b1b      	ldrb	r3, [r3, #12]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d109      	bne.n	8002800 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	699b      	ldr	r3, [r3, #24]
 80027f0:	3b01      	subs	r3, #1
 80027f2:	035a      	lsls	r2, r3, #13
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80027fc:	613b      	str	r3, [r7, #16]
 80027fe:	e00b      	b.n	8002818 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002804:	f043 0220 	orr.w	r2, r3, #32
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002810:	f043 0201 	orr.w	r2, r3, #1
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	693a      	ldr	r2, [r7, #16]
 8002828:	430a      	orrs	r2, r1
 800282a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	689a      	ldr	r2, [r3, #8]
 8002832:	4b28      	ldr	r3, [pc, #160]	; (80028d4 <HAL_ADC_Init+0x1a8>)
 8002834:	4013      	ands	r3, r2
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	6812      	ldr	r2, [r2, #0]
 800283a:	68b9      	ldr	r1, [r7, #8]
 800283c:	430b      	orrs	r3, r1
 800283e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002848:	d003      	beq.n	8002852 <HAL_ADC_Init+0x126>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	2b01      	cmp	r3, #1
 8002850:	d104      	bne.n	800285c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	3b01      	subs	r3, #1
 8002858:	051b      	lsls	r3, r3, #20
 800285a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002862:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	430a      	orrs	r2, r1
 800286e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	689a      	ldr	r2, [r3, #8]
 8002876:	4b18      	ldr	r3, [pc, #96]	; (80028d8 <HAL_ADC_Init+0x1ac>)
 8002878:	4013      	ands	r3, r2
 800287a:	68ba      	ldr	r2, [r7, #8]
 800287c:	429a      	cmp	r2, r3
 800287e:	d10b      	bne.n	8002898 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800288a:	f023 0303 	bic.w	r3, r3, #3
 800288e:	f043 0201 	orr.w	r2, r3, #1
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002896:	e018      	b.n	80028ca <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800289c:	f023 0312 	bic.w	r3, r3, #18
 80028a0:	f043 0210 	orr.w	r2, r3, #16
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ac:	f043 0201 	orr.w	r2, r3, #1
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80028b8:	e007      	b.n	80028ca <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028be:	f043 0210 	orr.w	r2, r3, #16
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80028ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3718      	adds	r7, #24
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	ffe1f7fd 	.word	0xffe1f7fd
 80028d8:	ff1f0efe 	.word	0xff1f0efe

080028dc <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028e4:	2300      	movs	r3, #0
 80028e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d101      	bne.n	80028f6 <HAL_ADC_Start+0x1a>
 80028f2:	2302      	movs	r3, #2
 80028f4:	e098      	b.n	8002a28 <HAL_ADC_Start+0x14c>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2201      	movs	r2, #1
 80028fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f000 faa4 	bl	8002e4c <ADC_Enable>
 8002904:	4603      	mov	r3, r0
 8002906:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002908:	7bfb      	ldrb	r3, [r7, #15]
 800290a:	2b00      	cmp	r3, #0
 800290c:	f040 8087 	bne.w	8002a1e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002914:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002918:	f023 0301 	bic.w	r3, r3, #1
 800291c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a41      	ldr	r2, [pc, #260]	; (8002a30 <HAL_ADC_Start+0x154>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d105      	bne.n	800293a <HAL_ADC_Start+0x5e>
 800292e:	4b41      	ldr	r3, [pc, #260]	; (8002a34 <HAL_ADC_Start+0x158>)
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d115      	bne.n	8002966 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800293e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002950:	2b00      	cmp	r3, #0
 8002952:	d026      	beq.n	80029a2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002958:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800295c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002964:	e01d      	b.n	80029a2 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800296a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a2f      	ldr	r2, [pc, #188]	; (8002a34 <HAL_ADC_Start+0x158>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d004      	beq.n	8002986 <HAL_ADC_Start+0xaa>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a2b      	ldr	r2, [pc, #172]	; (8002a30 <HAL_ADC_Start+0x154>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d10d      	bne.n	80029a2 <HAL_ADC_Start+0xc6>
 8002986:	4b2b      	ldr	r3, [pc, #172]	; (8002a34 <HAL_ADC_Start+0x158>)
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800298e:	2b00      	cmp	r3, #0
 8002990:	d007      	beq.n	80029a2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002996:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800299a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d006      	beq.n	80029bc <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b2:	f023 0206 	bic.w	r2, r3, #6
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	62da      	str	r2, [r3, #44]	; 0x2c
 80029ba:	e002      	b.n	80029c2 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f06f 0202 	mvn.w	r2, #2
 80029d2:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80029de:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80029e2:	d113      	bne.n	8002a0c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80029e8:	4a11      	ldr	r2, [pc, #68]	; (8002a30 <HAL_ADC_Start+0x154>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d105      	bne.n	80029fa <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80029ee:	4b11      	ldr	r3, [pc, #68]	; (8002a34 <HAL_ADC_Start+0x158>)
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d108      	bne.n	8002a0c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	689a      	ldr	r2, [r3, #8]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002a08:	609a      	str	r2, [r3, #8]
 8002a0a:	e00c      	b.n	8002a26 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	689a      	ldr	r2, [r3, #8]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002a1a:	609a      	str	r2, [r3, #8]
 8002a1c:	e003      	b.n	8002a26 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3710      	adds	r7, #16
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	40012800 	.word	0x40012800
 8002a34:	40012400 	.word	0x40012400

08002a38 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002a38:	b590      	push	{r4, r7, lr}
 8002a3a:	b087      	sub	sp, #28
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002a42:	2300      	movs	r3, #0
 8002a44:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002a46:	2300      	movs	r3, #0
 8002a48:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002a4e:	f7ff fe3f 	bl	80026d0 <HAL_GetTick>
 8002a52:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d00b      	beq.n	8002a7a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a66:	f043 0220 	orr.w	r2, r3, #32
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e0d3      	b.n	8002c22 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d131      	bne.n	8002aec <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a8e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d12a      	bne.n	8002aec <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002a96:	e021      	b.n	8002adc <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a9e:	d01d      	beq.n	8002adc <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d007      	beq.n	8002ab6 <HAL_ADC_PollForConversion+0x7e>
 8002aa6:	f7ff fe13 	bl	80026d0 <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	683a      	ldr	r2, [r7, #0]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d212      	bcs.n	8002adc <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0302 	and.w	r3, r3, #2
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d10b      	bne.n	8002adc <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac8:	f043 0204 	orr.w	r2, r3, #4
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e0a2      	b.n	8002c22 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d0d6      	beq.n	8002a98 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002aea:	e070      	b.n	8002bce <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002aec:	4b4f      	ldr	r3, [pc, #316]	; (8002c2c <HAL_ADC_PollForConversion+0x1f4>)
 8002aee:	681c      	ldr	r4, [r3, #0]
 8002af0:	2002      	movs	r0, #2
 8002af2:	f004 f813 	bl	8006b1c <HAL_RCCEx_GetPeriphCLKFreq>
 8002af6:	4603      	mov	r3, r0
 8002af8:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	6919      	ldr	r1, [r3, #16]
 8002b02:	4b4b      	ldr	r3, [pc, #300]	; (8002c30 <HAL_ADC_PollForConversion+0x1f8>)
 8002b04:	400b      	ands	r3, r1
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d118      	bne.n	8002b3c <HAL_ADC_PollForConversion+0x104>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	68d9      	ldr	r1, [r3, #12]
 8002b10:	4b48      	ldr	r3, [pc, #288]	; (8002c34 <HAL_ADC_PollForConversion+0x1fc>)
 8002b12:	400b      	ands	r3, r1
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d111      	bne.n	8002b3c <HAL_ADC_PollForConversion+0x104>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	6919      	ldr	r1, [r3, #16]
 8002b1e:	4b46      	ldr	r3, [pc, #280]	; (8002c38 <HAL_ADC_PollForConversion+0x200>)
 8002b20:	400b      	ands	r3, r1
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d108      	bne.n	8002b38 <HAL_ADC_PollForConversion+0x100>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	68d9      	ldr	r1, [r3, #12]
 8002b2c:	4b43      	ldr	r3, [pc, #268]	; (8002c3c <HAL_ADC_PollForConversion+0x204>)
 8002b2e:	400b      	ands	r3, r1
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d101      	bne.n	8002b38 <HAL_ADC_PollForConversion+0x100>
 8002b34:	2314      	movs	r3, #20
 8002b36:	e020      	b.n	8002b7a <HAL_ADC_PollForConversion+0x142>
 8002b38:	2329      	movs	r3, #41	; 0x29
 8002b3a:	e01e      	b.n	8002b7a <HAL_ADC_PollForConversion+0x142>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	6919      	ldr	r1, [r3, #16]
 8002b42:	4b3d      	ldr	r3, [pc, #244]	; (8002c38 <HAL_ADC_PollForConversion+0x200>)
 8002b44:	400b      	ands	r3, r1
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d106      	bne.n	8002b58 <HAL_ADC_PollForConversion+0x120>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68d9      	ldr	r1, [r3, #12]
 8002b50:	4b3a      	ldr	r3, [pc, #232]	; (8002c3c <HAL_ADC_PollForConversion+0x204>)
 8002b52:	400b      	ands	r3, r1
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d00d      	beq.n	8002b74 <HAL_ADC_PollForConversion+0x13c>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	6919      	ldr	r1, [r3, #16]
 8002b5e:	4b38      	ldr	r3, [pc, #224]	; (8002c40 <HAL_ADC_PollForConversion+0x208>)
 8002b60:	400b      	ands	r3, r1
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d108      	bne.n	8002b78 <HAL_ADC_PollForConversion+0x140>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	68d9      	ldr	r1, [r3, #12]
 8002b6c:	4b34      	ldr	r3, [pc, #208]	; (8002c40 <HAL_ADC_PollForConversion+0x208>)
 8002b6e:	400b      	ands	r3, r1
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d101      	bne.n	8002b78 <HAL_ADC_PollForConversion+0x140>
 8002b74:	2354      	movs	r3, #84	; 0x54
 8002b76:	e000      	b.n	8002b7a <HAL_ADC_PollForConversion+0x142>
 8002b78:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002b7a:	fb02 f303 	mul.w	r3, r2, r3
 8002b7e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002b80:	e021      	b.n	8002bc6 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b88:	d01a      	beq.n	8002bc0 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d007      	beq.n	8002ba0 <HAL_ADC_PollForConversion+0x168>
 8002b90:	f7ff fd9e 	bl	80026d0 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	683a      	ldr	r2, [r7, #0]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d20f      	bcs.n	8002bc0 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	693a      	ldr	r2, [r7, #16]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d90b      	bls.n	8002bc0 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bac:	f043 0204 	orr.w	r2, r3, #4
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e030      	b.n	8002c22 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	693a      	ldr	r2, [r7, #16]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d8d9      	bhi.n	8002b82 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f06f 0212 	mvn.w	r2, #18
 8002bd6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bdc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002bee:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002bf2:	d115      	bne.n	8002c20 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d111      	bne.n	8002c20 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c00:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d105      	bne.n	8002c20 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c18:	f043 0201 	orr.w	r2, r3, #1
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	371c      	adds	r7, #28
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd90      	pop	{r4, r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	2000009c 	.word	0x2000009c
 8002c30:	24924924 	.word	0x24924924
 8002c34:	00924924 	.word	0x00924924
 8002c38:	12492492 	.word	0x12492492
 8002c3c:	00492492 	.word	0x00492492
 8002c40:	00249249 	.word	0x00249249

08002c44 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bc80      	pop	{r7}
 8002c5a:	4770      	bx	lr

08002c5c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002c5c:	b480      	push	{r7}
 8002c5e:	b085      	sub	sp, #20
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c66:	2300      	movs	r3, #0
 8002c68:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d101      	bne.n	8002c7c <HAL_ADC_ConfigChannel+0x20>
 8002c78:	2302      	movs	r3, #2
 8002c7a:	e0dc      	b.n	8002e36 <HAL_ADC_ConfigChannel+0x1da>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	2b06      	cmp	r3, #6
 8002c8a:	d81c      	bhi.n	8002cc6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	685a      	ldr	r2, [r3, #4]
 8002c96:	4613      	mov	r3, r2
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	4413      	add	r3, r2
 8002c9c:	3b05      	subs	r3, #5
 8002c9e:	221f      	movs	r2, #31
 8002ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca4:	43db      	mvns	r3, r3
 8002ca6:	4019      	ands	r1, r3
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	6818      	ldr	r0, [r3, #0]
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685a      	ldr	r2, [r3, #4]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	4413      	add	r3, r2
 8002cb6:	3b05      	subs	r3, #5
 8002cb8:	fa00 f203 	lsl.w	r2, r0, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	430a      	orrs	r2, r1
 8002cc2:	635a      	str	r2, [r3, #52]	; 0x34
 8002cc4:	e03c      	b.n	8002d40 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	2b0c      	cmp	r3, #12
 8002ccc:	d81c      	bhi.n	8002d08 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685a      	ldr	r2, [r3, #4]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	4413      	add	r3, r2
 8002cde:	3b23      	subs	r3, #35	; 0x23
 8002ce0:	221f      	movs	r2, #31
 8002ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce6:	43db      	mvns	r3, r3
 8002ce8:	4019      	ands	r1, r3
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	6818      	ldr	r0, [r3, #0]
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	685a      	ldr	r2, [r3, #4]
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	4413      	add	r3, r2
 8002cf8:	3b23      	subs	r3, #35	; 0x23
 8002cfa:	fa00 f203 	lsl.w	r2, r0, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	430a      	orrs	r2, r1
 8002d04:	631a      	str	r2, [r3, #48]	; 0x30
 8002d06:	e01b      	b.n	8002d40 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	685a      	ldr	r2, [r3, #4]
 8002d12:	4613      	mov	r3, r2
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	4413      	add	r3, r2
 8002d18:	3b41      	subs	r3, #65	; 0x41
 8002d1a:	221f      	movs	r2, #31
 8002d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d20:	43db      	mvns	r3, r3
 8002d22:	4019      	ands	r1, r3
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	6818      	ldr	r0, [r3, #0]
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	685a      	ldr	r2, [r3, #4]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	4413      	add	r3, r2
 8002d32:	3b41      	subs	r3, #65	; 0x41
 8002d34:	fa00 f203 	lsl.w	r2, r0, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2b09      	cmp	r3, #9
 8002d46:	d91c      	bls.n	8002d82 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	68d9      	ldr	r1, [r3, #12]
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	4613      	mov	r3, r2
 8002d54:	005b      	lsls	r3, r3, #1
 8002d56:	4413      	add	r3, r2
 8002d58:	3b1e      	subs	r3, #30
 8002d5a:	2207      	movs	r2, #7
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	43db      	mvns	r3, r3
 8002d62:	4019      	ands	r1, r3
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	6898      	ldr	r0, [r3, #8]
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	005b      	lsls	r3, r3, #1
 8002d70:	4413      	add	r3, r2
 8002d72:	3b1e      	subs	r3, #30
 8002d74:	fa00 f203 	lsl.w	r2, r0, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	430a      	orrs	r2, r1
 8002d7e:	60da      	str	r2, [r3, #12]
 8002d80:	e019      	b.n	8002db6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	6919      	ldr	r1, [r3, #16]
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	4413      	add	r3, r2
 8002d92:	2207      	movs	r2, #7
 8002d94:	fa02 f303 	lsl.w	r3, r2, r3
 8002d98:	43db      	mvns	r3, r3
 8002d9a:	4019      	ands	r1, r3
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	6898      	ldr	r0, [r3, #8]
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	4613      	mov	r3, r2
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	4413      	add	r3, r2
 8002daa:	fa00 f203 	lsl.w	r2, r0, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	430a      	orrs	r2, r1
 8002db4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2b10      	cmp	r3, #16
 8002dbc:	d003      	beq.n	8002dc6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002dc2:	2b11      	cmp	r3, #17
 8002dc4:	d132      	bne.n	8002e2c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a1d      	ldr	r2, [pc, #116]	; (8002e40 <HAL_ADC_ConfigChannel+0x1e4>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d125      	bne.n	8002e1c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d126      	bne.n	8002e2c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	689a      	ldr	r2, [r3, #8]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002dec:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2b10      	cmp	r3, #16
 8002df4:	d11a      	bne.n	8002e2c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002df6:	4b13      	ldr	r3, [pc, #76]	; (8002e44 <HAL_ADC_ConfigChannel+0x1e8>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a13      	ldr	r2, [pc, #76]	; (8002e48 <HAL_ADC_ConfigChannel+0x1ec>)
 8002dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8002e00:	0c9a      	lsrs	r2, r3, #18
 8002e02:	4613      	mov	r3, r2
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	4413      	add	r3, r2
 8002e08:	005b      	lsls	r3, r3, #1
 8002e0a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002e0c:	e002      	b.n	8002e14 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	3b01      	subs	r3, #1
 8002e12:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d1f9      	bne.n	8002e0e <HAL_ADC_ConfigChannel+0x1b2>
 8002e1a:	e007      	b.n	8002e2c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e20:	f043 0220 	orr.w	r2, r3, #32
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3714      	adds	r7, #20
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bc80      	pop	{r7}
 8002e3e:	4770      	bx	lr
 8002e40:	40012400 	.word	0x40012400
 8002e44:	2000009c 	.word	0x2000009c
 8002e48:	431bde83 	.word	0x431bde83

08002e4c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e54:	2300      	movs	r3, #0
 8002e56:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f003 0301 	and.w	r3, r3, #1
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d040      	beq.n	8002eec <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	689a      	ldr	r2, [r3, #8]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f042 0201 	orr.w	r2, r2, #1
 8002e78:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002e7a:	4b1f      	ldr	r3, [pc, #124]	; (8002ef8 <ADC_Enable+0xac>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a1f      	ldr	r2, [pc, #124]	; (8002efc <ADC_Enable+0xb0>)
 8002e80:	fba2 2303 	umull	r2, r3, r2, r3
 8002e84:	0c9b      	lsrs	r3, r3, #18
 8002e86:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002e88:	e002      	b.n	8002e90 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d1f9      	bne.n	8002e8a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002e96:	f7ff fc1b 	bl	80026d0 <HAL_GetTick>
 8002e9a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002e9c:	e01f      	b.n	8002ede <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002e9e:	f7ff fc17 	bl	80026d0 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d918      	bls.n	8002ede <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f003 0301 	and.w	r3, r3, #1
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d011      	beq.n	8002ede <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ebe:	f043 0210 	orr.w	r2, r3, #16
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eca:	f043 0201 	orr.w	r2, r3, #1
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e007      	b.n	8002eee <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f003 0301 	and.w	r3, r3, #1
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d1d8      	bne.n	8002e9e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3710      	adds	r7, #16
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	2000009c 	.word	0x2000009c
 8002efc:	431bde83 	.word	0x431bde83

08002f00 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d12e      	bne.n	8002f78 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	689a      	ldr	r2, [r3, #8]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f022 0201 	bic.w	r2, r2, #1
 8002f28:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002f2a:	f7ff fbd1 	bl	80026d0 <HAL_GetTick>
 8002f2e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002f30:	e01b      	b.n	8002f6a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002f32:	f7ff fbcd 	bl	80026d0 <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d914      	bls.n	8002f6a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d10d      	bne.n	8002f6a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f52:	f043 0210 	orr.w	r2, r3, #16
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f5e:	f043 0201 	orr.w	r2, r3, #1
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e007      	b.n	8002f7a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f003 0301 	and.w	r3, r3, #1
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d0dc      	beq.n	8002f32 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3710      	adds	r7, #16
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
	...

08002f84 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002f84:	b590      	push	{r4, r7, lr}
 8002f86:	b087      	sub	sp, #28
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002f90:	2300      	movs	r3, #0
 8002f92:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d101      	bne.n	8002fa2 <HAL_ADCEx_Calibration_Start+0x1e>
 8002f9e:	2302      	movs	r3, #2
 8002fa0:	e095      	b.n	80030ce <HAL_ADCEx_Calibration_Start+0x14a>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f7ff ffa8 	bl	8002f00 <ADC_ConversionStop_Disable>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002fb4:	7dfb      	ldrb	r3, [r7, #23]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	f040 8084 	bne.w	80030c4 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002fc4:	f023 0302 	bic.w	r3, r3, #2
 8002fc8:	f043 0202 	orr.w	r2, r3, #2
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002fd0:	4b41      	ldr	r3, [pc, #260]	; (80030d8 <HAL_ADCEx_Calibration_Start+0x154>)
 8002fd2:	681c      	ldr	r4, [r3, #0]
 8002fd4:	2002      	movs	r0, #2
 8002fd6:	f003 fda1 	bl	8006b1c <HAL_RCCEx_GetPeriphCLKFreq>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8002fe0:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002fe2:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8002fe4:	e002      	b.n	8002fec <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	3b01      	subs	r3, #1
 8002fea:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1f9      	bne.n	8002fe6 <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f7ff ff2a 	bl	8002e4c <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	689a      	ldr	r2, [r3, #8]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f042 0208 	orr.w	r2, r2, #8
 8003006:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003008:	f7ff fb62 	bl	80026d0 <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800300e:	e01b      	b.n	8003048 <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003010:	f7ff fb5e 	bl	80026d0 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b0a      	cmp	r3, #10
 800301c:	d914      	bls.n	8003048 <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f003 0308 	and.w	r3, r3, #8
 8003028:	2b00      	cmp	r3, #0
 800302a:	d00d      	beq.n	8003048 <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003030:	f023 0312 	bic.w	r3, r3, #18
 8003034:	f043 0210 	orr.w	r2, r3, #16
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e042      	b.n	80030ce <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f003 0308 	and.w	r3, r3, #8
 8003052:	2b00      	cmp	r3, #0
 8003054:	d1dc      	bne.n	8003010 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	689a      	ldr	r2, [r3, #8]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f042 0204 	orr.w	r2, r2, #4
 8003064:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003066:	f7ff fb33 	bl	80026d0 <HAL_GetTick>
 800306a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800306c:	e01b      	b.n	80030a6 <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800306e:	f7ff fb2f 	bl	80026d0 <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	2b0a      	cmp	r3, #10
 800307a:	d914      	bls.n	80030a6 <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f003 0304 	and.w	r3, r3, #4
 8003086:	2b00      	cmp	r3, #0
 8003088:	d00d      	beq.n	80030a6 <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800308e:	f023 0312 	bic.w	r3, r3, #18
 8003092:	f043 0210 	orr.w	r2, r3, #16
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e013      	b.n	80030ce <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f003 0304 	and.w	r3, r3, #4
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d1dc      	bne.n	800306e <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b8:	f023 0303 	bic.w	r3, r3, #3
 80030bc:	f043 0201 	orr.w	r2, r3, #1
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80030cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	371c      	adds	r7, #28
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd90      	pop	{r4, r7, pc}
 80030d6:	bf00      	nop
 80030d8:	2000009c 	.word	0x2000009c

080030dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030dc:	b480      	push	{r7}
 80030de:	b085      	sub	sp, #20
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f003 0307 	and.w	r3, r3, #7
 80030ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030ec:	4b0c      	ldr	r3, [pc, #48]	; (8003120 <__NVIC_SetPriorityGrouping+0x44>)
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030f2:	68ba      	ldr	r2, [r7, #8]
 80030f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030f8:	4013      	ands	r3, r2
 80030fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003104:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003108:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800310c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800310e:	4a04      	ldr	r2, [pc, #16]	; (8003120 <__NVIC_SetPriorityGrouping+0x44>)
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	60d3      	str	r3, [r2, #12]
}
 8003114:	bf00      	nop
 8003116:	3714      	adds	r7, #20
 8003118:	46bd      	mov	sp, r7
 800311a:	bc80      	pop	{r7}
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	e000ed00 	.word	0xe000ed00

08003124 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003128:	4b04      	ldr	r3, [pc, #16]	; (800313c <__NVIC_GetPriorityGrouping+0x18>)
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	0a1b      	lsrs	r3, r3, #8
 800312e:	f003 0307 	and.w	r3, r3, #7
}
 8003132:	4618      	mov	r0, r3
 8003134:	46bd      	mov	sp, r7
 8003136:	bc80      	pop	{r7}
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	e000ed00 	.word	0xe000ed00

08003140 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	4603      	mov	r3, r0
 8003148:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800314a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800314e:	2b00      	cmp	r3, #0
 8003150:	db0b      	blt.n	800316a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003152:	79fb      	ldrb	r3, [r7, #7]
 8003154:	f003 021f 	and.w	r2, r3, #31
 8003158:	4906      	ldr	r1, [pc, #24]	; (8003174 <__NVIC_EnableIRQ+0x34>)
 800315a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800315e:	095b      	lsrs	r3, r3, #5
 8003160:	2001      	movs	r0, #1
 8003162:	fa00 f202 	lsl.w	r2, r0, r2
 8003166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800316a:	bf00      	nop
 800316c:	370c      	adds	r7, #12
 800316e:	46bd      	mov	sp, r7
 8003170:	bc80      	pop	{r7}
 8003172:	4770      	bx	lr
 8003174:	e000e100 	.word	0xe000e100

08003178 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	4603      	mov	r3, r0
 8003180:	6039      	str	r1, [r7, #0]
 8003182:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003188:	2b00      	cmp	r3, #0
 800318a:	db0a      	blt.n	80031a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	b2da      	uxtb	r2, r3
 8003190:	490c      	ldr	r1, [pc, #48]	; (80031c4 <__NVIC_SetPriority+0x4c>)
 8003192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003196:	0112      	lsls	r2, r2, #4
 8003198:	b2d2      	uxtb	r2, r2
 800319a:	440b      	add	r3, r1
 800319c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031a0:	e00a      	b.n	80031b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	b2da      	uxtb	r2, r3
 80031a6:	4908      	ldr	r1, [pc, #32]	; (80031c8 <__NVIC_SetPriority+0x50>)
 80031a8:	79fb      	ldrb	r3, [r7, #7]
 80031aa:	f003 030f 	and.w	r3, r3, #15
 80031ae:	3b04      	subs	r3, #4
 80031b0:	0112      	lsls	r2, r2, #4
 80031b2:	b2d2      	uxtb	r2, r2
 80031b4:	440b      	add	r3, r1
 80031b6:	761a      	strb	r2, [r3, #24]
}
 80031b8:	bf00      	nop
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	bc80      	pop	{r7}
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop
 80031c4:	e000e100 	.word	0xe000e100
 80031c8:	e000ed00 	.word	0xe000ed00

080031cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b089      	sub	sp, #36	; 0x24
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f003 0307 	and.w	r3, r3, #7
 80031de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	f1c3 0307 	rsb	r3, r3, #7
 80031e6:	2b04      	cmp	r3, #4
 80031e8:	bf28      	it	cs
 80031ea:	2304      	movcs	r3, #4
 80031ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	3304      	adds	r3, #4
 80031f2:	2b06      	cmp	r3, #6
 80031f4:	d902      	bls.n	80031fc <NVIC_EncodePriority+0x30>
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	3b03      	subs	r3, #3
 80031fa:	e000      	b.n	80031fe <NVIC_EncodePriority+0x32>
 80031fc:	2300      	movs	r3, #0
 80031fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003200:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	fa02 f303 	lsl.w	r3, r2, r3
 800320a:	43da      	mvns	r2, r3
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	401a      	ands	r2, r3
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003214:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	fa01 f303 	lsl.w	r3, r1, r3
 800321e:	43d9      	mvns	r1, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003224:	4313      	orrs	r3, r2
         );
}
 8003226:	4618      	mov	r0, r3
 8003228:	3724      	adds	r7, #36	; 0x24
 800322a:	46bd      	mov	sp, r7
 800322c:	bc80      	pop	{r7}
 800322e:	4770      	bx	lr

08003230 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	3b01      	subs	r3, #1
 800323c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003240:	d301      	bcc.n	8003246 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003242:	2301      	movs	r3, #1
 8003244:	e00f      	b.n	8003266 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003246:	4a0a      	ldr	r2, [pc, #40]	; (8003270 <SysTick_Config+0x40>)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	3b01      	subs	r3, #1
 800324c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800324e:	210f      	movs	r1, #15
 8003250:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003254:	f7ff ff90 	bl	8003178 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003258:	4b05      	ldr	r3, [pc, #20]	; (8003270 <SysTick_Config+0x40>)
 800325a:	2200      	movs	r2, #0
 800325c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800325e:	4b04      	ldr	r3, [pc, #16]	; (8003270 <SysTick_Config+0x40>)
 8003260:	2207      	movs	r2, #7
 8003262:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	3708      	adds	r7, #8
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	e000e010 	.word	0xe000e010

08003274 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f7ff ff2d 	bl	80030dc <__NVIC_SetPriorityGrouping>
}
 8003282:	bf00      	nop
 8003284:	3708      	adds	r7, #8
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}

0800328a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800328a:	b580      	push	{r7, lr}
 800328c:	b086      	sub	sp, #24
 800328e:	af00      	add	r7, sp, #0
 8003290:	4603      	mov	r3, r0
 8003292:	60b9      	str	r1, [r7, #8]
 8003294:	607a      	str	r2, [r7, #4]
 8003296:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003298:	2300      	movs	r3, #0
 800329a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800329c:	f7ff ff42 	bl	8003124 <__NVIC_GetPriorityGrouping>
 80032a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	68b9      	ldr	r1, [r7, #8]
 80032a6:	6978      	ldr	r0, [r7, #20]
 80032a8:	f7ff ff90 	bl	80031cc <NVIC_EncodePriority>
 80032ac:	4602      	mov	r2, r0
 80032ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032b2:	4611      	mov	r1, r2
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7ff ff5f 	bl	8003178 <__NVIC_SetPriority>
}
 80032ba:	bf00      	nop
 80032bc:	3718      	adds	r7, #24
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b082      	sub	sp, #8
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	4603      	mov	r3, r0
 80032ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7ff ff35 	bl	8003140 <__NVIC_EnableIRQ>
}
 80032d6:	bf00      	nop
 80032d8:	3708      	adds	r7, #8
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}

080032de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032de:	b580      	push	{r7, lr}
 80032e0:	b082      	sub	sp, #8
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f7ff ffa2 	bl	8003230 <SysTick_Config>
 80032ec:	4603      	mov	r3, r0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3708      	adds	r7, #8
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}

080032f6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80032f6:	b480      	push	{r7}
 80032f8:	b085      	sub	sp, #20
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032fe:	2300      	movs	r3, #0
 8003300:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003308:	2b02      	cmp	r3, #2
 800330a:	d008      	beq.n	800331e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2204      	movs	r2, #4
 8003310:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e020      	b.n	8003360 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f022 020e 	bic.w	r2, r2, #14
 800332c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f022 0201 	bic.w	r2, r2, #1
 800333c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003346:	2101      	movs	r1, #1
 8003348:	fa01 f202 	lsl.w	r2, r1, r2
 800334c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2201      	movs	r2, #1
 8003352:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800335e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003360:	4618      	mov	r0, r3
 8003362:	3714      	adds	r7, #20
 8003364:	46bd      	mov	sp, r7
 8003366:	bc80      	pop	{r7}
 8003368:	4770      	bx	lr
	...

0800336c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003374:	2300      	movs	r3, #0
 8003376:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800337e:	2b02      	cmp	r3, #2
 8003380:	d005      	beq.n	800338e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2204      	movs	r2, #4
 8003386:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	73fb      	strb	r3, [r7, #15]
 800338c:	e051      	b.n	8003432 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f022 020e 	bic.w	r2, r2, #14
 800339c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f022 0201 	bic.w	r2, r2, #1
 80033ac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a22      	ldr	r2, [pc, #136]	; (800343c <HAL_DMA_Abort_IT+0xd0>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d029      	beq.n	800340c <HAL_DMA_Abort_IT+0xa0>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a20      	ldr	r2, [pc, #128]	; (8003440 <HAL_DMA_Abort_IT+0xd4>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d022      	beq.n	8003408 <HAL_DMA_Abort_IT+0x9c>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a1f      	ldr	r2, [pc, #124]	; (8003444 <HAL_DMA_Abort_IT+0xd8>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d01a      	beq.n	8003402 <HAL_DMA_Abort_IT+0x96>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a1d      	ldr	r2, [pc, #116]	; (8003448 <HAL_DMA_Abort_IT+0xdc>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d012      	beq.n	80033fc <HAL_DMA_Abort_IT+0x90>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a1c      	ldr	r2, [pc, #112]	; (800344c <HAL_DMA_Abort_IT+0xe0>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d00a      	beq.n	80033f6 <HAL_DMA_Abort_IT+0x8a>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a1a      	ldr	r2, [pc, #104]	; (8003450 <HAL_DMA_Abort_IT+0xe4>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d102      	bne.n	80033f0 <HAL_DMA_Abort_IT+0x84>
 80033ea:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80033ee:	e00e      	b.n	800340e <HAL_DMA_Abort_IT+0xa2>
 80033f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033f4:	e00b      	b.n	800340e <HAL_DMA_Abort_IT+0xa2>
 80033f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80033fa:	e008      	b.n	800340e <HAL_DMA_Abort_IT+0xa2>
 80033fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003400:	e005      	b.n	800340e <HAL_DMA_Abort_IT+0xa2>
 8003402:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003406:	e002      	b.n	800340e <HAL_DMA_Abort_IT+0xa2>
 8003408:	2310      	movs	r3, #16
 800340a:	e000      	b.n	800340e <HAL_DMA_Abort_IT+0xa2>
 800340c:	2301      	movs	r3, #1
 800340e:	4a11      	ldr	r2, [pc, #68]	; (8003454 <HAL_DMA_Abort_IT+0xe8>)
 8003410:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2201      	movs	r2, #1
 8003416:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003426:	2b00      	cmp	r3, #0
 8003428:	d003      	beq.n	8003432 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	4798      	blx	r3
    } 
  }
  return status;
 8003432:	7bfb      	ldrb	r3, [r7, #15]
}
 8003434:	4618      	mov	r0, r3
 8003436:	3710      	adds	r7, #16
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}
 800343c:	40020008 	.word	0x40020008
 8003440:	4002001c 	.word	0x4002001c
 8003444:	40020030 	.word	0x40020030
 8003448:	40020044 	.word	0x40020044
 800344c:	40020058 	.word	0x40020058
 8003450:	4002006c 	.word	0x4002006c
 8003454:	40020000 	.word	0x40020000

08003458 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003458:	b480      	push	{r7}
 800345a:	b08b      	sub	sp, #44	; 0x2c
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003462:	2300      	movs	r3, #0
 8003464:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003466:	2300      	movs	r3, #0
 8003468:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800346a:	e169      	b.n	8003740 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800346c:	2201      	movs	r2, #1
 800346e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003470:	fa02 f303 	lsl.w	r3, r2, r3
 8003474:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	69fa      	ldr	r2, [r7, #28]
 800347c:	4013      	ands	r3, r2
 800347e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003480:	69ba      	ldr	r2, [r7, #24]
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	429a      	cmp	r2, r3
 8003486:	f040 8158 	bne.w	800373a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	4a9a      	ldr	r2, [pc, #616]	; (80036f8 <HAL_GPIO_Init+0x2a0>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d05e      	beq.n	8003552 <HAL_GPIO_Init+0xfa>
 8003494:	4a98      	ldr	r2, [pc, #608]	; (80036f8 <HAL_GPIO_Init+0x2a0>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d875      	bhi.n	8003586 <HAL_GPIO_Init+0x12e>
 800349a:	4a98      	ldr	r2, [pc, #608]	; (80036fc <HAL_GPIO_Init+0x2a4>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d058      	beq.n	8003552 <HAL_GPIO_Init+0xfa>
 80034a0:	4a96      	ldr	r2, [pc, #600]	; (80036fc <HAL_GPIO_Init+0x2a4>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d86f      	bhi.n	8003586 <HAL_GPIO_Init+0x12e>
 80034a6:	4a96      	ldr	r2, [pc, #600]	; (8003700 <HAL_GPIO_Init+0x2a8>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d052      	beq.n	8003552 <HAL_GPIO_Init+0xfa>
 80034ac:	4a94      	ldr	r2, [pc, #592]	; (8003700 <HAL_GPIO_Init+0x2a8>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d869      	bhi.n	8003586 <HAL_GPIO_Init+0x12e>
 80034b2:	4a94      	ldr	r2, [pc, #592]	; (8003704 <HAL_GPIO_Init+0x2ac>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d04c      	beq.n	8003552 <HAL_GPIO_Init+0xfa>
 80034b8:	4a92      	ldr	r2, [pc, #584]	; (8003704 <HAL_GPIO_Init+0x2ac>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d863      	bhi.n	8003586 <HAL_GPIO_Init+0x12e>
 80034be:	4a92      	ldr	r2, [pc, #584]	; (8003708 <HAL_GPIO_Init+0x2b0>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d046      	beq.n	8003552 <HAL_GPIO_Init+0xfa>
 80034c4:	4a90      	ldr	r2, [pc, #576]	; (8003708 <HAL_GPIO_Init+0x2b0>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d85d      	bhi.n	8003586 <HAL_GPIO_Init+0x12e>
 80034ca:	2b12      	cmp	r3, #18
 80034cc:	d82a      	bhi.n	8003524 <HAL_GPIO_Init+0xcc>
 80034ce:	2b12      	cmp	r3, #18
 80034d0:	d859      	bhi.n	8003586 <HAL_GPIO_Init+0x12e>
 80034d2:	a201      	add	r2, pc, #4	; (adr r2, 80034d8 <HAL_GPIO_Init+0x80>)
 80034d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034d8:	08003553 	.word	0x08003553
 80034dc:	0800352d 	.word	0x0800352d
 80034e0:	0800353f 	.word	0x0800353f
 80034e4:	08003581 	.word	0x08003581
 80034e8:	08003587 	.word	0x08003587
 80034ec:	08003587 	.word	0x08003587
 80034f0:	08003587 	.word	0x08003587
 80034f4:	08003587 	.word	0x08003587
 80034f8:	08003587 	.word	0x08003587
 80034fc:	08003587 	.word	0x08003587
 8003500:	08003587 	.word	0x08003587
 8003504:	08003587 	.word	0x08003587
 8003508:	08003587 	.word	0x08003587
 800350c:	08003587 	.word	0x08003587
 8003510:	08003587 	.word	0x08003587
 8003514:	08003587 	.word	0x08003587
 8003518:	08003587 	.word	0x08003587
 800351c:	08003535 	.word	0x08003535
 8003520:	08003549 	.word	0x08003549
 8003524:	4a79      	ldr	r2, [pc, #484]	; (800370c <HAL_GPIO_Init+0x2b4>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d013      	beq.n	8003552 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800352a:	e02c      	b.n	8003586 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	623b      	str	r3, [r7, #32]
          break;
 8003532:	e029      	b.n	8003588 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	3304      	adds	r3, #4
 800353a:	623b      	str	r3, [r7, #32]
          break;
 800353c:	e024      	b.n	8003588 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	3308      	adds	r3, #8
 8003544:	623b      	str	r3, [r7, #32]
          break;
 8003546:	e01f      	b.n	8003588 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	330c      	adds	r3, #12
 800354e:	623b      	str	r3, [r7, #32]
          break;
 8003550:	e01a      	b.n	8003588 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d102      	bne.n	8003560 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800355a:	2304      	movs	r3, #4
 800355c:	623b      	str	r3, [r7, #32]
          break;
 800355e:	e013      	b.n	8003588 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	2b01      	cmp	r3, #1
 8003566:	d105      	bne.n	8003574 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003568:	2308      	movs	r3, #8
 800356a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	69fa      	ldr	r2, [r7, #28]
 8003570:	611a      	str	r2, [r3, #16]
          break;
 8003572:	e009      	b.n	8003588 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003574:	2308      	movs	r3, #8
 8003576:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	69fa      	ldr	r2, [r7, #28]
 800357c:	615a      	str	r2, [r3, #20]
          break;
 800357e:	e003      	b.n	8003588 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003580:	2300      	movs	r3, #0
 8003582:	623b      	str	r3, [r7, #32]
          break;
 8003584:	e000      	b.n	8003588 <HAL_GPIO_Init+0x130>
          break;
 8003586:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	2bff      	cmp	r3, #255	; 0xff
 800358c:	d801      	bhi.n	8003592 <HAL_GPIO_Init+0x13a>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	e001      	b.n	8003596 <HAL_GPIO_Init+0x13e>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	3304      	adds	r3, #4
 8003596:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	2bff      	cmp	r3, #255	; 0xff
 800359c:	d802      	bhi.n	80035a4 <HAL_GPIO_Init+0x14c>
 800359e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	e002      	b.n	80035aa <HAL_GPIO_Init+0x152>
 80035a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a6:	3b08      	subs	r3, #8
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	210f      	movs	r1, #15
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	fa01 f303 	lsl.w	r3, r1, r3
 80035b8:	43db      	mvns	r3, r3
 80035ba:	401a      	ands	r2, r3
 80035bc:	6a39      	ldr	r1, [r7, #32]
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	fa01 f303 	lsl.w	r3, r1, r3
 80035c4:	431a      	orrs	r2, r3
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	f000 80b1 	beq.w	800373a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80035d8:	4b4d      	ldr	r3, [pc, #308]	; (8003710 <HAL_GPIO_Init+0x2b8>)
 80035da:	699b      	ldr	r3, [r3, #24]
 80035dc:	4a4c      	ldr	r2, [pc, #304]	; (8003710 <HAL_GPIO_Init+0x2b8>)
 80035de:	f043 0301 	orr.w	r3, r3, #1
 80035e2:	6193      	str	r3, [r2, #24]
 80035e4:	4b4a      	ldr	r3, [pc, #296]	; (8003710 <HAL_GPIO_Init+0x2b8>)
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	f003 0301 	and.w	r3, r3, #1
 80035ec:	60bb      	str	r3, [r7, #8]
 80035ee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80035f0:	4a48      	ldr	r2, [pc, #288]	; (8003714 <HAL_GPIO_Init+0x2bc>)
 80035f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f4:	089b      	lsrs	r3, r3, #2
 80035f6:	3302      	adds	r3, #2
 80035f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035fc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80035fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003600:	f003 0303 	and.w	r3, r3, #3
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	220f      	movs	r2, #15
 8003608:	fa02 f303 	lsl.w	r3, r2, r3
 800360c:	43db      	mvns	r3, r3
 800360e:	68fa      	ldr	r2, [r7, #12]
 8003610:	4013      	ands	r3, r2
 8003612:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4a40      	ldr	r2, [pc, #256]	; (8003718 <HAL_GPIO_Init+0x2c0>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d013      	beq.n	8003644 <HAL_GPIO_Init+0x1ec>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a3f      	ldr	r2, [pc, #252]	; (800371c <HAL_GPIO_Init+0x2c4>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d00d      	beq.n	8003640 <HAL_GPIO_Init+0x1e8>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	4a3e      	ldr	r2, [pc, #248]	; (8003720 <HAL_GPIO_Init+0x2c8>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d007      	beq.n	800363c <HAL_GPIO_Init+0x1e4>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4a3d      	ldr	r2, [pc, #244]	; (8003724 <HAL_GPIO_Init+0x2cc>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d101      	bne.n	8003638 <HAL_GPIO_Init+0x1e0>
 8003634:	2303      	movs	r3, #3
 8003636:	e006      	b.n	8003646 <HAL_GPIO_Init+0x1ee>
 8003638:	2304      	movs	r3, #4
 800363a:	e004      	b.n	8003646 <HAL_GPIO_Init+0x1ee>
 800363c:	2302      	movs	r3, #2
 800363e:	e002      	b.n	8003646 <HAL_GPIO_Init+0x1ee>
 8003640:	2301      	movs	r3, #1
 8003642:	e000      	b.n	8003646 <HAL_GPIO_Init+0x1ee>
 8003644:	2300      	movs	r3, #0
 8003646:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003648:	f002 0203 	and.w	r2, r2, #3
 800364c:	0092      	lsls	r2, r2, #2
 800364e:	4093      	lsls	r3, r2
 8003650:	68fa      	ldr	r2, [r7, #12]
 8003652:	4313      	orrs	r3, r2
 8003654:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003656:	492f      	ldr	r1, [pc, #188]	; (8003714 <HAL_GPIO_Init+0x2bc>)
 8003658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365a:	089b      	lsrs	r3, r3, #2
 800365c:	3302      	adds	r3, #2
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d006      	beq.n	800367e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003670:	4b2d      	ldr	r3, [pc, #180]	; (8003728 <HAL_GPIO_Init+0x2d0>)
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	492c      	ldr	r1, [pc, #176]	; (8003728 <HAL_GPIO_Init+0x2d0>)
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	4313      	orrs	r3, r2
 800367a:	600b      	str	r3, [r1, #0]
 800367c:	e006      	b.n	800368c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800367e:	4b2a      	ldr	r3, [pc, #168]	; (8003728 <HAL_GPIO_Init+0x2d0>)
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	43db      	mvns	r3, r3
 8003686:	4928      	ldr	r1, [pc, #160]	; (8003728 <HAL_GPIO_Init+0x2d0>)
 8003688:	4013      	ands	r3, r2
 800368a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d006      	beq.n	80036a6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003698:	4b23      	ldr	r3, [pc, #140]	; (8003728 <HAL_GPIO_Init+0x2d0>)
 800369a:	685a      	ldr	r2, [r3, #4]
 800369c:	4922      	ldr	r1, [pc, #136]	; (8003728 <HAL_GPIO_Init+0x2d0>)
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	604b      	str	r3, [r1, #4]
 80036a4:	e006      	b.n	80036b4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80036a6:	4b20      	ldr	r3, [pc, #128]	; (8003728 <HAL_GPIO_Init+0x2d0>)
 80036a8:	685a      	ldr	r2, [r3, #4]
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	43db      	mvns	r3, r3
 80036ae:	491e      	ldr	r1, [pc, #120]	; (8003728 <HAL_GPIO_Init+0x2d0>)
 80036b0:	4013      	ands	r3, r2
 80036b2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d006      	beq.n	80036ce <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80036c0:	4b19      	ldr	r3, [pc, #100]	; (8003728 <HAL_GPIO_Init+0x2d0>)
 80036c2:	689a      	ldr	r2, [r3, #8]
 80036c4:	4918      	ldr	r1, [pc, #96]	; (8003728 <HAL_GPIO_Init+0x2d0>)
 80036c6:	69bb      	ldr	r3, [r7, #24]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	608b      	str	r3, [r1, #8]
 80036cc:	e006      	b.n	80036dc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80036ce:	4b16      	ldr	r3, [pc, #88]	; (8003728 <HAL_GPIO_Init+0x2d0>)
 80036d0:	689a      	ldr	r2, [r3, #8]
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	43db      	mvns	r3, r3
 80036d6:	4914      	ldr	r1, [pc, #80]	; (8003728 <HAL_GPIO_Init+0x2d0>)
 80036d8:	4013      	ands	r3, r2
 80036da:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d021      	beq.n	800372c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80036e8:	4b0f      	ldr	r3, [pc, #60]	; (8003728 <HAL_GPIO_Init+0x2d0>)
 80036ea:	68da      	ldr	r2, [r3, #12]
 80036ec:	490e      	ldr	r1, [pc, #56]	; (8003728 <HAL_GPIO_Init+0x2d0>)
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	60cb      	str	r3, [r1, #12]
 80036f4:	e021      	b.n	800373a <HAL_GPIO_Init+0x2e2>
 80036f6:	bf00      	nop
 80036f8:	10320000 	.word	0x10320000
 80036fc:	10310000 	.word	0x10310000
 8003700:	10220000 	.word	0x10220000
 8003704:	10210000 	.word	0x10210000
 8003708:	10120000 	.word	0x10120000
 800370c:	10110000 	.word	0x10110000
 8003710:	40021000 	.word	0x40021000
 8003714:	40010000 	.word	0x40010000
 8003718:	40010800 	.word	0x40010800
 800371c:	40010c00 	.word	0x40010c00
 8003720:	40011000 	.word	0x40011000
 8003724:	40011400 	.word	0x40011400
 8003728:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800372c:	4b0b      	ldr	r3, [pc, #44]	; (800375c <HAL_GPIO_Init+0x304>)
 800372e:	68da      	ldr	r2, [r3, #12]
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	43db      	mvns	r3, r3
 8003734:	4909      	ldr	r1, [pc, #36]	; (800375c <HAL_GPIO_Init+0x304>)
 8003736:	4013      	ands	r3, r2
 8003738:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800373a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373c:	3301      	adds	r3, #1
 800373e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003746:	fa22 f303 	lsr.w	r3, r2, r3
 800374a:	2b00      	cmp	r3, #0
 800374c:	f47f ae8e 	bne.w	800346c <HAL_GPIO_Init+0x14>
  }
}
 8003750:	bf00      	nop
 8003752:	bf00      	nop
 8003754:	372c      	adds	r7, #44	; 0x2c
 8003756:	46bd      	mov	sp, r7
 8003758:	bc80      	pop	{r7}
 800375a:	4770      	bx	lr
 800375c:	40010400 	.word	0x40010400

08003760 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003760:	b480      	push	{r7}
 8003762:	b085      	sub	sp, #20
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	460b      	mov	r3, r1
 800376a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689a      	ldr	r2, [r3, #8]
 8003770:	887b      	ldrh	r3, [r7, #2]
 8003772:	4013      	ands	r3, r2
 8003774:	2b00      	cmp	r3, #0
 8003776:	d002      	beq.n	800377e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003778:	2301      	movs	r3, #1
 800377a:	73fb      	strb	r3, [r7, #15]
 800377c:	e001      	b.n	8003782 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800377e:	2300      	movs	r3, #0
 8003780:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003782:	7bfb      	ldrb	r3, [r7, #15]
}
 8003784:	4618      	mov	r0, r3
 8003786:	3714      	adds	r7, #20
 8003788:	46bd      	mov	sp, r7
 800378a:	bc80      	pop	{r7}
 800378c:	4770      	bx	lr

0800378e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800378e:	b480      	push	{r7}
 8003790:	b083      	sub	sp, #12
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
 8003796:	460b      	mov	r3, r1
 8003798:	807b      	strh	r3, [r7, #2]
 800379a:	4613      	mov	r3, r2
 800379c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800379e:	787b      	ldrb	r3, [r7, #1]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d003      	beq.n	80037ac <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037a4:	887a      	ldrh	r2, [r7, #2]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80037aa:	e003      	b.n	80037b4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80037ac:	887b      	ldrh	r3, [r7, #2]
 80037ae:	041a      	lsls	r2, r3, #16
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	611a      	str	r2, [r3, #16]
}
 80037b4:	bf00      	nop
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bc80      	pop	{r7}
 80037bc:	4770      	bx	lr

080037be <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80037be:	b480      	push	{r7}
 80037c0:	b085      	sub	sp, #20
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
 80037c6:	460b      	mov	r3, r1
 80037c8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80037d0:	887a      	ldrh	r2, [r7, #2]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	4013      	ands	r3, r2
 80037d6:	041a      	lsls	r2, r3, #16
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	43d9      	mvns	r1, r3
 80037dc:	887b      	ldrh	r3, [r7, #2]
 80037de:	400b      	ands	r3, r1
 80037e0:	431a      	orrs	r2, r3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	611a      	str	r2, [r3, #16]
}
 80037e6:	bf00      	nop
 80037e8:	3714      	adds	r7, #20
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bc80      	pop	{r7}
 80037ee:	4770      	bx	lr

080037f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	4603      	mov	r3, r0
 80037f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80037fa:	4b08      	ldr	r3, [pc, #32]	; (800381c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037fc:	695a      	ldr	r2, [r3, #20]
 80037fe:	88fb      	ldrh	r3, [r7, #6]
 8003800:	4013      	ands	r3, r2
 8003802:	2b00      	cmp	r3, #0
 8003804:	d006      	beq.n	8003814 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003806:	4a05      	ldr	r2, [pc, #20]	; (800381c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003808:	88fb      	ldrh	r3, [r7, #6]
 800380a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800380c:	88fb      	ldrh	r3, [r7, #6]
 800380e:	4618      	mov	r0, r3
 8003810:	f7fe fb8e 	bl	8001f30 <HAL_GPIO_EXTI_Callback>
  }
}
 8003814:	bf00      	nop
 8003816:	3708      	adds	r7, #8
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}
 800381c:	40010400 	.word	0x40010400

08003820 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d101      	bne.n	8003832 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e12b      	b.n	8003a8a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003838:	b2db      	uxtb	r3, r3
 800383a:	2b00      	cmp	r3, #0
 800383c:	d106      	bne.n	800384c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f7fe fcaa 	bl	80021a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2224      	movs	r2, #36	; 0x24
 8003850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f022 0201 	bic.w	r2, r2, #1
 8003862:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003872:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003882:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003884:	f003 f84e 	bl	8006924 <HAL_RCC_GetPCLK1Freq>
 8003888:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	4a81      	ldr	r2, [pc, #516]	; (8003a94 <HAL_I2C_Init+0x274>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d807      	bhi.n	80038a4 <HAL_I2C_Init+0x84>
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	4a80      	ldr	r2, [pc, #512]	; (8003a98 <HAL_I2C_Init+0x278>)
 8003898:	4293      	cmp	r3, r2
 800389a:	bf94      	ite	ls
 800389c:	2301      	movls	r3, #1
 800389e:	2300      	movhi	r3, #0
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	e006      	b.n	80038b2 <HAL_I2C_Init+0x92>
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	4a7d      	ldr	r2, [pc, #500]	; (8003a9c <HAL_I2C_Init+0x27c>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	bf94      	ite	ls
 80038ac:	2301      	movls	r3, #1
 80038ae:	2300      	movhi	r3, #0
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d001      	beq.n	80038ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e0e7      	b.n	8003a8a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	4a78      	ldr	r2, [pc, #480]	; (8003aa0 <HAL_I2C_Init+0x280>)
 80038be:	fba2 2303 	umull	r2, r3, r2, r3
 80038c2:	0c9b      	lsrs	r3, r3, #18
 80038c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68ba      	ldr	r2, [r7, #8]
 80038d6:	430a      	orrs	r2, r1
 80038d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	6a1b      	ldr	r3, [r3, #32]
 80038e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	4a6a      	ldr	r2, [pc, #424]	; (8003a94 <HAL_I2C_Init+0x274>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d802      	bhi.n	80038f4 <HAL_I2C_Init+0xd4>
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	3301      	adds	r3, #1
 80038f2:	e009      	b.n	8003908 <HAL_I2C_Init+0xe8>
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80038fa:	fb02 f303 	mul.w	r3, r2, r3
 80038fe:	4a69      	ldr	r2, [pc, #420]	; (8003aa4 <HAL_I2C_Init+0x284>)
 8003900:	fba2 2303 	umull	r2, r3, r2, r3
 8003904:	099b      	lsrs	r3, r3, #6
 8003906:	3301      	adds	r3, #1
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	6812      	ldr	r2, [r2, #0]
 800390c:	430b      	orrs	r3, r1
 800390e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	69db      	ldr	r3, [r3, #28]
 8003916:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800391a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	495c      	ldr	r1, [pc, #368]	; (8003a94 <HAL_I2C_Init+0x274>)
 8003924:	428b      	cmp	r3, r1
 8003926:	d819      	bhi.n	800395c <HAL_I2C_Init+0x13c>
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	1e59      	subs	r1, r3, #1
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	005b      	lsls	r3, r3, #1
 8003932:	fbb1 f3f3 	udiv	r3, r1, r3
 8003936:	1c59      	adds	r1, r3, #1
 8003938:	f640 73fc 	movw	r3, #4092	; 0xffc
 800393c:	400b      	ands	r3, r1
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00a      	beq.n	8003958 <HAL_I2C_Init+0x138>
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	1e59      	subs	r1, r3, #1
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	005b      	lsls	r3, r3, #1
 800394c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003950:	3301      	adds	r3, #1
 8003952:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003956:	e051      	b.n	80039fc <HAL_I2C_Init+0x1dc>
 8003958:	2304      	movs	r3, #4
 800395a:	e04f      	b.n	80039fc <HAL_I2C_Init+0x1dc>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d111      	bne.n	8003988 <HAL_I2C_Init+0x168>
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	1e58      	subs	r0, r3, #1
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6859      	ldr	r1, [r3, #4]
 800396c:	460b      	mov	r3, r1
 800396e:	005b      	lsls	r3, r3, #1
 8003970:	440b      	add	r3, r1
 8003972:	fbb0 f3f3 	udiv	r3, r0, r3
 8003976:	3301      	adds	r3, #1
 8003978:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800397c:	2b00      	cmp	r3, #0
 800397e:	bf0c      	ite	eq
 8003980:	2301      	moveq	r3, #1
 8003982:	2300      	movne	r3, #0
 8003984:	b2db      	uxtb	r3, r3
 8003986:	e012      	b.n	80039ae <HAL_I2C_Init+0x18e>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	1e58      	subs	r0, r3, #1
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6859      	ldr	r1, [r3, #4]
 8003990:	460b      	mov	r3, r1
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	440b      	add	r3, r1
 8003996:	0099      	lsls	r1, r3, #2
 8003998:	440b      	add	r3, r1
 800399a:	fbb0 f3f3 	udiv	r3, r0, r3
 800399e:	3301      	adds	r3, #1
 80039a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	bf0c      	ite	eq
 80039a8:	2301      	moveq	r3, #1
 80039aa:	2300      	movne	r3, #0
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d001      	beq.n	80039b6 <HAL_I2C_Init+0x196>
 80039b2:	2301      	movs	r3, #1
 80039b4:	e022      	b.n	80039fc <HAL_I2C_Init+0x1dc>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d10e      	bne.n	80039dc <HAL_I2C_Init+0x1bc>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	1e58      	subs	r0, r3, #1
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6859      	ldr	r1, [r3, #4]
 80039c6:	460b      	mov	r3, r1
 80039c8:	005b      	lsls	r3, r3, #1
 80039ca:	440b      	add	r3, r1
 80039cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80039d0:	3301      	adds	r3, #1
 80039d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039da:	e00f      	b.n	80039fc <HAL_I2C_Init+0x1dc>
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	1e58      	subs	r0, r3, #1
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6859      	ldr	r1, [r3, #4]
 80039e4:	460b      	mov	r3, r1
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	440b      	add	r3, r1
 80039ea:	0099      	lsls	r1, r3, #2
 80039ec:	440b      	add	r3, r1
 80039ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80039f2:	3301      	adds	r3, #1
 80039f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80039fc:	6879      	ldr	r1, [r7, #4]
 80039fe:	6809      	ldr	r1, [r1, #0]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	69da      	ldr	r2, [r3, #28]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a1b      	ldr	r3, [r3, #32]
 8003a16:	431a      	orrs	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	430a      	orrs	r2, r1
 8003a1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003a2a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	6911      	ldr	r1, [r2, #16]
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	68d2      	ldr	r2, [r2, #12]
 8003a36:	4311      	orrs	r1, r2
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	6812      	ldr	r2, [r2, #0]
 8003a3c:	430b      	orrs	r3, r1
 8003a3e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	695a      	ldr	r2, [r3, #20]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	699b      	ldr	r3, [r3, #24]
 8003a52:	431a      	orrs	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	430a      	orrs	r2, r1
 8003a5a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f042 0201 	orr.w	r2, r2, #1
 8003a6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2220      	movs	r2, #32
 8003a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3710      	adds	r7, #16
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	000186a0 	.word	0x000186a0
 8003a98:	001e847f 	.word	0x001e847f
 8003a9c:	003d08ff 	.word	0x003d08ff
 8003aa0:	431bde83 	.word	0x431bde83
 8003aa4:	10624dd3 	.word	0x10624dd3

08003aa8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b088      	sub	sp, #32
 8003aac:	af02      	add	r7, sp, #8
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	4608      	mov	r0, r1
 8003ab2:	4611      	mov	r1, r2
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	817b      	strh	r3, [r7, #10]
 8003aba:	460b      	mov	r3, r1
 8003abc:	813b      	strh	r3, [r7, #8]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ac2:	f7fe fe05 	bl	80026d0 <HAL_GetTick>
 8003ac6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	2b20      	cmp	r3, #32
 8003ad2:	f040 80d9 	bne.w	8003c88 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	9300      	str	r3, [sp, #0]
 8003ada:	2319      	movs	r3, #25
 8003adc:	2201      	movs	r2, #1
 8003ade:	496d      	ldr	r1, [pc, #436]	; (8003c94 <HAL_I2C_Mem_Write+0x1ec>)
 8003ae0:	68f8      	ldr	r0, [r7, #12]
 8003ae2:	f000 fcc1 	bl	8004468 <I2C_WaitOnFlagUntilTimeout>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d001      	beq.n	8003af0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003aec:	2302      	movs	r3, #2
 8003aee:	e0cc      	b.n	8003c8a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d101      	bne.n	8003afe <HAL_I2C_Mem_Write+0x56>
 8003afa:	2302      	movs	r3, #2
 8003afc:	e0c5      	b.n	8003c8a <HAL_I2C_Mem_Write+0x1e2>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2201      	movs	r2, #1
 8003b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0301 	and.w	r3, r3, #1
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d007      	beq.n	8003b24 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f042 0201 	orr.w	r2, r2, #1
 8003b22:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b32:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2221      	movs	r2, #33	; 0x21
 8003b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2240      	movs	r2, #64	; 0x40
 8003b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2200      	movs	r2, #0
 8003b48:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6a3a      	ldr	r2, [r7, #32]
 8003b4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003b54:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b5a:	b29a      	uxth	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	4a4d      	ldr	r2, [pc, #308]	; (8003c98 <HAL_I2C_Mem_Write+0x1f0>)
 8003b64:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b66:	88f8      	ldrh	r0, [r7, #6]
 8003b68:	893a      	ldrh	r2, [r7, #8]
 8003b6a:	8979      	ldrh	r1, [r7, #10]
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	9301      	str	r3, [sp, #4]
 8003b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b72:	9300      	str	r3, [sp, #0]
 8003b74:	4603      	mov	r3, r0
 8003b76:	68f8      	ldr	r0, [r7, #12]
 8003b78:	f000 faf8 	bl	800416c <I2C_RequestMemoryWrite>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d052      	beq.n	8003c28 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e081      	b.n	8003c8a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b86:	697a      	ldr	r2, [r7, #20]
 8003b88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b8a:	68f8      	ldr	r0, [r7, #12]
 8003b8c:	f000 fd42 	bl	8004614 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00d      	beq.n	8003bb2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9a:	2b04      	cmp	r3, #4
 8003b9c:	d107      	bne.n	8003bae <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e06b      	b.n	8003c8a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb6:	781a      	ldrb	r2, [r3, #0]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc2:	1c5a      	adds	r2, r3, #1
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bcc:	3b01      	subs	r3, #1
 8003bce:	b29a      	uxth	r2, r3
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	b29a      	uxth	r2, r3
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	695b      	ldr	r3, [r3, #20]
 8003be8:	f003 0304 	and.w	r3, r3, #4
 8003bec:	2b04      	cmp	r3, #4
 8003bee:	d11b      	bne.n	8003c28 <HAL_I2C_Mem_Write+0x180>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d017      	beq.n	8003c28 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfc:	781a      	ldrb	r2, [r3, #0]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c08:	1c5a      	adds	r2, r3, #1
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c12:	3b01      	subs	r3, #1
 8003c14:	b29a      	uxth	r2, r3
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	3b01      	subs	r3, #1
 8003c22:	b29a      	uxth	r2, r3
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d1aa      	bne.n	8003b86 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c30:	697a      	ldr	r2, [r7, #20]
 8003c32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c34:	68f8      	ldr	r0, [r7, #12]
 8003c36:	f000 fd2e 	bl	8004696 <I2C_WaitOnBTFFlagUntilTimeout>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d00d      	beq.n	8003c5c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c44:	2b04      	cmp	r3, #4
 8003c46:	d107      	bne.n	8003c58 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c56:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e016      	b.n	8003c8a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2220      	movs	r2, #32
 8003c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2200      	movs	r2, #0
 8003c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003c84:	2300      	movs	r3, #0
 8003c86:	e000      	b.n	8003c8a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003c88:	2302      	movs	r3, #2
  }
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3718      	adds	r7, #24
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	00100002 	.word	0x00100002
 8003c98:	ffff0000 	.word	0xffff0000

08003c9c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b08c      	sub	sp, #48	; 0x30
 8003ca0:	af02      	add	r7, sp, #8
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	4608      	mov	r0, r1
 8003ca6:	4611      	mov	r1, r2
 8003ca8:	461a      	mov	r2, r3
 8003caa:	4603      	mov	r3, r0
 8003cac:	817b      	strh	r3, [r7, #10]
 8003cae:	460b      	mov	r3, r1
 8003cb0:	813b      	strh	r3, [r7, #8]
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003cba:	f7fe fd09 	bl	80026d0 <HAL_GetTick>
 8003cbe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	2b20      	cmp	r3, #32
 8003cca:	f040 8244 	bne.w	8004156 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd0:	9300      	str	r3, [sp, #0]
 8003cd2:	2319      	movs	r3, #25
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	4982      	ldr	r1, [pc, #520]	; (8003ee0 <HAL_I2C_Mem_Read+0x244>)
 8003cd8:	68f8      	ldr	r0, [r7, #12]
 8003cda:	f000 fbc5 	bl	8004468 <I2C_WaitOnFlagUntilTimeout>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d001      	beq.n	8003ce8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003ce4:	2302      	movs	r3, #2
 8003ce6:	e237      	b.n	8004158 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d101      	bne.n	8003cf6 <HAL_I2C_Mem_Read+0x5a>
 8003cf2:	2302      	movs	r3, #2
 8003cf4:	e230      	b.n	8004158 <HAL_I2C_Mem_Read+0x4bc>
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0301 	and.w	r3, r3, #1
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d007      	beq.n	8003d1c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f042 0201 	orr.w	r2, r2, #1
 8003d1a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d2a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2222      	movs	r2, #34	; 0x22
 8003d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2240      	movs	r2, #64	; 0x40
 8003d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d46:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003d4c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d52:	b29a      	uxth	r2, r3
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	4a62      	ldr	r2, [pc, #392]	; (8003ee4 <HAL_I2C_Mem_Read+0x248>)
 8003d5c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d5e:	88f8      	ldrh	r0, [r7, #6]
 8003d60:	893a      	ldrh	r2, [r7, #8]
 8003d62:	8979      	ldrh	r1, [r7, #10]
 8003d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d66:	9301      	str	r3, [sp, #4]
 8003d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d6a:	9300      	str	r3, [sp, #0]
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	68f8      	ldr	r0, [r7, #12]
 8003d70:	f000 fa92 	bl	8004298 <I2C_RequestMemoryRead>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d001      	beq.n	8003d7e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e1ec      	b.n	8004158 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d113      	bne.n	8003dae <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d86:	2300      	movs	r3, #0
 8003d88:	61fb      	str	r3, [r7, #28]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	695b      	ldr	r3, [r3, #20]
 8003d90:	61fb      	str	r3, [r7, #28]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	699b      	ldr	r3, [r3, #24]
 8003d98:	61fb      	str	r3, [r7, #28]
 8003d9a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003daa:	601a      	str	r2, [r3, #0]
 8003dac:	e1c0      	b.n	8004130 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d11e      	bne.n	8003df4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dc4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003dc6:	b672      	cpsid	i
}
 8003dc8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dca:	2300      	movs	r3, #0
 8003dcc:	61bb      	str	r3, [r7, #24]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	695b      	ldr	r3, [r3, #20]
 8003dd4:	61bb      	str	r3, [r7, #24]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	699b      	ldr	r3, [r3, #24]
 8003ddc:	61bb      	str	r3, [r7, #24]
 8003dde:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003df0:	b662      	cpsie	i
}
 8003df2:	e035      	b.n	8003e60 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d11e      	bne.n	8003e3a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e0a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003e0c:	b672      	cpsid	i
}
 8003e0e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e10:	2300      	movs	r3, #0
 8003e12:	617b      	str	r3, [r7, #20]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	695b      	ldr	r3, [r3, #20]
 8003e1a:	617b      	str	r3, [r7, #20]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	699b      	ldr	r3, [r3, #24]
 8003e22:	617b      	str	r3, [r7, #20]
 8003e24:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e34:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003e36:	b662      	cpsie	i
}
 8003e38:	e012      	b.n	8003e60 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e48:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	613b      	str	r3, [r7, #16]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	695b      	ldr	r3, [r3, #20]
 8003e54:	613b      	str	r3, [r7, #16]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	699b      	ldr	r3, [r3, #24]
 8003e5c:	613b      	str	r3, [r7, #16]
 8003e5e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003e60:	e166      	b.n	8004130 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e66:	2b03      	cmp	r3, #3
 8003e68:	f200 811f 	bhi.w	80040aa <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d123      	bne.n	8003ebc <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e76:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003e78:	68f8      	ldr	r0, [r7, #12]
 8003e7a:	f000 fc4d 	bl	8004718 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d001      	beq.n	8003e88 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e167      	b.n	8004158 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	691a      	ldr	r2, [r3, #16]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e92:	b2d2      	uxtb	r2, r2
 8003e94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9a:	1c5a      	adds	r2, r3, #1
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ea4:	3b01      	subs	r3, #1
 8003ea6:	b29a      	uxth	r2, r3
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	3b01      	subs	r3, #1
 8003eb4:	b29a      	uxth	r2, r3
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003eba:	e139      	b.n	8004130 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	d152      	bne.n	8003f6a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec6:	9300      	str	r3, [sp, #0]
 8003ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eca:	2200      	movs	r2, #0
 8003ecc:	4906      	ldr	r1, [pc, #24]	; (8003ee8 <HAL_I2C_Mem_Read+0x24c>)
 8003ece:	68f8      	ldr	r0, [r7, #12]
 8003ed0:	f000 faca 	bl	8004468 <I2C_WaitOnFlagUntilTimeout>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d008      	beq.n	8003eec <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e13c      	b.n	8004158 <HAL_I2C_Mem_Read+0x4bc>
 8003ede:	bf00      	nop
 8003ee0:	00100002 	.word	0x00100002
 8003ee4:	ffff0000 	.word	0xffff0000
 8003ee8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003eec:	b672      	cpsid	i
}
 8003eee:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003efe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	691a      	ldr	r2, [r3, #16]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0a:	b2d2      	uxtb	r2, r2
 8003f0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f12:	1c5a      	adds	r2, r3, #1
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f1c:	3b01      	subs	r3, #1
 8003f1e:	b29a      	uxth	r2, r3
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	b29a      	uxth	r2, r3
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003f32:	b662      	cpsie	i
}
 8003f34:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	691a      	ldr	r2, [r3, #16]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f40:	b2d2      	uxtb	r2, r2
 8003f42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f48:	1c5a      	adds	r2, r3, #1
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f52:	3b01      	subs	r3, #1
 8003f54:	b29a      	uxth	r2, r3
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	3b01      	subs	r3, #1
 8003f62:	b29a      	uxth	r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f68:	e0e2      	b.n	8004130 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6c:	9300      	str	r3, [sp, #0]
 8003f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f70:	2200      	movs	r2, #0
 8003f72:	497b      	ldr	r1, [pc, #492]	; (8004160 <HAL_I2C_Mem_Read+0x4c4>)
 8003f74:	68f8      	ldr	r0, [r7, #12]
 8003f76:	f000 fa77 	bl	8004468 <I2C_WaitOnFlagUntilTimeout>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d001      	beq.n	8003f84 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e0e9      	b.n	8004158 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f92:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003f94:	b672      	cpsid	i
}
 8003f96:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	691a      	ldr	r2, [r3, #16]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa2:	b2d2      	uxtb	r2, r2
 8003fa4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003faa:	1c5a      	adds	r2, r3, #1
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	b29a      	uxth	r2, r3
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003fca:	4b66      	ldr	r3, [pc, #408]	; (8004164 <HAL_I2C_Mem_Read+0x4c8>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	08db      	lsrs	r3, r3, #3
 8003fd0:	4a65      	ldr	r2, [pc, #404]	; (8004168 <HAL_I2C_Mem_Read+0x4cc>)
 8003fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd6:	0a1a      	lsrs	r2, r3, #8
 8003fd8:	4613      	mov	r3, r2
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	4413      	add	r3, r2
 8003fde:	00da      	lsls	r2, r3, #3
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003fe4:	6a3b      	ldr	r3, [r7, #32]
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003fea:	6a3b      	ldr	r3, [r7, #32]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d118      	bne.n	8004022 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2220      	movs	r2, #32
 8003ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2200      	movs	r2, #0
 8004002:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400a:	f043 0220 	orr.w	r2, r3, #32
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004012:	b662      	cpsie	i
}
 8004014:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e09a      	b.n	8004158 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	695b      	ldr	r3, [r3, #20]
 8004028:	f003 0304 	and.w	r3, r3, #4
 800402c:	2b04      	cmp	r3, #4
 800402e:	d1d9      	bne.n	8003fe4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800403e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	691a      	ldr	r2, [r3, #16]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404a:	b2d2      	uxtb	r2, r2
 800404c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004052:	1c5a      	adds	r2, r3, #1
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800405c:	3b01      	subs	r3, #1
 800405e:	b29a      	uxth	r2, r3
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004068:	b29b      	uxth	r3, r3
 800406a:	3b01      	subs	r3, #1
 800406c:	b29a      	uxth	r2, r3
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004072:	b662      	cpsie	i
}
 8004074:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	691a      	ldr	r2, [r3, #16]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004080:	b2d2      	uxtb	r2, r2
 8004082:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004088:	1c5a      	adds	r2, r3, #1
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004092:	3b01      	subs	r3, #1
 8004094:	b29a      	uxth	r2, r3
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800409e:	b29b      	uxth	r3, r3
 80040a0:	3b01      	subs	r3, #1
 80040a2:	b29a      	uxth	r2, r3
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040a8:	e042      	b.n	8004130 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80040ae:	68f8      	ldr	r0, [r7, #12]
 80040b0:	f000 fb32 	bl	8004718 <I2C_WaitOnRXNEFlagUntilTimeout>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d001      	beq.n	80040be <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e04c      	b.n	8004158 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	691a      	ldr	r2, [r3, #16]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c8:	b2d2      	uxtb	r2, r2
 80040ca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d0:	1c5a      	adds	r2, r3, #1
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040da:	3b01      	subs	r3, #1
 80040dc:	b29a      	uxth	r2, r3
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	3b01      	subs	r3, #1
 80040ea:	b29a      	uxth	r2, r3
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	695b      	ldr	r3, [r3, #20]
 80040f6:	f003 0304 	and.w	r3, r3, #4
 80040fa:	2b04      	cmp	r3, #4
 80040fc:	d118      	bne.n	8004130 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	691a      	ldr	r2, [r3, #16]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004108:	b2d2      	uxtb	r2, r2
 800410a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004110:	1c5a      	adds	r2, r3, #1
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800411a:	3b01      	subs	r3, #1
 800411c:	b29a      	uxth	r2, r3
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004126:	b29b      	uxth	r3, r3
 8004128:	3b01      	subs	r3, #1
 800412a:	b29a      	uxth	r2, r3
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004134:	2b00      	cmp	r3, #0
 8004136:	f47f ae94 	bne.w	8003e62 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2220      	movs	r2, #32
 800413e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2200      	movs	r2, #0
 8004146:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004152:	2300      	movs	r3, #0
 8004154:	e000      	b.n	8004158 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8004156:	2302      	movs	r3, #2
  }
}
 8004158:	4618      	mov	r0, r3
 800415a:	3728      	adds	r7, #40	; 0x28
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}
 8004160:	00010004 	.word	0x00010004
 8004164:	2000009c 	.word	0x2000009c
 8004168:	14f8b589 	.word	0x14f8b589

0800416c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b088      	sub	sp, #32
 8004170:	af02      	add	r7, sp, #8
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	4608      	mov	r0, r1
 8004176:	4611      	mov	r1, r2
 8004178:	461a      	mov	r2, r3
 800417a:	4603      	mov	r3, r0
 800417c:	817b      	strh	r3, [r7, #10]
 800417e:	460b      	mov	r3, r1
 8004180:	813b      	strh	r3, [r7, #8]
 8004182:	4613      	mov	r3, r2
 8004184:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004194:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004198:	9300      	str	r3, [sp, #0]
 800419a:	6a3b      	ldr	r3, [r7, #32]
 800419c:	2200      	movs	r2, #0
 800419e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80041a2:	68f8      	ldr	r0, [r7, #12]
 80041a4:	f000 f960 	bl	8004468 <I2C_WaitOnFlagUntilTimeout>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d00d      	beq.n	80041ca <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041bc:	d103      	bne.n	80041c6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e05f      	b.n	800428a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80041ca:	897b      	ldrh	r3, [r7, #10]
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	461a      	mov	r2, r3
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80041d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041dc:	6a3a      	ldr	r2, [r7, #32]
 80041de:	492d      	ldr	r1, [pc, #180]	; (8004294 <I2C_RequestMemoryWrite+0x128>)
 80041e0:	68f8      	ldr	r0, [r7, #12]
 80041e2:	f000 f998 	bl	8004516 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d001      	beq.n	80041f0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e04c      	b.n	800428a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041f0:	2300      	movs	r3, #0
 80041f2:	617b      	str	r3, [r7, #20]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	695b      	ldr	r3, [r3, #20]
 80041fa:	617b      	str	r3, [r7, #20]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	699b      	ldr	r3, [r3, #24]
 8004202:	617b      	str	r3, [r7, #20]
 8004204:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004206:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004208:	6a39      	ldr	r1, [r7, #32]
 800420a:	68f8      	ldr	r0, [r7, #12]
 800420c:	f000 fa02 	bl	8004614 <I2C_WaitOnTXEFlagUntilTimeout>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00d      	beq.n	8004232 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421a:	2b04      	cmp	r3, #4
 800421c:	d107      	bne.n	800422e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800422c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e02b      	b.n	800428a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004232:	88fb      	ldrh	r3, [r7, #6]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d105      	bne.n	8004244 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004238:	893b      	ldrh	r3, [r7, #8]
 800423a:	b2da      	uxtb	r2, r3
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	611a      	str	r2, [r3, #16]
 8004242:	e021      	b.n	8004288 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004244:	893b      	ldrh	r3, [r7, #8]
 8004246:	0a1b      	lsrs	r3, r3, #8
 8004248:	b29b      	uxth	r3, r3
 800424a:	b2da      	uxtb	r2, r3
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004252:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004254:	6a39      	ldr	r1, [r7, #32]
 8004256:	68f8      	ldr	r0, [r7, #12]
 8004258:	f000 f9dc 	bl	8004614 <I2C_WaitOnTXEFlagUntilTimeout>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d00d      	beq.n	800427e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004266:	2b04      	cmp	r3, #4
 8004268:	d107      	bne.n	800427a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004278:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e005      	b.n	800428a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800427e:	893b      	ldrh	r3, [r7, #8]
 8004280:	b2da      	uxtb	r2, r3
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	3718      	adds	r7, #24
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	00010002 	.word	0x00010002

08004298 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b088      	sub	sp, #32
 800429c:	af02      	add	r7, sp, #8
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	4608      	mov	r0, r1
 80042a2:	4611      	mov	r1, r2
 80042a4:	461a      	mov	r2, r3
 80042a6:	4603      	mov	r3, r0
 80042a8:	817b      	strh	r3, [r7, #10]
 80042aa:	460b      	mov	r3, r1
 80042ac:	813b      	strh	r3, [r7, #8]
 80042ae:	4613      	mov	r3, r2
 80042b0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80042c0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042d0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d4:	9300      	str	r3, [sp, #0]
 80042d6:	6a3b      	ldr	r3, [r7, #32]
 80042d8:	2200      	movs	r2, #0
 80042da:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80042de:	68f8      	ldr	r0, [r7, #12]
 80042e0:	f000 f8c2 	bl	8004468 <I2C_WaitOnFlagUntilTimeout>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00d      	beq.n	8004306 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042f8:	d103      	bne.n	8004302 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004300:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e0aa      	b.n	800445c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004306:	897b      	ldrh	r3, [r7, #10]
 8004308:	b2db      	uxtb	r3, r3
 800430a:	461a      	mov	r2, r3
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004314:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004318:	6a3a      	ldr	r2, [r7, #32]
 800431a:	4952      	ldr	r1, [pc, #328]	; (8004464 <I2C_RequestMemoryRead+0x1cc>)
 800431c:	68f8      	ldr	r0, [r7, #12]
 800431e:	f000 f8fa 	bl	8004516 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004322:	4603      	mov	r3, r0
 8004324:	2b00      	cmp	r3, #0
 8004326:	d001      	beq.n	800432c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e097      	b.n	800445c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800432c:	2300      	movs	r3, #0
 800432e:	617b      	str	r3, [r7, #20]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	695b      	ldr	r3, [r3, #20]
 8004336:	617b      	str	r3, [r7, #20]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	617b      	str	r3, [r7, #20]
 8004340:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004342:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004344:	6a39      	ldr	r1, [r7, #32]
 8004346:	68f8      	ldr	r0, [r7, #12]
 8004348:	f000 f964 	bl	8004614 <I2C_WaitOnTXEFlagUntilTimeout>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d00d      	beq.n	800436e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004356:	2b04      	cmp	r3, #4
 8004358:	d107      	bne.n	800436a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004368:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e076      	b.n	800445c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800436e:	88fb      	ldrh	r3, [r7, #6]
 8004370:	2b01      	cmp	r3, #1
 8004372:	d105      	bne.n	8004380 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004374:	893b      	ldrh	r3, [r7, #8]
 8004376:	b2da      	uxtb	r2, r3
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	611a      	str	r2, [r3, #16]
 800437e:	e021      	b.n	80043c4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004380:	893b      	ldrh	r3, [r7, #8]
 8004382:	0a1b      	lsrs	r3, r3, #8
 8004384:	b29b      	uxth	r3, r3
 8004386:	b2da      	uxtb	r2, r3
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800438e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004390:	6a39      	ldr	r1, [r7, #32]
 8004392:	68f8      	ldr	r0, [r7, #12]
 8004394:	f000 f93e 	bl	8004614 <I2C_WaitOnTXEFlagUntilTimeout>
 8004398:	4603      	mov	r3, r0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d00d      	beq.n	80043ba <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a2:	2b04      	cmp	r3, #4
 80043a4:	d107      	bne.n	80043b6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043b4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e050      	b.n	800445c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80043ba:	893b      	ldrh	r3, [r7, #8]
 80043bc:	b2da      	uxtb	r2, r3
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043c6:	6a39      	ldr	r1, [r7, #32]
 80043c8:	68f8      	ldr	r0, [r7, #12]
 80043ca:	f000 f923 	bl	8004614 <I2C_WaitOnTXEFlagUntilTimeout>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d00d      	beq.n	80043f0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d8:	2b04      	cmp	r3, #4
 80043da:	d107      	bne.n	80043ec <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043ea:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e035      	b.n	800445c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043fe:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004402:	9300      	str	r3, [sp, #0]
 8004404:	6a3b      	ldr	r3, [r7, #32]
 8004406:	2200      	movs	r2, #0
 8004408:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800440c:	68f8      	ldr	r0, [r7, #12]
 800440e:	f000 f82b 	bl	8004468 <I2C_WaitOnFlagUntilTimeout>
 8004412:	4603      	mov	r3, r0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d00d      	beq.n	8004434 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004422:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004426:	d103      	bne.n	8004430 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800442e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004430:	2303      	movs	r3, #3
 8004432:	e013      	b.n	800445c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004434:	897b      	ldrh	r3, [r7, #10]
 8004436:	b2db      	uxtb	r3, r3
 8004438:	f043 0301 	orr.w	r3, r3, #1
 800443c:	b2da      	uxtb	r2, r3
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004446:	6a3a      	ldr	r2, [r7, #32]
 8004448:	4906      	ldr	r1, [pc, #24]	; (8004464 <I2C_RequestMemoryRead+0x1cc>)
 800444a:	68f8      	ldr	r0, [r7, #12]
 800444c:	f000 f863 	bl	8004516 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d001      	beq.n	800445a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e000      	b.n	800445c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800445a:	2300      	movs	r3, #0
}
 800445c:	4618      	mov	r0, r3
 800445e:	3718      	adds	r7, #24
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}
 8004464:	00010002 	.word	0x00010002

08004468 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	603b      	str	r3, [r7, #0]
 8004474:	4613      	mov	r3, r2
 8004476:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004478:	e025      	b.n	80044c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004480:	d021      	beq.n	80044c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004482:	f7fe f925 	bl	80026d0 <HAL_GetTick>
 8004486:	4602      	mov	r2, r0
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	683a      	ldr	r2, [r7, #0]
 800448e:	429a      	cmp	r2, r3
 8004490:	d302      	bcc.n	8004498 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d116      	bne.n	80044c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2200      	movs	r2, #0
 800449c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2220      	movs	r2, #32
 80044a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b2:	f043 0220 	orr.w	r2, r3, #32
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2200      	movs	r2, #0
 80044be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e023      	b.n	800450e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	0c1b      	lsrs	r3, r3, #16
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d10d      	bne.n	80044ec <I2C_WaitOnFlagUntilTimeout+0x84>
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	695b      	ldr	r3, [r3, #20]
 80044d6:	43da      	mvns	r2, r3
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	4013      	ands	r3, r2
 80044dc:	b29b      	uxth	r3, r3
 80044de:	2b00      	cmp	r3, #0
 80044e0:	bf0c      	ite	eq
 80044e2:	2301      	moveq	r3, #1
 80044e4:	2300      	movne	r3, #0
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	461a      	mov	r2, r3
 80044ea:	e00c      	b.n	8004506 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	699b      	ldr	r3, [r3, #24]
 80044f2:	43da      	mvns	r2, r3
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	4013      	ands	r3, r2
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	bf0c      	ite	eq
 80044fe:	2301      	moveq	r3, #1
 8004500:	2300      	movne	r3, #0
 8004502:	b2db      	uxtb	r3, r3
 8004504:	461a      	mov	r2, r3
 8004506:	79fb      	ldrb	r3, [r7, #7]
 8004508:	429a      	cmp	r2, r3
 800450a:	d0b6      	beq.n	800447a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	3710      	adds	r7, #16
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}

08004516 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004516:	b580      	push	{r7, lr}
 8004518:	b084      	sub	sp, #16
 800451a:	af00      	add	r7, sp, #0
 800451c:	60f8      	str	r0, [r7, #12]
 800451e:	60b9      	str	r1, [r7, #8]
 8004520:	607a      	str	r2, [r7, #4]
 8004522:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004524:	e051      	b.n	80045ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	695b      	ldr	r3, [r3, #20]
 800452c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004530:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004534:	d123      	bne.n	800457e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004544:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800454e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2200      	movs	r2, #0
 8004554:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2220      	movs	r2, #32
 800455a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456a:	f043 0204 	orr.w	r2, r3, #4
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2200      	movs	r2, #0
 8004576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e046      	b.n	800460c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004584:	d021      	beq.n	80045ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004586:	f7fe f8a3 	bl	80026d0 <HAL_GetTick>
 800458a:	4602      	mov	r2, r0
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	429a      	cmp	r2, r3
 8004594:	d302      	bcc.n	800459c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d116      	bne.n	80045ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2200      	movs	r2, #0
 80045a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2220      	movs	r2, #32
 80045a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b6:	f043 0220 	orr.w	r2, r3, #32
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e020      	b.n	800460c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	0c1b      	lsrs	r3, r3, #16
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d10c      	bne.n	80045ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	695b      	ldr	r3, [r3, #20]
 80045da:	43da      	mvns	r2, r3
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	4013      	ands	r3, r2
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	bf14      	ite	ne
 80045e6:	2301      	movne	r3, #1
 80045e8:	2300      	moveq	r3, #0
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	e00b      	b.n	8004606 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	699b      	ldr	r3, [r3, #24]
 80045f4:	43da      	mvns	r2, r3
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	4013      	ands	r3, r2
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	bf14      	ite	ne
 8004600:	2301      	movne	r3, #1
 8004602:	2300      	moveq	r3, #0
 8004604:	b2db      	uxtb	r3, r3
 8004606:	2b00      	cmp	r3, #0
 8004608:	d18d      	bne.n	8004526 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800460a:	2300      	movs	r3, #0
}
 800460c:	4618      	mov	r0, r3
 800460e:	3710      	adds	r7, #16
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004620:	e02d      	b.n	800467e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004622:	68f8      	ldr	r0, [r7, #12]
 8004624:	f000 f8ce 	bl	80047c4 <I2C_IsAcknowledgeFailed>
 8004628:	4603      	mov	r3, r0
 800462a:	2b00      	cmp	r3, #0
 800462c:	d001      	beq.n	8004632 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e02d      	b.n	800468e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004638:	d021      	beq.n	800467e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800463a:	f7fe f849 	bl	80026d0 <HAL_GetTick>
 800463e:	4602      	mov	r2, r0
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	68ba      	ldr	r2, [r7, #8]
 8004646:	429a      	cmp	r2, r3
 8004648:	d302      	bcc.n	8004650 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d116      	bne.n	800467e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2200      	movs	r2, #0
 8004654:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2220      	movs	r2, #32
 800465a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2200      	movs	r2, #0
 8004662:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466a:	f043 0220 	orr.w	r2, r3, #32
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2200      	movs	r2, #0
 8004676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e007      	b.n	800468e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	695b      	ldr	r3, [r3, #20]
 8004684:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004688:	2b80      	cmp	r3, #128	; 0x80
 800468a:	d1ca      	bne.n	8004622 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	3710      	adds	r7, #16
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}

08004696 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004696:	b580      	push	{r7, lr}
 8004698:	b084      	sub	sp, #16
 800469a:	af00      	add	r7, sp, #0
 800469c:	60f8      	str	r0, [r7, #12]
 800469e:	60b9      	str	r1, [r7, #8]
 80046a0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80046a2:	e02d      	b.n	8004700 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80046a4:	68f8      	ldr	r0, [r7, #12]
 80046a6:	f000 f88d 	bl	80047c4 <I2C_IsAcknowledgeFailed>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d001      	beq.n	80046b4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e02d      	b.n	8004710 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046ba:	d021      	beq.n	8004700 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046bc:	f7fe f808 	bl	80026d0 <HAL_GetTick>
 80046c0:	4602      	mov	r2, r0
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	1ad3      	subs	r3, r2, r3
 80046c6:	68ba      	ldr	r2, [r7, #8]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d302      	bcc.n	80046d2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d116      	bne.n	8004700 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2200      	movs	r2, #0
 80046d6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2220      	movs	r2, #32
 80046dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ec:	f043 0220 	orr.w	r2, r3, #32
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e007      	b.n	8004710 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	695b      	ldr	r3, [r3, #20]
 8004706:	f003 0304 	and.w	r3, r3, #4
 800470a:	2b04      	cmp	r3, #4
 800470c:	d1ca      	bne.n	80046a4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800470e:	2300      	movs	r3, #0
}
 8004710:	4618      	mov	r0, r3
 8004712:	3710      	adds	r7, #16
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}

08004718 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b084      	sub	sp, #16
 800471c:	af00      	add	r7, sp, #0
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004724:	e042      	b.n	80047ac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	695b      	ldr	r3, [r3, #20]
 800472c:	f003 0310 	and.w	r3, r3, #16
 8004730:	2b10      	cmp	r3, #16
 8004732:	d119      	bne.n	8004768 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f06f 0210 	mvn.w	r2, #16
 800473c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2200      	movs	r2, #0
 8004742:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2220      	movs	r2, #32
 8004748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2200      	movs	r2, #0
 8004750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2200      	movs	r2, #0
 8004760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e029      	b.n	80047bc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004768:	f7fd ffb2 	bl	80026d0 <HAL_GetTick>
 800476c:	4602      	mov	r2, r0
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	68ba      	ldr	r2, [r7, #8]
 8004774:	429a      	cmp	r2, r3
 8004776:	d302      	bcc.n	800477e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d116      	bne.n	80047ac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2200      	movs	r2, #0
 8004782:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2220      	movs	r2, #32
 8004788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2200      	movs	r2, #0
 8004790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004798:	f043 0220 	orr.w	r2, r3, #32
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2200      	movs	r2, #0
 80047a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e007      	b.n	80047bc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	695b      	ldr	r3, [r3, #20]
 80047b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047b6:	2b40      	cmp	r3, #64	; 0x40
 80047b8:	d1b5      	bne.n	8004726 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80047ba:	2300      	movs	r3, #0
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3710      	adds	r7, #16
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	695b      	ldr	r3, [r3, #20]
 80047d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047da:	d11b      	bne.n	8004814 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80047e4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2220      	movs	r2, #32
 80047f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004800:	f043 0204 	orr.w	r2, r3, #4
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e000      	b.n	8004816 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004814:	2300      	movs	r3, #0
}
 8004816:	4618      	mov	r0, r3
 8004818:	370c      	adds	r7, #12
 800481a:	46bd      	mov	sp, r7
 800481c:	bc80      	pop	{r7}
 800481e:	4770      	bx	lr

08004820 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004820:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004822:	b08b      	sub	sp, #44	; 0x2c
 8004824:	af06      	add	r7, sp, #24
 8004826:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d101      	bne.n	8004832 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e0fd      	b.n	8004a2e <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8004838:	b2db      	uxtb	r3, r3
 800483a:	2b00      	cmp	r3, #0
 800483c:	d106      	bne.n	800484c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f007 f982 	bl	800bb50 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2203      	movs	r2, #3
 8004850:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4618      	mov	r0, r3
 800485a:	f003 fba9 	bl	8007fb0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	603b      	str	r3, [r7, #0]
 8004864:	687e      	ldr	r6, [r7, #4]
 8004866:	466d      	mov	r5, sp
 8004868:	f106 0410 	add.w	r4, r6, #16
 800486c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800486e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004870:	6823      	ldr	r3, [r4, #0]
 8004872:	602b      	str	r3, [r5, #0]
 8004874:	1d33      	adds	r3, r6, #4
 8004876:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004878:	6838      	ldr	r0, [r7, #0]
 800487a:	f003 fb73 	bl	8007f64 <USB_CoreInit>
 800487e:	4603      	mov	r3, r0
 8004880:	2b00      	cmp	r3, #0
 8004882:	d005      	beq.n	8004890 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2202      	movs	r2, #2
 8004888:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e0ce      	b.n	8004a2e <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2100      	movs	r1, #0
 8004896:	4618      	mov	r0, r3
 8004898:	f003 fba4 	bl	8007fe4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800489c:	2300      	movs	r3, #0
 800489e:	73fb      	strb	r3, [r7, #15]
 80048a0:	e04c      	b.n	800493c <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80048a2:	7bfb      	ldrb	r3, [r7, #15]
 80048a4:	6879      	ldr	r1, [r7, #4]
 80048a6:	1c5a      	adds	r2, r3, #1
 80048a8:	4613      	mov	r3, r2
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	4413      	add	r3, r2
 80048ae:	00db      	lsls	r3, r3, #3
 80048b0:	440b      	add	r3, r1
 80048b2:	3301      	adds	r3, #1
 80048b4:	2201      	movs	r2, #1
 80048b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80048b8:	7bfb      	ldrb	r3, [r7, #15]
 80048ba:	6879      	ldr	r1, [r7, #4]
 80048bc:	1c5a      	adds	r2, r3, #1
 80048be:	4613      	mov	r3, r2
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	4413      	add	r3, r2
 80048c4:	00db      	lsls	r3, r3, #3
 80048c6:	440b      	add	r3, r1
 80048c8:	7bfa      	ldrb	r2, [r7, #15]
 80048ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80048cc:	7bfa      	ldrb	r2, [r7, #15]
 80048ce:	7bfb      	ldrb	r3, [r7, #15]
 80048d0:	b298      	uxth	r0, r3
 80048d2:	6879      	ldr	r1, [r7, #4]
 80048d4:	4613      	mov	r3, r2
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	4413      	add	r3, r2
 80048da:	00db      	lsls	r3, r3, #3
 80048dc:	440b      	add	r3, r1
 80048de:	3336      	adds	r3, #54	; 0x36
 80048e0:	4602      	mov	r2, r0
 80048e2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80048e4:	7bfb      	ldrb	r3, [r7, #15]
 80048e6:	6879      	ldr	r1, [r7, #4]
 80048e8:	1c5a      	adds	r2, r3, #1
 80048ea:	4613      	mov	r3, r2
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	4413      	add	r3, r2
 80048f0:	00db      	lsls	r3, r3, #3
 80048f2:	440b      	add	r3, r1
 80048f4:	3303      	adds	r3, #3
 80048f6:	2200      	movs	r2, #0
 80048f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80048fa:	7bfa      	ldrb	r2, [r7, #15]
 80048fc:	6879      	ldr	r1, [r7, #4]
 80048fe:	4613      	mov	r3, r2
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	4413      	add	r3, r2
 8004904:	00db      	lsls	r3, r3, #3
 8004906:	440b      	add	r3, r1
 8004908:	3338      	adds	r3, #56	; 0x38
 800490a:	2200      	movs	r2, #0
 800490c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800490e:	7bfa      	ldrb	r2, [r7, #15]
 8004910:	6879      	ldr	r1, [r7, #4]
 8004912:	4613      	mov	r3, r2
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	4413      	add	r3, r2
 8004918:	00db      	lsls	r3, r3, #3
 800491a:	440b      	add	r3, r1
 800491c:	333c      	adds	r3, #60	; 0x3c
 800491e:	2200      	movs	r2, #0
 8004920:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004922:	7bfa      	ldrb	r2, [r7, #15]
 8004924:	6879      	ldr	r1, [r7, #4]
 8004926:	4613      	mov	r3, r2
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	4413      	add	r3, r2
 800492c:	00db      	lsls	r3, r3, #3
 800492e:	440b      	add	r3, r1
 8004930:	3340      	adds	r3, #64	; 0x40
 8004932:	2200      	movs	r2, #0
 8004934:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004936:	7bfb      	ldrb	r3, [r7, #15]
 8004938:	3301      	adds	r3, #1
 800493a:	73fb      	strb	r3, [r7, #15]
 800493c:	7bfa      	ldrb	r2, [r7, #15]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	429a      	cmp	r2, r3
 8004944:	d3ad      	bcc.n	80048a2 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004946:	2300      	movs	r3, #0
 8004948:	73fb      	strb	r3, [r7, #15]
 800494a:	e044      	b.n	80049d6 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800494c:	7bfa      	ldrb	r2, [r7, #15]
 800494e:	6879      	ldr	r1, [r7, #4]
 8004950:	4613      	mov	r3, r2
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	4413      	add	r3, r2
 8004956:	00db      	lsls	r3, r3, #3
 8004958:	440b      	add	r3, r1
 800495a:	f203 1369 	addw	r3, r3, #361	; 0x169
 800495e:	2200      	movs	r2, #0
 8004960:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004962:	7bfa      	ldrb	r2, [r7, #15]
 8004964:	6879      	ldr	r1, [r7, #4]
 8004966:	4613      	mov	r3, r2
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	4413      	add	r3, r2
 800496c:	00db      	lsls	r3, r3, #3
 800496e:	440b      	add	r3, r1
 8004970:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004974:	7bfa      	ldrb	r2, [r7, #15]
 8004976:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004978:	7bfa      	ldrb	r2, [r7, #15]
 800497a:	6879      	ldr	r1, [r7, #4]
 800497c:	4613      	mov	r3, r2
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	4413      	add	r3, r2
 8004982:	00db      	lsls	r3, r3, #3
 8004984:	440b      	add	r3, r1
 8004986:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800498a:	2200      	movs	r2, #0
 800498c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800498e:	7bfa      	ldrb	r2, [r7, #15]
 8004990:	6879      	ldr	r1, [r7, #4]
 8004992:	4613      	mov	r3, r2
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	4413      	add	r3, r2
 8004998:	00db      	lsls	r3, r3, #3
 800499a:	440b      	add	r3, r1
 800499c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80049a0:	2200      	movs	r2, #0
 80049a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80049a4:	7bfa      	ldrb	r2, [r7, #15]
 80049a6:	6879      	ldr	r1, [r7, #4]
 80049a8:	4613      	mov	r3, r2
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	4413      	add	r3, r2
 80049ae:	00db      	lsls	r3, r3, #3
 80049b0:	440b      	add	r3, r1
 80049b2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80049b6:	2200      	movs	r2, #0
 80049b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80049ba:	7bfa      	ldrb	r2, [r7, #15]
 80049bc:	6879      	ldr	r1, [r7, #4]
 80049be:	4613      	mov	r3, r2
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	4413      	add	r3, r2
 80049c4:	00db      	lsls	r3, r3, #3
 80049c6:	440b      	add	r3, r1
 80049c8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80049cc:	2200      	movs	r2, #0
 80049ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049d0:	7bfb      	ldrb	r3, [r7, #15]
 80049d2:	3301      	adds	r3, #1
 80049d4:	73fb      	strb	r3, [r7, #15]
 80049d6:	7bfa      	ldrb	r2, [r7, #15]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d3b5      	bcc.n	800494c <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	603b      	str	r3, [r7, #0]
 80049e6:	687e      	ldr	r6, [r7, #4]
 80049e8:	466d      	mov	r5, sp
 80049ea:	f106 0410 	add.w	r4, r6, #16
 80049ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80049f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80049f2:	6823      	ldr	r3, [r4, #0]
 80049f4:	602b      	str	r3, [r5, #0]
 80049f6:	1d33      	adds	r3, r6, #4
 80049f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80049fa:	6838      	ldr	r0, [r7, #0]
 80049fc:	f003 fafe 	bl	8007ffc <USB_DevInit>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d005      	beq.n	8004a12 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2202      	movs	r2, #2
 8004a0a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e00d      	b.n	8004a2e <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4618      	mov	r0, r3
 8004a28:	f005 fc6f 	bl	800a30a <USB_DevDisconnect>

  return HAL_OK;
 8004a2c:	2300      	movs	r3, #0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3714      	adds	r7, #20
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004a36 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004a36:	b580      	push	{r7, lr}
 8004a38:	b082      	sub	sp, #8
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d101      	bne.n	8004a4c <HAL_PCD_Start+0x16>
 8004a48:	2302      	movs	r3, #2
 8004a4a:	e016      	b.n	8004a7a <HAL_PCD_Start+0x44>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f003 fa93 	bl	8007f84 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8004a5e:	2101      	movs	r1, #1
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f007 fac4 	bl	800bfee <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f005 fc43 	bl	800a2f6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3708      	adds	r7, #8
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}

08004a82 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004a82:	b580      	push	{r7, lr}
 8004a84:	b088      	sub	sp, #32
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f005 fc45 	bl	800a31e <USB_ReadInterrupts>
 8004a94:	4603      	mov	r3, r0
 8004a96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a9e:	d102      	bne.n	8004aa6 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f000 fb4a 	bl	800513a <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f005 fc37 	bl	800a31e <USB_ReadInterrupts>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ab6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004aba:	d112      	bne.n	8004ae2 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004ac4:	b29a      	uxth	r2, r3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ace:	b292      	uxth	r2, r2
 8004ad0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f007 f8b6 	bl	800bc46 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004ada:	2100      	movs	r1, #0
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f000 f925 	bl	8004d2c <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f005 fc19 	bl	800a31e <USB_ReadInterrupts>
 8004aec:	4603      	mov	r3, r0
 8004aee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004af2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004af6:	d10b      	bne.n	8004b10 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004b00:	b29a      	uxth	r2, r3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004b0a:	b292      	uxth	r2, r2
 8004b0c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4618      	mov	r0, r3
 8004b16:	f005 fc02 	bl	800a31e <USB_ReadInterrupts>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b24:	d10b      	bne.n	8004b3e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004b2e:	b29a      	uxth	r2, r3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b38:	b292      	uxth	r2, r2
 8004b3a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4618      	mov	r0, r3
 8004b44:	f005 fbeb 	bl	800a31e <USB_ReadInterrupts>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b52:	d126      	bne.n	8004ba2 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004b5c:	b29a      	uxth	r2, r3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f022 0204 	bic.w	r2, r2, #4
 8004b66:	b292      	uxth	r2, r2
 8004b68:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004b74:	b29a      	uxth	r2, r3
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f022 0208 	bic.w	r2, r2, #8
 8004b7e:	b292      	uxth	r2, r2
 8004b80:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f007 f897 	bl	800bcb8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004b92:	b29a      	uxth	r2, r3
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004b9c:	b292      	uxth	r2, r2
 8004b9e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f005 fbb9 	bl	800a31e <USB_ReadInterrupts>
 8004bac:	4603      	mov	r3, r0
 8004bae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bb6:	f040 8084 	bne.w	8004cc2 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8004bba:	2300      	movs	r3, #0
 8004bbc:	77fb      	strb	r3, [r7, #31]
 8004bbe:	e011      	b.n	8004be4 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	7ffb      	ldrb	r3, [r7, #31]
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	441a      	add	r2, r3
 8004bcc:	7ffb      	ldrb	r3, [r7, #31]
 8004bce:	8812      	ldrh	r2, [r2, #0]
 8004bd0:	b292      	uxth	r2, r2
 8004bd2:	005b      	lsls	r3, r3, #1
 8004bd4:	f107 0120 	add.w	r1, r7, #32
 8004bd8:	440b      	add	r3, r1
 8004bda:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8004bde:	7ffb      	ldrb	r3, [r7, #31]
 8004be0:	3301      	adds	r3, #1
 8004be2:	77fb      	strb	r3, [r7, #31]
 8004be4:	7ffb      	ldrb	r3, [r7, #31]
 8004be6:	2b07      	cmp	r3, #7
 8004be8:	d9ea      	bls.n	8004bc0 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004bf2:	b29a      	uxth	r2, r3
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f042 0201 	orr.w	r2, r2, #1
 8004bfc:	b292      	uxth	r2, r2
 8004bfe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004c0a:	b29a      	uxth	r2, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f022 0201 	bic.w	r2, r2, #1
 8004c14:	b292      	uxth	r2, r2
 8004c16:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8004c1a:	bf00      	nop
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d0f6      	beq.n	8004c1c <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004c36:	b29a      	uxth	r2, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c40:	b292      	uxth	r2, r2
 8004c42:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8004c46:	2300      	movs	r3, #0
 8004c48:	77fb      	strb	r3, [r7, #31]
 8004c4a:	e010      	b.n	8004c6e <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8004c4c:	7ffb      	ldrb	r3, [r7, #31]
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	6812      	ldr	r2, [r2, #0]
 8004c52:	4611      	mov	r1, r2
 8004c54:	7ffa      	ldrb	r2, [r7, #31]
 8004c56:	0092      	lsls	r2, r2, #2
 8004c58:	440a      	add	r2, r1
 8004c5a:	005b      	lsls	r3, r3, #1
 8004c5c:	f107 0120 	add.w	r1, r7, #32
 8004c60:	440b      	add	r3, r1
 8004c62:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8004c66:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8004c68:	7ffb      	ldrb	r3, [r7, #31]
 8004c6a:	3301      	adds	r3, #1
 8004c6c:	77fb      	strb	r3, [r7, #31]
 8004c6e:	7ffb      	ldrb	r3, [r7, #31]
 8004c70:	2b07      	cmp	r3, #7
 8004c72:	d9eb      	bls.n	8004c4c <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004c7c:	b29a      	uxth	r2, r3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f042 0208 	orr.w	r2, r2, #8
 8004c86:	b292      	uxth	r2, r2
 8004c88:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004c94:	b29a      	uxth	r2, r3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c9e:	b292      	uxth	r2, r2
 8004ca0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004cac:	b29a      	uxth	r2, r3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f042 0204 	orr.w	r2, r2, #4
 8004cb6:	b292      	uxth	r2, r2
 8004cb8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f006 ffe1 	bl	800bc84 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f005 fb29 	bl	800a31e <USB_ReadInterrupts>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cd6:	d10e      	bne.n	8004cf6 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004ce0:	b29a      	uxth	r2, r3
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004cea:	b292      	uxth	r2, r2
 8004cec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f006 ff9a 	bl	800bc2a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f005 fb0f 	bl	800a31e <USB_ReadInterrupts>
 8004d00:	4603      	mov	r3, r0
 8004d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d0a:	d10b      	bne.n	8004d24 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004d14:	b29a      	uxth	r2, r3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d1e:	b292      	uxth	r2, r2
 8004d20:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8004d24:	bf00      	nop
 8004d26:	3720      	adds	r7, #32
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	460b      	mov	r3, r1
 8004d36:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d101      	bne.n	8004d46 <HAL_PCD_SetAddress+0x1a>
 8004d42:	2302      	movs	r3, #2
 8004d44:	e013      	b.n	8004d6e <HAL_PCD_SetAddress+0x42>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2201      	movs	r2, #1
 8004d4a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	78fa      	ldrb	r2, [r7, #3]
 8004d52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	78fa      	ldrb	r2, [r7, #3]
 8004d5c:	4611      	mov	r1, r2
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f005 fab6 	bl	800a2d0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3708      	adds	r7, #8
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}

08004d76 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004d76:	b580      	push	{r7, lr}
 8004d78:	b084      	sub	sp, #16
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
 8004d7e:	4608      	mov	r0, r1
 8004d80:	4611      	mov	r1, r2
 8004d82:	461a      	mov	r2, r3
 8004d84:	4603      	mov	r3, r0
 8004d86:	70fb      	strb	r3, [r7, #3]
 8004d88:	460b      	mov	r3, r1
 8004d8a:	803b      	strh	r3, [r7, #0]
 8004d8c:	4613      	mov	r3, r2
 8004d8e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004d90:	2300      	movs	r3, #0
 8004d92:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004d94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	da0e      	bge.n	8004dba <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d9c:	78fb      	ldrb	r3, [r7, #3]
 8004d9e:	f003 0307 	and.w	r3, r3, #7
 8004da2:	1c5a      	adds	r2, r3, #1
 8004da4:	4613      	mov	r3, r2
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	4413      	add	r3, r2
 8004daa:	00db      	lsls	r3, r3, #3
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	4413      	add	r3, r2
 8004db0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2201      	movs	r2, #1
 8004db6:	705a      	strb	r2, [r3, #1]
 8004db8:	e00e      	b.n	8004dd8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004dba:	78fb      	ldrb	r3, [r7, #3]
 8004dbc:	f003 0207 	and.w	r2, r3, #7
 8004dc0:	4613      	mov	r3, r2
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	4413      	add	r3, r2
 8004dc6:	00db      	lsls	r3, r3, #3
 8004dc8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	4413      	add	r3, r2
 8004dd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004dd8:	78fb      	ldrb	r3, [r7, #3]
 8004dda:	f003 0307 	and.w	r3, r3, #7
 8004dde:	b2da      	uxtb	r2, r3
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004de4:	883a      	ldrh	r2, [r7, #0]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	78ba      	ldrb	r2, [r7, #2]
 8004dee:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	785b      	ldrb	r3, [r3, #1]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d004      	beq.n	8004e02 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	b29a      	uxth	r2, r3
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004e02:	78bb      	ldrb	r3, [r7, #2]
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d102      	bne.n	8004e0e <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d101      	bne.n	8004e1c <HAL_PCD_EP_Open+0xa6>
 8004e18:	2302      	movs	r3, #2
 8004e1a:	e00e      	b.n	8004e3a <HAL_PCD_EP_Open+0xc4>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	68f9      	ldr	r1, [r7, #12]
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f003 f906 	bl	800803c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8004e38:	7afb      	ldrb	r3, [r7, #11]
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3710      	adds	r7, #16
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}

08004e42 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e42:	b580      	push	{r7, lr}
 8004e44:	b084      	sub	sp, #16
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	6078      	str	r0, [r7, #4]
 8004e4a:	460b      	mov	r3, r1
 8004e4c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004e4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	da0e      	bge.n	8004e74 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e56:	78fb      	ldrb	r3, [r7, #3]
 8004e58:	f003 0307 	and.w	r3, r3, #7
 8004e5c:	1c5a      	adds	r2, r3, #1
 8004e5e:	4613      	mov	r3, r2
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	4413      	add	r3, r2
 8004e64:	00db      	lsls	r3, r3, #3
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	4413      	add	r3, r2
 8004e6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	705a      	strb	r2, [r3, #1]
 8004e72:	e00e      	b.n	8004e92 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e74:	78fb      	ldrb	r3, [r7, #3]
 8004e76:	f003 0207 	and.w	r2, r3, #7
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	4413      	add	r3, r2
 8004e80:	00db      	lsls	r3, r3, #3
 8004e82:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	4413      	add	r3, r2
 8004e8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004e92:	78fb      	ldrb	r3, [r7, #3]
 8004e94:	f003 0307 	and.w	r3, r3, #7
 8004e98:	b2da      	uxtb	r2, r3
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d101      	bne.n	8004eac <HAL_PCD_EP_Close+0x6a>
 8004ea8:	2302      	movs	r3, #2
 8004eaa:	e00e      	b.n	8004eca <HAL_PCD_EP_Close+0x88>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	68f9      	ldr	r1, [r7, #12]
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f003 fc28 	bl	8008710 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3710      	adds	r7, #16
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}

08004ed2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004ed2:	b580      	push	{r7, lr}
 8004ed4:	b086      	sub	sp, #24
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	60f8      	str	r0, [r7, #12]
 8004eda:	607a      	str	r2, [r7, #4]
 8004edc:	603b      	str	r3, [r7, #0]
 8004ede:	460b      	mov	r3, r1
 8004ee0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ee2:	7afb      	ldrb	r3, [r7, #11]
 8004ee4:	f003 0207 	and.w	r2, r3, #7
 8004ee8:	4613      	mov	r3, r2
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	4413      	add	r3, r2
 8004eee:	00db      	lsls	r3, r3, #3
 8004ef0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004ef4:	68fa      	ldr	r2, [r7, #12]
 8004ef6:	4413      	add	r3, r2
 8004ef8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	683a      	ldr	r2, [r7, #0]
 8004f04:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f12:	7afb      	ldrb	r3, [r7, #11]
 8004f14:	f003 0307 	and.w	r3, r3, #7
 8004f18:	b2da      	uxtb	r2, r3
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004f1e:	7afb      	ldrb	r3, [r7, #11]
 8004f20:	f003 0307 	and.w	r3, r3, #7
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d106      	bne.n	8004f36 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	6979      	ldr	r1, [r7, #20]
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f003 fdda 	bl	8008ae8 <USB_EPStartXfer>
 8004f34:	e005      	b.n	8004f42 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	6979      	ldr	r1, [r7, #20]
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f003 fdd3 	bl	8008ae8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004f42:	2300      	movs	r3, #0
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3718      	adds	r7, #24
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b086      	sub	sp, #24
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	607a      	str	r2, [r7, #4]
 8004f56:	603b      	str	r3, [r7, #0]
 8004f58:	460b      	mov	r3, r1
 8004f5a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f5c:	7afb      	ldrb	r3, [r7, #11]
 8004f5e:	f003 0307 	and.w	r3, r3, #7
 8004f62:	1c5a      	adds	r2, r3, #1
 8004f64:	4613      	mov	r3, r2
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	4413      	add	r3, r2
 8004f6a:	00db      	lsls	r3, r3, #3
 8004f6c:	68fa      	ldr	r2, [r7, #12]
 8004f6e:	4413      	add	r3, r2
 8004f70:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	683a      	ldr	r2, [r7, #0]
 8004f7c:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	2201      	movs	r2, #1
 8004f82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	683a      	ldr	r2, [r7, #0]
 8004f8a:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	2201      	movs	r2, #1
 8004f96:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f98:	7afb      	ldrb	r3, [r7, #11]
 8004f9a:	f003 0307 	and.w	r3, r3, #7
 8004f9e:	b2da      	uxtb	r2, r3
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004fa4:	7afb      	ldrb	r3, [r7, #11]
 8004fa6:	f003 0307 	and.w	r3, r3, #7
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d106      	bne.n	8004fbc <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	6979      	ldr	r1, [r7, #20]
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f003 fd97 	bl	8008ae8 <USB_EPStartXfer>
 8004fba:	e005      	b.n	8004fc8 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	6979      	ldr	r1, [r7, #20]
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f003 fd90 	bl	8008ae8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004fc8:	2300      	movs	r3, #0
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3718      	adds	r7, #24
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}

08004fd2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004fd2:	b580      	push	{r7, lr}
 8004fd4:	b084      	sub	sp, #16
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
 8004fda:	460b      	mov	r3, r1
 8004fdc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004fde:	78fb      	ldrb	r3, [r7, #3]
 8004fe0:	f003 0207 	and.w	r2, r3, #7
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d901      	bls.n	8004ff0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	e04c      	b.n	800508a <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004ff0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	da0e      	bge.n	8005016 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ff8:	78fb      	ldrb	r3, [r7, #3]
 8004ffa:	f003 0307 	and.w	r3, r3, #7
 8004ffe:	1c5a      	adds	r2, r3, #1
 8005000:	4613      	mov	r3, r2
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	4413      	add	r3, r2
 8005006:	00db      	lsls	r3, r3, #3
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	4413      	add	r3, r2
 800500c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2201      	movs	r2, #1
 8005012:	705a      	strb	r2, [r3, #1]
 8005014:	e00c      	b.n	8005030 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005016:	78fa      	ldrb	r2, [r7, #3]
 8005018:	4613      	mov	r3, r2
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	4413      	add	r3, r2
 800501e:	00db      	lsls	r3, r3, #3
 8005020:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	4413      	add	r3, r2
 8005028:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2200      	movs	r2, #0
 800502e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2201      	movs	r2, #1
 8005034:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005036:	78fb      	ldrb	r3, [r7, #3]
 8005038:	f003 0307 	and.w	r3, r3, #7
 800503c:	b2da      	uxtb	r2, r3
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005048:	2b01      	cmp	r3, #1
 800504a:	d101      	bne.n	8005050 <HAL_PCD_EP_SetStall+0x7e>
 800504c:	2302      	movs	r3, #2
 800504e:	e01c      	b.n	800508a <HAL_PCD_EP_SetStall+0xb8>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	68f9      	ldr	r1, [r7, #12]
 800505e:	4618      	mov	r0, r3
 8005060:	f005 f839 	bl	800a0d6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005064:	78fb      	ldrb	r3, [r7, #3]
 8005066:	f003 0307 	and.w	r3, r3, #7
 800506a:	2b00      	cmp	r3, #0
 800506c:	d108      	bne.n	8005080 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8005078:	4619      	mov	r1, r3
 800507a:	4610      	mov	r0, r2
 800507c:	f005 f95e 	bl	800a33c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005088:	2300      	movs	r3, #0
}
 800508a:	4618      	mov	r0, r3
 800508c:	3710      	adds	r7, #16
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}

08005092 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005092:	b580      	push	{r7, lr}
 8005094:	b084      	sub	sp, #16
 8005096:	af00      	add	r7, sp, #0
 8005098:	6078      	str	r0, [r7, #4]
 800509a:	460b      	mov	r3, r1
 800509c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800509e:	78fb      	ldrb	r3, [r7, #3]
 80050a0:	f003 020f 	and.w	r2, r3, #15
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d901      	bls.n	80050b0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	e040      	b.n	8005132 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80050b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	da0e      	bge.n	80050d6 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80050b8:	78fb      	ldrb	r3, [r7, #3]
 80050ba:	f003 0307 	and.w	r3, r3, #7
 80050be:	1c5a      	adds	r2, r3, #1
 80050c0:	4613      	mov	r3, r2
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	4413      	add	r3, r2
 80050c6:	00db      	lsls	r3, r3, #3
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	4413      	add	r3, r2
 80050cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2201      	movs	r2, #1
 80050d2:	705a      	strb	r2, [r3, #1]
 80050d4:	e00e      	b.n	80050f4 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80050d6:	78fb      	ldrb	r3, [r7, #3]
 80050d8:	f003 0207 	and.w	r2, r3, #7
 80050dc:	4613      	mov	r3, r2
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	4413      	add	r3, r2
 80050e2:	00db      	lsls	r3, r3, #3
 80050e4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	4413      	add	r3, r2
 80050ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2200      	movs	r2, #0
 80050f2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2200      	movs	r2, #0
 80050f8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80050fa:	78fb      	ldrb	r3, [r7, #3]
 80050fc:	f003 0307 	and.w	r3, r3, #7
 8005100:	b2da      	uxtb	r2, r3
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800510c:	2b01      	cmp	r3, #1
 800510e:	d101      	bne.n	8005114 <HAL_PCD_EP_ClrStall+0x82>
 8005110:	2302      	movs	r3, #2
 8005112:	e00e      	b.n	8005132 <HAL_PCD_EP_ClrStall+0xa0>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	68f9      	ldr	r1, [r7, #12]
 8005122:	4618      	mov	r0, r3
 8005124:	f005 f827 	bl	800a176 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005130:	2300      	movs	r3, #0
}
 8005132:	4618      	mov	r0, r3
 8005134:	3710      	adds	r7, #16
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}

0800513a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800513a:	b580      	push	{r7, lr}
 800513c:	b08e      	sub	sp, #56	; 0x38
 800513e:	af00      	add	r7, sp, #0
 8005140:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005142:	e2ec      	b.n	800571e <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800514c:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800514e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005150:	b2db      	uxtb	r3, r3
 8005152:	f003 030f 	and.w	r3, r3, #15
 8005156:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800515a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800515e:	2b00      	cmp	r3, #0
 8005160:	f040 8161 	bne.w	8005426 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005164:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005166:	f003 0310 	and.w	r3, r3, #16
 800516a:	2b00      	cmp	r3, #0
 800516c:	d152      	bne.n	8005214 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	881b      	ldrh	r3, [r3, #0]
 8005174:	b29b      	uxth	r3, r3
 8005176:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800517a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800517e:	81fb      	strh	r3, [r7, #14]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	89fb      	ldrh	r3, [r7, #14]
 8005186:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800518a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800518e:	b29b      	uxth	r3, r3
 8005190:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	3328      	adds	r3, #40	; 0x28
 8005196:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	461a      	mov	r2, r3
 80051a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	00db      	lsls	r3, r3, #3
 80051aa:	4413      	add	r3, r2
 80051ac:	3302      	adds	r3, #2
 80051ae:	005b      	lsls	r3, r3, #1
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	6812      	ldr	r2, [r2, #0]
 80051b4:	4413      	add	r3, r2
 80051b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051ba:	881b      	ldrh	r3, [r3, #0]
 80051bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80051c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80051c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c6:	695a      	ldr	r2, [r3, #20]
 80051c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ca:	69db      	ldr	r3, [r3, #28]
 80051cc:	441a      	add	r2, r3
 80051ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80051d2:	2100      	movs	r1, #0
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f006 fd0e 	bl	800bbf6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	f000 829b 	beq.w	800571e <PCD_EP_ISR_Handler+0x5e4>
 80051e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ea:	699b      	ldr	r3, [r3, #24]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	f040 8296 	bne.w	800571e <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80051fe:	b2da      	uxtb	r2, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	b292      	uxth	r2, r2
 8005206:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005212:	e284      	b.n	800571e <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800521a:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	881b      	ldrh	r3, [r3, #0]
 8005222:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005224:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005226:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800522a:	2b00      	cmp	r3, #0
 800522c:	d034      	beq.n	8005298 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005236:	b29b      	uxth	r3, r3
 8005238:	461a      	mov	r2, r3
 800523a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	00db      	lsls	r3, r3, #3
 8005240:	4413      	add	r3, r2
 8005242:	3306      	adds	r3, #6
 8005244:	005b      	lsls	r3, r3, #1
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	6812      	ldr	r2, [r2, #0]
 800524a:	4413      	add	r3, r2
 800524c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005250:	881b      	ldrh	r3, [r3, #0]
 8005252:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005258:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6818      	ldr	r0, [r3, #0]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8005264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005266:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800526c:	b29b      	uxth	r3, r3
 800526e:	f005 f8b5 	bl	800a3dc <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	881b      	ldrh	r3, [r3, #0]
 8005278:	b29a      	uxth	r2, r3
 800527a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800527e:	4013      	ands	r3, r2
 8005280:	823b      	strh	r3, [r7, #16]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	8a3a      	ldrh	r2, [r7, #16]
 8005288:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800528c:	b292      	uxth	r2, r2
 800528e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f006 fc83 	bl	800bb9c <HAL_PCD_SetupStageCallback>
 8005296:	e242      	b.n	800571e <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005298:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800529c:	2b00      	cmp	r3, #0
 800529e:	f280 823e 	bge.w	800571e <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	881b      	ldrh	r3, [r3, #0]
 80052a8:	b29a      	uxth	r2, r3
 80052aa:	f640 738f 	movw	r3, #3983	; 0xf8f
 80052ae:	4013      	ands	r3, r2
 80052b0:	83bb      	strh	r3, [r7, #28]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	8bba      	ldrh	r2, [r7, #28]
 80052b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80052bc:	b292      	uxth	r2, r2
 80052be:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	461a      	mov	r2, r3
 80052cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	00db      	lsls	r3, r3, #3
 80052d2:	4413      	add	r3, r2
 80052d4:	3306      	adds	r3, #6
 80052d6:	005b      	lsls	r3, r3, #1
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	6812      	ldr	r2, [r2, #0]
 80052dc:	4413      	add	r3, r2
 80052de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052e2:	881b      	ldrh	r3, [r3, #0]
 80052e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80052e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ea:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80052ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ee:	69db      	ldr	r3, [r3, #28]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d019      	beq.n	8005328 <PCD_EP_ISR_Handler+0x1ee>
 80052f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f6:	695b      	ldr	r3, [r3, #20]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d015      	beq.n	8005328 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6818      	ldr	r0, [r3, #0]
 8005300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005302:	6959      	ldr	r1, [r3, #20]
 8005304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005306:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800530c:	b29b      	uxth	r3, r3
 800530e:	f005 f865 	bl	800a3dc <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005314:	695a      	ldr	r2, [r3, #20]
 8005316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005318:	69db      	ldr	r3, [r3, #28]
 800531a:	441a      	add	r2, r3
 800531c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005320:	2100      	movs	r1, #0
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f006 fc4c 	bl	800bbc0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	881b      	ldrh	r3, [r3, #0]
 800532e:	b29b      	uxth	r3, r3
 8005330:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005334:	2b00      	cmp	r3, #0
 8005336:	f040 81f2 	bne.w	800571e <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	61bb      	str	r3, [r7, #24]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005348:	b29b      	uxth	r3, r3
 800534a:	461a      	mov	r2, r3
 800534c:	69bb      	ldr	r3, [r7, #24]
 800534e:	4413      	add	r3, r2
 8005350:	61bb      	str	r3, [r7, #24]
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005358:	617b      	str	r3, [r7, #20]
 800535a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d112      	bne.n	8005388 <PCD_EP_ISR_Handler+0x24e>
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	881b      	ldrh	r3, [r3, #0]
 8005366:	b29b      	uxth	r3, r3
 8005368:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800536c:	b29a      	uxth	r2, r3
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	801a      	strh	r2, [r3, #0]
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	881b      	ldrh	r3, [r3, #0]
 8005376:	b29b      	uxth	r3, r3
 8005378:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800537c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005380:	b29a      	uxth	r2, r3
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	801a      	strh	r2, [r3, #0]
 8005386:	e02f      	b.n	80053e8 <PCD_EP_ISR_Handler+0x2ae>
 8005388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538a:	691b      	ldr	r3, [r3, #16]
 800538c:	2b3e      	cmp	r3, #62	; 0x3e
 800538e:	d813      	bhi.n	80053b8 <PCD_EP_ISR_Handler+0x27e>
 8005390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005392:	691b      	ldr	r3, [r3, #16]
 8005394:	085b      	lsrs	r3, r3, #1
 8005396:	633b      	str	r3, [r7, #48]	; 0x30
 8005398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539a:	691b      	ldr	r3, [r3, #16]
 800539c:	f003 0301 	and.w	r3, r3, #1
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d002      	beq.n	80053aa <PCD_EP_ISR_Handler+0x270>
 80053a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a6:	3301      	adds	r3, #1
 80053a8:	633b      	str	r3, [r7, #48]	; 0x30
 80053aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	029b      	lsls	r3, r3, #10
 80053b0:	b29a      	uxth	r2, r3
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	801a      	strh	r2, [r3, #0]
 80053b6:	e017      	b.n	80053e8 <PCD_EP_ISR_Handler+0x2ae>
 80053b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ba:	691b      	ldr	r3, [r3, #16]
 80053bc:	095b      	lsrs	r3, r3, #5
 80053be:	633b      	str	r3, [r7, #48]	; 0x30
 80053c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c2:	691b      	ldr	r3, [r3, #16]
 80053c4:	f003 031f 	and.w	r3, r3, #31
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d102      	bne.n	80053d2 <PCD_EP_ISR_Handler+0x298>
 80053cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ce:	3b01      	subs	r3, #1
 80053d0:	633b      	str	r3, [r7, #48]	; 0x30
 80053d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	029b      	lsls	r3, r3, #10
 80053d8:	b29b      	uxth	r3, r3
 80053da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053e2:	b29a      	uxth	r2, r3
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	881b      	ldrh	r3, [r3, #0]
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053f8:	827b      	strh	r3, [r7, #18]
 80053fa:	8a7b      	ldrh	r3, [r7, #18]
 80053fc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005400:	827b      	strh	r3, [r7, #18]
 8005402:	8a7b      	ldrh	r3, [r7, #18]
 8005404:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005408:	827b      	strh	r3, [r7, #18]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	8a7b      	ldrh	r3, [r7, #18]
 8005410:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005414:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005418:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800541c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005420:	b29b      	uxth	r3, r3
 8005422:	8013      	strh	r3, [r2, #0]
 8005424:	e17b      	b.n	800571e <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	461a      	mov	r2, r3
 800542c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005430:	009b      	lsls	r3, r3, #2
 8005432:	4413      	add	r3, r2
 8005434:	881b      	ldrh	r3, [r3, #0]
 8005436:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005438:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800543c:	2b00      	cmp	r3, #0
 800543e:	f280 80ea 	bge.w	8005616 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	461a      	mov	r2, r3
 8005448:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	4413      	add	r3, r2
 8005450:	881b      	ldrh	r3, [r3, #0]
 8005452:	b29a      	uxth	r2, r3
 8005454:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005458:	4013      	ands	r3, r2
 800545a:	853b      	strh	r3, [r7, #40]	; 0x28
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	461a      	mov	r2, r3
 8005462:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	4413      	add	r3, r2
 800546a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800546c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005470:	b292      	uxth	r2, r2
 8005472:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005474:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8005478:	4613      	mov	r3, r2
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	4413      	add	r3, r2
 800547e:	00db      	lsls	r3, r3, #3
 8005480:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005484:	687a      	ldr	r2, [r7, #4]
 8005486:	4413      	add	r3, r2
 8005488:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800548a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548c:	7b1b      	ldrb	r3, [r3, #12]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d122      	bne.n	80054d8 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800549a:	b29b      	uxth	r3, r3
 800549c:	461a      	mov	r2, r3
 800549e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	00db      	lsls	r3, r3, #3
 80054a4:	4413      	add	r3, r2
 80054a6:	3306      	adds	r3, #6
 80054a8:	005b      	lsls	r3, r3, #1
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	6812      	ldr	r2, [r2, #0]
 80054ae:	4413      	add	r3, r2
 80054b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054b4:	881b      	ldrh	r3, [r3, #0]
 80054b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054ba:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80054bc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80054be:	2b00      	cmp	r3, #0
 80054c0:	f000 8087 	beq.w	80055d2 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6818      	ldr	r0, [r3, #0]
 80054c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ca:	6959      	ldr	r1, [r3, #20]
 80054cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ce:	88da      	ldrh	r2, [r3, #6]
 80054d0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80054d2:	f004 ff83 	bl	800a3dc <USB_ReadPMA>
 80054d6:	e07c      	b.n	80055d2 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80054d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054da:	78db      	ldrb	r3, [r3, #3]
 80054dc:	2b02      	cmp	r3, #2
 80054de:	d108      	bne.n	80054f2 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80054e0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80054e2:	461a      	mov	r2, r3
 80054e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f000 f927 	bl	800573a <HAL_PCD_EP_DB_Receive>
 80054ec:	4603      	mov	r3, r0
 80054ee:	86fb      	strh	r3, [r7, #54]	; 0x36
 80054f0:	e06f      	b.n	80055d2 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	461a      	mov	r2, r3
 80054f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	4413      	add	r3, r2
 8005500:	881b      	ldrh	r3, [r3, #0]
 8005502:	b29b      	uxth	r3, r3
 8005504:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005508:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800550c:	847b      	strh	r3, [r7, #34]	; 0x22
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	461a      	mov	r2, r3
 8005514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	441a      	add	r2, r3
 800551c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800551e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005522:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005526:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800552a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800552e:	b29b      	uxth	r3, r3
 8005530:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	461a      	mov	r2, r3
 8005538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553a:	781b      	ldrb	r3, [r3, #0]
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	4413      	add	r3, r2
 8005540:	881b      	ldrh	r3, [r3, #0]
 8005542:	b29b      	uxth	r3, r3
 8005544:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005548:	2b00      	cmp	r3, #0
 800554a:	d021      	beq.n	8005590 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005554:	b29b      	uxth	r3, r3
 8005556:	461a      	mov	r2, r3
 8005558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	00db      	lsls	r3, r3, #3
 800555e:	4413      	add	r3, r2
 8005560:	3302      	adds	r3, #2
 8005562:	005b      	lsls	r3, r3, #1
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	6812      	ldr	r2, [r2, #0]
 8005568:	4413      	add	r3, r2
 800556a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800556e:	881b      	ldrh	r3, [r3, #0]
 8005570:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005574:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8005576:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005578:	2b00      	cmp	r3, #0
 800557a:	d02a      	beq.n	80055d2 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6818      	ldr	r0, [r3, #0]
 8005580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005582:	6959      	ldr	r1, [r3, #20]
 8005584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005586:	891a      	ldrh	r2, [r3, #8]
 8005588:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800558a:	f004 ff27 	bl	800a3dc <USB_ReadPMA>
 800558e:	e020      	b.n	80055d2 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005598:	b29b      	uxth	r3, r3
 800559a:	461a      	mov	r2, r3
 800559c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	00db      	lsls	r3, r3, #3
 80055a2:	4413      	add	r3, r2
 80055a4:	3306      	adds	r3, #6
 80055a6:	005b      	lsls	r3, r3, #1
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	6812      	ldr	r2, [r2, #0]
 80055ac:	4413      	add	r3, r2
 80055ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055b2:	881b      	ldrh	r3, [r3, #0]
 80055b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055b8:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80055ba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d008      	beq.n	80055d2 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6818      	ldr	r0, [r3, #0]
 80055c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c6:	6959      	ldr	r1, [r3, #20]
 80055c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ca:	895a      	ldrh	r2, [r3, #10]
 80055cc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80055ce:	f004 ff05 	bl	800a3dc <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80055d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d4:	69da      	ldr	r2, [r3, #28]
 80055d6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80055d8:	441a      	add	r2, r3
 80055da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055dc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80055de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e0:	695a      	ldr	r2, [r3, #20]
 80055e2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80055e4:	441a      	add	r2, r3
 80055e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e8:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80055ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ec:	699b      	ldr	r3, [r3, #24]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d004      	beq.n	80055fc <PCD_EP_ISR_Handler+0x4c2>
 80055f2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80055f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f6:	691b      	ldr	r3, [r3, #16]
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d206      	bcs.n	800560a <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80055fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	4619      	mov	r1, r3
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f006 fadc 	bl	800bbc0 <HAL_PCD_DataOutStageCallback>
 8005608:	e005      	b.n	8005616 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005610:	4618      	mov	r0, r3
 8005612:	f003 fa69 	bl	8008ae8 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005616:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800561c:	2b00      	cmp	r3, #0
 800561e:	d07e      	beq.n	800571e <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8005620:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005624:	1c5a      	adds	r2, r3, #1
 8005626:	4613      	mov	r3, r2
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	4413      	add	r3, r2
 800562c:	00db      	lsls	r3, r3, #3
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	4413      	add	r3, r2
 8005632:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	461a      	mov	r2, r3
 800563a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	4413      	add	r3, r2
 8005642:	881b      	ldrh	r3, [r3, #0]
 8005644:	b29b      	uxth	r3, r3
 8005646:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800564a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800564e:	843b      	strh	r3, [r7, #32]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	461a      	mov	r2, r3
 8005656:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	441a      	add	r2, r3
 800565e:	8c3b      	ldrh	r3, [r7, #32]
 8005660:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005664:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005668:	b29b      	uxth	r3, r3
 800566a:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800566c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566e:	78db      	ldrb	r3, [r3, #3]
 8005670:	2b03      	cmp	r3, #3
 8005672:	d00c      	beq.n	800568e <PCD_EP_ISR_Handler+0x554>
 8005674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005676:	78db      	ldrb	r3, [r3, #3]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d008      	beq.n	800568e <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800567c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567e:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8005680:	2b02      	cmp	r3, #2
 8005682:	d146      	bne.n	8005712 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8005684:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800568a:	2b00      	cmp	r3, #0
 800568c:	d141      	bne.n	8005712 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005696:	b29b      	uxth	r3, r3
 8005698:	461a      	mov	r2, r3
 800569a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569c:	781b      	ldrb	r3, [r3, #0]
 800569e:	00db      	lsls	r3, r3, #3
 80056a0:	4413      	add	r3, r2
 80056a2:	3302      	adds	r3, #2
 80056a4:	005b      	lsls	r3, r3, #1
 80056a6:	687a      	ldr	r2, [r7, #4]
 80056a8:	6812      	ldr	r2, [r2, #0]
 80056aa:	4413      	add	r3, r2
 80056ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056b0:	881b      	ldrh	r3, [r3, #0]
 80056b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056b6:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80056b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ba:	699a      	ldr	r2, [r3, #24]
 80056bc:	8bfb      	ldrh	r3, [r7, #30]
 80056be:	429a      	cmp	r2, r3
 80056c0:	d906      	bls.n	80056d0 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80056c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c4:	699a      	ldr	r2, [r3, #24]
 80056c6:	8bfb      	ldrh	r3, [r7, #30]
 80056c8:	1ad2      	subs	r2, r2, r3
 80056ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056cc:	619a      	str	r2, [r3, #24]
 80056ce:	e002      	b.n	80056d6 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80056d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d2:	2200      	movs	r2, #0
 80056d4:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80056d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d8:	699b      	ldr	r3, [r3, #24]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d106      	bne.n	80056ec <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80056de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	4619      	mov	r1, r3
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f006 fa86 	bl	800bbf6 <HAL_PCD_DataInStageCallback>
 80056ea:	e018      	b.n	800571e <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80056ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ee:	695a      	ldr	r2, [r3, #20]
 80056f0:	8bfb      	ldrh	r3, [r7, #30]
 80056f2:	441a      	add	r2, r3
 80056f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f6:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80056f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fa:	69da      	ldr	r2, [r3, #28]
 80056fc:	8bfb      	ldrh	r3, [r7, #30]
 80056fe:	441a      	add	r2, r3
 8005700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005702:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800570a:	4618      	mov	r0, r3
 800570c:	f003 f9ec 	bl	8008ae8 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8005710:	e005      	b.n	800571e <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005712:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005714:	461a      	mov	r2, r3
 8005716:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f000 f91b 	bl	8005954 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005726:	b29b      	uxth	r3, r3
 8005728:	b21b      	sxth	r3, r3
 800572a:	2b00      	cmp	r3, #0
 800572c:	f6ff ad0a 	blt.w	8005144 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005730:	2300      	movs	r3, #0
}
 8005732:	4618      	mov	r0, r3
 8005734:	3738      	adds	r7, #56	; 0x38
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}

0800573a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800573a:	b580      	push	{r7, lr}
 800573c:	b088      	sub	sp, #32
 800573e:	af00      	add	r7, sp, #0
 8005740:	60f8      	str	r0, [r7, #12]
 8005742:	60b9      	str	r1, [r7, #8]
 8005744:	4613      	mov	r3, r2
 8005746:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005748:	88fb      	ldrh	r3, [r7, #6]
 800574a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800574e:	2b00      	cmp	r3, #0
 8005750:	d07e      	beq.n	8005850 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800575a:	b29b      	uxth	r3, r3
 800575c:	461a      	mov	r2, r3
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	00db      	lsls	r3, r3, #3
 8005764:	4413      	add	r3, r2
 8005766:	3302      	adds	r3, #2
 8005768:	005b      	lsls	r3, r3, #1
 800576a:	68fa      	ldr	r2, [r7, #12]
 800576c:	6812      	ldr	r2, [r2, #0]
 800576e:	4413      	add	r3, r2
 8005770:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005774:	881b      	ldrh	r3, [r3, #0]
 8005776:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800577a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	699a      	ldr	r2, [r3, #24]
 8005780:	8b7b      	ldrh	r3, [r7, #26]
 8005782:	429a      	cmp	r2, r3
 8005784:	d306      	bcc.n	8005794 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	699a      	ldr	r2, [r3, #24]
 800578a:	8b7b      	ldrh	r3, [r7, #26]
 800578c:	1ad2      	subs	r2, r2, r3
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	619a      	str	r2, [r3, #24]
 8005792:	e002      	b.n	800579a <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	2200      	movs	r2, #0
 8005798:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	699b      	ldr	r3, [r3, #24]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d123      	bne.n	80057ea <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	461a      	mov	r2, r3
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	4413      	add	r3, r2
 80057b0:	881b      	ldrh	r3, [r3, #0]
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057bc:	833b      	strh	r3, [r7, #24]
 80057be:	8b3b      	ldrh	r3, [r7, #24]
 80057c0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80057c4:	833b      	strh	r3, [r7, #24]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	461a      	mov	r2, r3
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	441a      	add	r2, r3
 80057d4:	8b3b      	ldrh	r3, [r7, #24]
 80057d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80057ea:	88fb      	ldrh	r3, [r7, #6]
 80057ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d01f      	beq.n	8005834 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	461a      	mov	r2, r3
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	4413      	add	r3, r2
 8005802:	881b      	ldrh	r3, [r3, #0]
 8005804:	b29b      	uxth	r3, r3
 8005806:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800580a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800580e:	82fb      	strh	r3, [r7, #22]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	461a      	mov	r2, r3
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	781b      	ldrb	r3, [r3, #0]
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	441a      	add	r2, r3
 800581e:	8afb      	ldrh	r3, [r7, #22]
 8005820:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005824:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005828:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800582c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005830:	b29b      	uxth	r3, r3
 8005832:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005834:	8b7b      	ldrh	r3, [r7, #26]
 8005836:	2b00      	cmp	r3, #0
 8005838:	f000 8087 	beq.w	800594a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6818      	ldr	r0, [r3, #0]
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	6959      	ldr	r1, [r3, #20]
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	891a      	ldrh	r2, [r3, #8]
 8005848:	8b7b      	ldrh	r3, [r7, #26]
 800584a:	f004 fdc7 	bl	800a3dc <USB_ReadPMA>
 800584e:	e07c      	b.n	800594a <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005858:	b29b      	uxth	r3, r3
 800585a:	461a      	mov	r2, r3
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	00db      	lsls	r3, r3, #3
 8005862:	4413      	add	r3, r2
 8005864:	3306      	adds	r3, #6
 8005866:	005b      	lsls	r3, r3, #1
 8005868:	68fa      	ldr	r2, [r7, #12]
 800586a:	6812      	ldr	r2, [r2, #0]
 800586c:	4413      	add	r3, r2
 800586e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005872:	881b      	ldrh	r3, [r3, #0]
 8005874:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005878:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	699a      	ldr	r2, [r3, #24]
 800587e:	8b7b      	ldrh	r3, [r7, #26]
 8005880:	429a      	cmp	r2, r3
 8005882:	d306      	bcc.n	8005892 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	699a      	ldr	r2, [r3, #24]
 8005888:	8b7b      	ldrh	r3, [r7, #26]
 800588a:	1ad2      	subs	r2, r2, r3
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	619a      	str	r2, [r3, #24]
 8005890:	e002      	b.n	8005898 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	2200      	movs	r2, #0
 8005896:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	699b      	ldr	r3, [r3, #24]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d123      	bne.n	80058e8 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	461a      	mov	r2, r3
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	4413      	add	r3, r2
 80058ae:	881b      	ldrh	r3, [r3, #0]
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ba:	83fb      	strh	r3, [r7, #30]
 80058bc:	8bfb      	ldrh	r3, [r7, #30]
 80058be:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80058c2:	83fb      	strh	r3, [r7, #30]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	461a      	mov	r2, r3
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	441a      	add	r2, r3
 80058d2:	8bfb      	ldrh	r3, [r7, #30]
 80058d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80058e8:	88fb      	ldrh	r3, [r7, #6]
 80058ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d11f      	bne.n	8005932 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	461a      	mov	r2, r3
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	4413      	add	r3, r2
 8005900:	881b      	ldrh	r3, [r3, #0]
 8005902:	b29b      	uxth	r3, r3
 8005904:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005908:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800590c:	83bb      	strh	r3, [r7, #28]
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	461a      	mov	r2, r3
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	009b      	lsls	r3, r3, #2
 800591a:	441a      	add	r2, r3
 800591c:	8bbb      	ldrh	r3, [r7, #28]
 800591e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005922:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005926:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800592a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800592e:	b29b      	uxth	r3, r3
 8005930:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005932:	8b7b      	ldrh	r3, [r7, #26]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d008      	beq.n	800594a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6818      	ldr	r0, [r3, #0]
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	6959      	ldr	r1, [r3, #20]
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	895a      	ldrh	r2, [r3, #10]
 8005944:	8b7b      	ldrh	r3, [r7, #26]
 8005946:	f004 fd49 	bl	800a3dc <USB_ReadPMA>
    }
  }

  return count;
 800594a:	8b7b      	ldrh	r3, [r7, #26]
}
 800594c:	4618      	mov	r0, r3
 800594e:	3720      	adds	r7, #32
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}

08005954 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b0a2      	sub	sp, #136	; 0x88
 8005958:	af00      	add	r7, sp, #0
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	60b9      	str	r1, [r7, #8]
 800595e:	4613      	mov	r3, r2
 8005960:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005962:	88fb      	ldrh	r3, [r7, #6]
 8005964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005968:	2b00      	cmp	r3, #0
 800596a:	f000 81c7 	beq.w	8005cfc <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005976:	b29b      	uxth	r3, r3
 8005978:	461a      	mov	r2, r3
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	00db      	lsls	r3, r3, #3
 8005980:	4413      	add	r3, r2
 8005982:	3302      	adds	r3, #2
 8005984:	005b      	lsls	r3, r3, #1
 8005986:	68fa      	ldr	r2, [r7, #12]
 8005988:	6812      	ldr	r2, [r2, #0]
 800598a:	4413      	add	r3, r2
 800598c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005990:	881b      	ldrh	r3, [r3, #0]
 8005992:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005996:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	699a      	ldr	r2, [r3, #24]
 800599e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d907      	bls.n	80059b6 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	699a      	ldr	r2, [r3, #24]
 80059aa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80059ae:	1ad2      	subs	r2, r2, r3
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	619a      	str	r2, [r3, #24]
 80059b4:	e002      	b.n	80059bc <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	2200      	movs	r2, #0
 80059ba:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	699b      	ldr	r3, [r3, #24]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	f040 80b9 	bne.w	8005b38 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	785b      	ldrb	r3, [r3, #1]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d126      	bne.n	8005a1c <HAL_PCD_EP_DB_Transmit+0xc8>
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059dc:	b29b      	uxth	r3, r3
 80059de:	461a      	mov	r2, r3
 80059e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e2:	4413      	add	r3, r2
 80059e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	011a      	lsls	r2, r3, #4
 80059ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ee:	4413      	add	r3, r2
 80059f0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80059f4:	627b      	str	r3, [r7, #36]	; 0x24
 80059f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f8:	881b      	ldrh	r3, [r3, #0]
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a00:	b29a      	uxth	r2, r3
 8005a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a04:	801a      	strh	r2, [r3, #0]
 8005a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a08:	881b      	ldrh	r3, [r3, #0]
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a14:	b29a      	uxth	r2, r3
 8005a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a18:	801a      	strh	r2, [r3, #0]
 8005a1a:	e01a      	b.n	8005a52 <HAL_PCD_EP_DB_Transmit+0xfe>
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	785b      	ldrb	r3, [r3, #1]
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d116      	bne.n	8005a52 <HAL_PCD_EP_DB_Transmit+0xfe>
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	633b      	str	r3, [r7, #48]	; 0x30
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	461a      	mov	r2, r3
 8005a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a38:	4413      	add	r3, r2
 8005a3a:	633b      	str	r3, [r7, #48]	; 0x30
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	011a      	lsls	r2, r3, #4
 8005a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a44:	4413      	add	r3, r2
 8005a46:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a4e:	2200      	movs	r2, #0
 8005a50:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	623b      	str	r3, [r7, #32]
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	785b      	ldrb	r3, [r3, #1]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d126      	bne.n	8005aae <HAL_PCD_EP_DB_Transmit+0x15a>
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	61bb      	str	r3, [r7, #24]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	461a      	mov	r2, r3
 8005a72:	69bb      	ldr	r3, [r7, #24]
 8005a74:	4413      	add	r3, r2
 8005a76:	61bb      	str	r3, [r7, #24]
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	011a      	lsls	r2, r3, #4
 8005a7e:	69bb      	ldr	r3, [r7, #24]
 8005a80:	4413      	add	r3, r2
 8005a82:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a86:	617b      	str	r3, [r7, #20]
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	881b      	ldrh	r3, [r3, #0]
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a92:	b29a      	uxth	r2, r3
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	801a      	strh	r2, [r3, #0]
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	881b      	ldrh	r3, [r3, #0]
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005aa2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005aa6:	b29a      	uxth	r2, r3
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	801a      	strh	r2, [r3, #0]
 8005aac:	e017      	b.n	8005ade <HAL_PCD_EP_DB_Transmit+0x18a>
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	785b      	ldrb	r3, [r3, #1]
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d113      	bne.n	8005ade <HAL_PCD_EP_DB_Transmit+0x18a>
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	6a3b      	ldr	r3, [r7, #32]
 8005ac4:	4413      	add	r3, r2
 8005ac6:	623b      	str	r3, [r7, #32]
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	781b      	ldrb	r3, [r3, #0]
 8005acc:	011a      	lsls	r2, r3, #4
 8005ace:	6a3b      	ldr	r3, [r7, #32]
 8005ad0:	4413      	add	r3, r2
 8005ad2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ad6:	61fb      	str	r3, [r7, #28]
 8005ad8:	69fb      	ldr	r3, [r7, #28]
 8005ada:	2200      	movs	r2, #0
 8005adc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	4619      	mov	r1, r3
 8005ae4:	68f8      	ldr	r0, [r7, #12]
 8005ae6:	f006 f886 	bl	800bbf6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005aea:	88fb      	ldrh	r3, [r7, #6]
 8005aec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	f000 82d4 	beq.w	800609e <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	461a      	mov	r2, r3
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	4413      	add	r3, r2
 8005b04:	881b      	ldrh	r3, [r3, #0]
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b10:	827b      	strh	r3, [r7, #18]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	461a      	mov	r2, r3
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	009b      	lsls	r3, r3, #2
 8005b1e:	441a      	add	r2, r3
 8005b20:	8a7b      	ldrh	r3, [r7, #18]
 8005b22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	8013      	strh	r3, [r2, #0]
 8005b36:	e2b2      	b.n	800609e <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005b38:	88fb      	ldrh	r3, [r7, #6]
 8005b3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d021      	beq.n	8005b86 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	461a      	mov	r2, r3
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	4413      	add	r3, r2
 8005b50:	881b      	ldrh	r3, [r3, #0]
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b5c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	461a      	mov	r2, r3
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	009b      	lsls	r3, r3, #2
 8005b6c:	441a      	add	r2, r3
 8005b6e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005b72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	f040 8286 	bne.w	800609e <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	695a      	ldr	r2, [r3, #20]
 8005b96:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005b9a:	441a      	add	r2, r3
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	69da      	ldr	r2, [r3, #28]
 8005ba4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005ba8:	441a      	add	r2, r3
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	6a1a      	ldr	r2, [r3, #32]
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d309      	bcc.n	8005bce <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	691b      	ldr	r3, [r3, #16]
 8005bbe:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	6a1a      	ldr	r2, [r3, #32]
 8005bc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bc6:	1ad2      	subs	r2, r2, r3
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	621a      	str	r2, [r3, #32]
 8005bcc:	e015      	b.n	8005bfa <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	6a1b      	ldr	r3, [r3, #32]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d107      	bne.n	8005be6 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8005bd6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005bda:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	2200      	movs	r2, #0
 8005be0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005be4:	e009      	b.n	8005bfa <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	2200      	movs	r2, #0
 8005bea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	6a1b      	ldr	r3, [r3, #32]
 8005bf2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	785b      	ldrb	r3, [r3, #1]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d155      	bne.n	8005cae <HAL_PCD_EP_DB_Transmit+0x35a>
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	461a      	mov	r2, r3
 8005c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c16:	4413      	add	r3, r2
 8005c18:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	781b      	ldrb	r3, [r3, #0]
 8005c1e:	011a      	lsls	r2, r3, #4
 8005c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c22:	4413      	add	r3, r2
 8005c24:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c28:	637b      	str	r3, [r7, #52]	; 0x34
 8005c2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d112      	bne.n	8005c56 <HAL_PCD_EP_DB_Transmit+0x302>
 8005c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c32:	881b      	ldrh	r3, [r3, #0]
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c3a:	b29a      	uxth	r2, r3
 8005c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c3e:	801a      	strh	r2, [r3, #0]
 8005c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c42:	881b      	ldrh	r3, [r3, #0]
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c4e:	b29a      	uxth	r2, r3
 8005c50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c52:	801a      	strh	r2, [r3, #0]
 8005c54:	e047      	b.n	8005ce6 <HAL_PCD_EP_DB_Transmit+0x392>
 8005c56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c58:	2b3e      	cmp	r3, #62	; 0x3e
 8005c5a:	d811      	bhi.n	8005c80 <HAL_PCD_EP_DB_Transmit+0x32c>
 8005c5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c5e:	085b      	lsrs	r3, r3, #1
 8005c60:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c64:	f003 0301 	and.w	r3, r3, #1
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d002      	beq.n	8005c72 <HAL_PCD_EP_DB_Transmit+0x31e>
 8005c6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c6e:	3301      	adds	r3, #1
 8005c70:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	029b      	lsls	r3, r3, #10
 8005c78:	b29a      	uxth	r2, r3
 8005c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c7c:	801a      	strh	r2, [r3, #0]
 8005c7e:	e032      	b.n	8005ce6 <HAL_PCD_EP_DB_Transmit+0x392>
 8005c80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c82:	095b      	lsrs	r3, r3, #5
 8005c84:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c88:	f003 031f 	and.w	r3, r3, #31
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d102      	bne.n	8005c96 <HAL_PCD_EP_DB_Transmit+0x342>
 8005c90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c92:	3b01      	subs	r3, #1
 8005c94:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	029b      	lsls	r3, r3, #10
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ca2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ca6:	b29a      	uxth	r2, r3
 8005ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005caa:	801a      	strh	r2, [r3, #0]
 8005cac:	e01b      	b.n	8005ce6 <HAL_PCD_EP_DB_Transmit+0x392>
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	785b      	ldrb	r3, [r3, #1]
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d117      	bne.n	8005ce6 <HAL_PCD_EP_DB_Transmit+0x392>
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	643b      	str	r3, [r7, #64]	; 0x40
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cca:	4413      	add	r3, r2
 8005ccc:	643b      	str	r3, [r7, #64]	; 0x40
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	011a      	lsls	r2, r3, #4
 8005cd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cd6:	4413      	add	r3, r2
 8005cd8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ce0:	b29a      	uxth	r2, r3
 8005ce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ce4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	6818      	ldr	r0, [r3, #0]
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	6959      	ldr	r1, [r3, #20]
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	891a      	ldrh	r2, [r3, #8]
 8005cf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	f004 fb2c 	bl	800a352 <USB_WritePMA>
 8005cfa:	e1d0      	b.n	800609e <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	461a      	mov	r2, r3
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	00db      	lsls	r3, r3, #3
 8005d0e:	4413      	add	r3, r2
 8005d10:	3306      	adds	r3, #6
 8005d12:	005b      	lsls	r3, r3, #1
 8005d14:	68fa      	ldr	r2, [r7, #12]
 8005d16:	6812      	ldr	r2, [r2, #0]
 8005d18:	4413      	add	r3, r2
 8005d1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d1e:	881b      	ldrh	r3, [r3, #0]
 8005d20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d24:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	699a      	ldr	r2, [r3, #24]
 8005d2c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d307      	bcc.n	8005d44 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	699a      	ldr	r2, [r3, #24]
 8005d38:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005d3c:	1ad2      	subs	r2, r2, r3
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	619a      	str	r2, [r3, #24]
 8005d42:	e002      	b.n	8005d4a <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	2200      	movs	r2, #0
 8005d48:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	699b      	ldr	r3, [r3, #24]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	f040 80c4 	bne.w	8005edc <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	785b      	ldrb	r3, [r3, #1]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d126      	bne.n	8005daa <HAL_PCD_EP_DB_Transmit+0x456>
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d70:	4413      	add	r3, r2
 8005d72:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	011a      	lsls	r2, r3, #4
 8005d7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d7c:	4413      	add	r3, r2
 8005d7e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d82:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d86:	881b      	ldrh	r3, [r3, #0]
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d8e:	b29a      	uxth	r2, r3
 8005d90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d92:	801a      	strh	r2, [r3, #0]
 8005d94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d96:	881b      	ldrh	r3, [r3, #0]
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005da2:	b29a      	uxth	r2, r3
 8005da4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005da6:	801a      	strh	r2, [r3, #0]
 8005da8:	e01a      	b.n	8005de0 <HAL_PCD_EP_DB_Transmit+0x48c>
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	785b      	ldrb	r3, [r3, #1]
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d116      	bne.n	8005de0 <HAL_PCD_EP_DB_Transmit+0x48c>
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	677b      	str	r3, [r7, #116]	; 0x74
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005dc6:	4413      	add	r3, r2
 8005dc8:	677b      	str	r3, [r7, #116]	; 0x74
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	011a      	lsls	r2, r3, #4
 8005dd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005dd2:	4413      	add	r3, r2
 8005dd4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005dd8:	673b      	str	r3, [r7, #112]	; 0x70
 8005dda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ddc:	2200      	movs	r2, #0
 8005dde:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	67bb      	str	r3, [r7, #120]	; 0x78
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	785b      	ldrb	r3, [r3, #1]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d12f      	bne.n	8005e4e <HAL_PCD_EP_DB_Transmit+0x4fa>
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	461a      	mov	r2, r3
 8005e02:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005e06:	4413      	add	r3, r2
 8005e08:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	011a      	lsls	r2, r3, #4
 8005e12:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005e16:	4413      	add	r3, r2
 8005e18:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005e20:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e24:	881b      	ldrh	r3, [r3, #0]
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e2c:	b29a      	uxth	r2, r3
 8005e2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e32:	801a      	strh	r2, [r3, #0]
 8005e34:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e38:	881b      	ldrh	r3, [r3, #0]
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e44:	b29a      	uxth	r2, r3
 8005e46:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e4a:	801a      	strh	r2, [r3, #0]
 8005e4c:	e017      	b.n	8005e7e <HAL_PCD_EP_DB_Transmit+0x52a>
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	785b      	ldrb	r3, [r3, #1]
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d113      	bne.n	8005e7e <HAL_PCD_EP_DB_Transmit+0x52a>
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	461a      	mov	r2, r3
 8005e62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e64:	4413      	add	r3, r2
 8005e66:	67bb      	str	r3, [r7, #120]	; 0x78
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	011a      	lsls	r2, r3, #4
 8005e6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e70:	4413      	add	r3, r2
 8005e72:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e76:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005e78:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	781b      	ldrb	r3, [r3, #0]
 8005e82:	4619      	mov	r1, r3
 8005e84:	68f8      	ldr	r0, [r7, #12]
 8005e86:	f005 feb6 	bl	800bbf6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005e8a:	88fb      	ldrh	r3, [r7, #6]
 8005e8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	f040 8104 	bne.w	800609e <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	4413      	add	r3, r2
 8005ea4:	881b      	ldrh	r3, [r3, #0]
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005eac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eb0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	461a      	mov	r2, r3
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	441a      	add	r2, r3
 8005ec2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005ec6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005eca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ece:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ed2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	8013      	strh	r3, [r2, #0]
 8005eda:	e0e0      	b.n	800609e <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005edc:	88fb      	ldrh	r3, [r7, #6]
 8005ede:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d121      	bne.n	8005f2a <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	461a      	mov	r2, r3
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	4413      	add	r3, r2
 8005ef4:	881b      	ldrh	r3, [r3, #0]
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005efc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f00:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	461a      	mov	r2, r3
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	009b      	lsls	r3, r3, #2
 8005f10:	441a      	add	r2, r3
 8005f12:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005f16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f1e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	f040 80b4 	bne.w	800609e <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	695a      	ldr	r2, [r3, #20]
 8005f3a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005f3e:	441a      	add	r2, r3
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	69da      	ldr	r2, [r3, #28]
 8005f48:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005f4c:	441a      	add	r2, r3
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	6a1a      	ldr	r2, [r3, #32]
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	691b      	ldr	r3, [r3, #16]
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d309      	bcc.n	8005f72 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	6a1a      	ldr	r2, [r3, #32]
 8005f68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f6a:	1ad2      	subs	r2, r2, r3
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	621a      	str	r2, [r3, #32]
 8005f70:	e015      	b.n	8005f9e <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	6a1b      	ldr	r3, [r3, #32]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d107      	bne.n	8005f8a <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8005f7a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005f7e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	2200      	movs	r2, #0
 8005f84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005f88:	e009      	b.n	8005f9e <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	6a1b      	ldr	r3, [r3, #32]
 8005f8e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	2200      	movs	r2, #0
 8005f94:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	667b      	str	r3, [r7, #100]	; 0x64
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	785b      	ldrb	r3, [r3, #1]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d155      	bne.n	8006058 <HAL_PCD_EP_DB_Transmit+0x704>
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fc0:	4413      	add	r3, r2
 8005fc2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	011a      	lsls	r2, r3, #4
 8005fca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fcc:	4413      	add	r3, r2
 8005fce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005fd2:	65bb      	str	r3, [r7, #88]	; 0x58
 8005fd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d112      	bne.n	8006000 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8005fda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005fdc:	881b      	ldrh	r3, [r3, #0]
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005fe4:	b29a      	uxth	r2, r3
 8005fe6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005fe8:	801a      	strh	r2, [r3, #0]
 8005fea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005fec:	881b      	ldrh	r3, [r3, #0]
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ff4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ff8:	b29a      	uxth	r2, r3
 8005ffa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ffc:	801a      	strh	r2, [r3, #0]
 8005ffe:	e044      	b.n	800608a <HAL_PCD_EP_DB_Transmit+0x736>
 8006000:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006002:	2b3e      	cmp	r3, #62	; 0x3e
 8006004:	d811      	bhi.n	800602a <HAL_PCD_EP_DB_Transmit+0x6d6>
 8006006:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006008:	085b      	lsrs	r3, r3, #1
 800600a:	657b      	str	r3, [r7, #84]	; 0x54
 800600c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800600e:	f003 0301 	and.w	r3, r3, #1
 8006012:	2b00      	cmp	r3, #0
 8006014:	d002      	beq.n	800601c <HAL_PCD_EP_DB_Transmit+0x6c8>
 8006016:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006018:	3301      	adds	r3, #1
 800601a:	657b      	str	r3, [r7, #84]	; 0x54
 800601c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800601e:	b29b      	uxth	r3, r3
 8006020:	029b      	lsls	r3, r3, #10
 8006022:	b29a      	uxth	r2, r3
 8006024:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006026:	801a      	strh	r2, [r3, #0]
 8006028:	e02f      	b.n	800608a <HAL_PCD_EP_DB_Transmit+0x736>
 800602a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800602c:	095b      	lsrs	r3, r3, #5
 800602e:	657b      	str	r3, [r7, #84]	; 0x54
 8006030:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006032:	f003 031f 	and.w	r3, r3, #31
 8006036:	2b00      	cmp	r3, #0
 8006038:	d102      	bne.n	8006040 <HAL_PCD_EP_DB_Transmit+0x6ec>
 800603a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800603c:	3b01      	subs	r3, #1
 800603e:	657b      	str	r3, [r7, #84]	; 0x54
 8006040:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006042:	b29b      	uxth	r3, r3
 8006044:	029b      	lsls	r3, r3, #10
 8006046:	b29b      	uxth	r3, r3
 8006048:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800604c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006050:	b29a      	uxth	r2, r3
 8006052:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006054:	801a      	strh	r2, [r3, #0]
 8006056:	e018      	b.n	800608a <HAL_PCD_EP_DB_Transmit+0x736>
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	785b      	ldrb	r3, [r3, #1]
 800605c:	2b01      	cmp	r3, #1
 800605e:	d114      	bne.n	800608a <HAL_PCD_EP_DB_Transmit+0x736>
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006068:	b29b      	uxth	r3, r3
 800606a:	461a      	mov	r2, r3
 800606c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800606e:	4413      	add	r3, r2
 8006070:	667b      	str	r3, [r7, #100]	; 0x64
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	011a      	lsls	r2, r3, #4
 8006078:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800607a:	4413      	add	r3, r2
 800607c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006080:	663b      	str	r3, [r7, #96]	; 0x60
 8006082:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006084:	b29a      	uxth	r2, r3
 8006086:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006088:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6818      	ldr	r0, [r3, #0]
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	6959      	ldr	r1, [r3, #20]
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	895a      	ldrh	r2, [r3, #10]
 8006096:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006098:	b29b      	uxth	r3, r3
 800609a:	f004 f95a 	bl	800a352 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	461a      	mov	r2, r3
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	4413      	add	r3, r2
 80060ac:	881b      	ldrh	r3, [r3, #0]
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060b8:	823b      	strh	r3, [r7, #16]
 80060ba:	8a3b      	ldrh	r3, [r7, #16]
 80060bc:	f083 0310 	eor.w	r3, r3, #16
 80060c0:	823b      	strh	r3, [r7, #16]
 80060c2:	8a3b      	ldrh	r3, [r7, #16]
 80060c4:	f083 0320 	eor.w	r3, r3, #32
 80060c8:	823b      	strh	r3, [r7, #16]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	461a      	mov	r2, r3
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	009b      	lsls	r3, r3, #2
 80060d6:	441a      	add	r2, r3
 80060d8:	8a3b      	ldrh	r3, [r7, #16]
 80060da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80060ee:	2300      	movs	r3, #0
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3788      	adds	r7, #136	; 0x88
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}

080060f8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b087      	sub	sp, #28
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	607b      	str	r3, [r7, #4]
 8006102:	460b      	mov	r3, r1
 8006104:	817b      	strh	r3, [r7, #10]
 8006106:	4613      	mov	r3, r2
 8006108:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800610a:	897b      	ldrh	r3, [r7, #10]
 800610c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006110:	b29b      	uxth	r3, r3
 8006112:	2b00      	cmp	r3, #0
 8006114:	d00b      	beq.n	800612e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006116:	897b      	ldrh	r3, [r7, #10]
 8006118:	f003 0307 	and.w	r3, r3, #7
 800611c:	1c5a      	adds	r2, r3, #1
 800611e:	4613      	mov	r3, r2
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	4413      	add	r3, r2
 8006124:	00db      	lsls	r3, r3, #3
 8006126:	68fa      	ldr	r2, [r7, #12]
 8006128:	4413      	add	r3, r2
 800612a:	617b      	str	r3, [r7, #20]
 800612c:	e009      	b.n	8006142 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800612e:	897a      	ldrh	r2, [r7, #10]
 8006130:	4613      	mov	r3, r2
 8006132:	009b      	lsls	r3, r3, #2
 8006134:	4413      	add	r3, r2
 8006136:	00db      	lsls	r3, r3, #3
 8006138:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800613c:	68fa      	ldr	r2, [r7, #12]
 800613e:	4413      	add	r3, r2
 8006140:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006142:	893b      	ldrh	r3, [r7, #8]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d107      	bne.n	8006158 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	2200      	movs	r2, #0
 800614c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	b29a      	uxth	r2, r3
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	80da      	strh	r2, [r3, #6]
 8006156:	e00b      	b.n	8006170 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	2201      	movs	r2, #1
 800615c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	b29a      	uxth	r2, r3
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	0c1b      	lsrs	r3, r3, #16
 800616a:	b29a      	uxth	r2, r3
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8006170:	2300      	movs	r3, #0
}
 8006172:	4618      	mov	r0, r3
 8006174:	371c      	adds	r7, #28
 8006176:	46bd      	mov	sp, r7
 8006178:	bc80      	pop	{r7}
 800617a:	4770      	bx	lr

0800617c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b086      	sub	sp, #24
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d101      	bne.n	800618e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800618a:	2301      	movs	r3, #1
 800618c:	e26c      	b.n	8006668 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f003 0301 	and.w	r3, r3, #1
 8006196:	2b00      	cmp	r3, #0
 8006198:	f000 8087 	beq.w	80062aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800619c:	4b92      	ldr	r3, [pc, #584]	; (80063e8 <HAL_RCC_OscConfig+0x26c>)
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	f003 030c 	and.w	r3, r3, #12
 80061a4:	2b04      	cmp	r3, #4
 80061a6:	d00c      	beq.n	80061c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80061a8:	4b8f      	ldr	r3, [pc, #572]	; (80063e8 <HAL_RCC_OscConfig+0x26c>)
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	f003 030c 	and.w	r3, r3, #12
 80061b0:	2b08      	cmp	r3, #8
 80061b2:	d112      	bne.n	80061da <HAL_RCC_OscConfig+0x5e>
 80061b4:	4b8c      	ldr	r3, [pc, #560]	; (80063e8 <HAL_RCC_OscConfig+0x26c>)
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061c0:	d10b      	bne.n	80061da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061c2:	4b89      	ldr	r3, [pc, #548]	; (80063e8 <HAL_RCC_OscConfig+0x26c>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d06c      	beq.n	80062a8 <HAL_RCC_OscConfig+0x12c>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d168      	bne.n	80062a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	e246      	b.n	8006668 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061e2:	d106      	bne.n	80061f2 <HAL_RCC_OscConfig+0x76>
 80061e4:	4b80      	ldr	r3, [pc, #512]	; (80063e8 <HAL_RCC_OscConfig+0x26c>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a7f      	ldr	r2, [pc, #508]	; (80063e8 <HAL_RCC_OscConfig+0x26c>)
 80061ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061ee:	6013      	str	r3, [r2, #0]
 80061f0:	e02e      	b.n	8006250 <HAL_RCC_OscConfig+0xd4>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d10c      	bne.n	8006214 <HAL_RCC_OscConfig+0x98>
 80061fa:	4b7b      	ldr	r3, [pc, #492]	; (80063e8 <HAL_RCC_OscConfig+0x26c>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a7a      	ldr	r2, [pc, #488]	; (80063e8 <HAL_RCC_OscConfig+0x26c>)
 8006200:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006204:	6013      	str	r3, [r2, #0]
 8006206:	4b78      	ldr	r3, [pc, #480]	; (80063e8 <HAL_RCC_OscConfig+0x26c>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a77      	ldr	r2, [pc, #476]	; (80063e8 <HAL_RCC_OscConfig+0x26c>)
 800620c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006210:	6013      	str	r3, [r2, #0]
 8006212:	e01d      	b.n	8006250 <HAL_RCC_OscConfig+0xd4>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800621c:	d10c      	bne.n	8006238 <HAL_RCC_OscConfig+0xbc>
 800621e:	4b72      	ldr	r3, [pc, #456]	; (80063e8 <HAL_RCC_OscConfig+0x26c>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a71      	ldr	r2, [pc, #452]	; (80063e8 <HAL_RCC_OscConfig+0x26c>)
 8006224:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006228:	6013      	str	r3, [r2, #0]
 800622a:	4b6f      	ldr	r3, [pc, #444]	; (80063e8 <HAL_RCC_OscConfig+0x26c>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a6e      	ldr	r2, [pc, #440]	; (80063e8 <HAL_RCC_OscConfig+0x26c>)
 8006230:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006234:	6013      	str	r3, [r2, #0]
 8006236:	e00b      	b.n	8006250 <HAL_RCC_OscConfig+0xd4>
 8006238:	4b6b      	ldr	r3, [pc, #428]	; (80063e8 <HAL_RCC_OscConfig+0x26c>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a6a      	ldr	r2, [pc, #424]	; (80063e8 <HAL_RCC_OscConfig+0x26c>)
 800623e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006242:	6013      	str	r3, [r2, #0]
 8006244:	4b68      	ldr	r3, [pc, #416]	; (80063e8 <HAL_RCC_OscConfig+0x26c>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a67      	ldr	r2, [pc, #412]	; (80063e8 <HAL_RCC_OscConfig+0x26c>)
 800624a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800624e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d013      	beq.n	8006280 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006258:	f7fc fa3a 	bl	80026d0 <HAL_GetTick>
 800625c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800625e:	e008      	b.n	8006272 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006260:	f7fc fa36 	bl	80026d0 <HAL_GetTick>
 8006264:	4602      	mov	r2, r0
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	1ad3      	subs	r3, r2, r3
 800626a:	2b64      	cmp	r3, #100	; 0x64
 800626c:	d901      	bls.n	8006272 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800626e:	2303      	movs	r3, #3
 8006270:	e1fa      	b.n	8006668 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006272:	4b5d      	ldr	r3, [pc, #372]	; (80063e8 <HAL_RCC_OscConfig+0x26c>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800627a:	2b00      	cmp	r3, #0
 800627c:	d0f0      	beq.n	8006260 <HAL_RCC_OscConfig+0xe4>
 800627e:	e014      	b.n	80062aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006280:	f7fc fa26 	bl	80026d0 <HAL_GetTick>
 8006284:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006286:	e008      	b.n	800629a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006288:	f7fc fa22 	bl	80026d0 <HAL_GetTick>
 800628c:	4602      	mov	r2, r0
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	1ad3      	subs	r3, r2, r3
 8006292:	2b64      	cmp	r3, #100	; 0x64
 8006294:	d901      	bls.n	800629a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006296:	2303      	movs	r3, #3
 8006298:	e1e6      	b.n	8006668 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800629a:	4b53      	ldr	r3, [pc, #332]	; (80063e8 <HAL_RCC_OscConfig+0x26c>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d1f0      	bne.n	8006288 <HAL_RCC_OscConfig+0x10c>
 80062a6:	e000      	b.n	80062aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f003 0302 	and.w	r3, r3, #2
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d063      	beq.n	800637e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80062b6:	4b4c      	ldr	r3, [pc, #304]	; (80063e8 <HAL_RCC_OscConfig+0x26c>)
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	f003 030c 	and.w	r3, r3, #12
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d00b      	beq.n	80062da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80062c2:	4b49      	ldr	r3, [pc, #292]	; (80063e8 <HAL_RCC_OscConfig+0x26c>)
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	f003 030c 	and.w	r3, r3, #12
 80062ca:	2b08      	cmp	r3, #8
 80062cc:	d11c      	bne.n	8006308 <HAL_RCC_OscConfig+0x18c>
 80062ce:	4b46      	ldr	r3, [pc, #280]	; (80063e8 <HAL_RCC_OscConfig+0x26c>)
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d116      	bne.n	8006308 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062da:	4b43      	ldr	r3, [pc, #268]	; (80063e8 <HAL_RCC_OscConfig+0x26c>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f003 0302 	and.w	r3, r3, #2
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d005      	beq.n	80062f2 <HAL_RCC_OscConfig+0x176>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	691b      	ldr	r3, [r3, #16]
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d001      	beq.n	80062f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	e1ba      	b.n	8006668 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062f2:	4b3d      	ldr	r3, [pc, #244]	; (80063e8 <HAL_RCC_OscConfig+0x26c>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	695b      	ldr	r3, [r3, #20]
 80062fe:	00db      	lsls	r3, r3, #3
 8006300:	4939      	ldr	r1, [pc, #228]	; (80063e8 <HAL_RCC_OscConfig+0x26c>)
 8006302:	4313      	orrs	r3, r2
 8006304:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006306:	e03a      	b.n	800637e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	691b      	ldr	r3, [r3, #16]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d020      	beq.n	8006352 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006310:	4b36      	ldr	r3, [pc, #216]	; (80063ec <HAL_RCC_OscConfig+0x270>)
 8006312:	2201      	movs	r2, #1
 8006314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006316:	f7fc f9db 	bl	80026d0 <HAL_GetTick>
 800631a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800631c:	e008      	b.n	8006330 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800631e:	f7fc f9d7 	bl	80026d0 <HAL_GetTick>
 8006322:	4602      	mov	r2, r0
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	1ad3      	subs	r3, r2, r3
 8006328:	2b02      	cmp	r3, #2
 800632a:	d901      	bls.n	8006330 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800632c:	2303      	movs	r3, #3
 800632e:	e19b      	b.n	8006668 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006330:	4b2d      	ldr	r3, [pc, #180]	; (80063e8 <HAL_RCC_OscConfig+0x26c>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f003 0302 	and.w	r3, r3, #2
 8006338:	2b00      	cmp	r3, #0
 800633a:	d0f0      	beq.n	800631e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800633c:	4b2a      	ldr	r3, [pc, #168]	; (80063e8 <HAL_RCC_OscConfig+0x26c>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	695b      	ldr	r3, [r3, #20]
 8006348:	00db      	lsls	r3, r3, #3
 800634a:	4927      	ldr	r1, [pc, #156]	; (80063e8 <HAL_RCC_OscConfig+0x26c>)
 800634c:	4313      	orrs	r3, r2
 800634e:	600b      	str	r3, [r1, #0]
 8006350:	e015      	b.n	800637e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006352:	4b26      	ldr	r3, [pc, #152]	; (80063ec <HAL_RCC_OscConfig+0x270>)
 8006354:	2200      	movs	r2, #0
 8006356:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006358:	f7fc f9ba 	bl	80026d0 <HAL_GetTick>
 800635c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800635e:	e008      	b.n	8006372 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006360:	f7fc f9b6 	bl	80026d0 <HAL_GetTick>
 8006364:	4602      	mov	r2, r0
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	1ad3      	subs	r3, r2, r3
 800636a:	2b02      	cmp	r3, #2
 800636c:	d901      	bls.n	8006372 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800636e:	2303      	movs	r3, #3
 8006370:	e17a      	b.n	8006668 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006372:	4b1d      	ldr	r3, [pc, #116]	; (80063e8 <HAL_RCC_OscConfig+0x26c>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f003 0302 	and.w	r3, r3, #2
 800637a:	2b00      	cmp	r3, #0
 800637c:	d1f0      	bne.n	8006360 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f003 0308 	and.w	r3, r3, #8
 8006386:	2b00      	cmp	r3, #0
 8006388:	d03a      	beq.n	8006400 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	699b      	ldr	r3, [r3, #24]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d019      	beq.n	80063c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006392:	4b17      	ldr	r3, [pc, #92]	; (80063f0 <HAL_RCC_OscConfig+0x274>)
 8006394:	2201      	movs	r2, #1
 8006396:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006398:	f7fc f99a 	bl	80026d0 <HAL_GetTick>
 800639c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800639e:	e008      	b.n	80063b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063a0:	f7fc f996 	bl	80026d0 <HAL_GetTick>
 80063a4:	4602      	mov	r2, r0
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	1ad3      	subs	r3, r2, r3
 80063aa:	2b02      	cmp	r3, #2
 80063ac:	d901      	bls.n	80063b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80063ae:	2303      	movs	r3, #3
 80063b0:	e15a      	b.n	8006668 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063b2:	4b0d      	ldr	r3, [pc, #52]	; (80063e8 <HAL_RCC_OscConfig+0x26c>)
 80063b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b6:	f003 0302 	and.w	r3, r3, #2
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d0f0      	beq.n	80063a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80063be:	2001      	movs	r0, #1
 80063c0:	f000 fad8 	bl	8006974 <RCC_Delay>
 80063c4:	e01c      	b.n	8006400 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063c6:	4b0a      	ldr	r3, [pc, #40]	; (80063f0 <HAL_RCC_OscConfig+0x274>)
 80063c8:	2200      	movs	r2, #0
 80063ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063cc:	f7fc f980 	bl	80026d0 <HAL_GetTick>
 80063d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063d2:	e00f      	b.n	80063f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063d4:	f7fc f97c 	bl	80026d0 <HAL_GetTick>
 80063d8:	4602      	mov	r2, r0
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	1ad3      	subs	r3, r2, r3
 80063de:	2b02      	cmp	r3, #2
 80063e0:	d908      	bls.n	80063f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80063e2:	2303      	movs	r3, #3
 80063e4:	e140      	b.n	8006668 <HAL_RCC_OscConfig+0x4ec>
 80063e6:	bf00      	nop
 80063e8:	40021000 	.word	0x40021000
 80063ec:	42420000 	.word	0x42420000
 80063f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063f4:	4b9e      	ldr	r3, [pc, #632]	; (8006670 <HAL_RCC_OscConfig+0x4f4>)
 80063f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f8:	f003 0302 	and.w	r3, r3, #2
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d1e9      	bne.n	80063d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f003 0304 	and.w	r3, r3, #4
 8006408:	2b00      	cmp	r3, #0
 800640a:	f000 80a6 	beq.w	800655a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800640e:	2300      	movs	r3, #0
 8006410:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006412:	4b97      	ldr	r3, [pc, #604]	; (8006670 <HAL_RCC_OscConfig+0x4f4>)
 8006414:	69db      	ldr	r3, [r3, #28]
 8006416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800641a:	2b00      	cmp	r3, #0
 800641c:	d10d      	bne.n	800643a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800641e:	4b94      	ldr	r3, [pc, #592]	; (8006670 <HAL_RCC_OscConfig+0x4f4>)
 8006420:	69db      	ldr	r3, [r3, #28]
 8006422:	4a93      	ldr	r2, [pc, #588]	; (8006670 <HAL_RCC_OscConfig+0x4f4>)
 8006424:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006428:	61d3      	str	r3, [r2, #28]
 800642a:	4b91      	ldr	r3, [pc, #580]	; (8006670 <HAL_RCC_OscConfig+0x4f4>)
 800642c:	69db      	ldr	r3, [r3, #28]
 800642e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006432:	60bb      	str	r3, [r7, #8]
 8006434:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006436:	2301      	movs	r3, #1
 8006438:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800643a:	4b8e      	ldr	r3, [pc, #568]	; (8006674 <HAL_RCC_OscConfig+0x4f8>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006442:	2b00      	cmp	r3, #0
 8006444:	d118      	bne.n	8006478 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006446:	4b8b      	ldr	r3, [pc, #556]	; (8006674 <HAL_RCC_OscConfig+0x4f8>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a8a      	ldr	r2, [pc, #552]	; (8006674 <HAL_RCC_OscConfig+0x4f8>)
 800644c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006450:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006452:	f7fc f93d 	bl	80026d0 <HAL_GetTick>
 8006456:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006458:	e008      	b.n	800646c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800645a:	f7fc f939 	bl	80026d0 <HAL_GetTick>
 800645e:	4602      	mov	r2, r0
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	1ad3      	subs	r3, r2, r3
 8006464:	2b64      	cmp	r3, #100	; 0x64
 8006466:	d901      	bls.n	800646c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006468:	2303      	movs	r3, #3
 800646a:	e0fd      	b.n	8006668 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800646c:	4b81      	ldr	r3, [pc, #516]	; (8006674 <HAL_RCC_OscConfig+0x4f8>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006474:	2b00      	cmp	r3, #0
 8006476:	d0f0      	beq.n	800645a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	2b01      	cmp	r3, #1
 800647e:	d106      	bne.n	800648e <HAL_RCC_OscConfig+0x312>
 8006480:	4b7b      	ldr	r3, [pc, #492]	; (8006670 <HAL_RCC_OscConfig+0x4f4>)
 8006482:	6a1b      	ldr	r3, [r3, #32]
 8006484:	4a7a      	ldr	r2, [pc, #488]	; (8006670 <HAL_RCC_OscConfig+0x4f4>)
 8006486:	f043 0301 	orr.w	r3, r3, #1
 800648a:	6213      	str	r3, [r2, #32]
 800648c:	e02d      	b.n	80064ea <HAL_RCC_OscConfig+0x36e>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	68db      	ldr	r3, [r3, #12]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d10c      	bne.n	80064b0 <HAL_RCC_OscConfig+0x334>
 8006496:	4b76      	ldr	r3, [pc, #472]	; (8006670 <HAL_RCC_OscConfig+0x4f4>)
 8006498:	6a1b      	ldr	r3, [r3, #32]
 800649a:	4a75      	ldr	r2, [pc, #468]	; (8006670 <HAL_RCC_OscConfig+0x4f4>)
 800649c:	f023 0301 	bic.w	r3, r3, #1
 80064a0:	6213      	str	r3, [r2, #32]
 80064a2:	4b73      	ldr	r3, [pc, #460]	; (8006670 <HAL_RCC_OscConfig+0x4f4>)
 80064a4:	6a1b      	ldr	r3, [r3, #32]
 80064a6:	4a72      	ldr	r2, [pc, #456]	; (8006670 <HAL_RCC_OscConfig+0x4f4>)
 80064a8:	f023 0304 	bic.w	r3, r3, #4
 80064ac:	6213      	str	r3, [r2, #32]
 80064ae:	e01c      	b.n	80064ea <HAL_RCC_OscConfig+0x36e>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	68db      	ldr	r3, [r3, #12]
 80064b4:	2b05      	cmp	r3, #5
 80064b6:	d10c      	bne.n	80064d2 <HAL_RCC_OscConfig+0x356>
 80064b8:	4b6d      	ldr	r3, [pc, #436]	; (8006670 <HAL_RCC_OscConfig+0x4f4>)
 80064ba:	6a1b      	ldr	r3, [r3, #32]
 80064bc:	4a6c      	ldr	r2, [pc, #432]	; (8006670 <HAL_RCC_OscConfig+0x4f4>)
 80064be:	f043 0304 	orr.w	r3, r3, #4
 80064c2:	6213      	str	r3, [r2, #32]
 80064c4:	4b6a      	ldr	r3, [pc, #424]	; (8006670 <HAL_RCC_OscConfig+0x4f4>)
 80064c6:	6a1b      	ldr	r3, [r3, #32]
 80064c8:	4a69      	ldr	r2, [pc, #420]	; (8006670 <HAL_RCC_OscConfig+0x4f4>)
 80064ca:	f043 0301 	orr.w	r3, r3, #1
 80064ce:	6213      	str	r3, [r2, #32]
 80064d0:	e00b      	b.n	80064ea <HAL_RCC_OscConfig+0x36e>
 80064d2:	4b67      	ldr	r3, [pc, #412]	; (8006670 <HAL_RCC_OscConfig+0x4f4>)
 80064d4:	6a1b      	ldr	r3, [r3, #32]
 80064d6:	4a66      	ldr	r2, [pc, #408]	; (8006670 <HAL_RCC_OscConfig+0x4f4>)
 80064d8:	f023 0301 	bic.w	r3, r3, #1
 80064dc:	6213      	str	r3, [r2, #32]
 80064de:	4b64      	ldr	r3, [pc, #400]	; (8006670 <HAL_RCC_OscConfig+0x4f4>)
 80064e0:	6a1b      	ldr	r3, [r3, #32]
 80064e2:	4a63      	ldr	r2, [pc, #396]	; (8006670 <HAL_RCC_OscConfig+0x4f4>)
 80064e4:	f023 0304 	bic.w	r3, r3, #4
 80064e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	68db      	ldr	r3, [r3, #12]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d015      	beq.n	800651e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064f2:	f7fc f8ed 	bl	80026d0 <HAL_GetTick>
 80064f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064f8:	e00a      	b.n	8006510 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064fa:	f7fc f8e9 	bl	80026d0 <HAL_GetTick>
 80064fe:	4602      	mov	r2, r0
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	1ad3      	subs	r3, r2, r3
 8006504:	f241 3288 	movw	r2, #5000	; 0x1388
 8006508:	4293      	cmp	r3, r2
 800650a:	d901      	bls.n	8006510 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800650c:	2303      	movs	r3, #3
 800650e:	e0ab      	b.n	8006668 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006510:	4b57      	ldr	r3, [pc, #348]	; (8006670 <HAL_RCC_OscConfig+0x4f4>)
 8006512:	6a1b      	ldr	r3, [r3, #32]
 8006514:	f003 0302 	and.w	r3, r3, #2
 8006518:	2b00      	cmp	r3, #0
 800651a:	d0ee      	beq.n	80064fa <HAL_RCC_OscConfig+0x37e>
 800651c:	e014      	b.n	8006548 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800651e:	f7fc f8d7 	bl	80026d0 <HAL_GetTick>
 8006522:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006524:	e00a      	b.n	800653c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006526:	f7fc f8d3 	bl	80026d0 <HAL_GetTick>
 800652a:	4602      	mov	r2, r0
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	1ad3      	subs	r3, r2, r3
 8006530:	f241 3288 	movw	r2, #5000	; 0x1388
 8006534:	4293      	cmp	r3, r2
 8006536:	d901      	bls.n	800653c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006538:	2303      	movs	r3, #3
 800653a:	e095      	b.n	8006668 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800653c:	4b4c      	ldr	r3, [pc, #304]	; (8006670 <HAL_RCC_OscConfig+0x4f4>)
 800653e:	6a1b      	ldr	r3, [r3, #32]
 8006540:	f003 0302 	and.w	r3, r3, #2
 8006544:	2b00      	cmp	r3, #0
 8006546:	d1ee      	bne.n	8006526 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006548:	7dfb      	ldrb	r3, [r7, #23]
 800654a:	2b01      	cmp	r3, #1
 800654c:	d105      	bne.n	800655a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800654e:	4b48      	ldr	r3, [pc, #288]	; (8006670 <HAL_RCC_OscConfig+0x4f4>)
 8006550:	69db      	ldr	r3, [r3, #28]
 8006552:	4a47      	ldr	r2, [pc, #284]	; (8006670 <HAL_RCC_OscConfig+0x4f4>)
 8006554:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006558:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	69db      	ldr	r3, [r3, #28]
 800655e:	2b00      	cmp	r3, #0
 8006560:	f000 8081 	beq.w	8006666 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006564:	4b42      	ldr	r3, [pc, #264]	; (8006670 <HAL_RCC_OscConfig+0x4f4>)
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	f003 030c 	and.w	r3, r3, #12
 800656c:	2b08      	cmp	r3, #8
 800656e:	d061      	beq.n	8006634 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	69db      	ldr	r3, [r3, #28]
 8006574:	2b02      	cmp	r3, #2
 8006576:	d146      	bne.n	8006606 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006578:	4b3f      	ldr	r3, [pc, #252]	; (8006678 <HAL_RCC_OscConfig+0x4fc>)
 800657a:	2200      	movs	r2, #0
 800657c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800657e:	f7fc f8a7 	bl	80026d0 <HAL_GetTick>
 8006582:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006584:	e008      	b.n	8006598 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006586:	f7fc f8a3 	bl	80026d0 <HAL_GetTick>
 800658a:	4602      	mov	r2, r0
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	1ad3      	subs	r3, r2, r3
 8006590:	2b02      	cmp	r3, #2
 8006592:	d901      	bls.n	8006598 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006594:	2303      	movs	r3, #3
 8006596:	e067      	b.n	8006668 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006598:	4b35      	ldr	r3, [pc, #212]	; (8006670 <HAL_RCC_OscConfig+0x4f4>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d1f0      	bne.n	8006586 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6a1b      	ldr	r3, [r3, #32]
 80065a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065ac:	d108      	bne.n	80065c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80065ae:	4b30      	ldr	r3, [pc, #192]	; (8006670 <HAL_RCC_OscConfig+0x4f4>)
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	492d      	ldr	r1, [pc, #180]	; (8006670 <HAL_RCC_OscConfig+0x4f4>)
 80065bc:	4313      	orrs	r3, r2
 80065be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80065c0:	4b2b      	ldr	r3, [pc, #172]	; (8006670 <HAL_RCC_OscConfig+0x4f4>)
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6a19      	ldr	r1, [r3, #32]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d0:	430b      	orrs	r3, r1
 80065d2:	4927      	ldr	r1, [pc, #156]	; (8006670 <HAL_RCC_OscConfig+0x4f4>)
 80065d4:	4313      	orrs	r3, r2
 80065d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80065d8:	4b27      	ldr	r3, [pc, #156]	; (8006678 <HAL_RCC_OscConfig+0x4fc>)
 80065da:	2201      	movs	r2, #1
 80065dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065de:	f7fc f877 	bl	80026d0 <HAL_GetTick>
 80065e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80065e4:	e008      	b.n	80065f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065e6:	f7fc f873 	bl	80026d0 <HAL_GetTick>
 80065ea:	4602      	mov	r2, r0
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	1ad3      	subs	r3, r2, r3
 80065f0:	2b02      	cmp	r3, #2
 80065f2:	d901      	bls.n	80065f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80065f4:	2303      	movs	r3, #3
 80065f6:	e037      	b.n	8006668 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80065f8:	4b1d      	ldr	r3, [pc, #116]	; (8006670 <HAL_RCC_OscConfig+0x4f4>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006600:	2b00      	cmp	r3, #0
 8006602:	d0f0      	beq.n	80065e6 <HAL_RCC_OscConfig+0x46a>
 8006604:	e02f      	b.n	8006666 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006606:	4b1c      	ldr	r3, [pc, #112]	; (8006678 <HAL_RCC_OscConfig+0x4fc>)
 8006608:	2200      	movs	r2, #0
 800660a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800660c:	f7fc f860 	bl	80026d0 <HAL_GetTick>
 8006610:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006612:	e008      	b.n	8006626 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006614:	f7fc f85c 	bl	80026d0 <HAL_GetTick>
 8006618:	4602      	mov	r2, r0
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	1ad3      	subs	r3, r2, r3
 800661e:	2b02      	cmp	r3, #2
 8006620:	d901      	bls.n	8006626 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006622:	2303      	movs	r3, #3
 8006624:	e020      	b.n	8006668 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006626:	4b12      	ldr	r3, [pc, #72]	; (8006670 <HAL_RCC_OscConfig+0x4f4>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800662e:	2b00      	cmp	r3, #0
 8006630:	d1f0      	bne.n	8006614 <HAL_RCC_OscConfig+0x498>
 8006632:	e018      	b.n	8006666 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	69db      	ldr	r3, [r3, #28]
 8006638:	2b01      	cmp	r3, #1
 800663a:	d101      	bne.n	8006640 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800663c:	2301      	movs	r3, #1
 800663e:	e013      	b.n	8006668 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006640:	4b0b      	ldr	r3, [pc, #44]	; (8006670 <HAL_RCC_OscConfig+0x4f4>)
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6a1b      	ldr	r3, [r3, #32]
 8006650:	429a      	cmp	r2, r3
 8006652:	d106      	bne.n	8006662 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800665e:	429a      	cmp	r2, r3
 8006660:	d001      	beq.n	8006666 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8006662:	2301      	movs	r3, #1
 8006664:	e000      	b.n	8006668 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8006666:	2300      	movs	r3, #0
}
 8006668:	4618      	mov	r0, r3
 800666a:	3718      	adds	r7, #24
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}
 8006670:	40021000 	.word	0x40021000
 8006674:	40007000 	.word	0x40007000
 8006678:	42420060 	.word	0x42420060

0800667c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b084      	sub	sp, #16
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d101      	bne.n	8006690 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	e0d0      	b.n	8006832 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006690:	4b6a      	ldr	r3, [pc, #424]	; (800683c <HAL_RCC_ClockConfig+0x1c0>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f003 0307 	and.w	r3, r3, #7
 8006698:	683a      	ldr	r2, [r7, #0]
 800669a:	429a      	cmp	r2, r3
 800669c:	d910      	bls.n	80066c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800669e:	4b67      	ldr	r3, [pc, #412]	; (800683c <HAL_RCC_ClockConfig+0x1c0>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f023 0207 	bic.w	r2, r3, #7
 80066a6:	4965      	ldr	r1, [pc, #404]	; (800683c <HAL_RCC_ClockConfig+0x1c0>)
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	4313      	orrs	r3, r2
 80066ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066ae:	4b63      	ldr	r3, [pc, #396]	; (800683c <HAL_RCC_ClockConfig+0x1c0>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f003 0307 	and.w	r3, r3, #7
 80066b6:	683a      	ldr	r2, [r7, #0]
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d001      	beq.n	80066c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80066bc:	2301      	movs	r3, #1
 80066be:	e0b8      	b.n	8006832 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f003 0302 	and.w	r3, r3, #2
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d020      	beq.n	800670e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f003 0304 	and.w	r3, r3, #4
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d005      	beq.n	80066e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80066d8:	4b59      	ldr	r3, [pc, #356]	; (8006840 <HAL_RCC_ClockConfig+0x1c4>)
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	4a58      	ldr	r2, [pc, #352]	; (8006840 <HAL_RCC_ClockConfig+0x1c4>)
 80066de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80066e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f003 0308 	and.w	r3, r3, #8
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d005      	beq.n	80066fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80066f0:	4b53      	ldr	r3, [pc, #332]	; (8006840 <HAL_RCC_ClockConfig+0x1c4>)
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	4a52      	ldr	r2, [pc, #328]	; (8006840 <HAL_RCC_ClockConfig+0x1c4>)
 80066f6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80066fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066fc:	4b50      	ldr	r3, [pc, #320]	; (8006840 <HAL_RCC_ClockConfig+0x1c4>)
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	494d      	ldr	r1, [pc, #308]	; (8006840 <HAL_RCC_ClockConfig+0x1c4>)
 800670a:	4313      	orrs	r3, r2
 800670c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f003 0301 	and.w	r3, r3, #1
 8006716:	2b00      	cmp	r3, #0
 8006718:	d040      	beq.n	800679c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	2b01      	cmp	r3, #1
 8006720:	d107      	bne.n	8006732 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006722:	4b47      	ldr	r3, [pc, #284]	; (8006840 <HAL_RCC_ClockConfig+0x1c4>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800672a:	2b00      	cmp	r3, #0
 800672c:	d115      	bne.n	800675a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	e07f      	b.n	8006832 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	2b02      	cmp	r3, #2
 8006738:	d107      	bne.n	800674a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800673a:	4b41      	ldr	r3, [pc, #260]	; (8006840 <HAL_RCC_ClockConfig+0x1c4>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006742:	2b00      	cmp	r3, #0
 8006744:	d109      	bne.n	800675a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006746:	2301      	movs	r3, #1
 8006748:	e073      	b.n	8006832 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800674a:	4b3d      	ldr	r3, [pc, #244]	; (8006840 <HAL_RCC_ClockConfig+0x1c4>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f003 0302 	and.w	r3, r3, #2
 8006752:	2b00      	cmp	r3, #0
 8006754:	d101      	bne.n	800675a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	e06b      	b.n	8006832 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800675a:	4b39      	ldr	r3, [pc, #228]	; (8006840 <HAL_RCC_ClockConfig+0x1c4>)
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	f023 0203 	bic.w	r2, r3, #3
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	4936      	ldr	r1, [pc, #216]	; (8006840 <HAL_RCC_ClockConfig+0x1c4>)
 8006768:	4313      	orrs	r3, r2
 800676a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800676c:	f7fb ffb0 	bl	80026d0 <HAL_GetTick>
 8006770:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006772:	e00a      	b.n	800678a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006774:	f7fb ffac 	bl	80026d0 <HAL_GetTick>
 8006778:	4602      	mov	r2, r0
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	1ad3      	subs	r3, r2, r3
 800677e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006782:	4293      	cmp	r3, r2
 8006784:	d901      	bls.n	800678a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006786:	2303      	movs	r3, #3
 8006788:	e053      	b.n	8006832 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800678a:	4b2d      	ldr	r3, [pc, #180]	; (8006840 <HAL_RCC_ClockConfig+0x1c4>)
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	f003 020c 	and.w	r2, r3, #12
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	009b      	lsls	r3, r3, #2
 8006798:	429a      	cmp	r2, r3
 800679a:	d1eb      	bne.n	8006774 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800679c:	4b27      	ldr	r3, [pc, #156]	; (800683c <HAL_RCC_ClockConfig+0x1c0>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f003 0307 	and.w	r3, r3, #7
 80067a4:	683a      	ldr	r2, [r7, #0]
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d210      	bcs.n	80067cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067aa:	4b24      	ldr	r3, [pc, #144]	; (800683c <HAL_RCC_ClockConfig+0x1c0>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f023 0207 	bic.w	r2, r3, #7
 80067b2:	4922      	ldr	r1, [pc, #136]	; (800683c <HAL_RCC_ClockConfig+0x1c0>)
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	4313      	orrs	r3, r2
 80067b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067ba:	4b20      	ldr	r3, [pc, #128]	; (800683c <HAL_RCC_ClockConfig+0x1c0>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f003 0307 	and.w	r3, r3, #7
 80067c2:	683a      	ldr	r2, [r7, #0]
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d001      	beq.n	80067cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80067c8:	2301      	movs	r3, #1
 80067ca:	e032      	b.n	8006832 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f003 0304 	and.w	r3, r3, #4
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d008      	beq.n	80067ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80067d8:	4b19      	ldr	r3, [pc, #100]	; (8006840 <HAL_RCC_ClockConfig+0x1c4>)
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	4916      	ldr	r1, [pc, #88]	; (8006840 <HAL_RCC_ClockConfig+0x1c4>)
 80067e6:	4313      	orrs	r3, r2
 80067e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f003 0308 	and.w	r3, r3, #8
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d009      	beq.n	800680a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80067f6:	4b12      	ldr	r3, [pc, #72]	; (8006840 <HAL_RCC_ClockConfig+0x1c4>)
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	691b      	ldr	r3, [r3, #16]
 8006802:	00db      	lsls	r3, r3, #3
 8006804:	490e      	ldr	r1, [pc, #56]	; (8006840 <HAL_RCC_ClockConfig+0x1c4>)
 8006806:	4313      	orrs	r3, r2
 8006808:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800680a:	f000 f821 	bl	8006850 <HAL_RCC_GetSysClockFreq>
 800680e:	4602      	mov	r2, r0
 8006810:	4b0b      	ldr	r3, [pc, #44]	; (8006840 <HAL_RCC_ClockConfig+0x1c4>)
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	091b      	lsrs	r3, r3, #4
 8006816:	f003 030f 	and.w	r3, r3, #15
 800681a:	490a      	ldr	r1, [pc, #40]	; (8006844 <HAL_RCC_ClockConfig+0x1c8>)
 800681c:	5ccb      	ldrb	r3, [r1, r3]
 800681e:	fa22 f303 	lsr.w	r3, r2, r3
 8006822:	4a09      	ldr	r2, [pc, #36]	; (8006848 <HAL_RCC_ClockConfig+0x1cc>)
 8006824:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006826:	4b09      	ldr	r3, [pc, #36]	; (800684c <HAL_RCC_ClockConfig+0x1d0>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4618      	mov	r0, r3
 800682c:	f7fb ff0e 	bl	800264c <HAL_InitTick>

  return HAL_OK;
 8006830:	2300      	movs	r3, #0
}
 8006832:	4618      	mov	r0, r3
 8006834:	3710      	adds	r7, #16
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}
 800683a:	bf00      	nop
 800683c:	40022000 	.word	0x40022000
 8006840:	40021000 	.word	0x40021000
 8006844:	0800f514 	.word	0x0800f514
 8006848:	2000009c 	.word	0x2000009c
 800684c:	200000a0 	.word	0x200000a0

08006850 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006850:	b490      	push	{r4, r7}
 8006852:	b08a      	sub	sp, #40	; 0x28
 8006854:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006856:	4b2a      	ldr	r3, [pc, #168]	; (8006900 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006858:	1d3c      	adds	r4, r7, #4
 800685a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800685c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006860:	f240 2301 	movw	r3, #513	; 0x201
 8006864:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006866:	2300      	movs	r3, #0
 8006868:	61fb      	str	r3, [r7, #28]
 800686a:	2300      	movs	r3, #0
 800686c:	61bb      	str	r3, [r7, #24]
 800686e:	2300      	movs	r3, #0
 8006870:	627b      	str	r3, [r7, #36]	; 0x24
 8006872:	2300      	movs	r3, #0
 8006874:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006876:	2300      	movs	r3, #0
 8006878:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800687a:	4b22      	ldr	r3, [pc, #136]	; (8006904 <HAL_RCC_GetSysClockFreq+0xb4>)
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006880:	69fb      	ldr	r3, [r7, #28]
 8006882:	f003 030c 	and.w	r3, r3, #12
 8006886:	2b04      	cmp	r3, #4
 8006888:	d002      	beq.n	8006890 <HAL_RCC_GetSysClockFreq+0x40>
 800688a:	2b08      	cmp	r3, #8
 800688c:	d003      	beq.n	8006896 <HAL_RCC_GetSysClockFreq+0x46>
 800688e:	e02d      	b.n	80068ec <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006890:	4b1d      	ldr	r3, [pc, #116]	; (8006908 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006892:	623b      	str	r3, [r7, #32]
      break;
 8006894:	e02d      	b.n	80068f2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006896:	69fb      	ldr	r3, [r7, #28]
 8006898:	0c9b      	lsrs	r3, r3, #18
 800689a:	f003 030f 	and.w	r3, r3, #15
 800689e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80068a2:	4413      	add	r3, r2
 80068a4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80068a8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80068aa:	69fb      	ldr	r3, [r7, #28]
 80068ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d013      	beq.n	80068dc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80068b4:	4b13      	ldr	r3, [pc, #76]	; (8006904 <HAL_RCC_GetSysClockFreq+0xb4>)
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	0c5b      	lsrs	r3, r3, #17
 80068ba:	f003 0301 	and.w	r3, r3, #1
 80068be:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80068c2:	4413      	add	r3, r2
 80068c4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80068c8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	4a0e      	ldr	r2, [pc, #56]	; (8006908 <HAL_RCC_GetSysClockFreq+0xb8>)
 80068ce:	fb02 f203 	mul.w	r2, r2, r3
 80068d2:	69bb      	ldr	r3, [r7, #24]
 80068d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80068d8:	627b      	str	r3, [r7, #36]	; 0x24
 80068da:	e004      	b.n	80068e6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	4a0b      	ldr	r2, [pc, #44]	; (800690c <HAL_RCC_GetSysClockFreq+0xbc>)
 80068e0:	fb02 f303 	mul.w	r3, r2, r3
 80068e4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80068e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e8:	623b      	str	r3, [r7, #32]
      break;
 80068ea:	e002      	b.n	80068f2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80068ec:	4b06      	ldr	r3, [pc, #24]	; (8006908 <HAL_RCC_GetSysClockFreq+0xb8>)
 80068ee:	623b      	str	r3, [r7, #32]
      break;
 80068f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80068f2:	6a3b      	ldr	r3, [r7, #32]
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3728      	adds	r7, #40	; 0x28
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bc90      	pop	{r4, r7}
 80068fc:	4770      	bx	lr
 80068fe:	bf00      	nop
 8006900:	0800f4b0 	.word	0x0800f4b0
 8006904:	40021000 	.word	0x40021000
 8006908:	007a1200 	.word	0x007a1200
 800690c:	003d0900 	.word	0x003d0900

08006910 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006910:	b480      	push	{r7}
 8006912:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006914:	4b02      	ldr	r3, [pc, #8]	; (8006920 <HAL_RCC_GetHCLKFreq+0x10>)
 8006916:	681b      	ldr	r3, [r3, #0]
}
 8006918:	4618      	mov	r0, r3
 800691a:	46bd      	mov	sp, r7
 800691c:	bc80      	pop	{r7}
 800691e:	4770      	bx	lr
 8006920:	2000009c 	.word	0x2000009c

08006924 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006928:	f7ff fff2 	bl	8006910 <HAL_RCC_GetHCLKFreq>
 800692c:	4602      	mov	r2, r0
 800692e:	4b05      	ldr	r3, [pc, #20]	; (8006944 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	0a1b      	lsrs	r3, r3, #8
 8006934:	f003 0307 	and.w	r3, r3, #7
 8006938:	4903      	ldr	r1, [pc, #12]	; (8006948 <HAL_RCC_GetPCLK1Freq+0x24>)
 800693a:	5ccb      	ldrb	r3, [r1, r3]
 800693c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006940:	4618      	mov	r0, r3
 8006942:	bd80      	pop	{r7, pc}
 8006944:	40021000 	.word	0x40021000
 8006948:	0800f524 	.word	0x0800f524

0800694c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006950:	f7ff ffde 	bl	8006910 <HAL_RCC_GetHCLKFreq>
 8006954:	4602      	mov	r2, r0
 8006956:	4b05      	ldr	r3, [pc, #20]	; (800696c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	0adb      	lsrs	r3, r3, #11
 800695c:	f003 0307 	and.w	r3, r3, #7
 8006960:	4903      	ldr	r1, [pc, #12]	; (8006970 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006962:	5ccb      	ldrb	r3, [r1, r3]
 8006964:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006968:	4618      	mov	r0, r3
 800696a:	bd80      	pop	{r7, pc}
 800696c:	40021000 	.word	0x40021000
 8006970:	0800f524 	.word	0x0800f524

08006974 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006974:	b480      	push	{r7}
 8006976:	b085      	sub	sp, #20
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800697c:	4b0a      	ldr	r3, [pc, #40]	; (80069a8 <RCC_Delay+0x34>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a0a      	ldr	r2, [pc, #40]	; (80069ac <RCC_Delay+0x38>)
 8006982:	fba2 2303 	umull	r2, r3, r2, r3
 8006986:	0a5b      	lsrs	r3, r3, #9
 8006988:	687a      	ldr	r2, [r7, #4]
 800698a:	fb02 f303 	mul.w	r3, r2, r3
 800698e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006990:	bf00      	nop
  }
  while (Delay --);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	1e5a      	subs	r2, r3, #1
 8006996:	60fa      	str	r2, [r7, #12]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d1f9      	bne.n	8006990 <RCC_Delay+0x1c>
}
 800699c:	bf00      	nop
 800699e:	bf00      	nop
 80069a0:	3714      	adds	r7, #20
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bc80      	pop	{r7}
 80069a6:	4770      	bx	lr
 80069a8:	2000009c 	.word	0x2000009c
 80069ac:	10624dd3 	.word	0x10624dd3

080069b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b086      	sub	sp, #24
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80069b8:	2300      	movs	r3, #0
 80069ba:	613b      	str	r3, [r7, #16]
 80069bc:	2300      	movs	r3, #0
 80069be:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f003 0301 	and.w	r3, r3, #1
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d07d      	beq.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80069cc:	2300      	movs	r3, #0
 80069ce:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80069d0:	4b4f      	ldr	r3, [pc, #316]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80069d2:	69db      	ldr	r3, [r3, #28]
 80069d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d10d      	bne.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80069dc:	4b4c      	ldr	r3, [pc, #304]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80069de:	69db      	ldr	r3, [r3, #28]
 80069e0:	4a4b      	ldr	r2, [pc, #300]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80069e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069e6:	61d3      	str	r3, [r2, #28]
 80069e8:	4b49      	ldr	r3, [pc, #292]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80069ea:	69db      	ldr	r3, [r3, #28]
 80069ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069f0:	60bb      	str	r3, [r7, #8]
 80069f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80069f4:	2301      	movs	r3, #1
 80069f6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069f8:	4b46      	ldr	r3, [pc, #280]	; (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d118      	bne.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a04:	4b43      	ldr	r3, [pc, #268]	; (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a42      	ldr	r2, [pc, #264]	; (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006a0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a0e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a10:	f7fb fe5e 	bl	80026d0 <HAL_GetTick>
 8006a14:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a16:	e008      	b.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a18:	f7fb fe5a 	bl	80026d0 <HAL_GetTick>
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	1ad3      	subs	r3, r2, r3
 8006a22:	2b64      	cmp	r3, #100	; 0x64
 8006a24:	d901      	bls.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006a26:	2303      	movs	r3, #3
 8006a28:	e06d      	b.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a2a:	4b3a      	ldr	r3, [pc, #232]	; (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d0f0      	beq.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006a36:	4b36      	ldr	r3, [pc, #216]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a38:	6a1b      	ldr	r3, [r3, #32]
 8006a3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a3e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d02e      	beq.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a4e:	68fa      	ldr	r2, [r7, #12]
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d027      	beq.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006a54:	4b2e      	ldr	r3, [pc, #184]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a56:	6a1b      	ldr	r3, [r3, #32]
 8006a58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a5c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006a5e:	4b2e      	ldr	r3, [pc, #184]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006a60:	2201      	movs	r2, #1
 8006a62:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006a64:	4b2c      	ldr	r3, [pc, #176]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006a66:	2200      	movs	r2, #0
 8006a68:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006a6a:	4a29      	ldr	r2, [pc, #164]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f003 0301 	and.w	r3, r3, #1
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d014      	beq.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a7a:	f7fb fe29 	bl	80026d0 <HAL_GetTick>
 8006a7e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a80:	e00a      	b.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a82:	f7fb fe25 	bl	80026d0 <HAL_GetTick>
 8006a86:	4602      	mov	r2, r0
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	1ad3      	subs	r3, r2, r3
 8006a8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d901      	bls.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006a94:	2303      	movs	r3, #3
 8006a96:	e036      	b.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a98:	4b1d      	ldr	r3, [pc, #116]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a9a:	6a1b      	ldr	r3, [r3, #32]
 8006a9c:	f003 0302 	and.w	r3, r3, #2
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d0ee      	beq.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006aa4:	4b1a      	ldr	r3, [pc, #104]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006aa6:	6a1b      	ldr	r3, [r3, #32]
 8006aa8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	4917      	ldr	r1, [pc, #92]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006ab6:	7dfb      	ldrb	r3, [r7, #23]
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d105      	bne.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006abc:	4b14      	ldr	r3, [pc, #80]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006abe:	69db      	ldr	r3, [r3, #28]
 8006ac0:	4a13      	ldr	r2, [pc, #76]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ac2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ac6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f003 0302 	and.w	r3, r3, #2
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d008      	beq.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006ad4:	4b0e      	ldr	r3, [pc, #56]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	490b      	ldr	r1, [pc, #44]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f003 0310 	and.w	r3, r3, #16
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d008      	beq.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006af2:	4b07      	ldr	r3, [pc, #28]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	68db      	ldr	r3, [r3, #12]
 8006afe:	4904      	ldr	r1, [pc, #16]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b00:	4313      	orrs	r3, r2
 8006b02:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006b04:	2300      	movs	r3, #0
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3718      	adds	r7, #24
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}
 8006b0e:	bf00      	nop
 8006b10:	40021000 	.word	0x40021000
 8006b14:	40007000 	.word	0x40007000
 8006b18:	42420440 	.word	0x42420440

08006b1c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006b1c:	b590      	push	{r4, r7, lr}
 8006b1e:	b08d      	sub	sp, #52	; 0x34
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006b24:	4b5a      	ldr	r3, [pc, #360]	; (8006c90 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8006b26:	f107 040c 	add.w	r4, r7, #12
 8006b2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006b2c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006b30:	f240 2301 	movw	r3, #513	; 0x201
 8006b34:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8006b36:	2300      	movs	r3, #0
 8006b38:	627b      	str	r3, [r7, #36]	; 0x24
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b3e:	2300      	movs	r3, #0
 8006b40:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8006b42:	2300      	movs	r3, #0
 8006b44:	61fb      	str	r3, [r7, #28]
 8006b46:	2300      	movs	r3, #0
 8006b48:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2b10      	cmp	r3, #16
 8006b4e:	d00a      	beq.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2b10      	cmp	r3, #16
 8006b54:	f200 8091 	bhi.w	8006c7a <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d04c      	beq.n	8006bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2b02      	cmp	r3, #2
 8006b62:	d07c      	beq.n	8006c5e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8006b64:	e089      	b.n	8006c7a <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 8006b66:	4b4b      	ldr	r3, [pc, #300]	; (8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8006b6c:	4b49      	ldr	r3, [pc, #292]	; (8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	f000 8082 	beq.w	8006c7e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006b7a:	69fb      	ldr	r3, [r7, #28]
 8006b7c:	0c9b      	lsrs	r3, r3, #18
 8006b7e:	f003 030f 	and.w	r3, r3, #15
 8006b82:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006b86:	4413      	add	r3, r2
 8006b88:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006b8c:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006b8e:	69fb      	ldr	r3, [r7, #28]
 8006b90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d018      	beq.n	8006bca <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006b98:	4b3e      	ldr	r3, [pc, #248]	; (8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	0c5b      	lsrs	r3, r3, #17
 8006b9e:	f003 0301 	and.w	r3, r3, #1
 8006ba2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006ba6:	4413      	add	r3, r2
 8006ba8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006bac:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006bae:	69fb      	ldr	r3, [r7, #28]
 8006bb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d00d      	beq.n	8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8006bb8:	4a37      	ldr	r2, [pc, #220]	; (8006c98 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8006bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bbc:	fbb2 f2f3 	udiv	r2, r2, r3
 8006bc0:	6a3b      	ldr	r3, [r7, #32]
 8006bc2:	fb02 f303 	mul.w	r3, r2, r3
 8006bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006bc8:	e004      	b.n	8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006bca:	6a3b      	ldr	r3, [r7, #32]
 8006bcc:	4a33      	ldr	r2, [pc, #204]	; (8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8006bce:	fb02 f303 	mul.w	r3, r2, r3
 8006bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8006bd4:	4b2f      	ldr	r3, [pc, #188]	; (8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bdc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006be0:	d102      	bne.n	8006be8 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8006be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006be4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006be6:	e04a      	b.n	8006c7e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8006be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bea:	005b      	lsls	r3, r3, #1
 8006bec:	4a2c      	ldr	r2, [pc, #176]	; (8006ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8006bee:	fba2 2303 	umull	r2, r3, r2, r3
 8006bf2:	085b      	lsrs	r3, r3, #1
 8006bf4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006bf6:	e042      	b.n	8006c7e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8006bf8:	4b26      	ldr	r3, [pc, #152]	; (8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006bfa:	6a1b      	ldr	r3, [r3, #32]
 8006bfc:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8006bfe:	69fb      	ldr	r3, [r7, #28]
 8006c00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c08:	d108      	bne.n	8006c1c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8006c0a:	69fb      	ldr	r3, [r7, #28]
 8006c0c:	f003 0302 	and.w	r3, r3, #2
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d003      	beq.n	8006c1c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8006c14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c18:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c1a:	e01f      	b.n	8006c5c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8006c1c:	69fb      	ldr	r3, [r7, #28]
 8006c1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c26:	d109      	bne.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8006c28:	4b1a      	ldr	r3, [pc, #104]	; (8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c2c:	f003 0302 	and.w	r3, r3, #2
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d003      	beq.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8006c34:	f649 4340 	movw	r3, #40000	; 0x9c40
 8006c38:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c3a:	e00f      	b.n	8006c5c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8006c3c:	69fb      	ldr	r3, [r7, #28]
 8006c3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c46:	d11c      	bne.n	8006c82 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8006c48:	4b12      	ldr	r3, [pc, #72]	; (8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d016      	beq.n	8006c82 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8006c54:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006c58:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006c5a:	e012      	b.n	8006c82 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8006c5c:	e011      	b.n	8006c82 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8006c5e:	f7ff fe75 	bl	800694c <HAL_RCC_GetPCLK2Freq>
 8006c62:	4602      	mov	r2, r0
 8006c64:	4b0b      	ldr	r3, [pc, #44]	; (8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	0b9b      	lsrs	r3, r3, #14
 8006c6a:	f003 0303 	and.w	r3, r3, #3
 8006c6e:	3301      	adds	r3, #1
 8006c70:	005b      	lsls	r3, r3, #1
 8006c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c76:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006c78:	e004      	b.n	8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8006c7a:	bf00      	nop
 8006c7c:	e002      	b.n	8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8006c7e:	bf00      	nop
 8006c80:	e000      	b.n	8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8006c82:	bf00      	nop
    }
  }
  return (frequency);
 8006c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3734      	adds	r7, #52	; 0x34
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd90      	pop	{r4, r7, pc}
 8006c8e:	bf00      	nop
 8006c90:	0800f4c0 	.word	0x0800f4c0
 8006c94:	40021000 	.word	0x40021000
 8006c98:	007a1200 	.word	0x007a1200
 8006c9c:	003d0900 	.word	0x003d0900
 8006ca0:	aaaaaaab 	.word	0xaaaaaaab

08006ca4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b082      	sub	sp, #8
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d101      	bne.n	8006cb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	e041      	b.n	8006d3a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cbc:	b2db      	uxtb	r3, r3
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d106      	bne.n	8006cd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f7fb faa8 	bl	8002220 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2202      	movs	r2, #2
 8006cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681a      	ldr	r2, [r3, #0]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	3304      	adds	r3, #4
 8006ce0:	4619      	mov	r1, r3
 8006ce2:	4610      	mov	r0, r2
 8006ce4:	f000 fa9e 	bl	8007224 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2201      	movs	r2, #1
 8006cec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2201      	movs	r2, #1
 8006d04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2201      	movs	r2, #1
 8006d14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2201      	movs	r2, #1
 8006d24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2201      	movs	r2, #1
 8006d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d38:	2300      	movs	r3, #0
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3708      	adds	r7, #8
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}
	...

08006d44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b085      	sub	sp, #20
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d52:	b2db      	uxtb	r3, r3
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	d001      	beq.n	8006d5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	e03a      	b.n	8006dd2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2202      	movs	r2, #2
 8006d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	68da      	ldr	r2, [r3, #12]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f042 0201 	orr.w	r2, r2, #1
 8006d72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a18      	ldr	r2, [pc, #96]	; (8006ddc <HAL_TIM_Base_Start_IT+0x98>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d00e      	beq.n	8006d9c <HAL_TIM_Base_Start_IT+0x58>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d86:	d009      	beq.n	8006d9c <HAL_TIM_Base_Start_IT+0x58>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a14      	ldr	r2, [pc, #80]	; (8006de0 <HAL_TIM_Base_Start_IT+0x9c>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d004      	beq.n	8006d9c <HAL_TIM_Base_Start_IT+0x58>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a13      	ldr	r2, [pc, #76]	; (8006de4 <HAL_TIM_Base_Start_IT+0xa0>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d111      	bne.n	8006dc0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	689b      	ldr	r3, [r3, #8]
 8006da2:	f003 0307 	and.w	r3, r3, #7
 8006da6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2b06      	cmp	r3, #6
 8006dac:	d010      	beq.n	8006dd0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	681a      	ldr	r2, [r3, #0]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f042 0201 	orr.w	r2, r2, #1
 8006dbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dbe:	e007      	b.n	8006dd0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	681a      	ldr	r2, [r3, #0]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f042 0201 	orr.w	r2, r2, #1
 8006dce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006dd0:	2300      	movs	r3, #0
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3714      	adds	r7, #20
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bc80      	pop	{r7}
 8006dda:	4770      	bx	lr
 8006ddc:	40012c00 	.word	0x40012c00
 8006de0:	40000400 	.word	0x40000400
 8006de4:	40000800 	.word	0x40000800

08006de8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b083      	sub	sp, #12
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	68da      	ldr	r2, [r3, #12]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f022 0201 	bic.w	r2, r2, #1
 8006dfe:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	6a1a      	ldr	r2, [r3, #32]
 8006e06:	f241 1311 	movw	r3, #4369	; 0x1111
 8006e0a:	4013      	ands	r3, r2
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d10f      	bne.n	8006e30 <HAL_TIM_Base_Stop_IT+0x48>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	6a1a      	ldr	r2, [r3, #32]
 8006e16:	f240 4344 	movw	r3, #1092	; 0x444
 8006e1a:	4013      	ands	r3, r2
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d107      	bne.n	8006e30 <HAL_TIM_Base_Stop_IT+0x48>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	681a      	ldr	r2, [r3, #0]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f022 0201 	bic.w	r2, r2, #1
 8006e2e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2201      	movs	r2, #1
 8006e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006e38:	2300      	movs	r3, #0
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	370c      	adds	r7, #12
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bc80      	pop	{r7}
 8006e42:	4770      	bx	lr

08006e44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b082      	sub	sp, #8
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	691b      	ldr	r3, [r3, #16]
 8006e52:	f003 0302 	and.w	r3, r3, #2
 8006e56:	2b02      	cmp	r3, #2
 8006e58:	d122      	bne.n	8006ea0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	68db      	ldr	r3, [r3, #12]
 8006e60:	f003 0302 	and.w	r3, r3, #2
 8006e64:	2b02      	cmp	r3, #2
 8006e66:	d11b      	bne.n	8006ea0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f06f 0202 	mvn.w	r2, #2
 8006e70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2201      	movs	r2, #1
 8006e76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	699b      	ldr	r3, [r3, #24]
 8006e7e:	f003 0303 	and.w	r3, r3, #3
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d003      	beq.n	8006e8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f000 f9b1 	bl	80071ee <HAL_TIM_IC_CaptureCallback>
 8006e8c:	e005      	b.n	8006e9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f000 f9a4 	bl	80071dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f000 f9b3 	bl	8007200 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	691b      	ldr	r3, [r3, #16]
 8006ea6:	f003 0304 	and.w	r3, r3, #4
 8006eaa:	2b04      	cmp	r3, #4
 8006eac:	d122      	bne.n	8006ef4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	68db      	ldr	r3, [r3, #12]
 8006eb4:	f003 0304 	and.w	r3, r3, #4
 8006eb8:	2b04      	cmp	r3, #4
 8006eba:	d11b      	bne.n	8006ef4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f06f 0204 	mvn.w	r2, #4
 8006ec4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2202      	movs	r2, #2
 8006eca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	699b      	ldr	r3, [r3, #24]
 8006ed2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d003      	beq.n	8006ee2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f000 f987 	bl	80071ee <HAL_TIM_IC_CaptureCallback>
 8006ee0:	e005      	b.n	8006eee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 f97a 	bl	80071dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f000 f989 	bl	8007200 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	691b      	ldr	r3, [r3, #16]
 8006efa:	f003 0308 	and.w	r3, r3, #8
 8006efe:	2b08      	cmp	r3, #8
 8006f00:	d122      	bne.n	8006f48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	68db      	ldr	r3, [r3, #12]
 8006f08:	f003 0308 	and.w	r3, r3, #8
 8006f0c:	2b08      	cmp	r3, #8
 8006f0e:	d11b      	bne.n	8006f48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f06f 0208 	mvn.w	r2, #8
 8006f18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2204      	movs	r2, #4
 8006f1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	69db      	ldr	r3, [r3, #28]
 8006f26:	f003 0303 	and.w	r3, r3, #3
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d003      	beq.n	8006f36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f000 f95d 	bl	80071ee <HAL_TIM_IC_CaptureCallback>
 8006f34:	e005      	b.n	8006f42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f000 f950 	bl	80071dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f000 f95f 	bl	8007200 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2200      	movs	r2, #0
 8006f46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	691b      	ldr	r3, [r3, #16]
 8006f4e:	f003 0310 	and.w	r3, r3, #16
 8006f52:	2b10      	cmp	r3, #16
 8006f54:	d122      	bne.n	8006f9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	68db      	ldr	r3, [r3, #12]
 8006f5c:	f003 0310 	and.w	r3, r3, #16
 8006f60:	2b10      	cmp	r3, #16
 8006f62:	d11b      	bne.n	8006f9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f06f 0210 	mvn.w	r2, #16
 8006f6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2208      	movs	r2, #8
 8006f72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	69db      	ldr	r3, [r3, #28]
 8006f7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d003      	beq.n	8006f8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f000 f933 	bl	80071ee <HAL_TIM_IC_CaptureCallback>
 8006f88:	e005      	b.n	8006f96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f000 f926 	bl	80071dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f000 f935 	bl	8007200 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	691b      	ldr	r3, [r3, #16]
 8006fa2:	f003 0301 	and.w	r3, r3, #1
 8006fa6:	2b01      	cmp	r3, #1
 8006fa8:	d10e      	bne.n	8006fc8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	68db      	ldr	r3, [r3, #12]
 8006fb0:	f003 0301 	and.w	r3, r3, #1
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d107      	bne.n	8006fc8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f06f 0201 	mvn.w	r2, #1
 8006fc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f7fa ffec 	bl	8001fa0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	691b      	ldr	r3, [r3, #16]
 8006fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fd2:	2b80      	cmp	r3, #128	; 0x80
 8006fd4:	d10e      	bne.n	8006ff4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	68db      	ldr	r3, [r3, #12]
 8006fdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fe0:	2b80      	cmp	r3, #128	; 0x80
 8006fe2:	d107      	bne.n	8006ff4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006fec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f000 fa77 	bl	80074e2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	691b      	ldr	r3, [r3, #16]
 8006ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ffe:	2b40      	cmp	r3, #64	; 0x40
 8007000:	d10e      	bne.n	8007020 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	68db      	ldr	r3, [r3, #12]
 8007008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800700c:	2b40      	cmp	r3, #64	; 0x40
 800700e:	d107      	bne.n	8007020 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f000 f8f9 	bl	8007212 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	691b      	ldr	r3, [r3, #16]
 8007026:	f003 0320 	and.w	r3, r3, #32
 800702a:	2b20      	cmp	r3, #32
 800702c:	d10e      	bne.n	800704c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	68db      	ldr	r3, [r3, #12]
 8007034:	f003 0320 	and.w	r3, r3, #32
 8007038:	2b20      	cmp	r3, #32
 800703a:	d107      	bne.n	800704c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f06f 0220 	mvn.w	r2, #32
 8007044:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 fa42 	bl	80074d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800704c:	bf00      	nop
 800704e:	3708      	adds	r7, #8
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}

08007054 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b084      	sub	sp, #16
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007064:	2b01      	cmp	r3, #1
 8007066:	d101      	bne.n	800706c <HAL_TIM_ConfigClockSource+0x18>
 8007068:	2302      	movs	r3, #2
 800706a:	e0b3      	b.n	80071d4 <HAL_TIM_ConfigClockSource+0x180>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2201      	movs	r2, #1
 8007070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2202      	movs	r2, #2
 8007078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800708a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007092:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	68fa      	ldr	r2, [r7, #12]
 800709a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070a4:	d03e      	beq.n	8007124 <HAL_TIM_ConfigClockSource+0xd0>
 80070a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070aa:	f200 8087 	bhi.w	80071bc <HAL_TIM_ConfigClockSource+0x168>
 80070ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070b2:	f000 8085 	beq.w	80071c0 <HAL_TIM_ConfigClockSource+0x16c>
 80070b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070ba:	d87f      	bhi.n	80071bc <HAL_TIM_ConfigClockSource+0x168>
 80070bc:	2b70      	cmp	r3, #112	; 0x70
 80070be:	d01a      	beq.n	80070f6 <HAL_TIM_ConfigClockSource+0xa2>
 80070c0:	2b70      	cmp	r3, #112	; 0x70
 80070c2:	d87b      	bhi.n	80071bc <HAL_TIM_ConfigClockSource+0x168>
 80070c4:	2b60      	cmp	r3, #96	; 0x60
 80070c6:	d050      	beq.n	800716a <HAL_TIM_ConfigClockSource+0x116>
 80070c8:	2b60      	cmp	r3, #96	; 0x60
 80070ca:	d877      	bhi.n	80071bc <HAL_TIM_ConfigClockSource+0x168>
 80070cc:	2b50      	cmp	r3, #80	; 0x50
 80070ce:	d03c      	beq.n	800714a <HAL_TIM_ConfigClockSource+0xf6>
 80070d0:	2b50      	cmp	r3, #80	; 0x50
 80070d2:	d873      	bhi.n	80071bc <HAL_TIM_ConfigClockSource+0x168>
 80070d4:	2b40      	cmp	r3, #64	; 0x40
 80070d6:	d058      	beq.n	800718a <HAL_TIM_ConfigClockSource+0x136>
 80070d8:	2b40      	cmp	r3, #64	; 0x40
 80070da:	d86f      	bhi.n	80071bc <HAL_TIM_ConfigClockSource+0x168>
 80070dc:	2b30      	cmp	r3, #48	; 0x30
 80070de:	d064      	beq.n	80071aa <HAL_TIM_ConfigClockSource+0x156>
 80070e0:	2b30      	cmp	r3, #48	; 0x30
 80070e2:	d86b      	bhi.n	80071bc <HAL_TIM_ConfigClockSource+0x168>
 80070e4:	2b20      	cmp	r3, #32
 80070e6:	d060      	beq.n	80071aa <HAL_TIM_ConfigClockSource+0x156>
 80070e8:	2b20      	cmp	r3, #32
 80070ea:	d867      	bhi.n	80071bc <HAL_TIM_ConfigClockSource+0x168>
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d05c      	beq.n	80071aa <HAL_TIM_ConfigClockSource+0x156>
 80070f0:	2b10      	cmp	r3, #16
 80070f2:	d05a      	beq.n	80071aa <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80070f4:	e062      	b.n	80071bc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6818      	ldr	r0, [r3, #0]
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	6899      	ldr	r1, [r3, #8]
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	685a      	ldr	r2, [r3, #4]
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	68db      	ldr	r3, [r3, #12]
 8007106:	f000 f966 	bl	80073d6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	689b      	ldr	r3, [r3, #8]
 8007110:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007118:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	68fa      	ldr	r2, [r7, #12]
 8007120:	609a      	str	r2, [r3, #8]
      break;
 8007122:	e04e      	b.n	80071c2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6818      	ldr	r0, [r3, #0]
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	6899      	ldr	r1, [r3, #8]
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	685a      	ldr	r2, [r3, #4]
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	68db      	ldr	r3, [r3, #12]
 8007134:	f000 f94f 	bl	80073d6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	689a      	ldr	r2, [r3, #8]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007146:	609a      	str	r2, [r3, #8]
      break;
 8007148:	e03b      	b.n	80071c2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6818      	ldr	r0, [r3, #0]
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	6859      	ldr	r1, [r3, #4]
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	68db      	ldr	r3, [r3, #12]
 8007156:	461a      	mov	r2, r3
 8007158:	f000 f8c6 	bl	80072e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	2150      	movs	r1, #80	; 0x50
 8007162:	4618      	mov	r0, r3
 8007164:	f000 f91d 	bl	80073a2 <TIM_ITRx_SetConfig>
      break;
 8007168:	e02b      	b.n	80071c2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6818      	ldr	r0, [r3, #0]
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	6859      	ldr	r1, [r3, #4]
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	68db      	ldr	r3, [r3, #12]
 8007176:	461a      	mov	r2, r3
 8007178:	f000 f8e4 	bl	8007344 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	2160      	movs	r1, #96	; 0x60
 8007182:	4618      	mov	r0, r3
 8007184:	f000 f90d 	bl	80073a2 <TIM_ITRx_SetConfig>
      break;
 8007188:	e01b      	b.n	80071c2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6818      	ldr	r0, [r3, #0]
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	6859      	ldr	r1, [r3, #4]
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	68db      	ldr	r3, [r3, #12]
 8007196:	461a      	mov	r2, r3
 8007198:	f000 f8a6 	bl	80072e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	2140      	movs	r1, #64	; 0x40
 80071a2:	4618      	mov	r0, r3
 80071a4:	f000 f8fd 	bl	80073a2 <TIM_ITRx_SetConfig>
      break;
 80071a8:	e00b      	b.n	80071c2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4619      	mov	r1, r3
 80071b4:	4610      	mov	r0, r2
 80071b6:	f000 f8f4 	bl	80073a2 <TIM_ITRx_SetConfig>
        break;
 80071ba:	e002      	b.n	80071c2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80071bc:	bf00      	nop
 80071be:	e000      	b.n	80071c2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80071c0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2201      	movs	r2, #1
 80071c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2200      	movs	r2, #0
 80071ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80071d2:	2300      	movs	r3, #0
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3710      	adds	r7, #16
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}

080071dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80071dc:	b480      	push	{r7}
 80071de:	b083      	sub	sp, #12
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80071e4:	bf00      	nop
 80071e6:	370c      	adds	r7, #12
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bc80      	pop	{r7}
 80071ec:	4770      	bx	lr

080071ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80071ee:	b480      	push	{r7}
 80071f0:	b083      	sub	sp, #12
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80071f6:	bf00      	nop
 80071f8:	370c      	adds	r7, #12
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bc80      	pop	{r7}
 80071fe:	4770      	bx	lr

08007200 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007200:	b480      	push	{r7}
 8007202:	b083      	sub	sp, #12
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007208:	bf00      	nop
 800720a:	370c      	adds	r7, #12
 800720c:	46bd      	mov	sp, r7
 800720e:	bc80      	pop	{r7}
 8007210:	4770      	bx	lr

08007212 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007212:	b480      	push	{r7}
 8007214:	b083      	sub	sp, #12
 8007216:	af00      	add	r7, sp, #0
 8007218:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800721a:	bf00      	nop
 800721c:	370c      	adds	r7, #12
 800721e:	46bd      	mov	sp, r7
 8007220:	bc80      	pop	{r7}
 8007222:	4770      	bx	lr

08007224 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007224:	b480      	push	{r7}
 8007226:	b085      	sub	sp, #20
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	4a29      	ldr	r2, [pc, #164]	; (80072dc <TIM_Base_SetConfig+0xb8>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d00b      	beq.n	8007254 <TIM_Base_SetConfig+0x30>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007242:	d007      	beq.n	8007254 <TIM_Base_SetConfig+0x30>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	4a26      	ldr	r2, [pc, #152]	; (80072e0 <TIM_Base_SetConfig+0xbc>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d003      	beq.n	8007254 <TIM_Base_SetConfig+0x30>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	4a25      	ldr	r2, [pc, #148]	; (80072e4 <TIM_Base_SetConfig+0xc0>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d108      	bne.n	8007266 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800725a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	68fa      	ldr	r2, [r7, #12]
 8007262:	4313      	orrs	r3, r2
 8007264:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	4a1c      	ldr	r2, [pc, #112]	; (80072dc <TIM_Base_SetConfig+0xb8>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d00b      	beq.n	8007286 <TIM_Base_SetConfig+0x62>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007274:	d007      	beq.n	8007286 <TIM_Base_SetConfig+0x62>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	4a19      	ldr	r2, [pc, #100]	; (80072e0 <TIM_Base_SetConfig+0xbc>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d003      	beq.n	8007286 <TIM_Base_SetConfig+0x62>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	4a18      	ldr	r2, [pc, #96]	; (80072e4 <TIM_Base_SetConfig+0xc0>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d108      	bne.n	8007298 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800728c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	68db      	ldr	r3, [r3, #12]
 8007292:	68fa      	ldr	r2, [r7, #12]
 8007294:	4313      	orrs	r3, r2
 8007296:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	695b      	ldr	r3, [r3, #20]
 80072a2:	4313      	orrs	r3, r2
 80072a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	68fa      	ldr	r2, [r7, #12]
 80072aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	689a      	ldr	r2, [r3, #8]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	4a07      	ldr	r2, [pc, #28]	; (80072dc <TIM_Base_SetConfig+0xb8>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d103      	bne.n	80072cc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	691a      	ldr	r2, [r3, #16]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2201      	movs	r2, #1
 80072d0:	615a      	str	r2, [r3, #20]
}
 80072d2:	bf00      	nop
 80072d4:	3714      	adds	r7, #20
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bc80      	pop	{r7}
 80072da:	4770      	bx	lr
 80072dc:	40012c00 	.word	0x40012c00
 80072e0:	40000400 	.word	0x40000400
 80072e4:	40000800 	.word	0x40000800

080072e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b087      	sub	sp, #28
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	60f8      	str	r0, [r7, #12]
 80072f0:	60b9      	str	r1, [r7, #8]
 80072f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	6a1b      	ldr	r3, [r3, #32]
 80072f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	6a1b      	ldr	r3, [r3, #32]
 80072fe:	f023 0201 	bic.w	r2, r3, #1
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	699b      	ldr	r3, [r3, #24]
 800730a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007312:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	011b      	lsls	r3, r3, #4
 8007318:	693a      	ldr	r2, [r7, #16]
 800731a:	4313      	orrs	r3, r2
 800731c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	f023 030a 	bic.w	r3, r3, #10
 8007324:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007326:	697a      	ldr	r2, [r7, #20]
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	4313      	orrs	r3, r2
 800732c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	693a      	ldr	r2, [r7, #16]
 8007332:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	697a      	ldr	r2, [r7, #20]
 8007338:	621a      	str	r2, [r3, #32]
}
 800733a:	bf00      	nop
 800733c:	371c      	adds	r7, #28
 800733e:	46bd      	mov	sp, r7
 8007340:	bc80      	pop	{r7}
 8007342:	4770      	bx	lr

08007344 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007344:	b480      	push	{r7}
 8007346:	b087      	sub	sp, #28
 8007348:	af00      	add	r7, sp, #0
 800734a:	60f8      	str	r0, [r7, #12]
 800734c:	60b9      	str	r1, [r7, #8]
 800734e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	6a1b      	ldr	r3, [r3, #32]
 8007354:	f023 0210 	bic.w	r2, r3, #16
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	699b      	ldr	r3, [r3, #24]
 8007360:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	6a1b      	ldr	r3, [r3, #32]
 8007366:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800736e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	031b      	lsls	r3, r3, #12
 8007374:	697a      	ldr	r2, [r7, #20]
 8007376:	4313      	orrs	r3, r2
 8007378:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007380:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	011b      	lsls	r3, r3, #4
 8007386:	693a      	ldr	r2, [r7, #16]
 8007388:	4313      	orrs	r3, r2
 800738a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	697a      	ldr	r2, [r7, #20]
 8007390:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	693a      	ldr	r2, [r7, #16]
 8007396:	621a      	str	r2, [r3, #32]
}
 8007398:	bf00      	nop
 800739a:	371c      	adds	r7, #28
 800739c:	46bd      	mov	sp, r7
 800739e:	bc80      	pop	{r7}
 80073a0:	4770      	bx	lr

080073a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80073a2:	b480      	push	{r7}
 80073a4:	b085      	sub	sp, #20
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	6078      	str	r0, [r7, #4]
 80073aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80073ba:	683a      	ldr	r2, [r7, #0]
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	4313      	orrs	r3, r2
 80073c0:	f043 0307 	orr.w	r3, r3, #7
 80073c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	68fa      	ldr	r2, [r7, #12]
 80073ca:	609a      	str	r2, [r3, #8]
}
 80073cc:	bf00      	nop
 80073ce:	3714      	adds	r7, #20
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bc80      	pop	{r7}
 80073d4:	4770      	bx	lr

080073d6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80073d6:	b480      	push	{r7}
 80073d8:	b087      	sub	sp, #28
 80073da:	af00      	add	r7, sp, #0
 80073dc:	60f8      	str	r0, [r7, #12]
 80073de:	60b9      	str	r1, [r7, #8]
 80073e0:	607a      	str	r2, [r7, #4]
 80073e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	689b      	ldr	r3, [r3, #8]
 80073e8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80073f0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	021a      	lsls	r2, r3, #8
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	431a      	orrs	r2, r3
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	4313      	orrs	r3, r2
 80073fe:	697a      	ldr	r2, [r7, #20]
 8007400:	4313      	orrs	r3, r2
 8007402:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	697a      	ldr	r2, [r7, #20]
 8007408:	609a      	str	r2, [r3, #8]
}
 800740a:	bf00      	nop
 800740c:	371c      	adds	r7, #28
 800740e:	46bd      	mov	sp, r7
 8007410:	bc80      	pop	{r7}
 8007412:	4770      	bx	lr

08007414 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007414:	b480      	push	{r7}
 8007416:	b085      	sub	sp, #20
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007424:	2b01      	cmp	r3, #1
 8007426:	d101      	bne.n	800742c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007428:	2302      	movs	r3, #2
 800742a:	e046      	b.n	80074ba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2201      	movs	r2, #1
 8007430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2202      	movs	r2, #2
 8007438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	689b      	ldr	r3, [r3, #8]
 800744a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007452:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	68fa      	ldr	r2, [r7, #12]
 800745a:	4313      	orrs	r3, r2
 800745c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	68fa      	ldr	r2, [r7, #12]
 8007464:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a16      	ldr	r2, [pc, #88]	; (80074c4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d00e      	beq.n	800748e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007478:	d009      	beq.n	800748e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a12      	ldr	r2, [pc, #72]	; (80074c8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d004      	beq.n	800748e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a10      	ldr	r2, [pc, #64]	; (80074cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d10c      	bne.n	80074a8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007494:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	68ba      	ldr	r2, [r7, #8]
 800749c:	4313      	orrs	r3, r2
 800749e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	68ba      	ldr	r2, [r7, #8]
 80074a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2201      	movs	r2, #1
 80074ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2200      	movs	r2, #0
 80074b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80074b8:	2300      	movs	r3, #0
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3714      	adds	r7, #20
 80074be:	46bd      	mov	sp, r7
 80074c0:	bc80      	pop	{r7}
 80074c2:	4770      	bx	lr
 80074c4:	40012c00 	.word	0x40012c00
 80074c8:	40000400 	.word	0x40000400
 80074cc:	40000800 	.word	0x40000800

080074d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b083      	sub	sp, #12
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80074d8:	bf00      	nop
 80074da:	370c      	adds	r7, #12
 80074dc:	46bd      	mov	sp, r7
 80074de:	bc80      	pop	{r7}
 80074e0:	4770      	bx	lr

080074e2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80074e2:	b480      	push	{r7}
 80074e4:	b083      	sub	sp, #12
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80074ea:	bf00      	nop
 80074ec:	370c      	adds	r7, #12
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bc80      	pop	{r7}
 80074f2:	4770      	bx	lr

080074f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b082      	sub	sp, #8
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d101      	bne.n	8007506 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007502:	2301      	movs	r3, #1
 8007504:	e03f      	b.n	8007586 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800750c:	b2db      	uxtb	r3, r3
 800750e:	2b00      	cmp	r3, #0
 8007510:	d106      	bne.n	8007520 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2200      	movs	r2, #0
 8007516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f7fa febe 	bl	800229c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2224      	movs	r2, #36	; 0x24
 8007524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	68da      	ldr	r2, [r3, #12]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007536:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f000 fc85 	bl	8007e48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	691a      	ldr	r2, [r3, #16]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800754c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	695a      	ldr	r2, [r3, #20]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800755c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	68da      	ldr	r2, [r3, #12]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800756c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2200      	movs	r2, #0
 8007572:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2220      	movs	r2, #32
 8007578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2220      	movs	r2, #32
 8007580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007584:	2300      	movs	r3, #0
}
 8007586:	4618      	mov	r0, r3
 8007588:	3708      	adds	r7, #8
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}

0800758e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800758e:	b580      	push	{r7, lr}
 8007590:	b08a      	sub	sp, #40	; 0x28
 8007592:	af02      	add	r7, sp, #8
 8007594:	60f8      	str	r0, [r7, #12]
 8007596:	60b9      	str	r1, [r7, #8]
 8007598:	603b      	str	r3, [r7, #0]
 800759a:	4613      	mov	r3, r2
 800759c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800759e:	2300      	movs	r3, #0
 80075a0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075a8:	b2db      	uxtb	r3, r3
 80075aa:	2b20      	cmp	r3, #32
 80075ac:	d17c      	bne.n	80076a8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d002      	beq.n	80075ba <HAL_UART_Transmit+0x2c>
 80075b4:	88fb      	ldrh	r3, [r7, #6]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d101      	bne.n	80075be <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80075ba:	2301      	movs	r3, #1
 80075bc:	e075      	b.n	80076aa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d101      	bne.n	80075cc <HAL_UART_Transmit+0x3e>
 80075c8:	2302      	movs	r3, #2
 80075ca:	e06e      	b.n	80076aa <HAL_UART_Transmit+0x11c>
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2201      	movs	r2, #1
 80075d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2200      	movs	r2, #0
 80075d8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2221      	movs	r2, #33	; 0x21
 80075de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80075e2:	f7fb f875 	bl	80026d0 <HAL_GetTick>
 80075e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	88fa      	ldrh	r2, [r7, #6]
 80075ec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	88fa      	ldrh	r2, [r7, #6]
 80075f2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	689b      	ldr	r3, [r3, #8]
 80075f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075fc:	d108      	bne.n	8007610 <HAL_UART_Transmit+0x82>
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	691b      	ldr	r3, [r3, #16]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d104      	bne.n	8007610 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007606:	2300      	movs	r3, #0
 8007608:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	61bb      	str	r3, [r7, #24]
 800760e:	e003      	b.n	8007618 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007614:	2300      	movs	r3, #0
 8007616:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2200      	movs	r2, #0
 800761c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007620:	e02a      	b.n	8007678 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	9300      	str	r3, [sp, #0]
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	2200      	movs	r2, #0
 800762a:	2180      	movs	r1, #128	; 0x80
 800762c:	68f8      	ldr	r0, [r7, #12]
 800762e:	f000 fa38 	bl	8007aa2 <UART_WaitOnFlagUntilTimeout>
 8007632:	4603      	mov	r3, r0
 8007634:	2b00      	cmp	r3, #0
 8007636:	d001      	beq.n	800763c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007638:	2303      	movs	r3, #3
 800763a:	e036      	b.n	80076aa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800763c:	69fb      	ldr	r3, [r7, #28]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d10b      	bne.n	800765a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007642:	69bb      	ldr	r3, [r7, #24]
 8007644:	881b      	ldrh	r3, [r3, #0]
 8007646:	461a      	mov	r2, r3
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007650:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007652:	69bb      	ldr	r3, [r7, #24]
 8007654:	3302      	adds	r3, #2
 8007656:	61bb      	str	r3, [r7, #24]
 8007658:	e007      	b.n	800766a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800765a:	69fb      	ldr	r3, [r7, #28]
 800765c:	781a      	ldrb	r2, [r3, #0]
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007664:	69fb      	ldr	r3, [r7, #28]
 8007666:	3301      	adds	r3, #1
 8007668:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800766e:	b29b      	uxth	r3, r3
 8007670:	3b01      	subs	r3, #1
 8007672:	b29a      	uxth	r2, r3
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800767c:	b29b      	uxth	r3, r3
 800767e:	2b00      	cmp	r3, #0
 8007680:	d1cf      	bne.n	8007622 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	9300      	str	r3, [sp, #0]
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	2200      	movs	r2, #0
 800768a:	2140      	movs	r1, #64	; 0x40
 800768c:	68f8      	ldr	r0, [r7, #12]
 800768e:	f000 fa08 	bl	8007aa2 <UART_WaitOnFlagUntilTimeout>
 8007692:	4603      	mov	r3, r0
 8007694:	2b00      	cmp	r3, #0
 8007696:	d001      	beq.n	800769c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007698:	2303      	movs	r3, #3
 800769a:	e006      	b.n	80076aa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2220      	movs	r2, #32
 80076a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80076a4:	2300      	movs	r3, #0
 80076a6:	e000      	b.n	80076aa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80076a8:	2302      	movs	r3, #2
  }
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3720      	adds	r7, #32
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}

080076b2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80076b2:	b580      	push	{r7, lr}
 80076b4:	b084      	sub	sp, #16
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	60f8      	str	r0, [r7, #12]
 80076ba:	60b9      	str	r1, [r7, #8]
 80076bc:	4613      	mov	r3, r2
 80076be:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80076c6:	b2db      	uxtb	r3, r3
 80076c8:	2b20      	cmp	r3, #32
 80076ca:	d11d      	bne.n	8007708 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d002      	beq.n	80076d8 <HAL_UART_Receive_IT+0x26>
 80076d2:	88fb      	ldrh	r3, [r7, #6]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d101      	bne.n	80076dc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	e016      	b.n	800770a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076e2:	2b01      	cmp	r3, #1
 80076e4:	d101      	bne.n	80076ea <HAL_UART_Receive_IT+0x38>
 80076e6:	2302      	movs	r3, #2
 80076e8:	e00f      	b.n	800770a <HAL_UART_Receive_IT+0x58>
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2201      	movs	r2, #1
 80076ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2200      	movs	r2, #0
 80076f6:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80076f8:	88fb      	ldrh	r3, [r7, #6]
 80076fa:	461a      	mov	r2, r3
 80076fc:	68b9      	ldr	r1, [r7, #8]
 80076fe:	68f8      	ldr	r0, [r7, #12]
 8007700:	f000 fa19 	bl	8007b36 <UART_Start_Receive_IT>
 8007704:	4603      	mov	r3, r0
 8007706:	e000      	b.n	800770a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007708:	2302      	movs	r3, #2
  }
}
 800770a:	4618      	mov	r0, r3
 800770c:	3710      	adds	r7, #16
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}
	...

08007714 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b08a      	sub	sp, #40	; 0x28
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	68db      	ldr	r3, [r3, #12]
 800772a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	695b      	ldr	r3, [r3, #20]
 8007732:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8007734:	2300      	movs	r3, #0
 8007736:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8007738:	2300      	movs	r3, #0
 800773a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800773c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800773e:	f003 030f 	and.w	r3, r3, #15
 8007742:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8007744:	69bb      	ldr	r3, [r7, #24]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d10d      	bne.n	8007766 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800774a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800774c:	f003 0320 	and.w	r3, r3, #32
 8007750:	2b00      	cmp	r3, #0
 8007752:	d008      	beq.n	8007766 <HAL_UART_IRQHandler+0x52>
 8007754:	6a3b      	ldr	r3, [r7, #32]
 8007756:	f003 0320 	and.w	r3, r3, #32
 800775a:	2b00      	cmp	r3, #0
 800775c:	d003      	beq.n	8007766 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f000 fac9 	bl	8007cf6 <UART_Receive_IT>
      return;
 8007764:	e17b      	b.n	8007a5e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007766:	69bb      	ldr	r3, [r7, #24]
 8007768:	2b00      	cmp	r3, #0
 800776a:	f000 80b1 	beq.w	80078d0 <HAL_UART_IRQHandler+0x1bc>
 800776e:	69fb      	ldr	r3, [r7, #28]
 8007770:	f003 0301 	and.w	r3, r3, #1
 8007774:	2b00      	cmp	r3, #0
 8007776:	d105      	bne.n	8007784 <HAL_UART_IRQHandler+0x70>
 8007778:	6a3b      	ldr	r3, [r7, #32]
 800777a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800777e:	2b00      	cmp	r3, #0
 8007780:	f000 80a6 	beq.w	80078d0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007786:	f003 0301 	and.w	r3, r3, #1
 800778a:	2b00      	cmp	r3, #0
 800778c:	d00a      	beq.n	80077a4 <HAL_UART_IRQHandler+0x90>
 800778e:	6a3b      	ldr	r3, [r7, #32]
 8007790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007794:	2b00      	cmp	r3, #0
 8007796:	d005      	beq.n	80077a4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800779c:	f043 0201 	orr.w	r2, r3, #1
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80077a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a6:	f003 0304 	and.w	r3, r3, #4
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d00a      	beq.n	80077c4 <HAL_UART_IRQHandler+0xb0>
 80077ae:	69fb      	ldr	r3, [r7, #28]
 80077b0:	f003 0301 	and.w	r3, r3, #1
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d005      	beq.n	80077c4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077bc:	f043 0202 	orr.w	r2, r3, #2
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80077c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c6:	f003 0302 	and.w	r3, r3, #2
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d00a      	beq.n	80077e4 <HAL_UART_IRQHandler+0xd0>
 80077ce:	69fb      	ldr	r3, [r7, #28]
 80077d0:	f003 0301 	and.w	r3, r3, #1
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d005      	beq.n	80077e4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077dc:	f043 0204 	orr.w	r2, r3, #4
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80077e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e6:	f003 0308 	and.w	r3, r3, #8
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d00f      	beq.n	800780e <HAL_UART_IRQHandler+0xfa>
 80077ee:	6a3b      	ldr	r3, [r7, #32]
 80077f0:	f003 0320 	and.w	r3, r3, #32
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d104      	bne.n	8007802 <HAL_UART_IRQHandler+0xee>
 80077f8:	69fb      	ldr	r3, [r7, #28]
 80077fa:	f003 0301 	and.w	r3, r3, #1
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d005      	beq.n	800780e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007806:	f043 0208 	orr.w	r2, r3, #8
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007812:	2b00      	cmp	r3, #0
 8007814:	f000 811e 	beq.w	8007a54 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800781a:	f003 0320 	and.w	r3, r3, #32
 800781e:	2b00      	cmp	r3, #0
 8007820:	d007      	beq.n	8007832 <HAL_UART_IRQHandler+0x11e>
 8007822:	6a3b      	ldr	r3, [r7, #32]
 8007824:	f003 0320 	and.w	r3, r3, #32
 8007828:	2b00      	cmp	r3, #0
 800782a:	d002      	beq.n	8007832 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f000 fa62 	bl	8007cf6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	695b      	ldr	r3, [r3, #20]
 8007838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800783c:	2b00      	cmp	r3, #0
 800783e:	bf14      	ite	ne
 8007840:	2301      	movne	r3, #1
 8007842:	2300      	moveq	r3, #0
 8007844:	b2db      	uxtb	r3, r3
 8007846:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800784c:	f003 0308 	and.w	r3, r3, #8
 8007850:	2b00      	cmp	r3, #0
 8007852:	d102      	bne.n	800785a <HAL_UART_IRQHandler+0x146>
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d031      	beq.n	80078be <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f000 f9a4 	bl	8007ba8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	695b      	ldr	r3, [r3, #20]
 8007866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800786a:	2b00      	cmp	r3, #0
 800786c:	d023      	beq.n	80078b6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	695a      	ldr	r2, [r3, #20]
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800787c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007882:	2b00      	cmp	r3, #0
 8007884:	d013      	beq.n	80078ae <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800788a:	4a76      	ldr	r2, [pc, #472]	; (8007a64 <HAL_UART_IRQHandler+0x350>)
 800788c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007892:	4618      	mov	r0, r3
 8007894:	f7fb fd6a 	bl	800336c <HAL_DMA_Abort_IT>
 8007898:	4603      	mov	r3, r0
 800789a:	2b00      	cmp	r3, #0
 800789c:	d016      	beq.n	80078cc <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078a4:	687a      	ldr	r2, [r7, #4]
 80078a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80078a8:	4610      	mov	r0, r2
 80078aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078ac:	e00e      	b.n	80078cc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 f8e3 	bl	8007a7a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078b4:	e00a      	b.n	80078cc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 f8df 	bl	8007a7a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078bc:	e006      	b.n	80078cc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f000 f8db 	bl	8007a7a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2200      	movs	r2, #0
 80078c8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80078ca:	e0c3      	b.n	8007a54 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078cc:	bf00      	nop
    return;
 80078ce:	e0c1      	b.n	8007a54 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	f040 80a1 	bne.w	8007a1c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80078da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078dc:	f003 0310 	and.w	r3, r3, #16
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	f000 809b 	beq.w	8007a1c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80078e6:	6a3b      	ldr	r3, [r7, #32]
 80078e8:	f003 0310 	and.w	r3, r3, #16
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	f000 8095 	beq.w	8007a1c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80078f2:	2300      	movs	r3, #0
 80078f4:	60fb      	str	r3, [r7, #12]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	60fb      	str	r3, [r7, #12]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	60fb      	str	r3, [r7, #12]
 8007906:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	695b      	ldr	r3, [r3, #20]
 800790e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007912:	2b00      	cmp	r3, #0
 8007914:	d04e      	beq.n	80079b4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8007920:	8a3b      	ldrh	r3, [r7, #16]
 8007922:	2b00      	cmp	r3, #0
 8007924:	f000 8098 	beq.w	8007a58 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800792c:	8a3a      	ldrh	r2, [r7, #16]
 800792e:	429a      	cmp	r2, r3
 8007930:	f080 8092 	bcs.w	8007a58 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	8a3a      	ldrh	r2, [r7, #16]
 8007938:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800793e:	699b      	ldr	r3, [r3, #24]
 8007940:	2b20      	cmp	r3, #32
 8007942:	d02b      	beq.n	800799c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	68da      	ldr	r2, [r3, #12]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007952:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	695a      	ldr	r2, [r3, #20]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f022 0201 	bic.w	r2, r2, #1
 8007962:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	695a      	ldr	r2, [r3, #20]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007972:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2220      	movs	r2, #32
 8007978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2200      	movs	r2, #0
 8007980:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	68da      	ldr	r2, [r3, #12]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f022 0210 	bic.w	r2, r2, #16
 8007990:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007996:	4618      	mov	r0, r3
 8007998:	f7fb fcad 	bl	80032f6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	1ad3      	subs	r3, r2, r3
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	4619      	mov	r1, r3
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f000 f86d 	bl	8007a8c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80079b2:	e051      	b.n	8007a58 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80079bc:	b29b      	uxth	r3, r3
 80079be:	1ad3      	subs	r3, r2, r3
 80079c0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d047      	beq.n	8007a5c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80079cc:	8a7b      	ldrh	r3, [r7, #18]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d044      	beq.n	8007a5c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	68da      	ldr	r2, [r3, #12]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80079e0:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	695a      	ldr	r2, [r3, #20]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f022 0201 	bic.w	r2, r2, #1
 80079f0:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2220      	movs	r2, #32
 80079f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2200      	movs	r2, #0
 80079fe:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	68da      	ldr	r2, [r3, #12]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f022 0210 	bic.w	r2, r2, #16
 8007a0e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007a10:	8a7b      	ldrh	r3, [r7, #18]
 8007a12:	4619      	mov	r1, r3
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f000 f839 	bl	8007a8c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007a1a:	e01f      	b.n	8007a5c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d008      	beq.n	8007a38 <HAL_UART_IRQHandler+0x324>
 8007a26:	6a3b      	ldr	r3, [r7, #32]
 8007a28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d003      	beq.n	8007a38 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f000 f8f9 	bl	8007c28 <UART_Transmit_IT>
    return;
 8007a36:	e012      	b.n	8007a5e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d00d      	beq.n	8007a5e <HAL_UART_IRQHandler+0x34a>
 8007a42:	6a3b      	ldr	r3, [r7, #32]
 8007a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d008      	beq.n	8007a5e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f000 f93a 	bl	8007cc6 <UART_EndTransmit_IT>
    return;
 8007a52:	e004      	b.n	8007a5e <HAL_UART_IRQHandler+0x34a>
    return;
 8007a54:	bf00      	nop
 8007a56:	e002      	b.n	8007a5e <HAL_UART_IRQHandler+0x34a>
      return;
 8007a58:	bf00      	nop
 8007a5a:	e000      	b.n	8007a5e <HAL_UART_IRQHandler+0x34a>
      return;
 8007a5c:	bf00      	nop
  }
}
 8007a5e:	3728      	adds	r7, #40	; 0x28
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}
 8007a64:	08007c01 	.word	0x08007c01

08007a68 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b083      	sub	sp, #12
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007a70:	bf00      	nop
 8007a72:	370c      	adds	r7, #12
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bc80      	pop	{r7}
 8007a78:	4770      	bx	lr

08007a7a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007a7a:	b480      	push	{r7}
 8007a7c:	b083      	sub	sp, #12
 8007a7e:	af00      	add	r7, sp, #0
 8007a80:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007a82:	bf00      	nop
 8007a84:	370c      	adds	r7, #12
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bc80      	pop	{r7}
 8007a8a:	4770      	bx	lr

08007a8c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b083      	sub	sp, #12
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	460b      	mov	r3, r1
 8007a96:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007a98:	bf00      	nop
 8007a9a:	370c      	adds	r7, #12
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bc80      	pop	{r7}
 8007aa0:	4770      	bx	lr

08007aa2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007aa2:	b580      	push	{r7, lr}
 8007aa4:	b084      	sub	sp, #16
 8007aa6:	af00      	add	r7, sp, #0
 8007aa8:	60f8      	str	r0, [r7, #12]
 8007aaa:	60b9      	str	r1, [r7, #8]
 8007aac:	603b      	str	r3, [r7, #0]
 8007aae:	4613      	mov	r3, r2
 8007ab0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ab2:	e02c      	b.n	8007b0e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ab4:	69bb      	ldr	r3, [r7, #24]
 8007ab6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007aba:	d028      	beq.n	8007b0e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007abc:	69bb      	ldr	r3, [r7, #24]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d007      	beq.n	8007ad2 <UART_WaitOnFlagUntilTimeout+0x30>
 8007ac2:	f7fa fe05 	bl	80026d0 <HAL_GetTick>
 8007ac6:	4602      	mov	r2, r0
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	1ad3      	subs	r3, r2, r3
 8007acc:	69ba      	ldr	r2, [r7, #24]
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	d21d      	bcs.n	8007b0e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	68da      	ldr	r2, [r3, #12]
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007ae0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	695a      	ldr	r2, [r3, #20]
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f022 0201 	bic.w	r2, r2, #1
 8007af0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2220      	movs	r2, #32
 8007af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	2220      	movs	r2, #32
 8007afe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	2200      	movs	r2, #0
 8007b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007b0a:	2303      	movs	r3, #3
 8007b0c:	e00f      	b.n	8007b2e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	4013      	ands	r3, r2
 8007b18:	68ba      	ldr	r2, [r7, #8]
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	bf0c      	ite	eq
 8007b1e:	2301      	moveq	r3, #1
 8007b20:	2300      	movne	r3, #0
 8007b22:	b2db      	uxtb	r3, r3
 8007b24:	461a      	mov	r2, r3
 8007b26:	79fb      	ldrb	r3, [r7, #7]
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d0c3      	beq.n	8007ab4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007b2c:	2300      	movs	r3, #0
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3710      	adds	r7, #16
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}

08007b36 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007b36:	b480      	push	{r7}
 8007b38:	b085      	sub	sp, #20
 8007b3a:	af00      	add	r7, sp, #0
 8007b3c:	60f8      	str	r0, [r7, #12]
 8007b3e:	60b9      	str	r1, [r7, #8]
 8007b40:	4613      	mov	r3, r2
 8007b42:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	68ba      	ldr	r2, [r7, #8]
 8007b48:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	88fa      	ldrh	r2, [r7, #6]
 8007b4e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	88fa      	ldrh	r2, [r7, #6]
 8007b54:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	2222      	movs	r2, #34	; 0x22
 8007b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2200      	movs	r2, #0
 8007b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	68da      	ldr	r2, [r3, #12]
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b7a:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	695a      	ldr	r2, [r3, #20]
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f042 0201 	orr.w	r2, r2, #1
 8007b8a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	68da      	ldr	r2, [r3, #12]
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f042 0220 	orr.w	r2, r2, #32
 8007b9a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007b9c:	2300      	movs	r3, #0
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3714      	adds	r7, #20
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bc80      	pop	{r7}
 8007ba6:	4770      	bx	lr

08007ba8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b083      	sub	sp, #12
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	68da      	ldr	r2, [r3, #12]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007bbe:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	695a      	ldr	r2, [r3, #20]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f022 0201 	bic.w	r2, r2, #1
 8007bce:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	d107      	bne.n	8007be8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	68da      	ldr	r2, [r3, #12]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f022 0210 	bic.w	r2, r2, #16
 8007be6:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2220      	movs	r2, #32
 8007bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007bf6:	bf00      	nop
 8007bf8:	370c      	adds	r7, #12
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bc80      	pop	{r7}
 8007bfe:	4770      	bx	lr

08007c00 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b084      	sub	sp, #16
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c0c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	2200      	movs	r2, #0
 8007c12:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	2200      	movs	r2, #0
 8007c18:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007c1a:	68f8      	ldr	r0, [r7, #12]
 8007c1c:	f7ff ff2d 	bl	8007a7a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c20:	bf00      	nop
 8007c22:	3710      	adds	r7, #16
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}

08007c28 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b085      	sub	sp, #20
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c36:	b2db      	uxtb	r3, r3
 8007c38:	2b21      	cmp	r3, #33	; 0x21
 8007c3a:	d13e      	bne.n	8007cba <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	689b      	ldr	r3, [r3, #8]
 8007c40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c44:	d114      	bne.n	8007c70 <UART_Transmit_IT+0x48>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	691b      	ldr	r3, [r3, #16]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d110      	bne.n	8007c70 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6a1b      	ldr	r3, [r3, #32]
 8007c52:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	881b      	ldrh	r3, [r3, #0]
 8007c58:	461a      	mov	r2, r3
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c62:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6a1b      	ldr	r3, [r3, #32]
 8007c68:	1c9a      	adds	r2, r3, #2
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	621a      	str	r2, [r3, #32]
 8007c6e:	e008      	b.n	8007c82 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6a1b      	ldr	r3, [r3, #32]
 8007c74:	1c59      	adds	r1, r3, #1
 8007c76:	687a      	ldr	r2, [r7, #4]
 8007c78:	6211      	str	r1, [r2, #32]
 8007c7a:	781a      	ldrb	r2, [r3, #0]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007c86:	b29b      	uxth	r3, r3
 8007c88:	3b01      	subs	r3, #1
 8007c8a:	b29b      	uxth	r3, r3
 8007c8c:	687a      	ldr	r2, [r7, #4]
 8007c8e:	4619      	mov	r1, r3
 8007c90:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d10f      	bne.n	8007cb6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	68da      	ldr	r2, [r3, #12]
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ca4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	68da      	ldr	r2, [r3, #12]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007cb4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	e000      	b.n	8007cbc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007cba:	2302      	movs	r3, #2
  }
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3714      	adds	r7, #20
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bc80      	pop	{r7}
 8007cc4:	4770      	bx	lr

08007cc6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007cc6:	b580      	push	{r7, lr}
 8007cc8:	b082      	sub	sp, #8
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	68da      	ldr	r2, [r3, #12]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007cdc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2220      	movs	r2, #32
 8007ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f7ff febe 	bl	8007a68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007cec:	2300      	movs	r3, #0
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3708      	adds	r7, #8
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}

08007cf6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007cf6:	b580      	push	{r7, lr}
 8007cf8:	b086      	sub	sp, #24
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d04:	b2db      	uxtb	r3, r3
 8007d06:	2b22      	cmp	r3, #34	; 0x22
 8007d08:	f040 8099 	bne.w	8007e3e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	689b      	ldr	r3, [r3, #8]
 8007d10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d14:	d117      	bne.n	8007d46 <UART_Receive_IT+0x50>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	691b      	ldr	r3, [r3, #16]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d113      	bne.n	8007d46 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d26:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	b29b      	uxth	r3, r3
 8007d30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d34:	b29a      	uxth	r2, r3
 8007d36:	693b      	ldr	r3, [r7, #16]
 8007d38:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d3e:	1c9a      	adds	r2, r3, #2
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	629a      	str	r2, [r3, #40]	; 0x28
 8007d44:	e026      	b.n	8007d94 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d4a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	689b      	ldr	r3, [r3, #8]
 8007d54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d58:	d007      	beq.n	8007d6a <UART_Receive_IT+0x74>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	689b      	ldr	r3, [r3, #8]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d10a      	bne.n	8007d78 <UART_Receive_IT+0x82>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	691b      	ldr	r3, [r3, #16]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d106      	bne.n	8007d78 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	b2da      	uxtb	r2, r3
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	701a      	strb	r2, [r3, #0]
 8007d76:	e008      	b.n	8007d8a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	b2db      	uxtb	r3, r3
 8007d80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d84:	b2da      	uxtb	r2, r3
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d8e:	1c5a      	adds	r2, r3, #1
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d98:	b29b      	uxth	r3, r3
 8007d9a:	3b01      	subs	r3, #1
 8007d9c:	b29b      	uxth	r3, r3
 8007d9e:	687a      	ldr	r2, [r7, #4]
 8007da0:	4619      	mov	r1, r3
 8007da2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d148      	bne.n	8007e3a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	68da      	ldr	r2, [r3, #12]
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f022 0220 	bic.w	r2, r2, #32
 8007db6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	68da      	ldr	r2, [r3, #12]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007dc6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	695a      	ldr	r2, [r3, #20]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f022 0201 	bic.w	r2, r2, #1
 8007dd6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2220      	movs	r2, #32
 8007ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007de4:	2b01      	cmp	r3, #1
 8007de6:	d123      	bne.n	8007e30 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2200      	movs	r2, #0
 8007dec:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	68da      	ldr	r2, [r3, #12]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f022 0210 	bic.w	r2, r2, #16
 8007dfc:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f003 0310 	and.w	r3, r3, #16
 8007e08:	2b10      	cmp	r3, #16
 8007e0a:	d10a      	bne.n	8007e22 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	60fb      	str	r3, [r7, #12]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	60fb      	str	r3, [r7, #12]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	60fb      	str	r3, [r7, #12]
 8007e20:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007e26:	4619      	mov	r1, r3
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f7ff fe2f 	bl	8007a8c <HAL_UARTEx_RxEventCallback>
 8007e2e:	e002      	b.n	8007e36 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f7fa f8d5 	bl	8001fe0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007e36:	2300      	movs	r3, #0
 8007e38:	e002      	b.n	8007e40 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	e000      	b.n	8007e40 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8007e3e:	2302      	movs	r3, #2
  }
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	3718      	adds	r7, #24
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}

08007e48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b084      	sub	sp, #16
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	691b      	ldr	r3, [r3, #16]
 8007e56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	68da      	ldr	r2, [r3, #12]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	430a      	orrs	r2, r1
 8007e64:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	689a      	ldr	r2, [r3, #8]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	691b      	ldr	r3, [r3, #16]
 8007e6e:	431a      	orrs	r2, r3
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	695b      	ldr	r3, [r3, #20]
 8007e74:	4313      	orrs	r3, r2
 8007e76:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	68db      	ldr	r3, [r3, #12]
 8007e7e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007e82:	f023 030c 	bic.w	r3, r3, #12
 8007e86:	687a      	ldr	r2, [r7, #4]
 8007e88:	6812      	ldr	r2, [r2, #0]
 8007e8a:	68b9      	ldr	r1, [r7, #8]
 8007e8c:	430b      	orrs	r3, r1
 8007e8e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	695b      	ldr	r3, [r3, #20]
 8007e96:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	699a      	ldr	r2, [r3, #24]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	430a      	orrs	r2, r1
 8007ea4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4a2c      	ldr	r2, [pc, #176]	; (8007f5c <UART_SetConfig+0x114>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d103      	bne.n	8007eb8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007eb0:	f7fe fd4c 	bl	800694c <HAL_RCC_GetPCLK2Freq>
 8007eb4:	60f8      	str	r0, [r7, #12]
 8007eb6:	e002      	b.n	8007ebe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007eb8:	f7fe fd34 	bl	8006924 <HAL_RCC_GetPCLK1Freq>
 8007ebc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007ebe:	68fa      	ldr	r2, [r7, #12]
 8007ec0:	4613      	mov	r3, r2
 8007ec2:	009b      	lsls	r3, r3, #2
 8007ec4:	4413      	add	r3, r2
 8007ec6:	009a      	lsls	r2, r3, #2
 8007ec8:	441a      	add	r2, r3
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	009b      	lsls	r3, r3, #2
 8007ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ed4:	4a22      	ldr	r2, [pc, #136]	; (8007f60 <UART_SetConfig+0x118>)
 8007ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8007eda:	095b      	lsrs	r3, r3, #5
 8007edc:	0119      	lsls	r1, r3, #4
 8007ede:	68fa      	ldr	r2, [r7, #12]
 8007ee0:	4613      	mov	r3, r2
 8007ee2:	009b      	lsls	r3, r3, #2
 8007ee4:	4413      	add	r3, r2
 8007ee6:	009a      	lsls	r2, r3, #2
 8007ee8:	441a      	add	r2, r3
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	009b      	lsls	r3, r3, #2
 8007ef0:	fbb2 f2f3 	udiv	r2, r2, r3
 8007ef4:	4b1a      	ldr	r3, [pc, #104]	; (8007f60 <UART_SetConfig+0x118>)
 8007ef6:	fba3 0302 	umull	r0, r3, r3, r2
 8007efa:	095b      	lsrs	r3, r3, #5
 8007efc:	2064      	movs	r0, #100	; 0x64
 8007efe:	fb00 f303 	mul.w	r3, r0, r3
 8007f02:	1ad3      	subs	r3, r2, r3
 8007f04:	011b      	lsls	r3, r3, #4
 8007f06:	3332      	adds	r3, #50	; 0x32
 8007f08:	4a15      	ldr	r2, [pc, #84]	; (8007f60 <UART_SetConfig+0x118>)
 8007f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8007f0e:	095b      	lsrs	r3, r3, #5
 8007f10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007f14:	4419      	add	r1, r3
 8007f16:	68fa      	ldr	r2, [r7, #12]
 8007f18:	4613      	mov	r3, r2
 8007f1a:	009b      	lsls	r3, r3, #2
 8007f1c:	4413      	add	r3, r2
 8007f1e:	009a      	lsls	r2, r3, #2
 8007f20:	441a      	add	r2, r3
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	009b      	lsls	r3, r3, #2
 8007f28:	fbb2 f2f3 	udiv	r2, r2, r3
 8007f2c:	4b0c      	ldr	r3, [pc, #48]	; (8007f60 <UART_SetConfig+0x118>)
 8007f2e:	fba3 0302 	umull	r0, r3, r3, r2
 8007f32:	095b      	lsrs	r3, r3, #5
 8007f34:	2064      	movs	r0, #100	; 0x64
 8007f36:	fb00 f303 	mul.w	r3, r0, r3
 8007f3a:	1ad3      	subs	r3, r2, r3
 8007f3c:	011b      	lsls	r3, r3, #4
 8007f3e:	3332      	adds	r3, #50	; 0x32
 8007f40:	4a07      	ldr	r2, [pc, #28]	; (8007f60 <UART_SetConfig+0x118>)
 8007f42:	fba2 2303 	umull	r2, r3, r2, r3
 8007f46:	095b      	lsrs	r3, r3, #5
 8007f48:	f003 020f 	and.w	r2, r3, #15
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	440a      	add	r2, r1
 8007f52:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007f54:	bf00      	nop
 8007f56:	3710      	adds	r7, #16
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}
 8007f5c:	40013800 	.word	0x40013800
 8007f60:	51eb851f 	.word	0x51eb851f

08007f64 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007f64:	b084      	sub	sp, #16
 8007f66:	b480      	push	{r7}
 8007f68:	b083      	sub	sp, #12
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	6078      	str	r0, [r7, #4]
 8007f6e:	f107 0014 	add.w	r0, r7, #20
 8007f72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007f76:	2300      	movs	r3, #0
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	370c      	adds	r7, #12
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bc80      	pop	{r7}
 8007f80:	b004      	add	sp, #16
 8007f82:	4770      	bx	lr

08007f84 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007f84:	b480      	push	{r7}
 8007f86:	b085      	sub	sp, #20
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007f94:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007f98:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	b29a      	uxth	r2, r3
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007fa4:	2300      	movs	r3, #0
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3714      	adds	r7, #20
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bc80      	pop	{r7}
 8007fae:	4770      	bx	lr

08007fb0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b085      	sub	sp, #20
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007fb8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007fbc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007fc4:	b29a      	uxth	r2, r3
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	b29b      	uxth	r3, r3
 8007fca:	43db      	mvns	r3, r3
 8007fcc:	b29b      	uxth	r3, r3
 8007fce:	4013      	ands	r3, r2
 8007fd0:	b29a      	uxth	r2, r3
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007fd8:	2300      	movs	r3, #0
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3714      	adds	r7, #20
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bc80      	pop	{r7}
 8007fe2:	4770      	bx	lr

08007fe4 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b083      	sub	sp, #12
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
 8007fec:	460b      	mov	r3, r1
 8007fee:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007ff0:	2300      	movs	r3, #0
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	370c      	adds	r7, #12
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bc80      	pop	{r7}
 8007ffa:	4770      	bx	lr

08007ffc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007ffc:	b084      	sub	sp, #16
 8007ffe:	b480      	push	{r7}
 8008000:	b083      	sub	sp, #12
 8008002:	af00      	add	r7, sp, #0
 8008004:	6078      	str	r0, [r7, #4]
 8008006:	f107 0014 	add.w	r0, r7, #20
 800800a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2201      	movs	r2, #1
 8008012:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2200      	movs	r2, #0
 800801a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2200      	movs	r2, #0
 8008022:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2200      	movs	r2, #0
 800802a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800802e:	2300      	movs	r3, #0
}
 8008030:	4618      	mov	r0, r3
 8008032:	370c      	adds	r7, #12
 8008034:	46bd      	mov	sp, r7
 8008036:	bc80      	pop	{r7}
 8008038:	b004      	add	sp, #16
 800803a:	4770      	bx	lr

0800803c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800803c:	b480      	push	{r7}
 800803e:	b09b      	sub	sp, #108	; 0x6c
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
 8008044:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8008046:	2300      	movs	r3, #0
 8008048:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800804c:	687a      	ldr	r2, [r7, #4]
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	781b      	ldrb	r3, [r3, #0]
 8008052:	009b      	lsls	r3, r3, #2
 8008054:	4413      	add	r3, r2
 8008056:	881b      	ldrh	r3, [r3, #0]
 8008058:	b29b      	uxth	r3, r3
 800805a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800805e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008062:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	78db      	ldrb	r3, [r3, #3]
 800806a:	2b03      	cmp	r3, #3
 800806c:	d81f      	bhi.n	80080ae <USB_ActivateEndpoint+0x72>
 800806e:	a201      	add	r2, pc, #4	; (adr r2, 8008074 <USB_ActivateEndpoint+0x38>)
 8008070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008074:	08008085 	.word	0x08008085
 8008078:	080080a1 	.word	0x080080a1
 800807c:	080080b7 	.word	0x080080b7
 8008080:	08008093 	.word	0x08008093
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008084:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8008088:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800808c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8008090:	e012      	b.n	80080b8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8008092:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8008096:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800809a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800809e:	e00b      	b.n	80080b8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80080a0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80080a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80080a8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80080ac:	e004      	b.n	80080b8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80080ae:	2301      	movs	r3, #1
 80080b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80080b4:	e000      	b.n	80080b8 <USB_ActivateEndpoint+0x7c>
      break;
 80080b6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80080b8:	687a      	ldr	r2, [r7, #4]
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	781b      	ldrb	r3, [r3, #0]
 80080be:	009b      	lsls	r3, r3, #2
 80080c0:	441a      	add	r2, r3
 80080c2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80080c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080d6:	b29b      	uxth	r3, r3
 80080d8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80080da:	687a      	ldr	r2, [r7, #4]
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	781b      	ldrb	r3, [r3, #0]
 80080e0:	009b      	lsls	r3, r3, #2
 80080e2:	4413      	add	r3, r2
 80080e4:	881b      	ldrh	r3, [r3, #0]
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080f0:	b29a      	uxth	r2, r3
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	781b      	ldrb	r3, [r3, #0]
 80080f6:	b29b      	uxth	r3, r3
 80080f8:	4313      	orrs	r3, r2
 80080fa:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80080fe:	687a      	ldr	r2, [r7, #4]
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	781b      	ldrb	r3, [r3, #0]
 8008104:	009b      	lsls	r3, r3, #2
 8008106:	441a      	add	r2, r3
 8008108:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800810c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008110:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008114:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800811c:	b29b      	uxth	r3, r3
 800811e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	7b1b      	ldrb	r3, [r3, #12]
 8008124:	2b00      	cmp	r3, #0
 8008126:	f040 8149 	bne.w	80083bc <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	785b      	ldrb	r3, [r3, #1]
 800812e:	2b00      	cmp	r3, #0
 8008130:	f000 8084 	beq.w	800823c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	617b      	str	r3, [r7, #20]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800813e:	b29b      	uxth	r3, r3
 8008140:	461a      	mov	r2, r3
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	4413      	add	r3, r2
 8008146:	617b      	str	r3, [r7, #20]
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	781b      	ldrb	r3, [r3, #0]
 800814c:	011a      	lsls	r2, r3, #4
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	4413      	add	r3, r2
 8008152:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008156:	613b      	str	r3, [r7, #16]
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	88db      	ldrh	r3, [r3, #6]
 800815c:	085b      	lsrs	r3, r3, #1
 800815e:	b29b      	uxth	r3, r3
 8008160:	005b      	lsls	r3, r3, #1
 8008162:	b29a      	uxth	r2, r3
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008168:	687a      	ldr	r2, [r7, #4]
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	781b      	ldrb	r3, [r3, #0]
 800816e:	009b      	lsls	r3, r3, #2
 8008170:	4413      	add	r3, r2
 8008172:	881b      	ldrh	r3, [r3, #0]
 8008174:	81fb      	strh	r3, [r7, #14]
 8008176:	89fb      	ldrh	r3, [r7, #14]
 8008178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800817c:	2b00      	cmp	r3, #0
 800817e:	d01b      	beq.n	80081b8 <USB_ActivateEndpoint+0x17c>
 8008180:	687a      	ldr	r2, [r7, #4]
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	781b      	ldrb	r3, [r3, #0]
 8008186:	009b      	lsls	r3, r3, #2
 8008188:	4413      	add	r3, r2
 800818a:	881b      	ldrh	r3, [r3, #0]
 800818c:	b29b      	uxth	r3, r3
 800818e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008196:	81bb      	strh	r3, [r7, #12]
 8008198:	687a      	ldr	r2, [r7, #4]
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	781b      	ldrb	r3, [r3, #0]
 800819e:	009b      	lsls	r3, r3, #2
 80081a0:	441a      	add	r2, r3
 80081a2:	89bb      	ldrh	r3, [r7, #12]
 80081a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081b0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80081b4:	b29b      	uxth	r3, r3
 80081b6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	78db      	ldrb	r3, [r3, #3]
 80081bc:	2b01      	cmp	r3, #1
 80081be:	d020      	beq.n	8008202 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80081c0:	687a      	ldr	r2, [r7, #4]
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	781b      	ldrb	r3, [r3, #0]
 80081c6:	009b      	lsls	r3, r3, #2
 80081c8:	4413      	add	r3, r2
 80081ca:	881b      	ldrh	r3, [r3, #0]
 80081cc:	b29b      	uxth	r3, r3
 80081ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081d6:	813b      	strh	r3, [r7, #8]
 80081d8:	893b      	ldrh	r3, [r7, #8]
 80081da:	f083 0320 	eor.w	r3, r3, #32
 80081de:	813b      	strh	r3, [r7, #8]
 80081e0:	687a      	ldr	r2, [r7, #4]
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	781b      	ldrb	r3, [r3, #0]
 80081e6:	009b      	lsls	r3, r3, #2
 80081e8:	441a      	add	r2, r3
 80081ea:	893b      	ldrh	r3, [r7, #8]
 80081ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081fc:	b29b      	uxth	r3, r3
 80081fe:	8013      	strh	r3, [r2, #0]
 8008200:	e27f      	b.n	8008702 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008202:	687a      	ldr	r2, [r7, #4]
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	781b      	ldrb	r3, [r3, #0]
 8008208:	009b      	lsls	r3, r3, #2
 800820a:	4413      	add	r3, r2
 800820c:	881b      	ldrh	r3, [r3, #0]
 800820e:	b29b      	uxth	r3, r3
 8008210:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008214:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008218:	817b      	strh	r3, [r7, #10]
 800821a:	687a      	ldr	r2, [r7, #4]
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	781b      	ldrb	r3, [r3, #0]
 8008220:	009b      	lsls	r3, r3, #2
 8008222:	441a      	add	r2, r3
 8008224:	897b      	ldrh	r3, [r7, #10]
 8008226:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800822a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800822e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008232:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008236:	b29b      	uxth	r3, r3
 8008238:	8013      	strh	r3, [r2, #0]
 800823a:	e262      	b.n	8008702 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008246:	b29b      	uxth	r3, r3
 8008248:	461a      	mov	r2, r3
 800824a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800824c:	4413      	add	r3, r2
 800824e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	781b      	ldrb	r3, [r3, #0]
 8008254:	011a      	lsls	r2, r3, #4
 8008256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008258:	4413      	add	r3, r2
 800825a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800825e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	88db      	ldrh	r3, [r3, #6]
 8008264:	085b      	lsrs	r3, r3, #1
 8008266:	b29b      	uxth	r3, r3
 8008268:	005b      	lsls	r3, r3, #1
 800826a:	b29a      	uxth	r2, r3
 800826c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800826e:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	627b      	str	r3, [r7, #36]	; 0x24
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800827a:	b29b      	uxth	r3, r3
 800827c:	461a      	mov	r2, r3
 800827e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008280:	4413      	add	r3, r2
 8008282:	627b      	str	r3, [r7, #36]	; 0x24
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	781b      	ldrb	r3, [r3, #0]
 8008288:	011a      	lsls	r2, r3, #4
 800828a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800828c:	4413      	add	r3, r2
 800828e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008292:	623b      	str	r3, [r7, #32]
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	691b      	ldr	r3, [r3, #16]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d112      	bne.n	80082c2 <USB_ActivateEndpoint+0x286>
 800829c:	6a3b      	ldr	r3, [r7, #32]
 800829e:	881b      	ldrh	r3, [r3, #0]
 80082a0:	b29b      	uxth	r3, r3
 80082a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80082a6:	b29a      	uxth	r2, r3
 80082a8:	6a3b      	ldr	r3, [r7, #32]
 80082aa:	801a      	strh	r2, [r3, #0]
 80082ac:	6a3b      	ldr	r3, [r7, #32]
 80082ae:	881b      	ldrh	r3, [r3, #0]
 80082b0:	b29b      	uxth	r3, r3
 80082b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082ba:	b29a      	uxth	r2, r3
 80082bc:	6a3b      	ldr	r3, [r7, #32]
 80082be:	801a      	strh	r2, [r3, #0]
 80082c0:	e02f      	b.n	8008322 <USB_ActivateEndpoint+0x2e6>
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	691b      	ldr	r3, [r3, #16]
 80082c6:	2b3e      	cmp	r3, #62	; 0x3e
 80082c8:	d813      	bhi.n	80082f2 <USB_ActivateEndpoint+0x2b6>
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	691b      	ldr	r3, [r3, #16]
 80082ce:	085b      	lsrs	r3, r3, #1
 80082d0:	663b      	str	r3, [r7, #96]	; 0x60
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	691b      	ldr	r3, [r3, #16]
 80082d6:	f003 0301 	and.w	r3, r3, #1
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d002      	beq.n	80082e4 <USB_ActivateEndpoint+0x2a8>
 80082de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80082e0:	3301      	adds	r3, #1
 80082e2:	663b      	str	r3, [r7, #96]	; 0x60
 80082e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80082e6:	b29b      	uxth	r3, r3
 80082e8:	029b      	lsls	r3, r3, #10
 80082ea:	b29a      	uxth	r2, r3
 80082ec:	6a3b      	ldr	r3, [r7, #32]
 80082ee:	801a      	strh	r2, [r3, #0]
 80082f0:	e017      	b.n	8008322 <USB_ActivateEndpoint+0x2e6>
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	691b      	ldr	r3, [r3, #16]
 80082f6:	095b      	lsrs	r3, r3, #5
 80082f8:	663b      	str	r3, [r7, #96]	; 0x60
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	691b      	ldr	r3, [r3, #16]
 80082fe:	f003 031f 	and.w	r3, r3, #31
 8008302:	2b00      	cmp	r3, #0
 8008304:	d102      	bne.n	800830c <USB_ActivateEndpoint+0x2d0>
 8008306:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008308:	3b01      	subs	r3, #1
 800830a:	663b      	str	r3, [r7, #96]	; 0x60
 800830c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800830e:	b29b      	uxth	r3, r3
 8008310:	029b      	lsls	r3, r3, #10
 8008312:	b29b      	uxth	r3, r3
 8008314:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008318:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800831c:	b29a      	uxth	r2, r3
 800831e:	6a3b      	ldr	r3, [r7, #32]
 8008320:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008322:	687a      	ldr	r2, [r7, #4]
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	781b      	ldrb	r3, [r3, #0]
 8008328:	009b      	lsls	r3, r3, #2
 800832a:	4413      	add	r3, r2
 800832c:	881b      	ldrh	r3, [r3, #0]
 800832e:	83fb      	strh	r3, [r7, #30]
 8008330:	8bfb      	ldrh	r3, [r7, #30]
 8008332:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008336:	2b00      	cmp	r3, #0
 8008338:	d01b      	beq.n	8008372 <USB_ActivateEndpoint+0x336>
 800833a:	687a      	ldr	r2, [r7, #4]
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	781b      	ldrb	r3, [r3, #0]
 8008340:	009b      	lsls	r3, r3, #2
 8008342:	4413      	add	r3, r2
 8008344:	881b      	ldrh	r3, [r3, #0]
 8008346:	b29b      	uxth	r3, r3
 8008348:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800834c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008350:	83bb      	strh	r3, [r7, #28]
 8008352:	687a      	ldr	r2, [r7, #4]
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	781b      	ldrb	r3, [r3, #0]
 8008358:	009b      	lsls	r3, r3, #2
 800835a:	441a      	add	r2, r3
 800835c:	8bbb      	ldrh	r3, [r7, #28]
 800835e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008362:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008366:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800836a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800836e:	b29b      	uxth	r3, r3
 8008370:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008372:	687a      	ldr	r2, [r7, #4]
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	781b      	ldrb	r3, [r3, #0]
 8008378:	009b      	lsls	r3, r3, #2
 800837a:	4413      	add	r3, r2
 800837c:	881b      	ldrh	r3, [r3, #0]
 800837e:	b29b      	uxth	r3, r3
 8008380:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008384:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008388:	837b      	strh	r3, [r7, #26]
 800838a:	8b7b      	ldrh	r3, [r7, #26]
 800838c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008390:	837b      	strh	r3, [r7, #26]
 8008392:	8b7b      	ldrh	r3, [r7, #26]
 8008394:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008398:	837b      	strh	r3, [r7, #26]
 800839a:	687a      	ldr	r2, [r7, #4]
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	781b      	ldrb	r3, [r3, #0]
 80083a0:	009b      	lsls	r3, r3, #2
 80083a2:	441a      	add	r2, r3
 80083a4:	8b7b      	ldrh	r3, [r7, #26]
 80083a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083b6:	b29b      	uxth	r3, r3
 80083b8:	8013      	strh	r3, [r2, #0]
 80083ba:	e1a2      	b.n	8008702 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80083bc:	687a      	ldr	r2, [r7, #4]
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	781b      	ldrb	r3, [r3, #0]
 80083c2:	009b      	lsls	r3, r3, #2
 80083c4:	4413      	add	r3, r2
 80083c6:	881b      	ldrh	r3, [r3, #0]
 80083c8:	b29b      	uxth	r3, r3
 80083ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083d2:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80083d6:	687a      	ldr	r2, [r7, #4]
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	781b      	ldrb	r3, [r3, #0]
 80083dc:	009b      	lsls	r3, r3, #2
 80083de:	441a      	add	r2, r3
 80083e0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80083e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083ec:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80083f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083f4:	b29b      	uxth	r3, r3
 80083f6:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	65bb      	str	r3, [r7, #88]	; 0x58
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008402:	b29b      	uxth	r3, r3
 8008404:	461a      	mov	r2, r3
 8008406:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008408:	4413      	add	r3, r2
 800840a:	65bb      	str	r3, [r7, #88]	; 0x58
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	781b      	ldrb	r3, [r3, #0]
 8008410:	011a      	lsls	r2, r3, #4
 8008412:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008414:	4413      	add	r3, r2
 8008416:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800841a:	657b      	str	r3, [r7, #84]	; 0x54
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	891b      	ldrh	r3, [r3, #8]
 8008420:	085b      	lsrs	r3, r3, #1
 8008422:	b29b      	uxth	r3, r3
 8008424:	005b      	lsls	r3, r3, #1
 8008426:	b29a      	uxth	r2, r3
 8008428:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800842a:	801a      	strh	r2, [r3, #0]
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	653b      	str	r3, [r7, #80]	; 0x50
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008436:	b29b      	uxth	r3, r3
 8008438:	461a      	mov	r2, r3
 800843a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800843c:	4413      	add	r3, r2
 800843e:	653b      	str	r3, [r7, #80]	; 0x50
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	781b      	ldrb	r3, [r3, #0]
 8008444:	011a      	lsls	r2, r3, #4
 8008446:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008448:	4413      	add	r3, r2
 800844a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800844e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	895b      	ldrh	r3, [r3, #10]
 8008454:	085b      	lsrs	r3, r3, #1
 8008456:	b29b      	uxth	r3, r3
 8008458:	005b      	lsls	r3, r3, #1
 800845a:	b29a      	uxth	r2, r3
 800845c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800845e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	785b      	ldrb	r3, [r3, #1]
 8008464:	2b00      	cmp	r3, #0
 8008466:	f040 8091 	bne.w	800858c <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800846a:	687a      	ldr	r2, [r7, #4]
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	781b      	ldrb	r3, [r3, #0]
 8008470:	009b      	lsls	r3, r3, #2
 8008472:	4413      	add	r3, r2
 8008474:	881b      	ldrh	r3, [r3, #0]
 8008476:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8008478:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800847a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800847e:	2b00      	cmp	r3, #0
 8008480:	d01b      	beq.n	80084ba <USB_ActivateEndpoint+0x47e>
 8008482:	687a      	ldr	r2, [r7, #4]
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	781b      	ldrb	r3, [r3, #0]
 8008488:	009b      	lsls	r3, r3, #2
 800848a:	4413      	add	r3, r2
 800848c:	881b      	ldrh	r3, [r3, #0]
 800848e:	b29b      	uxth	r3, r3
 8008490:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008494:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008498:	877b      	strh	r3, [r7, #58]	; 0x3a
 800849a:	687a      	ldr	r2, [r7, #4]
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	781b      	ldrb	r3, [r3, #0]
 80084a0:	009b      	lsls	r3, r3, #2
 80084a2:	441a      	add	r2, r3
 80084a4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80084a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80084b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084b6:	b29b      	uxth	r3, r3
 80084b8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80084ba:	687a      	ldr	r2, [r7, #4]
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	781b      	ldrb	r3, [r3, #0]
 80084c0:	009b      	lsls	r3, r3, #2
 80084c2:	4413      	add	r3, r2
 80084c4:	881b      	ldrh	r3, [r3, #0]
 80084c6:	873b      	strh	r3, [r7, #56]	; 0x38
 80084c8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80084ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d01b      	beq.n	800850a <USB_ActivateEndpoint+0x4ce>
 80084d2:	687a      	ldr	r2, [r7, #4]
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	781b      	ldrb	r3, [r3, #0]
 80084d8:	009b      	lsls	r3, r3, #2
 80084da:	4413      	add	r3, r2
 80084dc:	881b      	ldrh	r3, [r3, #0]
 80084de:	b29b      	uxth	r3, r3
 80084e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084e8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80084ea:	687a      	ldr	r2, [r7, #4]
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	781b      	ldrb	r3, [r3, #0]
 80084f0:	009b      	lsls	r3, r3, #2
 80084f2:	441a      	add	r2, r3
 80084f4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80084f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008502:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008506:	b29b      	uxth	r3, r3
 8008508:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800850a:	687a      	ldr	r2, [r7, #4]
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	781b      	ldrb	r3, [r3, #0]
 8008510:	009b      	lsls	r3, r3, #2
 8008512:	4413      	add	r3, r2
 8008514:	881b      	ldrh	r3, [r3, #0]
 8008516:	b29b      	uxth	r3, r3
 8008518:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800851c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008520:	86bb      	strh	r3, [r7, #52]	; 0x34
 8008522:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008524:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008528:	86bb      	strh	r3, [r7, #52]	; 0x34
 800852a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800852c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008530:	86bb      	strh	r3, [r7, #52]	; 0x34
 8008532:	687a      	ldr	r2, [r7, #4]
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	781b      	ldrb	r3, [r3, #0]
 8008538:	009b      	lsls	r3, r3, #2
 800853a:	441a      	add	r2, r3
 800853c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800853e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008542:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008546:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800854a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800854e:	b29b      	uxth	r3, r3
 8008550:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008552:	687a      	ldr	r2, [r7, #4]
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	781b      	ldrb	r3, [r3, #0]
 8008558:	009b      	lsls	r3, r3, #2
 800855a:	4413      	add	r3, r2
 800855c:	881b      	ldrh	r3, [r3, #0]
 800855e:	b29b      	uxth	r3, r3
 8008560:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008564:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008568:	867b      	strh	r3, [r7, #50]	; 0x32
 800856a:	687a      	ldr	r2, [r7, #4]
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	781b      	ldrb	r3, [r3, #0]
 8008570:	009b      	lsls	r3, r3, #2
 8008572:	441a      	add	r2, r3
 8008574:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8008576:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800857a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800857e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008582:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008586:	b29b      	uxth	r3, r3
 8008588:	8013      	strh	r3, [r2, #0]
 800858a:	e0ba      	b.n	8008702 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800858c:	687a      	ldr	r2, [r7, #4]
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	781b      	ldrb	r3, [r3, #0]
 8008592:	009b      	lsls	r3, r3, #2
 8008594:	4413      	add	r3, r2
 8008596:	881b      	ldrh	r3, [r3, #0]
 8008598:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800859c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80085a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d01d      	beq.n	80085e4 <USB_ActivateEndpoint+0x5a8>
 80085a8:	687a      	ldr	r2, [r7, #4]
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	781b      	ldrb	r3, [r3, #0]
 80085ae:	009b      	lsls	r3, r3, #2
 80085b0:	4413      	add	r3, r2
 80085b2:	881b      	ldrh	r3, [r3, #0]
 80085b4:	b29b      	uxth	r3, r3
 80085b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085be:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80085c2:	687a      	ldr	r2, [r7, #4]
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	781b      	ldrb	r3, [r3, #0]
 80085c8:	009b      	lsls	r3, r3, #2
 80085ca:	441a      	add	r2, r3
 80085cc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80085d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80085dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085e0:	b29b      	uxth	r3, r3
 80085e2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80085e4:	687a      	ldr	r2, [r7, #4]
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	781b      	ldrb	r3, [r3, #0]
 80085ea:	009b      	lsls	r3, r3, #2
 80085ec:	4413      	add	r3, r2
 80085ee:	881b      	ldrh	r3, [r3, #0]
 80085f0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80085f4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80085f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d01d      	beq.n	800863c <USB_ActivateEndpoint+0x600>
 8008600:	687a      	ldr	r2, [r7, #4]
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	781b      	ldrb	r3, [r3, #0]
 8008606:	009b      	lsls	r3, r3, #2
 8008608:	4413      	add	r3, r2
 800860a:	881b      	ldrh	r3, [r3, #0]
 800860c:	b29b      	uxth	r3, r3
 800860e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008616:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800861a:	687a      	ldr	r2, [r7, #4]
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	781b      	ldrb	r3, [r3, #0]
 8008620:	009b      	lsls	r3, r3, #2
 8008622:	441a      	add	r2, r3
 8008624:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008628:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800862c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008630:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008634:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008638:	b29b      	uxth	r3, r3
 800863a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	78db      	ldrb	r3, [r3, #3]
 8008640:	2b01      	cmp	r3, #1
 8008642:	d024      	beq.n	800868e <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008644:	687a      	ldr	r2, [r7, #4]
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	781b      	ldrb	r3, [r3, #0]
 800864a:	009b      	lsls	r3, r3, #2
 800864c:	4413      	add	r3, r2
 800864e:	881b      	ldrh	r3, [r3, #0]
 8008650:	b29b      	uxth	r3, r3
 8008652:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008656:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800865a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800865e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008662:	f083 0320 	eor.w	r3, r3, #32
 8008666:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800866a:	687a      	ldr	r2, [r7, #4]
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	781b      	ldrb	r3, [r3, #0]
 8008670:	009b      	lsls	r3, r3, #2
 8008672:	441a      	add	r2, r3
 8008674:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008678:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800867c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008680:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008684:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008688:	b29b      	uxth	r3, r3
 800868a:	8013      	strh	r3, [r2, #0]
 800868c:	e01d      	b.n	80086ca <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800868e:	687a      	ldr	r2, [r7, #4]
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	781b      	ldrb	r3, [r3, #0]
 8008694:	009b      	lsls	r3, r3, #2
 8008696:	4413      	add	r3, r2
 8008698:	881b      	ldrh	r3, [r3, #0]
 800869a:	b29b      	uxth	r3, r3
 800869c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086a4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80086a8:	687a      	ldr	r2, [r7, #4]
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	781b      	ldrb	r3, [r3, #0]
 80086ae:	009b      	lsls	r3, r3, #2
 80086b0:	441a      	add	r2, r3
 80086b2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80086b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086c6:	b29b      	uxth	r3, r3
 80086c8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80086ca:	687a      	ldr	r2, [r7, #4]
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	781b      	ldrb	r3, [r3, #0]
 80086d0:	009b      	lsls	r3, r3, #2
 80086d2:	4413      	add	r3, r2
 80086d4:	881b      	ldrh	r3, [r3, #0]
 80086d6:	b29b      	uxth	r3, r3
 80086d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80086dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086e0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80086e2:	687a      	ldr	r2, [r7, #4]
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	781b      	ldrb	r3, [r3, #0]
 80086e8:	009b      	lsls	r3, r3, #2
 80086ea:	441a      	add	r2, r3
 80086ec:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80086ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086fe:	b29b      	uxth	r3, r3
 8008700:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8008702:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8008706:	4618      	mov	r0, r3
 8008708:	376c      	adds	r7, #108	; 0x6c
 800870a:	46bd      	mov	sp, r7
 800870c:	bc80      	pop	{r7}
 800870e:	4770      	bx	lr

08008710 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008710:	b480      	push	{r7}
 8008712:	b08d      	sub	sp, #52	; 0x34
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
 8008718:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	7b1b      	ldrb	r3, [r3, #12]
 800871e:	2b00      	cmp	r3, #0
 8008720:	f040 808e 	bne.w	8008840 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	785b      	ldrb	r3, [r3, #1]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d044      	beq.n	80087b6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800872c:	687a      	ldr	r2, [r7, #4]
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	781b      	ldrb	r3, [r3, #0]
 8008732:	009b      	lsls	r3, r3, #2
 8008734:	4413      	add	r3, r2
 8008736:	881b      	ldrh	r3, [r3, #0]
 8008738:	81bb      	strh	r3, [r7, #12]
 800873a:	89bb      	ldrh	r3, [r7, #12]
 800873c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008740:	2b00      	cmp	r3, #0
 8008742:	d01b      	beq.n	800877c <USB_DeactivateEndpoint+0x6c>
 8008744:	687a      	ldr	r2, [r7, #4]
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	781b      	ldrb	r3, [r3, #0]
 800874a:	009b      	lsls	r3, r3, #2
 800874c:	4413      	add	r3, r2
 800874e:	881b      	ldrh	r3, [r3, #0]
 8008750:	b29b      	uxth	r3, r3
 8008752:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008756:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800875a:	817b      	strh	r3, [r7, #10]
 800875c:	687a      	ldr	r2, [r7, #4]
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	781b      	ldrb	r3, [r3, #0]
 8008762:	009b      	lsls	r3, r3, #2
 8008764:	441a      	add	r2, r3
 8008766:	897b      	ldrh	r3, [r7, #10]
 8008768:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800876c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008770:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008774:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008778:	b29b      	uxth	r3, r3
 800877a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800877c:	687a      	ldr	r2, [r7, #4]
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	781b      	ldrb	r3, [r3, #0]
 8008782:	009b      	lsls	r3, r3, #2
 8008784:	4413      	add	r3, r2
 8008786:	881b      	ldrh	r3, [r3, #0]
 8008788:	b29b      	uxth	r3, r3
 800878a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800878e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008792:	813b      	strh	r3, [r7, #8]
 8008794:	687a      	ldr	r2, [r7, #4]
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	781b      	ldrb	r3, [r3, #0]
 800879a:	009b      	lsls	r3, r3, #2
 800879c:	441a      	add	r2, r3
 800879e:	893b      	ldrh	r3, [r7, #8]
 80087a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087b0:	b29b      	uxth	r3, r3
 80087b2:	8013      	strh	r3, [r2, #0]
 80087b4:	e192      	b.n	8008adc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80087b6:	687a      	ldr	r2, [r7, #4]
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	781b      	ldrb	r3, [r3, #0]
 80087bc:	009b      	lsls	r3, r3, #2
 80087be:	4413      	add	r3, r2
 80087c0:	881b      	ldrh	r3, [r3, #0]
 80087c2:	827b      	strh	r3, [r7, #18]
 80087c4:	8a7b      	ldrh	r3, [r7, #18]
 80087c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d01b      	beq.n	8008806 <USB_DeactivateEndpoint+0xf6>
 80087ce:	687a      	ldr	r2, [r7, #4]
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	781b      	ldrb	r3, [r3, #0]
 80087d4:	009b      	lsls	r3, r3, #2
 80087d6:	4413      	add	r3, r2
 80087d8:	881b      	ldrh	r3, [r3, #0]
 80087da:	b29b      	uxth	r3, r3
 80087dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087e4:	823b      	strh	r3, [r7, #16]
 80087e6:	687a      	ldr	r2, [r7, #4]
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	781b      	ldrb	r3, [r3, #0]
 80087ec:	009b      	lsls	r3, r3, #2
 80087ee:	441a      	add	r2, r3
 80087f0:	8a3b      	ldrh	r3, [r7, #16]
 80087f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80087fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008802:	b29b      	uxth	r3, r3
 8008804:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008806:	687a      	ldr	r2, [r7, #4]
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	781b      	ldrb	r3, [r3, #0]
 800880c:	009b      	lsls	r3, r3, #2
 800880e:	4413      	add	r3, r2
 8008810:	881b      	ldrh	r3, [r3, #0]
 8008812:	b29b      	uxth	r3, r3
 8008814:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008818:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800881c:	81fb      	strh	r3, [r7, #14]
 800881e:	687a      	ldr	r2, [r7, #4]
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	781b      	ldrb	r3, [r3, #0]
 8008824:	009b      	lsls	r3, r3, #2
 8008826:	441a      	add	r2, r3
 8008828:	89fb      	ldrh	r3, [r7, #14]
 800882a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800882e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008832:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008836:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800883a:	b29b      	uxth	r3, r3
 800883c:	8013      	strh	r3, [r2, #0]
 800883e:	e14d      	b.n	8008adc <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	785b      	ldrb	r3, [r3, #1]
 8008844:	2b00      	cmp	r3, #0
 8008846:	f040 80a5 	bne.w	8008994 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800884a:	687a      	ldr	r2, [r7, #4]
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	781b      	ldrb	r3, [r3, #0]
 8008850:	009b      	lsls	r3, r3, #2
 8008852:	4413      	add	r3, r2
 8008854:	881b      	ldrh	r3, [r3, #0]
 8008856:	843b      	strh	r3, [r7, #32]
 8008858:	8c3b      	ldrh	r3, [r7, #32]
 800885a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800885e:	2b00      	cmp	r3, #0
 8008860:	d01b      	beq.n	800889a <USB_DeactivateEndpoint+0x18a>
 8008862:	687a      	ldr	r2, [r7, #4]
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	781b      	ldrb	r3, [r3, #0]
 8008868:	009b      	lsls	r3, r3, #2
 800886a:	4413      	add	r3, r2
 800886c:	881b      	ldrh	r3, [r3, #0]
 800886e:	b29b      	uxth	r3, r3
 8008870:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008874:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008878:	83fb      	strh	r3, [r7, #30]
 800887a:	687a      	ldr	r2, [r7, #4]
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	781b      	ldrb	r3, [r3, #0]
 8008880:	009b      	lsls	r3, r3, #2
 8008882:	441a      	add	r2, r3
 8008884:	8bfb      	ldrh	r3, [r7, #30]
 8008886:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800888a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800888e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008892:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008896:	b29b      	uxth	r3, r3
 8008898:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800889a:	687a      	ldr	r2, [r7, #4]
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	781b      	ldrb	r3, [r3, #0]
 80088a0:	009b      	lsls	r3, r3, #2
 80088a2:	4413      	add	r3, r2
 80088a4:	881b      	ldrh	r3, [r3, #0]
 80088a6:	83bb      	strh	r3, [r7, #28]
 80088a8:	8bbb      	ldrh	r3, [r7, #28]
 80088aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d01b      	beq.n	80088ea <USB_DeactivateEndpoint+0x1da>
 80088b2:	687a      	ldr	r2, [r7, #4]
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	781b      	ldrb	r3, [r3, #0]
 80088b8:	009b      	lsls	r3, r3, #2
 80088ba:	4413      	add	r3, r2
 80088bc:	881b      	ldrh	r3, [r3, #0]
 80088be:	b29b      	uxth	r3, r3
 80088c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088c8:	837b      	strh	r3, [r7, #26]
 80088ca:	687a      	ldr	r2, [r7, #4]
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	781b      	ldrb	r3, [r3, #0]
 80088d0:	009b      	lsls	r3, r3, #2
 80088d2:	441a      	add	r2, r3
 80088d4:	8b7b      	ldrh	r3, [r7, #26]
 80088d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088e2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80088e6:	b29b      	uxth	r3, r3
 80088e8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80088ea:	687a      	ldr	r2, [r7, #4]
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	781b      	ldrb	r3, [r3, #0]
 80088f0:	009b      	lsls	r3, r3, #2
 80088f2:	4413      	add	r3, r2
 80088f4:	881b      	ldrh	r3, [r3, #0]
 80088f6:	b29b      	uxth	r3, r3
 80088f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008900:	833b      	strh	r3, [r7, #24]
 8008902:	687a      	ldr	r2, [r7, #4]
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	781b      	ldrb	r3, [r3, #0]
 8008908:	009b      	lsls	r3, r3, #2
 800890a:	441a      	add	r2, r3
 800890c:	8b3b      	ldrh	r3, [r7, #24]
 800890e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008912:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008916:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800891a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800891e:	b29b      	uxth	r3, r3
 8008920:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008922:	687a      	ldr	r2, [r7, #4]
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	781b      	ldrb	r3, [r3, #0]
 8008928:	009b      	lsls	r3, r3, #2
 800892a:	4413      	add	r3, r2
 800892c:	881b      	ldrh	r3, [r3, #0]
 800892e:	b29b      	uxth	r3, r3
 8008930:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008934:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008938:	82fb      	strh	r3, [r7, #22]
 800893a:	687a      	ldr	r2, [r7, #4]
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	781b      	ldrb	r3, [r3, #0]
 8008940:	009b      	lsls	r3, r3, #2
 8008942:	441a      	add	r2, r3
 8008944:	8afb      	ldrh	r3, [r7, #22]
 8008946:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800894a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800894e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008952:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008956:	b29b      	uxth	r3, r3
 8008958:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800895a:	687a      	ldr	r2, [r7, #4]
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	781b      	ldrb	r3, [r3, #0]
 8008960:	009b      	lsls	r3, r3, #2
 8008962:	4413      	add	r3, r2
 8008964:	881b      	ldrh	r3, [r3, #0]
 8008966:	b29b      	uxth	r3, r3
 8008968:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800896c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008970:	82bb      	strh	r3, [r7, #20]
 8008972:	687a      	ldr	r2, [r7, #4]
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	781b      	ldrb	r3, [r3, #0]
 8008978:	009b      	lsls	r3, r3, #2
 800897a:	441a      	add	r2, r3
 800897c:	8abb      	ldrh	r3, [r7, #20]
 800897e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008982:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008986:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800898a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800898e:	b29b      	uxth	r3, r3
 8008990:	8013      	strh	r3, [r2, #0]
 8008992:	e0a3      	b.n	8008adc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008994:	687a      	ldr	r2, [r7, #4]
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	781b      	ldrb	r3, [r3, #0]
 800899a:	009b      	lsls	r3, r3, #2
 800899c:	4413      	add	r3, r2
 800899e:	881b      	ldrh	r3, [r3, #0]
 80089a0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80089a2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80089a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d01b      	beq.n	80089e4 <USB_DeactivateEndpoint+0x2d4>
 80089ac:	687a      	ldr	r2, [r7, #4]
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	781b      	ldrb	r3, [r3, #0]
 80089b2:	009b      	lsls	r3, r3, #2
 80089b4:	4413      	add	r3, r2
 80089b6:	881b      	ldrh	r3, [r3, #0]
 80089b8:	b29b      	uxth	r3, r3
 80089ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089c2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80089c4:	687a      	ldr	r2, [r7, #4]
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	781b      	ldrb	r3, [r3, #0]
 80089ca:	009b      	lsls	r3, r3, #2
 80089cc:	441a      	add	r2, r3
 80089ce:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80089d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80089d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80089d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80089dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089e0:	b29b      	uxth	r3, r3
 80089e2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80089e4:	687a      	ldr	r2, [r7, #4]
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	781b      	ldrb	r3, [r3, #0]
 80089ea:	009b      	lsls	r3, r3, #2
 80089ec:	4413      	add	r3, r2
 80089ee:	881b      	ldrh	r3, [r3, #0]
 80089f0:	857b      	strh	r3, [r7, #42]	; 0x2a
 80089f2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80089f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d01b      	beq.n	8008a34 <USB_DeactivateEndpoint+0x324>
 80089fc:	687a      	ldr	r2, [r7, #4]
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	781b      	ldrb	r3, [r3, #0]
 8008a02:	009b      	lsls	r3, r3, #2
 8008a04:	4413      	add	r3, r2
 8008a06:	881b      	ldrh	r3, [r3, #0]
 8008a08:	b29b      	uxth	r3, r3
 8008a0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a12:	853b      	strh	r3, [r7, #40]	; 0x28
 8008a14:	687a      	ldr	r2, [r7, #4]
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	781b      	ldrb	r3, [r3, #0]
 8008a1a:	009b      	lsls	r3, r3, #2
 8008a1c:	441a      	add	r2, r3
 8008a1e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008a20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a2c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008a30:	b29b      	uxth	r3, r3
 8008a32:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008a34:	687a      	ldr	r2, [r7, #4]
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	781b      	ldrb	r3, [r3, #0]
 8008a3a:	009b      	lsls	r3, r3, #2
 8008a3c:	4413      	add	r3, r2
 8008a3e:	881b      	ldrh	r3, [r3, #0]
 8008a40:	b29b      	uxth	r3, r3
 8008a42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a4a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008a4c:	687a      	ldr	r2, [r7, #4]
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	781b      	ldrb	r3, [r3, #0]
 8008a52:	009b      	lsls	r3, r3, #2
 8008a54:	441a      	add	r2, r3
 8008a56:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008a58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008a64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a68:	b29b      	uxth	r3, r3
 8008a6a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008a6c:	687a      	ldr	r2, [r7, #4]
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	781b      	ldrb	r3, [r3, #0]
 8008a72:	009b      	lsls	r3, r3, #2
 8008a74:	4413      	add	r3, r2
 8008a76:	881b      	ldrh	r3, [r3, #0]
 8008a78:	b29b      	uxth	r3, r3
 8008a7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a82:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008a84:	687a      	ldr	r2, [r7, #4]
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	781b      	ldrb	r3, [r3, #0]
 8008a8a:	009b      	lsls	r3, r3, #2
 8008a8c:	441a      	add	r2, r3
 8008a8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008a90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008aa0:	b29b      	uxth	r3, r3
 8008aa2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008aa4:	687a      	ldr	r2, [r7, #4]
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	781b      	ldrb	r3, [r3, #0]
 8008aaa:	009b      	lsls	r3, r3, #2
 8008aac:	4413      	add	r3, r2
 8008aae:	881b      	ldrh	r3, [r3, #0]
 8008ab0:	b29b      	uxth	r3, r3
 8008ab2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008aba:	847b      	strh	r3, [r7, #34]	; 0x22
 8008abc:	687a      	ldr	r2, [r7, #4]
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	781b      	ldrb	r3, [r3, #0]
 8008ac2:	009b      	lsls	r3, r3, #2
 8008ac4:	441a      	add	r2, r3
 8008ac6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008ac8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008acc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ad0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ad4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ad8:	b29b      	uxth	r3, r3
 8008ada:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008adc:	2300      	movs	r3, #0
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3734      	adds	r7, #52	; 0x34
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bc80      	pop	{r7}
 8008ae6:	4770      	bx	lr

08008ae8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b0cc      	sub	sp, #304	; 0x130
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	1d3b      	adds	r3, r7, #4
 8008af0:	6018      	str	r0, [r3, #0]
 8008af2:	463b      	mov	r3, r7
 8008af4:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008af6:	463b      	mov	r3, r7
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	785b      	ldrb	r3, [r3, #1]
 8008afc:	2b01      	cmp	r3, #1
 8008afe:	f040 872e 	bne.w	800995e <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008b02:	463b      	mov	r3, r7
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	699a      	ldr	r2, [r3, #24]
 8008b08:	463b      	mov	r3, r7
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	691b      	ldr	r3, [r3, #16]
 8008b0e:	429a      	cmp	r2, r3
 8008b10:	d905      	bls.n	8008b1e <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8008b12:	463b      	mov	r3, r7
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	691b      	ldr	r3, [r3, #16]
 8008b18:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8008b1c:	e004      	b.n	8008b28 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8008b1e:	463b      	mov	r3, r7
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	699b      	ldr	r3, [r3, #24]
 8008b24:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008b28:	463b      	mov	r3, r7
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	7b1b      	ldrb	r3, [r3, #12]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d134      	bne.n	8008b9c <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008b32:	463b      	mov	r3, r7
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	6959      	ldr	r1, [r3, #20]
 8008b38:	463b      	mov	r3, r7
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	88da      	ldrh	r2, [r3, #6]
 8008b3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b42:	b29b      	uxth	r3, r3
 8008b44:	1d38      	adds	r0, r7, #4
 8008b46:	6800      	ldr	r0, [r0, #0]
 8008b48:	f001 fc03 	bl	800a352 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008b4c:	f107 0310 	add.w	r3, r7, #16
 8008b50:	1d3a      	adds	r2, r7, #4
 8008b52:	6812      	ldr	r2, [r2, #0]
 8008b54:	601a      	str	r2, [r3, #0]
 8008b56:	1d3b      	adds	r3, r7, #4
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b5e:	b29b      	uxth	r3, r3
 8008b60:	4619      	mov	r1, r3
 8008b62:	f107 0310 	add.w	r3, r7, #16
 8008b66:	f107 0210 	add.w	r2, r7, #16
 8008b6a:	6812      	ldr	r2, [r2, #0]
 8008b6c:	440a      	add	r2, r1
 8008b6e:	601a      	str	r2, [r3, #0]
 8008b70:	463b      	mov	r3, r7
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	781b      	ldrb	r3, [r3, #0]
 8008b76:	011a      	lsls	r2, r3, #4
 8008b78:	f107 0310 	add.w	r3, r7, #16
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	4413      	add	r3, r2
 8008b80:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8008b84:	f107 030c 	add.w	r3, r7, #12
 8008b88:	601a      	str	r2, [r3, #0]
 8008b8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b8e:	b29a      	uxth	r2, r3
 8008b90:	f107 030c 	add.w	r3, r7, #12
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	801a      	strh	r2, [r3, #0]
 8008b98:	f000 beac 	b.w	80098f4 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008b9c:	463b      	mov	r3, r7
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	78db      	ldrb	r3, [r3, #3]
 8008ba2:	2b02      	cmp	r3, #2
 8008ba4:	f040 838c 	bne.w	80092c0 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008ba8:	463b      	mov	r3, r7
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	6a1a      	ldr	r2, [r3, #32]
 8008bae:	463b      	mov	r3, r7
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	691b      	ldr	r3, [r3, #16]
 8008bb4:	429a      	cmp	r2, r3
 8008bb6:	f240 8330 	bls.w	800921a <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8008bba:	1d3b      	adds	r3, r7, #4
 8008bbc:	681a      	ldr	r2, [r3, #0]
 8008bbe:	463b      	mov	r3, r7
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	781b      	ldrb	r3, [r3, #0]
 8008bc4:	009b      	lsls	r3, r3, #2
 8008bc6:	4413      	add	r3, r2
 8008bc8:	881b      	ldrh	r3, [r3, #0]
 8008bca:	b29b      	uxth	r3, r3
 8008bcc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bd4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8008bd8:	1d3b      	adds	r3, r7, #4
 8008bda:	681a      	ldr	r2, [r3, #0]
 8008bdc:	463b      	mov	r3, r7
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	781b      	ldrb	r3, [r3, #0]
 8008be2:	009b      	lsls	r3, r3, #2
 8008be4:	441a      	add	r2, r3
 8008be6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008bea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008bee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008bf2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008bf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bfa:	b29b      	uxth	r3, r3
 8008bfc:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008bfe:	463b      	mov	r3, r7
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	6a1a      	ldr	r2, [r3, #32]
 8008c04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c08:	1ad2      	subs	r2, r2, r3
 8008c0a:	463b      	mov	r3, r7
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008c10:	1d3b      	adds	r3, r7, #4
 8008c12:	681a      	ldr	r2, [r3, #0]
 8008c14:	463b      	mov	r3, r7
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	781b      	ldrb	r3, [r3, #0]
 8008c1a:	009b      	lsls	r3, r3, #2
 8008c1c:	4413      	add	r3, r2
 8008c1e:	881b      	ldrh	r3, [r3, #0]
 8008c20:	b29b      	uxth	r3, r3
 8008c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	f000 819e 	beq.w	8008f68 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008c2c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008c30:	1d3a      	adds	r2, r7, #4
 8008c32:	6812      	ldr	r2, [r2, #0]
 8008c34:	601a      	str	r2, [r3, #0]
 8008c36:	463b      	mov	r3, r7
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	785b      	ldrb	r3, [r3, #1]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d17a      	bne.n	8008d36 <USB_EPStartXfer+0x24e>
 8008c40:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008c44:	1d3a      	adds	r2, r7, #4
 8008c46:	6812      	ldr	r2, [r2, #0]
 8008c48:	601a      	str	r2, [r3, #0]
 8008c4a:	1d3b      	adds	r3, r7, #4
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c52:	b29b      	uxth	r3, r3
 8008c54:	4619      	mov	r1, r3
 8008c56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008c5a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008c5e:	6812      	ldr	r2, [r2, #0]
 8008c60:	440a      	add	r2, r1
 8008c62:	601a      	str	r2, [r3, #0]
 8008c64:	463b      	mov	r3, r7
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	781b      	ldrb	r3, [r3, #0]
 8008c6a:	011a      	lsls	r2, r3, #4
 8008c6c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	4413      	add	r3, r2
 8008c74:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8008c78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c7c:	601a      	str	r2, [r3, #0]
 8008c7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d11a      	bne.n	8008cbc <USB_EPStartXfer+0x1d4>
 8008c86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	881b      	ldrh	r3, [r3, #0]
 8008c8e:	b29b      	uxth	r3, r3
 8008c90:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008c94:	b29a      	uxth	r2, r3
 8008c96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	801a      	strh	r2, [r3, #0]
 8008c9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	881b      	ldrh	r3, [r3, #0]
 8008ca6:	b29b      	uxth	r3, r3
 8008ca8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008cac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008cb0:	b29a      	uxth	r2, r3
 8008cb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	801a      	strh	r2, [r3, #0]
 8008cba:	e062      	b.n	8008d82 <USB_EPStartXfer+0x29a>
 8008cbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cc0:	2b3e      	cmp	r3, #62	; 0x3e
 8008cc2:	d819      	bhi.n	8008cf8 <USB_EPStartXfer+0x210>
 8008cc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cc8:	085b      	lsrs	r3, r3, #1
 8008cca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008cce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cd2:	f003 0301 	and.w	r3, r3, #1
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d004      	beq.n	8008ce4 <USB_EPStartXfer+0x1fc>
 8008cda:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008cde:	3301      	adds	r3, #1
 8008ce0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008ce4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008ce8:	b29b      	uxth	r3, r3
 8008cea:	029b      	lsls	r3, r3, #10
 8008cec:	b29a      	uxth	r2, r3
 8008cee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	801a      	strh	r2, [r3, #0]
 8008cf6:	e044      	b.n	8008d82 <USB_EPStartXfer+0x29a>
 8008cf8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cfc:	095b      	lsrs	r3, r3, #5
 8008cfe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008d02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d06:	f003 031f 	and.w	r3, r3, #31
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d104      	bne.n	8008d18 <USB_EPStartXfer+0x230>
 8008d0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d12:	3b01      	subs	r3, #1
 8008d14:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008d18:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d1c:	b29b      	uxth	r3, r3
 8008d1e:	029b      	lsls	r3, r3, #10
 8008d20:	b29b      	uxth	r3, r3
 8008d22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d2a:	b29a      	uxth	r2, r3
 8008d2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	801a      	strh	r2, [r3, #0]
 8008d34:	e025      	b.n	8008d82 <USB_EPStartXfer+0x29a>
 8008d36:	463b      	mov	r3, r7
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	785b      	ldrb	r3, [r3, #1]
 8008d3c:	2b01      	cmp	r3, #1
 8008d3e:	d120      	bne.n	8008d82 <USB_EPStartXfer+0x29a>
 8008d40:	1d3b      	adds	r3, r7, #4
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d48:	b29b      	uxth	r3, r3
 8008d4a:	4619      	mov	r1, r3
 8008d4c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008d50:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008d54:	6812      	ldr	r2, [r2, #0]
 8008d56:	440a      	add	r2, r1
 8008d58:	601a      	str	r2, [r3, #0]
 8008d5a:	463b      	mov	r3, r7
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	781b      	ldrb	r3, [r3, #0]
 8008d60:	011a      	lsls	r2, r3, #4
 8008d62:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	4413      	add	r3, r2
 8008d6a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8008d6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008d72:	601a      	str	r2, [r3, #0]
 8008d74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d78:	b29a      	uxth	r2, r3
 8008d7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008d82:	463b      	mov	r3, r7
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	895b      	ldrh	r3, [r3, #10]
 8008d88:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008d8c:	463b      	mov	r3, r7
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	6959      	ldr	r1, [r3, #20]
 8008d92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d96:	b29b      	uxth	r3, r3
 8008d98:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008d9c:	1d38      	adds	r0, r7, #4
 8008d9e:	6800      	ldr	r0, [r0, #0]
 8008da0:	f001 fad7 	bl	800a352 <USB_WritePMA>
            ep->xfer_buff += len;
 8008da4:	463b      	mov	r3, r7
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	695a      	ldr	r2, [r3, #20]
 8008daa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008dae:	441a      	add	r2, r3
 8008db0:	463b      	mov	r3, r7
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008db6:	463b      	mov	r3, r7
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	6a1a      	ldr	r2, [r3, #32]
 8008dbc:	463b      	mov	r3, r7
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	691b      	ldr	r3, [r3, #16]
 8008dc2:	429a      	cmp	r2, r3
 8008dc4:	d909      	bls.n	8008dda <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 8008dc6:	463b      	mov	r3, r7
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	6a1a      	ldr	r2, [r3, #32]
 8008dcc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008dd0:	1ad2      	subs	r2, r2, r3
 8008dd2:	463b      	mov	r3, r7
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	621a      	str	r2, [r3, #32]
 8008dd8:	e008      	b.n	8008dec <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 8008dda:	463b      	mov	r3, r7
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	6a1b      	ldr	r3, [r3, #32]
 8008de0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8008de4:	463b      	mov	r3, r7
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	2200      	movs	r2, #0
 8008dea:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008dec:	463b      	mov	r3, r7
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	785b      	ldrb	r3, [r3, #1]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d17a      	bne.n	8008eec <USB_EPStartXfer+0x404>
 8008df6:	f107 0318 	add.w	r3, r7, #24
 8008dfa:	1d3a      	adds	r2, r7, #4
 8008dfc:	6812      	ldr	r2, [r2, #0]
 8008dfe:	601a      	str	r2, [r3, #0]
 8008e00:	1d3b      	adds	r3, r7, #4
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e08:	b29b      	uxth	r3, r3
 8008e0a:	4619      	mov	r1, r3
 8008e0c:	f107 0318 	add.w	r3, r7, #24
 8008e10:	f107 0218 	add.w	r2, r7, #24
 8008e14:	6812      	ldr	r2, [r2, #0]
 8008e16:	440a      	add	r2, r1
 8008e18:	601a      	str	r2, [r3, #0]
 8008e1a:	463b      	mov	r3, r7
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	781b      	ldrb	r3, [r3, #0]
 8008e20:	011a      	lsls	r2, r3, #4
 8008e22:	f107 0318 	add.w	r3, r7, #24
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	4413      	add	r3, r2
 8008e2a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8008e2e:	f107 0314 	add.w	r3, r7, #20
 8008e32:	601a      	str	r2, [r3, #0]
 8008e34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d11a      	bne.n	8008e72 <USB_EPStartXfer+0x38a>
 8008e3c:	f107 0314 	add.w	r3, r7, #20
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	881b      	ldrh	r3, [r3, #0]
 8008e44:	b29b      	uxth	r3, r3
 8008e46:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008e4a:	b29a      	uxth	r2, r3
 8008e4c:	f107 0314 	add.w	r3, r7, #20
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	801a      	strh	r2, [r3, #0]
 8008e54:	f107 0314 	add.w	r3, r7, #20
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	881b      	ldrh	r3, [r3, #0]
 8008e5c:	b29b      	uxth	r3, r3
 8008e5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e66:	b29a      	uxth	r2, r3
 8008e68:	f107 0314 	add.w	r3, r7, #20
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	801a      	strh	r2, [r3, #0]
 8008e70:	e067      	b.n	8008f42 <USB_EPStartXfer+0x45a>
 8008e72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e76:	2b3e      	cmp	r3, #62	; 0x3e
 8008e78:	d819      	bhi.n	8008eae <USB_EPStartXfer+0x3c6>
 8008e7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e7e:	085b      	lsrs	r3, r3, #1
 8008e80:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008e84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e88:	f003 0301 	and.w	r3, r3, #1
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d004      	beq.n	8008e9a <USB_EPStartXfer+0x3b2>
 8008e90:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008e94:	3301      	adds	r3, #1
 8008e96:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008e9a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008e9e:	b29b      	uxth	r3, r3
 8008ea0:	029b      	lsls	r3, r3, #10
 8008ea2:	b29a      	uxth	r2, r3
 8008ea4:	f107 0314 	add.w	r3, r7, #20
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	801a      	strh	r2, [r3, #0]
 8008eac:	e049      	b.n	8008f42 <USB_EPStartXfer+0x45a>
 8008eae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008eb2:	095b      	lsrs	r3, r3, #5
 8008eb4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008eb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ebc:	f003 031f 	and.w	r3, r3, #31
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d104      	bne.n	8008ece <USB_EPStartXfer+0x3e6>
 8008ec4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008ec8:	3b01      	subs	r3, #1
 8008eca:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008ece:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008ed2:	b29b      	uxth	r3, r3
 8008ed4:	029b      	lsls	r3, r3, #10
 8008ed6:	b29b      	uxth	r3, r3
 8008ed8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008edc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ee0:	b29a      	uxth	r2, r3
 8008ee2:	f107 0314 	add.w	r3, r7, #20
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	801a      	strh	r2, [r3, #0]
 8008eea:	e02a      	b.n	8008f42 <USB_EPStartXfer+0x45a>
 8008eec:	463b      	mov	r3, r7
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	785b      	ldrb	r3, [r3, #1]
 8008ef2:	2b01      	cmp	r3, #1
 8008ef4:	d125      	bne.n	8008f42 <USB_EPStartXfer+0x45a>
 8008ef6:	f107 0320 	add.w	r3, r7, #32
 8008efa:	1d3a      	adds	r2, r7, #4
 8008efc:	6812      	ldr	r2, [r2, #0]
 8008efe:	601a      	str	r2, [r3, #0]
 8008f00:	1d3b      	adds	r3, r7, #4
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f08:	b29b      	uxth	r3, r3
 8008f0a:	4619      	mov	r1, r3
 8008f0c:	f107 0320 	add.w	r3, r7, #32
 8008f10:	f107 0220 	add.w	r2, r7, #32
 8008f14:	6812      	ldr	r2, [r2, #0]
 8008f16:	440a      	add	r2, r1
 8008f18:	601a      	str	r2, [r3, #0]
 8008f1a:	463b      	mov	r3, r7
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	781b      	ldrb	r3, [r3, #0]
 8008f20:	011a      	lsls	r2, r3, #4
 8008f22:	f107 0320 	add.w	r3, r7, #32
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	4413      	add	r3, r2
 8008f2a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8008f2e:	f107 031c 	add.w	r3, r7, #28
 8008f32:	601a      	str	r2, [r3, #0]
 8008f34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f38:	b29a      	uxth	r2, r3
 8008f3a:	f107 031c 	add.w	r3, r7, #28
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008f42:	463b      	mov	r3, r7
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	891b      	ldrh	r3, [r3, #8]
 8008f48:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008f4c:	463b      	mov	r3, r7
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	6959      	ldr	r1, [r3, #20]
 8008f52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f56:	b29b      	uxth	r3, r3
 8008f58:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008f5c:	1d38      	adds	r0, r7, #4
 8008f5e:	6800      	ldr	r0, [r0, #0]
 8008f60:	f001 f9f7 	bl	800a352 <USB_WritePMA>
 8008f64:	f000 bcc6 	b.w	80098f4 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008f68:	463b      	mov	r3, r7
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	785b      	ldrb	r3, [r3, #1]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d164      	bne.n	800903c <USB_EPStartXfer+0x554>
 8008f72:	1d3b      	adds	r3, r7, #4
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f78:	1d3b      	adds	r3, r7, #4
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f80:	b29b      	uxth	r3, r3
 8008f82:	461a      	mov	r2, r3
 8008f84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f86:	4413      	add	r3, r2
 8008f88:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f8a:	463b      	mov	r3, r7
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	781b      	ldrb	r3, [r3, #0]
 8008f90:	011a      	lsls	r2, r3, #4
 8008f92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f94:	4413      	add	r3, r2
 8008f96:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008f9a:	647b      	str	r3, [r7, #68]	; 0x44
 8008f9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d112      	bne.n	8008fca <USB_EPStartXfer+0x4e2>
 8008fa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008fa6:	881b      	ldrh	r3, [r3, #0]
 8008fa8:	b29b      	uxth	r3, r3
 8008faa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008fae:	b29a      	uxth	r2, r3
 8008fb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008fb2:	801a      	strh	r2, [r3, #0]
 8008fb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008fb6:	881b      	ldrh	r3, [r3, #0]
 8008fb8:	b29b      	uxth	r3, r3
 8008fba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008fbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008fc2:	b29a      	uxth	r2, r3
 8008fc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008fc6:	801a      	strh	r2, [r3, #0]
 8008fc8:	e057      	b.n	800907a <USB_EPStartXfer+0x592>
 8008fca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fce:	2b3e      	cmp	r3, #62	; 0x3e
 8008fd0:	d817      	bhi.n	8009002 <USB_EPStartXfer+0x51a>
 8008fd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fd6:	085b      	lsrs	r3, r3, #1
 8008fd8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008fdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fe0:	f003 0301 	and.w	r3, r3, #1
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d004      	beq.n	8008ff2 <USB_EPStartXfer+0x50a>
 8008fe8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008fec:	3301      	adds	r3, #1
 8008fee:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008ff2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008ff6:	b29b      	uxth	r3, r3
 8008ff8:	029b      	lsls	r3, r3, #10
 8008ffa:	b29a      	uxth	r2, r3
 8008ffc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ffe:	801a      	strh	r2, [r3, #0]
 8009000:	e03b      	b.n	800907a <USB_EPStartXfer+0x592>
 8009002:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009006:	095b      	lsrs	r3, r3, #5
 8009008:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800900c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009010:	f003 031f 	and.w	r3, r3, #31
 8009014:	2b00      	cmp	r3, #0
 8009016:	d104      	bne.n	8009022 <USB_EPStartXfer+0x53a>
 8009018:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800901c:	3b01      	subs	r3, #1
 800901e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8009022:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009026:	b29b      	uxth	r3, r3
 8009028:	029b      	lsls	r3, r3, #10
 800902a:	b29b      	uxth	r3, r3
 800902c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009030:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009034:	b29a      	uxth	r2, r3
 8009036:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009038:	801a      	strh	r2, [r3, #0]
 800903a:	e01e      	b.n	800907a <USB_EPStartXfer+0x592>
 800903c:	463b      	mov	r3, r7
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	785b      	ldrb	r3, [r3, #1]
 8009042:	2b01      	cmp	r3, #1
 8009044:	d119      	bne.n	800907a <USB_EPStartXfer+0x592>
 8009046:	1d3b      	adds	r3, r7, #4
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	653b      	str	r3, [r7, #80]	; 0x50
 800904c:	1d3b      	adds	r3, r7, #4
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009054:	b29b      	uxth	r3, r3
 8009056:	461a      	mov	r2, r3
 8009058:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800905a:	4413      	add	r3, r2
 800905c:	653b      	str	r3, [r7, #80]	; 0x50
 800905e:	463b      	mov	r3, r7
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	781b      	ldrb	r3, [r3, #0]
 8009064:	011a      	lsls	r2, r3, #4
 8009066:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009068:	4413      	add	r3, r2
 800906a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800906e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009070:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009074:	b29a      	uxth	r2, r3
 8009076:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009078:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800907a:	463b      	mov	r3, r7
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	891b      	ldrh	r3, [r3, #8]
 8009080:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009084:	463b      	mov	r3, r7
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	6959      	ldr	r1, [r3, #20]
 800908a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800908e:	b29b      	uxth	r3, r3
 8009090:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009094:	1d38      	adds	r0, r7, #4
 8009096:	6800      	ldr	r0, [r0, #0]
 8009098:	f001 f95b 	bl	800a352 <USB_WritePMA>
            ep->xfer_buff += len;
 800909c:	463b      	mov	r3, r7
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	695a      	ldr	r2, [r3, #20]
 80090a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090a6:	441a      	add	r2, r3
 80090a8:	463b      	mov	r3, r7
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80090ae:	463b      	mov	r3, r7
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	6a1a      	ldr	r2, [r3, #32]
 80090b4:	463b      	mov	r3, r7
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	691b      	ldr	r3, [r3, #16]
 80090ba:	429a      	cmp	r2, r3
 80090bc:	d909      	bls.n	80090d2 <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 80090be:	463b      	mov	r3, r7
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	6a1a      	ldr	r2, [r3, #32]
 80090c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090c8:	1ad2      	subs	r2, r2, r3
 80090ca:	463b      	mov	r3, r7
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	621a      	str	r2, [r3, #32]
 80090d0:	e008      	b.n	80090e4 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 80090d2:	463b      	mov	r3, r7
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	6a1b      	ldr	r3, [r3, #32]
 80090d8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80090dc:	463b      	mov	r3, r7
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	2200      	movs	r2, #0
 80090e2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80090e4:	1d3b      	adds	r3, r7, #4
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	643b      	str	r3, [r7, #64]	; 0x40
 80090ea:	463b      	mov	r3, r7
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	785b      	ldrb	r3, [r3, #1]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d164      	bne.n	80091be <USB_EPStartXfer+0x6d6>
 80090f4:	1d3b      	adds	r3, r7, #4
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80090fa:	1d3b      	adds	r3, r7, #4
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009102:	b29b      	uxth	r3, r3
 8009104:	461a      	mov	r2, r3
 8009106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009108:	4413      	add	r3, r2
 800910a:	63bb      	str	r3, [r7, #56]	; 0x38
 800910c:	463b      	mov	r3, r7
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	781b      	ldrb	r3, [r3, #0]
 8009112:	011a      	lsls	r2, r3, #4
 8009114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009116:	4413      	add	r3, r2
 8009118:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800911c:	637b      	str	r3, [r7, #52]	; 0x34
 800911e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009122:	2b00      	cmp	r3, #0
 8009124:	d112      	bne.n	800914c <USB_EPStartXfer+0x664>
 8009126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009128:	881b      	ldrh	r3, [r3, #0]
 800912a:	b29b      	uxth	r3, r3
 800912c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009130:	b29a      	uxth	r2, r3
 8009132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009134:	801a      	strh	r2, [r3, #0]
 8009136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009138:	881b      	ldrh	r3, [r3, #0]
 800913a:	b29b      	uxth	r3, r3
 800913c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009140:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009144:	b29a      	uxth	r2, r3
 8009146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009148:	801a      	strh	r2, [r3, #0]
 800914a:	e054      	b.n	80091f6 <USB_EPStartXfer+0x70e>
 800914c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009150:	2b3e      	cmp	r3, #62	; 0x3e
 8009152:	d817      	bhi.n	8009184 <USB_EPStartXfer+0x69c>
 8009154:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009158:	085b      	lsrs	r3, r3, #1
 800915a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800915e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009162:	f003 0301 	and.w	r3, r3, #1
 8009166:	2b00      	cmp	r3, #0
 8009168:	d004      	beq.n	8009174 <USB_EPStartXfer+0x68c>
 800916a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800916e:	3301      	adds	r3, #1
 8009170:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8009174:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009178:	b29b      	uxth	r3, r3
 800917a:	029b      	lsls	r3, r3, #10
 800917c:	b29a      	uxth	r2, r3
 800917e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009180:	801a      	strh	r2, [r3, #0]
 8009182:	e038      	b.n	80091f6 <USB_EPStartXfer+0x70e>
 8009184:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009188:	095b      	lsrs	r3, r3, #5
 800918a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800918e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009192:	f003 031f 	and.w	r3, r3, #31
 8009196:	2b00      	cmp	r3, #0
 8009198:	d104      	bne.n	80091a4 <USB_EPStartXfer+0x6bc>
 800919a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800919e:	3b01      	subs	r3, #1
 80091a0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80091a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80091a8:	b29b      	uxth	r3, r3
 80091aa:	029b      	lsls	r3, r3, #10
 80091ac:	b29b      	uxth	r3, r3
 80091ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80091b6:	b29a      	uxth	r2, r3
 80091b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091ba:	801a      	strh	r2, [r3, #0]
 80091bc:	e01b      	b.n	80091f6 <USB_EPStartXfer+0x70e>
 80091be:	463b      	mov	r3, r7
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	785b      	ldrb	r3, [r3, #1]
 80091c4:	2b01      	cmp	r3, #1
 80091c6:	d116      	bne.n	80091f6 <USB_EPStartXfer+0x70e>
 80091c8:	1d3b      	adds	r3, r7, #4
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091d0:	b29b      	uxth	r3, r3
 80091d2:	461a      	mov	r2, r3
 80091d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091d6:	4413      	add	r3, r2
 80091d8:	643b      	str	r3, [r7, #64]	; 0x40
 80091da:	463b      	mov	r3, r7
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	781b      	ldrb	r3, [r3, #0]
 80091e0:	011a      	lsls	r2, r3, #4
 80091e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091e4:	4413      	add	r3, r2
 80091e6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80091ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80091ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091f0:	b29a      	uxth	r2, r3
 80091f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091f4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80091f6:	463b      	mov	r3, r7
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	895b      	ldrh	r3, [r3, #10]
 80091fc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009200:	463b      	mov	r3, r7
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	6959      	ldr	r1, [r3, #20]
 8009206:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800920a:	b29b      	uxth	r3, r3
 800920c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009210:	1d38      	adds	r0, r7, #4
 8009212:	6800      	ldr	r0, [r0, #0]
 8009214:	f001 f89d 	bl	800a352 <USB_WritePMA>
 8009218:	e36c      	b.n	80098f4 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800921a:	463b      	mov	r3, r7
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	6a1b      	ldr	r3, [r3, #32]
 8009220:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8009224:	1d3b      	adds	r3, r7, #4
 8009226:	681a      	ldr	r2, [r3, #0]
 8009228:	463b      	mov	r3, r7
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	781b      	ldrb	r3, [r3, #0]
 800922e:	009b      	lsls	r3, r3, #2
 8009230:	4413      	add	r3, r2
 8009232:	881b      	ldrh	r3, [r3, #0]
 8009234:	b29b      	uxth	r3, r3
 8009236:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800923a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800923e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8009242:	1d3b      	adds	r3, r7, #4
 8009244:	681a      	ldr	r2, [r3, #0]
 8009246:	463b      	mov	r3, r7
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	781b      	ldrb	r3, [r3, #0]
 800924c:	009b      	lsls	r3, r3, #2
 800924e:	441a      	add	r2, r3
 8009250:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8009254:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009258:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800925c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009260:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009264:	b29b      	uxth	r3, r3
 8009266:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009268:	1d3b      	adds	r3, r7, #4
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800926e:	1d3b      	adds	r3, r7, #4
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009276:	b29b      	uxth	r3, r3
 8009278:	461a      	mov	r2, r3
 800927a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800927c:	4413      	add	r3, r2
 800927e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009280:	463b      	mov	r3, r7
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	781b      	ldrb	r3, [r3, #0]
 8009286:	011a      	lsls	r2, r3, #4
 8009288:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800928a:	4413      	add	r3, r2
 800928c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009290:	65bb      	str	r3, [r7, #88]	; 0x58
 8009292:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009296:	b29a      	uxth	r2, r3
 8009298:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800929a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800929c:	463b      	mov	r3, r7
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	891b      	ldrh	r3, [r3, #8]
 80092a2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80092a6:	463b      	mov	r3, r7
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	6959      	ldr	r1, [r3, #20]
 80092ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092b0:	b29b      	uxth	r3, r3
 80092b2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80092b6:	1d38      	adds	r0, r7, #4
 80092b8:	6800      	ldr	r0, [r0, #0]
 80092ba:	f001 f84a 	bl	800a352 <USB_WritePMA>
 80092be:	e319      	b.n	80098f4 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 80092c0:	1d3b      	adds	r3, r7, #4
 80092c2:	681a      	ldr	r2, [r3, #0]
 80092c4:	463b      	mov	r3, r7
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	781b      	ldrb	r3, [r3, #0]
 80092ca:	009b      	lsls	r3, r3, #2
 80092cc:	4413      	add	r3, r2
 80092ce:	881b      	ldrh	r3, [r3, #0]
 80092d0:	b29b      	uxth	r3, r3
 80092d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80092d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092da:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80092de:	1d3b      	adds	r3, r7, #4
 80092e0:	681a      	ldr	r2, [r3, #0]
 80092e2:	463b      	mov	r3, r7
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	781b      	ldrb	r3, [r3, #0]
 80092e8:	009b      	lsls	r3, r3, #2
 80092ea:	441a      	add	r2, r3
 80092ec:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80092f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80092f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80092f8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80092fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009300:	b29b      	uxth	r3, r3
 8009302:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8009304:	463b      	mov	r3, r7
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	6a1a      	ldr	r2, [r3, #32]
 800930a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800930e:	1ad2      	subs	r2, r2, r3
 8009310:	463b      	mov	r3, r7
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009316:	1d3b      	adds	r3, r7, #4
 8009318:	681a      	ldr	r2, [r3, #0]
 800931a:	463b      	mov	r3, r7
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	781b      	ldrb	r3, [r3, #0]
 8009320:	009b      	lsls	r3, r3, #2
 8009322:	4413      	add	r3, r2
 8009324:	881b      	ldrh	r3, [r3, #0]
 8009326:	b29b      	uxth	r3, r3
 8009328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800932c:	2b00      	cmp	r3, #0
 800932e:	f000 8162 	beq.w	80095f6 <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009332:	1d3b      	adds	r3, r7, #4
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800933a:	463b      	mov	r3, r7
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	785b      	ldrb	r3, [r3, #1]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d164      	bne.n	800940e <USB_EPStartXfer+0x926>
 8009344:	1d3b      	adds	r3, r7, #4
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	67bb      	str	r3, [r7, #120]	; 0x78
 800934a:	1d3b      	adds	r3, r7, #4
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009352:	b29b      	uxth	r3, r3
 8009354:	461a      	mov	r2, r3
 8009356:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009358:	4413      	add	r3, r2
 800935a:	67bb      	str	r3, [r7, #120]	; 0x78
 800935c:	463b      	mov	r3, r7
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	781b      	ldrb	r3, [r3, #0]
 8009362:	011a      	lsls	r2, r3, #4
 8009364:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009366:	4413      	add	r3, r2
 8009368:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800936c:	677b      	str	r3, [r7, #116]	; 0x74
 800936e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009372:	2b00      	cmp	r3, #0
 8009374:	d112      	bne.n	800939c <USB_EPStartXfer+0x8b4>
 8009376:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009378:	881b      	ldrh	r3, [r3, #0]
 800937a:	b29b      	uxth	r3, r3
 800937c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009380:	b29a      	uxth	r2, r3
 8009382:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009384:	801a      	strh	r2, [r3, #0]
 8009386:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009388:	881b      	ldrh	r3, [r3, #0]
 800938a:	b29b      	uxth	r3, r3
 800938c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009390:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009394:	b29a      	uxth	r2, r3
 8009396:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009398:	801a      	strh	r2, [r3, #0]
 800939a:	e057      	b.n	800944c <USB_EPStartXfer+0x964>
 800939c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093a0:	2b3e      	cmp	r3, #62	; 0x3e
 80093a2:	d817      	bhi.n	80093d4 <USB_EPStartXfer+0x8ec>
 80093a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093a8:	085b      	lsrs	r3, r3, #1
 80093aa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80093ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093b2:	f003 0301 	and.w	r3, r3, #1
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d004      	beq.n	80093c4 <USB_EPStartXfer+0x8dc>
 80093ba:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80093be:	3301      	adds	r3, #1
 80093c0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80093c4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80093c8:	b29b      	uxth	r3, r3
 80093ca:	029b      	lsls	r3, r3, #10
 80093cc:	b29a      	uxth	r2, r3
 80093ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80093d0:	801a      	strh	r2, [r3, #0]
 80093d2:	e03b      	b.n	800944c <USB_EPStartXfer+0x964>
 80093d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093d8:	095b      	lsrs	r3, r3, #5
 80093da:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80093de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093e2:	f003 031f 	and.w	r3, r3, #31
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d104      	bne.n	80093f4 <USB_EPStartXfer+0x90c>
 80093ea:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80093ee:	3b01      	subs	r3, #1
 80093f0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80093f4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80093f8:	b29b      	uxth	r3, r3
 80093fa:	029b      	lsls	r3, r3, #10
 80093fc:	b29b      	uxth	r3, r3
 80093fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009402:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009406:	b29a      	uxth	r2, r3
 8009408:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800940a:	801a      	strh	r2, [r3, #0]
 800940c:	e01e      	b.n	800944c <USB_EPStartXfer+0x964>
 800940e:	463b      	mov	r3, r7
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	785b      	ldrb	r3, [r3, #1]
 8009414:	2b01      	cmp	r3, #1
 8009416:	d119      	bne.n	800944c <USB_EPStartXfer+0x964>
 8009418:	1d3b      	adds	r3, r7, #4
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009420:	b29b      	uxth	r3, r3
 8009422:	461a      	mov	r2, r3
 8009424:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009428:	4413      	add	r3, r2
 800942a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800942e:	463b      	mov	r3, r7
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	781b      	ldrb	r3, [r3, #0]
 8009434:	011a      	lsls	r2, r3, #4
 8009436:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800943a:	4413      	add	r3, r2
 800943c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009440:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009442:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009446:	b29a      	uxth	r2, r3
 8009448:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800944a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800944c:	463b      	mov	r3, r7
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	895b      	ldrh	r3, [r3, #10]
 8009452:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009456:	463b      	mov	r3, r7
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	6959      	ldr	r1, [r3, #20]
 800945c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009460:	b29b      	uxth	r3, r3
 8009462:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009466:	1d38      	adds	r0, r7, #4
 8009468:	6800      	ldr	r0, [r0, #0]
 800946a:	f000 ff72 	bl	800a352 <USB_WritePMA>
          ep->xfer_buff += len;
 800946e:	463b      	mov	r3, r7
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	695a      	ldr	r2, [r3, #20]
 8009474:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009478:	441a      	add	r2, r3
 800947a:	463b      	mov	r3, r7
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8009480:	463b      	mov	r3, r7
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	6a1a      	ldr	r2, [r3, #32]
 8009486:	463b      	mov	r3, r7
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	691b      	ldr	r3, [r3, #16]
 800948c:	429a      	cmp	r2, r3
 800948e:	d909      	bls.n	80094a4 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8009490:	463b      	mov	r3, r7
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	6a1a      	ldr	r2, [r3, #32]
 8009496:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800949a:	1ad2      	subs	r2, r2, r3
 800949c:	463b      	mov	r3, r7
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	621a      	str	r2, [r3, #32]
 80094a2:	e008      	b.n	80094b6 <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 80094a4:	463b      	mov	r3, r7
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	6a1b      	ldr	r3, [r3, #32]
 80094aa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80094ae:	463b      	mov	r3, r7
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	2200      	movs	r2, #0
 80094b4:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80094b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	f000 821a 	beq.w	80098f4 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80094c0:	463b      	mov	r3, r7
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	785b      	ldrb	r3, [r3, #1]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d164      	bne.n	8009594 <USB_EPStartXfer+0xaac>
 80094ca:	1d3b      	adds	r3, r7, #4
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80094d0:	1d3b      	adds	r3, r7, #4
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80094d8:	b29b      	uxth	r3, r3
 80094da:	461a      	mov	r2, r3
 80094dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80094de:	4413      	add	r3, r2
 80094e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80094e2:	463b      	mov	r3, r7
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	781b      	ldrb	r3, [r3, #0]
 80094e8:	011a      	lsls	r2, r3, #4
 80094ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80094ec:	4413      	add	r3, r2
 80094ee:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80094f2:	667b      	str	r3, [r7, #100]	; 0x64
 80094f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d112      	bne.n	8009522 <USB_EPStartXfer+0xa3a>
 80094fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80094fe:	881b      	ldrh	r3, [r3, #0]
 8009500:	b29b      	uxth	r3, r3
 8009502:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009506:	b29a      	uxth	r2, r3
 8009508:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800950a:	801a      	strh	r2, [r3, #0]
 800950c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800950e:	881b      	ldrh	r3, [r3, #0]
 8009510:	b29b      	uxth	r3, r3
 8009512:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009516:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800951a:	b29a      	uxth	r2, r3
 800951c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800951e:	801a      	strh	r2, [r3, #0]
 8009520:	e057      	b.n	80095d2 <USB_EPStartXfer+0xaea>
 8009522:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009526:	2b3e      	cmp	r3, #62	; 0x3e
 8009528:	d817      	bhi.n	800955a <USB_EPStartXfer+0xa72>
 800952a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800952e:	085b      	lsrs	r3, r3, #1
 8009530:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8009534:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009538:	f003 0301 	and.w	r3, r3, #1
 800953c:	2b00      	cmp	r3, #0
 800953e:	d004      	beq.n	800954a <USB_EPStartXfer+0xa62>
 8009540:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009544:	3301      	adds	r3, #1
 8009546:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800954a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800954e:	b29b      	uxth	r3, r3
 8009550:	029b      	lsls	r3, r3, #10
 8009552:	b29a      	uxth	r2, r3
 8009554:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009556:	801a      	strh	r2, [r3, #0]
 8009558:	e03b      	b.n	80095d2 <USB_EPStartXfer+0xaea>
 800955a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800955e:	095b      	lsrs	r3, r3, #5
 8009560:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8009564:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009568:	f003 031f 	and.w	r3, r3, #31
 800956c:	2b00      	cmp	r3, #0
 800956e:	d104      	bne.n	800957a <USB_EPStartXfer+0xa92>
 8009570:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009574:	3b01      	subs	r3, #1
 8009576:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800957a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800957e:	b29b      	uxth	r3, r3
 8009580:	029b      	lsls	r3, r3, #10
 8009582:	b29b      	uxth	r3, r3
 8009584:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009588:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800958c:	b29a      	uxth	r2, r3
 800958e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009590:	801a      	strh	r2, [r3, #0]
 8009592:	e01e      	b.n	80095d2 <USB_EPStartXfer+0xaea>
 8009594:	463b      	mov	r3, r7
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	785b      	ldrb	r3, [r3, #1]
 800959a:	2b01      	cmp	r3, #1
 800959c:	d119      	bne.n	80095d2 <USB_EPStartXfer+0xaea>
 800959e:	1d3b      	adds	r3, r7, #4
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	673b      	str	r3, [r7, #112]	; 0x70
 80095a4:	1d3b      	adds	r3, r7, #4
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80095ac:	b29b      	uxth	r3, r3
 80095ae:	461a      	mov	r2, r3
 80095b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80095b2:	4413      	add	r3, r2
 80095b4:	673b      	str	r3, [r7, #112]	; 0x70
 80095b6:	463b      	mov	r3, r7
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	781b      	ldrb	r3, [r3, #0]
 80095bc:	011a      	lsls	r2, r3, #4
 80095be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80095c0:	4413      	add	r3, r2
 80095c2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80095c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80095c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095cc:	b29a      	uxth	r2, r3
 80095ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095d0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80095d2:	463b      	mov	r3, r7
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	891b      	ldrh	r3, [r3, #8]
 80095d8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80095dc:	463b      	mov	r3, r7
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	6959      	ldr	r1, [r3, #20]
 80095e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095e6:	b29b      	uxth	r3, r3
 80095e8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80095ec:	1d38      	adds	r0, r7, #4
 80095ee:	6800      	ldr	r0, [r0, #0]
 80095f0:	f000 feaf 	bl	800a352 <USB_WritePMA>
 80095f4:	e17e      	b.n	80098f4 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80095f6:	463b      	mov	r3, r7
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	785b      	ldrb	r3, [r3, #1]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d16f      	bne.n	80096e0 <USB_EPStartXfer+0xbf8>
 8009600:	1d3b      	adds	r3, r7, #4
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009608:	1d3b      	adds	r3, r7, #4
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009610:	b29b      	uxth	r3, r3
 8009612:	461a      	mov	r2, r3
 8009614:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009618:	4413      	add	r3, r2
 800961a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800961e:	463b      	mov	r3, r7
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	781b      	ldrb	r3, [r3, #0]
 8009624:	011a      	lsls	r2, r3, #4
 8009626:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800962a:	4413      	add	r3, r2
 800962c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009630:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009634:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009638:	2b00      	cmp	r3, #0
 800963a:	d116      	bne.n	800966a <USB_EPStartXfer+0xb82>
 800963c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009640:	881b      	ldrh	r3, [r3, #0]
 8009642:	b29b      	uxth	r3, r3
 8009644:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009648:	b29a      	uxth	r2, r3
 800964a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800964e:	801a      	strh	r2, [r3, #0]
 8009650:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009654:	881b      	ldrh	r3, [r3, #0]
 8009656:	b29b      	uxth	r3, r3
 8009658:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800965c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009660:	b29a      	uxth	r2, r3
 8009662:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009666:	801a      	strh	r2, [r3, #0]
 8009668:	e05f      	b.n	800972a <USB_EPStartXfer+0xc42>
 800966a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800966e:	2b3e      	cmp	r3, #62	; 0x3e
 8009670:	d818      	bhi.n	80096a4 <USB_EPStartXfer+0xbbc>
 8009672:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009676:	085b      	lsrs	r3, r3, #1
 8009678:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800967c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009680:	f003 0301 	and.w	r3, r3, #1
 8009684:	2b00      	cmp	r3, #0
 8009686:	d004      	beq.n	8009692 <USB_EPStartXfer+0xbaa>
 8009688:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800968c:	3301      	adds	r3, #1
 800968e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8009692:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009696:	b29b      	uxth	r3, r3
 8009698:	029b      	lsls	r3, r3, #10
 800969a:	b29a      	uxth	r2, r3
 800969c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80096a0:	801a      	strh	r2, [r3, #0]
 80096a2:	e042      	b.n	800972a <USB_EPStartXfer+0xc42>
 80096a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096a8:	095b      	lsrs	r3, r3, #5
 80096aa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80096ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096b2:	f003 031f 	and.w	r3, r3, #31
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d104      	bne.n	80096c4 <USB_EPStartXfer+0xbdc>
 80096ba:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80096be:	3b01      	subs	r3, #1
 80096c0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80096c4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80096c8:	b29b      	uxth	r3, r3
 80096ca:	029b      	lsls	r3, r3, #10
 80096cc:	b29b      	uxth	r3, r3
 80096ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096d6:	b29a      	uxth	r2, r3
 80096d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80096dc:	801a      	strh	r2, [r3, #0]
 80096de:	e024      	b.n	800972a <USB_EPStartXfer+0xc42>
 80096e0:	463b      	mov	r3, r7
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	785b      	ldrb	r3, [r3, #1]
 80096e6:	2b01      	cmp	r3, #1
 80096e8:	d11f      	bne.n	800972a <USB_EPStartXfer+0xc42>
 80096ea:	1d3b      	adds	r3, r7, #4
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80096f2:	1d3b      	adds	r3, r7, #4
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80096fa:	b29b      	uxth	r3, r3
 80096fc:	461a      	mov	r2, r3
 80096fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009702:	4413      	add	r3, r2
 8009704:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009708:	463b      	mov	r3, r7
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	781b      	ldrb	r3, [r3, #0]
 800970e:	011a      	lsls	r2, r3, #4
 8009710:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009714:	4413      	add	r3, r2
 8009716:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800971a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800971e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009722:	b29a      	uxth	r2, r3
 8009724:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009728:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800972a:	463b      	mov	r3, r7
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	891b      	ldrh	r3, [r3, #8]
 8009730:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009734:	463b      	mov	r3, r7
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	6959      	ldr	r1, [r3, #20]
 800973a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800973e:	b29b      	uxth	r3, r3
 8009740:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009744:	1d38      	adds	r0, r7, #4
 8009746:	6800      	ldr	r0, [r0, #0]
 8009748:	f000 fe03 	bl	800a352 <USB_WritePMA>
          ep->xfer_buff += len;
 800974c:	463b      	mov	r3, r7
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	695a      	ldr	r2, [r3, #20]
 8009752:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009756:	441a      	add	r2, r3
 8009758:	463b      	mov	r3, r7
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800975e:	463b      	mov	r3, r7
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	6a1a      	ldr	r2, [r3, #32]
 8009764:	463b      	mov	r3, r7
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	691b      	ldr	r3, [r3, #16]
 800976a:	429a      	cmp	r2, r3
 800976c:	d909      	bls.n	8009782 <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 800976e:	463b      	mov	r3, r7
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	6a1a      	ldr	r2, [r3, #32]
 8009774:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009778:	1ad2      	subs	r2, r2, r3
 800977a:	463b      	mov	r3, r7
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	621a      	str	r2, [r3, #32]
 8009780:	e008      	b.n	8009794 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 8009782:	463b      	mov	r3, r7
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	6a1b      	ldr	r3, [r3, #32]
 8009788:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800978c:	463b      	mov	r3, r7
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	2200      	movs	r2, #0
 8009792:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8009794:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009798:	2b00      	cmp	r3, #0
 800979a:	f000 80ab 	beq.w	80098f4 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800979e:	1d3b      	adds	r3, r7, #4
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80097a6:	463b      	mov	r3, r7
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	785b      	ldrb	r3, [r3, #1]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d16f      	bne.n	8009890 <USB_EPStartXfer+0xda8>
 80097b0:	1d3b      	adds	r3, r7, #4
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80097b8:	1d3b      	adds	r3, r7, #4
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80097c0:	b29b      	uxth	r3, r3
 80097c2:	461a      	mov	r2, r3
 80097c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80097c8:	4413      	add	r3, r2
 80097ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80097ce:	463b      	mov	r3, r7
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	781b      	ldrb	r3, [r3, #0]
 80097d4:	011a      	lsls	r2, r3, #4
 80097d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80097da:	4413      	add	r3, r2
 80097dc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80097e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80097e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d116      	bne.n	800981a <USB_EPStartXfer+0xd32>
 80097ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80097f0:	881b      	ldrh	r3, [r3, #0]
 80097f2:	b29b      	uxth	r3, r3
 80097f4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80097f8:	b29a      	uxth	r2, r3
 80097fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80097fe:	801a      	strh	r2, [r3, #0]
 8009800:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009804:	881b      	ldrh	r3, [r3, #0]
 8009806:	b29b      	uxth	r3, r3
 8009808:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800980c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009810:	b29a      	uxth	r2, r3
 8009812:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009816:	801a      	strh	r2, [r3, #0]
 8009818:	e05b      	b.n	80098d2 <USB_EPStartXfer+0xdea>
 800981a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800981e:	2b3e      	cmp	r3, #62	; 0x3e
 8009820:	d818      	bhi.n	8009854 <USB_EPStartXfer+0xd6c>
 8009822:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009826:	085b      	lsrs	r3, r3, #1
 8009828:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800982c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009830:	f003 0301 	and.w	r3, r3, #1
 8009834:	2b00      	cmp	r3, #0
 8009836:	d004      	beq.n	8009842 <USB_EPStartXfer+0xd5a>
 8009838:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800983c:	3301      	adds	r3, #1
 800983e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009842:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009846:	b29b      	uxth	r3, r3
 8009848:	029b      	lsls	r3, r3, #10
 800984a:	b29a      	uxth	r2, r3
 800984c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009850:	801a      	strh	r2, [r3, #0]
 8009852:	e03e      	b.n	80098d2 <USB_EPStartXfer+0xdea>
 8009854:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009858:	095b      	lsrs	r3, r3, #5
 800985a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800985e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009862:	f003 031f 	and.w	r3, r3, #31
 8009866:	2b00      	cmp	r3, #0
 8009868:	d104      	bne.n	8009874 <USB_EPStartXfer+0xd8c>
 800986a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800986e:	3b01      	subs	r3, #1
 8009870:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009874:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009878:	b29b      	uxth	r3, r3
 800987a:	029b      	lsls	r3, r3, #10
 800987c:	b29b      	uxth	r3, r3
 800987e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009882:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009886:	b29a      	uxth	r2, r3
 8009888:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800988c:	801a      	strh	r2, [r3, #0]
 800988e:	e020      	b.n	80098d2 <USB_EPStartXfer+0xdea>
 8009890:	463b      	mov	r3, r7
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	785b      	ldrb	r3, [r3, #1]
 8009896:	2b01      	cmp	r3, #1
 8009898:	d11b      	bne.n	80098d2 <USB_EPStartXfer+0xdea>
 800989a:	1d3b      	adds	r3, r7, #4
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80098a2:	b29b      	uxth	r3, r3
 80098a4:	461a      	mov	r2, r3
 80098a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80098aa:	4413      	add	r3, r2
 80098ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80098b0:	463b      	mov	r3, r7
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	781b      	ldrb	r3, [r3, #0]
 80098b6:	011a      	lsls	r2, r3, #4
 80098b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80098bc:	4413      	add	r3, r2
 80098be:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80098c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80098c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098ca:	b29a      	uxth	r2, r3
 80098cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80098d0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80098d2:	463b      	mov	r3, r7
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	895b      	ldrh	r3, [r3, #10]
 80098d8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80098dc:	463b      	mov	r3, r7
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	6959      	ldr	r1, [r3, #20]
 80098e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098e6:	b29b      	uxth	r3, r3
 80098e8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80098ec:	1d38      	adds	r0, r7, #4
 80098ee:	6800      	ldr	r0, [r0, #0]
 80098f0:	f000 fd2f 	bl	800a352 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80098f4:	1d3b      	adds	r3, r7, #4
 80098f6:	681a      	ldr	r2, [r3, #0]
 80098f8:	463b      	mov	r3, r7
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	781b      	ldrb	r3, [r3, #0]
 80098fe:	009b      	lsls	r3, r3, #2
 8009900:	4413      	add	r3, r2
 8009902:	881b      	ldrh	r3, [r3, #0]
 8009904:	b29b      	uxth	r3, r3
 8009906:	f107 020a 	add.w	r2, r7, #10
 800990a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800990e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009912:	8013      	strh	r3, [r2, #0]
 8009914:	f107 030a 	add.w	r3, r7, #10
 8009918:	f107 020a 	add.w	r2, r7, #10
 800991c:	8812      	ldrh	r2, [r2, #0]
 800991e:	f082 0210 	eor.w	r2, r2, #16
 8009922:	801a      	strh	r2, [r3, #0]
 8009924:	f107 030a 	add.w	r3, r7, #10
 8009928:	f107 020a 	add.w	r2, r7, #10
 800992c:	8812      	ldrh	r2, [r2, #0]
 800992e:	f082 0220 	eor.w	r2, r2, #32
 8009932:	801a      	strh	r2, [r3, #0]
 8009934:	1d3b      	adds	r3, r7, #4
 8009936:	681a      	ldr	r2, [r3, #0]
 8009938:	463b      	mov	r3, r7
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	781b      	ldrb	r3, [r3, #0]
 800993e:	009b      	lsls	r3, r3, #2
 8009940:	441a      	add	r2, r3
 8009942:	f107 030a 	add.w	r3, r7, #10
 8009946:	881b      	ldrh	r3, [r3, #0]
 8009948:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800994c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009950:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009954:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009958:	b29b      	uxth	r3, r3
 800995a:	8013      	strh	r3, [r2, #0]
 800995c:	e3b5      	b.n	800a0ca <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800995e:	463b      	mov	r3, r7
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	7b1b      	ldrb	r3, [r3, #12]
 8009964:	2b00      	cmp	r3, #0
 8009966:	f040 8090 	bne.w	8009a8a <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800996a:	463b      	mov	r3, r7
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	699a      	ldr	r2, [r3, #24]
 8009970:	463b      	mov	r3, r7
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	691b      	ldr	r3, [r3, #16]
 8009976:	429a      	cmp	r2, r3
 8009978:	d90e      	bls.n	8009998 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 800997a:	463b      	mov	r3, r7
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	691b      	ldr	r3, [r3, #16]
 8009980:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8009984:	463b      	mov	r3, r7
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	699a      	ldr	r2, [r3, #24]
 800998a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800998e:	1ad2      	subs	r2, r2, r3
 8009990:	463b      	mov	r3, r7
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	619a      	str	r2, [r3, #24]
 8009996:	e008      	b.n	80099aa <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 8009998:	463b      	mov	r3, r7
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	699b      	ldr	r3, [r3, #24]
 800999e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80099a2:	463b      	mov	r3, r7
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	2200      	movs	r2, #0
 80099a8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80099aa:	1d3b      	adds	r3, r7, #4
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80099b2:	1d3b      	adds	r3, r7, #4
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80099ba:	b29b      	uxth	r3, r3
 80099bc:	461a      	mov	r2, r3
 80099be:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80099c2:	4413      	add	r3, r2
 80099c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80099c8:	463b      	mov	r3, r7
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	781b      	ldrb	r3, [r3, #0]
 80099ce:	011a      	lsls	r2, r3, #4
 80099d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80099d4:	4413      	add	r3, r2
 80099d6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80099da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80099de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d116      	bne.n	8009a14 <USB_EPStartXfer+0xf2c>
 80099e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80099ea:	881b      	ldrh	r3, [r3, #0]
 80099ec:	b29b      	uxth	r3, r3
 80099ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80099f2:	b29a      	uxth	r2, r3
 80099f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80099f8:	801a      	strh	r2, [r3, #0]
 80099fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80099fe:	881b      	ldrh	r3, [r3, #0]
 8009a00:	b29b      	uxth	r3, r3
 8009a02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a0a:	b29a      	uxth	r2, r3
 8009a0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009a10:	801a      	strh	r2, [r3, #0]
 8009a12:	e32c      	b.n	800a06e <USB_EPStartXfer+0x1586>
 8009a14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a18:	2b3e      	cmp	r3, #62	; 0x3e
 8009a1a:	d818      	bhi.n	8009a4e <USB_EPStartXfer+0xf66>
 8009a1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a20:	085b      	lsrs	r3, r3, #1
 8009a22:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009a26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a2a:	f003 0301 	and.w	r3, r3, #1
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d004      	beq.n	8009a3c <USB_EPStartXfer+0xf54>
 8009a32:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009a36:	3301      	adds	r3, #1
 8009a38:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009a3c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009a40:	b29b      	uxth	r3, r3
 8009a42:	029b      	lsls	r3, r3, #10
 8009a44:	b29a      	uxth	r2, r3
 8009a46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009a4a:	801a      	strh	r2, [r3, #0]
 8009a4c:	e30f      	b.n	800a06e <USB_EPStartXfer+0x1586>
 8009a4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a52:	095b      	lsrs	r3, r3, #5
 8009a54:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009a58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a5c:	f003 031f 	and.w	r3, r3, #31
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d104      	bne.n	8009a6e <USB_EPStartXfer+0xf86>
 8009a64:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009a68:	3b01      	subs	r3, #1
 8009a6a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009a6e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009a72:	b29b      	uxth	r3, r3
 8009a74:	029b      	lsls	r3, r3, #10
 8009a76:	b29b      	uxth	r3, r3
 8009a78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a80:	b29a      	uxth	r2, r3
 8009a82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009a86:	801a      	strh	r2, [r3, #0]
 8009a88:	e2f1      	b.n	800a06e <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009a8a:	463b      	mov	r3, r7
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	78db      	ldrb	r3, [r3, #3]
 8009a90:	2b02      	cmp	r3, #2
 8009a92:	f040 818f 	bne.w	8009db4 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009a96:	463b      	mov	r3, r7
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	785b      	ldrb	r3, [r3, #1]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d175      	bne.n	8009b8c <USB_EPStartXfer+0x10a4>
 8009aa0:	1d3b      	adds	r3, r7, #4
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009aa8:	1d3b      	adds	r3, r7, #4
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ab0:	b29b      	uxth	r3, r3
 8009ab2:	461a      	mov	r2, r3
 8009ab4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009ab8:	4413      	add	r3, r2
 8009aba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009abe:	463b      	mov	r3, r7
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	781b      	ldrb	r3, [r3, #0]
 8009ac4:	011a      	lsls	r2, r3, #4
 8009ac6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009aca:	4413      	add	r3, r2
 8009acc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009ad0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009ad4:	463b      	mov	r3, r7
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	691b      	ldr	r3, [r3, #16]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d116      	bne.n	8009b0c <USB_EPStartXfer+0x1024>
 8009ade:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009ae2:	881b      	ldrh	r3, [r3, #0]
 8009ae4:	b29b      	uxth	r3, r3
 8009ae6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009aea:	b29a      	uxth	r2, r3
 8009aec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009af0:	801a      	strh	r2, [r3, #0]
 8009af2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009af6:	881b      	ldrh	r3, [r3, #0]
 8009af8:	b29b      	uxth	r3, r3
 8009afa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009afe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b02:	b29a      	uxth	r2, r3
 8009b04:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009b08:	801a      	strh	r2, [r3, #0]
 8009b0a:	e065      	b.n	8009bd8 <USB_EPStartXfer+0x10f0>
 8009b0c:	463b      	mov	r3, r7
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	691b      	ldr	r3, [r3, #16]
 8009b12:	2b3e      	cmp	r3, #62	; 0x3e
 8009b14:	d81a      	bhi.n	8009b4c <USB_EPStartXfer+0x1064>
 8009b16:	463b      	mov	r3, r7
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	691b      	ldr	r3, [r3, #16]
 8009b1c:	085b      	lsrs	r3, r3, #1
 8009b1e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009b22:	463b      	mov	r3, r7
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	691b      	ldr	r3, [r3, #16]
 8009b28:	f003 0301 	and.w	r3, r3, #1
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d004      	beq.n	8009b3a <USB_EPStartXfer+0x1052>
 8009b30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b34:	3301      	adds	r3, #1
 8009b36:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009b3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b3e:	b29b      	uxth	r3, r3
 8009b40:	029b      	lsls	r3, r3, #10
 8009b42:	b29a      	uxth	r2, r3
 8009b44:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009b48:	801a      	strh	r2, [r3, #0]
 8009b4a:	e045      	b.n	8009bd8 <USB_EPStartXfer+0x10f0>
 8009b4c:	463b      	mov	r3, r7
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	691b      	ldr	r3, [r3, #16]
 8009b52:	095b      	lsrs	r3, r3, #5
 8009b54:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009b58:	463b      	mov	r3, r7
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	691b      	ldr	r3, [r3, #16]
 8009b5e:	f003 031f 	and.w	r3, r3, #31
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d104      	bne.n	8009b70 <USB_EPStartXfer+0x1088>
 8009b66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b6a:	3b01      	subs	r3, #1
 8009b6c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009b70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b74:	b29b      	uxth	r3, r3
 8009b76:	029b      	lsls	r3, r3, #10
 8009b78:	b29b      	uxth	r3, r3
 8009b7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b82:	b29a      	uxth	r2, r3
 8009b84:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009b88:	801a      	strh	r2, [r3, #0]
 8009b8a:	e025      	b.n	8009bd8 <USB_EPStartXfer+0x10f0>
 8009b8c:	463b      	mov	r3, r7
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	785b      	ldrb	r3, [r3, #1]
 8009b92:	2b01      	cmp	r3, #1
 8009b94:	d120      	bne.n	8009bd8 <USB_EPStartXfer+0x10f0>
 8009b96:	1d3b      	adds	r3, r7, #4
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009b9e:	1d3b      	adds	r3, r7, #4
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ba6:	b29b      	uxth	r3, r3
 8009ba8:	461a      	mov	r2, r3
 8009baa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009bae:	4413      	add	r3, r2
 8009bb0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009bb4:	463b      	mov	r3, r7
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	781b      	ldrb	r3, [r3, #0]
 8009bba:	011a      	lsls	r2, r3, #4
 8009bbc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009bc0:	4413      	add	r3, r2
 8009bc2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009bc6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009bca:	463b      	mov	r3, r7
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	691b      	ldr	r3, [r3, #16]
 8009bd0:	b29a      	uxth	r2, r3
 8009bd2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009bd6:	801a      	strh	r2, [r3, #0]
 8009bd8:	1d3b      	adds	r3, r7, #4
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009be0:	463b      	mov	r3, r7
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	785b      	ldrb	r3, [r3, #1]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d175      	bne.n	8009cd6 <USB_EPStartXfer+0x11ee>
 8009bea:	1d3b      	adds	r3, r7, #4
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009bf2:	1d3b      	adds	r3, r7, #4
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009bfa:	b29b      	uxth	r3, r3
 8009bfc:	461a      	mov	r2, r3
 8009bfe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009c02:	4413      	add	r3, r2
 8009c04:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009c08:	463b      	mov	r3, r7
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	781b      	ldrb	r3, [r3, #0]
 8009c0e:	011a      	lsls	r2, r3, #4
 8009c10:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009c14:	4413      	add	r3, r2
 8009c16:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009c1a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009c1e:	463b      	mov	r3, r7
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	691b      	ldr	r3, [r3, #16]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d116      	bne.n	8009c56 <USB_EPStartXfer+0x116e>
 8009c28:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009c2c:	881b      	ldrh	r3, [r3, #0]
 8009c2e:	b29b      	uxth	r3, r3
 8009c30:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009c34:	b29a      	uxth	r2, r3
 8009c36:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009c3a:	801a      	strh	r2, [r3, #0]
 8009c3c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009c40:	881b      	ldrh	r3, [r3, #0]
 8009c42:	b29b      	uxth	r3, r3
 8009c44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c4c:	b29a      	uxth	r2, r3
 8009c4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009c52:	801a      	strh	r2, [r3, #0]
 8009c54:	e061      	b.n	8009d1a <USB_EPStartXfer+0x1232>
 8009c56:	463b      	mov	r3, r7
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	691b      	ldr	r3, [r3, #16]
 8009c5c:	2b3e      	cmp	r3, #62	; 0x3e
 8009c5e:	d81a      	bhi.n	8009c96 <USB_EPStartXfer+0x11ae>
 8009c60:	463b      	mov	r3, r7
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	691b      	ldr	r3, [r3, #16]
 8009c66:	085b      	lsrs	r3, r3, #1
 8009c68:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009c6c:	463b      	mov	r3, r7
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	691b      	ldr	r3, [r3, #16]
 8009c72:	f003 0301 	and.w	r3, r3, #1
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d004      	beq.n	8009c84 <USB_EPStartXfer+0x119c>
 8009c7a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009c7e:	3301      	adds	r3, #1
 8009c80:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009c84:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009c88:	b29b      	uxth	r3, r3
 8009c8a:	029b      	lsls	r3, r3, #10
 8009c8c:	b29a      	uxth	r2, r3
 8009c8e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009c92:	801a      	strh	r2, [r3, #0]
 8009c94:	e041      	b.n	8009d1a <USB_EPStartXfer+0x1232>
 8009c96:	463b      	mov	r3, r7
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	691b      	ldr	r3, [r3, #16]
 8009c9c:	095b      	lsrs	r3, r3, #5
 8009c9e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009ca2:	463b      	mov	r3, r7
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	691b      	ldr	r3, [r3, #16]
 8009ca8:	f003 031f 	and.w	r3, r3, #31
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d104      	bne.n	8009cba <USB_EPStartXfer+0x11d2>
 8009cb0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009cb4:	3b01      	subs	r3, #1
 8009cb6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009cba:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009cbe:	b29b      	uxth	r3, r3
 8009cc0:	029b      	lsls	r3, r3, #10
 8009cc2:	b29b      	uxth	r3, r3
 8009cc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009cc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ccc:	b29a      	uxth	r2, r3
 8009cce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009cd2:	801a      	strh	r2, [r3, #0]
 8009cd4:	e021      	b.n	8009d1a <USB_EPStartXfer+0x1232>
 8009cd6:	463b      	mov	r3, r7
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	785b      	ldrb	r3, [r3, #1]
 8009cdc:	2b01      	cmp	r3, #1
 8009cde:	d11c      	bne.n	8009d1a <USB_EPStartXfer+0x1232>
 8009ce0:	1d3b      	adds	r3, r7, #4
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ce8:	b29b      	uxth	r3, r3
 8009cea:	461a      	mov	r2, r3
 8009cec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009cf0:	4413      	add	r3, r2
 8009cf2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009cf6:	463b      	mov	r3, r7
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	781b      	ldrb	r3, [r3, #0]
 8009cfc:	011a      	lsls	r2, r3, #4
 8009cfe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009d02:	4413      	add	r3, r2
 8009d04:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009d08:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009d0c:	463b      	mov	r3, r7
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	691b      	ldr	r3, [r3, #16]
 8009d12:	b29a      	uxth	r2, r3
 8009d14:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009d18:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009d1a:	463b      	mov	r3, r7
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	69db      	ldr	r3, [r3, #28]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	f000 81a4 	beq.w	800a06e <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009d26:	1d3b      	adds	r3, r7, #4
 8009d28:	681a      	ldr	r2, [r3, #0]
 8009d2a:	463b      	mov	r3, r7
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	781b      	ldrb	r3, [r3, #0]
 8009d30:	009b      	lsls	r3, r3, #2
 8009d32:	4413      	add	r3, r2
 8009d34:	881b      	ldrh	r3, [r3, #0]
 8009d36:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009d3a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009d3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d005      	beq.n	8009d52 <USB_EPStartXfer+0x126a>
 8009d46:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d10d      	bne.n	8009d6e <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009d52:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009d56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	f040 8187 	bne.w	800a06e <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009d60:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	f040 8180 	bne.w	800a06e <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8009d6e:	1d3b      	adds	r3, r7, #4
 8009d70:	681a      	ldr	r2, [r3, #0]
 8009d72:	463b      	mov	r3, r7
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	781b      	ldrb	r3, [r3, #0]
 8009d78:	009b      	lsls	r3, r3, #2
 8009d7a:	4413      	add	r3, r2
 8009d7c:	881b      	ldrh	r3, [r3, #0]
 8009d7e:	b29b      	uxth	r3, r3
 8009d80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d88:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8009d8c:	1d3b      	adds	r3, r7, #4
 8009d8e:	681a      	ldr	r2, [r3, #0]
 8009d90:	463b      	mov	r3, r7
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	781b      	ldrb	r3, [r3, #0]
 8009d96:	009b      	lsls	r3, r3, #2
 8009d98:	441a      	add	r2, r3
 8009d9a:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8009d9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009da2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009da6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009daa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009dae:	b29b      	uxth	r3, r3
 8009db0:	8013      	strh	r3, [r2, #0]
 8009db2:	e15c      	b.n	800a06e <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009db4:	463b      	mov	r3, r7
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	78db      	ldrb	r3, [r3, #3]
 8009dba:	2b01      	cmp	r3, #1
 8009dbc:	f040 8155 	bne.w	800a06a <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8009dc0:	463b      	mov	r3, r7
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	699a      	ldr	r2, [r3, #24]
 8009dc6:	463b      	mov	r3, r7
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	691b      	ldr	r3, [r3, #16]
 8009dcc:	429a      	cmp	r2, r3
 8009dce:	d90e      	bls.n	8009dee <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8009dd0:	463b      	mov	r3, r7
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	691b      	ldr	r3, [r3, #16]
 8009dd6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8009dda:	463b      	mov	r3, r7
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	699a      	ldr	r2, [r3, #24]
 8009de0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009de4:	1ad2      	subs	r2, r2, r3
 8009de6:	463b      	mov	r3, r7
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	619a      	str	r2, [r3, #24]
 8009dec:	e008      	b.n	8009e00 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 8009dee:	463b      	mov	r3, r7
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	699b      	ldr	r3, [r3, #24]
 8009df4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8009df8:	463b      	mov	r3, r7
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009e00:	463b      	mov	r3, r7
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	785b      	ldrb	r3, [r3, #1]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d16f      	bne.n	8009eea <USB_EPStartXfer+0x1402>
 8009e0a:	1d3b      	adds	r3, r7, #4
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009e12:	1d3b      	adds	r3, r7, #4
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e1a:	b29b      	uxth	r3, r3
 8009e1c:	461a      	mov	r2, r3
 8009e1e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009e22:	4413      	add	r3, r2
 8009e24:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009e28:	463b      	mov	r3, r7
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	781b      	ldrb	r3, [r3, #0]
 8009e2e:	011a      	lsls	r2, r3, #4
 8009e30:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009e34:	4413      	add	r3, r2
 8009e36:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009e3a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009e3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d116      	bne.n	8009e74 <USB_EPStartXfer+0x138c>
 8009e46:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009e4a:	881b      	ldrh	r3, [r3, #0]
 8009e4c:	b29b      	uxth	r3, r3
 8009e4e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009e52:	b29a      	uxth	r2, r3
 8009e54:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009e58:	801a      	strh	r2, [r3, #0]
 8009e5a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009e5e:	881b      	ldrh	r3, [r3, #0]
 8009e60:	b29b      	uxth	r3, r3
 8009e62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e6a:	b29a      	uxth	r2, r3
 8009e6c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009e70:	801a      	strh	r2, [r3, #0]
 8009e72:	e05f      	b.n	8009f34 <USB_EPStartXfer+0x144c>
 8009e74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009e78:	2b3e      	cmp	r3, #62	; 0x3e
 8009e7a:	d818      	bhi.n	8009eae <USB_EPStartXfer+0x13c6>
 8009e7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009e80:	085b      	lsrs	r3, r3, #1
 8009e82:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009e86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009e8a:	f003 0301 	and.w	r3, r3, #1
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d004      	beq.n	8009e9c <USB_EPStartXfer+0x13b4>
 8009e92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009e96:	3301      	adds	r3, #1
 8009e98:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009e9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009ea0:	b29b      	uxth	r3, r3
 8009ea2:	029b      	lsls	r3, r3, #10
 8009ea4:	b29a      	uxth	r2, r3
 8009ea6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009eaa:	801a      	strh	r2, [r3, #0]
 8009eac:	e042      	b.n	8009f34 <USB_EPStartXfer+0x144c>
 8009eae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009eb2:	095b      	lsrs	r3, r3, #5
 8009eb4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009eb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ebc:	f003 031f 	and.w	r3, r3, #31
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d104      	bne.n	8009ece <USB_EPStartXfer+0x13e6>
 8009ec4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009ec8:	3b01      	subs	r3, #1
 8009eca:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009ece:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009ed2:	b29b      	uxth	r3, r3
 8009ed4:	029b      	lsls	r3, r3, #10
 8009ed6:	b29b      	uxth	r3, r3
 8009ed8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009edc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ee0:	b29a      	uxth	r2, r3
 8009ee2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009ee6:	801a      	strh	r2, [r3, #0]
 8009ee8:	e024      	b.n	8009f34 <USB_EPStartXfer+0x144c>
 8009eea:	463b      	mov	r3, r7
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	785b      	ldrb	r3, [r3, #1]
 8009ef0:	2b01      	cmp	r3, #1
 8009ef2:	d11f      	bne.n	8009f34 <USB_EPStartXfer+0x144c>
 8009ef4:	1d3b      	adds	r3, r7, #4
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009efc:	1d3b      	adds	r3, r7, #4
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f04:	b29b      	uxth	r3, r3
 8009f06:	461a      	mov	r2, r3
 8009f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f0c:	4413      	add	r3, r2
 8009f0e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009f12:	463b      	mov	r3, r7
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	781b      	ldrb	r3, [r3, #0]
 8009f18:	011a      	lsls	r2, r3, #4
 8009f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f1e:	4413      	add	r3, r2
 8009f20:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009f24:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009f28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f2c:	b29a      	uxth	r2, r3
 8009f2e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009f32:	801a      	strh	r2, [r3, #0]
 8009f34:	1d3b      	adds	r3, r7, #4
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009f3c:	463b      	mov	r3, r7
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	785b      	ldrb	r3, [r3, #1]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d16f      	bne.n	800a026 <USB_EPStartXfer+0x153e>
 8009f46:	1d3b      	adds	r3, r7, #4
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009f4e:	1d3b      	adds	r3, r7, #4
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f56:	b29b      	uxth	r3, r3
 8009f58:	461a      	mov	r2, r3
 8009f5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009f5e:	4413      	add	r3, r2
 8009f60:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009f64:	463b      	mov	r3, r7
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	781b      	ldrb	r3, [r3, #0]
 8009f6a:	011a      	lsls	r2, r3, #4
 8009f6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009f70:	4413      	add	r3, r2
 8009f72:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009f76:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009f7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d116      	bne.n	8009fb0 <USB_EPStartXfer+0x14c8>
 8009f82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009f86:	881b      	ldrh	r3, [r3, #0]
 8009f88:	b29b      	uxth	r3, r3
 8009f8a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009f8e:	b29a      	uxth	r2, r3
 8009f90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009f94:	801a      	strh	r2, [r3, #0]
 8009f96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009f9a:	881b      	ldrh	r3, [r3, #0]
 8009f9c:	b29b      	uxth	r3, r3
 8009f9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009fa2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009fa6:	b29a      	uxth	r2, r3
 8009fa8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009fac:	801a      	strh	r2, [r3, #0]
 8009fae:	e05e      	b.n	800a06e <USB_EPStartXfer+0x1586>
 8009fb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009fb4:	2b3e      	cmp	r3, #62	; 0x3e
 8009fb6:	d818      	bhi.n	8009fea <USB_EPStartXfer+0x1502>
 8009fb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009fbc:	085b      	lsrs	r3, r3, #1
 8009fbe:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009fc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009fc6:	f003 0301 	and.w	r3, r3, #1
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d004      	beq.n	8009fd8 <USB_EPStartXfer+0x14f0>
 8009fce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009fd2:	3301      	adds	r3, #1
 8009fd4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009fd8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009fdc:	b29b      	uxth	r3, r3
 8009fde:	029b      	lsls	r3, r3, #10
 8009fe0:	b29a      	uxth	r2, r3
 8009fe2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009fe6:	801a      	strh	r2, [r3, #0]
 8009fe8:	e041      	b.n	800a06e <USB_EPStartXfer+0x1586>
 8009fea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009fee:	095b      	lsrs	r3, r3, #5
 8009ff0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009ff4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ff8:	f003 031f 	and.w	r3, r3, #31
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d104      	bne.n	800a00a <USB_EPStartXfer+0x1522>
 800a000:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a004:	3b01      	subs	r3, #1
 800a006:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a00a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a00e:	b29b      	uxth	r3, r3
 800a010:	029b      	lsls	r3, r3, #10
 800a012:	b29b      	uxth	r3, r3
 800a014:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a018:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a01c:	b29a      	uxth	r2, r3
 800a01e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a022:	801a      	strh	r2, [r3, #0]
 800a024:	e023      	b.n	800a06e <USB_EPStartXfer+0x1586>
 800a026:	463b      	mov	r3, r7
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	785b      	ldrb	r3, [r3, #1]
 800a02c:	2b01      	cmp	r3, #1
 800a02e:	d11e      	bne.n	800a06e <USB_EPStartXfer+0x1586>
 800a030:	1d3b      	adds	r3, r7, #4
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a038:	b29b      	uxth	r3, r3
 800a03a:	461a      	mov	r2, r3
 800a03c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a040:	4413      	add	r3, r2
 800a042:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a046:	463b      	mov	r3, r7
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	781b      	ldrb	r3, [r3, #0]
 800a04c:	011a      	lsls	r2, r3, #4
 800a04e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a052:	4413      	add	r3, r2
 800a054:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a058:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a05c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a060:	b29a      	uxth	r2, r3
 800a062:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a066:	801a      	strh	r2, [r3, #0]
 800a068:	e001      	b.n	800a06e <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 800a06a:	2301      	movs	r3, #1
 800a06c:	e02e      	b.n	800a0cc <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a06e:	1d3b      	adds	r3, r7, #4
 800a070:	681a      	ldr	r2, [r3, #0]
 800a072:	463b      	mov	r3, r7
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	781b      	ldrb	r3, [r3, #0]
 800a078:	009b      	lsls	r3, r3, #2
 800a07a:	4413      	add	r3, r2
 800a07c:	881b      	ldrh	r3, [r3, #0]
 800a07e:	b29b      	uxth	r3, r3
 800a080:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a084:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a088:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800a08c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800a090:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a094:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800a098:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800a09c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a0a0:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800a0a4:	1d3b      	adds	r3, r7, #4
 800a0a6:	681a      	ldr	r2, [r3, #0]
 800a0a8:	463b      	mov	r3, r7
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	781b      	ldrb	r3, [r3, #0]
 800a0ae:	009b      	lsls	r3, r3, #2
 800a0b0:	441a      	add	r2, r3
 800a0b2:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800a0b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a0ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a0be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a0c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0c6:	b29b      	uxth	r3, r3
 800a0c8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a0ca:	2300      	movs	r3, #0
}
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd80      	pop	{r7, pc}

0800a0d6 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a0d6:	b480      	push	{r7}
 800a0d8:	b085      	sub	sp, #20
 800a0da:	af00      	add	r7, sp, #0
 800a0dc:	6078      	str	r0, [r7, #4]
 800a0de:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	785b      	ldrb	r3, [r3, #1]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d020      	beq.n	800a12a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a0e8:	687a      	ldr	r2, [r7, #4]
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	781b      	ldrb	r3, [r3, #0]
 800a0ee:	009b      	lsls	r3, r3, #2
 800a0f0:	4413      	add	r3, r2
 800a0f2:	881b      	ldrh	r3, [r3, #0]
 800a0f4:	b29b      	uxth	r3, r3
 800a0f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0fe:	81bb      	strh	r3, [r7, #12]
 800a100:	89bb      	ldrh	r3, [r7, #12]
 800a102:	f083 0310 	eor.w	r3, r3, #16
 800a106:	81bb      	strh	r3, [r7, #12]
 800a108:	687a      	ldr	r2, [r7, #4]
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	781b      	ldrb	r3, [r3, #0]
 800a10e:	009b      	lsls	r3, r3, #2
 800a110:	441a      	add	r2, r3
 800a112:	89bb      	ldrh	r3, [r7, #12]
 800a114:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a118:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a11c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a124:	b29b      	uxth	r3, r3
 800a126:	8013      	strh	r3, [r2, #0]
 800a128:	e01f      	b.n	800a16a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a12a:	687a      	ldr	r2, [r7, #4]
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	781b      	ldrb	r3, [r3, #0]
 800a130:	009b      	lsls	r3, r3, #2
 800a132:	4413      	add	r3, r2
 800a134:	881b      	ldrh	r3, [r3, #0]
 800a136:	b29b      	uxth	r3, r3
 800a138:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a13c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a140:	81fb      	strh	r3, [r7, #14]
 800a142:	89fb      	ldrh	r3, [r7, #14]
 800a144:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a148:	81fb      	strh	r3, [r7, #14]
 800a14a:	687a      	ldr	r2, [r7, #4]
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	781b      	ldrb	r3, [r3, #0]
 800a150:	009b      	lsls	r3, r3, #2
 800a152:	441a      	add	r2, r3
 800a154:	89fb      	ldrh	r3, [r7, #14]
 800a156:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a15a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a15e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a162:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a166:	b29b      	uxth	r3, r3
 800a168:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a16a:	2300      	movs	r3, #0
}
 800a16c:	4618      	mov	r0, r3
 800a16e:	3714      	adds	r7, #20
 800a170:	46bd      	mov	sp, r7
 800a172:	bc80      	pop	{r7}
 800a174:	4770      	bx	lr

0800a176 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a176:	b480      	push	{r7}
 800a178:	b087      	sub	sp, #28
 800a17a:	af00      	add	r7, sp, #0
 800a17c:	6078      	str	r0, [r7, #4]
 800a17e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	7b1b      	ldrb	r3, [r3, #12]
 800a184:	2b00      	cmp	r3, #0
 800a186:	f040 809d 	bne.w	800a2c4 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	785b      	ldrb	r3, [r3, #1]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d04c      	beq.n	800a22c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a192:	687a      	ldr	r2, [r7, #4]
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	781b      	ldrb	r3, [r3, #0]
 800a198:	009b      	lsls	r3, r3, #2
 800a19a:	4413      	add	r3, r2
 800a19c:	881b      	ldrh	r3, [r3, #0]
 800a19e:	823b      	strh	r3, [r7, #16]
 800a1a0:	8a3b      	ldrh	r3, [r7, #16]
 800a1a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d01b      	beq.n	800a1e2 <USB_EPClearStall+0x6c>
 800a1aa:	687a      	ldr	r2, [r7, #4]
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	781b      	ldrb	r3, [r3, #0]
 800a1b0:	009b      	lsls	r3, r3, #2
 800a1b2:	4413      	add	r3, r2
 800a1b4:	881b      	ldrh	r3, [r3, #0]
 800a1b6:	b29b      	uxth	r3, r3
 800a1b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a1bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1c0:	81fb      	strh	r3, [r7, #14]
 800a1c2:	687a      	ldr	r2, [r7, #4]
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	781b      	ldrb	r3, [r3, #0]
 800a1c8:	009b      	lsls	r3, r3, #2
 800a1ca:	441a      	add	r2, r3
 800a1cc:	89fb      	ldrh	r3, [r7, #14]
 800a1ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1da:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a1de:	b29b      	uxth	r3, r3
 800a1e0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	78db      	ldrb	r3, [r3, #3]
 800a1e6:	2b01      	cmp	r3, #1
 800a1e8:	d06c      	beq.n	800a2c4 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a1ea:	687a      	ldr	r2, [r7, #4]
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	781b      	ldrb	r3, [r3, #0]
 800a1f0:	009b      	lsls	r3, r3, #2
 800a1f2:	4413      	add	r3, r2
 800a1f4:	881b      	ldrh	r3, [r3, #0]
 800a1f6:	b29b      	uxth	r3, r3
 800a1f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a1fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a200:	81bb      	strh	r3, [r7, #12]
 800a202:	89bb      	ldrh	r3, [r7, #12]
 800a204:	f083 0320 	eor.w	r3, r3, #32
 800a208:	81bb      	strh	r3, [r7, #12]
 800a20a:	687a      	ldr	r2, [r7, #4]
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	781b      	ldrb	r3, [r3, #0]
 800a210:	009b      	lsls	r3, r3, #2
 800a212:	441a      	add	r2, r3
 800a214:	89bb      	ldrh	r3, [r7, #12]
 800a216:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a21a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a21e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a222:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a226:	b29b      	uxth	r3, r3
 800a228:	8013      	strh	r3, [r2, #0]
 800a22a:	e04b      	b.n	800a2c4 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a22c:	687a      	ldr	r2, [r7, #4]
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	781b      	ldrb	r3, [r3, #0]
 800a232:	009b      	lsls	r3, r3, #2
 800a234:	4413      	add	r3, r2
 800a236:	881b      	ldrh	r3, [r3, #0]
 800a238:	82fb      	strh	r3, [r7, #22]
 800a23a:	8afb      	ldrh	r3, [r7, #22]
 800a23c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a240:	2b00      	cmp	r3, #0
 800a242:	d01b      	beq.n	800a27c <USB_EPClearStall+0x106>
 800a244:	687a      	ldr	r2, [r7, #4]
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	781b      	ldrb	r3, [r3, #0]
 800a24a:	009b      	lsls	r3, r3, #2
 800a24c:	4413      	add	r3, r2
 800a24e:	881b      	ldrh	r3, [r3, #0]
 800a250:	b29b      	uxth	r3, r3
 800a252:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a25a:	82bb      	strh	r3, [r7, #20]
 800a25c:	687a      	ldr	r2, [r7, #4]
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	781b      	ldrb	r3, [r3, #0]
 800a262:	009b      	lsls	r3, r3, #2
 800a264:	441a      	add	r2, r3
 800a266:	8abb      	ldrh	r3, [r7, #20]
 800a268:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a26c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a270:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a278:	b29b      	uxth	r3, r3
 800a27a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a27c:	687a      	ldr	r2, [r7, #4]
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	781b      	ldrb	r3, [r3, #0]
 800a282:	009b      	lsls	r3, r3, #2
 800a284:	4413      	add	r3, r2
 800a286:	881b      	ldrh	r3, [r3, #0]
 800a288:	b29b      	uxth	r3, r3
 800a28a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a28e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a292:	827b      	strh	r3, [r7, #18]
 800a294:	8a7b      	ldrh	r3, [r7, #18]
 800a296:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a29a:	827b      	strh	r3, [r7, #18]
 800a29c:	8a7b      	ldrh	r3, [r7, #18]
 800a29e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a2a2:	827b      	strh	r3, [r7, #18]
 800a2a4:	687a      	ldr	r2, [r7, #4]
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	781b      	ldrb	r3, [r3, #0]
 800a2aa:	009b      	lsls	r3, r3, #2
 800a2ac:	441a      	add	r2, r3
 800a2ae:	8a7b      	ldrh	r3, [r7, #18]
 800a2b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a2b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a2b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a2bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2c0:	b29b      	uxth	r3, r3
 800a2c2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a2c4:	2300      	movs	r3, #0
}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	371c      	adds	r7, #28
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bc80      	pop	{r7}
 800a2ce:	4770      	bx	lr

0800a2d0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a2d0:	b480      	push	{r7}
 800a2d2:	b083      	sub	sp, #12
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
 800a2d8:	460b      	mov	r3, r1
 800a2da:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800a2dc:	78fb      	ldrb	r3, [r7, #3]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d103      	bne.n	800a2ea <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2280      	movs	r2, #128	; 0x80
 800a2e6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800a2ea:	2300      	movs	r3, #0
}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	370c      	adds	r7, #12
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	bc80      	pop	{r7}
 800a2f4:	4770      	bx	lr

0800a2f6 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a2f6:	b480      	push	{r7}
 800a2f8:	b083      	sub	sp, #12
 800a2fa:	af00      	add	r7, sp, #0
 800a2fc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a2fe:	2300      	movs	r3, #0
}
 800a300:	4618      	mov	r0, r3
 800a302:	370c      	adds	r7, #12
 800a304:	46bd      	mov	sp, r7
 800a306:	bc80      	pop	{r7}
 800a308:	4770      	bx	lr

0800a30a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800a30a:	b480      	push	{r7}
 800a30c:	b083      	sub	sp, #12
 800a30e:	af00      	add	r7, sp, #0
 800a310:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a312:	2300      	movs	r3, #0
}
 800a314:	4618      	mov	r0, r3
 800a316:	370c      	adds	r7, #12
 800a318:	46bd      	mov	sp, r7
 800a31a:	bc80      	pop	{r7}
 800a31c:	4770      	bx	lr

0800a31e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800a31e:	b480      	push	{r7}
 800a320:	b085      	sub	sp, #20
 800a322:	af00      	add	r7, sp, #0
 800a324:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a32c:	b29b      	uxth	r3, r3
 800a32e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a330:	68fb      	ldr	r3, [r7, #12]
}
 800a332:	4618      	mov	r0, r3
 800a334:	3714      	adds	r7, #20
 800a336:	46bd      	mov	sp, r7
 800a338:	bc80      	pop	{r7}
 800a33a:	4770      	bx	lr

0800a33c <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800a33c:	b480      	push	{r7}
 800a33e:	b083      	sub	sp, #12
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
 800a344:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800a346:	2300      	movs	r3, #0
}
 800a348:	4618      	mov	r0, r3
 800a34a:	370c      	adds	r7, #12
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bc80      	pop	{r7}
 800a350:	4770      	bx	lr

0800a352 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a352:	b480      	push	{r7}
 800a354:	b08d      	sub	sp, #52	; 0x34
 800a356:	af00      	add	r7, sp, #0
 800a358:	60f8      	str	r0, [r7, #12]
 800a35a:	60b9      	str	r1, [r7, #8]
 800a35c:	4611      	mov	r1, r2
 800a35e:	461a      	mov	r2, r3
 800a360:	460b      	mov	r3, r1
 800a362:	80fb      	strh	r3, [r7, #6]
 800a364:	4613      	mov	r3, r2
 800a366:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a368:	88bb      	ldrh	r3, [r7, #4]
 800a36a:	3301      	adds	r3, #1
 800a36c:	085b      	lsrs	r3, r3, #1
 800a36e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a374:	68bb      	ldr	r3, [r7, #8]
 800a376:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a378:	88fb      	ldrh	r3, [r7, #6]
 800a37a:	005a      	lsls	r2, r3, #1
 800a37c:	69fb      	ldr	r3, [r7, #28]
 800a37e:	4413      	add	r3, r2
 800a380:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a384:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800a386:	6a3b      	ldr	r3, [r7, #32]
 800a388:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a38a:	e01e      	b.n	800a3ca <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800a38c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a38e:	781b      	ldrb	r3, [r3, #0]
 800a390:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800a392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a394:	3301      	adds	r3, #1
 800a396:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800a398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a39a:	781b      	ldrb	r3, [r3, #0]
 800a39c:	b29b      	uxth	r3, r3
 800a39e:	021b      	lsls	r3, r3, #8
 800a3a0:	b29b      	uxth	r3, r3
 800a3a2:	461a      	mov	r2, r3
 800a3a4:	69bb      	ldr	r3, [r7, #24]
 800a3a6:	4313      	orrs	r3, r2
 800a3a8:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800a3aa:	697b      	ldr	r3, [r7, #20]
 800a3ac:	b29a      	uxth	r2, r3
 800a3ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3b0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a3b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3b4:	3302      	adds	r3, #2
 800a3b6:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800a3b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ba:	3302      	adds	r3, #2
 800a3bc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800a3be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c0:	3301      	adds	r3, #1
 800a3c2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800a3c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3c6:	3b01      	subs	r3, #1
 800a3c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a3ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d1dd      	bne.n	800a38c <USB_WritePMA+0x3a>
  }
}
 800a3d0:	bf00      	nop
 800a3d2:	bf00      	nop
 800a3d4:	3734      	adds	r7, #52	; 0x34
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	bc80      	pop	{r7}
 800a3da:	4770      	bx	lr

0800a3dc <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a3dc:	b480      	push	{r7}
 800a3de:	b08b      	sub	sp, #44	; 0x2c
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	60f8      	str	r0, [r7, #12]
 800a3e4:	60b9      	str	r1, [r7, #8]
 800a3e6:	4611      	mov	r1, r2
 800a3e8:	461a      	mov	r2, r3
 800a3ea:	460b      	mov	r3, r1
 800a3ec:	80fb      	strh	r3, [r7, #6]
 800a3ee:	4613      	mov	r3, r2
 800a3f0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a3f2:	88bb      	ldrh	r3, [r7, #4]
 800a3f4:	085b      	lsrs	r3, r3, #1
 800a3f6:	b29b      	uxth	r3, r3
 800a3f8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a3fe:	68bb      	ldr	r3, [r7, #8]
 800a400:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a402:	88fb      	ldrh	r3, [r7, #6]
 800a404:	005a      	lsls	r2, r3, #1
 800a406:	697b      	ldr	r3, [r7, #20]
 800a408:	4413      	add	r3, r2
 800a40a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a40e:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800a410:	69bb      	ldr	r3, [r7, #24]
 800a412:	627b      	str	r3, [r7, #36]	; 0x24
 800a414:	e01b      	b.n	800a44e <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800a416:	6a3b      	ldr	r3, [r7, #32]
 800a418:	881b      	ldrh	r3, [r3, #0]
 800a41a:	b29b      	uxth	r3, r3
 800a41c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a41e:	6a3b      	ldr	r3, [r7, #32]
 800a420:	3302      	adds	r3, #2
 800a422:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a424:	693b      	ldr	r3, [r7, #16]
 800a426:	b2da      	uxtb	r2, r3
 800a428:	69fb      	ldr	r3, [r7, #28]
 800a42a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a42c:	69fb      	ldr	r3, [r7, #28]
 800a42e:	3301      	adds	r3, #1
 800a430:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800a432:	693b      	ldr	r3, [r7, #16]
 800a434:	0a1b      	lsrs	r3, r3, #8
 800a436:	b2da      	uxtb	r2, r3
 800a438:	69fb      	ldr	r3, [r7, #28]
 800a43a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a43c:	69fb      	ldr	r3, [r7, #28]
 800a43e:	3301      	adds	r3, #1
 800a440:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800a442:	6a3b      	ldr	r3, [r7, #32]
 800a444:	3302      	adds	r3, #2
 800a446:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800a448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a44a:	3b01      	subs	r3, #1
 800a44c:	627b      	str	r3, [r7, #36]	; 0x24
 800a44e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a450:	2b00      	cmp	r3, #0
 800a452:	d1e0      	bne.n	800a416 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800a454:	88bb      	ldrh	r3, [r7, #4]
 800a456:	f003 0301 	and.w	r3, r3, #1
 800a45a:	b29b      	uxth	r3, r3
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d007      	beq.n	800a470 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800a460:	6a3b      	ldr	r3, [r7, #32]
 800a462:	881b      	ldrh	r3, [r3, #0]
 800a464:	b29b      	uxth	r3, r3
 800a466:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a468:	693b      	ldr	r3, [r7, #16]
 800a46a:	b2da      	uxtb	r2, r3
 800a46c:	69fb      	ldr	r3, [r7, #28]
 800a46e:	701a      	strb	r2, [r3, #0]
  }
}
 800a470:	bf00      	nop
 800a472:	372c      	adds	r7, #44	; 0x2c
 800a474:	46bd      	mov	sp, r7
 800a476:	bc80      	pop	{r7}
 800a478:	4770      	bx	lr

0800a47a <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a47a:	b580      	push	{r7, lr}
 800a47c:	b082      	sub	sp, #8
 800a47e:	af00      	add	r7, sp, #0
 800a480:	6078      	str	r0, [r7, #4]
 800a482:	460b      	mov	r3, r1
 800a484:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800a486:	2304      	movs	r3, #4
 800a488:	2203      	movs	r2, #3
 800a48a:	2181      	movs	r1, #129	; 0x81
 800a48c:	6878      	ldr	r0, [r7, #4]
 800a48e:	f001 fc84 	bl	800bd9a <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	2201      	movs	r2, #1
 800a496:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 800a498:	2010      	movs	r0, #16
 800a49a:	f001 fd93 	bl	800bfc4 <USBD_static_malloc>
 800a49e:	4602      	mov	r2, r0
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d101      	bne.n	800a4b4 <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 800a4b0:	2302      	movs	r3, #2
 800a4b2:	e005      	b.n	800a4c0 <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 800a4be:	2300      	movs	r3, #0
}
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	3708      	adds	r7, #8
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	bd80      	pop	{r7, pc}

0800a4c8 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b082      	sub	sp, #8
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
 800a4d0:	460b      	mov	r3, r1
 800a4d2:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 800a4d4:	2181      	movs	r1, #129	; 0x81
 800a4d6:	6878      	ldr	r0, [r7, #4]
 800a4d8:	f001 fc85 	bl	800bde6 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2200      	movs	r2, #0
 800a4e0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d009      	beq.n	800a500 <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	f001 fd72 	bl	800bfdc <USBD_static_free>
    pdev->pClassData = NULL;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 800a500:	2300      	movs	r3, #0
}
 800a502:	4618      	mov	r0, r3
 800a504:	3708      	adds	r7, #8
 800a506:	46bd      	mov	sp, r7
 800a508:	bd80      	pop	{r7, pc}
	...

0800a50c <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b088      	sub	sp, #32
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
 800a514:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a51c:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800a51e:	2300      	movs	r3, #0
 800a520:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 800a522:	2300      	movs	r3, #0
 800a524:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800a526:	2300      	movs	r3, #0
 800a528:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 800a52a:	2300      	movs	r3, #0
 800a52c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a52e:	683b      	ldr	r3, [r7, #0]
 800a530:	781b      	ldrb	r3, [r3, #0]
 800a532:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a536:	2b00      	cmp	r3, #0
 800a538:	d045      	beq.n	800a5c6 <USBD_HID_Setup+0xba>
 800a53a:	2b20      	cmp	r3, #32
 800a53c:	f040 80d3 	bne.w	800a6e6 <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	785b      	ldrb	r3, [r3, #1]
 800a544:	3b02      	subs	r3, #2
 800a546:	2b09      	cmp	r3, #9
 800a548:	d835      	bhi.n	800a5b6 <USBD_HID_Setup+0xaa>
 800a54a:	a201      	add	r2, pc, #4	; (adr r2, 800a550 <USBD_HID_Setup+0x44>)
 800a54c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a550:	0800a5a7 	.word	0x0800a5a7
 800a554:	0800a587 	.word	0x0800a587
 800a558:	0800a5b7 	.word	0x0800a5b7
 800a55c:	0800a5b7 	.word	0x0800a5b7
 800a560:	0800a5b7 	.word	0x0800a5b7
 800a564:	0800a5b7 	.word	0x0800a5b7
 800a568:	0800a5b7 	.word	0x0800a5b7
 800a56c:	0800a5b7 	.word	0x0800a5b7
 800a570:	0800a595 	.word	0x0800a595
 800a574:	0800a579 	.word	0x0800a579
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	885b      	ldrh	r3, [r3, #2]
 800a57c:	b2db      	uxtb	r3, r3
 800a57e:	461a      	mov	r2, r3
 800a580:	693b      	ldr	r3, [r7, #16]
 800a582:	601a      	str	r2, [r3, #0]
          break;
 800a584:	e01e      	b.n	800a5c4 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 800a586:	693b      	ldr	r3, [r7, #16]
 800a588:	2201      	movs	r2, #1
 800a58a:	4619      	mov	r1, r3
 800a58c:	6878      	ldr	r0, [r7, #4]
 800a58e:	f001 f944 	bl	800b81a <USBD_CtlSendData>
          break;
 800a592:	e017      	b.n	800a5c4 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800a594:	683b      	ldr	r3, [r7, #0]
 800a596:	885b      	ldrh	r3, [r3, #2]
 800a598:	0a1b      	lsrs	r3, r3, #8
 800a59a:	b29b      	uxth	r3, r3
 800a59c:	b2db      	uxtb	r3, r3
 800a59e:	461a      	mov	r2, r3
 800a5a0:	693b      	ldr	r3, [r7, #16]
 800a5a2:	605a      	str	r2, [r3, #4]
          break;
 800a5a4:	e00e      	b.n	800a5c4 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 800a5a6:	693b      	ldr	r3, [r7, #16]
 800a5a8:	3304      	adds	r3, #4
 800a5aa:	2201      	movs	r2, #1
 800a5ac:	4619      	mov	r1, r3
 800a5ae:	6878      	ldr	r0, [r7, #4]
 800a5b0:	f001 f933 	bl	800b81a <USBD_CtlSendData>
          break;
 800a5b4:	e006      	b.n	800a5c4 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 800a5b6:	6839      	ldr	r1, [r7, #0]
 800a5b8:	6878      	ldr	r0, [r7, #4]
 800a5ba:	f001 f8c4 	bl	800b746 <USBD_CtlError>
          ret = USBD_FAIL;
 800a5be:	2302      	movs	r3, #2
 800a5c0:	75fb      	strb	r3, [r7, #23]
          break;
 800a5c2:	bf00      	nop
      }
      break;
 800a5c4:	e096      	b.n	800a6f4 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	785b      	ldrb	r3, [r3, #1]
 800a5ca:	2b0b      	cmp	r3, #11
 800a5cc:	f200 8083 	bhi.w	800a6d6 <USBD_HID_Setup+0x1ca>
 800a5d0:	a201      	add	r2, pc, #4	; (adr r2, 800a5d8 <USBD_HID_Setup+0xcc>)
 800a5d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5d6:	bf00      	nop
 800a5d8:	0800a609 	.word	0x0800a609
 800a5dc:	0800a6d7 	.word	0x0800a6d7
 800a5e0:	0800a6d7 	.word	0x0800a6d7
 800a5e4:	0800a6d7 	.word	0x0800a6d7
 800a5e8:	0800a6d7 	.word	0x0800a6d7
 800a5ec:	0800a6d7 	.word	0x0800a6d7
 800a5f0:	0800a631 	.word	0x0800a631
 800a5f4:	0800a6d7 	.word	0x0800a6d7
 800a5f8:	0800a6d7 	.word	0x0800a6d7
 800a5fc:	0800a6d7 	.word	0x0800a6d7
 800a600:	0800a689 	.word	0x0800a689
 800a604:	0800a6b1 	.word	0x0800a6b1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a60e:	2b03      	cmp	r3, #3
 800a610:	d107      	bne.n	800a622 <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800a612:	f107 030e 	add.w	r3, r7, #14
 800a616:	2202      	movs	r2, #2
 800a618:	4619      	mov	r1, r3
 800a61a:	6878      	ldr	r0, [r7, #4]
 800a61c:	f001 f8fd 	bl	800b81a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a620:	e060      	b.n	800a6e4 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800a622:	6839      	ldr	r1, [r7, #0]
 800a624:	6878      	ldr	r0, [r7, #4]
 800a626:	f001 f88e 	bl	800b746 <USBD_CtlError>
            ret = USBD_FAIL;
 800a62a:	2302      	movs	r3, #2
 800a62c:	75fb      	strb	r3, [r7, #23]
          break;
 800a62e:	e059      	b.n	800a6e4 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	885b      	ldrh	r3, [r3, #2]
 800a634:	0a1b      	lsrs	r3, r3, #8
 800a636:	b29b      	uxth	r3, r3
 800a638:	2b22      	cmp	r3, #34	; 0x22
 800a63a:	d108      	bne.n	800a64e <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	88db      	ldrh	r3, [r3, #6]
 800a640:	2b4a      	cmp	r3, #74	; 0x4a
 800a642:	bf28      	it	cs
 800a644:	234a      	movcs	r3, #74	; 0x4a
 800a646:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 800a648:	4b2d      	ldr	r3, [pc, #180]	; (800a700 <USBD_HID_Setup+0x1f4>)
 800a64a:	61bb      	str	r3, [r7, #24]
 800a64c:	e015      	b.n	800a67a <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	885b      	ldrh	r3, [r3, #2]
 800a652:	0a1b      	lsrs	r3, r3, #8
 800a654:	b29b      	uxth	r3, r3
 800a656:	2b21      	cmp	r3, #33	; 0x21
 800a658:	d108      	bne.n	800a66c <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 800a65a:	4b2a      	ldr	r3, [pc, #168]	; (800a704 <USBD_HID_Setup+0x1f8>)
 800a65c:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	88db      	ldrh	r3, [r3, #6]
 800a662:	2b09      	cmp	r3, #9
 800a664:	bf28      	it	cs
 800a666:	2309      	movcs	r3, #9
 800a668:	83fb      	strh	r3, [r7, #30]
 800a66a:	e006      	b.n	800a67a <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 800a66c:	6839      	ldr	r1, [r7, #0]
 800a66e:	6878      	ldr	r0, [r7, #4]
 800a670:	f001 f869 	bl	800b746 <USBD_CtlError>
            ret = USBD_FAIL;
 800a674:	2302      	movs	r3, #2
 800a676:	75fb      	strb	r3, [r7, #23]
            break;
 800a678:	e034      	b.n	800a6e4 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 800a67a:	8bfb      	ldrh	r3, [r7, #30]
 800a67c:	461a      	mov	r2, r3
 800a67e:	69b9      	ldr	r1, [r7, #24]
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	f001 f8ca 	bl	800b81a <USBD_CtlSendData>
          break;
 800a686:	e02d      	b.n	800a6e4 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a68e:	2b03      	cmp	r3, #3
 800a690:	d107      	bne.n	800a6a2 <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 800a692:	693b      	ldr	r3, [r7, #16]
 800a694:	3308      	adds	r3, #8
 800a696:	2201      	movs	r2, #1
 800a698:	4619      	mov	r1, r3
 800a69a:	6878      	ldr	r0, [r7, #4]
 800a69c:	f001 f8bd 	bl	800b81a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a6a0:	e020      	b.n	800a6e4 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800a6a2:	6839      	ldr	r1, [r7, #0]
 800a6a4:	6878      	ldr	r0, [r7, #4]
 800a6a6:	f001 f84e 	bl	800b746 <USBD_CtlError>
            ret = USBD_FAIL;
 800a6aa:	2302      	movs	r3, #2
 800a6ac:	75fb      	strb	r3, [r7, #23]
          break;
 800a6ae:	e019      	b.n	800a6e4 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6b6:	2b03      	cmp	r3, #3
 800a6b8:	d106      	bne.n	800a6c8 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	885b      	ldrh	r3, [r3, #2]
 800a6be:	b2db      	uxtb	r3, r3
 800a6c0:	461a      	mov	r2, r3
 800a6c2:	693b      	ldr	r3, [r7, #16]
 800a6c4:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a6c6:	e00d      	b.n	800a6e4 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800a6c8:	6839      	ldr	r1, [r7, #0]
 800a6ca:	6878      	ldr	r0, [r7, #4]
 800a6cc:	f001 f83b 	bl	800b746 <USBD_CtlError>
            ret = USBD_FAIL;
 800a6d0:	2302      	movs	r3, #2
 800a6d2:	75fb      	strb	r3, [r7, #23]
          break;
 800a6d4:	e006      	b.n	800a6e4 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 800a6d6:	6839      	ldr	r1, [r7, #0]
 800a6d8:	6878      	ldr	r0, [r7, #4]
 800a6da:	f001 f834 	bl	800b746 <USBD_CtlError>
          ret = USBD_FAIL;
 800a6de:	2302      	movs	r3, #2
 800a6e0:	75fb      	strb	r3, [r7, #23]
          break;
 800a6e2:	bf00      	nop
      }
      break;
 800a6e4:	e006      	b.n	800a6f4 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 800a6e6:	6839      	ldr	r1, [r7, #0]
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f001 f82c 	bl	800b746 <USBD_CtlError>
      ret = USBD_FAIL;
 800a6ee:	2302      	movs	r3, #2
 800a6f0:	75fb      	strb	r3, [r7, #23]
      break;
 800a6f2:	bf00      	nop
  }

  return ret;
 800a6f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	3720      	adds	r7, #32
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bd80      	pop	{r7, pc}
 800a6fe:	bf00      	nop
 800a700:	20000164 	.word	0x20000164
 800a704:	2000014c 	.word	0x2000014c

0800a708 <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b086      	sub	sp, #24
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	60f8      	str	r0, [r7, #12]
 800a710:	60b9      	str	r1, [r7, #8]
 800a712:	4613      	mov	r3, r2
 800a714:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a71c:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a724:	2b03      	cmp	r3, #3
 800a726:	d10c      	bne.n	800a742 <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 800a728:	697b      	ldr	r3, [r7, #20]
 800a72a:	7b1b      	ldrb	r3, [r3, #12]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d108      	bne.n	800a742 <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 800a730:	697b      	ldr	r3, [r7, #20]
 800a732:	2201      	movs	r2, #1
 800a734:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 800a736:	88fb      	ldrh	r3, [r7, #6]
 800a738:	68ba      	ldr	r2, [r7, #8]
 800a73a:	2181      	movs	r1, #129	; 0x81
 800a73c:	68f8      	ldr	r0, [r7, #12]
 800a73e:	f001 fbfa 	bl	800bf36 <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 800a742:	2300      	movs	r3, #0
}
 800a744:	4618      	mov	r0, r3
 800a746:	3718      	adds	r7, #24
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd80      	pop	{r7, pc}

0800a74c <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 800a74c:	b480      	push	{r7}
 800a74e:	b083      	sub	sp, #12
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2222      	movs	r2, #34	; 0x22
 800a758:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 800a75a:	4b03      	ldr	r3, [pc, #12]	; (800a768 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 800a75c:	4618      	mov	r0, r3
 800a75e:	370c      	adds	r7, #12
 800a760:	46bd      	mov	sp, r7
 800a762:	bc80      	pop	{r7}
 800a764:	4770      	bx	lr
 800a766:	bf00      	nop
 800a768:	200000e0 	.word	0x200000e0

0800a76c <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 800a76c:	b480      	push	{r7}
 800a76e:	b083      	sub	sp, #12
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2222      	movs	r2, #34	; 0x22
 800a778:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 800a77a:	4b03      	ldr	r3, [pc, #12]	; (800a788 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 800a77c:	4618      	mov	r0, r3
 800a77e:	370c      	adds	r7, #12
 800a780:	46bd      	mov	sp, r7
 800a782:	bc80      	pop	{r7}
 800a784:	4770      	bx	lr
 800a786:	bf00      	nop
 800a788:	20000104 	.word	0x20000104

0800a78c <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a78c:	b480      	push	{r7}
 800a78e:	b083      	sub	sp, #12
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2222      	movs	r2, #34	; 0x22
 800a798:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 800a79a:	4b03      	ldr	r3, [pc, #12]	; (800a7a8 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	370c      	adds	r7, #12
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bc80      	pop	{r7}
 800a7a4:	4770      	bx	lr
 800a7a6:	bf00      	nop
 800a7a8:	20000128 	.word	0x20000128

0800a7ac <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	b083      	sub	sp, #12
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
 800a7b4:	460b      	mov	r3, r1
 800a7b6:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7be:	2200      	movs	r2, #0
 800a7c0:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 800a7c2:	2300      	movs	r3, #0
}
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	370c      	adds	r7, #12
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	bc80      	pop	{r7}
 800a7cc:	4770      	bx	lr
	...

0800a7d0 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800a7d0:	b480      	push	{r7}
 800a7d2:	b083      	sub	sp, #12
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	220a      	movs	r2, #10
 800a7dc:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 800a7de:	4b03      	ldr	r3, [pc, #12]	; (800a7ec <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	370c      	adds	r7, #12
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	bc80      	pop	{r7}
 800a7e8:	4770      	bx	lr
 800a7ea:	bf00      	nop
 800a7ec:	20000158 	.word	0x20000158

0800a7f0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b084      	sub	sp, #16
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	60f8      	str	r0, [r7, #12]
 800a7f8:	60b9      	str	r1, [r7, #8]
 800a7fa:	4613      	mov	r3, r2
 800a7fc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d101      	bne.n	800a808 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a804:	2302      	movs	r3, #2
 800a806:	e01a      	b.n	800a83e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d003      	beq.n	800a81a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	2200      	movs	r2, #0
 800a816:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a81a:	68bb      	ldr	r3, [r7, #8]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d003      	beq.n	800a828 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	68ba      	ldr	r2, [r7, #8]
 800a824:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	2201      	movs	r2, #1
 800a82c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	79fa      	ldrb	r2, [r7, #7]
 800a834:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800a836:	68f8      	ldr	r0, [r7, #12]
 800a838:	f001 fa4c 	bl	800bcd4 <USBD_LL_Init>

  return USBD_OK;
 800a83c:	2300      	movs	r3, #0
}
 800a83e:	4618      	mov	r0, r3
 800a840:	3710      	adds	r7, #16
 800a842:	46bd      	mov	sp, r7
 800a844:	bd80      	pop	{r7, pc}

0800a846 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a846:	b480      	push	{r7}
 800a848:	b085      	sub	sp, #20
 800a84a:	af00      	add	r7, sp, #0
 800a84c:	6078      	str	r0, [r7, #4]
 800a84e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800a850:	2300      	movs	r3, #0
 800a852:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d006      	beq.n	800a868 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	683a      	ldr	r2, [r7, #0]
 800a85e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800a862:	2300      	movs	r3, #0
 800a864:	73fb      	strb	r3, [r7, #15]
 800a866:	e001      	b.n	800a86c <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800a868:	2302      	movs	r3, #2
 800a86a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a86c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a86e:	4618      	mov	r0, r3
 800a870:	3714      	adds	r7, #20
 800a872:	46bd      	mov	sp, r7
 800a874:	bc80      	pop	{r7}
 800a876:	4770      	bx	lr

0800a878 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b082      	sub	sp, #8
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800a880:	6878      	ldr	r0, [r7, #4]
 800a882:	f001 fa6f 	bl	800bd64 <USBD_LL_Start>

  return USBD_OK;
 800a886:	2300      	movs	r3, #0
}
 800a888:	4618      	mov	r0, r3
 800a88a:	3708      	adds	r7, #8
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bd80      	pop	{r7, pc}

0800a890 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a890:	b480      	push	{r7}
 800a892:	b083      	sub	sp, #12
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a898:	2300      	movs	r3, #0
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	370c      	adds	r7, #12
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bc80      	pop	{r7}
 800a8a2:	4770      	bx	lr

0800a8a4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b084      	sub	sp, #16
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
 800a8ac:	460b      	mov	r3, r1
 800a8ae:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a8b0:	2302      	movs	r3, #2
 800a8b2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d00c      	beq.n	800a8d8 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	78fa      	ldrb	r2, [r7, #3]
 800a8c8:	4611      	mov	r1, r2
 800a8ca:	6878      	ldr	r0, [r7, #4]
 800a8cc:	4798      	blx	r3
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d101      	bne.n	800a8d8 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800a8d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	3710      	adds	r7, #16
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bd80      	pop	{r7, pc}

0800a8e2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a8e2:	b580      	push	{r7, lr}
 800a8e4:	b082      	sub	sp, #8
 800a8e6:	af00      	add	r7, sp, #0
 800a8e8:	6078      	str	r0, [r7, #4]
 800a8ea:	460b      	mov	r3, r1
 800a8ec:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8f4:	685b      	ldr	r3, [r3, #4]
 800a8f6:	78fa      	ldrb	r2, [r7, #3]
 800a8f8:	4611      	mov	r1, r2
 800a8fa:	6878      	ldr	r0, [r7, #4]
 800a8fc:	4798      	blx	r3

  return USBD_OK;
 800a8fe:	2300      	movs	r3, #0
}
 800a900:	4618      	mov	r0, r3
 800a902:	3708      	adds	r7, #8
 800a904:	46bd      	mov	sp, r7
 800a906:	bd80      	pop	{r7, pc}

0800a908 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b082      	sub	sp, #8
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
 800a910:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a918:	6839      	ldr	r1, [r7, #0]
 800a91a:	4618      	mov	r0, r3
 800a91c:	f000 fed7 	bl	800b6ce <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2201      	movs	r2, #1
 800a924:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a92e:	461a      	mov	r2, r3
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a93c:	f003 031f 	and.w	r3, r3, #31
 800a940:	2b02      	cmp	r3, #2
 800a942:	d016      	beq.n	800a972 <USBD_LL_SetupStage+0x6a>
 800a944:	2b02      	cmp	r3, #2
 800a946:	d81c      	bhi.n	800a982 <USBD_LL_SetupStage+0x7a>
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d002      	beq.n	800a952 <USBD_LL_SetupStage+0x4a>
 800a94c:	2b01      	cmp	r3, #1
 800a94e:	d008      	beq.n	800a962 <USBD_LL_SetupStage+0x5a>
 800a950:	e017      	b.n	800a982 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a958:	4619      	mov	r1, r3
 800a95a:	6878      	ldr	r0, [r7, #4]
 800a95c:	f000 f9ca 	bl	800acf4 <USBD_StdDevReq>
      break;
 800a960:	e01a      	b.n	800a998 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a968:	4619      	mov	r1, r3
 800a96a:	6878      	ldr	r0, [r7, #4]
 800a96c:	f000 fa2c 	bl	800adc8 <USBD_StdItfReq>
      break;
 800a970:	e012      	b.n	800a998 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a978:	4619      	mov	r1, r3
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f000 fa6c 	bl	800ae58 <USBD_StdEPReq>
      break;
 800a980:	e00a      	b.n	800a998 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a988:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a98c:	b2db      	uxtb	r3, r3
 800a98e:	4619      	mov	r1, r3
 800a990:	6878      	ldr	r0, [r7, #4]
 800a992:	f001 fa47 	bl	800be24 <USBD_LL_StallEP>
      break;
 800a996:	bf00      	nop
  }

  return USBD_OK;
 800a998:	2300      	movs	r3, #0
}
 800a99a:	4618      	mov	r0, r3
 800a99c:	3708      	adds	r7, #8
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	bd80      	pop	{r7, pc}

0800a9a2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a9a2:	b580      	push	{r7, lr}
 800a9a4:	b086      	sub	sp, #24
 800a9a6:	af00      	add	r7, sp, #0
 800a9a8:	60f8      	str	r0, [r7, #12]
 800a9aa:	460b      	mov	r3, r1
 800a9ac:	607a      	str	r2, [r7, #4]
 800a9ae:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a9b0:	7afb      	ldrb	r3, [r7, #11]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d14b      	bne.n	800aa4e <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a9bc:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a9c4:	2b03      	cmp	r3, #3
 800a9c6:	d134      	bne.n	800aa32 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800a9c8:	697b      	ldr	r3, [r7, #20]
 800a9ca:	68da      	ldr	r2, [r3, #12]
 800a9cc:	697b      	ldr	r3, [r7, #20]
 800a9ce:	691b      	ldr	r3, [r3, #16]
 800a9d0:	429a      	cmp	r2, r3
 800a9d2:	d919      	bls.n	800aa08 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800a9d4:	697b      	ldr	r3, [r7, #20]
 800a9d6:	68da      	ldr	r2, [r3, #12]
 800a9d8:	697b      	ldr	r3, [r7, #20]
 800a9da:	691b      	ldr	r3, [r3, #16]
 800a9dc:	1ad2      	subs	r2, r2, r3
 800a9de:	697b      	ldr	r3, [r7, #20]
 800a9e0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a9e2:	697b      	ldr	r3, [r7, #20]
 800a9e4:	68da      	ldr	r2, [r3, #12]
 800a9e6:	697b      	ldr	r3, [r7, #20]
 800a9e8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a9ea:	429a      	cmp	r2, r3
 800a9ec:	d203      	bcs.n	800a9f6 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a9ee:	697b      	ldr	r3, [r7, #20]
 800a9f0:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800a9f2:	b29b      	uxth	r3, r3
 800a9f4:	e002      	b.n	800a9fc <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a9f6:	697b      	ldr	r3, [r7, #20]
 800a9f8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a9fa:	b29b      	uxth	r3, r3
 800a9fc:	461a      	mov	r2, r3
 800a9fe:	6879      	ldr	r1, [r7, #4]
 800aa00:	68f8      	ldr	r0, [r7, #12]
 800aa02:	f000 ff38 	bl	800b876 <USBD_CtlContinueRx>
 800aa06:	e038      	b.n	800aa7a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa0e:	691b      	ldr	r3, [r3, #16]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d00a      	beq.n	800aa2a <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800aa1a:	2b03      	cmp	r3, #3
 800aa1c:	d105      	bne.n	800aa2a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa24:	691b      	ldr	r3, [r3, #16]
 800aa26:	68f8      	ldr	r0, [r7, #12]
 800aa28:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800aa2a:	68f8      	ldr	r0, [r7, #12]
 800aa2c:	f000 ff35 	bl	800b89a <USBD_CtlSendStatus>
 800aa30:	e023      	b.n	800aa7a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800aa38:	2b05      	cmp	r3, #5
 800aa3a:	d11e      	bne.n	800aa7a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	2200      	movs	r2, #0
 800aa40:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800aa44:	2100      	movs	r1, #0
 800aa46:	68f8      	ldr	r0, [r7, #12]
 800aa48:	f001 f9ec 	bl	800be24 <USBD_LL_StallEP>
 800aa4c:	e015      	b.n	800aa7a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa54:	699b      	ldr	r3, [r3, #24]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d00d      	beq.n	800aa76 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800aa60:	2b03      	cmp	r3, #3
 800aa62:	d108      	bne.n	800aa76 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa6a:	699b      	ldr	r3, [r3, #24]
 800aa6c:	7afa      	ldrb	r2, [r7, #11]
 800aa6e:	4611      	mov	r1, r2
 800aa70:	68f8      	ldr	r0, [r7, #12]
 800aa72:	4798      	blx	r3
 800aa74:	e001      	b.n	800aa7a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800aa76:	2302      	movs	r3, #2
 800aa78:	e000      	b.n	800aa7c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800aa7a:	2300      	movs	r3, #0
}
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	3718      	adds	r7, #24
 800aa80:	46bd      	mov	sp, r7
 800aa82:	bd80      	pop	{r7, pc}

0800aa84 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b086      	sub	sp, #24
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	60f8      	str	r0, [r7, #12]
 800aa8c:	460b      	mov	r3, r1
 800aa8e:	607a      	str	r2, [r7, #4]
 800aa90:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800aa92:	7afb      	ldrb	r3, [r7, #11]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d17f      	bne.n	800ab98 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	3314      	adds	r3, #20
 800aa9c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800aaa4:	2b02      	cmp	r3, #2
 800aaa6:	d15c      	bne.n	800ab62 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800aaa8:	697b      	ldr	r3, [r7, #20]
 800aaaa:	68da      	ldr	r2, [r3, #12]
 800aaac:	697b      	ldr	r3, [r7, #20]
 800aaae:	691b      	ldr	r3, [r3, #16]
 800aab0:	429a      	cmp	r2, r3
 800aab2:	d915      	bls.n	800aae0 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800aab4:	697b      	ldr	r3, [r7, #20]
 800aab6:	68da      	ldr	r2, [r3, #12]
 800aab8:	697b      	ldr	r3, [r7, #20]
 800aaba:	691b      	ldr	r3, [r3, #16]
 800aabc:	1ad2      	subs	r2, r2, r3
 800aabe:	697b      	ldr	r3, [r7, #20]
 800aac0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800aac2:	697b      	ldr	r3, [r7, #20]
 800aac4:	68db      	ldr	r3, [r3, #12]
 800aac6:	b29b      	uxth	r3, r3
 800aac8:	461a      	mov	r2, r3
 800aaca:	6879      	ldr	r1, [r7, #4]
 800aacc:	68f8      	ldr	r0, [r7, #12]
 800aace:	f000 fec0 	bl	800b852 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aad2:	2300      	movs	r3, #0
 800aad4:	2200      	movs	r2, #0
 800aad6:	2100      	movs	r1, #0
 800aad8:	68f8      	ldr	r0, [r7, #12]
 800aada:	f001 fa4f 	bl	800bf7c <USBD_LL_PrepareReceive>
 800aade:	e04e      	b.n	800ab7e <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800aae0:	697b      	ldr	r3, [r7, #20]
 800aae2:	689b      	ldr	r3, [r3, #8]
 800aae4:	697a      	ldr	r2, [r7, #20]
 800aae6:	6912      	ldr	r2, [r2, #16]
 800aae8:	fbb3 f1f2 	udiv	r1, r3, r2
 800aaec:	fb02 f201 	mul.w	r2, r2, r1
 800aaf0:	1a9b      	subs	r3, r3, r2
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d11c      	bne.n	800ab30 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800aaf6:	697b      	ldr	r3, [r7, #20]
 800aaf8:	689a      	ldr	r2, [r3, #8]
 800aafa:	697b      	ldr	r3, [r7, #20]
 800aafc:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800aafe:	429a      	cmp	r2, r3
 800ab00:	d316      	bcc.n	800ab30 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800ab02:	697b      	ldr	r3, [r7, #20]
 800ab04:	689a      	ldr	r2, [r3, #8]
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ab0c:	429a      	cmp	r2, r3
 800ab0e:	d20f      	bcs.n	800ab30 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ab10:	2200      	movs	r2, #0
 800ab12:	2100      	movs	r1, #0
 800ab14:	68f8      	ldr	r0, [r7, #12]
 800ab16:	f000 fe9c 	bl	800b852 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ab22:	2300      	movs	r3, #0
 800ab24:	2200      	movs	r2, #0
 800ab26:	2100      	movs	r1, #0
 800ab28:	68f8      	ldr	r0, [r7, #12]
 800ab2a:	f001 fa27 	bl	800bf7c <USBD_LL_PrepareReceive>
 800ab2e:	e026      	b.n	800ab7e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab36:	68db      	ldr	r3, [r3, #12]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d00a      	beq.n	800ab52 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800ab42:	2b03      	cmp	r3, #3
 800ab44:	d105      	bne.n	800ab52 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab4c:	68db      	ldr	r3, [r3, #12]
 800ab4e:	68f8      	ldr	r0, [r7, #12]
 800ab50:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800ab52:	2180      	movs	r1, #128	; 0x80
 800ab54:	68f8      	ldr	r0, [r7, #12]
 800ab56:	f001 f965 	bl	800be24 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800ab5a:	68f8      	ldr	r0, [r7, #12]
 800ab5c:	f000 feb0 	bl	800b8c0 <USBD_CtlReceiveStatus>
 800ab60:	e00d      	b.n	800ab7e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ab68:	2b04      	cmp	r3, #4
 800ab6a:	d004      	beq.n	800ab76 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d103      	bne.n	800ab7e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800ab76:	2180      	movs	r1, #128	; 0x80
 800ab78:	68f8      	ldr	r0, [r7, #12]
 800ab7a:	f001 f953 	bl	800be24 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ab84:	2b01      	cmp	r3, #1
 800ab86:	d11d      	bne.n	800abc4 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800ab88:	68f8      	ldr	r0, [r7, #12]
 800ab8a:	f7ff fe81 	bl	800a890 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	2200      	movs	r2, #0
 800ab92:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ab96:	e015      	b.n	800abc4 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab9e:	695b      	ldr	r3, [r3, #20]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d00d      	beq.n	800abc0 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800abaa:	2b03      	cmp	r3, #3
 800abac:	d108      	bne.n	800abc0 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abb4:	695b      	ldr	r3, [r3, #20]
 800abb6:	7afa      	ldrb	r2, [r7, #11]
 800abb8:	4611      	mov	r1, r2
 800abba:	68f8      	ldr	r0, [r7, #12]
 800abbc:	4798      	blx	r3
 800abbe:	e001      	b.n	800abc4 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800abc0:	2302      	movs	r3, #2
 800abc2:	e000      	b.n	800abc6 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800abc4:	2300      	movs	r3, #0
}
 800abc6:	4618      	mov	r0, r3
 800abc8:	3718      	adds	r7, #24
 800abca:	46bd      	mov	sp, r7
 800abcc:	bd80      	pop	{r7, pc}

0800abce <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800abce:	b580      	push	{r7, lr}
 800abd0:	b082      	sub	sp, #8
 800abd2:	af00      	add	r7, sp, #0
 800abd4:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800abd6:	2340      	movs	r3, #64	; 0x40
 800abd8:	2200      	movs	r2, #0
 800abda:	2100      	movs	r1, #0
 800abdc:	6878      	ldr	r0, [r7, #4]
 800abde:	f001 f8dc 	bl	800bd9a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	2201      	movs	r2, #1
 800abe6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	2240      	movs	r2, #64	; 0x40
 800abee:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800abf2:	2340      	movs	r3, #64	; 0x40
 800abf4:	2200      	movs	r2, #0
 800abf6:	2180      	movs	r1, #128	; 0x80
 800abf8:	6878      	ldr	r0, [r7, #4]
 800abfa:	f001 f8ce 	bl	800bd9a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2201      	movs	r2, #1
 800ac02:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2240      	movs	r2, #64	; 0x40
 800ac08:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	2201      	movs	r2, #1
 800ac0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	2200      	movs	r2, #0
 800ac16:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2200      	movs	r2, #0
 800ac24:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d009      	beq.n	800ac46 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac38:	685b      	ldr	r3, [r3, #4]
 800ac3a:	687a      	ldr	r2, [r7, #4]
 800ac3c:	6852      	ldr	r2, [r2, #4]
 800ac3e:	b2d2      	uxtb	r2, r2
 800ac40:	4611      	mov	r1, r2
 800ac42:	6878      	ldr	r0, [r7, #4]
 800ac44:	4798      	blx	r3
  }

  return USBD_OK;
 800ac46:	2300      	movs	r3, #0
}
 800ac48:	4618      	mov	r0, r3
 800ac4a:	3708      	adds	r7, #8
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	bd80      	pop	{r7, pc}

0800ac50 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ac50:	b480      	push	{r7}
 800ac52:	b083      	sub	sp, #12
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
 800ac58:	460b      	mov	r3, r1
 800ac5a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	78fa      	ldrb	r2, [r7, #3]
 800ac60:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ac62:	2300      	movs	r3, #0
}
 800ac64:	4618      	mov	r0, r3
 800ac66:	370c      	adds	r7, #12
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	bc80      	pop	{r7}
 800ac6c:	4770      	bx	lr

0800ac6e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ac6e:	b480      	push	{r7}
 800ac70:	b083      	sub	sp, #12
 800ac72:	af00      	add	r7, sp, #0
 800ac74:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	2204      	movs	r2, #4
 800ac86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ac8a:	2300      	movs	r3, #0
}
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	370c      	adds	r7, #12
 800ac90:	46bd      	mov	sp, r7
 800ac92:	bc80      	pop	{r7}
 800ac94:	4770      	bx	lr

0800ac96 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ac96:	b480      	push	{r7}
 800ac98:	b083      	sub	sp, #12
 800ac9a:	af00      	add	r7, sp, #0
 800ac9c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aca4:	2b04      	cmp	r3, #4
 800aca6:	d105      	bne.n	800acb4 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800acb4:	2300      	movs	r3, #0
}
 800acb6:	4618      	mov	r0, r3
 800acb8:	370c      	adds	r7, #12
 800acba:	46bd      	mov	sp, r7
 800acbc:	bc80      	pop	{r7}
 800acbe:	4770      	bx	lr

0800acc0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b082      	sub	sp, #8
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800acce:	2b03      	cmp	r3, #3
 800acd0:	d10b      	bne.n	800acea <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acd8:	69db      	ldr	r3, [r3, #28]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d005      	beq.n	800acea <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ace4:	69db      	ldr	r3, [r3, #28]
 800ace6:	6878      	ldr	r0, [r7, #4]
 800ace8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800acea:	2300      	movs	r3, #0
}
 800acec:	4618      	mov	r0, r3
 800acee:	3708      	adds	r7, #8
 800acf0:	46bd      	mov	sp, r7
 800acf2:	bd80      	pop	{r7, pc}

0800acf4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b084      	sub	sp, #16
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
 800acfc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800acfe:	2300      	movs	r3, #0
 800ad00:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	781b      	ldrb	r3, [r3, #0]
 800ad06:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ad0a:	2b40      	cmp	r3, #64	; 0x40
 800ad0c:	d005      	beq.n	800ad1a <USBD_StdDevReq+0x26>
 800ad0e:	2b40      	cmp	r3, #64	; 0x40
 800ad10:	d84f      	bhi.n	800adb2 <USBD_StdDevReq+0xbe>
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d009      	beq.n	800ad2a <USBD_StdDevReq+0x36>
 800ad16:	2b20      	cmp	r3, #32
 800ad18:	d14b      	bne.n	800adb2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad20:	689b      	ldr	r3, [r3, #8]
 800ad22:	6839      	ldr	r1, [r7, #0]
 800ad24:	6878      	ldr	r0, [r7, #4]
 800ad26:	4798      	blx	r3
      break;
 800ad28:	e048      	b.n	800adbc <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ad2a:	683b      	ldr	r3, [r7, #0]
 800ad2c:	785b      	ldrb	r3, [r3, #1]
 800ad2e:	2b09      	cmp	r3, #9
 800ad30:	d839      	bhi.n	800ada6 <USBD_StdDevReq+0xb2>
 800ad32:	a201      	add	r2, pc, #4	; (adr r2, 800ad38 <USBD_StdDevReq+0x44>)
 800ad34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad38:	0800ad89 	.word	0x0800ad89
 800ad3c:	0800ad9d 	.word	0x0800ad9d
 800ad40:	0800ada7 	.word	0x0800ada7
 800ad44:	0800ad93 	.word	0x0800ad93
 800ad48:	0800ada7 	.word	0x0800ada7
 800ad4c:	0800ad6b 	.word	0x0800ad6b
 800ad50:	0800ad61 	.word	0x0800ad61
 800ad54:	0800ada7 	.word	0x0800ada7
 800ad58:	0800ad7f 	.word	0x0800ad7f
 800ad5c:	0800ad75 	.word	0x0800ad75
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ad60:	6839      	ldr	r1, [r7, #0]
 800ad62:	6878      	ldr	r0, [r7, #4]
 800ad64:	f000 f9dc 	bl	800b120 <USBD_GetDescriptor>
          break;
 800ad68:	e022      	b.n	800adb0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ad6a:	6839      	ldr	r1, [r7, #0]
 800ad6c:	6878      	ldr	r0, [r7, #4]
 800ad6e:	f000 fb3f 	bl	800b3f0 <USBD_SetAddress>
          break;
 800ad72:	e01d      	b.n	800adb0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800ad74:	6839      	ldr	r1, [r7, #0]
 800ad76:	6878      	ldr	r0, [r7, #4]
 800ad78:	f000 fb7e 	bl	800b478 <USBD_SetConfig>
          break;
 800ad7c:	e018      	b.n	800adb0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ad7e:	6839      	ldr	r1, [r7, #0]
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	f000 fc07 	bl	800b594 <USBD_GetConfig>
          break;
 800ad86:	e013      	b.n	800adb0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ad88:	6839      	ldr	r1, [r7, #0]
 800ad8a:	6878      	ldr	r0, [r7, #4]
 800ad8c:	f000 fc37 	bl	800b5fe <USBD_GetStatus>
          break;
 800ad90:	e00e      	b.n	800adb0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ad92:	6839      	ldr	r1, [r7, #0]
 800ad94:	6878      	ldr	r0, [r7, #4]
 800ad96:	f000 fc65 	bl	800b664 <USBD_SetFeature>
          break;
 800ad9a:	e009      	b.n	800adb0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ad9c:	6839      	ldr	r1, [r7, #0]
 800ad9e:	6878      	ldr	r0, [r7, #4]
 800ada0:	f000 fc74 	bl	800b68c <USBD_ClrFeature>
          break;
 800ada4:	e004      	b.n	800adb0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800ada6:	6839      	ldr	r1, [r7, #0]
 800ada8:	6878      	ldr	r0, [r7, #4]
 800adaa:	f000 fccc 	bl	800b746 <USBD_CtlError>
          break;
 800adae:	bf00      	nop
      }
      break;
 800adb0:	e004      	b.n	800adbc <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800adb2:	6839      	ldr	r1, [r7, #0]
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	f000 fcc6 	bl	800b746 <USBD_CtlError>
      break;
 800adba:	bf00      	nop
  }

  return ret;
 800adbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800adbe:	4618      	mov	r0, r3
 800adc0:	3710      	adds	r7, #16
 800adc2:	46bd      	mov	sp, r7
 800adc4:	bd80      	pop	{r7, pc}
 800adc6:	bf00      	nop

0800adc8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b084      	sub	sp, #16
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
 800add0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800add2:	2300      	movs	r3, #0
 800add4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800add6:	683b      	ldr	r3, [r7, #0]
 800add8:	781b      	ldrb	r3, [r3, #0]
 800adda:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800adde:	2b40      	cmp	r3, #64	; 0x40
 800ade0:	d005      	beq.n	800adee <USBD_StdItfReq+0x26>
 800ade2:	2b40      	cmp	r3, #64	; 0x40
 800ade4:	d82e      	bhi.n	800ae44 <USBD_StdItfReq+0x7c>
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d001      	beq.n	800adee <USBD_StdItfReq+0x26>
 800adea:	2b20      	cmp	r3, #32
 800adec:	d12a      	bne.n	800ae44 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800adf4:	3b01      	subs	r3, #1
 800adf6:	2b02      	cmp	r3, #2
 800adf8:	d81d      	bhi.n	800ae36 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	889b      	ldrh	r3, [r3, #4]
 800adfe:	b2db      	uxtb	r3, r3
 800ae00:	2b01      	cmp	r3, #1
 800ae02:	d813      	bhi.n	800ae2c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae0a:	689b      	ldr	r3, [r3, #8]
 800ae0c:	6839      	ldr	r1, [r7, #0]
 800ae0e:	6878      	ldr	r0, [r7, #4]
 800ae10:	4798      	blx	r3
 800ae12:	4603      	mov	r3, r0
 800ae14:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ae16:	683b      	ldr	r3, [r7, #0]
 800ae18:	88db      	ldrh	r3, [r3, #6]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d110      	bne.n	800ae40 <USBD_StdItfReq+0x78>
 800ae1e:	7bfb      	ldrb	r3, [r7, #15]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d10d      	bne.n	800ae40 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800ae24:	6878      	ldr	r0, [r7, #4]
 800ae26:	f000 fd38 	bl	800b89a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ae2a:	e009      	b.n	800ae40 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800ae2c:	6839      	ldr	r1, [r7, #0]
 800ae2e:	6878      	ldr	r0, [r7, #4]
 800ae30:	f000 fc89 	bl	800b746 <USBD_CtlError>
          break;
 800ae34:	e004      	b.n	800ae40 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800ae36:	6839      	ldr	r1, [r7, #0]
 800ae38:	6878      	ldr	r0, [r7, #4]
 800ae3a:	f000 fc84 	bl	800b746 <USBD_CtlError>
          break;
 800ae3e:	e000      	b.n	800ae42 <USBD_StdItfReq+0x7a>
          break;
 800ae40:	bf00      	nop
      }
      break;
 800ae42:	e004      	b.n	800ae4e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800ae44:	6839      	ldr	r1, [r7, #0]
 800ae46:	6878      	ldr	r0, [r7, #4]
 800ae48:	f000 fc7d 	bl	800b746 <USBD_CtlError>
      break;
 800ae4c:	bf00      	nop
  }

  return USBD_OK;
 800ae4e:	2300      	movs	r3, #0
}
 800ae50:	4618      	mov	r0, r3
 800ae52:	3710      	adds	r7, #16
 800ae54:	46bd      	mov	sp, r7
 800ae56:	bd80      	pop	{r7, pc}

0800ae58 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b084      	sub	sp, #16
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
 800ae60:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800ae62:	2300      	movs	r3, #0
 800ae64:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800ae66:	683b      	ldr	r3, [r7, #0]
 800ae68:	889b      	ldrh	r3, [r3, #4]
 800ae6a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	781b      	ldrb	r3, [r3, #0]
 800ae70:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ae74:	2b40      	cmp	r3, #64	; 0x40
 800ae76:	d007      	beq.n	800ae88 <USBD_StdEPReq+0x30>
 800ae78:	2b40      	cmp	r3, #64	; 0x40
 800ae7a:	f200 8146 	bhi.w	800b10a <USBD_StdEPReq+0x2b2>
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d00a      	beq.n	800ae98 <USBD_StdEPReq+0x40>
 800ae82:	2b20      	cmp	r3, #32
 800ae84:	f040 8141 	bne.w	800b10a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae8e:	689b      	ldr	r3, [r3, #8]
 800ae90:	6839      	ldr	r1, [r7, #0]
 800ae92:	6878      	ldr	r0, [r7, #4]
 800ae94:	4798      	blx	r3
      break;
 800ae96:	e13d      	b.n	800b114 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800ae98:	683b      	ldr	r3, [r7, #0]
 800ae9a:	781b      	ldrb	r3, [r3, #0]
 800ae9c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aea0:	2b20      	cmp	r3, #32
 800aea2:	d10a      	bne.n	800aeba <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aeaa:	689b      	ldr	r3, [r3, #8]
 800aeac:	6839      	ldr	r1, [r7, #0]
 800aeae:	6878      	ldr	r0, [r7, #4]
 800aeb0:	4798      	blx	r3
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	73fb      	strb	r3, [r7, #15]

        return ret;
 800aeb6:	7bfb      	ldrb	r3, [r7, #15]
 800aeb8:	e12d      	b.n	800b116 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	785b      	ldrb	r3, [r3, #1]
 800aebe:	2b03      	cmp	r3, #3
 800aec0:	d007      	beq.n	800aed2 <USBD_StdEPReq+0x7a>
 800aec2:	2b03      	cmp	r3, #3
 800aec4:	f300 811b 	bgt.w	800b0fe <USBD_StdEPReq+0x2a6>
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d072      	beq.n	800afb2 <USBD_StdEPReq+0x15a>
 800aecc:	2b01      	cmp	r3, #1
 800aece:	d03a      	beq.n	800af46 <USBD_StdEPReq+0xee>
 800aed0:	e115      	b.n	800b0fe <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aed8:	2b02      	cmp	r3, #2
 800aeda:	d002      	beq.n	800aee2 <USBD_StdEPReq+0x8a>
 800aedc:	2b03      	cmp	r3, #3
 800aede:	d015      	beq.n	800af0c <USBD_StdEPReq+0xb4>
 800aee0:	e02b      	b.n	800af3a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aee2:	7bbb      	ldrb	r3, [r7, #14]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d00c      	beq.n	800af02 <USBD_StdEPReq+0xaa>
 800aee8:	7bbb      	ldrb	r3, [r7, #14]
 800aeea:	2b80      	cmp	r3, #128	; 0x80
 800aeec:	d009      	beq.n	800af02 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800aeee:	7bbb      	ldrb	r3, [r7, #14]
 800aef0:	4619      	mov	r1, r3
 800aef2:	6878      	ldr	r0, [r7, #4]
 800aef4:	f000 ff96 	bl	800be24 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800aef8:	2180      	movs	r1, #128	; 0x80
 800aefa:	6878      	ldr	r0, [r7, #4]
 800aefc:	f000 ff92 	bl	800be24 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800af00:	e020      	b.n	800af44 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800af02:	6839      	ldr	r1, [r7, #0]
 800af04:	6878      	ldr	r0, [r7, #4]
 800af06:	f000 fc1e 	bl	800b746 <USBD_CtlError>
              break;
 800af0a:	e01b      	b.n	800af44 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	885b      	ldrh	r3, [r3, #2]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d10e      	bne.n	800af32 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800af14:	7bbb      	ldrb	r3, [r7, #14]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d00b      	beq.n	800af32 <USBD_StdEPReq+0xda>
 800af1a:	7bbb      	ldrb	r3, [r7, #14]
 800af1c:	2b80      	cmp	r3, #128	; 0x80
 800af1e:	d008      	beq.n	800af32 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800af20:	683b      	ldr	r3, [r7, #0]
 800af22:	88db      	ldrh	r3, [r3, #6]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d104      	bne.n	800af32 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800af28:	7bbb      	ldrb	r3, [r7, #14]
 800af2a:	4619      	mov	r1, r3
 800af2c:	6878      	ldr	r0, [r7, #4]
 800af2e:	f000 ff79 	bl	800be24 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800af32:	6878      	ldr	r0, [r7, #4]
 800af34:	f000 fcb1 	bl	800b89a <USBD_CtlSendStatus>

              break;
 800af38:	e004      	b.n	800af44 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800af3a:	6839      	ldr	r1, [r7, #0]
 800af3c:	6878      	ldr	r0, [r7, #4]
 800af3e:	f000 fc02 	bl	800b746 <USBD_CtlError>
              break;
 800af42:	bf00      	nop
          }
          break;
 800af44:	e0e0      	b.n	800b108 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af4c:	2b02      	cmp	r3, #2
 800af4e:	d002      	beq.n	800af56 <USBD_StdEPReq+0xfe>
 800af50:	2b03      	cmp	r3, #3
 800af52:	d015      	beq.n	800af80 <USBD_StdEPReq+0x128>
 800af54:	e026      	b.n	800afa4 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800af56:	7bbb      	ldrb	r3, [r7, #14]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d00c      	beq.n	800af76 <USBD_StdEPReq+0x11e>
 800af5c:	7bbb      	ldrb	r3, [r7, #14]
 800af5e:	2b80      	cmp	r3, #128	; 0x80
 800af60:	d009      	beq.n	800af76 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800af62:	7bbb      	ldrb	r3, [r7, #14]
 800af64:	4619      	mov	r1, r3
 800af66:	6878      	ldr	r0, [r7, #4]
 800af68:	f000 ff5c 	bl	800be24 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800af6c:	2180      	movs	r1, #128	; 0x80
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	f000 ff58 	bl	800be24 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800af74:	e01c      	b.n	800afb0 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800af76:	6839      	ldr	r1, [r7, #0]
 800af78:	6878      	ldr	r0, [r7, #4]
 800af7a:	f000 fbe4 	bl	800b746 <USBD_CtlError>
              break;
 800af7e:	e017      	b.n	800afb0 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	885b      	ldrh	r3, [r3, #2]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d112      	bne.n	800afae <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800af88:	7bbb      	ldrb	r3, [r7, #14]
 800af8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d004      	beq.n	800af9c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800af92:	7bbb      	ldrb	r3, [r7, #14]
 800af94:	4619      	mov	r1, r3
 800af96:	6878      	ldr	r0, [r7, #4]
 800af98:	f000 ff63 	bl	800be62 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800af9c:	6878      	ldr	r0, [r7, #4]
 800af9e:	f000 fc7c 	bl	800b89a <USBD_CtlSendStatus>
              }
              break;
 800afa2:	e004      	b.n	800afae <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800afa4:	6839      	ldr	r1, [r7, #0]
 800afa6:	6878      	ldr	r0, [r7, #4]
 800afa8:	f000 fbcd 	bl	800b746 <USBD_CtlError>
              break;
 800afac:	e000      	b.n	800afb0 <USBD_StdEPReq+0x158>
              break;
 800afae:	bf00      	nop
          }
          break;
 800afb0:	e0aa      	b.n	800b108 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afb8:	2b02      	cmp	r3, #2
 800afba:	d002      	beq.n	800afc2 <USBD_StdEPReq+0x16a>
 800afbc:	2b03      	cmp	r3, #3
 800afbe:	d032      	beq.n	800b026 <USBD_StdEPReq+0x1ce>
 800afc0:	e097      	b.n	800b0f2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800afc2:	7bbb      	ldrb	r3, [r7, #14]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d007      	beq.n	800afd8 <USBD_StdEPReq+0x180>
 800afc8:	7bbb      	ldrb	r3, [r7, #14]
 800afca:	2b80      	cmp	r3, #128	; 0x80
 800afcc:	d004      	beq.n	800afd8 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800afce:	6839      	ldr	r1, [r7, #0]
 800afd0:	6878      	ldr	r0, [r7, #4]
 800afd2:	f000 fbb8 	bl	800b746 <USBD_CtlError>
                break;
 800afd6:	e091      	b.n	800b0fc <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800afd8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	da0b      	bge.n	800aff8 <USBD_StdEPReq+0x1a0>
 800afe0:	7bbb      	ldrb	r3, [r7, #14]
 800afe2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800afe6:	4613      	mov	r3, r2
 800afe8:	009b      	lsls	r3, r3, #2
 800afea:	4413      	add	r3, r2
 800afec:	009b      	lsls	r3, r3, #2
 800afee:	3310      	adds	r3, #16
 800aff0:	687a      	ldr	r2, [r7, #4]
 800aff2:	4413      	add	r3, r2
 800aff4:	3304      	adds	r3, #4
 800aff6:	e00b      	b.n	800b010 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aff8:	7bbb      	ldrb	r3, [r7, #14]
 800affa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800affe:	4613      	mov	r3, r2
 800b000:	009b      	lsls	r3, r3, #2
 800b002:	4413      	add	r3, r2
 800b004:	009b      	lsls	r3, r3, #2
 800b006:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b00a:	687a      	ldr	r2, [r7, #4]
 800b00c:	4413      	add	r3, r2
 800b00e:	3304      	adds	r3, #4
 800b010:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b012:	68bb      	ldr	r3, [r7, #8]
 800b014:	2200      	movs	r2, #0
 800b016:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b018:	68bb      	ldr	r3, [r7, #8]
 800b01a:	2202      	movs	r2, #2
 800b01c:	4619      	mov	r1, r3
 800b01e:	6878      	ldr	r0, [r7, #4]
 800b020:	f000 fbfb 	bl	800b81a <USBD_CtlSendData>
              break;
 800b024:	e06a      	b.n	800b0fc <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b026:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	da11      	bge.n	800b052 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b02e:	7bbb      	ldrb	r3, [r7, #14]
 800b030:	f003 020f 	and.w	r2, r3, #15
 800b034:	6879      	ldr	r1, [r7, #4]
 800b036:	4613      	mov	r3, r2
 800b038:	009b      	lsls	r3, r3, #2
 800b03a:	4413      	add	r3, r2
 800b03c:	009b      	lsls	r3, r3, #2
 800b03e:	440b      	add	r3, r1
 800b040:	3318      	adds	r3, #24
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d117      	bne.n	800b078 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800b048:	6839      	ldr	r1, [r7, #0]
 800b04a:	6878      	ldr	r0, [r7, #4]
 800b04c:	f000 fb7b 	bl	800b746 <USBD_CtlError>
                  break;
 800b050:	e054      	b.n	800b0fc <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b052:	7bbb      	ldrb	r3, [r7, #14]
 800b054:	f003 020f 	and.w	r2, r3, #15
 800b058:	6879      	ldr	r1, [r7, #4]
 800b05a:	4613      	mov	r3, r2
 800b05c:	009b      	lsls	r3, r3, #2
 800b05e:	4413      	add	r3, r2
 800b060:	009b      	lsls	r3, r3, #2
 800b062:	440b      	add	r3, r1
 800b064:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d104      	bne.n	800b078 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800b06e:	6839      	ldr	r1, [r7, #0]
 800b070:	6878      	ldr	r0, [r7, #4]
 800b072:	f000 fb68 	bl	800b746 <USBD_CtlError>
                  break;
 800b076:	e041      	b.n	800b0fc <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b078:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	da0b      	bge.n	800b098 <USBD_StdEPReq+0x240>
 800b080:	7bbb      	ldrb	r3, [r7, #14]
 800b082:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b086:	4613      	mov	r3, r2
 800b088:	009b      	lsls	r3, r3, #2
 800b08a:	4413      	add	r3, r2
 800b08c:	009b      	lsls	r3, r3, #2
 800b08e:	3310      	adds	r3, #16
 800b090:	687a      	ldr	r2, [r7, #4]
 800b092:	4413      	add	r3, r2
 800b094:	3304      	adds	r3, #4
 800b096:	e00b      	b.n	800b0b0 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b098:	7bbb      	ldrb	r3, [r7, #14]
 800b09a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b09e:	4613      	mov	r3, r2
 800b0a0:	009b      	lsls	r3, r3, #2
 800b0a2:	4413      	add	r3, r2
 800b0a4:	009b      	lsls	r3, r3, #2
 800b0a6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b0aa:	687a      	ldr	r2, [r7, #4]
 800b0ac:	4413      	add	r3, r2
 800b0ae:	3304      	adds	r3, #4
 800b0b0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b0b2:	7bbb      	ldrb	r3, [r7, #14]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d002      	beq.n	800b0be <USBD_StdEPReq+0x266>
 800b0b8:	7bbb      	ldrb	r3, [r7, #14]
 800b0ba:	2b80      	cmp	r3, #128	; 0x80
 800b0bc:	d103      	bne.n	800b0c6 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800b0be:	68bb      	ldr	r3, [r7, #8]
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	601a      	str	r2, [r3, #0]
 800b0c4:	e00e      	b.n	800b0e4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800b0c6:	7bbb      	ldrb	r3, [r7, #14]
 800b0c8:	4619      	mov	r1, r3
 800b0ca:	6878      	ldr	r0, [r7, #4]
 800b0cc:	f000 fee8 	bl	800bea0 <USBD_LL_IsStallEP>
 800b0d0:	4603      	mov	r3, r0
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d003      	beq.n	800b0de <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800b0d6:	68bb      	ldr	r3, [r7, #8]
 800b0d8:	2201      	movs	r2, #1
 800b0da:	601a      	str	r2, [r3, #0]
 800b0dc:	e002      	b.n	800b0e4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800b0de:	68bb      	ldr	r3, [r7, #8]
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b0e4:	68bb      	ldr	r3, [r7, #8]
 800b0e6:	2202      	movs	r2, #2
 800b0e8:	4619      	mov	r1, r3
 800b0ea:	6878      	ldr	r0, [r7, #4]
 800b0ec:	f000 fb95 	bl	800b81a <USBD_CtlSendData>
              break;
 800b0f0:	e004      	b.n	800b0fc <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800b0f2:	6839      	ldr	r1, [r7, #0]
 800b0f4:	6878      	ldr	r0, [r7, #4]
 800b0f6:	f000 fb26 	bl	800b746 <USBD_CtlError>
              break;
 800b0fa:	bf00      	nop
          }
          break;
 800b0fc:	e004      	b.n	800b108 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800b0fe:	6839      	ldr	r1, [r7, #0]
 800b100:	6878      	ldr	r0, [r7, #4]
 800b102:	f000 fb20 	bl	800b746 <USBD_CtlError>
          break;
 800b106:	bf00      	nop
      }
      break;
 800b108:	e004      	b.n	800b114 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800b10a:	6839      	ldr	r1, [r7, #0]
 800b10c:	6878      	ldr	r0, [r7, #4]
 800b10e:	f000 fb1a 	bl	800b746 <USBD_CtlError>
      break;
 800b112:	bf00      	nop
  }

  return ret;
 800b114:	7bfb      	ldrb	r3, [r7, #15]
}
 800b116:	4618      	mov	r0, r3
 800b118:	3710      	adds	r7, #16
 800b11a:	46bd      	mov	sp, r7
 800b11c:	bd80      	pop	{r7, pc}
	...

0800b120 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b084      	sub	sp, #16
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
 800b128:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b12a:	2300      	movs	r3, #0
 800b12c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b12e:	2300      	movs	r3, #0
 800b130:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b132:	2300      	movs	r3, #0
 800b134:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b136:	683b      	ldr	r3, [r7, #0]
 800b138:	885b      	ldrh	r3, [r3, #2]
 800b13a:	0a1b      	lsrs	r3, r3, #8
 800b13c:	b29b      	uxth	r3, r3
 800b13e:	3b01      	subs	r3, #1
 800b140:	2b06      	cmp	r3, #6
 800b142:	f200 8128 	bhi.w	800b396 <USBD_GetDescriptor+0x276>
 800b146:	a201      	add	r2, pc, #4	; (adr r2, 800b14c <USBD_GetDescriptor+0x2c>)
 800b148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b14c:	0800b169 	.word	0x0800b169
 800b150:	0800b181 	.word	0x0800b181
 800b154:	0800b1c1 	.word	0x0800b1c1
 800b158:	0800b397 	.word	0x0800b397
 800b15c:	0800b397 	.word	0x0800b397
 800b160:	0800b337 	.word	0x0800b337
 800b164:	0800b363 	.word	0x0800b363
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	687a      	ldr	r2, [r7, #4]
 800b172:	7c12      	ldrb	r2, [r2, #16]
 800b174:	f107 0108 	add.w	r1, r7, #8
 800b178:	4610      	mov	r0, r2
 800b17a:	4798      	blx	r3
 800b17c:	60f8      	str	r0, [r7, #12]
      break;
 800b17e:	e112      	b.n	800b3a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	7c1b      	ldrb	r3, [r3, #16]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d10d      	bne.n	800b1a4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b18e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b190:	f107 0208 	add.w	r2, r7, #8
 800b194:	4610      	mov	r0, r2
 800b196:	4798      	blx	r3
 800b198:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	3301      	adds	r3, #1
 800b19e:	2202      	movs	r2, #2
 800b1a0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b1a2:	e100      	b.n	800b3a6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1ac:	f107 0208 	add.w	r2, r7, #8
 800b1b0:	4610      	mov	r0, r2
 800b1b2:	4798      	blx	r3
 800b1b4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	3301      	adds	r3, #1
 800b1ba:	2202      	movs	r2, #2
 800b1bc:	701a      	strb	r2, [r3, #0]
      break;
 800b1be:	e0f2      	b.n	800b3a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b1c0:	683b      	ldr	r3, [r7, #0]
 800b1c2:	885b      	ldrh	r3, [r3, #2]
 800b1c4:	b2db      	uxtb	r3, r3
 800b1c6:	2b05      	cmp	r3, #5
 800b1c8:	f200 80ac 	bhi.w	800b324 <USBD_GetDescriptor+0x204>
 800b1cc:	a201      	add	r2, pc, #4	; (adr r2, 800b1d4 <USBD_GetDescriptor+0xb4>)
 800b1ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1d2:	bf00      	nop
 800b1d4:	0800b1ed 	.word	0x0800b1ed
 800b1d8:	0800b221 	.word	0x0800b221
 800b1dc:	0800b255 	.word	0x0800b255
 800b1e0:	0800b289 	.word	0x0800b289
 800b1e4:	0800b2bd 	.word	0x0800b2bd
 800b1e8:	0800b2f1 	.word	0x0800b2f1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b1f2:	685b      	ldr	r3, [r3, #4]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d00b      	beq.n	800b210 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b1fe:	685b      	ldr	r3, [r3, #4]
 800b200:	687a      	ldr	r2, [r7, #4]
 800b202:	7c12      	ldrb	r2, [r2, #16]
 800b204:	f107 0108 	add.w	r1, r7, #8
 800b208:	4610      	mov	r0, r2
 800b20a:	4798      	blx	r3
 800b20c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b20e:	e091      	b.n	800b334 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b210:	6839      	ldr	r1, [r7, #0]
 800b212:	6878      	ldr	r0, [r7, #4]
 800b214:	f000 fa97 	bl	800b746 <USBD_CtlError>
            err++;
 800b218:	7afb      	ldrb	r3, [r7, #11]
 800b21a:	3301      	adds	r3, #1
 800b21c:	72fb      	strb	r3, [r7, #11]
          break;
 800b21e:	e089      	b.n	800b334 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b226:	689b      	ldr	r3, [r3, #8]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d00b      	beq.n	800b244 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b232:	689b      	ldr	r3, [r3, #8]
 800b234:	687a      	ldr	r2, [r7, #4]
 800b236:	7c12      	ldrb	r2, [r2, #16]
 800b238:	f107 0108 	add.w	r1, r7, #8
 800b23c:	4610      	mov	r0, r2
 800b23e:	4798      	blx	r3
 800b240:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b242:	e077      	b.n	800b334 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b244:	6839      	ldr	r1, [r7, #0]
 800b246:	6878      	ldr	r0, [r7, #4]
 800b248:	f000 fa7d 	bl	800b746 <USBD_CtlError>
            err++;
 800b24c:	7afb      	ldrb	r3, [r7, #11]
 800b24e:	3301      	adds	r3, #1
 800b250:	72fb      	strb	r3, [r7, #11]
          break;
 800b252:	e06f      	b.n	800b334 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b25a:	68db      	ldr	r3, [r3, #12]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d00b      	beq.n	800b278 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b266:	68db      	ldr	r3, [r3, #12]
 800b268:	687a      	ldr	r2, [r7, #4]
 800b26a:	7c12      	ldrb	r2, [r2, #16]
 800b26c:	f107 0108 	add.w	r1, r7, #8
 800b270:	4610      	mov	r0, r2
 800b272:	4798      	blx	r3
 800b274:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b276:	e05d      	b.n	800b334 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b278:	6839      	ldr	r1, [r7, #0]
 800b27a:	6878      	ldr	r0, [r7, #4]
 800b27c:	f000 fa63 	bl	800b746 <USBD_CtlError>
            err++;
 800b280:	7afb      	ldrb	r3, [r7, #11]
 800b282:	3301      	adds	r3, #1
 800b284:	72fb      	strb	r3, [r7, #11]
          break;
 800b286:	e055      	b.n	800b334 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b28e:	691b      	ldr	r3, [r3, #16]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d00b      	beq.n	800b2ac <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b29a:	691b      	ldr	r3, [r3, #16]
 800b29c:	687a      	ldr	r2, [r7, #4]
 800b29e:	7c12      	ldrb	r2, [r2, #16]
 800b2a0:	f107 0108 	add.w	r1, r7, #8
 800b2a4:	4610      	mov	r0, r2
 800b2a6:	4798      	blx	r3
 800b2a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b2aa:	e043      	b.n	800b334 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b2ac:	6839      	ldr	r1, [r7, #0]
 800b2ae:	6878      	ldr	r0, [r7, #4]
 800b2b0:	f000 fa49 	bl	800b746 <USBD_CtlError>
            err++;
 800b2b4:	7afb      	ldrb	r3, [r7, #11]
 800b2b6:	3301      	adds	r3, #1
 800b2b8:	72fb      	strb	r3, [r7, #11]
          break;
 800b2ba:	e03b      	b.n	800b334 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b2c2:	695b      	ldr	r3, [r3, #20]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d00b      	beq.n	800b2e0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b2ce:	695b      	ldr	r3, [r3, #20]
 800b2d0:	687a      	ldr	r2, [r7, #4]
 800b2d2:	7c12      	ldrb	r2, [r2, #16]
 800b2d4:	f107 0108 	add.w	r1, r7, #8
 800b2d8:	4610      	mov	r0, r2
 800b2da:	4798      	blx	r3
 800b2dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b2de:	e029      	b.n	800b334 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b2e0:	6839      	ldr	r1, [r7, #0]
 800b2e2:	6878      	ldr	r0, [r7, #4]
 800b2e4:	f000 fa2f 	bl	800b746 <USBD_CtlError>
            err++;
 800b2e8:	7afb      	ldrb	r3, [r7, #11]
 800b2ea:	3301      	adds	r3, #1
 800b2ec:	72fb      	strb	r3, [r7, #11]
          break;
 800b2ee:	e021      	b.n	800b334 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b2f6:	699b      	ldr	r3, [r3, #24]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d00b      	beq.n	800b314 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b302:	699b      	ldr	r3, [r3, #24]
 800b304:	687a      	ldr	r2, [r7, #4]
 800b306:	7c12      	ldrb	r2, [r2, #16]
 800b308:	f107 0108 	add.w	r1, r7, #8
 800b30c:	4610      	mov	r0, r2
 800b30e:	4798      	blx	r3
 800b310:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b312:	e00f      	b.n	800b334 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b314:	6839      	ldr	r1, [r7, #0]
 800b316:	6878      	ldr	r0, [r7, #4]
 800b318:	f000 fa15 	bl	800b746 <USBD_CtlError>
            err++;
 800b31c:	7afb      	ldrb	r3, [r7, #11]
 800b31e:	3301      	adds	r3, #1
 800b320:	72fb      	strb	r3, [r7, #11]
          break;
 800b322:	e007      	b.n	800b334 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800b324:	6839      	ldr	r1, [r7, #0]
 800b326:	6878      	ldr	r0, [r7, #4]
 800b328:	f000 fa0d 	bl	800b746 <USBD_CtlError>
          err++;
 800b32c:	7afb      	ldrb	r3, [r7, #11]
 800b32e:	3301      	adds	r3, #1
 800b330:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800b332:	e038      	b.n	800b3a6 <USBD_GetDescriptor+0x286>
 800b334:	e037      	b.n	800b3a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	7c1b      	ldrb	r3, [r3, #16]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d109      	bne.n	800b352 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b346:	f107 0208 	add.w	r2, r7, #8
 800b34a:	4610      	mov	r0, r2
 800b34c:	4798      	blx	r3
 800b34e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b350:	e029      	b.n	800b3a6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b352:	6839      	ldr	r1, [r7, #0]
 800b354:	6878      	ldr	r0, [r7, #4]
 800b356:	f000 f9f6 	bl	800b746 <USBD_CtlError>
        err++;
 800b35a:	7afb      	ldrb	r3, [r7, #11]
 800b35c:	3301      	adds	r3, #1
 800b35e:	72fb      	strb	r3, [r7, #11]
      break;
 800b360:	e021      	b.n	800b3a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	7c1b      	ldrb	r3, [r3, #16]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d10d      	bne.n	800b386 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b372:	f107 0208 	add.w	r2, r7, #8
 800b376:	4610      	mov	r0, r2
 800b378:	4798      	blx	r3
 800b37a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	3301      	adds	r3, #1
 800b380:	2207      	movs	r2, #7
 800b382:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b384:	e00f      	b.n	800b3a6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b386:	6839      	ldr	r1, [r7, #0]
 800b388:	6878      	ldr	r0, [r7, #4]
 800b38a:	f000 f9dc 	bl	800b746 <USBD_CtlError>
        err++;
 800b38e:	7afb      	ldrb	r3, [r7, #11]
 800b390:	3301      	adds	r3, #1
 800b392:	72fb      	strb	r3, [r7, #11]
      break;
 800b394:	e007      	b.n	800b3a6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b396:	6839      	ldr	r1, [r7, #0]
 800b398:	6878      	ldr	r0, [r7, #4]
 800b39a:	f000 f9d4 	bl	800b746 <USBD_CtlError>
      err++;
 800b39e:	7afb      	ldrb	r3, [r7, #11]
 800b3a0:	3301      	adds	r3, #1
 800b3a2:	72fb      	strb	r3, [r7, #11]
      break;
 800b3a4:	bf00      	nop
  }

  if (err != 0U)
 800b3a6:	7afb      	ldrb	r3, [r7, #11]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d11c      	bne.n	800b3e6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800b3ac:	893b      	ldrh	r3, [r7, #8]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d011      	beq.n	800b3d6 <USBD_GetDescriptor+0x2b6>
 800b3b2:	683b      	ldr	r3, [r7, #0]
 800b3b4:	88db      	ldrh	r3, [r3, #6]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d00d      	beq.n	800b3d6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800b3ba:	683b      	ldr	r3, [r7, #0]
 800b3bc:	88da      	ldrh	r2, [r3, #6]
 800b3be:	893b      	ldrh	r3, [r7, #8]
 800b3c0:	4293      	cmp	r3, r2
 800b3c2:	bf28      	it	cs
 800b3c4:	4613      	movcs	r3, r2
 800b3c6:	b29b      	uxth	r3, r3
 800b3c8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b3ca:	893b      	ldrh	r3, [r7, #8]
 800b3cc:	461a      	mov	r2, r3
 800b3ce:	68f9      	ldr	r1, [r7, #12]
 800b3d0:	6878      	ldr	r0, [r7, #4]
 800b3d2:	f000 fa22 	bl	800b81a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	88db      	ldrh	r3, [r3, #6]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d104      	bne.n	800b3e8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800b3de:	6878      	ldr	r0, [r7, #4]
 800b3e0:	f000 fa5b 	bl	800b89a <USBD_CtlSendStatus>
 800b3e4:	e000      	b.n	800b3e8 <USBD_GetDescriptor+0x2c8>
    return;
 800b3e6:	bf00      	nop
    }
  }
}
 800b3e8:	3710      	adds	r7, #16
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	bd80      	pop	{r7, pc}
 800b3ee:	bf00      	nop

0800b3f0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b084      	sub	sp, #16
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
 800b3f8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b3fa:	683b      	ldr	r3, [r7, #0]
 800b3fc:	889b      	ldrh	r3, [r3, #4]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d130      	bne.n	800b464 <USBD_SetAddress+0x74>
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	88db      	ldrh	r3, [r3, #6]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d12c      	bne.n	800b464 <USBD_SetAddress+0x74>
 800b40a:	683b      	ldr	r3, [r7, #0]
 800b40c:	885b      	ldrh	r3, [r3, #2]
 800b40e:	2b7f      	cmp	r3, #127	; 0x7f
 800b410:	d828      	bhi.n	800b464 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b412:	683b      	ldr	r3, [r7, #0]
 800b414:	885b      	ldrh	r3, [r3, #2]
 800b416:	b2db      	uxtb	r3, r3
 800b418:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b41c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b424:	2b03      	cmp	r3, #3
 800b426:	d104      	bne.n	800b432 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800b428:	6839      	ldr	r1, [r7, #0]
 800b42a:	6878      	ldr	r0, [r7, #4]
 800b42c:	f000 f98b 	bl	800b746 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b430:	e01d      	b.n	800b46e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	7bfa      	ldrb	r2, [r7, #15]
 800b436:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b43a:	7bfb      	ldrb	r3, [r7, #15]
 800b43c:	4619      	mov	r1, r3
 800b43e:	6878      	ldr	r0, [r7, #4]
 800b440:	f000 fd5a 	bl	800bef8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800b444:	6878      	ldr	r0, [r7, #4]
 800b446:	f000 fa28 	bl	800b89a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b44a:	7bfb      	ldrb	r3, [r7, #15]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d004      	beq.n	800b45a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2202      	movs	r2, #2
 800b454:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b458:	e009      	b.n	800b46e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	2201      	movs	r2, #1
 800b45e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b462:	e004      	b.n	800b46e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b464:	6839      	ldr	r1, [r7, #0]
 800b466:	6878      	ldr	r0, [r7, #4]
 800b468:	f000 f96d 	bl	800b746 <USBD_CtlError>
  }
}
 800b46c:	bf00      	nop
 800b46e:	bf00      	nop
 800b470:	3710      	adds	r7, #16
 800b472:	46bd      	mov	sp, r7
 800b474:	bd80      	pop	{r7, pc}
	...

0800b478 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b478:	b580      	push	{r7, lr}
 800b47a:	b082      	sub	sp, #8
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
 800b480:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b482:	683b      	ldr	r3, [r7, #0]
 800b484:	885b      	ldrh	r3, [r3, #2]
 800b486:	b2da      	uxtb	r2, r3
 800b488:	4b41      	ldr	r3, [pc, #260]	; (800b590 <USBD_SetConfig+0x118>)
 800b48a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b48c:	4b40      	ldr	r3, [pc, #256]	; (800b590 <USBD_SetConfig+0x118>)
 800b48e:	781b      	ldrb	r3, [r3, #0]
 800b490:	2b01      	cmp	r3, #1
 800b492:	d904      	bls.n	800b49e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800b494:	6839      	ldr	r1, [r7, #0]
 800b496:	6878      	ldr	r0, [r7, #4]
 800b498:	f000 f955 	bl	800b746 <USBD_CtlError>
 800b49c:	e075      	b.n	800b58a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4a4:	2b02      	cmp	r3, #2
 800b4a6:	d002      	beq.n	800b4ae <USBD_SetConfig+0x36>
 800b4a8:	2b03      	cmp	r3, #3
 800b4aa:	d023      	beq.n	800b4f4 <USBD_SetConfig+0x7c>
 800b4ac:	e062      	b.n	800b574 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800b4ae:	4b38      	ldr	r3, [pc, #224]	; (800b590 <USBD_SetConfig+0x118>)
 800b4b0:	781b      	ldrb	r3, [r3, #0]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d01a      	beq.n	800b4ec <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800b4b6:	4b36      	ldr	r3, [pc, #216]	; (800b590 <USBD_SetConfig+0x118>)
 800b4b8:	781b      	ldrb	r3, [r3, #0]
 800b4ba:	461a      	mov	r2, r3
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	2203      	movs	r2, #3
 800b4c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b4c8:	4b31      	ldr	r3, [pc, #196]	; (800b590 <USBD_SetConfig+0x118>)
 800b4ca:	781b      	ldrb	r3, [r3, #0]
 800b4cc:	4619      	mov	r1, r3
 800b4ce:	6878      	ldr	r0, [r7, #4]
 800b4d0:	f7ff f9e8 	bl	800a8a4 <USBD_SetClassConfig>
 800b4d4:	4603      	mov	r3, r0
 800b4d6:	2b02      	cmp	r3, #2
 800b4d8:	d104      	bne.n	800b4e4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800b4da:	6839      	ldr	r1, [r7, #0]
 800b4dc:	6878      	ldr	r0, [r7, #4]
 800b4de:	f000 f932 	bl	800b746 <USBD_CtlError>
            return;
 800b4e2:	e052      	b.n	800b58a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800b4e4:	6878      	ldr	r0, [r7, #4]
 800b4e6:	f000 f9d8 	bl	800b89a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b4ea:	e04e      	b.n	800b58a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b4ec:	6878      	ldr	r0, [r7, #4]
 800b4ee:	f000 f9d4 	bl	800b89a <USBD_CtlSendStatus>
        break;
 800b4f2:	e04a      	b.n	800b58a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800b4f4:	4b26      	ldr	r3, [pc, #152]	; (800b590 <USBD_SetConfig+0x118>)
 800b4f6:	781b      	ldrb	r3, [r3, #0]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d112      	bne.n	800b522 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	2202      	movs	r2, #2
 800b500:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800b504:	4b22      	ldr	r3, [pc, #136]	; (800b590 <USBD_SetConfig+0x118>)
 800b506:	781b      	ldrb	r3, [r3, #0]
 800b508:	461a      	mov	r2, r3
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800b50e:	4b20      	ldr	r3, [pc, #128]	; (800b590 <USBD_SetConfig+0x118>)
 800b510:	781b      	ldrb	r3, [r3, #0]
 800b512:	4619      	mov	r1, r3
 800b514:	6878      	ldr	r0, [r7, #4]
 800b516:	f7ff f9e4 	bl	800a8e2 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800b51a:	6878      	ldr	r0, [r7, #4]
 800b51c:	f000 f9bd 	bl	800b89a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b520:	e033      	b.n	800b58a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800b522:	4b1b      	ldr	r3, [pc, #108]	; (800b590 <USBD_SetConfig+0x118>)
 800b524:	781b      	ldrb	r3, [r3, #0]
 800b526:	461a      	mov	r2, r3
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	685b      	ldr	r3, [r3, #4]
 800b52c:	429a      	cmp	r2, r3
 800b52e:	d01d      	beq.n	800b56c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	685b      	ldr	r3, [r3, #4]
 800b534:	b2db      	uxtb	r3, r3
 800b536:	4619      	mov	r1, r3
 800b538:	6878      	ldr	r0, [r7, #4]
 800b53a:	f7ff f9d2 	bl	800a8e2 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800b53e:	4b14      	ldr	r3, [pc, #80]	; (800b590 <USBD_SetConfig+0x118>)
 800b540:	781b      	ldrb	r3, [r3, #0]
 800b542:	461a      	mov	r2, r3
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b548:	4b11      	ldr	r3, [pc, #68]	; (800b590 <USBD_SetConfig+0x118>)
 800b54a:	781b      	ldrb	r3, [r3, #0]
 800b54c:	4619      	mov	r1, r3
 800b54e:	6878      	ldr	r0, [r7, #4]
 800b550:	f7ff f9a8 	bl	800a8a4 <USBD_SetClassConfig>
 800b554:	4603      	mov	r3, r0
 800b556:	2b02      	cmp	r3, #2
 800b558:	d104      	bne.n	800b564 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800b55a:	6839      	ldr	r1, [r7, #0]
 800b55c:	6878      	ldr	r0, [r7, #4]
 800b55e:	f000 f8f2 	bl	800b746 <USBD_CtlError>
            return;
 800b562:	e012      	b.n	800b58a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b564:	6878      	ldr	r0, [r7, #4]
 800b566:	f000 f998 	bl	800b89a <USBD_CtlSendStatus>
        break;
 800b56a:	e00e      	b.n	800b58a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b56c:	6878      	ldr	r0, [r7, #4]
 800b56e:	f000 f994 	bl	800b89a <USBD_CtlSendStatus>
        break;
 800b572:	e00a      	b.n	800b58a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800b574:	6839      	ldr	r1, [r7, #0]
 800b576:	6878      	ldr	r0, [r7, #4]
 800b578:	f000 f8e5 	bl	800b746 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800b57c:	4b04      	ldr	r3, [pc, #16]	; (800b590 <USBD_SetConfig+0x118>)
 800b57e:	781b      	ldrb	r3, [r3, #0]
 800b580:	4619      	mov	r1, r3
 800b582:	6878      	ldr	r0, [r7, #4]
 800b584:	f7ff f9ad 	bl	800a8e2 <USBD_ClrClassConfig>
        break;
 800b588:	bf00      	nop
    }
  }
}
 800b58a:	3708      	adds	r7, #8
 800b58c:	46bd      	mov	sp, r7
 800b58e:	bd80      	pop	{r7, pc}
 800b590:	2000042c 	.word	0x2000042c

0800b594 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b594:	b580      	push	{r7, lr}
 800b596:	b082      	sub	sp, #8
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
 800b59c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	88db      	ldrh	r3, [r3, #6]
 800b5a2:	2b01      	cmp	r3, #1
 800b5a4:	d004      	beq.n	800b5b0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b5a6:	6839      	ldr	r1, [r7, #0]
 800b5a8:	6878      	ldr	r0, [r7, #4]
 800b5aa:	f000 f8cc 	bl	800b746 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b5ae:	e022      	b.n	800b5f6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5b6:	2b02      	cmp	r3, #2
 800b5b8:	dc02      	bgt.n	800b5c0 <USBD_GetConfig+0x2c>
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	dc03      	bgt.n	800b5c6 <USBD_GetConfig+0x32>
 800b5be:	e015      	b.n	800b5ec <USBD_GetConfig+0x58>
 800b5c0:	2b03      	cmp	r3, #3
 800b5c2:	d00b      	beq.n	800b5dc <USBD_GetConfig+0x48>
 800b5c4:	e012      	b.n	800b5ec <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	3308      	adds	r3, #8
 800b5d0:	2201      	movs	r2, #1
 800b5d2:	4619      	mov	r1, r3
 800b5d4:	6878      	ldr	r0, [r7, #4]
 800b5d6:	f000 f920 	bl	800b81a <USBD_CtlSendData>
        break;
 800b5da:	e00c      	b.n	800b5f6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	3304      	adds	r3, #4
 800b5e0:	2201      	movs	r2, #1
 800b5e2:	4619      	mov	r1, r3
 800b5e4:	6878      	ldr	r0, [r7, #4]
 800b5e6:	f000 f918 	bl	800b81a <USBD_CtlSendData>
        break;
 800b5ea:	e004      	b.n	800b5f6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800b5ec:	6839      	ldr	r1, [r7, #0]
 800b5ee:	6878      	ldr	r0, [r7, #4]
 800b5f0:	f000 f8a9 	bl	800b746 <USBD_CtlError>
        break;
 800b5f4:	bf00      	nop
}
 800b5f6:	bf00      	nop
 800b5f8:	3708      	adds	r7, #8
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	bd80      	pop	{r7, pc}

0800b5fe <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5fe:	b580      	push	{r7, lr}
 800b600:	b082      	sub	sp, #8
 800b602:	af00      	add	r7, sp, #0
 800b604:	6078      	str	r0, [r7, #4]
 800b606:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b60e:	3b01      	subs	r3, #1
 800b610:	2b02      	cmp	r3, #2
 800b612:	d81e      	bhi.n	800b652 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b614:	683b      	ldr	r3, [r7, #0]
 800b616:	88db      	ldrh	r3, [r3, #6]
 800b618:	2b02      	cmp	r3, #2
 800b61a:	d004      	beq.n	800b626 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800b61c:	6839      	ldr	r1, [r7, #0]
 800b61e:	6878      	ldr	r0, [r7, #4]
 800b620:	f000 f891 	bl	800b746 <USBD_CtlError>
        break;
 800b624:	e01a      	b.n	800b65c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	2201      	movs	r2, #1
 800b62a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b632:	2b00      	cmp	r3, #0
 800b634:	d005      	beq.n	800b642 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	68db      	ldr	r3, [r3, #12]
 800b63a:	f043 0202 	orr.w	r2, r3, #2
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	330c      	adds	r3, #12
 800b646:	2202      	movs	r2, #2
 800b648:	4619      	mov	r1, r3
 800b64a:	6878      	ldr	r0, [r7, #4]
 800b64c:	f000 f8e5 	bl	800b81a <USBD_CtlSendData>
      break;
 800b650:	e004      	b.n	800b65c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800b652:	6839      	ldr	r1, [r7, #0]
 800b654:	6878      	ldr	r0, [r7, #4]
 800b656:	f000 f876 	bl	800b746 <USBD_CtlError>
      break;
 800b65a:	bf00      	nop
  }
}
 800b65c:	bf00      	nop
 800b65e:	3708      	adds	r7, #8
 800b660:	46bd      	mov	sp, r7
 800b662:	bd80      	pop	{r7, pc}

0800b664 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b082      	sub	sp, #8
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
 800b66c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b66e:	683b      	ldr	r3, [r7, #0]
 800b670:	885b      	ldrh	r3, [r3, #2]
 800b672:	2b01      	cmp	r3, #1
 800b674:	d106      	bne.n	800b684 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	2201      	movs	r2, #1
 800b67a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800b67e:	6878      	ldr	r0, [r7, #4]
 800b680:	f000 f90b 	bl	800b89a <USBD_CtlSendStatus>
  }
}
 800b684:	bf00      	nop
 800b686:	3708      	adds	r7, #8
 800b688:	46bd      	mov	sp, r7
 800b68a:	bd80      	pop	{r7, pc}

0800b68c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b082      	sub	sp, #8
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
 800b694:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b69c:	3b01      	subs	r3, #1
 800b69e:	2b02      	cmp	r3, #2
 800b6a0:	d80b      	bhi.n	800b6ba <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b6a2:	683b      	ldr	r3, [r7, #0]
 800b6a4:	885b      	ldrh	r3, [r3, #2]
 800b6a6:	2b01      	cmp	r3, #1
 800b6a8:	d10c      	bne.n	800b6c4 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800b6b2:	6878      	ldr	r0, [r7, #4]
 800b6b4:	f000 f8f1 	bl	800b89a <USBD_CtlSendStatus>
      }
      break;
 800b6b8:	e004      	b.n	800b6c4 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800b6ba:	6839      	ldr	r1, [r7, #0]
 800b6bc:	6878      	ldr	r0, [r7, #4]
 800b6be:	f000 f842 	bl	800b746 <USBD_CtlError>
      break;
 800b6c2:	e000      	b.n	800b6c6 <USBD_ClrFeature+0x3a>
      break;
 800b6c4:	bf00      	nop
  }
}
 800b6c6:	bf00      	nop
 800b6c8:	3708      	adds	r7, #8
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	bd80      	pop	{r7, pc}

0800b6ce <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b6ce:	b480      	push	{r7}
 800b6d0:	b083      	sub	sp, #12
 800b6d2:	af00      	add	r7, sp, #0
 800b6d4:	6078      	str	r0, [r7, #4]
 800b6d6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800b6d8:	683b      	ldr	r3, [r7, #0]
 800b6da:	781a      	ldrb	r2, [r3, #0]
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800b6e0:	683b      	ldr	r3, [r7, #0]
 800b6e2:	785a      	ldrb	r2, [r3, #1]
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800b6e8:	683b      	ldr	r3, [r7, #0]
 800b6ea:	3302      	adds	r3, #2
 800b6ec:	781b      	ldrb	r3, [r3, #0]
 800b6ee:	b29a      	uxth	r2, r3
 800b6f0:	683b      	ldr	r3, [r7, #0]
 800b6f2:	3303      	adds	r3, #3
 800b6f4:	781b      	ldrb	r3, [r3, #0]
 800b6f6:	b29b      	uxth	r3, r3
 800b6f8:	021b      	lsls	r3, r3, #8
 800b6fa:	b29b      	uxth	r3, r3
 800b6fc:	4413      	add	r3, r2
 800b6fe:	b29a      	uxth	r2, r3
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800b704:	683b      	ldr	r3, [r7, #0]
 800b706:	3304      	adds	r3, #4
 800b708:	781b      	ldrb	r3, [r3, #0]
 800b70a:	b29a      	uxth	r2, r3
 800b70c:	683b      	ldr	r3, [r7, #0]
 800b70e:	3305      	adds	r3, #5
 800b710:	781b      	ldrb	r3, [r3, #0]
 800b712:	b29b      	uxth	r3, r3
 800b714:	021b      	lsls	r3, r3, #8
 800b716:	b29b      	uxth	r3, r3
 800b718:	4413      	add	r3, r2
 800b71a:	b29a      	uxth	r2, r3
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800b720:	683b      	ldr	r3, [r7, #0]
 800b722:	3306      	adds	r3, #6
 800b724:	781b      	ldrb	r3, [r3, #0]
 800b726:	b29a      	uxth	r2, r3
 800b728:	683b      	ldr	r3, [r7, #0]
 800b72a:	3307      	adds	r3, #7
 800b72c:	781b      	ldrb	r3, [r3, #0]
 800b72e:	b29b      	uxth	r3, r3
 800b730:	021b      	lsls	r3, r3, #8
 800b732:	b29b      	uxth	r3, r3
 800b734:	4413      	add	r3, r2
 800b736:	b29a      	uxth	r2, r3
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	80da      	strh	r2, [r3, #6]

}
 800b73c:	bf00      	nop
 800b73e:	370c      	adds	r7, #12
 800b740:	46bd      	mov	sp, r7
 800b742:	bc80      	pop	{r7}
 800b744:	4770      	bx	lr

0800b746 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800b746:	b580      	push	{r7, lr}
 800b748:	b082      	sub	sp, #8
 800b74a:	af00      	add	r7, sp, #0
 800b74c:	6078      	str	r0, [r7, #4]
 800b74e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800b750:	2180      	movs	r1, #128	; 0x80
 800b752:	6878      	ldr	r0, [r7, #4]
 800b754:	f000 fb66 	bl	800be24 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800b758:	2100      	movs	r1, #0
 800b75a:	6878      	ldr	r0, [r7, #4]
 800b75c:	f000 fb62 	bl	800be24 <USBD_LL_StallEP>
}
 800b760:	bf00      	nop
 800b762:	3708      	adds	r7, #8
 800b764:	46bd      	mov	sp, r7
 800b766:	bd80      	pop	{r7, pc}

0800b768 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b086      	sub	sp, #24
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	60f8      	str	r0, [r7, #12]
 800b770:	60b9      	str	r1, [r7, #8]
 800b772:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b774:	2300      	movs	r3, #0
 800b776:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d032      	beq.n	800b7e4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800b77e:	68f8      	ldr	r0, [r7, #12]
 800b780:	f000 f834 	bl	800b7ec <USBD_GetLen>
 800b784:	4603      	mov	r3, r0
 800b786:	3301      	adds	r3, #1
 800b788:	b29b      	uxth	r3, r3
 800b78a:	005b      	lsls	r3, r3, #1
 800b78c:	b29a      	uxth	r2, r3
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800b792:	7dfb      	ldrb	r3, [r7, #23]
 800b794:	1c5a      	adds	r2, r3, #1
 800b796:	75fa      	strb	r2, [r7, #23]
 800b798:	461a      	mov	r2, r3
 800b79a:	68bb      	ldr	r3, [r7, #8]
 800b79c:	4413      	add	r3, r2
 800b79e:	687a      	ldr	r2, [r7, #4]
 800b7a0:	7812      	ldrb	r2, [r2, #0]
 800b7a2:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800b7a4:	7dfb      	ldrb	r3, [r7, #23]
 800b7a6:	1c5a      	adds	r2, r3, #1
 800b7a8:	75fa      	strb	r2, [r7, #23]
 800b7aa:	461a      	mov	r2, r3
 800b7ac:	68bb      	ldr	r3, [r7, #8]
 800b7ae:	4413      	add	r3, r2
 800b7b0:	2203      	movs	r2, #3
 800b7b2:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800b7b4:	e012      	b.n	800b7dc <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	1c5a      	adds	r2, r3, #1
 800b7ba:	60fa      	str	r2, [r7, #12]
 800b7bc:	7dfa      	ldrb	r2, [r7, #23]
 800b7be:	1c51      	adds	r1, r2, #1
 800b7c0:	75f9      	strb	r1, [r7, #23]
 800b7c2:	4611      	mov	r1, r2
 800b7c4:	68ba      	ldr	r2, [r7, #8]
 800b7c6:	440a      	add	r2, r1
 800b7c8:	781b      	ldrb	r3, [r3, #0]
 800b7ca:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800b7cc:	7dfb      	ldrb	r3, [r7, #23]
 800b7ce:	1c5a      	adds	r2, r3, #1
 800b7d0:	75fa      	strb	r2, [r7, #23]
 800b7d2:	461a      	mov	r2, r3
 800b7d4:	68bb      	ldr	r3, [r7, #8]
 800b7d6:	4413      	add	r3, r2
 800b7d8:	2200      	movs	r2, #0
 800b7da:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	781b      	ldrb	r3, [r3, #0]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d1e8      	bne.n	800b7b6 <USBD_GetString+0x4e>
    }
  }
}
 800b7e4:	bf00      	nop
 800b7e6:	3718      	adds	r7, #24
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	bd80      	pop	{r7, pc}

0800b7ec <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b7ec:	b480      	push	{r7}
 800b7ee:	b085      	sub	sp, #20
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800b7f8:	e005      	b.n	800b806 <USBD_GetLen+0x1a>
  {
    len++;
 800b7fa:	7bfb      	ldrb	r3, [r7, #15]
 800b7fc:	3301      	adds	r3, #1
 800b7fe:	73fb      	strb	r3, [r7, #15]
    buf++;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	3301      	adds	r3, #1
 800b804:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	781b      	ldrb	r3, [r3, #0]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d1f5      	bne.n	800b7fa <USBD_GetLen+0xe>
  }

  return len;
 800b80e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b810:	4618      	mov	r0, r3
 800b812:	3714      	adds	r7, #20
 800b814:	46bd      	mov	sp, r7
 800b816:	bc80      	pop	{r7}
 800b818:	4770      	bx	lr

0800b81a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800b81a:	b580      	push	{r7, lr}
 800b81c:	b084      	sub	sp, #16
 800b81e:	af00      	add	r7, sp, #0
 800b820:	60f8      	str	r0, [r7, #12]
 800b822:	60b9      	str	r1, [r7, #8]
 800b824:	4613      	mov	r3, r2
 800b826:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	2202      	movs	r2, #2
 800b82c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b830:	88fa      	ldrh	r2, [r7, #6]
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800b836:	88fa      	ldrh	r2, [r7, #6]
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b83c:	88fb      	ldrh	r3, [r7, #6]
 800b83e:	68ba      	ldr	r2, [r7, #8]
 800b840:	2100      	movs	r1, #0
 800b842:	68f8      	ldr	r0, [r7, #12]
 800b844:	f000 fb77 	bl	800bf36 <USBD_LL_Transmit>

  return USBD_OK;
 800b848:	2300      	movs	r3, #0
}
 800b84a:	4618      	mov	r0, r3
 800b84c:	3710      	adds	r7, #16
 800b84e:	46bd      	mov	sp, r7
 800b850:	bd80      	pop	{r7, pc}

0800b852 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800b852:	b580      	push	{r7, lr}
 800b854:	b084      	sub	sp, #16
 800b856:	af00      	add	r7, sp, #0
 800b858:	60f8      	str	r0, [r7, #12]
 800b85a:	60b9      	str	r1, [r7, #8]
 800b85c:	4613      	mov	r3, r2
 800b85e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b860:	88fb      	ldrh	r3, [r7, #6]
 800b862:	68ba      	ldr	r2, [r7, #8]
 800b864:	2100      	movs	r1, #0
 800b866:	68f8      	ldr	r0, [r7, #12]
 800b868:	f000 fb65 	bl	800bf36 <USBD_LL_Transmit>

  return USBD_OK;
 800b86c:	2300      	movs	r3, #0
}
 800b86e:	4618      	mov	r0, r3
 800b870:	3710      	adds	r7, #16
 800b872:	46bd      	mov	sp, r7
 800b874:	bd80      	pop	{r7, pc}

0800b876 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800b876:	b580      	push	{r7, lr}
 800b878:	b084      	sub	sp, #16
 800b87a:	af00      	add	r7, sp, #0
 800b87c:	60f8      	str	r0, [r7, #12]
 800b87e:	60b9      	str	r1, [r7, #8]
 800b880:	4613      	mov	r3, r2
 800b882:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b884:	88fb      	ldrh	r3, [r7, #6]
 800b886:	68ba      	ldr	r2, [r7, #8]
 800b888:	2100      	movs	r1, #0
 800b88a:	68f8      	ldr	r0, [r7, #12]
 800b88c:	f000 fb76 	bl	800bf7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b890:	2300      	movs	r3, #0
}
 800b892:	4618      	mov	r0, r3
 800b894:	3710      	adds	r7, #16
 800b896:	46bd      	mov	sp, r7
 800b898:	bd80      	pop	{r7, pc}

0800b89a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b89a:	b580      	push	{r7, lr}
 800b89c:	b082      	sub	sp, #8
 800b89e:	af00      	add	r7, sp, #0
 800b8a0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	2204      	movs	r2, #4
 800b8a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	2100      	movs	r1, #0
 800b8b0:	6878      	ldr	r0, [r7, #4]
 800b8b2:	f000 fb40 	bl	800bf36 <USBD_LL_Transmit>

  return USBD_OK;
 800b8b6:	2300      	movs	r3, #0
}
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	3708      	adds	r7, #8
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	bd80      	pop	{r7, pc}

0800b8c0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b082      	sub	sp, #8
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	2205      	movs	r2, #5
 800b8cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	2100      	movs	r1, #0
 800b8d6:	6878      	ldr	r0, [r7, #4]
 800b8d8:	f000 fb50 	bl	800bf7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b8dc:	2300      	movs	r3, #0
}
 800b8de:	4618      	mov	r0, r3
 800b8e0:	3708      	adds	r7, #8
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	bd80      	pop	{r7, pc}
	...

0800b8e8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b8ec:	2200      	movs	r2, #0
 800b8ee:	490e      	ldr	r1, [pc, #56]	; (800b928 <MX_USB_DEVICE_Init+0x40>)
 800b8f0:	480e      	ldr	r0, [pc, #56]	; (800b92c <MX_USB_DEVICE_Init+0x44>)
 800b8f2:	f7fe ff7d 	bl	800a7f0 <USBD_Init>
 800b8f6:	4603      	mov	r3, r0
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d001      	beq.n	800b900 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b8fc:	f7f6 fbb2 	bl	8002064 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800b900:	490b      	ldr	r1, [pc, #44]	; (800b930 <MX_USB_DEVICE_Init+0x48>)
 800b902:	480a      	ldr	r0, [pc, #40]	; (800b92c <MX_USB_DEVICE_Init+0x44>)
 800b904:	f7fe ff9f 	bl	800a846 <USBD_RegisterClass>
 800b908:	4603      	mov	r3, r0
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d001      	beq.n	800b912 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b90e:	f7f6 fba9 	bl	8002064 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b912:	4806      	ldr	r0, [pc, #24]	; (800b92c <MX_USB_DEVICE_Init+0x44>)
 800b914:	f7fe ffb0 	bl	800a878 <USBD_Start>
 800b918:	4603      	mov	r3, r0
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d001      	beq.n	800b922 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800b91e:	f7f6 fba1 	bl	8002064 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b922:	bf00      	nop
 800b924:	bd80      	pop	{r7, pc}
 800b926:	bf00      	nop
 800b928:	200001b0 	.word	0x200001b0
 800b92c:	200007f0 	.word	0x200007f0
 800b930:	200000a8 	.word	0x200000a8

0800b934 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b934:	b480      	push	{r7}
 800b936:	b083      	sub	sp, #12
 800b938:	af00      	add	r7, sp, #0
 800b93a:	4603      	mov	r3, r0
 800b93c:	6039      	str	r1, [r7, #0]
 800b93e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b940:	683b      	ldr	r3, [r7, #0]
 800b942:	2212      	movs	r2, #18
 800b944:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b946:	4b03      	ldr	r3, [pc, #12]	; (800b954 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b948:	4618      	mov	r0, r3
 800b94a:	370c      	adds	r7, #12
 800b94c:	46bd      	mov	sp, r7
 800b94e:	bc80      	pop	{r7}
 800b950:	4770      	bx	lr
 800b952:	bf00      	nop
 800b954:	200001cc 	.word	0x200001cc

0800b958 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b958:	b480      	push	{r7}
 800b95a:	b083      	sub	sp, #12
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	4603      	mov	r3, r0
 800b960:	6039      	str	r1, [r7, #0]
 800b962:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b964:	683b      	ldr	r3, [r7, #0]
 800b966:	2204      	movs	r2, #4
 800b968:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b96a:	4b03      	ldr	r3, [pc, #12]	; (800b978 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b96c:	4618      	mov	r0, r3
 800b96e:	370c      	adds	r7, #12
 800b970:	46bd      	mov	sp, r7
 800b972:	bc80      	pop	{r7}
 800b974:	4770      	bx	lr
 800b976:	bf00      	nop
 800b978:	200001e0 	.word	0x200001e0

0800b97c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b082      	sub	sp, #8
 800b980:	af00      	add	r7, sp, #0
 800b982:	4603      	mov	r3, r0
 800b984:	6039      	str	r1, [r7, #0]
 800b986:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b988:	79fb      	ldrb	r3, [r7, #7]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d105      	bne.n	800b99a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b98e:	683a      	ldr	r2, [r7, #0]
 800b990:	4907      	ldr	r1, [pc, #28]	; (800b9b0 <USBD_FS_ProductStrDescriptor+0x34>)
 800b992:	4808      	ldr	r0, [pc, #32]	; (800b9b4 <USBD_FS_ProductStrDescriptor+0x38>)
 800b994:	f7ff fee8 	bl	800b768 <USBD_GetString>
 800b998:	e004      	b.n	800b9a4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b99a:	683a      	ldr	r2, [r7, #0]
 800b99c:	4904      	ldr	r1, [pc, #16]	; (800b9b0 <USBD_FS_ProductStrDescriptor+0x34>)
 800b99e:	4805      	ldr	r0, [pc, #20]	; (800b9b4 <USBD_FS_ProductStrDescriptor+0x38>)
 800b9a0:	f7ff fee2 	bl	800b768 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b9a4:	4b02      	ldr	r3, [pc, #8]	; (800b9b0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	3708      	adds	r7, #8
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	bd80      	pop	{r7, pc}
 800b9ae:	bf00      	nop
 800b9b0:	20000ab4 	.word	0x20000ab4
 800b9b4:	0800f4d0 	.word	0x0800f4d0

0800b9b8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b082      	sub	sp, #8
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	4603      	mov	r3, r0
 800b9c0:	6039      	str	r1, [r7, #0]
 800b9c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b9c4:	683a      	ldr	r2, [r7, #0]
 800b9c6:	4904      	ldr	r1, [pc, #16]	; (800b9d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b9c8:	4804      	ldr	r0, [pc, #16]	; (800b9dc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b9ca:	f7ff fecd 	bl	800b768 <USBD_GetString>
  return USBD_StrDesc;
 800b9ce:	4b02      	ldr	r3, [pc, #8]	; (800b9d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	3708      	adds	r7, #8
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	bd80      	pop	{r7, pc}
 800b9d8:	20000ab4 	.word	0x20000ab4
 800b9dc:	0800f4e4 	.word	0x0800f4e4

0800b9e0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b082      	sub	sp, #8
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	6039      	str	r1, [r7, #0]
 800b9ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b9ec:	683b      	ldr	r3, [r7, #0]
 800b9ee:	221a      	movs	r2, #26
 800b9f0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b9f2:	f000 f843 	bl	800ba7c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b9f6:	4b02      	ldr	r3, [pc, #8]	; (800ba00 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	3708      	adds	r7, #8
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	bd80      	pop	{r7, pc}
 800ba00:	200001e4 	.word	0x200001e4

0800ba04 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b082      	sub	sp, #8
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	6039      	str	r1, [r7, #0]
 800ba0e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ba10:	79fb      	ldrb	r3, [r7, #7]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d105      	bne.n	800ba22 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ba16:	683a      	ldr	r2, [r7, #0]
 800ba18:	4907      	ldr	r1, [pc, #28]	; (800ba38 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ba1a:	4808      	ldr	r0, [pc, #32]	; (800ba3c <USBD_FS_ConfigStrDescriptor+0x38>)
 800ba1c:	f7ff fea4 	bl	800b768 <USBD_GetString>
 800ba20:	e004      	b.n	800ba2c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ba22:	683a      	ldr	r2, [r7, #0]
 800ba24:	4904      	ldr	r1, [pc, #16]	; (800ba38 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ba26:	4805      	ldr	r0, [pc, #20]	; (800ba3c <USBD_FS_ConfigStrDescriptor+0x38>)
 800ba28:	f7ff fe9e 	bl	800b768 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ba2c:	4b02      	ldr	r3, [pc, #8]	; (800ba38 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ba2e:	4618      	mov	r0, r3
 800ba30:	3708      	adds	r7, #8
 800ba32:	46bd      	mov	sp, r7
 800ba34:	bd80      	pop	{r7, pc}
 800ba36:	bf00      	nop
 800ba38:	20000ab4 	.word	0x20000ab4
 800ba3c:	0800f4f8 	.word	0x0800f4f8

0800ba40 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b082      	sub	sp, #8
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	4603      	mov	r3, r0
 800ba48:	6039      	str	r1, [r7, #0]
 800ba4a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ba4c:	79fb      	ldrb	r3, [r7, #7]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d105      	bne.n	800ba5e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ba52:	683a      	ldr	r2, [r7, #0]
 800ba54:	4907      	ldr	r1, [pc, #28]	; (800ba74 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ba56:	4808      	ldr	r0, [pc, #32]	; (800ba78 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ba58:	f7ff fe86 	bl	800b768 <USBD_GetString>
 800ba5c:	e004      	b.n	800ba68 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ba5e:	683a      	ldr	r2, [r7, #0]
 800ba60:	4904      	ldr	r1, [pc, #16]	; (800ba74 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ba62:	4805      	ldr	r0, [pc, #20]	; (800ba78 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ba64:	f7ff fe80 	bl	800b768 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ba68:	4b02      	ldr	r3, [pc, #8]	; (800ba74 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	3708      	adds	r7, #8
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	bd80      	pop	{r7, pc}
 800ba72:	bf00      	nop
 800ba74:	20000ab4 	.word	0x20000ab4
 800ba78:	0800f504 	.word	0x0800f504

0800ba7c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b084      	sub	sp, #16
 800ba80:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ba82:	4b0f      	ldr	r3, [pc, #60]	; (800bac0 <Get_SerialNum+0x44>)
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ba88:	4b0e      	ldr	r3, [pc, #56]	; (800bac4 <Get_SerialNum+0x48>)
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ba8e:	4b0e      	ldr	r3, [pc, #56]	; (800bac8 <Get_SerialNum+0x4c>)
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ba94:	68fa      	ldr	r2, [r7, #12]
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	4413      	add	r3, r2
 800ba9a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d009      	beq.n	800bab6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800baa2:	2208      	movs	r2, #8
 800baa4:	4909      	ldr	r1, [pc, #36]	; (800bacc <Get_SerialNum+0x50>)
 800baa6:	68f8      	ldr	r0, [r7, #12]
 800baa8:	f000 f814 	bl	800bad4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800baac:	2204      	movs	r2, #4
 800baae:	4908      	ldr	r1, [pc, #32]	; (800bad0 <Get_SerialNum+0x54>)
 800bab0:	68b8      	ldr	r0, [r7, #8]
 800bab2:	f000 f80f 	bl	800bad4 <IntToUnicode>
  }
}
 800bab6:	bf00      	nop
 800bab8:	3710      	adds	r7, #16
 800baba:	46bd      	mov	sp, r7
 800babc:	bd80      	pop	{r7, pc}
 800babe:	bf00      	nop
 800bac0:	1ffff7e8 	.word	0x1ffff7e8
 800bac4:	1ffff7ec 	.word	0x1ffff7ec
 800bac8:	1ffff7f0 	.word	0x1ffff7f0
 800bacc:	200001e6 	.word	0x200001e6
 800bad0:	200001f6 	.word	0x200001f6

0800bad4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bad4:	b480      	push	{r7}
 800bad6:	b087      	sub	sp, #28
 800bad8:	af00      	add	r7, sp, #0
 800bada:	60f8      	str	r0, [r7, #12]
 800badc:	60b9      	str	r1, [r7, #8]
 800bade:	4613      	mov	r3, r2
 800bae0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bae2:	2300      	movs	r3, #0
 800bae4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bae6:	2300      	movs	r3, #0
 800bae8:	75fb      	strb	r3, [r7, #23]
 800baea:	e027      	b.n	800bb3c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	0f1b      	lsrs	r3, r3, #28
 800baf0:	2b09      	cmp	r3, #9
 800baf2:	d80b      	bhi.n	800bb0c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	0f1b      	lsrs	r3, r3, #28
 800baf8:	b2da      	uxtb	r2, r3
 800bafa:	7dfb      	ldrb	r3, [r7, #23]
 800bafc:	005b      	lsls	r3, r3, #1
 800bafe:	4619      	mov	r1, r3
 800bb00:	68bb      	ldr	r3, [r7, #8]
 800bb02:	440b      	add	r3, r1
 800bb04:	3230      	adds	r2, #48	; 0x30
 800bb06:	b2d2      	uxtb	r2, r2
 800bb08:	701a      	strb	r2, [r3, #0]
 800bb0a:	e00a      	b.n	800bb22 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	0f1b      	lsrs	r3, r3, #28
 800bb10:	b2da      	uxtb	r2, r3
 800bb12:	7dfb      	ldrb	r3, [r7, #23]
 800bb14:	005b      	lsls	r3, r3, #1
 800bb16:	4619      	mov	r1, r3
 800bb18:	68bb      	ldr	r3, [r7, #8]
 800bb1a:	440b      	add	r3, r1
 800bb1c:	3237      	adds	r2, #55	; 0x37
 800bb1e:	b2d2      	uxtb	r2, r2
 800bb20:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	011b      	lsls	r3, r3, #4
 800bb26:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bb28:	7dfb      	ldrb	r3, [r7, #23]
 800bb2a:	005b      	lsls	r3, r3, #1
 800bb2c:	3301      	adds	r3, #1
 800bb2e:	68ba      	ldr	r2, [r7, #8]
 800bb30:	4413      	add	r3, r2
 800bb32:	2200      	movs	r2, #0
 800bb34:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bb36:	7dfb      	ldrb	r3, [r7, #23]
 800bb38:	3301      	adds	r3, #1
 800bb3a:	75fb      	strb	r3, [r7, #23]
 800bb3c:	7dfa      	ldrb	r2, [r7, #23]
 800bb3e:	79fb      	ldrb	r3, [r7, #7]
 800bb40:	429a      	cmp	r2, r3
 800bb42:	d3d3      	bcc.n	800baec <IntToUnicode+0x18>
  }
}
 800bb44:	bf00      	nop
 800bb46:	bf00      	nop
 800bb48:	371c      	adds	r7, #28
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	bc80      	pop	{r7}
 800bb4e:	4770      	bx	lr

0800bb50 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b084      	sub	sp, #16
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	4a0d      	ldr	r2, [pc, #52]	; (800bb94 <HAL_PCD_MspInit+0x44>)
 800bb5e:	4293      	cmp	r3, r2
 800bb60:	d113      	bne.n	800bb8a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800bb62:	4b0d      	ldr	r3, [pc, #52]	; (800bb98 <HAL_PCD_MspInit+0x48>)
 800bb64:	69db      	ldr	r3, [r3, #28]
 800bb66:	4a0c      	ldr	r2, [pc, #48]	; (800bb98 <HAL_PCD_MspInit+0x48>)
 800bb68:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bb6c:	61d3      	str	r3, [r2, #28]
 800bb6e:	4b0a      	ldr	r3, [pc, #40]	; (800bb98 <HAL_PCD_MspInit+0x48>)
 800bb70:	69db      	ldr	r3, [r3, #28]
 800bb72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bb76:	60fb      	str	r3, [r7, #12]
 800bb78:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	2100      	movs	r1, #0
 800bb7e:	2014      	movs	r0, #20
 800bb80:	f7f7 fb83 	bl	800328a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800bb84:	2014      	movs	r0, #20
 800bb86:	f7f7 fb9c 	bl	80032c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800bb8a:	bf00      	nop
 800bb8c:	3710      	adds	r7, #16
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	bd80      	pop	{r7, pc}
 800bb92:	bf00      	nop
 800bb94:	40005c00 	.word	0x40005c00
 800bb98:	40021000 	.word	0x40021000

0800bb9c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b082      	sub	sp, #8
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800bbb0:	4619      	mov	r1, r3
 800bbb2:	4610      	mov	r0, r2
 800bbb4:	f7fe fea8 	bl	800a908 <USBD_LL_SetupStage>
}
 800bbb8:	bf00      	nop
 800bbba:	3708      	adds	r7, #8
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	bd80      	pop	{r7, pc}

0800bbc0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b082      	sub	sp, #8
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
 800bbc8:	460b      	mov	r3, r1
 800bbca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800bbd2:	78fa      	ldrb	r2, [r7, #3]
 800bbd4:	6879      	ldr	r1, [r7, #4]
 800bbd6:	4613      	mov	r3, r2
 800bbd8:	009b      	lsls	r3, r3, #2
 800bbda:	4413      	add	r3, r2
 800bbdc:	00db      	lsls	r3, r3, #3
 800bbde:	440b      	add	r3, r1
 800bbe0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800bbe4:	681a      	ldr	r2, [r3, #0]
 800bbe6:	78fb      	ldrb	r3, [r7, #3]
 800bbe8:	4619      	mov	r1, r3
 800bbea:	f7fe feda 	bl	800a9a2 <USBD_LL_DataOutStage>
}
 800bbee:	bf00      	nop
 800bbf0:	3708      	adds	r7, #8
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	bd80      	pop	{r7, pc}

0800bbf6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbf6:	b580      	push	{r7, lr}
 800bbf8:	b082      	sub	sp, #8
 800bbfa:	af00      	add	r7, sp, #0
 800bbfc:	6078      	str	r0, [r7, #4]
 800bbfe:	460b      	mov	r3, r1
 800bc00:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800bc08:	78fa      	ldrb	r2, [r7, #3]
 800bc0a:	6879      	ldr	r1, [r7, #4]
 800bc0c:	4613      	mov	r3, r2
 800bc0e:	009b      	lsls	r3, r3, #2
 800bc10:	4413      	add	r3, r2
 800bc12:	00db      	lsls	r3, r3, #3
 800bc14:	440b      	add	r3, r1
 800bc16:	333c      	adds	r3, #60	; 0x3c
 800bc18:	681a      	ldr	r2, [r3, #0]
 800bc1a:	78fb      	ldrb	r3, [r7, #3]
 800bc1c:	4619      	mov	r1, r3
 800bc1e:	f7fe ff31 	bl	800aa84 <USBD_LL_DataInStage>
}
 800bc22:	bf00      	nop
 800bc24:	3708      	adds	r7, #8
 800bc26:	46bd      	mov	sp, r7
 800bc28:	bd80      	pop	{r7, pc}

0800bc2a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc2a:	b580      	push	{r7, lr}
 800bc2c:	b082      	sub	sp, #8
 800bc2e:	af00      	add	r7, sp, #0
 800bc30:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800bc38:	4618      	mov	r0, r3
 800bc3a:	f7ff f841 	bl	800acc0 <USBD_LL_SOF>
}
 800bc3e:	bf00      	nop
 800bc40:	3708      	adds	r7, #8
 800bc42:	46bd      	mov	sp, r7
 800bc44:	bd80      	pop	{r7, pc}

0800bc46 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc46:	b580      	push	{r7, lr}
 800bc48:	b084      	sub	sp, #16
 800bc4a:	af00      	add	r7, sp, #0
 800bc4c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bc4e:	2301      	movs	r3, #1
 800bc50:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	689b      	ldr	r3, [r3, #8]
 800bc56:	2b02      	cmp	r3, #2
 800bc58:	d001      	beq.n	800bc5e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800bc5a:	f7f6 fa03 	bl	8002064 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800bc64:	7bfa      	ldrb	r2, [r7, #15]
 800bc66:	4611      	mov	r1, r2
 800bc68:	4618      	mov	r0, r3
 800bc6a:	f7fe fff1 	bl	800ac50 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800bc74:	4618      	mov	r0, r3
 800bc76:	f7fe ffaa 	bl	800abce <USBD_LL_Reset>
}
 800bc7a:	bf00      	nop
 800bc7c:	3710      	adds	r7, #16
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	bd80      	pop	{r7, pc}
	...

0800bc84 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b082      	sub	sp, #8
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800bc92:	4618      	mov	r0, r3
 800bc94:	f7fe ffeb 	bl	800ac6e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	699b      	ldr	r3, [r3, #24]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d005      	beq.n	800bcac <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bca0:	4b04      	ldr	r3, [pc, #16]	; (800bcb4 <HAL_PCD_SuspendCallback+0x30>)
 800bca2:	691b      	ldr	r3, [r3, #16]
 800bca4:	4a03      	ldr	r2, [pc, #12]	; (800bcb4 <HAL_PCD_SuspendCallback+0x30>)
 800bca6:	f043 0306 	orr.w	r3, r3, #6
 800bcaa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bcac:	bf00      	nop
 800bcae:	3708      	adds	r7, #8
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	bd80      	pop	{r7, pc}
 800bcb4:	e000ed00 	.word	0xe000ed00

0800bcb8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b082      	sub	sp, #8
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	f7fe ffe5 	bl	800ac96 <USBD_LL_Resume>
}
 800bccc:	bf00      	nop
 800bcce:	3708      	adds	r7, #8
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	bd80      	pop	{r7, pc}

0800bcd4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b082      	sub	sp, #8
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800bcdc:	4a1f      	ldr	r2, [pc, #124]	; (800bd5c <USBD_LL_Init+0x88>)
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	4a1d      	ldr	r2, [pc, #116]	; (800bd5c <USBD_LL_Init+0x88>)
 800bce8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800bcec:	4b1b      	ldr	r3, [pc, #108]	; (800bd5c <USBD_LL_Init+0x88>)
 800bcee:	4a1c      	ldr	r2, [pc, #112]	; (800bd60 <USBD_LL_Init+0x8c>)
 800bcf0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800bcf2:	4b1a      	ldr	r3, [pc, #104]	; (800bd5c <USBD_LL_Init+0x88>)
 800bcf4:	2208      	movs	r2, #8
 800bcf6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800bcf8:	4b18      	ldr	r3, [pc, #96]	; (800bd5c <USBD_LL_Init+0x88>)
 800bcfa:	2202      	movs	r2, #2
 800bcfc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800bcfe:	4b17      	ldr	r3, [pc, #92]	; (800bd5c <USBD_LL_Init+0x88>)
 800bd00:	2200      	movs	r2, #0
 800bd02:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800bd04:	4b15      	ldr	r3, [pc, #84]	; (800bd5c <USBD_LL_Init+0x88>)
 800bd06:	2200      	movs	r2, #0
 800bd08:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800bd0a:	4b14      	ldr	r3, [pc, #80]	; (800bd5c <USBD_LL_Init+0x88>)
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800bd10:	4812      	ldr	r0, [pc, #72]	; (800bd5c <USBD_LL_Init+0x88>)
 800bd12:	f7f8 fd85 	bl	8004820 <HAL_PCD_Init>
 800bd16:	4603      	mov	r3, r0
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d001      	beq.n	800bd20 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800bd1c:	f7f6 f9a2 	bl	8002064 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bd26:	2318      	movs	r3, #24
 800bd28:	2200      	movs	r2, #0
 800bd2a:	2100      	movs	r1, #0
 800bd2c:	f7fa f9e4 	bl	80060f8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bd36:	2358      	movs	r3, #88	; 0x58
 800bd38:	2200      	movs	r2, #0
 800bd3a:	2180      	movs	r1, #128	; 0x80
 800bd3c:	f7fa f9dc 	bl	80060f8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bd46:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	2181      	movs	r1, #129	; 0x81
 800bd4e:	f7fa f9d3 	bl	80060f8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 800bd52:	2300      	movs	r3, #0
}
 800bd54:	4618      	mov	r0, r3
 800bd56:	3708      	adds	r7, #8
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	bd80      	pop	{r7, pc}
 800bd5c:	20000cb4 	.word	0x20000cb4
 800bd60:	40005c00 	.word	0x40005c00

0800bd64 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b084      	sub	sp, #16
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd70:	2300      	movs	r3, #0
 800bd72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	f7f8 fe5b 	bl	8004a36 <HAL_PCD_Start>
 800bd80:	4603      	mov	r3, r0
 800bd82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd84:	7bfb      	ldrb	r3, [r7, #15]
 800bd86:	4618      	mov	r0, r3
 800bd88:	f000 f93c 	bl	800c004 <USBD_Get_USB_Status>
 800bd8c:	4603      	mov	r3, r0
 800bd8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd90:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd92:	4618      	mov	r0, r3
 800bd94:	3710      	adds	r7, #16
 800bd96:	46bd      	mov	sp, r7
 800bd98:	bd80      	pop	{r7, pc}

0800bd9a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bd9a:	b580      	push	{r7, lr}
 800bd9c:	b084      	sub	sp, #16
 800bd9e:	af00      	add	r7, sp, #0
 800bda0:	6078      	str	r0, [r7, #4]
 800bda2:	4608      	mov	r0, r1
 800bda4:	4611      	mov	r1, r2
 800bda6:	461a      	mov	r2, r3
 800bda8:	4603      	mov	r3, r0
 800bdaa:	70fb      	strb	r3, [r7, #3]
 800bdac:	460b      	mov	r3, r1
 800bdae:	70bb      	strb	r3, [r7, #2]
 800bdb0:	4613      	mov	r3, r2
 800bdb2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bdb8:	2300      	movs	r3, #0
 800bdba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bdc2:	78bb      	ldrb	r3, [r7, #2]
 800bdc4:	883a      	ldrh	r2, [r7, #0]
 800bdc6:	78f9      	ldrb	r1, [r7, #3]
 800bdc8:	f7f8 ffd5 	bl	8004d76 <HAL_PCD_EP_Open>
 800bdcc:	4603      	mov	r3, r0
 800bdce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bdd0:	7bfb      	ldrb	r3, [r7, #15]
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	f000 f916 	bl	800c004 <USBD_Get_USB_Status>
 800bdd8:	4603      	mov	r3, r0
 800bdda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bddc:	7bbb      	ldrb	r3, [r7, #14]
}
 800bdde:	4618      	mov	r0, r3
 800bde0:	3710      	adds	r7, #16
 800bde2:	46bd      	mov	sp, r7
 800bde4:	bd80      	pop	{r7, pc}

0800bde6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bde6:	b580      	push	{r7, lr}
 800bde8:	b084      	sub	sp, #16
 800bdea:	af00      	add	r7, sp, #0
 800bdec:	6078      	str	r0, [r7, #4]
 800bdee:	460b      	mov	r3, r1
 800bdf0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800be00:	78fa      	ldrb	r2, [r7, #3]
 800be02:	4611      	mov	r1, r2
 800be04:	4618      	mov	r0, r3
 800be06:	f7f9 f81c 	bl	8004e42 <HAL_PCD_EP_Close>
 800be0a:	4603      	mov	r3, r0
 800be0c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be0e:	7bfb      	ldrb	r3, [r7, #15]
 800be10:	4618      	mov	r0, r3
 800be12:	f000 f8f7 	bl	800c004 <USBD_Get_USB_Status>
 800be16:	4603      	mov	r3, r0
 800be18:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be1a:	7bbb      	ldrb	r3, [r7, #14]
}
 800be1c:	4618      	mov	r0, r3
 800be1e:	3710      	adds	r7, #16
 800be20:	46bd      	mov	sp, r7
 800be22:	bd80      	pop	{r7, pc}

0800be24 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be24:	b580      	push	{r7, lr}
 800be26:	b084      	sub	sp, #16
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
 800be2c:	460b      	mov	r3, r1
 800be2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be30:	2300      	movs	r3, #0
 800be32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be34:	2300      	movs	r3, #0
 800be36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800be3e:	78fa      	ldrb	r2, [r7, #3]
 800be40:	4611      	mov	r1, r2
 800be42:	4618      	mov	r0, r3
 800be44:	f7f9 f8c5 	bl	8004fd2 <HAL_PCD_EP_SetStall>
 800be48:	4603      	mov	r3, r0
 800be4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be4c:	7bfb      	ldrb	r3, [r7, #15]
 800be4e:	4618      	mov	r0, r3
 800be50:	f000 f8d8 	bl	800c004 <USBD_Get_USB_Status>
 800be54:	4603      	mov	r3, r0
 800be56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be58:	7bbb      	ldrb	r3, [r7, #14]
}
 800be5a:	4618      	mov	r0, r3
 800be5c:	3710      	adds	r7, #16
 800be5e:	46bd      	mov	sp, r7
 800be60:	bd80      	pop	{r7, pc}

0800be62 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be62:	b580      	push	{r7, lr}
 800be64:	b084      	sub	sp, #16
 800be66:	af00      	add	r7, sp, #0
 800be68:	6078      	str	r0, [r7, #4]
 800be6a:	460b      	mov	r3, r1
 800be6c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be6e:	2300      	movs	r3, #0
 800be70:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be72:	2300      	movs	r3, #0
 800be74:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800be7c:	78fa      	ldrb	r2, [r7, #3]
 800be7e:	4611      	mov	r1, r2
 800be80:	4618      	mov	r0, r3
 800be82:	f7f9 f906 	bl	8005092 <HAL_PCD_EP_ClrStall>
 800be86:	4603      	mov	r3, r0
 800be88:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be8a:	7bfb      	ldrb	r3, [r7, #15]
 800be8c:	4618      	mov	r0, r3
 800be8e:	f000 f8b9 	bl	800c004 <USBD_Get_USB_Status>
 800be92:	4603      	mov	r3, r0
 800be94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be96:	7bbb      	ldrb	r3, [r7, #14]
}
 800be98:	4618      	mov	r0, r3
 800be9a:	3710      	adds	r7, #16
 800be9c:	46bd      	mov	sp, r7
 800be9e:	bd80      	pop	{r7, pc}

0800bea0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bea0:	b480      	push	{r7}
 800bea2:	b085      	sub	sp, #20
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
 800bea8:	460b      	mov	r3, r1
 800beaa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800beb2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800beb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	da0c      	bge.n	800bed6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bebc:	78fb      	ldrb	r3, [r7, #3]
 800bebe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bec2:	68f9      	ldr	r1, [r7, #12]
 800bec4:	1c5a      	adds	r2, r3, #1
 800bec6:	4613      	mov	r3, r2
 800bec8:	009b      	lsls	r3, r3, #2
 800beca:	4413      	add	r3, r2
 800becc:	00db      	lsls	r3, r3, #3
 800bece:	440b      	add	r3, r1
 800bed0:	3302      	adds	r3, #2
 800bed2:	781b      	ldrb	r3, [r3, #0]
 800bed4:	e00b      	b.n	800beee <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bed6:	78fb      	ldrb	r3, [r7, #3]
 800bed8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bedc:	68f9      	ldr	r1, [r7, #12]
 800bede:	4613      	mov	r3, r2
 800bee0:	009b      	lsls	r3, r3, #2
 800bee2:	4413      	add	r3, r2
 800bee4:	00db      	lsls	r3, r3, #3
 800bee6:	440b      	add	r3, r1
 800bee8:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800beec:	781b      	ldrb	r3, [r3, #0]
  }
}
 800beee:	4618      	mov	r0, r3
 800bef0:	3714      	adds	r7, #20
 800bef2:	46bd      	mov	sp, r7
 800bef4:	bc80      	pop	{r7}
 800bef6:	4770      	bx	lr

0800bef8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	b084      	sub	sp, #16
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]
 800bf00:	460b      	mov	r3, r1
 800bf02:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf04:	2300      	movs	r3, #0
 800bf06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf08:	2300      	movs	r3, #0
 800bf0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bf12:	78fa      	ldrb	r2, [r7, #3]
 800bf14:	4611      	mov	r1, r2
 800bf16:	4618      	mov	r0, r3
 800bf18:	f7f8 ff08 	bl	8004d2c <HAL_PCD_SetAddress>
 800bf1c:	4603      	mov	r3, r0
 800bf1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf20:	7bfb      	ldrb	r3, [r7, #15]
 800bf22:	4618      	mov	r0, r3
 800bf24:	f000 f86e 	bl	800c004 <USBD_Get_USB_Status>
 800bf28:	4603      	mov	r3, r0
 800bf2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf2c:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf2e:	4618      	mov	r0, r3
 800bf30:	3710      	adds	r7, #16
 800bf32:	46bd      	mov	sp, r7
 800bf34:	bd80      	pop	{r7, pc}

0800bf36 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800bf36:	b580      	push	{r7, lr}
 800bf38:	b086      	sub	sp, #24
 800bf3a:	af00      	add	r7, sp, #0
 800bf3c:	60f8      	str	r0, [r7, #12]
 800bf3e:	607a      	str	r2, [r7, #4]
 800bf40:	461a      	mov	r2, r3
 800bf42:	460b      	mov	r3, r1
 800bf44:	72fb      	strb	r3, [r7, #11]
 800bf46:	4613      	mov	r3, r2
 800bf48:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf4e:	2300      	movs	r3, #0
 800bf50:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bf58:	893b      	ldrh	r3, [r7, #8]
 800bf5a:	7af9      	ldrb	r1, [r7, #11]
 800bf5c:	687a      	ldr	r2, [r7, #4]
 800bf5e:	f7f8 fff5 	bl	8004f4c <HAL_PCD_EP_Transmit>
 800bf62:	4603      	mov	r3, r0
 800bf64:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf66:	7dfb      	ldrb	r3, [r7, #23]
 800bf68:	4618      	mov	r0, r3
 800bf6a:	f000 f84b 	bl	800c004 <USBD_Get_USB_Status>
 800bf6e:	4603      	mov	r3, r0
 800bf70:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bf72:	7dbb      	ldrb	r3, [r7, #22]
}
 800bf74:	4618      	mov	r0, r3
 800bf76:	3718      	adds	r7, #24
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	bd80      	pop	{r7, pc}

0800bf7c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b086      	sub	sp, #24
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	60f8      	str	r0, [r7, #12]
 800bf84:	607a      	str	r2, [r7, #4]
 800bf86:	461a      	mov	r2, r3
 800bf88:	460b      	mov	r3, r1
 800bf8a:	72fb      	strb	r3, [r7, #11]
 800bf8c:	4613      	mov	r3, r2
 800bf8e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf90:	2300      	movs	r3, #0
 800bf92:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf94:	2300      	movs	r3, #0
 800bf96:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bf9e:	893b      	ldrh	r3, [r7, #8]
 800bfa0:	7af9      	ldrb	r1, [r7, #11]
 800bfa2:	687a      	ldr	r2, [r7, #4]
 800bfa4:	f7f8 ff95 	bl	8004ed2 <HAL_PCD_EP_Receive>
 800bfa8:	4603      	mov	r3, r0
 800bfaa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bfac:	7dfb      	ldrb	r3, [r7, #23]
 800bfae:	4618      	mov	r0, r3
 800bfb0:	f000 f828 	bl	800c004 <USBD_Get_USB_Status>
 800bfb4:	4603      	mov	r3, r0
 800bfb6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bfb8:	7dbb      	ldrb	r3, [r7, #22]
}
 800bfba:	4618      	mov	r0, r3
 800bfbc:	3718      	adds	r7, #24
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	bd80      	pop	{r7, pc}
	...

0800bfc4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bfc4:	b480      	push	{r7}
 800bfc6:	b083      	sub	sp, #12
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bfcc:	4b02      	ldr	r3, [pc, #8]	; (800bfd8 <USBD_static_malloc+0x14>)
}
 800bfce:	4618      	mov	r0, r3
 800bfd0:	370c      	adds	r7, #12
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	bc80      	pop	{r7}
 800bfd6:	4770      	bx	lr
 800bfd8:	20000430 	.word	0x20000430

0800bfdc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bfdc:	b480      	push	{r7}
 800bfde:	b083      	sub	sp, #12
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]

}
 800bfe4:	bf00      	nop
 800bfe6:	370c      	adds	r7, #12
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	bc80      	pop	{r7}
 800bfec:	4770      	bx	lr

0800bfee <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfee:	b480      	push	{r7}
 800bff0:	b083      	sub	sp, #12
 800bff2:	af00      	add	r7, sp, #0
 800bff4:	6078      	str	r0, [r7, #4]
 800bff6:	460b      	mov	r3, r1
 800bff8:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800bffa:	bf00      	nop
 800bffc:	370c      	adds	r7, #12
 800bffe:	46bd      	mov	sp, r7
 800c000:	bc80      	pop	{r7}
 800c002:	4770      	bx	lr

0800c004 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c004:	b480      	push	{r7}
 800c006:	b085      	sub	sp, #20
 800c008:	af00      	add	r7, sp, #0
 800c00a:	4603      	mov	r3, r0
 800c00c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c00e:	2300      	movs	r3, #0
 800c010:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c012:	79fb      	ldrb	r3, [r7, #7]
 800c014:	2b03      	cmp	r3, #3
 800c016:	d817      	bhi.n	800c048 <USBD_Get_USB_Status+0x44>
 800c018:	a201      	add	r2, pc, #4	; (adr r2, 800c020 <USBD_Get_USB_Status+0x1c>)
 800c01a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c01e:	bf00      	nop
 800c020:	0800c031 	.word	0x0800c031
 800c024:	0800c037 	.word	0x0800c037
 800c028:	0800c03d 	.word	0x0800c03d
 800c02c:	0800c043 	.word	0x0800c043
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c030:	2300      	movs	r3, #0
 800c032:	73fb      	strb	r3, [r7, #15]
    break;
 800c034:	e00b      	b.n	800c04e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c036:	2302      	movs	r3, #2
 800c038:	73fb      	strb	r3, [r7, #15]
    break;
 800c03a:	e008      	b.n	800c04e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c03c:	2301      	movs	r3, #1
 800c03e:	73fb      	strb	r3, [r7, #15]
    break;
 800c040:	e005      	b.n	800c04e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c042:	2302      	movs	r3, #2
 800c044:	73fb      	strb	r3, [r7, #15]
    break;
 800c046:	e002      	b.n	800c04e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c048:	2302      	movs	r3, #2
 800c04a:	73fb      	strb	r3, [r7, #15]
    break;
 800c04c:	bf00      	nop
  }
  return usb_status;
 800c04e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c050:	4618      	mov	r0, r3
 800c052:	3714      	adds	r7, #20
 800c054:	46bd      	mov	sp, r7
 800c056:	bc80      	pop	{r7}
 800c058:	4770      	bx	lr
 800c05a:	bf00      	nop

0800c05c <__errno>:
 800c05c:	4b01      	ldr	r3, [pc, #4]	; (800c064 <__errno+0x8>)
 800c05e:	6818      	ldr	r0, [r3, #0]
 800c060:	4770      	bx	lr
 800c062:	bf00      	nop
 800c064:	20000200 	.word	0x20000200

0800c068 <__libc_init_array>:
 800c068:	b570      	push	{r4, r5, r6, lr}
 800c06a:	2600      	movs	r6, #0
 800c06c:	4d0c      	ldr	r5, [pc, #48]	; (800c0a0 <__libc_init_array+0x38>)
 800c06e:	4c0d      	ldr	r4, [pc, #52]	; (800c0a4 <__libc_init_array+0x3c>)
 800c070:	1b64      	subs	r4, r4, r5
 800c072:	10a4      	asrs	r4, r4, #2
 800c074:	42a6      	cmp	r6, r4
 800c076:	d109      	bne.n	800c08c <__libc_init_array+0x24>
 800c078:	f003 f9f8 	bl	800f46c <_init>
 800c07c:	2600      	movs	r6, #0
 800c07e:	4d0a      	ldr	r5, [pc, #40]	; (800c0a8 <__libc_init_array+0x40>)
 800c080:	4c0a      	ldr	r4, [pc, #40]	; (800c0ac <__libc_init_array+0x44>)
 800c082:	1b64      	subs	r4, r4, r5
 800c084:	10a4      	asrs	r4, r4, #2
 800c086:	42a6      	cmp	r6, r4
 800c088:	d105      	bne.n	800c096 <__libc_init_array+0x2e>
 800c08a:	bd70      	pop	{r4, r5, r6, pc}
 800c08c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c090:	4798      	blx	r3
 800c092:	3601      	adds	r6, #1
 800c094:	e7ee      	b.n	800c074 <__libc_init_array+0xc>
 800c096:	f855 3b04 	ldr.w	r3, [r5], #4
 800c09a:	4798      	blx	r3
 800c09c:	3601      	adds	r6, #1
 800c09e:	e7f2      	b.n	800c086 <__libc_init_array+0x1e>
 800c0a0:	0800f980 	.word	0x0800f980
 800c0a4:	0800f980 	.word	0x0800f980
 800c0a8:	0800f980 	.word	0x0800f980
 800c0ac:	0800f984 	.word	0x0800f984

0800c0b0 <memset>:
 800c0b0:	4603      	mov	r3, r0
 800c0b2:	4402      	add	r2, r0
 800c0b4:	4293      	cmp	r3, r2
 800c0b6:	d100      	bne.n	800c0ba <memset+0xa>
 800c0b8:	4770      	bx	lr
 800c0ba:	f803 1b01 	strb.w	r1, [r3], #1
 800c0be:	e7f9      	b.n	800c0b4 <memset+0x4>

0800c0c0 <__cvt>:
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0c6:	461f      	mov	r7, r3
 800c0c8:	bfbb      	ittet	lt
 800c0ca:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800c0ce:	461f      	movlt	r7, r3
 800c0d0:	2300      	movge	r3, #0
 800c0d2:	232d      	movlt	r3, #45	; 0x2d
 800c0d4:	b088      	sub	sp, #32
 800c0d6:	4614      	mov	r4, r2
 800c0d8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c0da:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800c0dc:	7013      	strb	r3, [r2, #0]
 800c0de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c0e0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800c0e4:	f023 0820 	bic.w	r8, r3, #32
 800c0e8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c0ec:	d005      	beq.n	800c0fa <__cvt+0x3a>
 800c0ee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c0f2:	d100      	bne.n	800c0f6 <__cvt+0x36>
 800c0f4:	3501      	adds	r5, #1
 800c0f6:	2302      	movs	r3, #2
 800c0f8:	e000      	b.n	800c0fc <__cvt+0x3c>
 800c0fa:	2303      	movs	r3, #3
 800c0fc:	aa07      	add	r2, sp, #28
 800c0fe:	9204      	str	r2, [sp, #16]
 800c100:	aa06      	add	r2, sp, #24
 800c102:	e9cd a202 	strd	sl, r2, [sp, #8]
 800c106:	e9cd 3500 	strd	r3, r5, [sp]
 800c10a:	4622      	mov	r2, r4
 800c10c:	463b      	mov	r3, r7
 800c10e:	f000 fce7 	bl	800cae0 <_dtoa_r>
 800c112:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c116:	4606      	mov	r6, r0
 800c118:	d102      	bne.n	800c120 <__cvt+0x60>
 800c11a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c11c:	07db      	lsls	r3, r3, #31
 800c11e:	d522      	bpl.n	800c166 <__cvt+0xa6>
 800c120:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c124:	eb06 0905 	add.w	r9, r6, r5
 800c128:	d110      	bne.n	800c14c <__cvt+0x8c>
 800c12a:	7833      	ldrb	r3, [r6, #0]
 800c12c:	2b30      	cmp	r3, #48	; 0x30
 800c12e:	d10a      	bne.n	800c146 <__cvt+0x86>
 800c130:	2200      	movs	r2, #0
 800c132:	2300      	movs	r3, #0
 800c134:	4620      	mov	r0, r4
 800c136:	4639      	mov	r1, r7
 800c138:	f7f4 fc36 	bl	80009a8 <__aeabi_dcmpeq>
 800c13c:	b918      	cbnz	r0, 800c146 <__cvt+0x86>
 800c13e:	f1c5 0501 	rsb	r5, r5, #1
 800c142:	f8ca 5000 	str.w	r5, [sl]
 800c146:	f8da 3000 	ldr.w	r3, [sl]
 800c14a:	4499      	add	r9, r3
 800c14c:	2200      	movs	r2, #0
 800c14e:	2300      	movs	r3, #0
 800c150:	4620      	mov	r0, r4
 800c152:	4639      	mov	r1, r7
 800c154:	f7f4 fc28 	bl	80009a8 <__aeabi_dcmpeq>
 800c158:	b108      	cbz	r0, 800c15e <__cvt+0x9e>
 800c15a:	f8cd 901c 	str.w	r9, [sp, #28]
 800c15e:	2230      	movs	r2, #48	; 0x30
 800c160:	9b07      	ldr	r3, [sp, #28]
 800c162:	454b      	cmp	r3, r9
 800c164:	d307      	bcc.n	800c176 <__cvt+0xb6>
 800c166:	4630      	mov	r0, r6
 800c168:	9b07      	ldr	r3, [sp, #28]
 800c16a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c16c:	1b9b      	subs	r3, r3, r6
 800c16e:	6013      	str	r3, [r2, #0]
 800c170:	b008      	add	sp, #32
 800c172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c176:	1c59      	adds	r1, r3, #1
 800c178:	9107      	str	r1, [sp, #28]
 800c17a:	701a      	strb	r2, [r3, #0]
 800c17c:	e7f0      	b.n	800c160 <__cvt+0xa0>

0800c17e <__exponent>:
 800c17e:	4603      	mov	r3, r0
 800c180:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c182:	2900      	cmp	r1, #0
 800c184:	f803 2b02 	strb.w	r2, [r3], #2
 800c188:	bfb6      	itet	lt
 800c18a:	222d      	movlt	r2, #45	; 0x2d
 800c18c:	222b      	movge	r2, #43	; 0x2b
 800c18e:	4249      	neglt	r1, r1
 800c190:	2909      	cmp	r1, #9
 800c192:	7042      	strb	r2, [r0, #1]
 800c194:	dd2b      	ble.n	800c1ee <__exponent+0x70>
 800c196:	f10d 0407 	add.w	r4, sp, #7
 800c19a:	46a4      	mov	ip, r4
 800c19c:	270a      	movs	r7, #10
 800c19e:	fb91 f6f7 	sdiv	r6, r1, r7
 800c1a2:	460a      	mov	r2, r1
 800c1a4:	46a6      	mov	lr, r4
 800c1a6:	fb07 1516 	mls	r5, r7, r6, r1
 800c1aa:	2a63      	cmp	r2, #99	; 0x63
 800c1ac:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800c1b0:	4631      	mov	r1, r6
 800c1b2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800c1b6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c1ba:	dcf0      	bgt.n	800c19e <__exponent+0x20>
 800c1bc:	3130      	adds	r1, #48	; 0x30
 800c1be:	f1ae 0502 	sub.w	r5, lr, #2
 800c1c2:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c1c6:	4629      	mov	r1, r5
 800c1c8:	1c44      	adds	r4, r0, #1
 800c1ca:	4561      	cmp	r1, ip
 800c1cc:	d30a      	bcc.n	800c1e4 <__exponent+0x66>
 800c1ce:	f10d 0209 	add.w	r2, sp, #9
 800c1d2:	eba2 020e 	sub.w	r2, r2, lr
 800c1d6:	4565      	cmp	r5, ip
 800c1d8:	bf88      	it	hi
 800c1da:	2200      	movhi	r2, #0
 800c1dc:	4413      	add	r3, r2
 800c1de:	1a18      	subs	r0, r3, r0
 800c1e0:	b003      	add	sp, #12
 800c1e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c1e4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c1e8:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c1ec:	e7ed      	b.n	800c1ca <__exponent+0x4c>
 800c1ee:	2330      	movs	r3, #48	; 0x30
 800c1f0:	3130      	adds	r1, #48	; 0x30
 800c1f2:	7083      	strb	r3, [r0, #2]
 800c1f4:	70c1      	strb	r1, [r0, #3]
 800c1f6:	1d03      	adds	r3, r0, #4
 800c1f8:	e7f1      	b.n	800c1de <__exponent+0x60>
	...

0800c1fc <_printf_float>:
 800c1fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c200:	b091      	sub	sp, #68	; 0x44
 800c202:	460c      	mov	r4, r1
 800c204:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800c208:	4616      	mov	r6, r2
 800c20a:	461f      	mov	r7, r3
 800c20c:	4605      	mov	r5, r0
 800c20e:	f001 fa55 	bl	800d6bc <_localeconv_r>
 800c212:	6803      	ldr	r3, [r0, #0]
 800c214:	4618      	mov	r0, r3
 800c216:	9309      	str	r3, [sp, #36]	; 0x24
 800c218:	f7f3 ff9a 	bl	8000150 <strlen>
 800c21c:	2300      	movs	r3, #0
 800c21e:	930e      	str	r3, [sp, #56]	; 0x38
 800c220:	f8d8 3000 	ldr.w	r3, [r8]
 800c224:	900a      	str	r0, [sp, #40]	; 0x28
 800c226:	3307      	adds	r3, #7
 800c228:	f023 0307 	bic.w	r3, r3, #7
 800c22c:	f103 0208 	add.w	r2, r3, #8
 800c230:	f894 9018 	ldrb.w	r9, [r4, #24]
 800c234:	f8d4 b000 	ldr.w	fp, [r4]
 800c238:	f8c8 2000 	str.w	r2, [r8]
 800c23c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c240:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c244:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800c248:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800c24c:	930b      	str	r3, [sp, #44]	; 0x2c
 800c24e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c252:	4640      	mov	r0, r8
 800c254:	4b9c      	ldr	r3, [pc, #624]	; (800c4c8 <_printf_float+0x2cc>)
 800c256:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c258:	f7f4 fbd8 	bl	8000a0c <__aeabi_dcmpun>
 800c25c:	bb70      	cbnz	r0, 800c2bc <_printf_float+0xc0>
 800c25e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c262:	4640      	mov	r0, r8
 800c264:	4b98      	ldr	r3, [pc, #608]	; (800c4c8 <_printf_float+0x2cc>)
 800c266:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c268:	f7f4 fbb2 	bl	80009d0 <__aeabi_dcmple>
 800c26c:	bb30      	cbnz	r0, 800c2bc <_printf_float+0xc0>
 800c26e:	2200      	movs	r2, #0
 800c270:	2300      	movs	r3, #0
 800c272:	4640      	mov	r0, r8
 800c274:	4651      	mov	r1, sl
 800c276:	f7f4 fba1 	bl	80009bc <__aeabi_dcmplt>
 800c27a:	b110      	cbz	r0, 800c282 <_printf_float+0x86>
 800c27c:	232d      	movs	r3, #45	; 0x2d
 800c27e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c282:	4b92      	ldr	r3, [pc, #584]	; (800c4cc <_printf_float+0x2d0>)
 800c284:	4892      	ldr	r0, [pc, #584]	; (800c4d0 <_printf_float+0x2d4>)
 800c286:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800c28a:	bf94      	ite	ls
 800c28c:	4698      	movls	r8, r3
 800c28e:	4680      	movhi	r8, r0
 800c290:	2303      	movs	r3, #3
 800c292:	f04f 0a00 	mov.w	sl, #0
 800c296:	6123      	str	r3, [r4, #16]
 800c298:	f02b 0304 	bic.w	r3, fp, #4
 800c29c:	6023      	str	r3, [r4, #0]
 800c29e:	4633      	mov	r3, r6
 800c2a0:	4621      	mov	r1, r4
 800c2a2:	4628      	mov	r0, r5
 800c2a4:	9700      	str	r7, [sp, #0]
 800c2a6:	aa0f      	add	r2, sp, #60	; 0x3c
 800c2a8:	f000 f9d4 	bl	800c654 <_printf_common>
 800c2ac:	3001      	adds	r0, #1
 800c2ae:	f040 8090 	bne.w	800c3d2 <_printf_float+0x1d6>
 800c2b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c2b6:	b011      	add	sp, #68	; 0x44
 800c2b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2bc:	4642      	mov	r2, r8
 800c2be:	4653      	mov	r3, sl
 800c2c0:	4640      	mov	r0, r8
 800c2c2:	4651      	mov	r1, sl
 800c2c4:	f7f4 fba2 	bl	8000a0c <__aeabi_dcmpun>
 800c2c8:	b148      	cbz	r0, 800c2de <_printf_float+0xe2>
 800c2ca:	f1ba 0f00 	cmp.w	sl, #0
 800c2ce:	bfb8      	it	lt
 800c2d0:	232d      	movlt	r3, #45	; 0x2d
 800c2d2:	4880      	ldr	r0, [pc, #512]	; (800c4d4 <_printf_float+0x2d8>)
 800c2d4:	bfb8      	it	lt
 800c2d6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c2da:	4b7f      	ldr	r3, [pc, #508]	; (800c4d8 <_printf_float+0x2dc>)
 800c2dc:	e7d3      	b.n	800c286 <_printf_float+0x8a>
 800c2de:	6863      	ldr	r3, [r4, #4]
 800c2e0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800c2e4:	1c5a      	adds	r2, r3, #1
 800c2e6:	d142      	bne.n	800c36e <_printf_float+0x172>
 800c2e8:	2306      	movs	r3, #6
 800c2ea:	6063      	str	r3, [r4, #4]
 800c2ec:	2200      	movs	r2, #0
 800c2ee:	9206      	str	r2, [sp, #24]
 800c2f0:	aa0e      	add	r2, sp, #56	; 0x38
 800c2f2:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800c2f6:	aa0d      	add	r2, sp, #52	; 0x34
 800c2f8:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800c2fc:	9203      	str	r2, [sp, #12]
 800c2fe:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800c302:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800c306:	6023      	str	r3, [r4, #0]
 800c308:	6863      	ldr	r3, [r4, #4]
 800c30a:	4642      	mov	r2, r8
 800c30c:	9300      	str	r3, [sp, #0]
 800c30e:	4628      	mov	r0, r5
 800c310:	4653      	mov	r3, sl
 800c312:	910b      	str	r1, [sp, #44]	; 0x2c
 800c314:	f7ff fed4 	bl	800c0c0 <__cvt>
 800c318:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c31a:	4680      	mov	r8, r0
 800c31c:	2947      	cmp	r1, #71	; 0x47
 800c31e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c320:	d108      	bne.n	800c334 <_printf_float+0x138>
 800c322:	1cc8      	adds	r0, r1, #3
 800c324:	db02      	blt.n	800c32c <_printf_float+0x130>
 800c326:	6863      	ldr	r3, [r4, #4]
 800c328:	4299      	cmp	r1, r3
 800c32a:	dd40      	ble.n	800c3ae <_printf_float+0x1b2>
 800c32c:	f1a9 0902 	sub.w	r9, r9, #2
 800c330:	fa5f f989 	uxtb.w	r9, r9
 800c334:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800c338:	d81f      	bhi.n	800c37a <_printf_float+0x17e>
 800c33a:	464a      	mov	r2, r9
 800c33c:	3901      	subs	r1, #1
 800c33e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c342:	910d      	str	r1, [sp, #52]	; 0x34
 800c344:	f7ff ff1b 	bl	800c17e <__exponent>
 800c348:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c34a:	4682      	mov	sl, r0
 800c34c:	1813      	adds	r3, r2, r0
 800c34e:	2a01      	cmp	r2, #1
 800c350:	6123      	str	r3, [r4, #16]
 800c352:	dc02      	bgt.n	800c35a <_printf_float+0x15e>
 800c354:	6822      	ldr	r2, [r4, #0]
 800c356:	07d2      	lsls	r2, r2, #31
 800c358:	d501      	bpl.n	800c35e <_printf_float+0x162>
 800c35a:	3301      	adds	r3, #1
 800c35c:	6123      	str	r3, [r4, #16]
 800c35e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800c362:	2b00      	cmp	r3, #0
 800c364:	d09b      	beq.n	800c29e <_printf_float+0xa2>
 800c366:	232d      	movs	r3, #45	; 0x2d
 800c368:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c36c:	e797      	b.n	800c29e <_printf_float+0xa2>
 800c36e:	2947      	cmp	r1, #71	; 0x47
 800c370:	d1bc      	bne.n	800c2ec <_printf_float+0xf0>
 800c372:	2b00      	cmp	r3, #0
 800c374:	d1ba      	bne.n	800c2ec <_printf_float+0xf0>
 800c376:	2301      	movs	r3, #1
 800c378:	e7b7      	b.n	800c2ea <_printf_float+0xee>
 800c37a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800c37e:	d118      	bne.n	800c3b2 <_printf_float+0x1b6>
 800c380:	2900      	cmp	r1, #0
 800c382:	6863      	ldr	r3, [r4, #4]
 800c384:	dd0b      	ble.n	800c39e <_printf_float+0x1a2>
 800c386:	6121      	str	r1, [r4, #16]
 800c388:	b913      	cbnz	r3, 800c390 <_printf_float+0x194>
 800c38a:	6822      	ldr	r2, [r4, #0]
 800c38c:	07d0      	lsls	r0, r2, #31
 800c38e:	d502      	bpl.n	800c396 <_printf_float+0x19a>
 800c390:	3301      	adds	r3, #1
 800c392:	440b      	add	r3, r1
 800c394:	6123      	str	r3, [r4, #16]
 800c396:	f04f 0a00 	mov.w	sl, #0
 800c39a:	65a1      	str	r1, [r4, #88]	; 0x58
 800c39c:	e7df      	b.n	800c35e <_printf_float+0x162>
 800c39e:	b913      	cbnz	r3, 800c3a6 <_printf_float+0x1aa>
 800c3a0:	6822      	ldr	r2, [r4, #0]
 800c3a2:	07d2      	lsls	r2, r2, #31
 800c3a4:	d501      	bpl.n	800c3aa <_printf_float+0x1ae>
 800c3a6:	3302      	adds	r3, #2
 800c3a8:	e7f4      	b.n	800c394 <_printf_float+0x198>
 800c3aa:	2301      	movs	r3, #1
 800c3ac:	e7f2      	b.n	800c394 <_printf_float+0x198>
 800c3ae:	f04f 0967 	mov.w	r9, #103	; 0x67
 800c3b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c3b4:	4299      	cmp	r1, r3
 800c3b6:	db05      	blt.n	800c3c4 <_printf_float+0x1c8>
 800c3b8:	6823      	ldr	r3, [r4, #0]
 800c3ba:	6121      	str	r1, [r4, #16]
 800c3bc:	07d8      	lsls	r0, r3, #31
 800c3be:	d5ea      	bpl.n	800c396 <_printf_float+0x19a>
 800c3c0:	1c4b      	adds	r3, r1, #1
 800c3c2:	e7e7      	b.n	800c394 <_printf_float+0x198>
 800c3c4:	2900      	cmp	r1, #0
 800c3c6:	bfcc      	ite	gt
 800c3c8:	2201      	movgt	r2, #1
 800c3ca:	f1c1 0202 	rsble	r2, r1, #2
 800c3ce:	4413      	add	r3, r2
 800c3d0:	e7e0      	b.n	800c394 <_printf_float+0x198>
 800c3d2:	6823      	ldr	r3, [r4, #0]
 800c3d4:	055a      	lsls	r2, r3, #21
 800c3d6:	d407      	bmi.n	800c3e8 <_printf_float+0x1ec>
 800c3d8:	6923      	ldr	r3, [r4, #16]
 800c3da:	4642      	mov	r2, r8
 800c3dc:	4631      	mov	r1, r6
 800c3de:	4628      	mov	r0, r5
 800c3e0:	47b8      	blx	r7
 800c3e2:	3001      	adds	r0, #1
 800c3e4:	d12b      	bne.n	800c43e <_printf_float+0x242>
 800c3e6:	e764      	b.n	800c2b2 <_printf_float+0xb6>
 800c3e8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800c3ec:	f240 80dd 	bls.w	800c5aa <_printf_float+0x3ae>
 800c3f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c3f4:	2200      	movs	r2, #0
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	f7f4 fad6 	bl	80009a8 <__aeabi_dcmpeq>
 800c3fc:	2800      	cmp	r0, #0
 800c3fe:	d033      	beq.n	800c468 <_printf_float+0x26c>
 800c400:	2301      	movs	r3, #1
 800c402:	4631      	mov	r1, r6
 800c404:	4628      	mov	r0, r5
 800c406:	4a35      	ldr	r2, [pc, #212]	; (800c4dc <_printf_float+0x2e0>)
 800c408:	47b8      	blx	r7
 800c40a:	3001      	adds	r0, #1
 800c40c:	f43f af51 	beq.w	800c2b2 <_printf_float+0xb6>
 800c410:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800c414:	429a      	cmp	r2, r3
 800c416:	db02      	blt.n	800c41e <_printf_float+0x222>
 800c418:	6823      	ldr	r3, [r4, #0]
 800c41a:	07d8      	lsls	r0, r3, #31
 800c41c:	d50f      	bpl.n	800c43e <_printf_float+0x242>
 800c41e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c422:	4631      	mov	r1, r6
 800c424:	4628      	mov	r0, r5
 800c426:	47b8      	blx	r7
 800c428:	3001      	adds	r0, #1
 800c42a:	f43f af42 	beq.w	800c2b2 <_printf_float+0xb6>
 800c42e:	f04f 0800 	mov.w	r8, #0
 800c432:	f104 091a 	add.w	r9, r4, #26
 800c436:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c438:	3b01      	subs	r3, #1
 800c43a:	4543      	cmp	r3, r8
 800c43c:	dc09      	bgt.n	800c452 <_printf_float+0x256>
 800c43e:	6823      	ldr	r3, [r4, #0]
 800c440:	079b      	lsls	r3, r3, #30
 800c442:	f100 8102 	bmi.w	800c64a <_printf_float+0x44e>
 800c446:	68e0      	ldr	r0, [r4, #12]
 800c448:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c44a:	4298      	cmp	r0, r3
 800c44c:	bfb8      	it	lt
 800c44e:	4618      	movlt	r0, r3
 800c450:	e731      	b.n	800c2b6 <_printf_float+0xba>
 800c452:	2301      	movs	r3, #1
 800c454:	464a      	mov	r2, r9
 800c456:	4631      	mov	r1, r6
 800c458:	4628      	mov	r0, r5
 800c45a:	47b8      	blx	r7
 800c45c:	3001      	adds	r0, #1
 800c45e:	f43f af28 	beq.w	800c2b2 <_printf_float+0xb6>
 800c462:	f108 0801 	add.w	r8, r8, #1
 800c466:	e7e6      	b.n	800c436 <_printf_float+0x23a>
 800c468:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	dc38      	bgt.n	800c4e0 <_printf_float+0x2e4>
 800c46e:	2301      	movs	r3, #1
 800c470:	4631      	mov	r1, r6
 800c472:	4628      	mov	r0, r5
 800c474:	4a19      	ldr	r2, [pc, #100]	; (800c4dc <_printf_float+0x2e0>)
 800c476:	47b8      	blx	r7
 800c478:	3001      	adds	r0, #1
 800c47a:	f43f af1a 	beq.w	800c2b2 <_printf_float+0xb6>
 800c47e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800c482:	4313      	orrs	r3, r2
 800c484:	d102      	bne.n	800c48c <_printf_float+0x290>
 800c486:	6823      	ldr	r3, [r4, #0]
 800c488:	07d9      	lsls	r1, r3, #31
 800c48a:	d5d8      	bpl.n	800c43e <_printf_float+0x242>
 800c48c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c490:	4631      	mov	r1, r6
 800c492:	4628      	mov	r0, r5
 800c494:	47b8      	blx	r7
 800c496:	3001      	adds	r0, #1
 800c498:	f43f af0b 	beq.w	800c2b2 <_printf_float+0xb6>
 800c49c:	f04f 0900 	mov.w	r9, #0
 800c4a0:	f104 0a1a 	add.w	sl, r4, #26
 800c4a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c4a6:	425b      	negs	r3, r3
 800c4a8:	454b      	cmp	r3, r9
 800c4aa:	dc01      	bgt.n	800c4b0 <_printf_float+0x2b4>
 800c4ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c4ae:	e794      	b.n	800c3da <_printf_float+0x1de>
 800c4b0:	2301      	movs	r3, #1
 800c4b2:	4652      	mov	r2, sl
 800c4b4:	4631      	mov	r1, r6
 800c4b6:	4628      	mov	r0, r5
 800c4b8:	47b8      	blx	r7
 800c4ba:	3001      	adds	r0, #1
 800c4bc:	f43f aef9 	beq.w	800c2b2 <_printf_float+0xb6>
 800c4c0:	f109 0901 	add.w	r9, r9, #1
 800c4c4:	e7ee      	b.n	800c4a4 <_printf_float+0x2a8>
 800c4c6:	bf00      	nop
 800c4c8:	7fefffff 	.word	0x7fefffff
 800c4cc:	0800f530 	.word	0x0800f530
 800c4d0:	0800f534 	.word	0x0800f534
 800c4d4:	0800f53c 	.word	0x0800f53c
 800c4d8:	0800f538 	.word	0x0800f538
 800c4dc:	0800f540 	.word	0x0800f540
 800c4e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c4e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c4e4:	429a      	cmp	r2, r3
 800c4e6:	bfa8      	it	ge
 800c4e8:	461a      	movge	r2, r3
 800c4ea:	2a00      	cmp	r2, #0
 800c4ec:	4691      	mov	r9, r2
 800c4ee:	dc37      	bgt.n	800c560 <_printf_float+0x364>
 800c4f0:	f04f 0b00 	mov.w	fp, #0
 800c4f4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c4f8:	f104 021a 	add.w	r2, r4, #26
 800c4fc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800c500:	ebaa 0309 	sub.w	r3, sl, r9
 800c504:	455b      	cmp	r3, fp
 800c506:	dc33      	bgt.n	800c570 <_printf_float+0x374>
 800c508:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800c50c:	429a      	cmp	r2, r3
 800c50e:	db3b      	blt.n	800c588 <_printf_float+0x38c>
 800c510:	6823      	ldr	r3, [r4, #0]
 800c512:	07da      	lsls	r2, r3, #31
 800c514:	d438      	bmi.n	800c588 <_printf_float+0x38c>
 800c516:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c518:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c51a:	eba2 030a 	sub.w	r3, r2, sl
 800c51e:	eba2 0901 	sub.w	r9, r2, r1
 800c522:	4599      	cmp	r9, r3
 800c524:	bfa8      	it	ge
 800c526:	4699      	movge	r9, r3
 800c528:	f1b9 0f00 	cmp.w	r9, #0
 800c52c:	dc34      	bgt.n	800c598 <_printf_float+0x39c>
 800c52e:	f04f 0800 	mov.w	r8, #0
 800c532:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c536:	f104 0a1a 	add.w	sl, r4, #26
 800c53a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800c53e:	1a9b      	subs	r3, r3, r2
 800c540:	eba3 0309 	sub.w	r3, r3, r9
 800c544:	4543      	cmp	r3, r8
 800c546:	f77f af7a 	ble.w	800c43e <_printf_float+0x242>
 800c54a:	2301      	movs	r3, #1
 800c54c:	4652      	mov	r2, sl
 800c54e:	4631      	mov	r1, r6
 800c550:	4628      	mov	r0, r5
 800c552:	47b8      	blx	r7
 800c554:	3001      	adds	r0, #1
 800c556:	f43f aeac 	beq.w	800c2b2 <_printf_float+0xb6>
 800c55a:	f108 0801 	add.w	r8, r8, #1
 800c55e:	e7ec      	b.n	800c53a <_printf_float+0x33e>
 800c560:	4613      	mov	r3, r2
 800c562:	4631      	mov	r1, r6
 800c564:	4642      	mov	r2, r8
 800c566:	4628      	mov	r0, r5
 800c568:	47b8      	blx	r7
 800c56a:	3001      	adds	r0, #1
 800c56c:	d1c0      	bne.n	800c4f0 <_printf_float+0x2f4>
 800c56e:	e6a0      	b.n	800c2b2 <_printf_float+0xb6>
 800c570:	2301      	movs	r3, #1
 800c572:	4631      	mov	r1, r6
 800c574:	4628      	mov	r0, r5
 800c576:	920b      	str	r2, [sp, #44]	; 0x2c
 800c578:	47b8      	blx	r7
 800c57a:	3001      	adds	r0, #1
 800c57c:	f43f ae99 	beq.w	800c2b2 <_printf_float+0xb6>
 800c580:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c582:	f10b 0b01 	add.w	fp, fp, #1
 800c586:	e7b9      	b.n	800c4fc <_printf_float+0x300>
 800c588:	4631      	mov	r1, r6
 800c58a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c58e:	4628      	mov	r0, r5
 800c590:	47b8      	blx	r7
 800c592:	3001      	adds	r0, #1
 800c594:	d1bf      	bne.n	800c516 <_printf_float+0x31a>
 800c596:	e68c      	b.n	800c2b2 <_printf_float+0xb6>
 800c598:	464b      	mov	r3, r9
 800c59a:	4631      	mov	r1, r6
 800c59c:	4628      	mov	r0, r5
 800c59e:	eb08 020a 	add.w	r2, r8, sl
 800c5a2:	47b8      	blx	r7
 800c5a4:	3001      	adds	r0, #1
 800c5a6:	d1c2      	bne.n	800c52e <_printf_float+0x332>
 800c5a8:	e683      	b.n	800c2b2 <_printf_float+0xb6>
 800c5aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c5ac:	2a01      	cmp	r2, #1
 800c5ae:	dc01      	bgt.n	800c5b4 <_printf_float+0x3b8>
 800c5b0:	07db      	lsls	r3, r3, #31
 800c5b2:	d537      	bpl.n	800c624 <_printf_float+0x428>
 800c5b4:	2301      	movs	r3, #1
 800c5b6:	4642      	mov	r2, r8
 800c5b8:	4631      	mov	r1, r6
 800c5ba:	4628      	mov	r0, r5
 800c5bc:	47b8      	blx	r7
 800c5be:	3001      	adds	r0, #1
 800c5c0:	f43f ae77 	beq.w	800c2b2 <_printf_float+0xb6>
 800c5c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c5c8:	4631      	mov	r1, r6
 800c5ca:	4628      	mov	r0, r5
 800c5cc:	47b8      	blx	r7
 800c5ce:	3001      	adds	r0, #1
 800c5d0:	f43f ae6f 	beq.w	800c2b2 <_printf_float+0xb6>
 800c5d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c5d8:	2200      	movs	r2, #0
 800c5da:	2300      	movs	r3, #0
 800c5dc:	f7f4 f9e4 	bl	80009a8 <__aeabi_dcmpeq>
 800c5e0:	b9d8      	cbnz	r0, 800c61a <_printf_float+0x41e>
 800c5e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c5e4:	f108 0201 	add.w	r2, r8, #1
 800c5e8:	3b01      	subs	r3, #1
 800c5ea:	4631      	mov	r1, r6
 800c5ec:	4628      	mov	r0, r5
 800c5ee:	47b8      	blx	r7
 800c5f0:	3001      	adds	r0, #1
 800c5f2:	d10e      	bne.n	800c612 <_printf_float+0x416>
 800c5f4:	e65d      	b.n	800c2b2 <_printf_float+0xb6>
 800c5f6:	2301      	movs	r3, #1
 800c5f8:	464a      	mov	r2, r9
 800c5fa:	4631      	mov	r1, r6
 800c5fc:	4628      	mov	r0, r5
 800c5fe:	47b8      	blx	r7
 800c600:	3001      	adds	r0, #1
 800c602:	f43f ae56 	beq.w	800c2b2 <_printf_float+0xb6>
 800c606:	f108 0801 	add.w	r8, r8, #1
 800c60a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c60c:	3b01      	subs	r3, #1
 800c60e:	4543      	cmp	r3, r8
 800c610:	dcf1      	bgt.n	800c5f6 <_printf_float+0x3fa>
 800c612:	4653      	mov	r3, sl
 800c614:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c618:	e6e0      	b.n	800c3dc <_printf_float+0x1e0>
 800c61a:	f04f 0800 	mov.w	r8, #0
 800c61e:	f104 091a 	add.w	r9, r4, #26
 800c622:	e7f2      	b.n	800c60a <_printf_float+0x40e>
 800c624:	2301      	movs	r3, #1
 800c626:	4642      	mov	r2, r8
 800c628:	e7df      	b.n	800c5ea <_printf_float+0x3ee>
 800c62a:	2301      	movs	r3, #1
 800c62c:	464a      	mov	r2, r9
 800c62e:	4631      	mov	r1, r6
 800c630:	4628      	mov	r0, r5
 800c632:	47b8      	blx	r7
 800c634:	3001      	adds	r0, #1
 800c636:	f43f ae3c 	beq.w	800c2b2 <_printf_float+0xb6>
 800c63a:	f108 0801 	add.w	r8, r8, #1
 800c63e:	68e3      	ldr	r3, [r4, #12]
 800c640:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c642:	1a5b      	subs	r3, r3, r1
 800c644:	4543      	cmp	r3, r8
 800c646:	dcf0      	bgt.n	800c62a <_printf_float+0x42e>
 800c648:	e6fd      	b.n	800c446 <_printf_float+0x24a>
 800c64a:	f04f 0800 	mov.w	r8, #0
 800c64e:	f104 0919 	add.w	r9, r4, #25
 800c652:	e7f4      	b.n	800c63e <_printf_float+0x442>

0800c654 <_printf_common>:
 800c654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c658:	4616      	mov	r6, r2
 800c65a:	4699      	mov	r9, r3
 800c65c:	688a      	ldr	r2, [r1, #8]
 800c65e:	690b      	ldr	r3, [r1, #16]
 800c660:	4607      	mov	r7, r0
 800c662:	4293      	cmp	r3, r2
 800c664:	bfb8      	it	lt
 800c666:	4613      	movlt	r3, r2
 800c668:	6033      	str	r3, [r6, #0]
 800c66a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c66e:	460c      	mov	r4, r1
 800c670:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c674:	b10a      	cbz	r2, 800c67a <_printf_common+0x26>
 800c676:	3301      	adds	r3, #1
 800c678:	6033      	str	r3, [r6, #0]
 800c67a:	6823      	ldr	r3, [r4, #0]
 800c67c:	0699      	lsls	r1, r3, #26
 800c67e:	bf42      	ittt	mi
 800c680:	6833      	ldrmi	r3, [r6, #0]
 800c682:	3302      	addmi	r3, #2
 800c684:	6033      	strmi	r3, [r6, #0]
 800c686:	6825      	ldr	r5, [r4, #0]
 800c688:	f015 0506 	ands.w	r5, r5, #6
 800c68c:	d106      	bne.n	800c69c <_printf_common+0x48>
 800c68e:	f104 0a19 	add.w	sl, r4, #25
 800c692:	68e3      	ldr	r3, [r4, #12]
 800c694:	6832      	ldr	r2, [r6, #0]
 800c696:	1a9b      	subs	r3, r3, r2
 800c698:	42ab      	cmp	r3, r5
 800c69a:	dc28      	bgt.n	800c6ee <_printf_common+0x9a>
 800c69c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c6a0:	1e13      	subs	r3, r2, #0
 800c6a2:	6822      	ldr	r2, [r4, #0]
 800c6a4:	bf18      	it	ne
 800c6a6:	2301      	movne	r3, #1
 800c6a8:	0692      	lsls	r2, r2, #26
 800c6aa:	d42d      	bmi.n	800c708 <_printf_common+0xb4>
 800c6ac:	4649      	mov	r1, r9
 800c6ae:	4638      	mov	r0, r7
 800c6b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c6b4:	47c0      	blx	r8
 800c6b6:	3001      	adds	r0, #1
 800c6b8:	d020      	beq.n	800c6fc <_printf_common+0xa8>
 800c6ba:	6823      	ldr	r3, [r4, #0]
 800c6bc:	68e5      	ldr	r5, [r4, #12]
 800c6be:	f003 0306 	and.w	r3, r3, #6
 800c6c2:	2b04      	cmp	r3, #4
 800c6c4:	bf18      	it	ne
 800c6c6:	2500      	movne	r5, #0
 800c6c8:	6832      	ldr	r2, [r6, #0]
 800c6ca:	f04f 0600 	mov.w	r6, #0
 800c6ce:	68a3      	ldr	r3, [r4, #8]
 800c6d0:	bf08      	it	eq
 800c6d2:	1aad      	subeq	r5, r5, r2
 800c6d4:	6922      	ldr	r2, [r4, #16]
 800c6d6:	bf08      	it	eq
 800c6d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c6dc:	4293      	cmp	r3, r2
 800c6de:	bfc4      	itt	gt
 800c6e0:	1a9b      	subgt	r3, r3, r2
 800c6e2:	18ed      	addgt	r5, r5, r3
 800c6e4:	341a      	adds	r4, #26
 800c6e6:	42b5      	cmp	r5, r6
 800c6e8:	d11a      	bne.n	800c720 <_printf_common+0xcc>
 800c6ea:	2000      	movs	r0, #0
 800c6ec:	e008      	b.n	800c700 <_printf_common+0xac>
 800c6ee:	2301      	movs	r3, #1
 800c6f0:	4652      	mov	r2, sl
 800c6f2:	4649      	mov	r1, r9
 800c6f4:	4638      	mov	r0, r7
 800c6f6:	47c0      	blx	r8
 800c6f8:	3001      	adds	r0, #1
 800c6fa:	d103      	bne.n	800c704 <_printf_common+0xb0>
 800c6fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c704:	3501      	adds	r5, #1
 800c706:	e7c4      	b.n	800c692 <_printf_common+0x3e>
 800c708:	2030      	movs	r0, #48	; 0x30
 800c70a:	18e1      	adds	r1, r4, r3
 800c70c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c710:	1c5a      	adds	r2, r3, #1
 800c712:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c716:	4422      	add	r2, r4
 800c718:	3302      	adds	r3, #2
 800c71a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c71e:	e7c5      	b.n	800c6ac <_printf_common+0x58>
 800c720:	2301      	movs	r3, #1
 800c722:	4622      	mov	r2, r4
 800c724:	4649      	mov	r1, r9
 800c726:	4638      	mov	r0, r7
 800c728:	47c0      	blx	r8
 800c72a:	3001      	adds	r0, #1
 800c72c:	d0e6      	beq.n	800c6fc <_printf_common+0xa8>
 800c72e:	3601      	adds	r6, #1
 800c730:	e7d9      	b.n	800c6e6 <_printf_common+0x92>
	...

0800c734 <_printf_i>:
 800c734:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c738:	460c      	mov	r4, r1
 800c73a:	7e27      	ldrb	r7, [r4, #24]
 800c73c:	4691      	mov	r9, r2
 800c73e:	2f78      	cmp	r7, #120	; 0x78
 800c740:	4680      	mov	r8, r0
 800c742:	469a      	mov	sl, r3
 800c744:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c746:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c74a:	d807      	bhi.n	800c75c <_printf_i+0x28>
 800c74c:	2f62      	cmp	r7, #98	; 0x62
 800c74e:	d80a      	bhi.n	800c766 <_printf_i+0x32>
 800c750:	2f00      	cmp	r7, #0
 800c752:	f000 80d9 	beq.w	800c908 <_printf_i+0x1d4>
 800c756:	2f58      	cmp	r7, #88	; 0x58
 800c758:	f000 80a4 	beq.w	800c8a4 <_printf_i+0x170>
 800c75c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c760:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c764:	e03a      	b.n	800c7dc <_printf_i+0xa8>
 800c766:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c76a:	2b15      	cmp	r3, #21
 800c76c:	d8f6      	bhi.n	800c75c <_printf_i+0x28>
 800c76e:	a001      	add	r0, pc, #4	; (adr r0, 800c774 <_printf_i+0x40>)
 800c770:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c774:	0800c7cd 	.word	0x0800c7cd
 800c778:	0800c7e1 	.word	0x0800c7e1
 800c77c:	0800c75d 	.word	0x0800c75d
 800c780:	0800c75d 	.word	0x0800c75d
 800c784:	0800c75d 	.word	0x0800c75d
 800c788:	0800c75d 	.word	0x0800c75d
 800c78c:	0800c7e1 	.word	0x0800c7e1
 800c790:	0800c75d 	.word	0x0800c75d
 800c794:	0800c75d 	.word	0x0800c75d
 800c798:	0800c75d 	.word	0x0800c75d
 800c79c:	0800c75d 	.word	0x0800c75d
 800c7a0:	0800c8ef 	.word	0x0800c8ef
 800c7a4:	0800c811 	.word	0x0800c811
 800c7a8:	0800c8d1 	.word	0x0800c8d1
 800c7ac:	0800c75d 	.word	0x0800c75d
 800c7b0:	0800c75d 	.word	0x0800c75d
 800c7b4:	0800c911 	.word	0x0800c911
 800c7b8:	0800c75d 	.word	0x0800c75d
 800c7bc:	0800c811 	.word	0x0800c811
 800c7c0:	0800c75d 	.word	0x0800c75d
 800c7c4:	0800c75d 	.word	0x0800c75d
 800c7c8:	0800c8d9 	.word	0x0800c8d9
 800c7cc:	680b      	ldr	r3, [r1, #0]
 800c7ce:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c7d2:	1d1a      	adds	r2, r3, #4
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	600a      	str	r2, [r1, #0]
 800c7d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c7dc:	2301      	movs	r3, #1
 800c7de:	e0a4      	b.n	800c92a <_printf_i+0x1f6>
 800c7e0:	6825      	ldr	r5, [r4, #0]
 800c7e2:	6808      	ldr	r0, [r1, #0]
 800c7e4:	062e      	lsls	r6, r5, #24
 800c7e6:	f100 0304 	add.w	r3, r0, #4
 800c7ea:	d50a      	bpl.n	800c802 <_printf_i+0xce>
 800c7ec:	6805      	ldr	r5, [r0, #0]
 800c7ee:	600b      	str	r3, [r1, #0]
 800c7f0:	2d00      	cmp	r5, #0
 800c7f2:	da03      	bge.n	800c7fc <_printf_i+0xc8>
 800c7f4:	232d      	movs	r3, #45	; 0x2d
 800c7f6:	426d      	negs	r5, r5
 800c7f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c7fc:	230a      	movs	r3, #10
 800c7fe:	485e      	ldr	r0, [pc, #376]	; (800c978 <_printf_i+0x244>)
 800c800:	e019      	b.n	800c836 <_printf_i+0x102>
 800c802:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c806:	6805      	ldr	r5, [r0, #0]
 800c808:	600b      	str	r3, [r1, #0]
 800c80a:	bf18      	it	ne
 800c80c:	b22d      	sxthne	r5, r5
 800c80e:	e7ef      	b.n	800c7f0 <_printf_i+0xbc>
 800c810:	680b      	ldr	r3, [r1, #0]
 800c812:	6825      	ldr	r5, [r4, #0]
 800c814:	1d18      	adds	r0, r3, #4
 800c816:	6008      	str	r0, [r1, #0]
 800c818:	0628      	lsls	r0, r5, #24
 800c81a:	d501      	bpl.n	800c820 <_printf_i+0xec>
 800c81c:	681d      	ldr	r5, [r3, #0]
 800c81e:	e002      	b.n	800c826 <_printf_i+0xf2>
 800c820:	0669      	lsls	r1, r5, #25
 800c822:	d5fb      	bpl.n	800c81c <_printf_i+0xe8>
 800c824:	881d      	ldrh	r5, [r3, #0]
 800c826:	2f6f      	cmp	r7, #111	; 0x6f
 800c828:	bf0c      	ite	eq
 800c82a:	2308      	moveq	r3, #8
 800c82c:	230a      	movne	r3, #10
 800c82e:	4852      	ldr	r0, [pc, #328]	; (800c978 <_printf_i+0x244>)
 800c830:	2100      	movs	r1, #0
 800c832:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c836:	6866      	ldr	r6, [r4, #4]
 800c838:	2e00      	cmp	r6, #0
 800c83a:	bfa8      	it	ge
 800c83c:	6821      	ldrge	r1, [r4, #0]
 800c83e:	60a6      	str	r6, [r4, #8]
 800c840:	bfa4      	itt	ge
 800c842:	f021 0104 	bicge.w	r1, r1, #4
 800c846:	6021      	strge	r1, [r4, #0]
 800c848:	b90d      	cbnz	r5, 800c84e <_printf_i+0x11a>
 800c84a:	2e00      	cmp	r6, #0
 800c84c:	d04d      	beq.n	800c8ea <_printf_i+0x1b6>
 800c84e:	4616      	mov	r6, r2
 800c850:	fbb5 f1f3 	udiv	r1, r5, r3
 800c854:	fb03 5711 	mls	r7, r3, r1, r5
 800c858:	5dc7      	ldrb	r7, [r0, r7]
 800c85a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c85e:	462f      	mov	r7, r5
 800c860:	42bb      	cmp	r3, r7
 800c862:	460d      	mov	r5, r1
 800c864:	d9f4      	bls.n	800c850 <_printf_i+0x11c>
 800c866:	2b08      	cmp	r3, #8
 800c868:	d10b      	bne.n	800c882 <_printf_i+0x14e>
 800c86a:	6823      	ldr	r3, [r4, #0]
 800c86c:	07df      	lsls	r7, r3, #31
 800c86e:	d508      	bpl.n	800c882 <_printf_i+0x14e>
 800c870:	6923      	ldr	r3, [r4, #16]
 800c872:	6861      	ldr	r1, [r4, #4]
 800c874:	4299      	cmp	r1, r3
 800c876:	bfde      	ittt	le
 800c878:	2330      	movle	r3, #48	; 0x30
 800c87a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c87e:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800c882:	1b92      	subs	r2, r2, r6
 800c884:	6122      	str	r2, [r4, #16]
 800c886:	464b      	mov	r3, r9
 800c888:	4621      	mov	r1, r4
 800c88a:	4640      	mov	r0, r8
 800c88c:	f8cd a000 	str.w	sl, [sp]
 800c890:	aa03      	add	r2, sp, #12
 800c892:	f7ff fedf 	bl	800c654 <_printf_common>
 800c896:	3001      	adds	r0, #1
 800c898:	d14c      	bne.n	800c934 <_printf_i+0x200>
 800c89a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c89e:	b004      	add	sp, #16
 800c8a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8a4:	4834      	ldr	r0, [pc, #208]	; (800c978 <_printf_i+0x244>)
 800c8a6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c8aa:	680e      	ldr	r6, [r1, #0]
 800c8ac:	6823      	ldr	r3, [r4, #0]
 800c8ae:	f856 5b04 	ldr.w	r5, [r6], #4
 800c8b2:	061f      	lsls	r7, r3, #24
 800c8b4:	600e      	str	r6, [r1, #0]
 800c8b6:	d514      	bpl.n	800c8e2 <_printf_i+0x1ae>
 800c8b8:	07d9      	lsls	r1, r3, #31
 800c8ba:	bf44      	itt	mi
 800c8bc:	f043 0320 	orrmi.w	r3, r3, #32
 800c8c0:	6023      	strmi	r3, [r4, #0]
 800c8c2:	b91d      	cbnz	r5, 800c8cc <_printf_i+0x198>
 800c8c4:	6823      	ldr	r3, [r4, #0]
 800c8c6:	f023 0320 	bic.w	r3, r3, #32
 800c8ca:	6023      	str	r3, [r4, #0]
 800c8cc:	2310      	movs	r3, #16
 800c8ce:	e7af      	b.n	800c830 <_printf_i+0xfc>
 800c8d0:	6823      	ldr	r3, [r4, #0]
 800c8d2:	f043 0320 	orr.w	r3, r3, #32
 800c8d6:	6023      	str	r3, [r4, #0]
 800c8d8:	2378      	movs	r3, #120	; 0x78
 800c8da:	4828      	ldr	r0, [pc, #160]	; (800c97c <_printf_i+0x248>)
 800c8dc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c8e0:	e7e3      	b.n	800c8aa <_printf_i+0x176>
 800c8e2:	065e      	lsls	r6, r3, #25
 800c8e4:	bf48      	it	mi
 800c8e6:	b2ad      	uxthmi	r5, r5
 800c8e8:	e7e6      	b.n	800c8b8 <_printf_i+0x184>
 800c8ea:	4616      	mov	r6, r2
 800c8ec:	e7bb      	b.n	800c866 <_printf_i+0x132>
 800c8ee:	680b      	ldr	r3, [r1, #0]
 800c8f0:	6826      	ldr	r6, [r4, #0]
 800c8f2:	1d1d      	adds	r5, r3, #4
 800c8f4:	6960      	ldr	r0, [r4, #20]
 800c8f6:	600d      	str	r5, [r1, #0]
 800c8f8:	0635      	lsls	r5, r6, #24
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	d501      	bpl.n	800c902 <_printf_i+0x1ce>
 800c8fe:	6018      	str	r0, [r3, #0]
 800c900:	e002      	b.n	800c908 <_printf_i+0x1d4>
 800c902:	0671      	lsls	r1, r6, #25
 800c904:	d5fb      	bpl.n	800c8fe <_printf_i+0x1ca>
 800c906:	8018      	strh	r0, [r3, #0]
 800c908:	2300      	movs	r3, #0
 800c90a:	4616      	mov	r6, r2
 800c90c:	6123      	str	r3, [r4, #16]
 800c90e:	e7ba      	b.n	800c886 <_printf_i+0x152>
 800c910:	680b      	ldr	r3, [r1, #0]
 800c912:	1d1a      	adds	r2, r3, #4
 800c914:	600a      	str	r2, [r1, #0]
 800c916:	681e      	ldr	r6, [r3, #0]
 800c918:	2100      	movs	r1, #0
 800c91a:	4630      	mov	r0, r6
 800c91c:	6862      	ldr	r2, [r4, #4]
 800c91e:	f000 fed9 	bl	800d6d4 <memchr>
 800c922:	b108      	cbz	r0, 800c928 <_printf_i+0x1f4>
 800c924:	1b80      	subs	r0, r0, r6
 800c926:	6060      	str	r0, [r4, #4]
 800c928:	6863      	ldr	r3, [r4, #4]
 800c92a:	6123      	str	r3, [r4, #16]
 800c92c:	2300      	movs	r3, #0
 800c92e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c932:	e7a8      	b.n	800c886 <_printf_i+0x152>
 800c934:	4632      	mov	r2, r6
 800c936:	4649      	mov	r1, r9
 800c938:	4640      	mov	r0, r8
 800c93a:	6923      	ldr	r3, [r4, #16]
 800c93c:	47d0      	blx	sl
 800c93e:	3001      	adds	r0, #1
 800c940:	d0ab      	beq.n	800c89a <_printf_i+0x166>
 800c942:	6823      	ldr	r3, [r4, #0]
 800c944:	079b      	lsls	r3, r3, #30
 800c946:	d413      	bmi.n	800c970 <_printf_i+0x23c>
 800c948:	68e0      	ldr	r0, [r4, #12]
 800c94a:	9b03      	ldr	r3, [sp, #12]
 800c94c:	4298      	cmp	r0, r3
 800c94e:	bfb8      	it	lt
 800c950:	4618      	movlt	r0, r3
 800c952:	e7a4      	b.n	800c89e <_printf_i+0x16a>
 800c954:	2301      	movs	r3, #1
 800c956:	4632      	mov	r2, r6
 800c958:	4649      	mov	r1, r9
 800c95a:	4640      	mov	r0, r8
 800c95c:	47d0      	blx	sl
 800c95e:	3001      	adds	r0, #1
 800c960:	d09b      	beq.n	800c89a <_printf_i+0x166>
 800c962:	3501      	adds	r5, #1
 800c964:	68e3      	ldr	r3, [r4, #12]
 800c966:	9903      	ldr	r1, [sp, #12]
 800c968:	1a5b      	subs	r3, r3, r1
 800c96a:	42ab      	cmp	r3, r5
 800c96c:	dcf2      	bgt.n	800c954 <_printf_i+0x220>
 800c96e:	e7eb      	b.n	800c948 <_printf_i+0x214>
 800c970:	2500      	movs	r5, #0
 800c972:	f104 0619 	add.w	r6, r4, #25
 800c976:	e7f5      	b.n	800c964 <_printf_i+0x230>
 800c978:	0800f542 	.word	0x0800f542
 800c97c:	0800f553 	.word	0x0800f553

0800c980 <siprintf>:
 800c980:	b40e      	push	{r1, r2, r3}
 800c982:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c986:	b500      	push	{lr}
 800c988:	b09c      	sub	sp, #112	; 0x70
 800c98a:	ab1d      	add	r3, sp, #116	; 0x74
 800c98c:	9002      	str	r0, [sp, #8]
 800c98e:	9006      	str	r0, [sp, #24]
 800c990:	9107      	str	r1, [sp, #28]
 800c992:	9104      	str	r1, [sp, #16]
 800c994:	4808      	ldr	r0, [pc, #32]	; (800c9b8 <siprintf+0x38>)
 800c996:	4909      	ldr	r1, [pc, #36]	; (800c9bc <siprintf+0x3c>)
 800c998:	f853 2b04 	ldr.w	r2, [r3], #4
 800c99c:	9105      	str	r1, [sp, #20]
 800c99e:	6800      	ldr	r0, [r0, #0]
 800c9a0:	a902      	add	r1, sp, #8
 800c9a2:	9301      	str	r3, [sp, #4]
 800c9a4:	f001 fb44 	bl	800e030 <_svfiprintf_r>
 800c9a8:	2200      	movs	r2, #0
 800c9aa:	9b02      	ldr	r3, [sp, #8]
 800c9ac:	701a      	strb	r2, [r3, #0]
 800c9ae:	b01c      	add	sp, #112	; 0x70
 800c9b0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c9b4:	b003      	add	sp, #12
 800c9b6:	4770      	bx	lr
 800c9b8:	20000200 	.word	0x20000200
 800c9bc:	ffff0208 	.word	0xffff0208

0800c9c0 <quorem>:
 800c9c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9c4:	6903      	ldr	r3, [r0, #16]
 800c9c6:	690c      	ldr	r4, [r1, #16]
 800c9c8:	4607      	mov	r7, r0
 800c9ca:	42a3      	cmp	r3, r4
 800c9cc:	f2c0 8083 	blt.w	800cad6 <quorem+0x116>
 800c9d0:	3c01      	subs	r4, #1
 800c9d2:	f100 0514 	add.w	r5, r0, #20
 800c9d6:	f101 0814 	add.w	r8, r1, #20
 800c9da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c9de:	9301      	str	r3, [sp, #4]
 800c9e0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c9e4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c9e8:	3301      	adds	r3, #1
 800c9ea:	429a      	cmp	r2, r3
 800c9ec:	fbb2 f6f3 	udiv	r6, r2, r3
 800c9f0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c9f4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c9f8:	d332      	bcc.n	800ca60 <quorem+0xa0>
 800c9fa:	f04f 0e00 	mov.w	lr, #0
 800c9fe:	4640      	mov	r0, r8
 800ca00:	46ac      	mov	ip, r5
 800ca02:	46f2      	mov	sl, lr
 800ca04:	f850 2b04 	ldr.w	r2, [r0], #4
 800ca08:	b293      	uxth	r3, r2
 800ca0a:	fb06 e303 	mla	r3, r6, r3, lr
 800ca0e:	0c12      	lsrs	r2, r2, #16
 800ca10:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ca14:	fb06 e202 	mla	r2, r6, r2, lr
 800ca18:	b29b      	uxth	r3, r3
 800ca1a:	ebaa 0303 	sub.w	r3, sl, r3
 800ca1e:	f8dc a000 	ldr.w	sl, [ip]
 800ca22:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ca26:	fa1f fa8a 	uxth.w	sl, sl
 800ca2a:	4453      	add	r3, sl
 800ca2c:	fa1f fa82 	uxth.w	sl, r2
 800ca30:	f8dc 2000 	ldr.w	r2, [ip]
 800ca34:	4581      	cmp	r9, r0
 800ca36:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800ca3a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ca3e:	b29b      	uxth	r3, r3
 800ca40:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ca44:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ca48:	f84c 3b04 	str.w	r3, [ip], #4
 800ca4c:	d2da      	bcs.n	800ca04 <quorem+0x44>
 800ca4e:	f855 300b 	ldr.w	r3, [r5, fp]
 800ca52:	b92b      	cbnz	r3, 800ca60 <quorem+0xa0>
 800ca54:	9b01      	ldr	r3, [sp, #4]
 800ca56:	3b04      	subs	r3, #4
 800ca58:	429d      	cmp	r5, r3
 800ca5a:	461a      	mov	r2, r3
 800ca5c:	d32f      	bcc.n	800cabe <quorem+0xfe>
 800ca5e:	613c      	str	r4, [r7, #16]
 800ca60:	4638      	mov	r0, r7
 800ca62:	f001 f8cd 	bl	800dc00 <__mcmp>
 800ca66:	2800      	cmp	r0, #0
 800ca68:	db25      	blt.n	800cab6 <quorem+0xf6>
 800ca6a:	4628      	mov	r0, r5
 800ca6c:	f04f 0c00 	mov.w	ip, #0
 800ca70:	3601      	adds	r6, #1
 800ca72:	f858 1b04 	ldr.w	r1, [r8], #4
 800ca76:	f8d0 e000 	ldr.w	lr, [r0]
 800ca7a:	b28b      	uxth	r3, r1
 800ca7c:	ebac 0303 	sub.w	r3, ip, r3
 800ca80:	fa1f f28e 	uxth.w	r2, lr
 800ca84:	4413      	add	r3, r2
 800ca86:	0c0a      	lsrs	r2, r1, #16
 800ca88:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ca8c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ca90:	b29b      	uxth	r3, r3
 800ca92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ca96:	45c1      	cmp	r9, r8
 800ca98:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ca9c:	f840 3b04 	str.w	r3, [r0], #4
 800caa0:	d2e7      	bcs.n	800ca72 <quorem+0xb2>
 800caa2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800caa6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800caaa:	b922      	cbnz	r2, 800cab6 <quorem+0xf6>
 800caac:	3b04      	subs	r3, #4
 800caae:	429d      	cmp	r5, r3
 800cab0:	461a      	mov	r2, r3
 800cab2:	d30a      	bcc.n	800caca <quorem+0x10a>
 800cab4:	613c      	str	r4, [r7, #16]
 800cab6:	4630      	mov	r0, r6
 800cab8:	b003      	add	sp, #12
 800caba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cabe:	6812      	ldr	r2, [r2, #0]
 800cac0:	3b04      	subs	r3, #4
 800cac2:	2a00      	cmp	r2, #0
 800cac4:	d1cb      	bne.n	800ca5e <quorem+0x9e>
 800cac6:	3c01      	subs	r4, #1
 800cac8:	e7c6      	b.n	800ca58 <quorem+0x98>
 800caca:	6812      	ldr	r2, [r2, #0]
 800cacc:	3b04      	subs	r3, #4
 800cace:	2a00      	cmp	r2, #0
 800cad0:	d1f0      	bne.n	800cab4 <quorem+0xf4>
 800cad2:	3c01      	subs	r4, #1
 800cad4:	e7eb      	b.n	800caae <quorem+0xee>
 800cad6:	2000      	movs	r0, #0
 800cad8:	e7ee      	b.n	800cab8 <quorem+0xf8>
 800cada:	0000      	movs	r0, r0
 800cadc:	0000      	movs	r0, r0
	...

0800cae0 <_dtoa_r>:
 800cae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cae4:	4616      	mov	r6, r2
 800cae6:	461f      	mov	r7, r3
 800cae8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800caea:	b099      	sub	sp, #100	; 0x64
 800caec:	4605      	mov	r5, r0
 800caee:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800caf2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800caf6:	b974      	cbnz	r4, 800cb16 <_dtoa_r+0x36>
 800caf8:	2010      	movs	r0, #16
 800cafa:	f000 fde3 	bl	800d6c4 <malloc>
 800cafe:	4602      	mov	r2, r0
 800cb00:	6268      	str	r0, [r5, #36]	; 0x24
 800cb02:	b920      	cbnz	r0, 800cb0e <_dtoa_r+0x2e>
 800cb04:	21ea      	movs	r1, #234	; 0xea
 800cb06:	4bae      	ldr	r3, [pc, #696]	; (800cdc0 <_dtoa_r+0x2e0>)
 800cb08:	48ae      	ldr	r0, [pc, #696]	; (800cdc4 <_dtoa_r+0x2e4>)
 800cb0a:	f001 fba1 	bl	800e250 <__assert_func>
 800cb0e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cb12:	6004      	str	r4, [r0, #0]
 800cb14:	60c4      	str	r4, [r0, #12]
 800cb16:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cb18:	6819      	ldr	r1, [r3, #0]
 800cb1a:	b151      	cbz	r1, 800cb32 <_dtoa_r+0x52>
 800cb1c:	685a      	ldr	r2, [r3, #4]
 800cb1e:	2301      	movs	r3, #1
 800cb20:	4093      	lsls	r3, r2
 800cb22:	604a      	str	r2, [r1, #4]
 800cb24:	608b      	str	r3, [r1, #8]
 800cb26:	4628      	mov	r0, r5
 800cb28:	f000 fe30 	bl	800d78c <_Bfree>
 800cb2c:	2200      	movs	r2, #0
 800cb2e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cb30:	601a      	str	r2, [r3, #0]
 800cb32:	1e3b      	subs	r3, r7, #0
 800cb34:	bfaf      	iteee	ge
 800cb36:	2300      	movge	r3, #0
 800cb38:	2201      	movlt	r2, #1
 800cb3a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800cb3e:	9305      	strlt	r3, [sp, #20]
 800cb40:	bfa8      	it	ge
 800cb42:	f8c8 3000 	strge.w	r3, [r8]
 800cb46:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800cb4a:	4b9f      	ldr	r3, [pc, #636]	; (800cdc8 <_dtoa_r+0x2e8>)
 800cb4c:	bfb8      	it	lt
 800cb4e:	f8c8 2000 	strlt.w	r2, [r8]
 800cb52:	ea33 0309 	bics.w	r3, r3, r9
 800cb56:	d119      	bne.n	800cb8c <_dtoa_r+0xac>
 800cb58:	f242 730f 	movw	r3, #9999	; 0x270f
 800cb5c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800cb5e:	6013      	str	r3, [r2, #0]
 800cb60:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cb64:	4333      	orrs	r3, r6
 800cb66:	f000 8580 	beq.w	800d66a <_dtoa_r+0xb8a>
 800cb6a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800cb6c:	b953      	cbnz	r3, 800cb84 <_dtoa_r+0xa4>
 800cb6e:	4b97      	ldr	r3, [pc, #604]	; (800cdcc <_dtoa_r+0x2ec>)
 800cb70:	e022      	b.n	800cbb8 <_dtoa_r+0xd8>
 800cb72:	4b97      	ldr	r3, [pc, #604]	; (800cdd0 <_dtoa_r+0x2f0>)
 800cb74:	9308      	str	r3, [sp, #32]
 800cb76:	3308      	adds	r3, #8
 800cb78:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800cb7a:	6013      	str	r3, [r2, #0]
 800cb7c:	9808      	ldr	r0, [sp, #32]
 800cb7e:	b019      	add	sp, #100	; 0x64
 800cb80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb84:	4b91      	ldr	r3, [pc, #580]	; (800cdcc <_dtoa_r+0x2ec>)
 800cb86:	9308      	str	r3, [sp, #32]
 800cb88:	3303      	adds	r3, #3
 800cb8a:	e7f5      	b.n	800cb78 <_dtoa_r+0x98>
 800cb8c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800cb90:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800cb94:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cb98:	2200      	movs	r2, #0
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	f7f3 ff04 	bl	80009a8 <__aeabi_dcmpeq>
 800cba0:	4680      	mov	r8, r0
 800cba2:	b158      	cbz	r0, 800cbbc <_dtoa_r+0xdc>
 800cba4:	2301      	movs	r3, #1
 800cba6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800cba8:	6013      	str	r3, [r2, #0]
 800cbaa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	f000 8559 	beq.w	800d664 <_dtoa_r+0xb84>
 800cbb2:	4888      	ldr	r0, [pc, #544]	; (800cdd4 <_dtoa_r+0x2f4>)
 800cbb4:	6018      	str	r0, [r3, #0]
 800cbb6:	1e43      	subs	r3, r0, #1
 800cbb8:	9308      	str	r3, [sp, #32]
 800cbba:	e7df      	b.n	800cb7c <_dtoa_r+0x9c>
 800cbbc:	ab16      	add	r3, sp, #88	; 0x58
 800cbbe:	9301      	str	r3, [sp, #4]
 800cbc0:	ab17      	add	r3, sp, #92	; 0x5c
 800cbc2:	9300      	str	r3, [sp, #0]
 800cbc4:	4628      	mov	r0, r5
 800cbc6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800cbca:	f001 f8c5 	bl	800dd58 <__d2b>
 800cbce:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800cbd2:	4682      	mov	sl, r0
 800cbd4:	2c00      	cmp	r4, #0
 800cbd6:	d07e      	beq.n	800ccd6 <_dtoa_r+0x1f6>
 800cbd8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cbdc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cbde:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800cbe2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cbe6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800cbea:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800cbee:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800cbf2:	2200      	movs	r2, #0
 800cbf4:	4b78      	ldr	r3, [pc, #480]	; (800cdd8 <_dtoa_r+0x2f8>)
 800cbf6:	f7f3 fab7 	bl	8000168 <__aeabi_dsub>
 800cbfa:	a36b      	add	r3, pc, #428	; (adr r3, 800cda8 <_dtoa_r+0x2c8>)
 800cbfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc00:	f7f3 fc6a 	bl	80004d8 <__aeabi_dmul>
 800cc04:	a36a      	add	r3, pc, #424	; (adr r3, 800cdb0 <_dtoa_r+0x2d0>)
 800cc06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc0a:	f7f3 faaf 	bl	800016c <__adddf3>
 800cc0e:	4606      	mov	r6, r0
 800cc10:	4620      	mov	r0, r4
 800cc12:	460f      	mov	r7, r1
 800cc14:	f7f3 fbf6 	bl	8000404 <__aeabi_i2d>
 800cc18:	a367      	add	r3, pc, #412	; (adr r3, 800cdb8 <_dtoa_r+0x2d8>)
 800cc1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc1e:	f7f3 fc5b 	bl	80004d8 <__aeabi_dmul>
 800cc22:	4602      	mov	r2, r0
 800cc24:	460b      	mov	r3, r1
 800cc26:	4630      	mov	r0, r6
 800cc28:	4639      	mov	r1, r7
 800cc2a:	f7f3 fa9f 	bl	800016c <__adddf3>
 800cc2e:	4606      	mov	r6, r0
 800cc30:	460f      	mov	r7, r1
 800cc32:	f7f3 ff01 	bl	8000a38 <__aeabi_d2iz>
 800cc36:	2200      	movs	r2, #0
 800cc38:	4681      	mov	r9, r0
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	4630      	mov	r0, r6
 800cc3e:	4639      	mov	r1, r7
 800cc40:	f7f3 febc 	bl	80009bc <__aeabi_dcmplt>
 800cc44:	b148      	cbz	r0, 800cc5a <_dtoa_r+0x17a>
 800cc46:	4648      	mov	r0, r9
 800cc48:	f7f3 fbdc 	bl	8000404 <__aeabi_i2d>
 800cc4c:	4632      	mov	r2, r6
 800cc4e:	463b      	mov	r3, r7
 800cc50:	f7f3 feaa 	bl	80009a8 <__aeabi_dcmpeq>
 800cc54:	b908      	cbnz	r0, 800cc5a <_dtoa_r+0x17a>
 800cc56:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800cc5a:	f1b9 0f16 	cmp.w	r9, #22
 800cc5e:	d857      	bhi.n	800cd10 <_dtoa_r+0x230>
 800cc60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cc64:	4b5d      	ldr	r3, [pc, #372]	; (800cddc <_dtoa_r+0x2fc>)
 800cc66:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800cc6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc6e:	f7f3 fea5 	bl	80009bc <__aeabi_dcmplt>
 800cc72:	2800      	cmp	r0, #0
 800cc74:	d04e      	beq.n	800cd14 <_dtoa_r+0x234>
 800cc76:	2300      	movs	r3, #0
 800cc78:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800cc7c:	930f      	str	r3, [sp, #60]	; 0x3c
 800cc7e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800cc80:	1b1c      	subs	r4, r3, r4
 800cc82:	1e63      	subs	r3, r4, #1
 800cc84:	9309      	str	r3, [sp, #36]	; 0x24
 800cc86:	bf49      	itett	mi
 800cc88:	f1c4 0301 	rsbmi	r3, r4, #1
 800cc8c:	2300      	movpl	r3, #0
 800cc8e:	9306      	strmi	r3, [sp, #24]
 800cc90:	2300      	movmi	r3, #0
 800cc92:	bf54      	ite	pl
 800cc94:	9306      	strpl	r3, [sp, #24]
 800cc96:	9309      	strmi	r3, [sp, #36]	; 0x24
 800cc98:	f1b9 0f00 	cmp.w	r9, #0
 800cc9c:	db3c      	blt.n	800cd18 <_dtoa_r+0x238>
 800cc9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cca0:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800cca4:	444b      	add	r3, r9
 800cca6:	9309      	str	r3, [sp, #36]	; 0x24
 800cca8:	2300      	movs	r3, #0
 800ccaa:	930a      	str	r3, [sp, #40]	; 0x28
 800ccac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ccae:	2b09      	cmp	r3, #9
 800ccb0:	d86c      	bhi.n	800cd8c <_dtoa_r+0x2ac>
 800ccb2:	2b05      	cmp	r3, #5
 800ccb4:	bfc4      	itt	gt
 800ccb6:	3b04      	subgt	r3, #4
 800ccb8:	9322      	strgt	r3, [sp, #136]	; 0x88
 800ccba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ccbc:	bfc8      	it	gt
 800ccbe:	2400      	movgt	r4, #0
 800ccc0:	f1a3 0302 	sub.w	r3, r3, #2
 800ccc4:	bfd8      	it	le
 800ccc6:	2401      	movle	r4, #1
 800ccc8:	2b03      	cmp	r3, #3
 800ccca:	f200 808b 	bhi.w	800cde4 <_dtoa_r+0x304>
 800ccce:	e8df f003 	tbb	[pc, r3]
 800ccd2:	4f2d      	.short	0x4f2d
 800ccd4:	5b4d      	.short	0x5b4d
 800ccd6:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800ccda:	441c      	add	r4, r3
 800ccdc:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800cce0:	2b20      	cmp	r3, #32
 800cce2:	bfc3      	ittte	gt
 800cce4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800cce8:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800ccec:	fa09 f303 	lslgt.w	r3, r9, r3
 800ccf0:	f1c3 0320 	rsble	r3, r3, #32
 800ccf4:	bfc6      	itte	gt
 800ccf6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ccfa:	4318      	orrgt	r0, r3
 800ccfc:	fa06 f003 	lslle.w	r0, r6, r3
 800cd00:	f7f3 fb70 	bl	80003e4 <__aeabi_ui2d>
 800cd04:	2301      	movs	r3, #1
 800cd06:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800cd0a:	3c01      	subs	r4, #1
 800cd0c:	9313      	str	r3, [sp, #76]	; 0x4c
 800cd0e:	e770      	b.n	800cbf2 <_dtoa_r+0x112>
 800cd10:	2301      	movs	r3, #1
 800cd12:	e7b3      	b.n	800cc7c <_dtoa_r+0x19c>
 800cd14:	900f      	str	r0, [sp, #60]	; 0x3c
 800cd16:	e7b2      	b.n	800cc7e <_dtoa_r+0x19e>
 800cd18:	9b06      	ldr	r3, [sp, #24]
 800cd1a:	eba3 0309 	sub.w	r3, r3, r9
 800cd1e:	9306      	str	r3, [sp, #24]
 800cd20:	f1c9 0300 	rsb	r3, r9, #0
 800cd24:	930a      	str	r3, [sp, #40]	; 0x28
 800cd26:	2300      	movs	r3, #0
 800cd28:	930e      	str	r3, [sp, #56]	; 0x38
 800cd2a:	e7bf      	b.n	800ccac <_dtoa_r+0x1cc>
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	930b      	str	r3, [sp, #44]	; 0x2c
 800cd30:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	dc59      	bgt.n	800cdea <_dtoa_r+0x30a>
 800cd36:	f04f 0b01 	mov.w	fp, #1
 800cd3a:	465b      	mov	r3, fp
 800cd3c:	f8cd b008 	str.w	fp, [sp, #8]
 800cd40:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800cd44:	2200      	movs	r2, #0
 800cd46:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800cd48:	6042      	str	r2, [r0, #4]
 800cd4a:	2204      	movs	r2, #4
 800cd4c:	f102 0614 	add.w	r6, r2, #20
 800cd50:	429e      	cmp	r6, r3
 800cd52:	6841      	ldr	r1, [r0, #4]
 800cd54:	d94f      	bls.n	800cdf6 <_dtoa_r+0x316>
 800cd56:	4628      	mov	r0, r5
 800cd58:	f000 fcd8 	bl	800d70c <_Balloc>
 800cd5c:	9008      	str	r0, [sp, #32]
 800cd5e:	2800      	cmp	r0, #0
 800cd60:	d14d      	bne.n	800cdfe <_dtoa_r+0x31e>
 800cd62:	4602      	mov	r2, r0
 800cd64:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800cd68:	4b1d      	ldr	r3, [pc, #116]	; (800cde0 <_dtoa_r+0x300>)
 800cd6a:	e6cd      	b.n	800cb08 <_dtoa_r+0x28>
 800cd6c:	2301      	movs	r3, #1
 800cd6e:	e7de      	b.n	800cd2e <_dtoa_r+0x24e>
 800cd70:	2300      	movs	r3, #0
 800cd72:	930b      	str	r3, [sp, #44]	; 0x2c
 800cd74:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800cd76:	eb09 0b03 	add.w	fp, r9, r3
 800cd7a:	f10b 0301 	add.w	r3, fp, #1
 800cd7e:	2b01      	cmp	r3, #1
 800cd80:	9302      	str	r3, [sp, #8]
 800cd82:	bfb8      	it	lt
 800cd84:	2301      	movlt	r3, #1
 800cd86:	e7dd      	b.n	800cd44 <_dtoa_r+0x264>
 800cd88:	2301      	movs	r3, #1
 800cd8a:	e7f2      	b.n	800cd72 <_dtoa_r+0x292>
 800cd8c:	2401      	movs	r4, #1
 800cd8e:	2300      	movs	r3, #0
 800cd90:	940b      	str	r4, [sp, #44]	; 0x2c
 800cd92:	9322      	str	r3, [sp, #136]	; 0x88
 800cd94:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800cd98:	2200      	movs	r2, #0
 800cd9a:	2312      	movs	r3, #18
 800cd9c:	f8cd b008 	str.w	fp, [sp, #8]
 800cda0:	9223      	str	r2, [sp, #140]	; 0x8c
 800cda2:	e7cf      	b.n	800cd44 <_dtoa_r+0x264>
 800cda4:	f3af 8000 	nop.w
 800cda8:	636f4361 	.word	0x636f4361
 800cdac:	3fd287a7 	.word	0x3fd287a7
 800cdb0:	8b60c8b3 	.word	0x8b60c8b3
 800cdb4:	3fc68a28 	.word	0x3fc68a28
 800cdb8:	509f79fb 	.word	0x509f79fb
 800cdbc:	3fd34413 	.word	0x3fd34413
 800cdc0:	0800f571 	.word	0x0800f571
 800cdc4:	0800f588 	.word	0x0800f588
 800cdc8:	7ff00000 	.word	0x7ff00000
 800cdcc:	0800f56d 	.word	0x0800f56d
 800cdd0:	0800f564 	.word	0x0800f564
 800cdd4:	0800f541 	.word	0x0800f541
 800cdd8:	3ff80000 	.word	0x3ff80000
 800cddc:	0800f680 	.word	0x0800f680
 800cde0:	0800f5e7 	.word	0x0800f5e7
 800cde4:	2301      	movs	r3, #1
 800cde6:	930b      	str	r3, [sp, #44]	; 0x2c
 800cde8:	e7d4      	b.n	800cd94 <_dtoa_r+0x2b4>
 800cdea:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800cdee:	465b      	mov	r3, fp
 800cdf0:	f8cd b008 	str.w	fp, [sp, #8]
 800cdf4:	e7a6      	b.n	800cd44 <_dtoa_r+0x264>
 800cdf6:	3101      	adds	r1, #1
 800cdf8:	6041      	str	r1, [r0, #4]
 800cdfa:	0052      	lsls	r2, r2, #1
 800cdfc:	e7a6      	b.n	800cd4c <_dtoa_r+0x26c>
 800cdfe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ce00:	9a08      	ldr	r2, [sp, #32]
 800ce02:	601a      	str	r2, [r3, #0]
 800ce04:	9b02      	ldr	r3, [sp, #8]
 800ce06:	2b0e      	cmp	r3, #14
 800ce08:	f200 80a8 	bhi.w	800cf5c <_dtoa_r+0x47c>
 800ce0c:	2c00      	cmp	r4, #0
 800ce0e:	f000 80a5 	beq.w	800cf5c <_dtoa_r+0x47c>
 800ce12:	f1b9 0f00 	cmp.w	r9, #0
 800ce16:	dd34      	ble.n	800ce82 <_dtoa_r+0x3a2>
 800ce18:	4a9a      	ldr	r2, [pc, #616]	; (800d084 <_dtoa_r+0x5a4>)
 800ce1a:	f009 030f 	and.w	r3, r9, #15
 800ce1e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ce22:	f419 7f80 	tst.w	r9, #256	; 0x100
 800ce26:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ce2a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800ce2e:	ea4f 1429 	mov.w	r4, r9, asr #4
 800ce32:	d016      	beq.n	800ce62 <_dtoa_r+0x382>
 800ce34:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ce38:	4b93      	ldr	r3, [pc, #588]	; (800d088 <_dtoa_r+0x5a8>)
 800ce3a:	2703      	movs	r7, #3
 800ce3c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ce40:	f7f3 fc74 	bl	800072c <__aeabi_ddiv>
 800ce44:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ce48:	f004 040f 	and.w	r4, r4, #15
 800ce4c:	4e8e      	ldr	r6, [pc, #568]	; (800d088 <_dtoa_r+0x5a8>)
 800ce4e:	b954      	cbnz	r4, 800ce66 <_dtoa_r+0x386>
 800ce50:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ce54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ce58:	f7f3 fc68 	bl	800072c <__aeabi_ddiv>
 800ce5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ce60:	e029      	b.n	800ceb6 <_dtoa_r+0x3d6>
 800ce62:	2702      	movs	r7, #2
 800ce64:	e7f2      	b.n	800ce4c <_dtoa_r+0x36c>
 800ce66:	07e1      	lsls	r1, r4, #31
 800ce68:	d508      	bpl.n	800ce7c <_dtoa_r+0x39c>
 800ce6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ce6e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ce72:	f7f3 fb31 	bl	80004d8 <__aeabi_dmul>
 800ce76:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ce7a:	3701      	adds	r7, #1
 800ce7c:	1064      	asrs	r4, r4, #1
 800ce7e:	3608      	adds	r6, #8
 800ce80:	e7e5      	b.n	800ce4e <_dtoa_r+0x36e>
 800ce82:	f000 80a5 	beq.w	800cfd0 <_dtoa_r+0x4f0>
 800ce86:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ce8a:	f1c9 0400 	rsb	r4, r9, #0
 800ce8e:	4b7d      	ldr	r3, [pc, #500]	; (800d084 <_dtoa_r+0x5a4>)
 800ce90:	f004 020f 	and.w	r2, r4, #15
 800ce94:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ce98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce9c:	f7f3 fb1c 	bl	80004d8 <__aeabi_dmul>
 800cea0:	2702      	movs	r7, #2
 800cea2:	2300      	movs	r3, #0
 800cea4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cea8:	4e77      	ldr	r6, [pc, #476]	; (800d088 <_dtoa_r+0x5a8>)
 800ceaa:	1124      	asrs	r4, r4, #4
 800ceac:	2c00      	cmp	r4, #0
 800ceae:	f040 8084 	bne.w	800cfba <_dtoa_r+0x4da>
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d1d2      	bne.n	800ce5c <_dtoa_r+0x37c>
 800ceb6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	f000 808b 	beq.w	800cfd4 <_dtoa_r+0x4f4>
 800cebe:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800cec2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800cec6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ceca:	2200      	movs	r2, #0
 800cecc:	4b6f      	ldr	r3, [pc, #444]	; (800d08c <_dtoa_r+0x5ac>)
 800cece:	f7f3 fd75 	bl	80009bc <__aeabi_dcmplt>
 800ced2:	2800      	cmp	r0, #0
 800ced4:	d07e      	beq.n	800cfd4 <_dtoa_r+0x4f4>
 800ced6:	9b02      	ldr	r3, [sp, #8]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d07b      	beq.n	800cfd4 <_dtoa_r+0x4f4>
 800cedc:	f1bb 0f00 	cmp.w	fp, #0
 800cee0:	dd38      	ble.n	800cf54 <_dtoa_r+0x474>
 800cee2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800cee6:	2200      	movs	r2, #0
 800cee8:	4b69      	ldr	r3, [pc, #420]	; (800d090 <_dtoa_r+0x5b0>)
 800ceea:	f7f3 faf5 	bl	80004d8 <__aeabi_dmul>
 800ceee:	465c      	mov	r4, fp
 800cef0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cef4:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
 800cef8:	3701      	adds	r7, #1
 800cefa:	4638      	mov	r0, r7
 800cefc:	f7f3 fa82 	bl	8000404 <__aeabi_i2d>
 800cf00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cf04:	f7f3 fae8 	bl	80004d8 <__aeabi_dmul>
 800cf08:	2200      	movs	r2, #0
 800cf0a:	4b62      	ldr	r3, [pc, #392]	; (800d094 <_dtoa_r+0x5b4>)
 800cf0c:	f7f3 f92e 	bl	800016c <__adddf3>
 800cf10:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800cf14:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800cf18:	9611      	str	r6, [sp, #68]	; 0x44
 800cf1a:	2c00      	cmp	r4, #0
 800cf1c:	d15d      	bne.n	800cfda <_dtoa_r+0x4fa>
 800cf1e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cf22:	2200      	movs	r2, #0
 800cf24:	4b5c      	ldr	r3, [pc, #368]	; (800d098 <_dtoa_r+0x5b8>)
 800cf26:	f7f3 f91f 	bl	8000168 <__aeabi_dsub>
 800cf2a:	4602      	mov	r2, r0
 800cf2c:	460b      	mov	r3, r1
 800cf2e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cf32:	4633      	mov	r3, r6
 800cf34:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800cf36:	f7f3 fd5f 	bl	80009f8 <__aeabi_dcmpgt>
 800cf3a:	2800      	cmp	r0, #0
 800cf3c:	f040 829e 	bne.w	800d47c <_dtoa_r+0x99c>
 800cf40:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cf44:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800cf46:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800cf4a:	f7f3 fd37 	bl	80009bc <__aeabi_dcmplt>
 800cf4e:	2800      	cmp	r0, #0
 800cf50:	f040 8292 	bne.w	800d478 <_dtoa_r+0x998>
 800cf54:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800cf58:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800cf5c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	f2c0 8153 	blt.w	800d20a <_dtoa_r+0x72a>
 800cf64:	f1b9 0f0e 	cmp.w	r9, #14
 800cf68:	f300 814f 	bgt.w	800d20a <_dtoa_r+0x72a>
 800cf6c:	4b45      	ldr	r3, [pc, #276]	; (800d084 <_dtoa_r+0x5a4>)
 800cf6e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800cf72:	e9d3 3400 	ldrd	r3, r4, [r3]
 800cf76:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800cf7a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	f280 80db 	bge.w	800d138 <_dtoa_r+0x658>
 800cf82:	9b02      	ldr	r3, [sp, #8]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	f300 80d7 	bgt.w	800d138 <_dtoa_r+0x658>
 800cf8a:	f040 8274 	bne.w	800d476 <_dtoa_r+0x996>
 800cf8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cf92:	2200      	movs	r2, #0
 800cf94:	4b40      	ldr	r3, [pc, #256]	; (800d098 <_dtoa_r+0x5b8>)
 800cf96:	f7f3 fa9f 	bl	80004d8 <__aeabi_dmul>
 800cf9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cf9e:	f7f3 fd21 	bl	80009e4 <__aeabi_dcmpge>
 800cfa2:	9c02      	ldr	r4, [sp, #8]
 800cfa4:	4626      	mov	r6, r4
 800cfa6:	2800      	cmp	r0, #0
 800cfa8:	f040 824a 	bne.w	800d440 <_dtoa_r+0x960>
 800cfac:	2331      	movs	r3, #49	; 0x31
 800cfae:	9f08      	ldr	r7, [sp, #32]
 800cfb0:	f109 0901 	add.w	r9, r9, #1
 800cfb4:	f807 3b01 	strb.w	r3, [r7], #1
 800cfb8:	e246      	b.n	800d448 <_dtoa_r+0x968>
 800cfba:	07e2      	lsls	r2, r4, #31
 800cfbc:	d505      	bpl.n	800cfca <_dtoa_r+0x4ea>
 800cfbe:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cfc2:	f7f3 fa89 	bl	80004d8 <__aeabi_dmul>
 800cfc6:	2301      	movs	r3, #1
 800cfc8:	3701      	adds	r7, #1
 800cfca:	1064      	asrs	r4, r4, #1
 800cfcc:	3608      	adds	r6, #8
 800cfce:	e76d      	b.n	800ceac <_dtoa_r+0x3cc>
 800cfd0:	2702      	movs	r7, #2
 800cfd2:	e770      	b.n	800ceb6 <_dtoa_r+0x3d6>
 800cfd4:	46c8      	mov	r8, r9
 800cfd6:	9c02      	ldr	r4, [sp, #8]
 800cfd8:	e78f      	b.n	800cefa <_dtoa_r+0x41a>
 800cfda:	9908      	ldr	r1, [sp, #32]
 800cfdc:	4b29      	ldr	r3, [pc, #164]	; (800d084 <_dtoa_r+0x5a4>)
 800cfde:	4421      	add	r1, r4
 800cfe0:	9112      	str	r1, [sp, #72]	; 0x48
 800cfe2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cfe4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cfe8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800cfec:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cff0:	2900      	cmp	r1, #0
 800cff2:	d055      	beq.n	800d0a0 <_dtoa_r+0x5c0>
 800cff4:	2000      	movs	r0, #0
 800cff6:	4929      	ldr	r1, [pc, #164]	; (800d09c <_dtoa_r+0x5bc>)
 800cff8:	f7f3 fb98 	bl	800072c <__aeabi_ddiv>
 800cffc:	463b      	mov	r3, r7
 800cffe:	4632      	mov	r2, r6
 800d000:	f7f3 f8b2 	bl	8000168 <__aeabi_dsub>
 800d004:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d008:	9f08      	ldr	r7, [sp, #32]
 800d00a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d00e:	f7f3 fd13 	bl	8000a38 <__aeabi_d2iz>
 800d012:	4604      	mov	r4, r0
 800d014:	f7f3 f9f6 	bl	8000404 <__aeabi_i2d>
 800d018:	4602      	mov	r2, r0
 800d01a:	460b      	mov	r3, r1
 800d01c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d020:	f7f3 f8a2 	bl	8000168 <__aeabi_dsub>
 800d024:	4602      	mov	r2, r0
 800d026:	460b      	mov	r3, r1
 800d028:	3430      	adds	r4, #48	; 0x30
 800d02a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d02e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d032:	f807 4b01 	strb.w	r4, [r7], #1
 800d036:	f7f3 fcc1 	bl	80009bc <__aeabi_dcmplt>
 800d03a:	2800      	cmp	r0, #0
 800d03c:	d174      	bne.n	800d128 <_dtoa_r+0x648>
 800d03e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d042:	2000      	movs	r0, #0
 800d044:	4911      	ldr	r1, [pc, #68]	; (800d08c <_dtoa_r+0x5ac>)
 800d046:	f7f3 f88f 	bl	8000168 <__aeabi_dsub>
 800d04a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d04e:	f7f3 fcb5 	bl	80009bc <__aeabi_dcmplt>
 800d052:	2800      	cmp	r0, #0
 800d054:	f040 80b6 	bne.w	800d1c4 <_dtoa_r+0x6e4>
 800d058:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d05a:	429f      	cmp	r7, r3
 800d05c:	f43f af7a 	beq.w	800cf54 <_dtoa_r+0x474>
 800d060:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d064:	2200      	movs	r2, #0
 800d066:	4b0a      	ldr	r3, [pc, #40]	; (800d090 <_dtoa_r+0x5b0>)
 800d068:	f7f3 fa36 	bl	80004d8 <__aeabi_dmul>
 800d06c:	2200      	movs	r2, #0
 800d06e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d072:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d076:	4b06      	ldr	r3, [pc, #24]	; (800d090 <_dtoa_r+0x5b0>)
 800d078:	f7f3 fa2e 	bl	80004d8 <__aeabi_dmul>
 800d07c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d080:	e7c3      	b.n	800d00a <_dtoa_r+0x52a>
 800d082:	bf00      	nop
 800d084:	0800f680 	.word	0x0800f680
 800d088:	0800f658 	.word	0x0800f658
 800d08c:	3ff00000 	.word	0x3ff00000
 800d090:	40240000 	.word	0x40240000
 800d094:	401c0000 	.word	0x401c0000
 800d098:	40140000 	.word	0x40140000
 800d09c:	3fe00000 	.word	0x3fe00000
 800d0a0:	4630      	mov	r0, r6
 800d0a2:	4639      	mov	r1, r7
 800d0a4:	f7f3 fa18 	bl	80004d8 <__aeabi_dmul>
 800d0a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d0aa:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d0ae:	9c08      	ldr	r4, [sp, #32]
 800d0b0:	9314      	str	r3, [sp, #80]	; 0x50
 800d0b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d0b6:	f7f3 fcbf 	bl	8000a38 <__aeabi_d2iz>
 800d0ba:	9015      	str	r0, [sp, #84]	; 0x54
 800d0bc:	f7f3 f9a2 	bl	8000404 <__aeabi_i2d>
 800d0c0:	4602      	mov	r2, r0
 800d0c2:	460b      	mov	r3, r1
 800d0c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d0c8:	f7f3 f84e 	bl	8000168 <__aeabi_dsub>
 800d0cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d0ce:	4606      	mov	r6, r0
 800d0d0:	3330      	adds	r3, #48	; 0x30
 800d0d2:	f804 3b01 	strb.w	r3, [r4], #1
 800d0d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d0d8:	460f      	mov	r7, r1
 800d0da:	429c      	cmp	r4, r3
 800d0dc:	f04f 0200 	mov.w	r2, #0
 800d0e0:	d124      	bne.n	800d12c <_dtoa_r+0x64c>
 800d0e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d0e6:	4bb3      	ldr	r3, [pc, #716]	; (800d3b4 <_dtoa_r+0x8d4>)
 800d0e8:	f7f3 f840 	bl	800016c <__adddf3>
 800d0ec:	4602      	mov	r2, r0
 800d0ee:	460b      	mov	r3, r1
 800d0f0:	4630      	mov	r0, r6
 800d0f2:	4639      	mov	r1, r7
 800d0f4:	f7f3 fc80 	bl	80009f8 <__aeabi_dcmpgt>
 800d0f8:	2800      	cmp	r0, #0
 800d0fa:	d162      	bne.n	800d1c2 <_dtoa_r+0x6e2>
 800d0fc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d100:	2000      	movs	r0, #0
 800d102:	49ac      	ldr	r1, [pc, #688]	; (800d3b4 <_dtoa_r+0x8d4>)
 800d104:	f7f3 f830 	bl	8000168 <__aeabi_dsub>
 800d108:	4602      	mov	r2, r0
 800d10a:	460b      	mov	r3, r1
 800d10c:	4630      	mov	r0, r6
 800d10e:	4639      	mov	r1, r7
 800d110:	f7f3 fc54 	bl	80009bc <__aeabi_dcmplt>
 800d114:	2800      	cmp	r0, #0
 800d116:	f43f af1d 	beq.w	800cf54 <_dtoa_r+0x474>
 800d11a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800d11c:	1e7b      	subs	r3, r7, #1
 800d11e:	9314      	str	r3, [sp, #80]	; 0x50
 800d120:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800d124:	2b30      	cmp	r3, #48	; 0x30
 800d126:	d0f8      	beq.n	800d11a <_dtoa_r+0x63a>
 800d128:	46c1      	mov	r9, r8
 800d12a:	e03a      	b.n	800d1a2 <_dtoa_r+0x6c2>
 800d12c:	4ba2      	ldr	r3, [pc, #648]	; (800d3b8 <_dtoa_r+0x8d8>)
 800d12e:	f7f3 f9d3 	bl	80004d8 <__aeabi_dmul>
 800d132:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d136:	e7bc      	b.n	800d0b2 <_dtoa_r+0x5d2>
 800d138:	9f08      	ldr	r7, [sp, #32]
 800d13a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d13e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d142:	f7f3 faf3 	bl	800072c <__aeabi_ddiv>
 800d146:	f7f3 fc77 	bl	8000a38 <__aeabi_d2iz>
 800d14a:	4604      	mov	r4, r0
 800d14c:	f7f3 f95a 	bl	8000404 <__aeabi_i2d>
 800d150:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d154:	f7f3 f9c0 	bl	80004d8 <__aeabi_dmul>
 800d158:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800d15c:	460b      	mov	r3, r1
 800d15e:	4602      	mov	r2, r0
 800d160:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d164:	f7f3 f800 	bl	8000168 <__aeabi_dsub>
 800d168:	f807 6b01 	strb.w	r6, [r7], #1
 800d16c:	9e08      	ldr	r6, [sp, #32]
 800d16e:	9b02      	ldr	r3, [sp, #8]
 800d170:	1bbe      	subs	r6, r7, r6
 800d172:	42b3      	cmp	r3, r6
 800d174:	d13a      	bne.n	800d1ec <_dtoa_r+0x70c>
 800d176:	4602      	mov	r2, r0
 800d178:	460b      	mov	r3, r1
 800d17a:	f7f2 fff7 	bl	800016c <__adddf3>
 800d17e:	4602      	mov	r2, r0
 800d180:	460b      	mov	r3, r1
 800d182:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d186:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d18a:	f7f3 fc35 	bl	80009f8 <__aeabi_dcmpgt>
 800d18e:	bb58      	cbnz	r0, 800d1e8 <_dtoa_r+0x708>
 800d190:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d194:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d198:	f7f3 fc06 	bl	80009a8 <__aeabi_dcmpeq>
 800d19c:	b108      	cbz	r0, 800d1a2 <_dtoa_r+0x6c2>
 800d19e:	07e1      	lsls	r1, r4, #31
 800d1a0:	d422      	bmi.n	800d1e8 <_dtoa_r+0x708>
 800d1a2:	4628      	mov	r0, r5
 800d1a4:	4651      	mov	r1, sl
 800d1a6:	f000 faf1 	bl	800d78c <_Bfree>
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	703b      	strb	r3, [r7, #0]
 800d1ae:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800d1b0:	f109 0001 	add.w	r0, r9, #1
 800d1b4:	6018      	str	r0, [r3, #0]
 800d1b6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	f43f acdf 	beq.w	800cb7c <_dtoa_r+0x9c>
 800d1be:	601f      	str	r7, [r3, #0]
 800d1c0:	e4dc      	b.n	800cb7c <_dtoa_r+0x9c>
 800d1c2:	4627      	mov	r7, r4
 800d1c4:	463b      	mov	r3, r7
 800d1c6:	461f      	mov	r7, r3
 800d1c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d1cc:	2a39      	cmp	r2, #57	; 0x39
 800d1ce:	d107      	bne.n	800d1e0 <_dtoa_r+0x700>
 800d1d0:	9a08      	ldr	r2, [sp, #32]
 800d1d2:	429a      	cmp	r2, r3
 800d1d4:	d1f7      	bne.n	800d1c6 <_dtoa_r+0x6e6>
 800d1d6:	2230      	movs	r2, #48	; 0x30
 800d1d8:	9908      	ldr	r1, [sp, #32]
 800d1da:	f108 0801 	add.w	r8, r8, #1
 800d1de:	700a      	strb	r2, [r1, #0]
 800d1e0:	781a      	ldrb	r2, [r3, #0]
 800d1e2:	3201      	adds	r2, #1
 800d1e4:	701a      	strb	r2, [r3, #0]
 800d1e6:	e79f      	b.n	800d128 <_dtoa_r+0x648>
 800d1e8:	46c8      	mov	r8, r9
 800d1ea:	e7eb      	b.n	800d1c4 <_dtoa_r+0x6e4>
 800d1ec:	2200      	movs	r2, #0
 800d1ee:	4b72      	ldr	r3, [pc, #456]	; (800d3b8 <_dtoa_r+0x8d8>)
 800d1f0:	f7f3 f972 	bl	80004d8 <__aeabi_dmul>
 800d1f4:	4602      	mov	r2, r0
 800d1f6:	460b      	mov	r3, r1
 800d1f8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d1fc:	2200      	movs	r2, #0
 800d1fe:	2300      	movs	r3, #0
 800d200:	f7f3 fbd2 	bl	80009a8 <__aeabi_dcmpeq>
 800d204:	2800      	cmp	r0, #0
 800d206:	d098      	beq.n	800d13a <_dtoa_r+0x65a>
 800d208:	e7cb      	b.n	800d1a2 <_dtoa_r+0x6c2>
 800d20a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d20c:	2a00      	cmp	r2, #0
 800d20e:	f000 80cd 	beq.w	800d3ac <_dtoa_r+0x8cc>
 800d212:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800d214:	2a01      	cmp	r2, #1
 800d216:	f300 80af 	bgt.w	800d378 <_dtoa_r+0x898>
 800d21a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d21c:	2a00      	cmp	r2, #0
 800d21e:	f000 80a7 	beq.w	800d370 <_dtoa_r+0x890>
 800d222:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d226:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d228:	9f06      	ldr	r7, [sp, #24]
 800d22a:	9a06      	ldr	r2, [sp, #24]
 800d22c:	2101      	movs	r1, #1
 800d22e:	441a      	add	r2, r3
 800d230:	9206      	str	r2, [sp, #24]
 800d232:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d234:	4628      	mov	r0, r5
 800d236:	441a      	add	r2, r3
 800d238:	9209      	str	r2, [sp, #36]	; 0x24
 800d23a:	f000 fb61 	bl	800d900 <__i2b>
 800d23e:	4606      	mov	r6, r0
 800d240:	2f00      	cmp	r7, #0
 800d242:	dd0c      	ble.n	800d25e <_dtoa_r+0x77e>
 800d244:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d246:	2b00      	cmp	r3, #0
 800d248:	dd09      	ble.n	800d25e <_dtoa_r+0x77e>
 800d24a:	42bb      	cmp	r3, r7
 800d24c:	bfa8      	it	ge
 800d24e:	463b      	movge	r3, r7
 800d250:	9a06      	ldr	r2, [sp, #24]
 800d252:	1aff      	subs	r7, r7, r3
 800d254:	1ad2      	subs	r2, r2, r3
 800d256:	9206      	str	r2, [sp, #24]
 800d258:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d25a:	1ad3      	subs	r3, r2, r3
 800d25c:	9309      	str	r3, [sp, #36]	; 0x24
 800d25e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d260:	b1f3      	cbz	r3, 800d2a0 <_dtoa_r+0x7c0>
 800d262:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d264:	2b00      	cmp	r3, #0
 800d266:	f000 80a9 	beq.w	800d3bc <_dtoa_r+0x8dc>
 800d26a:	2c00      	cmp	r4, #0
 800d26c:	dd10      	ble.n	800d290 <_dtoa_r+0x7b0>
 800d26e:	4631      	mov	r1, r6
 800d270:	4622      	mov	r2, r4
 800d272:	4628      	mov	r0, r5
 800d274:	f000 fbfe 	bl	800da74 <__pow5mult>
 800d278:	4652      	mov	r2, sl
 800d27a:	4601      	mov	r1, r0
 800d27c:	4606      	mov	r6, r0
 800d27e:	4628      	mov	r0, r5
 800d280:	f000 fb54 	bl	800d92c <__multiply>
 800d284:	4680      	mov	r8, r0
 800d286:	4651      	mov	r1, sl
 800d288:	4628      	mov	r0, r5
 800d28a:	f000 fa7f 	bl	800d78c <_Bfree>
 800d28e:	46c2      	mov	sl, r8
 800d290:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d292:	1b1a      	subs	r2, r3, r4
 800d294:	d004      	beq.n	800d2a0 <_dtoa_r+0x7c0>
 800d296:	4651      	mov	r1, sl
 800d298:	4628      	mov	r0, r5
 800d29a:	f000 fbeb 	bl	800da74 <__pow5mult>
 800d29e:	4682      	mov	sl, r0
 800d2a0:	2101      	movs	r1, #1
 800d2a2:	4628      	mov	r0, r5
 800d2a4:	f000 fb2c 	bl	800d900 <__i2b>
 800d2a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d2aa:	4604      	mov	r4, r0
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	f340 8087 	ble.w	800d3c0 <_dtoa_r+0x8e0>
 800d2b2:	461a      	mov	r2, r3
 800d2b4:	4601      	mov	r1, r0
 800d2b6:	4628      	mov	r0, r5
 800d2b8:	f000 fbdc 	bl	800da74 <__pow5mult>
 800d2bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d2be:	4604      	mov	r4, r0
 800d2c0:	2b01      	cmp	r3, #1
 800d2c2:	f340 8080 	ble.w	800d3c6 <_dtoa_r+0x8e6>
 800d2c6:	f04f 0800 	mov.w	r8, #0
 800d2ca:	6923      	ldr	r3, [r4, #16]
 800d2cc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d2d0:	6918      	ldr	r0, [r3, #16]
 800d2d2:	f000 fac7 	bl	800d864 <__hi0bits>
 800d2d6:	f1c0 0020 	rsb	r0, r0, #32
 800d2da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2dc:	4418      	add	r0, r3
 800d2de:	f010 001f 	ands.w	r0, r0, #31
 800d2e2:	f000 8092 	beq.w	800d40a <_dtoa_r+0x92a>
 800d2e6:	f1c0 0320 	rsb	r3, r0, #32
 800d2ea:	2b04      	cmp	r3, #4
 800d2ec:	f340 808a 	ble.w	800d404 <_dtoa_r+0x924>
 800d2f0:	f1c0 001c 	rsb	r0, r0, #28
 800d2f4:	9b06      	ldr	r3, [sp, #24]
 800d2f6:	4407      	add	r7, r0
 800d2f8:	4403      	add	r3, r0
 800d2fa:	9306      	str	r3, [sp, #24]
 800d2fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2fe:	4403      	add	r3, r0
 800d300:	9309      	str	r3, [sp, #36]	; 0x24
 800d302:	9b06      	ldr	r3, [sp, #24]
 800d304:	2b00      	cmp	r3, #0
 800d306:	dd05      	ble.n	800d314 <_dtoa_r+0x834>
 800d308:	4651      	mov	r1, sl
 800d30a:	461a      	mov	r2, r3
 800d30c:	4628      	mov	r0, r5
 800d30e:	f000 fc0b 	bl	800db28 <__lshift>
 800d312:	4682      	mov	sl, r0
 800d314:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d316:	2b00      	cmp	r3, #0
 800d318:	dd05      	ble.n	800d326 <_dtoa_r+0x846>
 800d31a:	4621      	mov	r1, r4
 800d31c:	461a      	mov	r2, r3
 800d31e:	4628      	mov	r0, r5
 800d320:	f000 fc02 	bl	800db28 <__lshift>
 800d324:	4604      	mov	r4, r0
 800d326:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d070      	beq.n	800d40e <_dtoa_r+0x92e>
 800d32c:	4621      	mov	r1, r4
 800d32e:	4650      	mov	r0, sl
 800d330:	f000 fc66 	bl	800dc00 <__mcmp>
 800d334:	2800      	cmp	r0, #0
 800d336:	da6a      	bge.n	800d40e <_dtoa_r+0x92e>
 800d338:	2300      	movs	r3, #0
 800d33a:	4651      	mov	r1, sl
 800d33c:	220a      	movs	r2, #10
 800d33e:	4628      	mov	r0, r5
 800d340:	f000 fa46 	bl	800d7d0 <__multadd>
 800d344:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d346:	4682      	mov	sl, r0
 800d348:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	f000 8193 	beq.w	800d678 <_dtoa_r+0xb98>
 800d352:	4631      	mov	r1, r6
 800d354:	2300      	movs	r3, #0
 800d356:	220a      	movs	r2, #10
 800d358:	4628      	mov	r0, r5
 800d35a:	f000 fa39 	bl	800d7d0 <__multadd>
 800d35e:	f1bb 0f00 	cmp.w	fp, #0
 800d362:	4606      	mov	r6, r0
 800d364:	f300 8093 	bgt.w	800d48e <_dtoa_r+0x9ae>
 800d368:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d36a:	2b02      	cmp	r3, #2
 800d36c:	dc57      	bgt.n	800d41e <_dtoa_r+0x93e>
 800d36e:	e08e      	b.n	800d48e <_dtoa_r+0x9ae>
 800d370:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d372:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d376:	e756      	b.n	800d226 <_dtoa_r+0x746>
 800d378:	9b02      	ldr	r3, [sp, #8]
 800d37a:	1e5c      	subs	r4, r3, #1
 800d37c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d37e:	42a3      	cmp	r3, r4
 800d380:	bfb7      	itett	lt
 800d382:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800d384:	1b1c      	subge	r4, r3, r4
 800d386:	1ae2      	sublt	r2, r4, r3
 800d388:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800d38a:	bfbe      	ittt	lt
 800d38c:	940a      	strlt	r4, [sp, #40]	; 0x28
 800d38e:	189b      	addlt	r3, r3, r2
 800d390:	930e      	strlt	r3, [sp, #56]	; 0x38
 800d392:	9b02      	ldr	r3, [sp, #8]
 800d394:	bfb8      	it	lt
 800d396:	2400      	movlt	r4, #0
 800d398:	2b00      	cmp	r3, #0
 800d39a:	bfbb      	ittet	lt
 800d39c:	9b06      	ldrlt	r3, [sp, #24]
 800d39e:	9a02      	ldrlt	r2, [sp, #8]
 800d3a0:	9f06      	ldrge	r7, [sp, #24]
 800d3a2:	1a9f      	sublt	r7, r3, r2
 800d3a4:	bfac      	ite	ge
 800d3a6:	9b02      	ldrge	r3, [sp, #8]
 800d3a8:	2300      	movlt	r3, #0
 800d3aa:	e73e      	b.n	800d22a <_dtoa_r+0x74a>
 800d3ac:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d3ae:	9f06      	ldr	r7, [sp, #24]
 800d3b0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800d3b2:	e745      	b.n	800d240 <_dtoa_r+0x760>
 800d3b4:	3fe00000 	.word	0x3fe00000
 800d3b8:	40240000 	.word	0x40240000
 800d3bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d3be:	e76a      	b.n	800d296 <_dtoa_r+0x7b6>
 800d3c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d3c2:	2b01      	cmp	r3, #1
 800d3c4:	dc19      	bgt.n	800d3fa <_dtoa_r+0x91a>
 800d3c6:	9b04      	ldr	r3, [sp, #16]
 800d3c8:	b9bb      	cbnz	r3, 800d3fa <_dtoa_r+0x91a>
 800d3ca:	9b05      	ldr	r3, [sp, #20]
 800d3cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d3d0:	b99b      	cbnz	r3, 800d3fa <_dtoa_r+0x91a>
 800d3d2:	9b05      	ldr	r3, [sp, #20]
 800d3d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d3d8:	0d1b      	lsrs	r3, r3, #20
 800d3da:	051b      	lsls	r3, r3, #20
 800d3dc:	b183      	cbz	r3, 800d400 <_dtoa_r+0x920>
 800d3de:	f04f 0801 	mov.w	r8, #1
 800d3e2:	9b06      	ldr	r3, [sp, #24]
 800d3e4:	3301      	adds	r3, #1
 800d3e6:	9306      	str	r3, [sp, #24]
 800d3e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3ea:	3301      	adds	r3, #1
 800d3ec:	9309      	str	r3, [sp, #36]	; 0x24
 800d3ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	f47f af6a 	bne.w	800d2ca <_dtoa_r+0x7ea>
 800d3f6:	2001      	movs	r0, #1
 800d3f8:	e76f      	b.n	800d2da <_dtoa_r+0x7fa>
 800d3fa:	f04f 0800 	mov.w	r8, #0
 800d3fe:	e7f6      	b.n	800d3ee <_dtoa_r+0x90e>
 800d400:	4698      	mov	r8, r3
 800d402:	e7f4      	b.n	800d3ee <_dtoa_r+0x90e>
 800d404:	f43f af7d 	beq.w	800d302 <_dtoa_r+0x822>
 800d408:	4618      	mov	r0, r3
 800d40a:	301c      	adds	r0, #28
 800d40c:	e772      	b.n	800d2f4 <_dtoa_r+0x814>
 800d40e:	9b02      	ldr	r3, [sp, #8]
 800d410:	2b00      	cmp	r3, #0
 800d412:	dc36      	bgt.n	800d482 <_dtoa_r+0x9a2>
 800d414:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d416:	2b02      	cmp	r3, #2
 800d418:	dd33      	ble.n	800d482 <_dtoa_r+0x9a2>
 800d41a:	f8dd b008 	ldr.w	fp, [sp, #8]
 800d41e:	f1bb 0f00 	cmp.w	fp, #0
 800d422:	d10d      	bne.n	800d440 <_dtoa_r+0x960>
 800d424:	4621      	mov	r1, r4
 800d426:	465b      	mov	r3, fp
 800d428:	2205      	movs	r2, #5
 800d42a:	4628      	mov	r0, r5
 800d42c:	f000 f9d0 	bl	800d7d0 <__multadd>
 800d430:	4601      	mov	r1, r0
 800d432:	4604      	mov	r4, r0
 800d434:	4650      	mov	r0, sl
 800d436:	f000 fbe3 	bl	800dc00 <__mcmp>
 800d43a:	2800      	cmp	r0, #0
 800d43c:	f73f adb6 	bgt.w	800cfac <_dtoa_r+0x4cc>
 800d440:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d442:	9f08      	ldr	r7, [sp, #32]
 800d444:	ea6f 0903 	mvn.w	r9, r3
 800d448:	f04f 0800 	mov.w	r8, #0
 800d44c:	4621      	mov	r1, r4
 800d44e:	4628      	mov	r0, r5
 800d450:	f000 f99c 	bl	800d78c <_Bfree>
 800d454:	2e00      	cmp	r6, #0
 800d456:	f43f aea4 	beq.w	800d1a2 <_dtoa_r+0x6c2>
 800d45a:	f1b8 0f00 	cmp.w	r8, #0
 800d45e:	d005      	beq.n	800d46c <_dtoa_r+0x98c>
 800d460:	45b0      	cmp	r8, r6
 800d462:	d003      	beq.n	800d46c <_dtoa_r+0x98c>
 800d464:	4641      	mov	r1, r8
 800d466:	4628      	mov	r0, r5
 800d468:	f000 f990 	bl	800d78c <_Bfree>
 800d46c:	4631      	mov	r1, r6
 800d46e:	4628      	mov	r0, r5
 800d470:	f000 f98c 	bl	800d78c <_Bfree>
 800d474:	e695      	b.n	800d1a2 <_dtoa_r+0x6c2>
 800d476:	2400      	movs	r4, #0
 800d478:	4626      	mov	r6, r4
 800d47a:	e7e1      	b.n	800d440 <_dtoa_r+0x960>
 800d47c:	46c1      	mov	r9, r8
 800d47e:	4626      	mov	r6, r4
 800d480:	e594      	b.n	800cfac <_dtoa_r+0x4cc>
 800d482:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d484:	f8dd b008 	ldr.w	fp, [sp, #8]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	f000 80fc 	beq.w	800d686 <_dtoa_r+0xba6>
 800d48e:	2f00      	cmp	r7, #0
 800d490:	dd05      	ble.n	800d49e <_dtoa_r+0x9be>
 800d492:	4631      	mov	r1, r6
 800d494:	463a      	mov	r2, r7
 800d496:	4628      	mov	r0, r5
 800d498:	f000 fb46 	bl	800db28 <__lshift>
 800d49c:	4606      	mov	r6, r0
 800d49e:	f1b8 0f00 	cmp.w	r8, #0
 800d4a2:	d05c      	beq.n	800d55e <_dtoa_r+0xa7e>
 800d4a4:	4628      	mov	r0, r5
 800d4a6:	6871      	ldr	r1, [r6, #4]
 800d4a8:	f000 f930 	bl	800d70c <_Balloc>
 800d4ac:	4607      	mov	r7, r0
 800d4ae:	b928      	cbnz	r0, 800d4bc <_dtoa_r+0x9dc>
 800d4b0:	4602      	mov	r2, r0
 800d4b2:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d4b6:	4b7e      	ldr	r3, [pc, #504]	; (800d6b0 <_dtoa_r+0xbd0>)
 800d4b8:	f7ff bb26 	b.w	800cb08 <_dtoa_r+0x28>
 800d4bc:	6932      	ldr	r2, [r6, #16]
 800d4be:	f106 010c 	add.w	r1, r6, #12
 800d4c2:	3202      	adds	r2, #2
 800d4c4:	0092      	lsls	r2, r2, #2
 800d4c6:	300c      	adds	r0, #12
 800d4c8:	f000 f912 	bl	800d6f0 <memcpy>
 800d4cc:	2201      	movs	r2, #1
 800d4ce:	4639      	mov	r1, r7
 800d4d0:	4628      	mov	r0, r5
 800d4d2:	f000 fb29 	bl	800db28 <__lshift>
 800d4d6:	46b0      	mov	r8, r6
 800d4d8:	4606      	mov	r6, r0
 800d4da:	9b08      	ldr	r3, [sp, #32]
 800d4dc:	3301      	adds	r3, #1
 800d4de:	9302      	str	r3, [sp, #8]
 800d4e0:	9b08      	ldr	r3, [sp, #32]
 800d4e2:	445b      	add	r3, fp
 800d4e4:	930a      	str	r3, [sp, #40]	; 0x28
 800d4e6:	9b04      	ldr	r3, [sp, #16]
 800d4e8:	f003 0301 	and.w	r3, r3, #1
 800d4ec:	9309      	str	r3, [sp, #36]	; 0x24
 800d4ee:	9b02      	ldr	r3, [sp, #8]
 800d4f0:	4621      	mov	r1, r4
 800d4f2:	4650      	mov	r0, sl
 800d4f4:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800d4f8:	f7ff fa62 	bl	800c9c0 <quorem>
 800d4fc:	4603      	mov	r3, r0
 800d4fe:	4641      	mov	r1, r8
 800d500:	3330      	adds	r3, #48	; 0x30
 800d502:	9004      	str	r0, [sp, #16]
 800d504:	4650      	mov	r0, sl
 800d506:	930b      	str	r3, [sp, #44]	; 0x2c
 800d508:	f000 fb7a 	bl	800dc00 <__mcmp>
 800d50c:	4632      	mov	r2, r6
 800d50e:	9006      	str	r0, [sp, #24]
 800d510:	4621      	mov	r1, r4
 800d512:	4628      	mov	r0, r5
 800d514:	f000 fb90 	bl	800dc38 <__mdiff>
 800d518:	68c2      	ldr	r2, [r0, #12]
 800d51a:	4607      	mov	r7, r0
 800d51c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d51e:	bb02      	cbnz	r2, 800d562 <_dtoa_r+0xa82>
 800d520:	4601      	mov	r1, r0
 800d522:	4650      	mov	r0, sl
 800d524:	f000 fb6c 	bl	800dc00 <__mcmp>
 800d528:	4602      	mov	r2, r0
 800d52a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d52c:	4639      	mov	r1, r7
 800d52e:	4628      	mov	r0, r5
 800d530:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800d534:	f000 f92a 	bl	800d78c <_Bfree>
 800d538:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d53a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d53c:	9f02      	ldr	r7, [sp, #8]
 800d53e:	ea43 0102 	orr.w	r1, r3, r2
 800d542:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d544:	430b      	orrs	r3, r1
 800d546:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d548:	d10d      	bne.n	800d566 <_dtoa_r+0xa86>
 800d54a:	2b39      	cmp	r3, #57	; 0x39
 800d54c:	d027      	beq.n	800d59e <_dtoa_r+0xabe>
 800d54e:	9a06      	ldr	r2, [sp, #24]
 800d550:	2a00      	cmp	r2, #0
 800d552:	dd01      	ble.n	800d558 <_dtoa_r+0xa78>
 800d554:	9b04      	ldr	r3, [sp, #16]
 800d556:	3331      	adds	r3, #49	; 0x31
 800d558:	f88b 3000 	strb.w	r3, [fp]
 800d55c:	e776      	b.n	800d44c <_dtoa_r+0x96c>
 800d55e:	4630      	mov	r0, r6
 800d560:	e7b9      	b.n	800d4d6 <_dtoa_r+0x9f6>
 800d562:	2201      	movs	r2, #1
 800d564:	e7e2      	b.n	800d52c <_dtoa_r+0xa4c>
 800d566:	9906      	ldr	r1, [sp, #24]
 800d568:	2900      	cmp	r1, #0
 800d56a:	db04      	blt.n	800d576 <_dtoa_r+0xa96>
 800d56c:	9822      	ldr	r0, [sp, #136]	; 0x88
 800d56e:	4301      	orrs	r1, r0
 800d570:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d572:	4301      	orrs	r1, r0
 800d574:	d120      	bne.n	800d5b8 <_dtoa_r+0xad8>
 800d576:	2a00      	cmp	r2, #0
 800d578:	ddee      	ble.n	800d558 <_dtoa_r+0xa78>
 800d57a:	4651      	mov	r1, sl
 800d57c:	2201      	movs	r2, #1
 800d57e:	4628      	mov	r0, r5
 800d580:	9302      	str	r3, [sp, #8]
 800d582:	f000 fad1 	bl	800db28 <__lshift>
 800d586:	4621      	mov	r1, r4
 800d588:	4682      	mov	sl, r0
 800d58a:	f000 fb39 	bl	800dc00 <__mcmp>
 800d58e:	2800      	cmp	r0, #0
 800d590:	9b02      	ldr	r3, [sp, #8]
 800d592:	dc02      	bgt.n	800d59a <_dtoa_r+0xaba>
 800d594:	d1e0      	bne.n	800d558 <_dtoa_r+0xa78>
 800d596:	07da      	lsls	r2, r3, #31
 800d598:	d5de      	bpl.n	800d558 <_dtoa_r+0xa78>
 800d59a:	2b39      	cmp	r3, #57	; 0x39
 800d59c:	d1da      	bne.n	800d554 <_dtoa_r+0xa74>
 800d59e:	2339      	movs	r3, #57	; 0x39
 800d5a0:	f88b 3000 	strb.w	r3, [fp]
 800d5a4:	463b      	mov	r3, r7
 800d5a6:	461f      	mov	r7, r3
 800d5a8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800d5ac:	3b01      	subs	r3, #1
 800d5ae:	2a39      	cmp	r2, #57	; 0x39
 800d5b0:	d050      	beq.n	800d654 <_dtoa_r+0xb74>
 800d5b2:	3201      	adds	r2, #1
 800d5b4:	701a      	strb	r2, [r3, #0]
 800d5b6:	e749      	b.n	800d44c <_dtoa_r+0x96c>
 800d5b8:	2a00      	cmp	r2, #0
 800d5ba:	dd03      	ble.n	800d5c4 <_dtoa_r+0xae4>
 800d5bc:	2b39      	cmp	r3, #57	; 0x39
 800d5be:	d0ee      	beq.n	800d59e <_dtoa_r+0xabe>
 800d5c0:	3301      	adds	r3, #1
 800d5c2:	e7c9      	b.n	800d558 <_dtoa_r+0xa78>
 800d5c4:	9a02      	ldr	r2, [sp, #8]
 800d5c6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d5c8:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d5cc:	428a      	cmp	r2, r1
 800d5ce:	d02a      	beq.n	800d626 <_dtoa_r+0xb46>
 800d5d0:	4651      	mov	r1, sl
 800d5d2:	2300      	movs	r3, #0
 800d5d4:	220a      	movs	r2, #10
 800d5d6:	4628      	mov	r0, r5
 800d5d8:	f000 f8fa 	bl	800d7d0 <__multadd>
 800d5dc:	45b0      	cmp	r8, r6
 800d5de:	4682      	mov	sl, r0
 800d5e0:	f04f 0300 	mov.w	r3, #0
 800d5e4:	f04f 020a 	mov.w	r2, #10
 800d5e8:	4641      	mov	r1, r8
 800d5ea:	4628      	mov	r0, r5
 800d5ec:	d107      	bne.n	800d5fe <_dtoa_r+0xb1e>
 800d5ee:	f000 f8ef 	bl	800d7d0 <__multadd>
 800d5f2:	4680      	mov	r8, r0
 800d5f4:	4606      	mov	r6, r0
 800d5f6:	9b02      	ldr	r3, [sp, #8]
 800d5f8:	3301      	adds	r3, #1
 800d5fa:	9302      	str	r3, [sp, #8]
 800d5fc:	e777      	b.n	800d4ee <_dtoa_r+0xa0e>
 800d5fe:	f000 f8e7 	bl	800d7d0 <__multadd>
 800d602:	4631      	mov	r1, r6
 800d604:	4680      	mov	r8, r0
 800d606:	2300      	movs	r3, #0
 800d608:	220a      	movs	r2, #10
 800d60a:	4628      	mov	r0, r5
 800d60c:	f000 f8e0 	bl	800d7d0 <__multadd>
 800d610:	4606      	mov	r6, r0
 800d612:	e7f0      	b.n	800d5f6 <_dtoa_r+0xb16>
 800d614:	f1bb 0f00 	cmp.w	fp, #0
 800d618:	bfcc      	ite	gt
 800d61a:	465f      	movgt	r7, fp
 800d61c:	2701      	movle	r7, #1
 800d61e:	f04f 0800 	mov.w	r8, #0
 800d622:	9a08      	ldr	r2, [sp, #32]
 800d624:	4417      	add	r7, r2
 800d626:	4651      	mov	r1, sl
 800d628:	2201      	movs	r2, #1
 800d62a:	4628      	mov	r0, r5
 800d62c:	9302      	str	r3, [sp, #8]
 800d62e:	f000 fa7b 	bl	800db28 <__lshift>
 800d632:	4621      	mov	r1, r4
 800d634:	4682      	mov	sl, r0
 800d636:	f000 fae3 	bl	800dc00 <__mcmp>
 800d63a:	2800      	cmp	r0, #0
 800d63c:	dcb2      	bgt.n	800d5a4 <_dtoa_r+0xac4>
 800d63e:	d102      	bne.n	800d646 <_dtoa_r+0xb66>
 800d640:	9b02      	ldr	r3, [sp, #8]
 800d642:	07db      	lsls	r3, r3, #31
 800d644:	d4ae      	bmi.n	800d5a4 <_dtoa_r+0xac4>
 800d646:	463b      	mov	r3, r7
 800d648:	461f      	mov	r7, r3
 800d64a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d64e:	2a30      	cmp	r2, #48	; 0x30
 800d650:	d0fa      	beq.n	800d648 <_dtoa_r+0xb68>
 800d652:	e6fb      	b.n	800d44c <_dtoa_r+0x96c>
 800d654:	9a08      	ldr	r2, [sp, #32]
 800d656:	429a      	cmp	r2, r3
 800d658:	d1a5      	bne.n	800d5a6 <_dtoa_r+0xac6>
 800d65a:	2331      	movs	r3, #49	; 0x31
 800d65c:	f109 0901 	add.w	r9, r9, #1
 800d660:	7013      	strb	r3, [r2, #0]
 800d662:	e6f3      	b.n	800d44c <_dtoa_r+0x96c>
 800d664:	4b13      	ldr	r3, [pc, #76]	; (800d6b4 <_dtoa_r+0xbd4>)
 800d666:	f7ff baa7 	b.w	800cbb8 <_dtoa_r+0xd8>
 800d66a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	f47f aa80 	bne.w	800cb72 <_dtoa_r+0x92>
 800d672:	4b11      	ldr	r3, [pc, #68]	; (800d6b8 <_dtoa_r+0xbd8>)
 800d674:	f7ff baa0 	b.w	800cbb8 <_dtoa_r+0xd8>
 800d678:	f1bb 0f00 	cmp.w	fp, #0
 800d67c:	dc03      	bgt.n	800d686 <_dtoa_r+0xba6>
 800d67e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d680:	2b02      	cmp	r3, #2
 800d682:	f73f aecc 	bgt.w	800d41e <_dtoa_r+0x93e>
 800d686:	9f08      	ldr	r7, [sp, #32]
 800d688:	4621      	mov	r1, r4
 800d68a:	4650      	mov	r0, sl
 800d68c:	f7ff f998 	bl	800c9c0 <quorem>
 800d690:	9a08      	ldr	r2, [sp, #32]
 800d692:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800d696:	f807 3b01 	strb.w	r3, [r7], #1
 800d69a:	1aba      	subs	r2, r7, r2
 800d69c:	4593      	cmp	fp, r2
 800d69e:	ddb9      	ble.n	800d614 <_dtoa_r+0xb34>
 800d6a0:	4651      	mov	r1, sl
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	220a      	movs	r2, #10
 800d6a6:	4628      	mov	r0, r5
 800d6a8:	f000 f892 	bl	800d7d0 <__multadd>
 800d6ac:	4682      	mov	sl, r0
 800d6ae:	e7eb      	b.n	800d688 <_dtoa_r+0xba8>
 800d6b0:	0800f5e7 	.word	0x0800f5e7
 800d6b4:	0800f540 	.word	0x0800f540
 800d6b8:	0800f564 	.word	0x0800f564

0800d6bc <_localeconv_r>:
 800d6bc:	4800      	ldr	r0, [pc, #0]	; (800d6c0 <_localeconv_r+0x4>)
 800d6be:	4770      	bx	lr
 800d6c0:	20000354 	.word	0x20000354

0800d6c4 <malloc>:
 800d6c4:	4b02      	ldr	r3, [pc, #8]	; (800d6d0 <malloc+0xc>)
 800d6c6:	4601      	mov	r1, r0
 800d6c8:	6818      	ldr	r0, [r3, #0]
 800d6ca:	f000 bbfb 	b.w	800dec4 <_malloc_r>
 800d6ce:	bf00      	nop
 800d6d0:	20000200 	.word	0x20000200

0800d6d4 <memchr>:
 800d6d4:	4603      	mov	r3, r0
 800d6d6:	b510      	push	{r4, lr}
 800d6d8:	b2c9      	uxtb	r1, r1
 800d6da:	4402      	add	r2, r0
 800d6dc:	4293      	cmp	r3, r2
 800d6de:	4618      	mov	r0, r3
 800d6e0:	d101      	bne.n	800d6e6 <memchr+0x12>
 800d6e2:	2000      	movs	r0, #0
 800d6e4:	e003      	b.n	800d6ee <memchr+0x1a>
 800d6e6:	7804      	ldrb	r4, [r0, #0]
 800d6e8:	3301      	adds	r3, #1
 800d6ea:	428c      	cmp	r4, r1
 800d6ec:	d1f6      	bne.n	800d6dc <memchr+0x8>
 800d6ee:	bd10      	pop	{r4, pc}

0800d6f0 <memcpy>:
 800d6f0:	440a      	add	r2, r1
 800d6f2:	4291      	cmp	r1, r2
 800d6f4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d6f8:	d100      	bne.n	800d6fc <memcpy+0xc>
 800d6fa:	4770      	bx	lr
 800d6fc:	b510      	push	{r4, lr}
 800d6fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d702:	4291      	cmp	r1, r2
 800d704:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d708:	d1f9      	bne.n	800d6fe <memcpy+0xe>
 800d70a:	bd10      	pop	{r4, pc}

0800d70c <_Balloc>:
 800d70c:	b570      	push	{r4, r5, r6, lr}
 800d70e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d710:	4604      	mov	r4, r0
 800d712:	460d      	mov	r5, r1
 800d714:	b976      	cbnz	r6, 800d734 <_Balloc+0x28>
 800d716:	2010      	movs	r0, #16
 800d718:	f7ff ffd4 	bl	800d6c4 <malloc>
 800d71c:	4602      	mov	r2, r0
 800d71e:	6260      	str	r0, [r4, #36]	; 0x24
 800d720:	b920      	cbnz	r0, 800d72c <_Balloc+0x20>
 800d722:	2166      	movs	r1, #102	; 0x66
 800d724:	4b17      	ldr	r3, [pc, #92]	; (800d784 <_Balloc+0x78>)
 800d726:	4818      	ldr	r0, [pc, #96]	; (800d788 <_Balloc+0x7c>)
 800d728:	f000 fd92 	bl	800e250 <__assert_func>
 800d72c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d730:	6006      	str	r6, [r0, #0]
 800d732:	60c6      	str	r6, [r0, #12]
 800d734:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d736:	68f3      	ldr	r3, [r6, #12]
 800d738:	b183      	cbz	r3, 800d75c <_Balloc+0x50>
 800d73a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d73c:	68db      	ldr	r3, [r3, #12]
 800d73e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d742:	b9b8      	cbnz	r0, 800d774 <_Balloc+0x68>
 800d744:	2101      	movs	r1, #1
 800d746:	fa01 f605 	lsl.w	r6, r1, r5
 800d74a:	1d72      	adds	r2, r6, #5
 800d74c:	4620      	mov	r0, r4
 800d74e:	0092      	lsls	r2, r2, #2
 800d750:	f000 fb5e 	bl	800de10 <_calloc_r>
 800d754:	b160      	cbz	r0, 800d770 <_Balloc+0x64>
 800d756:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d75a:	e00e      	b.n	800d77a <_Balloc+0x6e>
 800d75c:	2221      	movs	r2, #33	; 0x21
 800d75e:	2104      	movs	r1, #4
 800d760:	4620      	mov	r0, r4
 800d762:	f000 fb55 	bl	800de10 <_calloc_r>
 800d766:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d768:	60f0      	str	r0, [r6, #12]
 800d76a:	68db      	ldr	r3, [r3, #12]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d1e4      	bne.n	800d73a <_Balloc+0x2e>
 800d770:	2000      	movs	r0, #0
 800d772:	bd70      	pop	{r4, r5, r6, pc}
 800d774:	6802      	ldr	r2, [r0, #0]
 800d776:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d77a:	2300      	movs	r3, #0
 800d77c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d780:	e7f7      	b.n	800d772 <_Balloc+0x66>
 800d782:	bf00      	nop
 800d784:	0800f571 	.word	0x0800f571
 800d788:	0800f5f8 	.word	0x0800f5f8

0800d78c <_Bfree>:
 800d78c:	b570      	push	{r4, r5, r6, lr}
 800d78e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d790:	4605      	mov	r5, r0
 800d792:	460c      	mov	r4, r1
 800d794:	b976      	cbnz	r6, 800d7b4 <_Bfree+0x28>
 800d796:	2010      	movs	r0, #16
 800d798:	f7ff ff94 	bl	800d6c4 <malloc>
 800d79c:	4602      	mov	r2, r0
 800d79e:	6268      	str	r0, [r5, #36]	; 0x24
 800d7a0:	b920      	cbnz	r0, 800d7ac <_Bfree+0x20>
 800d7a2:	218a      	movs	r1, #138	; 0x8a
 800d7a4:	4b08      	ldr	r3, [pc, #32]	; (800d7c8 <_Bfree+0x3c>)
 800d7a6:	4809      	ldr	r0, [pc, #36]	; (800d7cc <_Bfree+0x40>)
 800d7a8:	f000 fd52 	bl	800e250 <__assert_func>
 800d7ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d7b0:	6006      	str	r6, [r0, #0]
 800d7b2:	60c6      	str	r6, [r0, #12]
 800d7b4:	b13c      	cbz	r4, 800d7c6 <_Bfree+0x3a>
 800d7b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d7b8:	6862      	ldr	r2, [r4, #4]
 800d7ba:	68db      	ldr	r3, [r3, #12]
 800d7bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d7c0:	6021      	str	r1, [r4, #0]
 800d7c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d7c6:	bd70      	pop	{r4, r5, r6, pc}
 800d7c8:	0800f571 	.word	0x0800f571
 800d7cc:	0800f5f8 	.word	0x0800f5f8

0800d7d0 <__multadd>:
 800d7d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7d4:	4698      	mov	r8, r3
 800d7d6:	460c      	mov	r4, r1
 800d7d8:	2300      	movs	r3, #0
 800d7da:	690e      	ldr	r6, [r1, #16]
 800d7dc:	4607      	mov	r7, r0
 800d7de:	f101 0014 	add.w	r0, r1, #20
 800d7e2:	6805      	ldr	r5, [r0, #0]
 800d7e4:	3301      	adds	r3, #1
 800d7e6:	b2a9      	uxth	r1, r5
 800d7e8:	fb02 8101 	mla	r1, r2, r1, r8
 800d7ec:	0c2d      	lsrs	r5, r5, #16
 800d7ee:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800d7f2:	fb02 c505 	mla	r5, r2, r5, ip
 800d7f6:	b289      	uxth	r1, r1
 800d7f8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800d7fc:	429e      	cmp	r6, r3
 800d7fe:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800d802:	f840 1b04 	str.w	r1, [r0], #4
 800d806:	dcec      	bgt.n	800d7e2 <__multadd+0x12>
 800d808:	f1b8 0f00 	cmp.w	r8, #0
 800d80c:	d022      	beq.n	800d854 <__multadd+0x84>
 800d80e:	68a3      	ldr	r3, [r4, #8]
 800d810:	42b3      	cmp	r3, r6
 800d812:	dc19      	bgt.n	800d848 <__multadd+0x78>
 800d814:	6861      	ldr	r1, [r4, #4]
 800d816:	4638      	mov	r0, r7
 800d818:	3101      	adds	r1, #1
 800d81a:	f7ff ff77 	bl	800d70c <_Balloc>
 800d81e:	4605      	mov	r5, r0
 800d820:	b928      	cbnz	r0, 800d82e <__multadd+0x5e>
 800d822:	4602      	mov	r2, r0
 800d824:	21b5      	movs	r1, #181	; 0xb5
 800d826:	4b0d      	ldr	r3, [pc, #52]	; (800d85c <__multadd+0x8c>)
 800d828:	480d      	ldr	r0, [pc, #52]	; (800d860 <__multadd+0x90>)
 800d82a:	f000 fd11 	bl	800e250 <__assert_func>
 800d82e:	6922      	ldr	r2, [r4, #16]
 800d830:	f104 010c 	add.w	r1, r4, #12
 800d834:	3202      	adds	r2, #2
 800d836:	0092      	lsls	r2, r2, #2
 800d838:	300c      	adds	r0, #12
 800d83a:	f7ff ff59 	bl	800d6f0 <memcpy>
 800d83e:	4621      	mov	r1, r4
 800d840:	4638      	mov	r0, r7
 800d842:	f7ff ffa3 	bl	800d78c <_Bfree>
 800d846:	462c      	mov	r4, r5
 800d848:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800d84c:	3601      	adds	r6, #1
 800d84e:	f8c3 8014 	str.w	r8, [r3, #20]
 800d852:	6126      	str	r6, [r4, #16]
 800d854:	4620      	mov	r0, r4
 800d856:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d85a:	bf00      	nop
 800d85c:	0800f5e7 	.word	0x0800f5e7
 800d860:	0800f5f8 	.word	0x0800f5f8

0800d864 <__hi0bits>:
 800d864:	0c02      	lsrs	r2, r0, #16
 800d866:	0412      	lsls	r2, r2, #16
 800d868:	4603      	mov	r3, r0
 800d86a:	b9ca      	cbnz	r2, 800d8a0 <__hi0bits+0x3c>
 800d86c:	0403      	lsls	r3, r0, #16
 800d86e:	2010      	movs	r0, #16
 800d870:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800d874:	bf04      	itt	eq
 800d876:	021b      	lsleq	r3, r3, #8
 800d878:	3008      	addeq	r0, #8
 800d87a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800d87e:	bf04      	itt	eq
 800d880:	011b      	lsleq	r3, r3, #4
 800d882:	3004      	addeq	r0, #4
 800d884:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800d888:	bf04      	itt	eq
 800d88a:	009b      	lsleq	r3, r3, #2
 800d88c:	3002      	addeq	r0, #2
 800d88e:	2b00      	cmp	r3, #0
 800d890:	db05      	blt.n	800d89e <__hi0bits+0x3a>
 800d892:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800d896:	f100 0001 	add.w	r0, r0, #1
 800d89a:	bf08      	it	eq
 800d89c:	2020      	moveq	r0, #32
 800d89e:	4770      	bx	lr
 800d8a0:	2000      	movs	r0, #0
 800d8a2:	e7e5      	b.n	800d870 <__hi0bits+0xc>

0800d8a4 <__lo0bits>:
 800d8a4:	6803      	ldr	r3, [r0, #0]
 800d8a6:	4602      	mov	r2, r0
 800d8a8:	f013 0007 	ands.w	r0, r3, #7
 800d8ac:	d00b      	beq.n	800d8c6 <__lo0bits+0x22>
 800d8ae:	07d9      	lsls	r1, r3, #31
 800d8b0:	d422      	bmi.n	800d8f8 <__lo0bits+0x54>
 800d8b2:	0798      	lsls	r0, r3, #30
 800d8b4:	bf49      	itett	mi
 800d8b6:	085b      	lsrmi	r3, r3, #1
 800d8b8:	089b      	lsrpl	r3, r3, #2
 800d8ba:	2001      	movmi	r0, #1
 800d8bc:	6013      	strmi	r3, [r2, #0]
 800d8be:	bf5c      	itt	pl
 800d8c0:	2002      	movpl	r0, #2
 800d8c2:	6013      	strpl	r3, [r2, #0]
 800d8c4:	4770      	bx	lr
 800d8c6:	b299      	uxth	r1, r3
 800d8c8:	b909      	cbnz	r1, 800d8ce <__lo0bits+0x2a>
 800d8ca:	2010      	movs	r0, #16
 800d8cc:	0c1b      	lsrs	r3, r3, #16
 800d8ce:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d8d2:	bf04      	itt	eq
 800d8d4:	0a1b      	lsreq	r3, r3, #8
 800d8d6:	3008      	addeq	r0, #8
 800d8d8:	0719      	lsls	r1, r3, #28
 800d8da:	bf04      	itt	eq
 800d8dc:	091b      	lsreq	r3, r3, #4
 800d8de:	3004      	addeq	r0, #4
 800d8e0:	0799      	lsls	r1, r3, #30
 800d8e2:	bf04      	itt	eq
 800d8e4:	089b      	lsreq	r3, r3, #2
 800d8e6:	3002      	addeq	r0, #2
 800d8e8:	07d9      	lsls	r1, r3, #31
 800d8ea:	d403      	bmi.n	800d8f4 <__lo0bits+0x50>
 800d8ec:	085b      	lsrs	r3, r3, #1
 800d8ee:	f100 0001 	add.w	r0, r0, #1
 800d8f2:	d003      	beq.n	800d8fc <__lo0bits+0x58>
 800d8f4:	6013      	str	r3, [r2, #0]
 800d8f6:	4770      	bx	lr
 800d8f8:	2000      	movs	r0, #0
 800d8fa:	4770      	bx	lr
 800d8fc:	2020      	movs	r0, #32
 800d8fe:	4770      	bx	lr

0800d900 <__i2b>:
 800d900:	b510      	push	{r4, lr}
 800d902:	460c      	mov	r4, r1
 800d904:	2101      	movs	r1, #1
 800d906:	f7ff ff01 	bl	800d70c <_Balloc>
 800d90a:	4602      	mov	r2, r0
 800d90c:	b928      	cbnz	r0, 800d91a <__i2b+0x1a>
 800d90e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d912:	4b04      	ldr	r3, [pc, #16]	; (800d924 <__i2b+0x24>)
 800d914:	4804      	ldr	r0, [pc, #16]	; (800d928 <__i2b+0x28>)
 800d916:	f000 fc9b 	bl	800e250 <__assert_func>
 800d91a:	2301      	movs	r3, #1
 800d91c:	6144      	str	r4, [r0, #20]
 800d91e:	6103      	str	r3, [r0, #16]
 800d920:	bd10      	pop	{r4, pc}
 800d922:	bf00      	nop
 800d924:	0800f5e7 	.word	0x0800f5e7
 800d928:	0800f5f8 	.word	0x0800f5f8

0800d92c <__multiply>:
 800d92c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d930:	4614      	mov	r4, r2
 800d932:	690a      	ldr	r2, [r1, #16]
 800d934:	6923      	ldr	r3, [r4, #16]
 800d936:	460d      	mov	r5, r1
 800d938:	429a      	cmp	r2, r3
 800d93a:	bfbe      	ittt	lt
 800d93c:	460b      	movlt	r3, r1
 800d93e:	4625      	movlt	r5, r4
 800d940:	461c      	movlt	r4, r3
 800d942:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800d946:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d94a:	68ab      	ldr	r3, [r5, #8]
 800d94c:	6869      	ldr	r1, [r5, #4]
 800d94e:	eb0a 0709 	add.w	r7, sl, r9
 800d952:	42bb      	cmp	r3, r7
 800d954:	b085      	sub	sp, #20
 800d956:	bfb8      	it	lt
 800d958:	3101      	addlt	r1, #1
 800d95a:	f7ff fed7 	bl	800d70c <_Balloc>
 800d95e:	b930      	cbnz	r0, 800d96e <__multiply+0x42>
 800d960:	4602      	mov	r2, r0
 800d962:	f240 115d 	movw	r1, #349	; 0x15d
 800d966:	4b41      	ldr	r3, [pc, #260]	; (800da6c <__multiply+0x140>)
 800d968:	4841      	ldr	r0, [pc, #260]	; (800da70 <__multiply+0x144>)
 800d96a:	f000 fc71 	bl	800e250 <__assert_func>
 800d96e:	f100 0614 	add.w	r6, r0, #20
 800d972:	4633      	mov	r3, r6
 800d974:	2200      	movs	r2, #0
 800d976:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800d97a:	4543      	cmp	r3, r8
 800d97c:	d31e      	bcc.n	800d9bc <__multiply+0x90>
 800d97e:	f105 0c14 	add.w	ip, r5, #20
 800d982:	f104 0314 	add.w	r3, r4, #20
 800d986:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800d98a:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800d98e:	9202      	str	r2, [sp, #8]
 800d990:	ebac 0205 	sub.w	r2, ip, r5
 800d994:	3a15      	subs	r2, #21
 800d996:	f022 0203 	bic.w	r2, r2, #3
 800d99a:	3204      	adds	r2, #4
 800d99c:	f105 0115 	add.w	r1, r5, #21
 800d9a0:	458c      	cmp	ip, r1
 800d9a2:	bf38      	it	cc
 800d9a4:	2204      	movcc	r2, #4
 800d9a6:	9201      	str	r2, [sp, #4]
 800d9a8:	9a02      	ldr	r2, [sp, #8]
 800d9aa:	9303      	str	r3, [sp, #12]
 800d9ac:	429a      	cmp	r2, r3
 800d9ae:	d808      	bhi.n	800d9c2 <__multiply+0x96>
 800d9b0:	2f00      	cmp	r7, #0
 800d9b2:	dc55      	bgt.n	800da60 <__multiply+0x134>
 800d9b4:	6107      	str	r7, [r0, #16]
 800d9b6:	b005      	add	sp, #20
 800d9b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9bc:	f843 2b04 	str.w	r2, [r3], #4
 800d9c0:	e7db      	b.n	800d97a <__multiply+0x4e>
 800d9c2:	f8b3 a000 	ldrh.w	sl, [r3]
 800d9c6:	f1ba 0f00 	cmp.w	sl, #0
 800d9ca:	d020      	beq.n	800da0e <__multiply+0xe2>
 800d9cc:	46b1      	mov	r9, r6
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	f105 0e14 	add.w	lr, r5, #20
 800d9d4:	f85e 4b04 	ldr.w	r4, [lr], #4
 800d9d8:	f8d9 b000 	ldr.w	fp, [r9]
 800d9dc:	b2a1      	uxth	r1, r4
 800d9de:	fa1f fb8b 	uxth.w	fp, fp
 800d9e2:	fb0a b101 	mla	r1, sl, r1, fp
 800d9e6:	4411      	add	r1, r2
 800d9e8:	f8d9 2000 	ldr.w	r2, [r9]
 800d9ec:	0c24      	lsrs	r4, r4, #16
 800d9ee:	0c12      	lsrs	r2, r2, #16
 800d9f0:	fb0a 2404 	mla	r4, sl, r4, r2
 800d9f4:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800d9f8:	b289      	uxth	r1, r1
 800d9fa:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800d9fe:	45f4      	cmp	ip, lr
 800da00:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800da04:	f849 1b04 	str.w	r1, [r9], #4
 800da08:	d8e4      	bhi.n	800d9d4 <__multiply+0xa8>
 800da0a:	9901      	ldr	r1, [sp, #4]
 800da0c:	5072      	str	r2, [r6, r1]
 800da0e:	9a03      	ldr	r2, [sp, #12]
 800da10:	3304      	adds	r3, #4
 800da12:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800da16:	f1b9 0f00 	cmp.w	r9, #0
 800da1a:	d01f      	beq.n	800da5c <__multiply+0x130>
 800da1c:	46b6      	mov	lr, r6
 800da1e:	f04f 0a00 	mov.w	sl, #0
 800da22:	6834      	ldr	r4, [r6, #0]
 800da24:	f105 0114 	add.w	r1, r5, #20
 800da28:	880a      	ldrh	r2, [r1, #0]
 800da2a:	f8be b002 	ldrh.w	fp, [lr, #2]
 800da2e:	b2a4      	uxth	r4, r4
 800da30:	fb09 b202 	mla	r2, r9, r2, fp
 800da34:	4492      	add	sl, r2
 800da36:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800da3a:	f84e 4b04 	str.w	r4, [lr], #4
 800da3e:	f851 4b04 	ldr.w	r4, [r1], #4
 800da42:	f8be 2000 	ldrh.w	r2, [lr]
 800da46:	0c24      	lsrs	r4, r4, #16
 800da48:	fb09 2404 	mla	r4, r9, r4, r2
 800da4c:	458c      	cmp	ip, r1
 800da4e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800da52:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800da56:	d8e7      	bhi.n	800da28 <__multiply+0xfc>
 800da58:	9a01      	ldr	r2, [sp, #4]
 800da5a:	50b4      	str	r4, [r6, r2]
 800da5c:	3604      	adds	r6, #4
 800da5e:	e7a3      	b.n	800d9a8 <__multiply+0x7c>
 800da60:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800da64:	2b00      	cmp	r3, #0
 800da66:	d1a5      	bne.n	800d9b4 <__multiply+0x88>
 800da68:	3f01      	subs	r7, #1
 800da6a:	e7a1      	b.n	800d9b0 <__multiply+0x84>
 800da6c:	0800f5e7 	.word	0x0800f5e7
 800da70:	0800f5f8 	.word	0x0800f5f8

0800da74 <__pow5mult>:
 800da74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da78:	4615      	mov	r5, r2
 800da7a:	f012 0203 	ands.w	r2, r2, #3
 800da7e:	4606      	mov	r6, r0
 800da80:	460f      	mov	r7, r1
 800da82:	d007      	beq.n	800da94 <__pow5mult+0x20>
 800da84:	4c25      	ldr	r4, [pc, #148]	; (800db1c <__pow5mult+0xa8>)
 800da86:	3a01      	subs	r2, #1
 800da88:	2300      	movs	r3, #0
 800da8a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800da8e:	f7ff fe9f 	bl	800d7d0 <__multadd>
 800da92:	4607      	mov	r7, r0
 800da94:	10ad      	asrs	r5, r5, #2
 800da96:	d03d      	beq.n	800db14 <__pow5mult+0xa0>
 800da98:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800da9a:	b97c      	cbnz	r4, 800dabc <__pow5mult+0x48>
 800da9c:	2010      	movs	r0, #16
 800da9e:	f7ff fe11 	bl	800d6c4 <malloc>
 800daa2:	4602      	mov	r2, r0
 800daa4:	6270      	str	r0, [r6, #36]	; 0x24
 800daa6:	b928      	cbnz	r0, 800dab4 <__pow5mult+0x40>
 800daa8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800daac:	4b1c      	ldr	r3, [pc, #112]	; (800db20 <__pow5mult+0xac>)
 800daae:	481d      	ldr	r0, [pc, #116]	; (800db24 <__pow5mult+0xb0>)
 800dab0:	f000 fbce 	bl	800e250 <__assert_func>
 800dab4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dab8:	6004      	str	r4, [r0, #0]
 800daba:	60c4      	str	r4, [r0, #12]
 800dabc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800dac0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dac4:	b94c      	cbnz	r4, 800dada <__pow5mult+0x66>
 800dac6:	f240 2171 	movw	r1, #625	; 0x271
 800daca:	4630      	mov	r0, r6
 800dacc:	f7ff ff18 	bl	800d900 <__i2b>
 800dad0:	2300      	movs	r3, #0
 800dad2:	4604      	mov	r4, r0
 800dad4:	f8c8 0008 	str.w	r0, [r8, #8]
 800dad8:	6003      	str	r3, [r0, #0]
 800dada:	f04f 0900 	mov.w	r9, #0
 800dade:	07eb      	lsls	r3, r5, #31
 800dae0:	d50a      	bpl.n	800daf8 <__pow5mult+0x84>
 800dae2:	4639      	mov	r1, r7
 800dae4:	4622      	mov	r2, r4
 800dae6:	4630      	mov	r0, r6
 800dae8:	f7ff ff20 	bl	800d92c <__multiply>
 800daec:	4680      	mov	r8, r0
 800daee:	4639      	mov	r1, r7
 800daf0:	4630      	mov	r0, r6
 800daf2:	f7ff fe4b 	bl	800d78c <_Bfree>
 800daf6:	4647      	mov	r7, r8
 800daf8:	106d      	asrs	r5, r5, #1
 800dafa:	d00b      	beq.n	800db14 <__pow5mult+0xa0>
 800dafc:	6820      	ldr	r0, [r4, #0]
 800dafe:	b938      	cbnz	r0, 800db10 <__pow5mult+0x9c>
 800db00:	4622      	mov	r2, r4
 800db02:	4621      	mov	r1, r4
 800db04:	4630      	mov	r0, r6
 800db06:	f7ff ff11 	bl	800d92c <__multiply>
 800db0a:	6020      	str	r0, [r4, #0]
 800db0c:	f8c0 9000 	str.w	r9, [r0]
 800db10:	4604      	mov	r4, r0
 800db12:	e7e4      	b.n	800dade <__pow5mult+0x6a>
 800db14:	4638      	mov	r0, r7
 800db16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db1a:	bf00      	nop
 800db1c:	0800f748 	.word	0x0800f748
 800db20:	0800f571 	.word	0x0800f571
 800db24:	0800f5f8 	.word	0x0800f5f8

0800db28 <__lshift>:
 800db28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db2c:	460c      	mov	r4, r1
 800db2e:	4607      	mov	r7, r0
 800db30:	4691      	mov	r9, r2
 800db32:	6923      	ldr	r3, [r4, #16]
 800db34:	6849      	ldr	r1, [r1, #4]
 800db36:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800db3a:	68a3      	ldr	r3, [r4, #8]
 800db3c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800db40:	f108 0601 	add.w	r6, r8, #1
 800db44:	42b3      	cmp	r3, r6
 800db46:	db0b      	blt.n	800db60 <__lshift+0x38>
 800db48:	4638      	mov	r0, r7
 800db4a:	f7ff fddf 	bl	800d70c <_Balloc>
 800db4e:	4605      	mov	r5, r0
 800db50:	b948      	cbnz	r0, 800db66 <__lshift+0x3e>
 800db52:	4602      	mov	r2, r0
 800db54:	f240 11d9 	movw	r1, #473	; 0x1d9
 800db58:	4b27      	ldr	r3, [pc, #156]	; (800dbf8 <__lshift+0xd0>)
 800db5a:	4828      	ldr	r0, [pc, #160]	; (800dbfc <__lshift+0xd4>)
 800db5c:	f000 fb78 	bl	800e250 <__assert_func>
 800db60:	3101      	adds	r1, #1
 800db62:	005b      	lsls	r3, r3, #1
 800db64:	e7ee      	b.n	800db44 <__lshift+0x1c>
 800db66:	2300      	movs	r3, #0
 800db68:	f100 0114 	add.w	r1, r0, #20
 800db6c:	f100 0210 	add.w	r2, r0, #16
 800db70:	4618      	mov	r0, r3
 800db72:	4553      	cmp	r3, sl
 800db74:	db33      	blt.n	800dbde <__lshift+0xb6>
 800db76:	6920      	ldr	r0, [r4, #16]
 800db78:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800db7c:	f104 0314 	add.w	r3, r4, #20
 800db80:	f019 091f 	ands.w	r9, r9, #31
 800db84:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800db88:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800db8c:	d02b      	beq.n	800dbe6 <__lshift+0xbe>
 800db8e:	468a      	mov	sl, r1
 800db90:	2200      	movs	r2, #0
 800db92:	f1c9 0e20 	rsb	lr, r9, #32
 800db96:	6818      	ldr	r0, [r3, #0]
 800db98:	fa00 f009 	lsl.w	r0, r0, r9
 800db9c:	4302      	orrs	r2, r0
 800db9e:	f84a 2b04 	str.w	r2, [sl], #4
 800dba2:	f853 2b04 	ldr.w	r2, [r3], #4
 800dba6:	459c      	cmp	ip, r3
 800dba8:	fa22 f20e 	lsr.w	r2, r2, lr
 800dbac:	d8f3      	bhi.n	800db96 <__lshift+0x6e>
 800dbae:	ebac 0304 	sub.w	r3, ip, r4
 800dbb2:	3b15      	subs	r3, #21
 800dbb4:	f023 0303 	bic.w	r3, r3, #3
 800dbb8:	3304      	adds	r3, #4
 800dbba:	f104 0015 	add.w	r0, r4, #21
 800dbbe:	4584      	cmp	ip, r0
 800dbc0:	bf38      	it	cc
 800dbc2:	2304      	movcc	r3, #4
 800dbc4:	50ca      	str	r2, [r1, r3]
 800dbc6:	b10a      	cbz	r2, 800dbcc <__lshift+0xa4>
 800dbc8:	f108 0602 	add.w	r6, r8, #2
 800dbcc:	3e01      	subs	r6, #1
 800dbce:	4638      	mov	r0, r7
 800dbd0:	4621      	mov	r1, r4
 800dbd2:	612e      	str	r6, [r5, #16]
 800dbd4:	f7ff fdda 	bl	800d78c <_Bfree>
 800dbd8:	4628      	mov	r0, r5
 800dbda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbde:	f842 0f04 	str.w	r0, [r2, #4]!
 800dbe2:	3301      	adds	r3, #1
 800dbe4:	e7c5      	b.n	800db72 <__lshift+0x4a>
 800dbe6:	3904      	subs	r1, #4
 800dbe8:	f853 2b04 	ldr.w	r2, [r3], #4
 800dbec:	459c      	cmp	ip, r3
 800dbee:	f841 2f04 	str.w	r2, [r1, #4]!
 800dbf2:	d8f9      	bhi.n	800dbe8 <__lshift+0xc0>
 800dbf4:	e7ea      	b.n	800dbcc <__lshift+0xa4>
 800dbf6:	bf00      	nop
 800dbf8:	0800f5e7 	.word	0x0800f5e7
 800dbfc:	0800f5f8 	.word	0x0800f5f8

0800dc00 <__mcmp>:
 800dc00:	4603      	mov	r3, r0
 800dc02:	690a      	ldr	r2, [r1, #16]
 800dc04:	6900      	ldr	r0, [r0, #16]
 800dc06:	b530      	push	{r4, r5, lr}
 800dc08:	1a80      	subs	r0, r0, r2
 800dc0a:	d10d      	bne.n	800dc28 <__mcmp+0x28>
 800dc0c:	3314      	adds	r3, #20
 800dc0e:	3114      	adds	r1, #20
 800dc10:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800dc14:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800dc18:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800dc1c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800dc20:	4295      	cmp	r5, r2
 800dc22:	d002      	beq.n	800dc2a <__mcmp+0x2a>
 800dc24:	d304      	bcc.n	800dc30 <__mcmp+0x30>
 800dc26:	2001      	movs	r0, #1
 800dc28:	bd30      	pop	{r4, r5, pc}
 800dc2a:	42a3      	cmp	r3, r4
 800dc2c:	d3f4      	bcc.n	800dc18 <__mcmp+0x18>
 800dc2e:	e7fb      	b.n	800dc28 <__mcmp+0x28>
 800dc30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dc34:	e7f8      	b.n	800dc28 <__mcmp+0x28>
	...

0800dc38 <__mdiff>:
 800dc38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc3c:	460c      	mov	r4, r1
 800dc3e:	4606      	mov	r6, r0
 800dc40:	4611      	mov	r1, r2
 800dc42:	4620      	mov	r0, r4
 800dc44:	4692      	mov	sl, r2
 800dc46:	f7ff ffdb 	bl	800dc00 <__mcmp>
 800dc4a:	1e05      	subs	r5, r0, #0
 800dc4c:	d111      	bne.n	800dc72 <__mdiff+0x3a>
 800dc4e:	4629      	mov	r1, r5
 800dc50:	4630      	mov	r0, r6
 800dc52:	f7ff fd5b 	bl	800d70c <_Balloc>
 800dc56:	4602      	mov	r2, r0
 800dc58:	b928      	cbnz	r0, 800dc66 <__mdiff+0x2e>
 800dc5a:	f240 2132 	movw	r1, #562	; 0x232
 800dc5e:	4b3c      	ldr	r3, [pc, #240]	; (800dd50 <__mdiff+0x118>)
 800dc60:	483c      	ldr	r0, [pc, #240]	; (800dd54 <__mdiff+0x11c>)
 800dc62:	f000 faf5 	bl	800e250 <__assert_func>
 800dc66:	2301      	movs	r3, #1
 800dc68:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dc6c:	4610      	mov	r0, r2
 800dc6e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc72:	bfa4      	itt	ge
 800dc74:	4653      	movge	r3, sl
 800dc76:	46a2      	movge	sl, r4
 800dc78:	4630      	mov	r0, r6
 800dc7a:	f8da 1004 	ldr.w	r1, [sl, #4]
 800dc7e:	bfa6      	itte	ge
 800dc80:	461c      	movge	r4, r3
 800dc82:	2500      	movge	r5, #0
 800dc84:	2501      	movlt	r5, #1
 800dc86:	f7ff fd41 	bl	800d70c <_Balloc>
 800dc8a:	4602      	mov	r2, r0
 800dc8c:	b918      	cbnz	r0, 800dc96 <__mdiff+0x5e>
 800dc8e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800dc92:	4b2f      	ldr	r3, [pc, #188]	; (800dd50 <__mdiff+0x118>)
 800dc94:	e7e4      	b.n	800dc60 <__mdiff+0x28>
 800dc96:	f100 0814 	add.w	r8, r0, #20
 800dc9a:	f8da 7010 	ldr.w	r7, [sl, #16]
 800dc9e:	60c5      	str	r5, [r0, #12]
 800dca0:	f04f 0c00 	mov.w	ip, #0
 800dca4:	f10a 0514 	add.w	r5, sl, #20
 800dca8:	f10a 0010 	add.w	r0, sl, #16
 800dcac:	46c2      	mov	sl, r8
 800dcae:	6926      	ldr	r6, [r4, #16]
 800dcb0:	f104 0914 	add.w	r9, r4, #20
 800dcb4:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800dcb8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800dcbc:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800dcc0:	f859 3b04 	ldr.w	r3, [r9], #4
 800dcc4:	fa1f f18b 	uxth.w	r1, fp
 800dcc8:	4461      	add	r1, ip
 800dcca:	fa1f fc83 	uxth.w	ip, r3
 800dcce:	0c1b      	lsrs	r3, r3, #16
 800dcd0:	eba1 010c 	sub.w	r1, r1, ip
 800dcd4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800dcd8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800dcdc:	b289      	uxth	r1, r1
 800dcde:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800dce2:	454e      	cmp	r6, r9
 800dce4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800dce8:	f84a 3b04 	str.w	r3, [sl], #4
 800dcec:	d8e6      	bhi.n	800dcbc <__mdiff+0x84>
 800dcee:	1b33      	subs	r3, r6, r4
 800dcf0:	3b15      	subs	r3, #21
 800dcf2:	f023 0303 	bic.w	r3, r3, #3
 800dcf6:	3415      	adds	r4, #21
 800dcf8:	3304      	adds	r3, #4
 800dcfa:	42a6      	cmp	r6, r4
 800dcfc:	bf38      	it	cc
 800dcfe:	2304      	movcc	r3, #4
 800dd00:	441d      	add	r5, r3
 800dd02:	4443      	add	r3, r8
 800dd04:	461e      	mov	r6, r3
 800dd06:	462c      	mov	r4, r5
 800dd08:	4574      	cmp	r4, lr
 800dd0a:	d30e      	bcc.n	800dd2a <__mdiff+0xf2>
 800dd0c:	f10e 0103 	add.w	r1, lr, #3
 800dd10:	1b49      	subs	r1, r1, r5
 800dd12:	f021 0103 	bic.w	r1, r1, #3
 800dd16:	3d03      	subs	r5, #3
 800dd18:	45ae      	cmp	lr, r5
 800dd1a:	bf38      	it	cc
 800dd1c:	2100      	movcc	r1, #0
 800dd1e:	4419      	add	r1, r3
 800dd20:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800dd24:	b18b      	cbz	r3, 800dd4a <__mdiff+0x112>
 800dd26:	6117      	str	r7, [r2, #16]
 800dd28:	e7a0      	b.n	800dc6c <__mdiff+0x34>
 800dd2a:	f854 8b04 	ldr.w	r8, [r4], #4
 800dd2e:	fa1f f188 	uxth.w	r1, r8
 800dd32:	4461      	add	r1, ip
 800dd34:	1408      	asrs	r0, r1, #16
 800dd36:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800dd3a:	b289      	uxth	r1, r1
 800dd3c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800dd40:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800dd44:	f846 1b04 	str.w	r1, [r6], #4
 800dd48:	e7de      	b.n	800dd08 <__mdiff+0xd0>
 800dd4a:	3f01      	subs	r7, #1
 800dd4c:	e7e8      	b.n	800dd20 <__mdiff+0xe8>
 800dd4e:	bf00      	nop
 800dd50:	0800f5e7 	.word	0x0800f5e7
 800dd54:	0800f5f8 	.word	0x0800f5f8

0800dd58 <__d2b>:
 800dd58:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800dd5c:	2101      	movs	r1, #1
 800dd5e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800dd62:	4690      	mov	r8, r2
 800dd64:	461d      	mov	r5, r3
 800dd66:	f7ff fcd1 	bl	800d70c <_Balloc>
 800dd6a:	4604      	mov	r4, r0
 800dd6c:	b930      	cbnz	r0, 800dd7c <__d2b+0x24>
 800dd6e:	4602      	mov	r2, r0
 800dd70:	f240 310a 	movw	r1, #778	; 0x30a
 800dd74:	4b24      	ldr	r3, [pc, #144]	; (800de08 <__d2b+0xb0>)
 800dd76:	4825      	ldr	r0, [pc, #148]	; (800de0c <__d2b+0xb4>)
 800dd78:	f000 fa6a 	bl	800e250 <__assert_func>
 800dd7c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800dd80:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800dd84:	bb2d      	cbnz	r5, 800ddd2 <__d2b+0x7a>
 800dd86:	9301      	str	r3, [sp, #4]
 800dd88:	f1b8 0300 	subs.w	r3, r8, #0
 800dd8c:	d026      	beq.n	800dddc <__d2b+0x84>
 800dd8e:	4668      	mov	r0, sp
 800dd90:	9300      	str	r3, [sp, #0]
 800dd92:	f7ff fd87 	bl	800d8a4 <__lo0bits>
 800dd96:	9900      	ldr	r1, [sp, #0]
 800dd98:	b1f0      	cbz	r0, 800ddd8 <__d2b+0x80>
 800dd9a:	9a01      	ldr	r2, [sp, #4]
 800dd9c:	f1c0 0320 	rsb	r3, r0, #32
 800dda0:	fa02 f303 	lsl.w	r3, r2, r3
 800dda4:	430b      	orrs	r3, r1
 800dda6:	40c2      	lsrs	r2, r0
 800dda8:	6163      	str	r3, [r4, #20]
 800ddaa:	9201      	str	r2, [sp, #4]
 800ddac:	9b01      	ldr	r3, [sp, #4]
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	bf14      	ite	ne
 800ddb2:	2102      	movne	r1, #2
 800ddb4:	2101      	moveq	r1, #1
 800ddb6:	61a3      	str	r3, [r4, #24]
 800ddb8:	6121      	str	r1, [r4, #16]
 800ddba:	b1c5      	cbz	r5, 800ddee <__d2b+0x96>
 800ddbc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ddc0:	4405      	add	r5, r0
 800ddc2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ddc6:	603d      	str	r5, [r7, #0]
 800ddc8:	6030      	str	r0, [r6, #0]
 800ddca:	4620      	mov	r0, r4
 800ddcc:	b002      	add	sp, #8
 800ddce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ddd6:	e7d6      	b.n	800dd86 <__d2b+0x2e>
 800ddd8:	6161      	str	r1, [r4, #20]
 800ddda:	e7e7      	b.n	800ddac <__d2b+0x54>
 800dddc:	a801      	add	r0, sp, #4
 800ddde:	f7ff fd61 	bl	800d8a4 <__lo0bits>
 800dde2:	2101      	movs	r1, #1
 800dde4:	9b01      	ldr	r3, [sp, #4]
 800dde6:	6121      	str	r1, [r4, #16]
 800dde8:	6163      	str	r3, [r4, #20]
 800ddea:	3020      	adds	r0, #32
 800ddec:	e7e5      	b.n	800ddba <__d2b+0x62>
 800ddee:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800ddf2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ddf6:	6038      	str	r0, [r7, #0]
 800ddf8:	6918      	ldr	r0, [r3, #16]
 800ddfa:	f7ff fd33 	bl	800d864 <__hi0bits>
 800ddfe:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800de02:	6031      	str	r1, [r6, #0]
 800de04:	e7e1      	b.n	800ddca <__d2b+0x72>
 800de06:	bf00      	nop
 800de08:	0800f5e7 	.word	0x0800f5e7
 800de0c:	0800f5f8 	.word	0x0800f5f8

0800de10 <_calloc_r>:
 800de10:	b538      	push	{r3, r4, r5, lr}
 800de12:	fb02 f501 	mul.w	r5, r2, r1
 800de16:	4629      	mov	r1, r5
 800de18:	f000 f854 	bl	800dec4 <_malloc_r>
 800de1c:	4604      	mov	r4, r0
 800de1e:	b118      	cbz	r0, 800de28 <_calloc_r+0x18>
 800de20:	462a      	mov	r2, r5
 800de22:	2100      	movs	r1, #0
 800de24:	f7fe f944 	bl	800c0b0 <memset>
 800de28:	4620      	mov	r0, r4
 800de2a:	bd38      	pop	{r3, r4, r5, pc}

0800de2c <_free_r>:
 800de2c:	b538      	push	{r3, r4, r5, lr}
 800de2e:	4605      	mov	r5, r0
 800de30:	2900      	cmp	r1, #0
 800de32:	d043      	beq.n	800debc <_free_r+0x90>
 800de34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de38:	1f0c      	subs	r4, r1, #4
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	bfb8      	it	lt
 800de3e:	18e4      	addlt	r4, r4, r3
 800de40:	f000 fa62 	bl	800e308 <__malloc_lock>
 800de44:	4a1e      	ldr	r2, [pc, #120]	; (800dec0 <_free_r+0x94>)
 800de46:	6813      	ldr	r3, [r2, #0]
 800de48:	4610      	mov	r0, r2
 800de4a:	b933      	cbnz	r3, 800de5a <_free_r+0x2e>
 800de4c:	6063      	str	r3, [r4, #4]
 800de4e:	6014      	str	r4, [r2, #0]
 800de50:	4628      	mov	r0, r5
 800de52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800de56:	f000 ba5d 	b.w	800e314 <__malloc_unlock>
 800de5a:	42a3      	cmp	r3, r4
 800de5c:	d90a      	bls.n	800de74 <_free_r+0x48>
 800de5e:	6821      	ldr	r1, [r4, #0]
 800de60:	1862      	adds	r2, r4, r1
 800de62:	4293      	cmp	r3, r2
 800de64:	bf01      	itttt	eq
 800de66:	681a      	ldreq	r2, [r3, #0]
 800de68:	685b      	ldreq	r3, [r3, #4]
 800de6a:	1852      	addeq	r2, r2, r1
 800de6c:	6022      	streq	r2, [r4, #0]
 800de6e:	6063      	str	r3, [r4, #4]
 800de70:	6004      	str	r4, [r0, #0]
 800de72:	e7ed      	b.n	800de50 <_free_r+0x24>
 800de74:	461a      	mov	r2, r3
 800de76:	685b      	ldr	r3, [r3, #4]
 800de78:	b10b      	cbz	r3, 800de7e <_free_r+0x52>
 800de7a:	42a3      	cmp	r3, r4
 800de7c:	d9fa      	bls.n	800de74 <_free_r+0x48>
 800de7e:	6811      	ldr	r1, [r2, #0]
 800de80:	1850      	adds	r0, r2, r1
 800de82:	42a0      	cmp	r0, r4
 800de84:	d10b      	bne.n	800de9e <_free_r+0x72>
 800de86:	6820      	ldr	r0, [r4, #0]
 800de88:	4401      	add	r1, r0
 800de8a:	1850      	adds	r0, r2, r1
 800de8c:	4283      	cmp	r3, r0
 800de8e:	6011      	str	r1, [r2, #0]
 800de90:	d1de      	bne.n	800de50 <_free_r+0x24>
 800de92:	6818      	ldr	r0, [r3, #0]
 800de94:	685b      	ldr	r3, [r3, #4]
 800de96:	4401      	add	r1, r0
 800de98:	6011      	str	r1, [r2, #0]
 800de9a:	6053      	str	r3, [r2, #4]
 800de9c:	e7d8      	b.n	800de50 <_free_r+0x24>
 800de9e:	d902      	bls.n	800dea6 <_free_r+0x7a>
 800dea0:	230c      	movs	r3, #12
 800dea2:	602b      	str	r3, [r5, #0]
 800dea4:	e7d4      	b.n	800de50 <_free_r+0x24>
 800dea6:	6820      	ldr	r0, [r4, #0]
 800dea8:	1821      	adds	r1, r4, r0
 800deaa:	428b      	cmp	r3, r1
 800deac:	bf01      	itttt	eq
 800deae:	6819      	ldreq	r1, [r3, #0]
 800deb0:	685b      	ldreq	r3, [r3, #4]
 800deb2:	1809      	addeq	r1, r1, r0
 800deb4:	6021      	streq	r1, [r4, #0]
 800deb6:	6063      	str	r3, [r4, #4]
 800deb8:	6054      	str	r4, [r2, #4]
 800deba:	e7c9      	b.n	800de50 <_free_r+0x24>
 800debc:	bd38      	pop	{r3, r4, r5, pc}
 800debe:	bf00      	nop
 800dec0:	20000444 	.word	0x20000444

0800dec4 <_malloc_r>:
 800dec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dec6:	1ccd      	adds	r5, r1, #3
 800dec8:	f025 0503 	bic.w	r5, r5, #3
 800decc:	3508      	adds	r5, #8
 800dece:	2d0c      	cmp	r5, #12
 800ded0:	bf38      	it	cc
 800ded2:	250c      	movcc	r5, #12
 800ded4:	2d00      	cmp	r5, #0
 800ded6:	4606      	mov	r6, r0
 800ded8:	db01      	blt.n	800dede <_malloc_r+0x1a>
 800deda:	42a9      	cmp	r1, r5
 800dedc:	d903      	bls.n	800dee6 <_malloc_r+0x22>
 800dede:	230c      	movs	r3, #12
 800dee0:	6033      	str	r3, [r6, #0]
 800dee2:	2000      	movs	r0, #0
 800dee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dee6:	f000 fa0f 	bl	800e308 <__malloc_lock>
 800deea:	4921      	ldr	r1, [pc, #132]	; (800df70 <_malloc_r+0xac>)
 800deec:	680a      	ldr	r2, [r1, #0]
 800deee:	4614      	mov	r4, r2
 800def0:	b99c      	cbnz	r4, 800df1a <_malloc_r+0x56>
 800def2:	4f20      	ldr	r7, [pc, #128]	; (800df74 <_malloc_r+0xb0>)
 800def4:	683b      	ldr	r3, [r7, #0]
 800def6:	b923      	cbnz	r3, 800df02 <_malloc_r+0x3e>
 800def8:	4621      	mov	r1, r4
 800defa:	4630      	mov	r0, r6
 800defc:	f000 f998 	bl	800e230 <_sbrk_r>
 800df00:	6038      	str	r0, [r7, #0]
 800df02:	4629      	mov	r1, r5
 800df04:	4630      	mov	r0, r6
 800df06:	f000 f993 	bl	800e230 <_sbrk_r>
 800df0a:	1c43      	adds	r3, r0, #1
 800df0c:	d123      	bne.n	800df56 <_malloc_r+0x92>
 800df0e:	230c      	movs	r3, #12
 800df10:	4630      	mov	r0, r6
 800df12:	6033      	str	r3, [r6, #0]
 800df14:	f000 f9fe 	bl	800e314 <__malloc_unlock>
 800df18:	e7e3      	b.n	800dee2 <_malloc_r+0x1e>
 800df1a:	6823      	ldr	r3, [r4, #0]
 800df1c:	1b5b      	subs	r3, r3, r5
 800df1e:	d417      	bmi.n	800df50 <_malloc_r+0x8c>
 800df20:	2b0b      	cmp	r3, #11
 800df22:	d903      	bls.n	800df2c <_malloc_r+0x68>
 800df24:	6023      	str	r3, [r4, #0]
 800df26:	441c      	add	r4, r3
 800df28:	6025      	str	r5, [r4, #0]
 800df2a:	e004      	b.n	800df36 <_malloc_r+0x72>
 800df2c:	6863      	ldr	r3, [r4, #4]
 800df2e:	42a2      	cmp	r2, r4
 800df30:	bf0c      	ite	eq
 800df32:	600b      	streq	r3, [r1, #0]
 800df34:	6053      	strne	r3, [r2, #4]
 800df36:	4630      	mov	r0, r6
 800df38:	f000 f9ec 	bl	800e314 <__malloc_unlock>
 800df3c:	f104 000b 	add.w	r0, r4, #11
 800df40:	1d23      	adds	r3, r4, #4
 800df42:	f020 0007 	bic.w	r0, r0, #7
 800df46:	1ac2      	subs	r2, r0, r3
 800df48:	d0cc      	beq.n	800dee4 <_malloc_r+0x20>
 800df4a:	1a1b      	subs	r3, r3, r0
 800df4c:	50a3      	str	r3, [r4, r2]
 800df4e:	e7c9      	b.n	800dee4 <_malloc_r+0x20>
 800df50:	4622      	mov	r2, r4
 800df52:	6864      	ldr	r4, [r4, #4]
 800df54:	e7cc      	b.n	800def0 <_malloc_r+0x2c>
 800df56:	1cc4      	adds	r4, r0, #3
 800df58:	f024 0403 	bic.w	r4, r4, #3
 800df5c:	42a0      	cmp	r0, r4
 800df5e:	d0e3      	beq.n	800df28 <_malloc_r+0x64>
 800df60:	1a21      	subs	r1, r4, r0
 800df62:	4630      	mov	r0, r6
 800df64:	f000 f964 	bl	800e230 <_sbrk_r>
 800df68:	3001      	adds	r0, #1
 800df6a:	d1dd      	bne.n	800df28 <_malloc_r+0x64>
 800df6c:	e7cf      	b.n	800df0e <_malloc_r+0x4a>
 800df6e:	bf00      	nop
 800df70:	20000444 	.word	0x20000444
 800df74:	20000448 	.word	0x20000448

0800df78 <__ssputs_r>:
 800df78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df7c:	688e      	ldr	r6, [r1, #8]
 800df7e:	4682      	mov	sl, r0
 800df80:	429e      	cmp	r6, r3
 800df82:	460c      	mov	r4, r1
 800df84:	4690      	mov	r8, r2
 800df86:	461f      	mov	r7, r3
 800df88:	d838      	bhi.n	800dffc <__ssputs_r+0x84>
 800df8a:	898a      	ldrh	r2, [r1, #12]
 800df8c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800df90:	d032      	beq.n	800dff8 <__ssputs_r+0x80>
 800df92:	6825      	ldr	r5, [r4, #0]
 800df94:	6909      	ldr	r1, [r1, #16]
 800df96:	3301      	adds	r3, #1
 800df98:	eba5 0901 	sub.w	r9, r5, r1
 800df9c:	6965      	ldr	r5, [r4, #20]
 800df9e:	444b      	add	r3, r9
 800dfa0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dfa4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dfa8:	106d      	asrs	r5, r5, #1
 800dfaa:	429d      	cmp	r5, r3
 800dfac:	bf38      	it	cc
 800dfae:	461d      	movcc	r5, r3
 800dfb0:	0553      	lsls	r3, r2, #21
 800dfb2:	d531      	bpl.n	800e018 <__ssputs_r+0xa0>
 800dfb4:	4629      	mov	r1, r5
 800dfb6:	f7ff ff85 	bl	800dec4 <_malloc_r>
 800dfba:	4606      	mov	r6, r0
 800dfbc:	b950      	cbnz	r0, 800dfd4 <__ssputs_r+0x5c>
 800dfbe:	230c      	movs	r3, #12
 800dfc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dfc4:	f8ca 3000 	str.w	r3, [sl]
 800dfc8:	89a3      	ldrh	r3, [r4, #12]
 800dfca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dfce:	81a3      	strh	r3, [r4, #12]
 800dfd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dfd4:	464a      	mov	r2, r9
 800dfd6:	6921      	ldr	r1, [r4, #16]
 800dfd8:	f7ff fb8a 	bl	800d6f0 <memcpy>
 800dfdc:	89a3      	ldrh	r3, [r4, #12]
 800dfde:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800dfe2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dfe6:	81a3      	strh	r3, [r4, #12]
 800dfe8:	6126      	str	r6, [r4, #16]
 800dfea:	444e      	add	r6, r9
 800dfec:	6026      	str	r6, [r4, #0]
 800dfee:	463e      	mov	r6, r7
 800dff0:	6165      	str	r5, [r4, #20]
 800dff2:	eba5 0509 	sub.w	r5, r5, r9
 800dff6:	60a5      	str	r5, [r4, #8]
 800dff8:	42be      	cmp	r6, r7
 800dffa:	d900      	bls.n	800dffe <__ssputs_r+0x86>
 800dffc:	463e      	mov	r6, r7
 800dffe:	4632      	mov	r2, r6
 800e000:	4641      	mov	r1, r8
 800e002:	6820      	ldr	r0, [r4, #0]
 800e004:	f000 f966 	bl	800e2d4 <memmove>
 800e008:	68a3      	ldr	r3, [r4, #8]
 800e00a:	6822      	ldr	r2, [r4, #0]
 800e00c:	1b9b      	subs	r3, r3, r6
 800e00e:	4432      	add	r2, r6
 800e010:	2000      	movs	r0, #0
 800e012:	60a3      	str	r3, [r4, #8]
 800e014:	6022      	str	r2, [r4, #0]
 800e016:	e7db      	b.n	800dfd0 <__ssputs_r+0x58>
 800e018:	462a      	mov	r2, r5
 800e01a:	f000 f981 	bl	800e320 <_realloc_r>
 800e01e:	4606      	mov	r6, r0
 800e020:	2800      	cmp	r0, #0
 800e022:	d1e1      	bne.n	800dfe8 <__ssputs_r+0x70>
 800e024:	4650      	mov	r0, sl
 800e026:	6921      	ldr	r1, [r4, #16]
 800e028:	f7ff ff00 	bl	800de2c <_free_r>
 800e02c:	e7c7      	b.n	800dfbe <__ssputs_r+0x46>
	...

0800e030 <_svfiprintf_r>:
 800e030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e034:	4698      	mov	r8, r3
 800e036:	898b      	ldrh	r3, [r1, #12]
 800e038:	4607      	mov	r7, r0
 800e03a:	061b      	lsls	r3, r3, #24
 800e03c:	460d      	mov	r5, r1
 800e03e:	4614      	mov	r4, r2
 800e040:	b09d      	sub	sp, #116	; 0x74
 800e042:	d50e      	bpl.n	800e062 <_svfiprintf_r+0x32>
 800e044:	690b      	ldr	r3, [r1, #16]
 800e046:	b963      	cbnz	r3, 800e062 <_svfiprintf_r+0x32>
 800e048:	2140      	movs	r1, #64	; 0x40
 800e04a:	f7ff ff3b 	bl	800dec4 <_malloc_r>
 800e04e:	6028      	str	r0, [r5, #0]
 800e050:	6128      	str	r0, [r5, #16]
 800e052:	b920      	cbnz	r0, 800e05e <_svfiprintf_r+0x2e>
 800e054:	230c      	movs	r3, #12
 800e056:	603b      	str	r3, [r7, #0]
 800e058:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e05c:	e0d1      	b.n	800e202 <_svfiprintf_r+0x1d2>
 800e05e:	2340      	movs	r3, #64	; 0x40
 800e060:	616b      	str	r3, [r5, #20]
 800e062:	2300      	movs	r3, #0
 800e064:	9309      	str	r3, [sp, #36]	; 0x24
 800e066:	2320      	movs	r3, #32
 800e068:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e06c:	2330      	movs	r3, #48	; 0x30
 800e06e:	f04f 0901 	mov.w	r9, #1
 800e072:	f8cd 800c 	str.w	r8, [sp, #12]
 800e076:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800e21c <_svfiprintf_r+0x1ec>
 800e07a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e07e:	4623      	mov	r3, r4
 800e080:	469a      	mov	sl, r3
 800e082:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e086:	b10a      	cbz	r2, 800e08c <_svfiprintf_r+0x5c>
 800e088:	2a25      	cmp	r2, #37	; 0x25
 800e08a:	d1f9      	bne.n	800e080 <_svfiprintf_r+0x50>
 800e08c:	ebba 0b04 	subs.w	fp, sl, r4
 800e090:	d00b      	beq.n	800e0aa <_svfiprintf_r+0x7a>
 800e092:	465b      	mov	r3, fp
 800e094:	4622      	mov	r2, r4
 800e096:	4629      	mov	r1, r5
 800e098:	4638      	mov	r0, r7
 800e09a:	f7ff ff6d 	bl	800df78 <__ssputs_r>
 800e09e:	3001      	adds	r0, #1
 800e0a0:	f000 80aa 	beq.w	800e1f8 <_svfiprintf_r+0x1c8>
 800e0a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e0a6:	445a      	add	r2, fp
 800e0a8:	9209      	str	r2, [sp, #36]	; 0x24
 800e0aa:	f89a 3000 	ldrb.w	r3, [sl]
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	f000 80a2 	beq.w	800e1f8 <_svfiprintf_r+0x1c8>
 800e0b4:	2300      	movs	r3, #0
 800e0b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e0ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e0be:	f10a 0a01 	add.w	sl, sl, #1
 800e0c2:	9304      	str	r3, [sp, #16]
 800e0c4:	9307      	str	r3, [sp, #28]
 800e0c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e0ca:	931a      	str	r3, [sp, #104]	; 0x68
 800e0cc:	4654      	mov	r4, sl
 800e0ce:	2205      	movs	r2, #5
 800e0d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0d4:	4851      	ldr	r0, [pc, #324]	; (800e21c <_svfiprintf_r+0x1ec>)
 800e0d6:	f7ff fafd 	bl	800d6d4 <memchr>
 800e0da:	9a04      	ldr	r2, [sp, #16]
 800e0dc:	b9d8      	cbnz	r0, 800e116 <_svfiprintf_r+0xe6>
 800e0de:	06d0      	lsls	r0, r2, #27
 800e0e0:	bf44      	itt	mi
 800e0e2:	2320      	movmi	r3, #32
 800e0e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e0e8:	0711      	lsls	r1, r2, #28
 800e0ea:	bf44      	itt	mi
 800e0ec:	232b      	movmi	r3, #43	; 0x2b
 800e0ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e0f2:	f89a 3000 	ldrb.w	r3, [sl]
 800e0f6:	2b2a      	cmp	r3, #42	; 0x2a
 800e0f8:	d015      	beq.n	800e126 <_svfiprintf_r+0xf6>
 800e0fa:	4654      	mov	r4, sl
 800e0fc:	2000      	movs	r0, #0
 800e0fe:	f04f 0c0a 	mov.w	ip, #10
 800e102:	9a07      	ldr	r2, [sp, #28]
 800e104:	4621      	mov	r1, r4
 800e106:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e10a:	3b30      	subs	r3, #48	; 0x30
 800e10c:	2b09      	cmp	r3, #9
 800e10e:	d94e      	bls.n	800e1ae <_svfiprintf_r+0x17e>
 800e110:	b1b0      	cbz	r0, 800e140 <_svfiprintf_r+0x110>
 800e112:	9207      	str	r2, [sp, #28]
 800e114:	e014      	b.n	800e140 <_svfiprintf_r+0x110>
 800e116:	eba0 0308 	sub.w	r3, r0, r8
 800e11a:	fa09 f303 	lsl.w	r3, r9, r3
 800e11e:	4313      	orrs	r3, r2
 800e120:	46a2      	mov	sl, r4
 800e122:	9304      	str	r3, [sp, #16]
 800e124:	e7d2      	b.n	800e0cc <_svfiprintf_r+0x9c>
 800e126:	9b03      	ldr	r3, [sp, #12]
 800e128:	1d19      	adds	r1, r3, #4
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	9103      	str	r1, [sp, #12]
 800e12e:	2b00      	cmp	r3, #0
 800e130:	bfbb      	ittet	lt
 800e132:	425b      	neglt	r3, r3
 800e134:	f042 0202 	orrlt.w	r2, r2, #2
 800e138:	9307      	strge	r3, [sp, #28]
 800e13a:	9307      	strlt	r3, [sp, #28]
 800e13c:	bfb8      	it	lt
 800e13e:	9204      	strlt	r2, [sp, #16]
 800e140:	7823      	ldrb	r3, [r4, #0]
 800e142:	2b2e      	cmp	r3, #46	; 0x2e
 800e144:	d10c      	bne.n	800e160 <_svfiprintf_r+0x130>
 800e146:	7863      	ldrb	r3, [r4, #1]
 800e148:	2b2a      	cmp	r3, #42	; 0x2a
 800e14a:	d135      	bne.n	800e1b8 <_svfiprintf_r+0x188>
 800e14c:	9b03      	ldr	r3, [sp, #12]
 800e14e:	3402      	adds	r4, #2
 800e150:	1d1a      	adds	r2, r3, #4
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	9203      	str	r2, [sp, #12]
 800e156:	2b00      	cmp	r3, #0
 800e158:	bfb8      	it	lt
 800e15a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e15e:	9305      	str	r3, [sp, #20]
 800e160:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e22c <_svfiprintf_r+0x1fc>
 800e164:	2203      	movs	r2, #3
 800e166:	4650      	mov	r0, sl
 800e168:	7821      	ldrb	r1, [r4, #0]
 800e16a:	f7ff fab3 	bl	800d6d4 <memchr>
 800e16e:	b140      	cbz	r0, 800e182 <_svfiprintf_r+0x152>
 800e170:	2340      	movs	r3, #64	; 0x40
 800e172:	eba0 000a 	sub.w	r0, r0, sl
 800e176:	fa03 f000 	lsl.w	r0, r3, r0
 800e17a:	9b04      	ldr	r3, [sp, #16]
 800e17c:	3401      	adds	r4, #1
 800e17e:	4303      	orrs	r3, r0
 800e180:	9304      	str	r3, [sp, #16]
 800e182:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e186:	2206      	movs	r2, #6
 800e188:	4825      	ldr	r0, [pc, #148]	; (800e220 <_svfiprintf_r+0x1f0>)
 800e18a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e18e:	f7ff faa1 	bl	800d6d4 <memchr>
 800e192:	2800      	cmp	r0, #0
 800e194:	d038      	beq.n	800e208 <_svfiprintf_r+0x1d8>
 800e196:	4b23      	ldr	r3, [pc, #140]	; (800e224 <_svfiprintf_r+0x1f4>)
 800e198:	bb1b      	cbnz	r3, 800e1e2 <_svfiprintf_r+0x1b2>
 800e19a:	9b03      	ldr	r3, [sp, #12]
 800e19c:	3307      	adds	r3, #7
 800e19e:	f023 0307 	bic.w	r3, r3, #7
 800e1a2:	3308      	adds	r3, #8
 800e1a4:	9303      	str	r3, [sp, #12]
 800e1a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e1a8:	4433      	add	r3, r6
 800e1aa:	9309      	str	r3, [sp, #36]	; 0x24
 800e1ac:	e767      	b.n	800e07e <_svfiprintf_r+0x4e>
 800e1ae:	460c      	mov	r4, r1
 800e1b0:	2001      	movs	r0, #1
 800e1b2:	fb0c 3202 	mla	r2, ip, r2, r3
 800e1b6:	e7a5      	b.n	800e104 <_svfiprintf_r+0xd4>
 800e1b8:	2300      	movs	r3, #0
 800e1ba:	f04f 0c0a 	mov.w	ip, #10
 800e1be:	4619      	mov	r1, r3
 800e1c0:	3401      	adds	r4, #1
 800e1c2:	9305      	str	r3, [sp, #20]
 800e1c4:	4620      	mov	r0, r4
 800e1c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e1ca:	3a30      	subs	r2, #48	; 0x30
 800e1cc:	2a09      	cmp	r2, #9
 800e1ce:	d903      	bls.n	800e1d8 <_svfiprintf_r+0x1a8>
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d0c5      	beq.n	800e160 <_svfiprintf_r+0x130>
 800e1d4:	9105      	str	r1, [sp, #20]
 800e1d6:	e7c3      	b.n	800e160 <_svfiprintf_r+0x130>
 800e1d8:	4604      	mov	r4, r0
 800e1da:	2301      	movs	r3, #1
 800e1dc:	fb0c 2101 	mla	r1, ip, r1, r2
 800e1e0:	e7f0      	b.n	800e1c4 <_svfiprintf_r+0x194>
 800e1e2:	ab03      	add	r3, sp, #12
 800e1e4:	9300      	str	r3, [sp, #0]
 800e1e6:	462a      	mov	r2, r5
 800e1e8:	4638      	mov	r0, r7
 800e1ea:	4b0f      	ldr	r3, [pc, #60]	; (800e228 <_svfiprintf_r+0x1f8>)
 800e1ec:	a904      	add	r1, sp, #16
 800e1ee:	f7fe f805 	bl	800c1fc <_printf_float>
 800e1f2:	1c42      	adds	r2, r0, #1
 800e1f4:	4606      	mov	r6, r0
 800e1f6:	d1d6      	bne.n	800e1a6 <_svfiprintf_r+0x176>
 800e1f8:	89ab      	ldrh	r3, [r5, #12]
 800e1fa:	065b      	lsls	r3, r3, #25
 800e1fc:	f53f af2c 	bmi.w	800e058 <_svfiprintf_r+0x28>
 800e200:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e202:	b01d      	add	sp, #116	; 0x74
 800e204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e208:	ab03      	add	r3, sp, #12
 800e20a:	9300      	str	r3, [sp, #0]
 800e20c:	462a      	mov	r2, r5
 800e20e:	4638      	mov	r0, r7
 800e210:	4b05      	ldr	r3, [pc, #20]	; (800e228 <_svfiprintf_r+0x1f8>)
 800e212:	a904      	add	r1, sp, #16
 800e214:	f7fe fa8e 	bl	800c734 <_printf_i>
 800e218:	e7eb      	b.n	800e1f2 <_svfiprintf_r+0x1c2>
 800e21a:	bf00      	nop
 800e21c:	0800f754 	.word	0x0800f754
 800e220:	0800f75e 	.word	0x0800f75e
 800e224:	0800c1fd 	.word	0x0800c1fd
 800e228:	0800df79 	.word	0x0800df79
 800e22c:	0800f75a 	.word	0x0800f75a

0800e230 <_sbrk_r>:
 800e230:	b538      	push	{r3, r4, r5, lr}
 800e232:	2300      	movs	r3, #0
 800e234:	4d05      	ldr	r5, [pc, #20]	; (800e24c <_sbrk_r+0x1c>)
 800e236:	4604      	mov	r4, r0
 800e238:	4608      	mov	r0, r1
 800e23a:	602b      	str	r3, [r5, #0]
 800e23c:	f7f4 f98e 	bl	800255c <_sbrk>
 800e240:	1c43      	adds	r3, r0, #1
 800e242:	d102      	bne.n	800e24a <_sbrk_r+0x1a>
 800e244:	682b      	ldr	r3, [r5, #0]
 800e246:	b103      	cbz	r3, 800e24a <_sbrk_r+0x1a>
 800e248:	6023      	str	r3, [r4, #0]
 800e24a:	bd38      	pop	{r3, r4, r5, pc}
 800e24c:	20000fa0 	.word	0x20000fa0

0800e250 <__assert_func>:
 800e250:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e252:	4614      	mov	r4, r2
 800e254:	461a      	mov	r2, r3
 800e256:	4b09      	ldr	r3, [pc, #36]	; (800e27c <__assert_func+0x2c>)
 800e258:	4605      	mov	r5, r0
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	68d8      	ldr	r0, [r3, #12]
 800e25e:	b14c      	cbz	r4, 800e274 <__assert_func+0x24>
 800e260:	4b07      	ldr	r3, [pc, #28]	; (800e280 <__assert_func+0x30>)
 800e262:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e266:	9100      	str	r1, [sp, #0]
 800e268:	462b      	mov	r3, r5
 800e26a:	4906      	ldr	r1, [pc, #24]	; (800e284 <__assert_func+0x34>)
 800e26c:	f000 f80e 	bl	800e28c <fiprintf>
 800e270:	f000 faa2 	bl	800e7b8 <abort>
 800e274:	4b04      	ldr	r3, [pc, #16]	; (800e288 <__assert_func+0x38>)
 800e276:	461c      	mov	r4, r3
 800e278:	e7f3      	b.n	800e262 <__assert_func+0x12>
 800e27a:	bf00      	nop
 800e27c:	20000200 	.word	0x20000200
 800e280:	0800f765 	.word	0x0800f765
 800e284:	0800f772 	.word	0x0800f772
 800e288:	0800f7a0 	.word	0x0800f7a0

0800e28c <fiprintf>:
 800e28c:	b40e      	push	{r1, r2, r3}
 800e28e:	b503      	push	{r0, r1, lr}
 800e290:	4601      	mov	r1, r0
 800e292:	ab03      	add	r3, sp, #12
 800e294:	4805      	ldr	r0, [pc, #20]	; (800e2ac <fiprintf+0x20>)
 800e296:	f853 2b04 	ldr.w	r2, [r3], #4
 800e29a:	6800      	ldr	r0, [r0, #0]
 800e29c:	9301      	str	r3, [sp, #4]
 800e29e:	f000 f88d 	bl	800e3bc <_vfiprintf_r>
 800e2a2:	b002      	add	sp, #8
 800e2a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800e2a8:	b003      	add	sp, #12
 800e2aa:	4770      	bx	lr
 800e2ac:	20000200 	.word	0x20000200

0800e2b0 <__ascii_mbtowc>:
 800e2b0:	b082      	sub	sp, #8
 800e2b2:	b901      	cbnz	r1, 800e2b6 <__ascii_mbtowc+0x6>
 800e2b4:	a901      	add	r1, sp, #4
 800e2b6:	b142      	cbz	r2, 800e2ca <__ascii_mbtowc+0x1a>
 800e2b8:	b14b      	cbz	r3, 800e2ce <__ascii_mbtowc+0x1e>
 800e2ba:	7813      	ldrb	r3, [r2, #0]
 800e2bc:	600b      	str	r3, [r1, #0]
 800e2be:	7812      	ldrb	r2, [r2, #0]
 800e2c0:	1e10      	subs	r0, r2, #0
 800e2c2:	bf18      	it	ne
 800e2c4:	2001      	movne	r0, #1
 800e2c6:	b002      	add	sp, #8
 800e2c8:	4770      	bx	lr
 800e2ca:	4610      	mov	r0, r2
 800e2cc:	e7fb      	b.n	800e2c6 <__ascii_mbtowc+0x16>
 800e2ce:	f06f 0001 	mvn.w	r0, #1
 800e2d2:	e7f8      	b.n	800e2c6 <__ascii_mbtowc+0x16>

0800e2d4 <memmove>:
 800e2d4:	4288      	cmp	r0, r1
 800e2d6:	b510      	push	{r4, lr}
 800e2d8:	eb01 0402 	add.w	r4, r1, r2
 800e2dc:	d902      	bls.n	800e2e4 <memmove+0x10>
 800e2de:	4284      	cmp	r4, r0
 800e2e0:	4623      	mov	r3, r4
 800e2e2:	d807      	bhi.n	800e2f4 <memmove+0x20>
 800e2e4:	1e43      	subs	r3, r0, #1
 800e2e6:	42a1      	cmp	r1, r4
 800e2e8:	d008      	beq.n	800e2fc <memmove+0x28>
 800e2ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e2ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e2f2:	e7f8      	b.n	800e2e6 <memmove+0x12>
 800e2f4:	4601      	mov	r1, r0
 800e2f6:	4402      	add	r2, r0
 800e2f8:	428a      	cmp	r2, r1
 800e2fa:	d100      	bne.n	800e2fe <memmove+0x2a>
 800e2fc:	bd10      	pop	{r4, pc}
 800e2fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e302:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e306:	e7f7      	b.n	800e2f8 <memmove+0x24>

0800e308 <__malloc_lock>:
 800e308:	4801      	ldr	r0, [pc, #4]	; (800e310 <__malloc_lock+0x8>)
 800e30a:	f000 bc15 	b.w	800eb38 <__retarget_lock_acquire_recursive>
 800e30e:	bf00      	nop
 800e310:	20000fa8 	.word	0x20000fa8

0800e314 <__malloc_unlock>:
 800e314:	4801      	ldr	r0, [pc, #4]	; (800e31c <__malloc_unlock+0x8>)
 800e316:	f000 bc10 	b.w	800eb3a <__retarget_lock_release_recursive>
 800e31a:	bf00      	nop
 800e31c:	20000fa8 	.word	0x20000fa8

0800e320 <_realloc_r>:
 800e320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e322:	4607      	mov	r7, r0
 800e324:	4614      	mov	r4, r2
 800e326:	460e      	mov	r6, r1
 800e328:	b921      	cbnz	r1, 800e334 <_realloc_r+0x14>
 800e32a:	4611      	mov	r1, r2
 800e32c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e330:	f7ff bdc8 	b.w	800dec4 <_malloc_r>
 800e334:	b922      	cbnz	r2, 800e340 <_realloc_r+0x20>
 800e336:	f7ff fd79 	bl	800de2c <_free_r>
 800e33a:	4625      	mov	r5, r4
 800e33c:	4628      	mov	r0, r5
 800e33e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e340:	f000 fc60 	bl	800ec04 <_malloc_usable_size_r>
 800e344:	42a0      	cmp	r0, r4
 800e346:	d20f      	bcs.n	800e368 <_realloc_r+0x48>
 800e348:	4621      	mov	r1, r4
 800e34a:	4638      	mov	r0, r7
 800e34c:	f7ff fdba 	bl	800dec4 <_malloc_r>
 800e350:	4605      	mov	r5, r0
 800e352:	2800      	cmp	r0, #0
 800e354:	d0f2      	beq.n	800e33c <_realloc_r+0x1c>
 800e356:	4631      	mov	r1, r6
 800e358:	4622      	mov	r2, r4
 800e35a:	f7ff f9c9 	bl	800d6f0 <memcpy>
 800e35e:	4631      	mov	r1, r6
 800e360:	4638      	mov	r0, r7
 800e362:	f7ff fd63 	bl	800de2c <_free_r>
 800e366:	e7e9      	b.n	800e33c <_realloc_r+0x1c>
 800e368:	4635      	mov	r5, r6
 800e36a:	e7e7      	b.n	800e33c <_realloc_r+0x1c>

0800e36c <__sfputc_r>:
 800e36c:	6893      	ldr	r3, [r2, #8]
 800e36e:	b410      	push	{r4}
 800e370:	3b01      	subs	r3, #1
 800e372:	2b00      	cmp	r3, #0
 800e374:	6093      	str	r3, [r2, #8]
 800e376:	da07      	bge.n	800e388 <__sfputc_r+0x1c>
 800e378:	6994      	ldr	r4, [r2, #24]
 800e37a:	42a3      	cmp	r3, r4
 800e37c:	db01      	blt.n	800e382 <__sfputc_r+0x16>
 800e37e:	290a      	cmp	r1, #10
 800e380:	d102      	bne.n	800e388 <__sfputc_r+0x1c>
 800e382:	bc10      	pop	{r4}
 800e384:	f000 b94a 	b.w	800e61c <__swbuf_r>
 800e388:	6813      	ldr	r3, [r2, #0]
 800e38a:	1c58      	adds	r0, r3, #1
 800e38c:	6010      	str	r0, [r2, #0]
 800e38e:	7019      	strb	r1, [r3, #0]
 800e390:	4608      	mov	r0, r1
 800e392:	bc10      	pop	{r4}
 800e394:	4770      	bx	lr

0800e396 <__sfputs_r>:
 800e396:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e398:	4606      	mov	r6, r0
 800e39a:	460f      	mov	r7, r1
 800e39c:	4614      	mov	r4, r2
 800e39e:	18d5      	adds	r5, r2, r3
 800e3a0:	42ac      	cmp	r4, r5
 800e3a2:	d101      	bne.n	800e3a8 <__sfputs_r+0x12>
 800e3a4:	2000      	movs	r0, #0
 800e3a6:	e007      	b.n	800e3b8 <__sfputs_r+0x22>
 800e3a8:	463a      	mov	r2, r7
 800e3aa:	4630      	mov	r0, r6
 800e3ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e3b0:	f7ff ffdc 	bl	800e36c <__sfputc_r>
 800e3b4:	1c43      	adds	r3, r0, #1
 800e3b6:	d1f3      	bne.n	800e3a0 <__sfputs_r+0xa>
 800e3b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e3bc <_vfiprintf_r>:
 800e3bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3c0:	460d      	mov	r5, r1
 800e3c2:	4614      	mov	r4, r2
 800e3c4:	4698      	mov	r8, r3
 800e3c6:	4606      	mov	r6, r0
 800e3c8:	b09d      	sub	sp, #116	; 0x74
 800e3ca:	b118      	cbz	r0, 800e3d4 <_vfiprintf_r+0x18>
 800e3cc:	6983      	ldr	r3, [r0, #24]
 800e3ce:	b90b      	cbnz	r3, 800e3d4 <_vfiprintf_r+0x18>
 800e3d0:	f000 fb14 	bl	800e9fc <__sinit>
 800e3d4:	4b89      	ldr	r3, [pc, #548]	; (800e5fc <_vfiprintf_r+0x240>)
 800e3d6:	429d      	cmp	r5, r3
 800e3d8:	d11b      	bne.n	800e412 <_vfiprintf_r+0x56>
 800e3da:	6875      	ldr	r5, [r6, #4]
 800e3dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e3de:	07d9      	lsls	r1, r3, #31
 800e3e0:	d405      	bmi.n	800e3ee <_vfiprintf_r+0x32>
 800e3e2:	89ab      	ldrh	r3, [r5, #12]
 800e3e4:	059a      	lsls	r2, r3, #22
 800e3e6:	d402      	bmi.n	800e3ee <_vfiprintf_r+0x32>
 800e3e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e3ea:	f000 fba5 	bl	800eb38 <__retarget_lock_acquire_recursive>
 800e3ee:	89ab      	ldrh	r3, [r5, #12]
 800e3f0:	071b      	lsls	r3, r3, #28
 800e3f2:	d501      	bpl.n	800e3f8 <_vfiprintf_r+0x3c>
 800e3f4:	692b      	ldr	r3, [r5, #16]
 800e3f6:	b9eb      	cbnz	r3, 800e434 <_vfiprintf_r+0x78>
 800e3f8:	4629      	mov	r1, r5
 800e3fa:	4630      	mov	r0, r6
 800e3fc:	f000 f96e 	bl	800e6dc <__swsetup_r>
 800e400:	b1c0      	cbz	r0, 800e434 <_vfiprintf_r+0x78>
 800e402:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e404:	07dc      	lsls	r4, r3, #31
 800e406:	d50e      	bpl.n	800e426 <_vfiprintf_r+0x6a>
 800e408:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e40c:	b01d      	add	sp, #116	; 0x74
 800e40e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e412:	4b7b      	ldr	r3, [pc, #492]	; (800e600 <_vfiprintf_r+0x244>)
 800e414:	429d      	cmp	r5, r3
 800e416:	d101      	bne.n	800e41c <_vfiprintf_r+0x60>
 800e418:	68b5      	ldr	r5, [r6, #8]
 800e41a:	e7df      	b.n	800e3dc <_vfiprintf_r+0x20>
 800e41c:	4b79      	ldr	r3, [pc, #484]	; (800e604 <_vfiprintf_r+0x248>)
 800e41e:	429d      	cmp	r5, r3
 800e420:	bf08      	it	eq
 800e422:	68f5      	ldreq	r5, [r6, #12]
 800e424:	e7da      	b.n	800e3dc <_vfiprintf_r+0x20>
 800e426:	89ab      	ldrh	r3, [r5, #12]
 800e428:	0598      	lsls	r0, r3, #22
 800e42a:	d4ed      	bmi.n	800e408 <_vfiprintf_r+0x4c>
 800e42c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e42e:	f000 fb84 	bl	800eb3a <__retarget_lock_release_recursive>
 800e432:	e7e9      	b.n	800e408 <_vfiprintf_r+0x4c>
 800e434:	2300      	movs	r3, #0
 800e436:	9309      	str	r3, [sp, #36]	; 0x24
 800e438:	2320      	movs	r3, #32
 800e43a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e43e:	2330      	movs	r3, #48	; 0x30
 800e440:	f04f 0901 	mov.w	r9, #1
 800e444:	f8cd 800c 	str.w	r8, [sp, #12]
 800e448:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800e608 <_vfiprintf_r+0x24c>
 800e44c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e450:	4623      	mov	r3, r4
 800e452:	469a      	mov	sl, r3
 800e454:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e458:	b10a      	cbz	r2, 800e45e <_vfiprintf_r+0xa2>
 800e45a:	2a25      	cmp	r2, #37	; 0x25
 800e45c:	d1f9      	bne.n	800e452 <_vfiprintf_r+0x96>
 800e45e:	ebba 0b04 	subs.w	fp, sl, r4
 800e462:	d00b      	beq.n	800e47c <_vfiprintf_r+0xc0>
 800e464:	465b      	mov	r3, fp
 800e466:	4622      	mov	r2, r4
 800e468:	4629      	mov	r1, r5
 800e46a:	4630      	mov	r0, r6
 800e46c:	f7ff ff93 	bl	800e396 <__sfputs_r>
 800e470:	3001      	adds	r0, #1
 800e472:	f000 80aa 	beq.w	800e5ca <_vfiprintf_r+0x20e>
 800e476:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e478:	445a      	add	r2, fp
 800e47a:	9209      	str	r2, [sp, #36]	; 0x24
 800e47c:	f89a 3000 	ldrb.w	r3, [sl]
 800e480:	2b00      	cmp	r3, #0
 800e482:	f000 80a2 	beq.w	800e5ca <_vfiprintf_r+0x20e>
 800e486:	2300      	movs	r3, #0
 800e488:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e48c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e490:	f10a 0a01 	add.w	sl, sl, #1
 800e494:	9304      	str	r3, [sp, #16]
 800e496:	9307      	str	r3, [sp, #28]
 800e498:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e49c:	931a      	str	r3, [sp, #104]	; 0x68
 800e49e:	4654      	mov	r4, sl
 800e4a0:	2205      	movs	r2, #5
 800e4a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4a6:	4858      	ldr	r0, [pc, #352]	; (800e608 <_vfiprintf_r+0x24c>)
 800e4a8:	f7ff f914 	bl	800d6d4 <memchr>
 800e4ac:	9a04      	ldr	r2, [sp, #16]
 800e4ae:	b9d8      	cbnz	r0, 800e4e8 <_vfiprintf_r+0x12c>
 800e4b0:	06d1      	lsls	r1, r2, #27
 800e4b2:	bf44      	itt	mi
 800e4b4:	2320      	movmi	r3, #32
 800e4b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e4ba:	0713      	lsls	r3, r2, #28
 800e4bc:	bf44      	itt	mi
 800e4be:	232b      	movmi	r3, #43	; 0x2b
 800e4c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e4c4:	f89a 3000 	ldrb.w	r3, [sl]
 800e4c8:	2b2a      	cmp	r3, #42	; 0x2a
 800e4ca:	d015      	beq.n	800e4f8 <_vfiprintf_r+0x13c>
 800e4cc:	4654      	mov	r4, sl
 800e4ce:	2000      	movs	r0, #0
 800e4d0:	f04f 0c0a 	mov.w	ip, #10
 800e4d4:	9a07      	ldr	r2, [sp, #28]
 800e4d6:	4621      	mov	r1, r4
 800e4d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e4dc:	3b30      	subs	r3, #48	; 0x30
 800e4de:	2b09      	cmp	r3, #9
 800e4e0:	d94e      	bls.n	800e580 <_vfiprintf_r+0x1c4>
 800e4e2:	b1b0      	cbz	r0, 800e512 <_vfiprintf_r+0x156>
 800e4e4:	9207      	str	r2, [sp, #28]
 800e4e6:	e014      	b.n	800e512 <_vfiprintf_r+0x156>
 800e4e8:	eba0 0308 	sub.w	r3, r0, r8
 800e4ec:	fa09 f303 	lsl.w	r3, r9, r3
 800e4f0:	4313      	orrs	r3, r2
 800e4f2:	46a2      	mov	sl, r4
 800e4f4:	9304      	str	r3, [sp, #16]
 800e4f6:	e7d2      	b.n	800e49e <_vfiprintf_r+0xe2>
 800e4f8:	9b03      	ldr	r3, [sp, #12]
 800e4fa:	1d19      	adds	r1, r3, #4
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	9103      	str	r1, [sp, #12]
 800e500:	2b00      	cmp	r3, #0
 800e502:	bfbb      	ittet	lt
 800e504:	425b      	neglt	r3, r3
 800e506:	f042 0202 	orrlt.w	r2, r2, #2
 800e50a:	9307      	strge	r3, [sp, #28]
 800e50c:	9307      	strlt	r3, [sp, #28]
 800e50e:	bfb8      	it	lt
 800e510:	9204      	strlt	r2, [sp, #16]
 800e512:	7823      	ldrb	r3, [r4, #0]
 800e514:	2b2e      	cmp	r3, #46	; 0x2e
 800e516:	d10c      	bne.n	800e532 <_vfiprintf_r+0x176>
 800e518:	7863      	ldrb	r3, [r4, #1]
 800e51a:	2b2a      	cmp	r3, #42	; 0x2a
 800e51c:	d135      	bne.n	800e58a <_vfiprintf_r+0x1ce>
 800e51e:	9b03      	ldr	r3, [sp, #12]
 800e520:	3402      	adds	r4, #2
 800e522:	1d1a      	adds	r2, r3, #4
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	9203      	str	r2, [sp, #12]
 800e528:	2b00      	cmp	r3, #0
 800e52a:	bfb8      	it	lt
 800e52c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e530:	9305      	str	r3, [sp, #20]
 800e532:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e618 <_vfiprintf_r+0x25c>
 800e536:	2203      	movs	r2, #3
 800e538:	4650      	mov	r0, sl
 800e53a:	7821      	ldrb	r1, [r4, #0]
 800e53c:	f7ff f8ca 	bl	800d6d4 <memchr>
 800e540:	b140      	cbz	r0, 800e554 <_vfiprintf_r+0x198>
 800e542:	2340      	movs	r3, #64	; 0x40
 800e544:	eba0 000a 	sub.w	r0, r0, sl
 800e548:	fa03 f000 	lsl.w	r0, r3, r0
 800e54c:	9b04      	ldr	r3, [sp, #16]
 800e54e:	3401      	adds	r4, #1
 800e550:	4303      	orrs	r3, r0
 800e552:	9304      	str	r3, [sp, #16]
 800e554:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e558:	2206      	movs	r2, #6
 800e55a:	482c      	ldr	r0, [pc, #176]	; (800e60c <_vfiprintf_r+0x250>)
 800e55c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e560:	f7ff f8b8 	bl	800d6d4 <memchr>
 800e564:	2800      	cmp	r0, #0
 800e566:	d03f      	beq.n	800e5e8 <_vfiprintf_r+0x22c>
 800e568:	4b29      	ldr	r3, [pc, #164]	; (800e610 <_vfiprintf_r+0x254>)
 800e56a:	bb1b      	cbnz	r3, 800e5b4 <_vfiprintf_r+0x1f8>
 800e56c:	9b03      	ldr	r3, [sp, #12]
 800e56e:	3307      	adds	r3, #7
 800e570:	f023 0307 	bic.w	r3, r3, #7
 800e574:	3308      	adds	r3, #8
 800e576:	9303      	str	r3, [sp, #12]
 800e578:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e57a:	443b      	add	r3, r7
 800e57c:	9309      	str	r3, [sp, #36]	; 0x24
 800e57e:	e767      	b.n	800e450 <_vfiprintf_r+0x94>
 800e580:	460c      	mov	r4, r1
 800e582:	2001      	movs	r0, #1
 800e584:	fb0c 3202 	mla	r2, ip, r2, r3
 800e588:	e7a5      	b.n	800e4d6 <_vfiprintf_r+0x11a>
 800e58a:	2300      	movs	r3, #0
 800e58c:	f04f 0c0a 	mov.w	ip, #10
 800e590:	4619      	mov	r1, r3
 800e592:	3401      	adds	r4, #1
 800e594:	9305      	str	r3, [sp, #20]
 800e596:	4620      	mov	r0, r4
 800e598:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e59c:	3a30      	subs	r2, #48	; 0x30
 800e59e:	2a09      	cmp	r2, #9
 800e5a0:	d903      	bls.n	800e5aa <_vfiprintf_r+0x1ee>
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d0c5      	beq.n	800e532 <_vfiprintf_r+0x176>
 800e5a6:	9105      	str	r1, [sp, #20]
 800e5a8:	e7c3      	b.n	800e532 <_vfiprintf_r+0x176>
 800e5aa:	4604      	mov	r4, r0
 800e5ac:	2301      	movs	r3, #1
 800e5ae:	fb0c 2101 	mla	r1, ip, r1, r2
 800e5b2:	e7f0      	b.n	800e596 <_vfiprintf_r+0x1da>
 800e5b4:	ab03      	add	r3, sp, #12
 800e5b6:	9300      	str	r3, [sp, #0]
 800e5b8:	462a      	mov	r2, r5
 800e5ba:	4630      	mov	r0, r6
 800e5bc:	4b15      	ldr	r3, [pc, #84]	; (800e614 <_vfiprintf_r+0x258>)
 800e5be:	a904      	add	r1, sp, #16
 800e5c0:	f7fd fe1c 	bl	800c1fc <_printf_float>
 800e5c4:	4607      	mov	r7, r0
 800e5c6:	1c78      	adds	r0, r7, #1
 800e5c8:	d1d6      	bne.n	800e578 <_vfiprintf_r+0x1bc>
 800e5ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e5cc:	07d9      	lsls	r1, r3, #31
 800e5ce:	d405      	bmi.n	800e5dc <_vfiprintf_r+0x220>
 800e5d0:	89ab      	ldrh	r3, [r5, #12]
 800e5d2:	059a      	lsls	r2, r3, #22
 800e5d4:	d402      	bmi.n	800e5dc <_vfiprintf_r+0x220>
 800e5d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e5d8:	f000 faaf 	bl	800eb3a <__retarget_lock_release_recursive>
 800e5dc:	89ab      	ldrh	r3, [r5, #12]
 800e5de:	065b      	lsls	r3, r3, #25
 800e5e0:	f53f af12 	bmi.w	800e408 <_vfiprintf_r+0x4c>
 800e5e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e5e6:	e711      	b.n	800e40c <_vfiprintf_r+0x50>
 800e5e8:	ab03      	add	r3, sp, #12
 800e5ea:	9300      	str	r3, [sp, #0]
 800e5ec:	462a      	mov	r2, r5
 800e5ee:	4630      	mov	r0, r6
 800e5f0:	4b08      	ldr	r3, [pc, #32]	; (800e614 <_vfiprintf_r+0x258>)
 800e5f2:	a904      	add	r1, sp, #16
 800e5f4:	f7fe f89e 	bl	800c734 <_printf_i>
 800e5f8:	e7e4      	b.n	800e5c4 <_vfiprintf_r+0x208>
 800e5fa:	bf00      	nop
 800e5fc:	0800f8cc 	.word	0x0800f8cc
 800e600:	0800f8ec 	.word	0x0800f8ec
 800e604:	0800f8ac 	.word	0x0800f8ac
 800e608:	0800f754 	.word	0x0800f754
 800e60c:	0800f75e 	.word	0x0800f75e
 800e610:	0800c1fd 	.word	0x0800c1fd
 800e614:	0800e397 	.word	0x0800e397
 800e618:	0800f75a 	.word	0x0800f75a

0800e61c <__swbuf_r>:
 800e61c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e61e:	460e      	mov	r6, r1
 800e620:	4614      	mov	r4, r2
 800e622:	4605      	mov	r5, r0
 800e624:	b118      	cbz	r0, 800e62e <__swbuf_r+0x12>
 800e626:	6983      	ldr	r3, [r0, #24]
 800e628:	b90b      	cbnz	r3, 800e62e <__swbuf_r+0x12>
 800e62a:	f000 f9e7 	bl	800e9fc <__sinit>
 800e62e:	4b21      	ldr	r3, [pc, #132]	; (800e6b4 <__swbuf_r+0x98>)
 800e630:	429c      	cmp	r4, r3
 800e632:	d12b      	bne.n	800e68c <__swbuf_r+0x70>
 800e634:	686c      	ldr	r4, [r5, #4]
 800e636:	69a3      	ldr	r3, [r4, #24]
 800e638:	60a3      	str	r3, [r4, #8]
 800e63a:	89a3      	ldrh	r3, [r4, #12]
 800e63c:	071a      	lsls	r2, r3, #28
 800e63e:	d52f      	bpl.n	800e6a0 <__swbuf_r+0x84>
 800e640:	6923      	ldr	r3, [r4, #16]
 800e642:	b36b      	cbz	r3, 800e6a0 <__swbuf_r+0x84>
 800e644:	6923      	ldr	r3, [r4, #16]
 800e646:	6820      	ldr	r0, [r4, #0]
 800e648:	b2f6      	uxtb	r6, r6
 800e64a:	1ac0      	subs	r0, r0, r3
 800e64c:	6963      	ldr	r3, [r4, #20]
 800e64e:	4637      	mov	r7, r6
 800e650:	4283      	cmp	r3, r0
 800e652:	dc04      	bgt.n	800e65e <__swbuf_r+0x42>
 800e654:	4621      	mov	r1, r4
 800e656:	4628      	mov	r0, r5
 800e658:	f000 f93c 	bl	800e8d4 <_fflush_r>
 800e65c:	bb30      	cbnz	r0, 800e6ac <__swbuf_r+0x90>
 800e65e:	68a3      	ldr	r3, [r4, #8]
 800e660:	3001      	adds	r0, #1
 800e662:	3b01      	subs	r3, #1
 800e664:	60a3      	str	r3, [r4, #8]
 800e666:	6823      	ldr	r3, [r4, #0]
 800e668:	1c5a      	adds	r2, r3, #1
 800e66a:	6022      	str	r2, [r4, #0]
 800e66c:	701e      	strb	r6, [r3, #0]
 800e66e:	6963      	ldr	r3, [r4, #20]
 800e670:	4283      	cmp	r3, r0
 800e672:	d004      	beq.n	800e67e <__swbuf_r+0x62>
 800e674:	89a3      	ldrh	r3, [r4, #12]
 800e676:	07db      	lsls	r3, r3, #31
 800e678:	d506      	bpl.n	800e688 <__swbuf_r+0x6c>
 800e67a:	2e0a      	cmp	r6, #10
 800e67c:	d104      	bne.n	800e688 <__swbuf_r+0x6c>
 800e67e:	4621      	mov	r1, r4
 800e680:	4628      	mov	r0, r5
 800e682:	f000 f927 	bl	800e8d4 <_fflush_r>
 800e686:	b988      	cbnz	r0, 800e6ac <__swbuf_r+0x90>
 800e688:	4638      	mov	r0, r7
 800e68a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e68c:	4b0a      	ldr	r3, [pc, #40]	; (800e6b8 <__swbuf_r+0x9c>)
 800e68e:	429c      	cmp	r4, r3
 800e690:	d101      	bne.n	800e696 <__swbuf_r+0x7a>
 800e692:	68ac      	ldr	r4, [r5, #8]
 800e694:	e7cf      	b.n	800e636 <__swbuf_r+0x1a>
 800e696:	4b09      	ldr	r3, [pc, #36]	; (800e6bc <__swbuf_r+0xa0>)
 800e698:	429c      	cmp	r4, r3
 800e69a:	bf08      	it	eq
 800e69c:	68ec      	ldreq	r4, [r5, #12]
 800e69e:	e7ca      	b.n	800e636 <__swbuf_r+0x1a>
 800e6a0:	4621      	mov	r1, r4
 800e6a2:	4628      	mov	r0, r5
 800e6a4:	f000 f81a 	bl	800e6dc <__swsetup_r>
 800e6a8:	2800      	cmp	r0, #0
 800e6aa:	d0cb      	beq.n	800e644 <__swbuf_r+0x28>
 800e6ac:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800e6b0:	e7ea      	b.n	800e688 <__swbuf_r+0x6c>
 800e6b2:	bf00      	nop
 800e6b4:	0800f8cc 	.word	0x0800f8cc
 800e6b8:	0800f8ec 	.word	0x0800f8ec
 800e6bc:	0800f8ac 	.word	0x0800f8ac

0800e6c0 <__ascii_wctomb>:
 800e6c0:	4603      	mov	r3, r0
 800e6c2:	4608      	mov	r0, r1
 800e6c4:	b141      	cbz	r1, 800e6d8 <__ascii_wctomb+0x18>
 800e6c6:	2aff      	cmp	r2, #255	; 0xff
 800e6c8:	d904      	bls.n	800e6d4 <__ascii_wctomb+0x14>
 800e6ca:	228a      	movs	r2, #138	; 0x8a
 800e6cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e6d0:	601a      	str	r2, [r3, #0]
 800e6d2:	4770      	bx	lr
 800e6d4:	2001      	movs	r0, #1
 800e6d6:	700a      	strb	r2, [r1, #0]
 800e6d8:	4770      	bx	lr
	...

0800e6dc <__swsetup_r>:
 800e6dc:	4b32      	ldr	r3, [pc, #200]	; (800e7a8 <__swsetup_r+0xcc>)
 800e6de:	b570      	push	{r4, r5, r6, lr}
 800e6e0:	681d      	ldr	r5, [r3, #0]
 800e6e2:	4606      	mov	r6, r0
 800e6e4:	460c      	mov	r4, r1
 800e6e6:	b125      	cbz	r5, 800e6f2 <__swsetup_r+0x16>
 800e6e8:	69ab      	ldr	r3, [r5, #24]
 800e6ea:	b913      	cbnz	r3, 800e6f2 <__swsetup_r+0x16>
 800e6ec:	4628      	mov	r0, r5
 800e6ee:	f000 f985 	bl	800e9fc <__sinit>
 800e6f2:	4b2e      	ldr	r3, [pc, #184]	; (800e7ac <__swsetup_r+0xd0>)
 800e6f4:	429c      	cmp	r4, r3
 800e6f6:	d10f      	bne.n	800e718 <__swsetup_r+0x3c>
 800e6f8:	686c      	ldr	r4, [r5, #4]
 800e6fa:	89a3      	ldrh	r3, [r4, #12]
 800e6fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e700:	0719      	lsls	r1, r3, #28
 800e702:	d42c      	bmi.n	800e75e <__swsetup_r+0x82>
 800e704:	06dd      	lsls	r5, r3, #27
 800e706:	d411      	bmi.n	800e72c <__swsetup_r+0x50>
 800e708:	2309      	movs	r3, #9
 800e70a:	6033      	str	r3, [r6, #0]
 800e70c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e710:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e714:	81a3      	strh	r3, [r4, #12]
 800e716:	e03e      	b.n	800e796 <__swsetup_r+0xba>
 800e718:	4b25      	ldr	r3, [pc, #148]	; (800e7b0 <__swsetup_r+0xd4>)
 800e71a:	429c      	cmp	r4, r3
 800e71c:	d101      	bne.n	800e722 <__swsetup_r+0x46>
 800e71e:	68ac      	ldr	r4, [r5, #8]
 800e720:	e7eb      	b.n	800e6fa <__swsetup_r+0x1e>
 800e722:	4b24      	ldr	r3, [pc, #144]	; (800e7b4 <__swsetup_r+0xd8>)
 800e724:	429c      	cmp	r4, r3
 800e726:	bf08      	it	eq
 800e728:	68ec      	ldreq	r4, [r5, #12]
 800e72a:	e7e6      	b.n	800e6fa <__swsetup_r+0x1e>
 800e72c:	0758      	lsls	r0, r3, #29
 800e72e:	d512      	bpl.n	800e756 <__swsetup_r+0x7a>
 800e730:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e732:	b141      	cbz	r1, 800e746 <__swsetup_r+0x6a>
 800e734:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e738:	4299      	cmp	r1, r3
 800e73a:	d002      	beq.n	800e742 <__swsetup_r+0x66>
 800e73c:	4630      	mov	r0, r6
 800e73e:	f7ff fb75 	bl	800de2c <_free_r>
 800e742:	2300      	movs	r3, #0
 800e744:	6363      	str	r3, [r4, #52]	; 0x34
 800e746:	89a3      	ldrh	r3, [r4, #12]
 800e748:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e74c:	81a3      	strh	r3, [r4, #12]
 800e74e:	2300      	movs	r3, #0
 800e750:	6063      	str	r3, [r4, #4]
 800e752:	6923      	ldr	r3, [r4, #16]
 800e754:	6023      	str	r3, [r4, #0]
 800e756:	89a3      	ldrh	r3, [r4, #12]
 800e758:	f043 0308 	orr.w	r3, r3, #8
 800e75c:	81a3      	strh	r3, [r4, #12]
 800e75e:	6923      	ldr	r3, [r4, #16]
 800e760:	b94b      	cbnz	r3, 800e776 <__swsetup_r+0x9a>
 800e762:	89a3      	ldrh	r3, [r4, #12]
 800e764:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e768:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e76c:	d003      	beq.n	800e776 <__swsetup_r+0x9a>
 800e76e:	4621      	mov	r1, r4
 800e770:	4630      	mov	r0, r6
 800e772:	f000 fa07 	bl	800eb84 <__smakebuf_r>
 800e776:	89a0      	ldrh	r0, [r4, #12]
 800e778:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e77c:	f010 0301 	ands.w	r3, r0, #1
 800e780:	d00a      	beq.n	800e798 <__swsetup_r+0xbc>
 800e782:	2300      	movs	r3, #0
 800e784:	60a3      	str	r3, [r4, #8]
 800e786:	6963      	ldr	r3, [r4, #20]
 800e788:	425b      	negs	r3, r3
 800e78a:	61a3      	str	r3, [r4, #24]
 800e78c:	6923      	ldr	r3, [r4, #16]
 800e78e:	b943      	cbnz	r3, 800e7a2 <__swsetup_r+0xc6>
 800e790:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e794:	d1ba      	bne.n	800e70c <__swsetup_r+0x30>
 800e796:	bd70      	pop	{r4, r5, r6, pc}
 800e798:	0781      	lsls	r1, r0, #30
 800e79a:	bf58      	it	pl
 800e79c:	6963      	ldrpl	r3, [r4, #20]
 800e79e:	60a3      	str	r3, [r4, #8]
 800e7a0:	e7f4      	b.n	800e78c <__swsetup_r+0xb0>
 800e7a2:	2000      	movs	r0, #0
 800e7a4:	e7f7      	b.n	800e796 <__swsetup_r+0xba>
 800e7a6:	bf00      	nop
 800e7a8:	20000200 	.word	0x20000200
 800e7ac:	0800f8cc 	.word	0x0800f8cc
 800e7b0:	0800f8ec 	.word	0x0800f8ec
 800e7b4:	0800f8ac 	.word	0x0800f8ac

0800e7b8 <abort>:
 800e7b8:	2006      	movs	r0, #6
 800e7ba:	b508      	push	{r3, lr}
 800e7bc:	f000 fa52 	bl	800ec64 <raise>
 800e7c0:	2001      	movs	r0, #1
 800e7c2:	f7f3 fe58 	bl	8002476 <_exit>
	...

0800e7c8 <__sflush_r>:
 800e7c8:	898a      	ldrh	r2, [r1, #12]
 800e7ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7ce:	4605      	mov	r5, r0
 800e7d0:	0710      	lsls	r0, r2, #28
 800e7d2:	460c      	mov	r4, r1
 800e7d4:	d458      	bmi.n	800e888 <__sflush_r+0xc0>
 800e7d6:	684b      	ldr	r3, [r1, #4]
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	dc05      	bgt.n	800e7e8 <__sflush_r+0x20>
 800e7dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	dc02      	bgt.n	800e7e8 <__sflush_r+0x20>
 800e7e2:	2000      	movs	r0, #0
 800e7e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e7ea:	2e00      	cmp	r6, #0
 800e7ec:	d0f9      	beq.n	800e7e2 <__sflush_r+0x1a>
 800e7ee:	2300      	movs	r3, #0
 800e7f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e7f4:	682f      	ldr	r7, [r5, #0]
 800e7f6:	602b      	str	r3, [r5, #0]
 800e7f8:	d032      	beq.n	800e860 <__sflush_r+0x98>
 800e7fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e7fc:	89a3      	ldrh	r3, [r4, #12]
 800e7fe:	075a      	lsls	r2, r3, #29
 800e800:	d505      	bpl.n	800e80e <__sflush_r+0x46>
 800e802:	6863      	ldr	r3, [r4, #4]
 800e804:	1ac0      	subs	r0, r0, r3
 800e806:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e808:	b10b      	cbz	r3, 800e80e <__sflush_r+0x46>
 800e80a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e80c:	1ac0      	subs	r0, r0, r3
 800e80e:	2300      	movs	r3, #0
 800e810:	4602      	mov	r2, r0
 800e812:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e814:	4628      	mov	r0, r5
 800e816:	6a21      	ldr	r1, [r4, #32]
 800e818:	47b0      	blx	r6
 800e81a:	1c43      	adds	r3, r0, #1
 800e81c:	89a3      	ldrh	r3, [r4, #12]
 800e81e:	d106      	bne.n	800e82e <__sflush_r+0x66>
 800e820:	6829      	ldr	r1, [r5, #0]
 800e822:	291d      	cmp	r1, #29
 800e824:	d82c      	bhi.n	800e880 <__sflush_r+0xb8>
 800e826:	4a2a      	ldr	r2, [pc, #168]	; (800e8d0 <__sflush_r+0x108>)
 800e828:	40ca      	lsrs	r2, r1
 800e82a:	07d6      	lsls	r6, r2, #31
 800e82c:	d528      	bpl.n	800e880 <__sflush_r+0xb8>
 800e82e:	2200      	movs	r2, #0
 800e830:	6062      	str	r2, [r4, #4]
 800e832:	6922      	ldr	r2, [r4, #16]
 800e834:	04d9      	lsls	r1, r3, #19
 800e836:	6022      	str	r2, [r4, #0]
 800e838:	d504      	bpl.n	800e844 <__sflush_r+0x7c>
 800e83a:	1c42      	adds	r2, r0, #1
 800e83c:	d101      	bne.n	800e842 <__sflush_r+0x7a>
 800e83e:	682b      	ldr	r3, [r5, #0]
 800e840:	b903      	cbnz	r3, 800e844 <__sflush_r+0x7c>
 800e842:	6560      	str	r0, [r4, #84]	; 0x54
 800e844:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e846:	602f      	str	r7, [r5, #0]
 800e848:	2900      	cmp	r1, #0
 800e84a:	d0ca      	beq.n	800e7e2 <__sflush_r+0x1a>
 800e84c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e850:	4299      	cmp	r1, r3
 800e852:	d002      	beq.n	800e85a <__sflush_r+0x92>
 800e854:	4628      	mov	r0, r5
 800e856:	f7ff fae9 	bl	800de2c <_free_r>
 800e85a:	2000      	movs	r0, #0
 800e85c:	6360      	str	r0, [r4, #52]	; 0x34
 800e85e:	e7c1      	b.n	800e7e4 <__sflush_r+0x1c>
 800e860:	6a21      	ldr	r1, [r4, #32]
 800e862:	2301      	movs	r3, #1
 800e864:	4628      	mov	r0, r5
 800e866:	47b0      	blx	r6
 800e868:	1c41      	adds	r1, r0, #1
 800e86a:	d1c7      	bne.n	800e7fc <__sflush_r+0x34>
 800e86c:	682b      	ldr	r3, [r5, #0]
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d0c4      	beq.n	800e7fc <__sflush_r+0x34>
 800e872:	2b1d      	cmp	r3, #29
 800e874:	d001      	beq.n	800e87a <__sflush_r+0xb2>
 800e876:	2b16      	cmp	r3, #22
 800e878:	d101      	bne.n	800e87e <__sflush_r+0xb6>
 800e87a:	602f      	str	r7, [r5, #0]
 800e87c:	e7b1      	b.n	800e7e2 <__sflush_r+0x1a>
 800e87e:	89a3      	ldrh	r3, [r4, #12]
 800e880:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e884:	81a3      	strh	r3, [r4, #12]
 800e886:	e7ad      	b.n	800e7e4 <__sflush_r+0x1c>
 800e888:	690f      	ldr	r7, [r1, #16]
 800e88a:	2f00      	cmp	r7, #0
 800e88c:	d0a9      	beq.n	800e7e2 <__sflush_r+0x1a>
 800e88e:	0793      	lsls	r3, r2, #30
 800e890:	bf18      	it	ne
 800e892:	2300      	movne	r3, #0
 800e894:	680e      	ldr	r6, [r1, #0]
 800e896:	bf08      	it	eq
 800e898:	694b      	ldreq	r3, [r1, #20]
 800e89a:	eba6 0807 	sub.w	r8, r6, r7
 800e89e:	600f      	str	r7, [r1, #0]
 800e8a0:	608b      	str	r3, [r1, #8]
 800e8a2:	f1b8 0f00 	cmp.w	r8, #0
 800e8a6:	dd9c      	ble.n	800e7e2 <__sflush_r+0x1a>
 800e8a8:	4643      	mov	r3, r8
 800e8aa:	463a      	mov	r2, r7
 800e8ac:	4628      	mov	r0, r5
 800e8ae:	6a21      	ldr	r1, [r4, #32]
 800e8b0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e8b2:	47b0      	blx	r6
 800e8b4:	2800      	cmp	r0, #0
 800e8b6:	dc06      	bgt.n	800e8c6 <__sflush_r+0xfe>
 800e8b8:	89a3      	ldrh	r3, [r4, #12]
 800e8ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e8be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e8c2:	81a3      	strh	r3, [r4, #12]
 800e8c4:	e78e      	b.n	800e7e4 <__sflush_r+0x1c>
 800e8c6:	4407      	add	r7, r0
 800e8c8:	eba8 0800 	sub.w	r8, r8, r0
 800e8cc:	e7e9      	b.n	800e8a2 <__sflush_r+0xda>
 800e8ce:	bf00      	nop
 800e8d0:	20400001 	.word	0x20400001

0800e8d4 <_fflush_r>:
 800e8d4:	b538      	push	{r3, r4, r5, lr}
 800e8d6:	690b      	ldr	r3, [r1, #16]
 800e8d8:	4605      	mov	r5, r0
 800e8da:	460c      	mov	r4, r1
 800e8dc:	b913      	cbnz	r3, 800e8e4 <_fflush_r+0x10>
 800e8de:	2500      	movs	r5, #0
 800e8e0:	4628      	mov	r0, r5
 800e8e2:	bd38      	pop	{r3, r4, r5, pc}
 800e8e4:	b118      	cbz	r0, 800e8ee <_fflush_r+0x1a>
 800e8e6:	6983      	ldr	r3, [r0, #24]
 800e8e8:	b90b      	cbnz	r3, 800e8ee <_fflush_r+0x1a>
 800e8ea:	f000 f887 	bl	800e9fc <__sinit>
 800e8ee:	4b14      	ldr	r3, [pc, #80]	; (800e940 <_fflush_r+0x6c>)
 800e8f0:	429c      	cmp	r4, r3
 800e8f2:	d11b      	bne.n	800e92c <_fflush_r+0x58>
 800e8f4:	686c      	ldr	r4, [r5, #4]
 800e8f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d0ef      	beq.n	800e8de <_fflush_r+0xa>
 800e8fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e900:	07d0      	lsls	r0, r2, #31
 800e902:	d404      	bmi.n	800e90e <_fflush_r+0x3a>
 800e904:	0599      	lsls	r1, r3, #22
 800e906:	d402      	bmi.n	800e90e <_fflush_r+0x3a>
 800e908:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e90a:	f000 f915 	bl	800eb38 <__retarget_lock_acquire_recursive>
 800e90e:	4628      	mov	r0, r5
 800e910:	4621      	mov	r1, r4
 800e912:	f7ff ff59 	bl	800e7c8 <__sflush_r>
 800e916:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e918:	4605      	mov	r5, r0
 800e91a:	07da      	lsls	r2, r3, #31
 800e91c:	d4e0      	bmi.n	800e8e0 <_fflush_r+0xc>
 800e91e:	89a3      	ldrh	r3, [r4, #12]
 800e920:	059b      	lsls	r3, r3, #22
 800e922:	d4dd      	bmi.n	800e8e0 <_fflush_r+0xc>
 800e924:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e926:	f000 f908 	bl	800eb3a <__retarget_lock_release_recursive>
 800e92a:	e7d9      	b.n	800e8e0 <_fflush_r+0xc>
 800e92c:	4b05      	ldr	r3, [pc, #20]	; (800e944 <_fflush_r+0x70>)
 800e92e:	429c      	cmp	r4, r3
 800e930:	d101      	bne.n	800e936 <_fflush_r+0x62>
 800e932:	68ac      	ldr	r4, [r5, #8]
 800e934:	e7df      	b.n	800e8f6 <_fflush_r+0x22>
 800e936:	4b04      	ldr	r3, [pc, #16]	; (800e948 <_fflush_r+0x74>)
 800e938:	429c      	cmp	r4, r3
 800e93a:	bf08      	it	eq
 800e93c:	68ec      	ldreq	r4, [r5, #12]
 800e93e:	e7da      	b.n	800e8f6 <_fflush_r+0x22>
 800e940:	0800f8cc 	.word	0x0800f8cc
 800e944:	0800f8ec 	.word	0x0800f8ec
 800e948:	0800f8ac 	.word	0x0800f8ac

0800e94c <std>:
 800e94c:	2300      	movs	r3, #0
 800e94e:	b510      	push	{r4, lr}
 800e950:	4604      	mov	r4, r0
 800e952:	e9c0 3300 	strd	r3, r3, [r0]
 800e956:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e95a:	6083      	str	r3, [r0, #8]
 800e95c:	8181      	strh	r1, [r0, #12]
 800e95e:	6643      	str	r3, [r0, #100]	; 0x64
 800e960:	81c2      	strh	r2, [r0, #14]
 800e962:	6183      	str	r3, [r0, #24]
 800e964:	4619      	mov	r1, r3
 800e966:	2208      	movs	r2, #8
 800e968:	305c      	adds	r0, #92	; 0x5c
 800e96a:	f7fd fba1 	bl	800c0b0 <memset>
 800e96e:	4b05      	ldr	r3, [pc, #20]	; (800e984 <std+0x38>)
 800e970:	6224      	str	r4, [r4, #32]
 800e972:	6263      	str	r3, [r4, #36]	; 0x24
 800e974:	4b04      	ldr	r3, [pc, #16]	; (800e988 <std+0x3c>)
 800e976:	62a3      	str	r3, [r4, #40]	; 0x28
 800e978:	4b04      	ldr	r3, [pc, #16]	; (800e98c <std+0x40>)
 800e97a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e97c:	4b04      	ldr	r3, [pc, #16]	; (800e990 <std+0x44>)
 800e97e:	6323      	str	r3, [r4, #48]	; 0x30
 800e980:	bd10      	pop	{r4, pc}
 800e982:	bf00      	nop
 800e984:	0800ec9d 	.word	0x0800ec9d
 800e988:	0800ecbf 	.word	0x0800ecbf
 800e98c:	0800ecf7 	.word	0x0800ecf7
 800e990:	0800ed1b 	.word	0x0800ed1b

0800e994 <_cleanup_r>:
 800e994:	4901      	ldr	r1, [pc, #4]	; (800e99c <_cleanup_r+0x8>)
 800e996:	f000 b8af 	b.w	800eaf8 <_fwalk_reent>
 800e99a:	bf00      	nop
 800e99c:	0800e8d5 	.word	0x0800e8d5

0800e9a0 <__sfmoreglue>:
 800e9a0:	b570      	push	{r4, r5, r6, lr}
 800e9a2:	2568      	movs	r5, #104	; 0x68
 800e9a4:	1e4a      	subs	r2, r1, #1
 800e9a6:	4355      	muls	r5, r2
 800e9a8:	460e      	mov	r6, r1
 800e9aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e9ae:	f7ff fa89 	bl	800dec4 <_malloc_r>
 800e9b2:	4604      	mov	r4, r0
 800e9b4:	b140      	cbz	r0, 800e9c8 <__sfmoreglue+0x28>
 800e9b6:	2100      	movs	r1, #0
 800e9b8:	e9c0 1600 	strd	r1, r6, [r0]
 800e9bc:	300c      	adds	r0, #12
 800e9be:	60a0      	str	r0, [r4, #8]
 800e9c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e9c4:	f7fd fb74 	bl	800c0b0 <memset>
 800e9c8:	4620      	mov	r0, r4
 800e9ca:	bd70      	pop	{r4, r5, r6, pc}

0800e9cc <__sfp_lock_acquire>:
 800e9cc:	4801      	ldr	r0, [pc, #4]	; (800e9d4 <__sfp_lock_acquire+0x8>)
 800e9ce:	f000 b8b3 	b.w	800eb38 <__retarget_lock_acquire_recursive>
 800e9d2:	bf00      	nop
 800e9d4:	20000fac 	.word	0x20000fac

0800e9d8 <__sfp_lock_release>:
 800e9d8:	4801      	ldr	r0, [pc, #4]	; (800e9e0 <__sfp_lock_release+0x8>)
 800e9da:	f000 b8ae 	b.w	800eb3a <__retarget_lock_release_recursive>
 800e9de:	bf00      	nop
 800e9e0:	20000fac 	.word	0x20000fac

0800e9e4 <__sinit_lock_acquire>:
 800e9e4:	4801      	ldr	r0, [pc, #4]	; (800e9ec <__sinit_lock_acquire+0x8>)
 800e9e6:	f000 b8a7 	b.w	800eb38 <__retarget_lock_acquire_recursive>
 800e9ea:	bf00      	nop
 800e9ec:	20000fa7 	.word	0x20000fa7

0800e9f0 <__sinit_lock_release>:
 800e9f0:	4801      	ldr	r0, [pc, #4]	; (800e9f8 <__sinit_lock_release+0x8>)
 800e9f2:	f000 b8a2 	b.w	800eb3a <__retarget_lock_release_recursive>
 800e9f6:	bf00      	nop
 800e9f8:	20000fa7 	.word	0x20000fa7

0800e9fc <__sinit>:
 800e9fc:	b510      	push	{r4, lr}
 800e9fe:	4604      	mov	r4, r0
 800ea00:	f7ff fff0 	bl	800e9e4 <__sinit_lock_acquire>
 800ea04:	69a3      	ldr	r3, [r4, #24]
 800ea06:	b11b      	cbz	r3, 800ea10 <__sinit+0x14>
 800ea08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea0c:	f7ff bff0 	b.w	800e9f0 <__sinit_lock_release>
 800ea10:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ea14:	6523      	str	r3, [r4, #80]	; 0x50
 800ea16:	4b13      	ldr	r3, [pc, #76]	; (800ea64 <__sinit+0x68>)
 800ea18:	4a13      	ldr	r2, [pc, #76]	; (800ea68 <__sinit+0x6c>)
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	62a2      	str	r2, [r4, #40]	; 0x28
 800ea1e:	42a3      	cmp	r3, r4
 800ea20:	bf08      	it	eq
 800ea22:	2301      	moveq	r3, #1
 800ea24:	4620      	mov	r0, r4
 800ea26:	bf08      	it	eq
 800ea28:	61a3      	streq	r3, [r4, #24]
 800ea2a:	f000 f81f 	bl	800ea6c <__sfp>
 800ea2e:	6060      	str	r0, [r4, #4]
 800ea30:	4620      	mov	r0, r4
 800ea32:	f000 f81b 	bl	800ea6c <__sfp>
 800ea36:	60a0      	str	r0, [r4, #8]
 800ea38:	4620      	mov	r0, r4
 800ea3a:	f000 f817 	bl	800ea6c <__sfp>
 800ea3e:	2200      	movs	r2, #0
 800ea40:	2104      	movs	r1, #4
 800ea42:	60e0      	str	r0, [r4, #12]
 800ea44:	6860      	ldr	r0, [r4, #4]
 800ea46:	f7ff ff81 	bl	800e94c <std>
 800ea4a:	2201      	movs	r2, #1
 800ea4c:	2109      	movs	r1, #9
 800ea4e:	68a0      	ldr	r0, [r4, #8]
 800ea50:	f7ff ff7c 	bl	800e94c <std>
 800ea54:	2202      	movs	r2, #2
 800ea56:	2112      	movs	r1, #18
 800ea58:	68e0      	ldr	r0, [r4, #12]
 800ea5a:	f7ff ff77 	bl	800e94c <std>
 800ea5e:	2301      	movs	r3, #1
 800ea60:	61a3      	str	r3, [r4, #24]
 800ea62:	e7d1      	b.n	800ea08 <__sinit+0xc>
 800ea64:	0800f52c 	.word	0x0800f52c
 800ea68:	0800e995 	.word	0x0800e995

0800ea6c <__sfp>:
 800ea6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea6e:	4607      	mov	r7, r0
 800ea70:	f7ff ffac 	bl	800e9cc <__sfp_lock_acquire>
 800ea74:	4b1e      	ldr	r3, [pc, #120]	; (800eaf0 <__sfp+0x84>)
 800ea76:	681e      	ldr	r6, [r3, #0]
 800ea78:	69b3      	ldr	r3, [r6, #24]
 800ea7a:	b913      	cbnz	r3, 800ea82 <__sfp+0x16>
 800ea7c:	4630      	mov	r0, r6
 800ea7e:	f7ff ffbd 	bl	800e9fc <__sinit>
 800ea82:	3648      	adds	r6, #72	; 0x48
 800ea84:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ea88:	3b01      	subs	r3, #1
 800ea8a:	d503      	bpl.n	800ea94 <__sfp+0x28>
 800ea8c:	6833      	ldr	r3, [r6, #0]
 800ea8e:	b30b      	cbz	r3, 800ead4 <__sfp+0x68>
 800ea90:	6836      	ldr	r6, [r6, #0]
 800ea92:	e7f7      	b.n	800ea84 <__sfp+0x18>
 800ea94:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ea98:	b9d5      	cbnz	r5, 800ead0 <__sfp+0x64>
 800ea9a:	4b16      	ldr	r3, [pc, #88]	; (800eaf4 <__sfp+0x88>)
 800ea9c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800eaa0:	60e3      	str	r3, [r4, #12]
 800eaa2:	6665      	str	r5, [r4, #100]	; 0x64
 800eaa4:	f000 f847 	bl	800eb36 <__retarget_lock_init_recursive>
 800eaa8:	f7ff ff96 	bl	800e9d8 <__sfp_lock_release>
 800eaac:	2208      	movs	r2, #8
 800eaae:	4629      	mov	r1, r5
 800eab0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800eab4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800eab8:	6025      	str	r5, [r4, #0]
 800eaba:	61a5      	str	r5, [r4, #24]
 800eabc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800eac0:	f7fd faf6 	bl	800c0b0 <memset>
 800eac4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800eac8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800eacc:	4620      	mov	r0, r4
 800eace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ead0:	3468      	adds	r4, #104	; 0x68
 800ead2:	e7d9      	b.n	800ea88 <__sfp+0x1c>
 800ead4:	2104      	movs	r1, #4
 800ead6:	4638      	mov	r0, r7
 800ead8:	f7ff ff62 	bl	800e9a0 <__sfmoreglue>
 800eadc:	4604      	mov	r4, r0
 800eade:	6030      	str	r0, [r6, #0]
 800eae0:	2800      	cmp	r0, #0
 800eae2:	d1d5      	bne.n	800ea90 <__sfp+0x24>
 800eae4:	f7ff ff78 	bl	800e9d8 <__sfp_lock_release>
 800eae8:	230c      	movs	r3, #12
 800eaea:	603b      	str	r3, [r7, #0]
 800eaec:	e7ee      	b.n	800eacc <__sfp+0x60>
 800eaee:	bf00      	nop
 800eaf0:	0800f52c 	.word	0x0800f52c
 800eaf4:	ffff0001 	.word	0xffff0001

0800eaf8 <_fwalk_reent>:
 800eaf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eafc:	4606      	mov	r6, r0
 800eafe:	4688      	mov	r8, r1
 800eb00:	2700      	movs	r7, #0
 800eb02:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800eb06:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800eb0a:	f1b9 0901 	subs.w	r9, r9, #1
 800eb0e:	d505      	bpl.n	800eb1c <_fwalk_reent+0x24>
 800eb10:	6824      	ldr	r4, [r4, #0]
 800eb12:	2c00      	cmp	r4, #0
 800eb14:	d1f7      	bne.n	800eb06 <_fwalk_reent+0xe>
 800eb16:	4638      	mov	r0, r7
 800eb18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb1c:	89ab      	ldrh	r3, [r5, #12]
 800eb1e:	2b01      	cmp	r3, #1
 800eb20:	d907      	bls.n	800eb32 <_fwalk_reent+0x3a>
 800eb22:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800eb26:	3301      	adds	r3, #1
 800eb28:	d003      	beq.n	800eb32 <_fwalk_reent+0x3a>
 800eb2a:	4629      	mov	r1, r5
 800eb2c:	4630      	mov	r0, r6
 800eb2e:	47c0      	blx	r8
 800eb30:	4307      	orrs	r7, r0
 800eb32:	3568      	adds	r5, #104	; 0x68
 800eb34:	e7e9      	b.n	800eb0a <_fwalk_reent+0x12>

0800eb36 <__retarget_lock_init_recursive>:
 800eb36:	4770      	bx	lr

0800eb38 <__retarget_lock_acquire_recursive>:
 800eb38:	4770      	bx	lr

0800eb3a <__retarget_lock_release_recursive>:
 800eb3a:	4770      	bx	lr

0800eb3c <__swhatbuf_r>:
 800eb3c:	b570      	push	{r4, r5, r6, lr}
 800eb3e:	460e      	mov	r6, r1
 800eb40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb44:	4614      	mov	r4, r2
 800eb46:	2900      	cmp	r1, #0
 800eb48:	461d      	mov	r5, r3
 800eb4a:	b096      	sub	sp, #88	; 0x58
 800eb4c:	da07      	bge.n	800eb5e <__swhatbuf_r+0x22>
 800eb4e:	2300      	movs	r3, #0
 800eb50:	602b      	str	r3, [r5, #0]
 800eb52:	89b3      	ldrh	r3, [r6, #12]
 800eb54:	061a      	lsls	r2, r3, #24
 800eb56:	d410      	bmi.n	800eb7a <__swhatbuf_r+0x3e>
 800eb58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eb5c:	e00e      	b.n	800eb7c <__swhatbuf_r+0x40>
 800eb5e:	466a      	mov	r2, sp
 800eb60:	f000 f902 	bl	800ed68 <_fstat_r>
 800eb64:	2800      	cmp	r0, #0
 800eb66:	dbf2      	blt.n	800eb4e <__swhatbuf_r+0x12>
 800eb68:	9a01      	ldr	r2, [sp, #4]
 800eb6a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800eb6e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800eb72:	425a      	negs	r2, r3
 800eb74:	415a      	adcs	r2, r3
 800eb76:	602a      	str	r2, [r5, #0]
 800eb78:	e7ee      	b.n	800eb58 <__swhatbuf_r+0x1c>
 800eb7a:	2340      	movs	r3, #64	; 0x40
 800eb7c:	2000      	movs	r0, #0
 800eb7e:	6023      	str	r3, [r4, #0]
 800eb80:	b016      	add	sp, #88	; 0x58
 800eb82:	bd70      	pop	{r4, r5, r6, pc}

0800eb84 <__smakebuf_r>:
 800eb84:	898b      	ldrh	r3, [r1, #12]
 800eb86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800eb88:	079d      	lsls	r5, r3, #30
 800eb8a:	4606      	mov	r6, r0
 800eb8c:	460c      	mov	r4, r1
 800eb8e:	d507      	bpl.n	800eba0 <__smakebuf_r+0x1c>
 800eb90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800eb94:	6023      	str	r3, [r4, #0]
 800eb96:	6123      	str	r3, [r4, #16]
 800eb98:	2301      	movs	r3, #1
 800eb9a:	6163      	str	r3, [r4, #20]
 800eb9c:	b002      	add	sp, #8
 800eb9e:	bd70      	pop	{r4, r5, r6, pc}
 800eba0:	466a      	mov	r2, sp
 800eba2:	ab01      	add	r3, sp, #4
 800eba4:	f7ff ffca 	bl	800eb3c <__swhatbuf_r>
 800eba8:	9900      	ldr	r1, [sp, #0]
 800ebaa:	4605      	mov	r5, r0
 800ebac:	4630      	mov	r0, r6
 800ebae:	f7ff f989 	bl	800dec4 <_malloc_r>
 800ebb2:	b948      	cbnz	r0, 800ebc8 <__smakebuf_r+0x44>
 800ebb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ebb8:	059a      	lsls	r2, r3, #22
 800ebba:	d4ef      	bmi.n	800eb9c <__smakebuf_r+0x18>
 800ebbc:	f023 0303 	bic.w	r3, r3, #3
 800ebc0:	f043 0302 	orr.w	r3, r3, #2
 800ebc4:	81a3      	strh	r3, [r4, #12]
 800ebc6:	e7e3      	b.n	800eb90 <__smakebuf_r+0xc>
 800ebc8:	4b0d      	ldr	r3, [pc, #52]	; (800ec00 <__smakebuf_r+0x7c>)
 800ebca:	62b3      	str	r3, [r6, #40]	; 0x28
 800ebcc:	89a3      	ldrh	r3, [r4, #12]
 800ebce:	6020      	str	r0, [r4, #0]
 800ebd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ebd4:	81a3      	strh	r3, [r4, #12]
 800ebd6:	9b00      	ldr	r3, [sp, #0]
 800ebd8:	6120      	str	r0, [r4, #16]
 800ebda:	6163      	str	r3, [r4, #20]
 800ebdc:	9b01      	ldr	r3, [sp, #4]
 800ebde:	b15b      	cbz	r3, 800ebf8 <__smakebuf_r+0x74>
 800ebe0:	4630      	mov	r0, r6
 800ebe2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ebe6:	f000 f8d1 	bl	800ed8c <_isatty_r>
 800ebea:	b128      	cbz	r0, 800ebf8 <__smakebuf_r+0x74>
 800ebec:	89a3      	ldrh	r3, [r4, #12]
 800ebee:	f023 0303 	bic.w	r3, r3, #3
 800ebf2:	f043 0301 	orr.w	r3, r3, #1
 800ebf6:	81a3      	strh	r3, [r4, #12]
 800ebf8:	89a0      	ldrh	r0, [r4, #12]
 800ebfa:	4305      	orrs	r5, r0
 800ebfc:	81a5      	strh	r5, [r4, #12]
 800ebfe:	e7cd      	b.n	800eb9c <__smakebuf_r+0x18>
 800ec00:	0800e995 	.word	0x0800e995

0800ec04 <_malloc_usable_size_r>:
 800ec04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ec08:	1f18      	subs	r0, r3, #4
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	bfbc      	itt	lt
 800ec0e:	580b      	ldrlt	r3, [r1, r0]
 800ec10:	18c0      	addlt	r0, r0, r3
 800ec12:	4770      	bx	lr

0800ec14 <_raise_r>:
 800ec14:	291f      	cmp	r1, #31
 800ec16:	b538      	push	{r3, r4, r5, lr}
 800ec18:	4604      	mov	r4, r0
 800ec1a:	460d      	mov	r5, r1
 800ec1c:	d904      	bls.n	800ec28 <_raise_r+0x14>
 800ec1e:	2316      	movs	r3, #22
 800ec20:	6003      	str	r3, [r0, #0]
 800ec22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ec26:	bd38      	pop	{r3, r4, r5, pc}
 800ec28:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ec2a:	b112      	cbz	r2, 800ec32 <_raise_r+0x1e>
 800ec2c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ec30:	b94b      	cbnz	r3, 800ec46 <_raise_r+0x32>
 800ec32:	4620      	mov	r0, r4
 800ec34:	f000 f830 	bl	800ec98 <_getpid_r>
 800ec38:	462a      	mov	r2, r5
 800ec3a:	4601      	mov	r1, r0
 800ec3c:	4620      	mov	r0, r4
 800ec3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ec42:	f000 b817 	b.w	800ec74 <_kill_r>
 800ec46:	2b01      	cmp	r3, #1
 800ec48:	d00a      	beq.n	800ec60 <_raise_r+0x4c>
 800ec4a:	1c59      	adds	r1, r3, #1
 800ec4c:	d103      	bne.n	800ec56 <_raise_r+0x42>
 800ec4e:	2316      	movs	r3, #22
 800ec50:	6003      	str	r3, [r0, #0]
 800ec52:	2001      	movs	r0, #1
 800ec54:	e7e7      	b.n	800ec26 <_raise_r+0x12>
 800ec56:	2400      	movs	r4, #0
 800ec58:	4628      	mov	r0, r5
 800ec5a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ec5e:	4798      	blx	r3
 800ec60:	2000      	movs	r0, #0
 800ec62:	e7e0      	b.n	800ec26 <_raise_r+0x12>

0800ec64 <raise>:
 800ec64:	4b02      	ldr	r3, [pc, #8]	; (800ec70 <raise+0xc>)
 800ec66:	4601      	mov	r1, r0
 800ec68:	6818      	ldr	r0, [r3, #0]
 800ec6a:	f7ff bfd3 	b.w	800ec14 <_raise_r>
 800ec6e:	bf00      	nop
 800ec70:	20000200 	.word	0x20000200

0800ec74 <_kill_r>:
 800ec74:	b538      	push	{r3, r4, r5, lr}
 800ec76:	2300      	movs	r3, #0
 800ec78:	4d06      	ldr	r5, [pc, #24]	; (800ec94 <_kill_r+0x20>)
 800ec7a:	4604      	mov	r4, r0
 800ec7c:	4608      	mov	r0, r1
 800ec7e:	4611      	mov	r1, r2
 800ec80:	602b      	str	r3, [r5, #0]
 800ec82:	f7f3 fbe8 	bl	8002456 <_kill>
 800ec86:	1c43      	adds	r3, r0, #1
 800ec88:	d102      	bne.n	800ec90 <_kill_r+0x1c>
 800ec8a:	682b      	ldr	r3, [r5, #0]
 800ec8c:	b103      	cbz	r3, 800ec90 <_kill_r+0x1c>
 800ec8e:	6023      	str	r3, [r4, #0]
 800ec90:	bd38      	pop	{r3, r4, r5, pc}
 800ec92:	bf00      	nop
 800ec94:	20000fa0 	.word	0x20000fa0

0800ec98 <_getpid_r>:
 800ec98:	f7f3 bbd6 	b.w	8002448 <_getpid>

0800ec9c <__sread>:
 800ec9c:	b510      	push	{r4, lr}
 800ec9e:	460c      	mov	r4, r1
 800eca0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eca4:	f000 f894 	bl	800edd0 <_read_r>
 800eca8:	2800      	cmp	r0, #0
 800ecaa:	bfab      	itete	ge
 800ecac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ecae:	89a3      	ldrhlt	r3, [r4, #12]
 800ecb0:	181b      	addge	r3, r3, r0
 800ecb2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ecb6:	bfac      	ite	ge
 800ecb8:	6563      	strge	r3, [r4, #84]	; 0x54
 800ecba:	81a3      	strhlt	r3, [r4, #12]
 800ecbc:	bd10      	pop	{r4, pc}

0800ecbe <__swrite>:
 800ecbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecc2:	461f      	mov	r7, r3
 800ecc4:	898b      	ldrh	r3, [r1, #12]
 800ecc6:	4605      	mov	r5, r0
 800ecc8:	05db      	lsls	r3, r3, #23
 800ecca:	460c      	mov	r4, r1
 800eccc:	4616      	mov	r6, r2
 800ecce:	d505      	bpl.n	800ecdc <__swrite+0x1e>
 800ecd0:	2302      	movs	r3, #2
 800ecd2:	2200      	movs	r2, #0
 800ecd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ecd8:	f000 f868 	bl	800edac <_lseek_r>
 800ecdc:	89a3      	ldrh	r3, [r4, #12]
 800ecde:	4632      	mov	r2, r6
 800ece0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ece4:	81a3      	strh	r3, [r4, #12]
 800ece6:	4628      	mov	r0, r5
 800ece8:	463b      	mov	r3, r7
 800ecea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ecee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ecf2:	f000 b817 	b.w	800ed24 <_write_r>

0800ecf6 <__sseek>:
 800ecf6:	b510      	push	{r4, lr}
 800ecf8:	460c      	mov	r4, r1
 800ecfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ecfe:	f000 f855 	bl	800edac <_lseek_r>
 800ed02:	1c43      	adds	r3, r0, #1
 800ed04:	89a3      	ldrh	r3, [r4, #12]
 800ed06:	bf15      	itete	ne
 800ed08:	6560      	strne	r0, [r4, #84]	; 0x54
 800ed0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ed0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ed12:	81a3      	strheq	r3, [r4, #12]
 800ed14:	bf18      	it	ne
 800ed16:	81a3      	strhne	r3, [r4, #12]
 800ed18:	bd10      	pop	{r4, pc}

0800ed1a <__sclose>:
 800ed1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed1e:	f000 b813 	b.w	800ed48 <_close_r>
	...

0800ed24 <_write_r>:
 800ed24:	b538      	push	{r3, r4, r5, lr}
 800ed26:	4604      	mov	r4, r0
 800ed28:	4608      	mov	r0, r1
 800ed2a:	4611      	mov	r1, r2
 800ed2c:	2200      	movs	r2, #0
 800ed2e:	4d05      	ldr	r5, [pc, #20]	; (800ed44 <_write_r+0x20>)
 800ed30:	602a      	str	r2, [r5, #0]
 800ed32:	461a      	mov	r2, r3
 800ed34:	f7f3 fbc6 	bl	80024c4 <_write>
 800ed38:	1c43      	adds	r3, r0, #1
 800ed3a:	d102      	bne.n	800ed42 <_write_r+0x1e>
 800ed3c:	682b      	ldr	r3, [r5, #0]
 800ed3e:	b103      	cbz	r3, 800ed42 <_write_r+0x1e>
 800ed40:	6023      	str	r3, [r4, #0]
 800ed42:	bd38      	pop	{r3, r4, r5, pc}
 800ed44:	20000fa0 	.word	0x20000fa0

0800ed48 <_close_r>:
 800ed48:	b538      	push	{r3, r4, r5, lr}
 800ed4a:	2300      	movs	r3, #0
 800ed4c:	4d05      	ldr	r5, [pc, #20]	; (800ed64 <_close_r+0x1c>)
 800ed4e:	4604      	mov	r4, r0
 800ed50:	4608      	mov	r0, r1
 800ed52:	602b      	str	r3, [r5, #0]
 800ed54:	f7f3 fbd2 	bl	80024fc <_close>
 800ed58:	1c43      	adds	r3, r0, #1
 800ed5a:	d102      	bne.n	800ed62 <_close_r+0x1a>
 800ed5c:	682b      	ldr	r3, [r5, #0]
 800ed5e:	b103      	cbz	r3, 800ed62 <_close_r+0x1a>
 800ed60:	6023      	str	r3, [r4, #0]
 800ed62:	bd38      	pop	{r3, r4, r5, pc}
 800ed64:	20000fa0 	.word	0x20000fa0

0800ed68 <_fstat_r>:
 800ed68:	b538      	push	{r3, r4, r5, lr}
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	4d06      	ldr	r5, [pc, #24]	; (800ed88 <_fstat_r+0x20>)
 800ed6e:	4604      	mov	r4, r0
 800ed70:	4608      	mov	r0, r1
 800ed72:	4611      	mov	r1, r2
 800ed74:	602b      	str	r3, [r5, #0]
 800ed76:	f7f3 fbcc 	bl	8002512 <_fstat>
 800ed7a:	1c43      	adds	r3, r0, #1
 800ed7c:	d102      	bne.n	800ed84 <_fstat_r+0x1c>
 800ed7e:	682b      	ldr	r3, [r5, #0]
 800ed80:	b103      	cbz	r3, 800ed84 <_fstat_r+0x1c>
 800ed82:	6023      	str	r3, [r4, #0]
 800ed84:	bd38      	pop	{r3, r4, r5, pc}
 800ed86:	bf00      	nop
 800ed88:	20000fa0 	.word	0x20000fa0

0800ed8c <_isatty_r>:
 800ed8c:	b538      	push	{r3, r4, r5, lr}
 800ed8e:	2300      	movs	r3, #0
 800ed90:	4d05      	ldr	r5, [pc, #20]	; (800eda8 <_isatty_r+0x1c>)
 800ed92:	4604      	mov	r4, r0
 800ed94:	4608      	mov	r0, r1
 800ed96:	602b      	str	r3, [r5, #0]
 800ed98:	f7f3 fbca 	bl	8002530 <_isatty>
 800ed9c:	1c43      	adds	r3, r0, #1
 800ed9e:	d102      	bne.n	800eda6 <_isatty_r+0x1a>
 800eda0:	682b      	ldr	r3, [r5, #0]
 800eda2:	b103      	cbz	r3, 800eda6 <_isatty_r+0x1a>
 800eda4:	6023      	str	r3, [r4, #0]
 800eda6:	bd38      	pop	{r3, r4, r5, pc}
 800eda8:	20000fa0 	.word	0x20000fa0

0800edac <_lseek_r>:
 800edac:	b538      	push	{r3, r4, r5, lr}
 800edae:	4604      	mov	r4, r0
 800edb0:	4608      	mov	r0, r1
 800edb2:	4611      	mov	r1, r2
 800edb4:	2200      	movs	r2, #0
 800edb6:	4d05      	ldr	r5, [pc, #20]	; (800edcc <_lseek_r+0x20>)
 800edb8:	602a      	str	r2, [r5, #0]
 800edba:	461a      	mov	r2, r3
 800edbc:	f7f3 fbc2 	bl	8002544 <_lseek>
 800edc0:	1c43      	adds	r3, r0, #1
 800edc2:	d102      	bne.n	800edca <_lseek_r+0x1e>
 800edc4:	682b      	ldr	r3, [r5, #0]
 800edc6:	b103      	cbz	r3, 800edca <_lseek_r+0x1e>
 800edc8:	6023      	str	r3, [r4, #0]
 800edca:	bd38      	pop	{r3, r4, r5, pc}
 800edcc:	20000fa0 	.word	0x20000fa0

0800edd0 <_read_r>:
 800edd0:	b538      	push	{r3, r4, r5, lr}
 800edd2:	4604      	mov	r4, r0
 800edd4:	4608      	mov	r0, r1
 800edd6:	4611      	mov	r1, r2
 800edd8:	2200      	movs	r2, #0
 800edda:	4d05      	ldr	r5, [pc, #20]	; (800edf0 <_read_r+0x20>)
 800eddc:	602a      	str	r2, [r5, #0]
 800edde:	461a      	mov	r2, r3
 800ede0:	f7f3 fb53 	bl	800248a <_read>
 800ede4:	1c43      	adds	r3, r0, #1
 800ede6:	d102      	bne.n	800edee <_read_r+0x1e>
 800ede8:	682b      	ldr	r3, [r5, #0]
 800edea:	b103      	cbz	r3, 800edee <_read_r+0x1e>
 800edec:	6023      	str	r3, [r4, #0]
 800edee:	bd38      	pop	{r3, r4, r5, pc}
 800edf0:	20000fa0 	.word	0x20000fa0
 800edf4:	00000000 	.word	0x00000000

0800edf8 <atan>:
 800edf8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edfc:	4bb6      	ldr	r3, [pc, #728]	; (800f0d8 <atan+0x2e0>)
 800edfe:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800ee02:	429e      	cmp	r6, r3
 800ee04:	4604      	mov	r4, r0
 800ee06:	460d      	mov	r5, r1
 800ee08:	468b      	mov	fp, r1
 800ee0a:	dd17      	ble.n	800ee3c <atan+0x44>
 800ee0c:	4bb3      	ldr	r3, [pc, #716]	; (800f0dc <atan+0x2e4>)
 800ee0e:	429e      	cmp	r6, r3
 800ee10:	dc01      	bgt.n	800ee16 <atan+0x1e>
 800ee12:	d109      	bne.n	800ee28 <atan+0x30>
 800ee14:	b140      	cbz	r0, 800ee28 <atan+0x30>
 800ee16:	4622      	mov	r2, r4
 800ee18:	462b      	mov	r3, r5
 800ee1a:	4620      	mov	r0, r4
 800ee1c:	4629      	mov	r1, r5
 800ee1e:	f7f1 f9a5 	bl	800016c <__adddf3>
 800ee22:	4604      	mov	r4, r0
 800ee24:	460d      	mov	r5, r1
 800ee26:	e005      	b.n	800ee34 <atan+0x3c>
 800ee28:	f1bb 0f00 	cmp.w	fp, #0
 800ee2c:	4cac      	ldr	r4, [pc, #688]	; (800f0e0 <atan+0x2e8>)
 800ee2e:	f300 8121 	bgt.w	800f074 <atan+0x27c>
 800ee32:	4dac      	ldr	r5, [pc, #688]	; (800f0e4 <atan+0x2ec>)
 800ee34:	4620      	mov	r0, r4
 800ee36:	4629      	mov	r1, r5
 800ee38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee3c:	4baa      	ldr	r3, [pc, #680]	; (800f0e8 <atan+0x2f0>)
 800ee3e:	429e      	cmp	r6, r3
 800ee40:	dc11      	bgt.n	800ee66 <atan+0x6e>
 800ee42:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800ee46:	429e      	cmp	r6, r3
 800ee48:	dc0a      	bgt.n	800ee60 <atan+0x68>
 800ee4a:	a38b      	add	r3, pc, #556	; (adr r3, 800f078 <atan+0x280>)
 800ee4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee50:	f7f1 f98c 	bl	800016c <__adddf3>
 800ee54:	2200      	movs	r2, #0
 800ee56:	4ba5      	ldr	r3, [pc, #660]	; (800f0ec <atan+0x2f4>)
 800ee58:	f7f1 fdce 	bl	80009f8 <__aeabi_dcmpgt>
 800ee5c:	2800      	cmp	r0, #0
 800ee5e:	d1e9      	bne.n	800ee34 <atan+0x3c>
 800ee60:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800ee64:	e027      	b.n	800eeb6 <atan+0xbe>
 800ee66:	f000 f951 	bl	800f10c <fabs>
 800ee6a:	4ba1      	ldr	r3, [pc, #644]	; (800f0f0 <atan+0x2f8>)
 800ee6c:	4604      	mov	r4, r0
 800ee6e:	429e      	cmp	r6, r3
 800ee70:	460d      	mov	r5, r1
 800ee72:	f300 80b8 	bgt.w	800efe6 <atan+0x1ee>
 800ee76:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800ee7a:	429e      	cmp	r6, r3
 800ee7c:	f300 809c 	bgt.w	800efb8 <atan+0x1c0>
 800ee80:	4602      	mov	r2, r0
 800ee82:	460b      	mov	r3, r1
 800ee84:	f7f1 f972 	bl	800016c <__adddf3>
 800ee88:	2200      	movs	r2, #0
 800ee8a:	4b98      	ldr	r3, [pc, #608]	; (800f0ec <atan+0x2f4>)
 800ee8c:	f7f1 f96c 	bl	8000168 <__aeabi_dsub>
 800ee90:	2200      	movs	r2, #0
 800ee92:	4606      	mov	r6, r0
 800ee94:	460f      	mov	r7, r1
 800ee96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ee9a:	4620      	mov	r0, r4
 800ee9c:	4629      	mov	r1, r5
 800ee9e:	f7f1 f965 	bl	800016c <__adddf3>
 800eea2:	4602      	mov	r2, r0
 800eea4:	460b      	mov	r3, r1
 800eea6:	4630      	mov	r0, r6
 800eea8:	4639      	mov	r1, r7
 800eeaa:	f7f1 fc3f 	bl	800072c <__aeabi_ddiv>
 800eeae:	f04f 0a00 	mov.w	sl, #0
 800eeb2:	4604      	mov	r4, r0
 800eeb4:	460d      	mov	r5, r1
 800eeb6:	4622      	mov	r2, r4
 800eeb8:	462b      	mov	r3, r5
 800eeba:	4620      	mov	r0, r4
 800eebc:	4629      	mov	r1, r5
 800eebe:	f7f1 fb0b 	bl	80004d8 <__aeabi_dmul>
 800eec2:	4602      	mov	r2, r0
 800eec4:	460b      	mov	r3, r1
 800eec6:	4680      	mov	r8, r0
 800eec8:	4689      	mov	r9, r1
 800eeca:	f7f1 fb05 	bl	80004d8 <__aeabi_dmul>
 800eece:	a36c      	add	r3, pc, #432	; (adr r3, 800f080 <atan+0x288>)
 800eed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eed4:	4606      	mov	r6, r0
 800eed6:	460f      	mov	r7, r1
 800eed8:	f7f1 fafe 	bl	80004d8 <__aeabi_dmul>
 800eedc:	a36a      	add	r3, pc, #424	; (adr r3, 800f088 <atan+0x290>)
 800eede:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eee2:	f7f1 f943 	bl	800016c <__adddf3>
 800eee6:	4632      	mov	r2, r6
 800eee8:	463b      	mov	r3, r7
 800eeea:	f7f1 faf5 	bl	80004d8 <__aeabi_dmul>
 800eeee:	a368      	add	r3, pc, #416	; (adr r3, 800f090 <atan+0x298>)
 800eef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eef4:	f7f1 f93a 	bl	800016c <__adddf3>
 800eef8:	4632      	mov	r2, r6
 800eefa:	463b      	mov	r3, r7
 800eefc:	f7f1 faec 	bl	80004d8 <__aeabi_dmul>
 800ef00:	a365      	add	r3, pc, #404	; (adr r3, 800f098 <atan+0x2a0>)
 800ef02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef06:	f7f1 f931 	bl	800016c <__adddf3>
 800ef0a:	4632      	mov	r2, r6
 800ef0c:	463b      	mov	r3, r7
 800ef0e:	f7f1 fae3 	bl	80004d8 <__aeabi_dmul>
 800ef12:	a363      	add	r3, pc, #396	; (adr r3, 800f0a0 <atan+0x2a8>)
 800ef14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef18:	f7f1 f928 	bl	800016c <__adddf3>
 800ef1c:	4632      	mov	r2, r6
 800ef1e:	463b      	mov	r3, r7
 800ef20:	f7f1 fada 	bl	80004d8 <__aeabi_dmul>
 800ef24:	a360      	add	r3, pc, #384	; (adr r3, 800f0a8 <atan+0x2b0>)
 800ef26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef2a:	f7f1 f91f 	bl	800016c <__adddf3>
 800ef2e:	4642      	mov	r2, r8
 800ef30:	464b      	mov	r3, r9
 800ef32:	f7f1 fad1 	bl	80004d8 <__aeabi_dmul>
 800ef36:	a35e      	add	r3, pc, #376	; (adr r3, 800f0b0 <atan+0x2b8>)
 800ef38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef3c:	4680      	mov	r8, r0
 800ef3e:	4689      	mov	r9, r1
 800ef40:	4630      	mov	r0, r6
 800ef42:	4639      	mov	r1, r7
 800ef44:	f7f1 fac8 	bl	80004d8 <__aeabi_dmul>
 800ef48:	a35b      	add	r3, pc, #364	; (adr r3, 800f0b8 <atan+0x2c0>)
 800ef4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef4e:	f7f1 f90b 	bl	8000168 <__aeabi_dsub>
 800ef52:	4632      	mov	r2, r6
 800ef54:	463b      	mov	r3, r7
 800ef56:	f7f1 fabf 	bl	80004d8 <__aeabi_dmul>
 800ef5a:	a359      	add	r3, pc, #356	; (adr r3, 800f0c0 <atan+0x2c8>)
 800ef5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef60:	f7f1 f902 	bl	8000168 <__aeabi_dsub>
 800ef64:	4632      	mov	r2, r6
 800ef66:	463b      	mov	r3, r7
 800ef68:	f7f1 fab6 	bl	80004d8 <__aeabi_dmul>
 800ef6c:	a356      	add	r3, pc, #344	; (adr r3, 800f0c8 <atan+0x2d0>)
 800ef6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef72:	f7f1 f8f9 	bl	8000168 <__aeabi_dsub>
 800ef76:	4632      	mov	r2, r6
 800ef78:	463b      	mov	r3, r7
 800ef7a:	f7f1 faad 	bl	80004d8 <__aeabi_dmul>
 800ef7e:	a354      	add	r3, pc, #336	; (adr r3, 800f0d0 <atan+0x2d8>)
 800ef80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef84:	f7f1 f8f0 	bl	8000168 <__aeabi_dsub>
 800ef88:	4632      	mov	r2, r6
 800ef8a:	463b      	mov	r3, r7
 800ef8c:	f7f1 faa4 	bl	80004d8 <__aeabi_dmul>
 800ef90:	4602      	mov	r2, r0
 800ef92:	460b      	mov	r3, r1
 800ef94:	4640      	mov	r0, r8
 800ef96:	4649      	mov	r1, r9
 800ef98:	f7f1 f8e8 	bl	800016c <__adddf3>
 800ef9c:	4622      	mov	r2, r4
 800ef9e:	462b      	mov	r3, r5
 800efa0:	f7f1 fa9a 	bl	80004d8 <__aeabi_dmul>
 800efa4:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800efa8:	4602      	mov	r2, r0
 800efaa:	460b      	mov	r3, r1
 800efac:	d144      	bne.n	800f038 <atan+0x240>
 800efae:	4620      	mov	r0, r4
 800efb0:	4629      	mov	r1, r5
 800efb2:	f7f1 f8d9 	bl	8000168 <__aeabi_dsub>
 800efb6:	e734      	b.n	800ee22 <atan+0x2a>
 800efb8:	2200      	movs	r2, #0
 800efba:	4b4c      	ldr	r3, [pc, #304]	; (800f0ec <atan+0x2f4>)
 800efbc:	f7f1 f8d4 	bl	8000168 <__aeabi_dsub>
 800efc0:	2200      	movs	r2, #0
 800efc2:	4606      	mov	r6, r0
 800efc4:	460f      	mov	r7, r1
 800efc6:	4620      	mov	r0, r4
 800efc8:	4629      	mov	r1, r5
 800efca:	4b48      	ldr	r3, [pc, #288]	; (800f0ec <atan+0x2f4>)
 800efcc:	f7f1 f8ce 	bl	800016c <__adddf3>
 800efd0:	4602      	mov	r2, r0
 800efd2:	460b      	mov	r3, r1
 800efd4:	4630      	mov	r0, r6
 800efd6:	4639      	mov	r1, r7
 800efd8:	f7f1 fba8 	bl	800072c <__aeabi_ddiv>
 800efdc:	f04f 0a01 	mov.w	sl, #1
 800efe0:	4604      	mov	r4, r0
 800efe2:	460d      	mov	r5, r1
 800efe4:	e767      	b.n	800eeb6 <atan+0xbe>
 800efe6:	4b43      	ldr	r3, [pc, #268]	; (800f0f4 <atan+0x2fc>)
 800efe8:	429e      	cmp	r6, r3
 800efea:	da1a      	bge.n	800f022 <atan+0x22a>
 800efec:	2200      	movs	r2, #0
 800efee:	4b42      	ldr	r3, [pc, #264]	; (800f0f8 <atan+0x300>)
 800eff0:	f7f1 f8ba 	bl	8000168 <__aeabi_dsub>
 800eff4:	2200      	movs	r2, #0
 800eff6:	4606      	mov	r6, r0
 800eff8:	460f      	mov	r7, r1
 800effa:	4620      	mov	r0, r4
 800effc:	4629      	mov	r1, r5
 800effe:	4b3e      	ldr	r3, [pc, #248]	; (800f0f8 <atan+0x300>)
 800f000:	f7f1 fa6a 	bl	80004d8 <__aeabi_dmul>
 800f004:	2200      	movs	r2, #0
 800f006:	4b39      	ldr	r3, [pc, #228]	; (800f0ec <atan+0x2f4>)
 800f008:	f7f1 f8b0 	bl	800016c <__adddf3>
 800f00c:	4602      	mov	r2, r0
 800f00e:	460b      	mov	r3, r1
 800f010:	4630      	mov	r0, r6
 800f012:	4639      	mov	r1, r7
 800f014:	f7f1 fb8a 	bl	800072c <__aeabi_ddiv>
 800f018:	f04f 0a02 	mov.w	sl, #2
 800f01c:	4604      	mov	r4, r0
 800f01e:	460d      	mov	r5, r1
 800f020:	e749      	b.n	800eeb6 <atan+0xbe>
 800f022:	4602      	mov	r2, r0
 800f024:	460b      	mov	r3, r1
 800f026:	2000      	movs	r0, #0
 800f028:	4934      	ldr	r1, [pc, #208]	; (800f0fc <atan+0x304>)
 800f02a:	f7f1 fb7f 	bl	800072c <__aeabi_ddiv>
 800f02e:	f04f 0a03 	mov.w	sl, #3
 800f032:	4604      	mov	r4, r0
 800f034:	460d      	mov	r5, r1
 800f036:	e73e      	b.n	800eeb6 <atan+0xbe>
 800f038:	4b31      	ldr	r3, [pc, #196]	; (800f100 <atan+0x308>)
 800f03a:	4e32      	ldr	r6, [pc, #200]	; (800f104 <atan+0x30c>)
 800f03c:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800f040:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800f044:	e9da 2300 	ldrd	r2, r3, [sl]
 800f048:	f7f1 f88e 	bl	8000168 <__aeabi_dsub>
 800f04c:	4622      	mov	r2, r4
 800f04e:	462b      	mov	r3, r5
 800f050:	f7f1 f88a 	bl	8000168 <__aeabi_dsub>
 800f054:	4602      	mov	r2, r0
 800f056:	460b      	mov	r3, r1
 800f058:	e9d6 0100 	ldrd	r0, r1, [r6]
 800f05c:	f7f1 f884 	bl	8000168 <__aeabi_dsub>
 800f060:	f1bb 0f00 	cmp.w	fp, #0
 800f064:	4604      	mov	r4, r0
 800f066:	460d      	mov	r5, r1
 800f068:	f6bf aee4 	bge.w	800ee34 <atan+0x3c>
 800f06c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f070:	461d      	mov	r5, r3
 800f072:	e6df      	b.n	800ee34 <atan+0x3c>
 800f074:	4d24      	ldr	r5, [pc, #144]	; (800f108 <atan+0x310>)
 800f076:	e6dd      	b.n	800ee34 <atan+0x3c>
 800f078:	8800759c 	.word	0x8800759c
 800f07c:	7e37e43c 	.word	0x7e37e43c
 800f080:	e322da11 	.word	0xe322da11
 800f084:	3f90ad3a 	.word	0x3f90ad3a
 800f088:	24760deb 	.word	0x24760deb
 800f08c:	3fa97b4b 	.word	0x3fa97b4b
 800f090:	a0d03d51 	.word	0xa0d03d51
 800f094:	3fb10d66 	.word	0x3fb10d66
 800f098:	c54c206e 	.word	0xc54c206e
 800f09c:	3fb745cd 	.word	0x3fb745cd
 800f0a0:	920083ff 	.word	0x920083ff
 800f0a4:	3fc24924 	.word	0x3fc24924
 800f0a8:	5555550d 	.word	0x5555550d
 800f0ac:	3fd55555 	.word	0x3fd55555
 800f0b0:	2c6a6c2f 	.word	0x2c6a6c2f
 800f0b4:	bfa2b444 	.word	0xbfa2b444
 800f0b8:	52defd9a 	.word	0x52defd9a
 800f0bc:	3fadde2d 	.word	0x3fadde2d
 800f0c0:	af749a6d 	.word	0xaf749a6d
 800f0c4:	3fb3b0f2 	.word	0x3fb3b0f2
 800f0c8:	fe231671 	.word	0xfe231671
 800f0cc:	3fbc71c6 	.word	0x3fbc71c6
 800f0d0:	9998ebc4 	.word	0x9998ebc4
 800f0d4:	3fc99999 	.word	0x3fc99999
 800f0d8:	440fffff 	.word	0x440fffff
 800f0dc:	7ff00000 	.word	0x7ff00000
 800f0e0:	54442d18 	.word	0x54442d18
 800f0e4:	bff921fb 	.word	0xbff921fb
 800f0e8:	3fdbffff 	.word	0x3fdbffff
 800f0ec:	3ff00000 	.word	0x3ff00000
 800f0f0:	3ff2ffff 	.word	0x3ff2ffff
 800f0f4:	40038000 	.word	0x40038000
 800f0f8:	3ff80000 	.word	0x3ff80000
 800f0fc:	bff00000 	.word	0xbff00000
 800f100:	0800f930 	.word	0x0800f930
 800f104:	0800f910 	.word	0x0800f910
 800f108:	3ff921fb 	.word	0x3ff921fb

0800f10c <fabs>:
 800f10c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800f110:	4770      	bx	lr

0800f112 <atan2>:
 800f112:	f000 b82d 	b.w	800f170 <__ieee754_atan2>
	...

0800f118 <sqrt>:
 800f118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f11a:	4606      	mov	r6, r0
 800f11c:	460f      	mov	r7, r1
 800f11e:	f000 f8f9 	bl	800f314 <__ieee754_sqrt>
 800f122:	4b12      	ldr	r3, [pc, #72]	; (800f16c <sqrt+0x54>)
 800f124:	4604      	mov	r4, r0
 800f126:	f993 3000 	ldrsb.w	r3, [r3]
 800f12a:	460d      	mov	r5, r1
 800f12c:	3301      	adds	r3, #1
 800f12e:	d019      	beq.n	800f164 <sqrt+0x4c>
 800f130:	4632      	mov	r2, r6
 800f132:	463b      	mov	r3, r7
 800f134:	4630      	mov	r0, r6
 800f136:	4639      	mov	r1, r7
 800f138:	f7f1 fc68 	bl	8000a0c <__aeabi_dcmpun>
 800f13c:	b990      	cbnz	r0, 800f164 <sqrt+0x4c>
 800f13e:	2200      	movs	r2, #0
 800f140:	2300      	movs	r3, #0
 800f142:	4630      	mov	r0, r6
 800f144:	4639      	mov	r1, r7
 800f146:	f7f1 fc39 	bl	80009bc <__aeabi_dcmplt>
 800f14a:	b158      	cbz	r0, 800f164 <sqrt+0x4c>
 800f14c:	f7fc ff86 	bl	800c05c <__errno>
 800f150:	2321      	movs	r3, #33	; 0x21
 800f152:	2200      	movs	r2, #0
 800f154:	6003      	str	r3, [r0, #0]
 800f156:	2300      	movs	r3, #0
 800f158:	4610      	mov	r0, r2
 800f15a:	4619      	mov	r1, r3
 800f15c:	f7f1 fae6 	bl	800072c <__aeabi_ddiv>
 800f160:	4604      	mov	r4, r0
 800f162:	460d      	mov	r5, r1
 800f164:	4620      	mov	r0, r4
 800f166:	4629      	mov	r1, r5
 800f168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f16a:	bf00      	nop
 800f16c:	200003d0 	.word	0x200003d0

0800f170 <__ieee754_atan2>:
 800f170:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f174:	4692      	mov	sl, r2
 800f176:	4699      	mov	r9, r3
 800f178:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800f17c:	461f      	mov	r7, r3
 800f17e:	f1ca 0300 	rsb	r3, sl, #0
 800f182:	f8df e18c 	ldr.w	lr, [pc, #396]	; 800f310 <__ieee754_atan2+0x1a0>
 800f186:	ea43 030a 	orr.w	r3, r3, sl
 800f18a:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800f18e:	4573      	cmp	r3, lr
 800f190:	4604      	mov	r4, r0
 800f192:	460d      	mov	r5, r1
 800f194:	d808      	bhi.n	800f1a8 <__ieee754_atan2+0x38>
 800f196:	4246      	negs	r6, r0
 800f198:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f19c:	4306      	orrs	r6, r0
 800f19e:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 800f1a2:	4576      	cmp	r6, lr
 800f1a4:	468c      	mov	ip, r1
 800f1a6:	d908      	bls.n	800f1ba <__ieee754_atan2+0x4a>
 800f1a8:	4652      	mov	r2, sl
 800f1aa:	464b      	mov	r3, r9
 800f1ac:	4620      	mov	r0, r4
 800f1ae:	4629      	mov	r1, r5
 800f1b0:	f7f0 ffdc 	bl	800016c <__adddf3>
 800f1b4:	4604      	mov	r4, r0
 800f1b6:	460d      	mov	r5, r1
 800f1b8:	e019      	b.n	800f1ee <__ieee754_atan2+0x7e>
 800f1ba:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 800f1be:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 800f1c2:	ea56 060a 	orrs.w	r6, r6, sl
 800f1c6:	d103      	bne.n	800f1d0 <__ieee754_atan2+0x60>
 800f1c8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1cc:	f7ff be14 	b.w	800edf8 <atan>
 800f1d0:	17be      	asrs	r6, r7, #30
 800f1d2:	f006 0602 	and.w	r6, r6, #2
 800f1d6:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800f1da:	ea53 0100 	orrs.w	r1, r3, r0
 800f1de:	d10a      	bne.n	800f1f6 <__ieee754_atan2+0x86>
 800f1e0:	2e02      	cmp	r6, #2
 800f1e2:	d067      	beq.n	800f2b4 <__ieee754_atan2+0x144>
 800f1e4:	2e03      	cmp	r6, #3
 800f1e6:	d102      	bne.n	800f1ee <__ieee754_atan2+0x7e>
 800f1e8:	a53b      	add	r5, pc, #236	; (adr r5, 800f2d8 <__ieee754_atan2+0x168>)
 800f1ea:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f1ee:	4620      	mov	r0, r4
 800f1f0:	4629      	mov	r1, r5
 800f1f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1f6:	ea52 010a 	orrs.w	r1, r2, sl
 800f1fa:	d106      	bne.n	800f20a <__ieee754_atan2+0x9a>
 800f1fc:	f1bc 0f00 	cmp.w	ip, #0
 800f200:	da63      	bge.n	800f2ca <__ieee754_atan2+0x15a>
 800f202:	a537      	add	r5, pc, #220	; (adr r5, 800f2e0 <__ieee754_atan2+0x170>)
 800f204:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f208:	e7f1      	b.n	800f1ee <__ieee754_atan2+0x7e>
 800f20a:	4572      	cmp	r2, lr
 800f20c:	d10f      	bne.n	800f22e <__ieee754_atan2+0xbe>
 800f20e:	4293      	cmp	r3, r2
 800f210:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 800f214:	d107      	bne.n	800f226 <__ieee754_atan2+0xb6>
 800f216:	2e02      	cmp	r6, #2
 800f218:	d850      	bhi.n	800f2bc <__ieee754_atan2+0x14c>
 800f21a:	4b3b      	ldr	r3, [pc, #236]	; (800f308 <__ieee754_atan2+0x198>)
 800f21c:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800f220:	e9d6 4500 	ldrd	r4, r5, [r6]
 800f224:	e7e3      	b.n	800f1ee <__ieee754_atan2+0x7e>
 800f226:	2e02      	cmp	r6, #2
 800f228:	d84c      	bhi.n	800f2c4 <__ieee754_atan2+0x154>
 800f22a:	4b38      	ldr	r3, [pc, #224]	; (800f30c <__ieee754_atan2+0x19c>)
 800f22c:	e7f6      	b.n	800f21c <__ieee754_atan2+0xac>
 800f22e:	4573      	cmp	r3, lr
 800f230:	d0e4      	beq.n	800f1fc <__ieee754_atan2+0x8c>
 800f232:	1a9b      	subs	r3, r3, r2
 800f234:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800f238:	ea4f 5223 	mov.w	r2, r3, asr #20
 800f23c:	da20      	bge.n	800f280 <__ieee754_atan2+0x110>
 800f23e:	2f00      	cmp	r7, #0
 800f240:	da01      	bge.n	800f246 <__ieee754_atan2+0xd6>
 800f242:	323c      	adds	r2, #60	; 0x3c
 800f244:	db20      	blt.n	800f288 <__ieee754_atan2+0x118>
 800f246:	4652      	mov	r2, sl
 800f248:	464b      	mov	r3, r9
 800f24a:	4620      	mov	r0, r4
 800f24c:	4629      	mov	r1, r5
 800f24e:	f7f1 fa6d 	bl	800072c <__aeabi_ddiv>
 800f252:	f7ff ff5b 	bl	800f10c <fabs>
 800f256:	f7ff fdcf 	bl	800edf8 <atan>
 800f25a:	4604      	mov	r4, r0
 800f25c:	460d      	mov	r5, r1
 800f25e:	2e01      	cmp	r6, #1
 800f260:	d015      	beq.n	800f28e <__ieee754_atan2+0x11e>
 800f262:	2e02      	cmp	r6, #2
 800f264:	d017      	beq.n	800f296 <__ieee754_atan2+0x126>
 800f266:	2e00      	cmp	r6, #0
 800f268:	d0c1      	beq.n	800f1ee <__ieee754_atan2+0x7e>
 800f26a:	a31f      	add	r3, pc, #124	; (adr r3, 800f2e8 <__ieee754_atan2+0x178>)
 800f26c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f270:	4620      	mov	r0, r4
 800f272:	4629      	mov	r1, r5
 800f274:	f7f0 ff78 	bl	8000168 <__aeabi_dsub>
 800f278:	a31d      	add	r3, pc, #116	; (adr r3, 800f2f0 <__ieee754_atan2+0x180>)
 800f27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f27e:	e016      	b.n	800f2ae <__ieee754_atan2+0x13e>
 800f280:	a51d      	add	r5, pc, #116	; (adr r5, 800f2f8 <__ieee754_atan2+0x188>)
 800f282:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f286:	e7ea      	b.n	800f25e <__ieee754_atan2+0xee>
 800f288:	2400      	movs	r4, #0
 800f28a:	2500      	movs	r5, #0
 800f28c:	e7e7      	b.n	800f25e <__ieee754_atan2+0xee>
 800f28e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800f292:	461d      	mov	r5, r3
 800f294:	e7ab      	b.n	800f1ee <__ieee754_atan2+0x7e>
 800f296:	a314      	add	r3, pc, #80	; (adr r3, 800f2e8 <__ieee754_atan2+0x178>)
 800f298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f29c:	4620      	mov	r0, r4
 800f29e:	4629      	mov	r1, r5
 800f2a0:	f7f0 ff62 	bl	8000168 <__aeabi_dsub>
 800f2a4:	4602      	mov	r2, r0
 800f2a6:	460b      	mov	r3, r1
 800f2a8:	a111      	add	r1, pc, #68	; (adr r1, 800f2f0 <__ieee754_atan2+0x180>)
 800f2aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f2ae:	f7f0 ff5b 	bl	8000168 <__aeabi_dsub>
 800f2b2:	e77f      	b.n	800f1b4 <__ieee754_atan2+0x44>
 800f2b4:	a50e      	add	r5, pc, #56	; (adr r5, 800f2f0 <__ieee754_atan2+0x180>)
 800f2b6:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f2ba:	e798      	b.n	800f1ee <__ieee754_atan2+0x7e>
 800f2bc:	a510      	add	r5, pc, #64	; (adr r5, 800f300 <__ieee754_atan2+0x190>)
 800f2be:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f2c2:	e794      	b.n	800f1ee <__ieee754_atan2+0x7e>
 800f2c4:	2400      	movs	r4, #0
 800f2c6:	2500      	movs	r5, #0
 800f2c8:	e791      	b.n	800f1ee <__ieee754_atan2+0x7e>
 800f2ca:	a50b      	add	r5, pc, #44	; (adr r5, 800f2f8 <__ieee754_atan2+0x188>)
 800f2cc:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f2d0:	e78d      	b.n	800f1ee <__ieee754_atan2+0x7e>
 800f2d2:	bf00      	nop
 800f2d4:	f3af 8000 	nop.w
 800f2d8:	54442d18 	.word	0x54442d18
 800f2dc:	c00921fb 	.word	0xc00921fb
 800f2e0:	54442d18 	.word	0x54442d18
 800f2e4:	bff921fb 	.word	0xbff921fb
 800f2e8:	33145c07 	.word	0x33145c07
 800f2ec:	3ca1a626 	.word	0x3ca1a626
 800f2f0:	54442d18 	.word	0x54442d18
 800f2f4:	400921fb 	.word	0x400921fb
 800f2f8:	54442d18 	.word	0x54442d18
 800f2fc:	3ff921fb 	.word	0x3ff921fb
 800f300:	54442d18 	.word	0x54442d18
 800f304:	3fe921fb 	.word	0x3fe921fb
 800f308:	0800f950 	.word	0x0800f950
 800f30c:	0800f968 	.word	0x0800f968
 800f310:	7ff00000 	.word	0x7ff00000

0800f314 <__ieee754_sqrt>:
 800f314:	f8df c150 	ldr.w	ip, [pc, #336]	; 800f468 <__ieee754_sqrt+0x154>
 800f318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f31c:	ea3c 0c01 	bics.w	ip, ip, r1
 800f320:	460b      	mov	r3, r1
 800f322:	4606      	mov	r6, r0
 800f324:	460d      	mov	r5, r1
 800f326:	460a      	mov	r2, r1
 800f328:	4607      	mov	r7, r0
 800f32a:	4604      	mov	r4, r0
 800f32c:	d10e      	bne.n	800f34c <__ieee754_sqrt+0x38>
 800f32e:	4602      	mov	r2, r0
 800f330:	f7f1 f8d2 	bl	80004d8 <__aeabi_dmul>
 800f334:	4602      	mov	r2, r0
 800f336:	460b      	mov	r3, r1
 800f338:	4630      	mov	r0, r6
 800f33a:	4629      	mov	r1, r5
 800f33c:	f7f0 ff16 	bl	800016c <__adddf3>
 800f340:	4606      	mov	r6, r0
 800f342:	460d      	mov	r5, r1
 800f344:	4630      	mov	r0, r6
 800f346:	4629      	mov	r1, r5
 800f348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f34c:	2900      	cmp	r1, #0
 800f34e:	dc0d      	bgt.n	800f36c <__ieee754_sqrt+0x58>
 800f350:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800f354:	ea5c 0707 	orrs.w	r7, ip, r7
 800f358:	d0f4      	beq.n	800f344 <__ieee754_sqrt+0x30>
 800f35a:	b139      	cbz	r1, 800f36c <__ieee754_sqrt+0x58>
 800f35c:	4602      	mov	r2, r0
 800f35e:	f7f0 ff03 	bl	8000168 <__aeabi_dsub>
 800f362:	4602      	mov	r2, r0
 800f364:	460b      	mov	r3, r1
 800f366:	f7f1 f9e1 	bl	800072c <__aeabi_ddiv>
 800f36a:	e7e9      	b.n	800f340 <__ieee754_sqrt+0x2c>
 800f36c:	1512      	asrs	r2, r2, #20
 800f36e:	d074      	beq.n	800f45a <__ieee754_sqrt+0x146>
 800f370:	2000      	movs	r0, #0
 800f372:	07d5      	lsls	r5, r2, #31
 800f374:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f378:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 800f37c:	bf5e      	ittt	pl
 800f37e:	0fe3      	lsrpl	r3, r4, #31
 800f380:	0064      	lslpl	r4, r4, #1
 800f382:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 800f386:	0fe3      	lsrs	r3, r4, #31
 800f388:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800f38c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800f390:	2516      	movs	r5, #22
 800f392:	4601      	mov	r1, r0
 800f394:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800f398:	1076      	asrs	r6, r6, #1
 800f39a:	0064      	lsls	r4, r4, #1
 800f39c:	188f      	adds	r7, r1, r2
 800f39e:	429f      	cmp	r7, r3
 800f3a0:	bfde      	ittt	le
 800f3a2:	1bdb      	suble	r3, r3, r7
 800f3a4:	18b9      	addle	r1, r7, r2
 800f3a6:	1880      	addle	r0, r0, r2
 800f3a8:	005b      	lsls	r3, r3, #1
 800f3aa:	3d01      	subs	r5, #1
 800f3ac:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800f3b0:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800f3b4:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800f3b8:	d1f0      	bne.n	800f39c <__ieee754_sqrt+0x88>
 800f3ba:	462a      	mov	r2, r5
 800f3bc:	f04f 0e20 	mov.w	lr, #32
 800f3c0:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800f3c4:	428b      	cmp	r3, r1
 800f3c6:	eb07 0c05 	add.w	ip, r7, r5
 800f3ca:	dc02      	bgt.n	800f3d2 <__ieee754_sqrt+0xbe>
 800f3cc:	d113      	bne.n	800f3f6 <__ieee754_sqrt+0xe2>
 800f3ce:	45a4      	cmp	ip, r4
 800f3d0:	d811      	bhi.n	800f3f6 <__ieee754_sqrt+0xe2>
 800f3d2:	f1bc 0f00 	cmp.w	ip, #0
 800f3d6:	eb0c 0507 	add.w	r5, ip, r7
 800f3da:	da43      	bge.n	800f464 <__ieee754_sqrt+0x150>
 800f3dc:	2d00      	cmp	r5, #0
 800f3de:	db41      	blt.n	800f464 <__ieee754_sqrt+0x150>
 800f3e0:	f101 0801 	add.w	r8, r1, #1
 800f3e4:	1a5b      	subs	r3, r3, r1
 800f3e6:	4641      	mov	r1, r8
 800f3e8:	45a4      	cmp	ip, r4
 800f3ea:	bf88      	it	hi
 800f3ec:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 800f3f0:	eba4 040c 	sub.w	r4, r4, ip
 800f3f4:	443a      	add	r2, r7
 800f3f6:	005b      	lsls	r3, r3, #1
 800f3f8:	f1be 0e01 	subs.w	lr, lr, #1
 800f3fc:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800f400:	ea4f 0757 	mov.w	r7, r7, lsr #1
 800f404:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800f408:	d1dc      	bne.n	800f3c4 <__ieee754_sqrt+0xb0>
 800f40a:	4323      	orrs	r3, r4
 800f40c:	d006      	beq.n	800f41c <__ieee754_sqrt+0x108>
 800f40e:	1c54      	adds	r4, r2, #1
 800f410:	bf0b      	itete	eq
 800f412:	4672      	moveq	r2, lr
 800f414:	3201      	addne	r2, #1
 800f416:	3001      	addeq	r0, #1
 800f418:	f022 0201 	bicne.w	r2, r2, #1
 800f41c:	1043      	asrs	r3, r0, #1
 800f41e:	07c1      	lsls	r1, r0, #31
 800f420:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800f424:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800f428:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800f42c:	bf48      	it	mi
 800f42e:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800f432:	4610      	mov	r0, r2
 800f434:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800f438:	e782      	b.n	800f340 <__ieee754_sqrt+0x2c>
 800f43a:	0ae3      	lsrs	r3, r4, #11
 800f43c:	3915      	subs	r1, #21
 800f43e:	0564      	lsls	r4, r4, #21
 800f440:	2b00      	cmp	r3, #0
 800f442:	d0fa      	beq.n	800f43a <__ieee754_sqrt+0x126>
 800f444:	02de      	lsls	r6, r3, #11
 800f446:	d50a      	bpl.n	800f45e <__ieee754_sqrt+0x14a>
 800f448:	f1c2 0020 	rsb	r0, r2, #32
 800f44c:	fa24 f000 	lsr.w	r0, r4, r0
 800f450:	1e55      	subs	r5, r2, #1
 800f452:	4094      	lsls	r4, r2
 800f454:	4303      	orrs	r3, r0
 800f456:	1b4a      	subs	r2, r1, r5
 800f458:	e78a      	b.n	800f370 <__ieee754_sqrt+0x5c>
 800f45a:	4611      	mov	r1, r2
 800f45c:	e7f0      	b.n	800f440 <__ieee754_sqrt+0x12c>
 800f45e:	005b      	lsls	r3, r3, #1
 800f460:	3201      	adds	r2, #1
 800f462:	e7ef      	b.n	800f444 <__ieee754_sqrt+0x130>
 800f464:	4688      	mov	r8, r1
 800f466:	e7bd      	b.n	800f3e4 <__ieee754_sqrt+0xd0>
 800f468:	7ff00000 	.word	0x7ff00000

0800f46c <_init>:
 800f46c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f46e:	bf00      	nop
 800f470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f472:	bc08      	pop	{r3}
 800f474:	469e      	mov	lr, r3
 800f476:	4770      	bx	lr

0800f478 <_fini>:
 800f478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f47a:	bf00      	nop
 800f47c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f47e:	bc08      	pop	{r3}
 800f480:	469e      	mov	lr, r3
 800f482:	4770      	bx	lr
